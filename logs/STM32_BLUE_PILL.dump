
built/dockercodal/build/STM32_BLUE_PILL:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08006800 l    d  .text	00000000 .text
080060a0 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800cc58 l    d  .preinit_array	00000000 .preinit_array
080060a0 l    d  .boot_init_array	00000000 .boot_init_array
0800cc58 l    d  .init_array	00000000 .init_array
080060a0 l    d  .boot_fini_array	00000000 .boot_fini_array
0800cc60 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
20000540 l    d  .boot_bss	00000000 .boot_bss
2000100c l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 reset_handler.c
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
08000284 l     F .boot_text	00000080 _ZL10timer_tickv
08000304 l     F .boot_text	00000028 _ZL11timer_alarmv
0800032c l     F .boot_text	00000028 _ZL11os_schedulev.part.1
08000354 l     F .boot_text	00000054 target_wait.part.2
080003a8 l     F .boot_text	0000002c target_dmesg_flush.part.3
20000540 l     O .boot_bss	00000004 _ZL10last_flush
2000055c l     O .boot_bss	00000001 _ZL11initialised
20000544 l     O .boot_bss	00000004 _ZL11poll_status
20000548 l     O .boot_bss	00000004 _ZL13tick_callback
2000054c l     O .boot_bss	00000004 _ZL14alarm_callback
20000550 l     O .boot_bss	00000004 _ZL16prev_poll_status
20000554 l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 CortexContextSwitch.s.o
0800061c l       .boot_text	00000000 store_context_complete
0800062e l       .boot_text	00000000 store_stack_complete
08000622 l       .boot_text	00000000 store_stack
08000648 l       .boot_text	00000000 restore_stack_complete
0800063c l       .boot_text	00000000 restore_stack
0800069c l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 flash_common_f.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 pwr_common_v1.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 desig.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 rcc.c
08000a24 l     F .boot_text	00000010 rcc_is_osc_ready.part.0
08000a34 l     F .boot_text	00000010 rcc_osc_on.part.1
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08000bb8 l     F .boot_text	00000034 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_control.c
08000d20 l     F .boot_text	00000052 usb_control_send_chunk
08000d74 l     F .boot_text	00000060 usb_control_request_dispatch
08000dd4 l     F .boot_text	0000007a usb_control_setup_read
08000e50 l     F .boot_text	00000046 usb_control_recv_chunk
00000000 l    df *ABS*	00000000 usb_standard.c
0800103c l     F .boot_text	000000a4 usb_standard_set_configuration
080010e0 l     F .boot_text	0000002c usb_standard_get_configuration
0800110c l     F .boot_text	0000003c usb_standard_get_interface
08001148 l     F .boot_text	00000018 usb_standard_device_get_status
08001160 l     F .boot_text	0000002a usb_standard_endpoint_get_status
0800118c l     F .boot_text	00000010 usb_standard_endpoint_stall
0800119c l     F .boot_text	00000010 usb_standard_endpoint_unstall
080011ac l     F .boot_text	00000030 usb_standard_set_address
080011dc l     F .boot_text	00000052 usb_standard_set_interface
08001230 l     F .boot_text	00000292 usb_standard_get_descriptor
080014c4 l     F .boot_text	00000018 usb_standard_interface_get_status
00000000 l    df *ABS*	00000000 flash_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000560 l     O .boot_bss	00000020 msgQList
20000634 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
20000635 l     O .boot_bss	00000001 nSemaphores
20000580 l     O .boot_bss	00000018 semList
00000000 l    df *ABS*	00000000 os_task.c
20000636 l     O .boot_bss	00000001 nTasks
20000598 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000632 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_event.c
20000624 l     O .boot_bss	0000000e eventList
20000637 l     O .boot_bss	00000001 nEvents
20000014 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 qfplib.S.o
00000001 l       *ABS*	00000000 include_faster
00000001 l       *ABS*	00000000 include_conversions
00000001 l       *ABS*	00000000 include_scientific
08002874 l       .boot_text	00000000 xchxy
0800287c l       .boot_text	00000000 unpackxy
0800288a l       .boot_text	00000000 unpackx
080028b8 l       .boot_text	00000000 packx
080028c6 l       .boot_text	00000000 packx0
0800290a l       .boot_text	00000000 unpackxyalign
08002954 l       .boot_text	00000000 packret
0800295a l       .boot_text	00000000 mul0
080029aa l       .boot_text	00000000 fmul0
080029b2 l       .boot_text	00000000 fdiv_n
080029ea l       .boot_text	00000000 infret
080029f4 l       .boot_text	00000000 fdiv_fast_n
08002aa4 l       .boot_text	00000000 rcpapp
08002a3c l       .boot_text	00000000 div0
08002aac l       .boot_text	00000000 rsqrtapp
08002b06 l       .boot_text	00000000 packretns
08002b1c l       .boot_text	00000000 cordic_start
08002b26 l       .boot_text	00000000 cordic_vstep
08002b2c l       .boot_text	00000000 cordic_rstep
08002b58 l       .boot_text	00000000 cordic_rot
08002b7a l       .boot_text	00000000 cordic_exit
08002b80 l       .boot_text	00000000 cordic_vec
08002ccc l       .boot_text	00000000 pi_q29
08002ccc l       .boot_text	00000000 tab_cc
08002d00 l       .boot_text	00000000 tab_ch
08002d3c l       .boot_text	00000000 qfp_lib_end
00000000 l    df *ABS*	00000000 functions.c
20000638 l     O .boot_bss	0000002e float_usage
00000000 l    df *ABS*	00000000 strtol.c
08003a88 l     F .boot_text	000000f4 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 strcmp.S.o
00000000 l    df *ABS*	00000000 strlen.S.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
08003c88 l     F .boot_text	0000003c _ZL12debug_appendPKcj
08003cc4 l     F .boot_text	00000014 debug_print.part.3
08003cd8 l     F .boot_text	00000098 _Z20debug_flush_internalb.part.2
2000087e l     O .boot_bss	00000001 _ZL10logEnabled
20000668 l     O .boot_bss	00000201 _ZL11debugBuffer
2000086c l     O .boot_bss	00000010 _ZL12output_funcs
2000087c l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000890 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 timer.cpp
20000880 l     O .boot_bss	00000004 _ZL10alarmCount
20000884 l     O .boot_bss	00000004 _ZL8tickFunc
20000888 l     O .boot_bss	00000004 _ZL9alarmFunc
2000088c l     O .boot_bss	00000004 _ZL9tickCount
20000891 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 bootloader.c
20000894 l     O .boot_bss	00000004 cycleCount
20000898 l     O .boot_bss	00000004 last_poll.6350
2000089c l     O .boot_bss	00000004 last_status
200008a0 l     O .boot_bss	00000004 msTimer
200008a4 l     O .boot_bss	00000004 status
200008a8 l     O .boot_bss	00000004 usbd_dev
2000042c l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 usb_conf.c
08004344 l     F .boot_text	00000010 hf2_connected
08004354 l     F .boot_text	00000030 usb_cdc_transmit
08004384 l     F .boot_text	00000010 sof_callback
08004394 l     F .boot_text	0000001c cdc_connected
080043b0 l     F .boot_text	00000050 set_aggregate_callback
08004748 l     F .boot_text	000000c0 aggregate_callback
20000b44 l     O .boot_bss	00000001 cdc_is_connected
200008ac l     O .boot_bss	00000028 config_callback
200008d4 l     O .boot_bss	00000050 control_callback
20000b45 l     O .boot_bss	00000001 hf2_is_connected
20000924 l     O .boot_bss	00000004 last_busy_time
20000928 l     O .boot_bss	00000004 last_frame_time
2000092c l     O .boot_bss	00000019 serial_number
20000a44 l     O .boot_bss	00000100 usbd_control_buffer
20000430 l     O .boot_data	00000008 capabilities
20000438 l     O .boot_data	00000024 usb_strings
08005974 l     O .boot_text	00000009 bos_descriptor
08005980 l     O .boot_text	00000008 cdc_iface_assoc
08005988 l     O .boot_text	00000013 cdcacm_functional_descriptors
0800599c l     O .boot_text	0000000f comm_endp
080059ac l     O .boot_text	00000015 comm_iface
080059c4 l     O .boot_text	0000000d config
08005aec l     O .boot_text	00000030 interfaces
080059d4 l     O .boot_text	0000001e data_endp
080059f4 l     O .boot_text	00000015 data_iface
08005a0c l     O .boot_text	00000012 dev
08005ab4 l     O .boot_text	0000001e hf2_endp
08005ad4 l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08004808 l     F .boot_text	00000028 webusb_set_config
08004830 l     F .boot_text	000000a4 webusb_control_vendor_request
2000094c l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
08004924 l     F .boot_text	0000009c winusb_control_vendor_request
080049c0 l     F .boot_text	00000028 winusb_set_config
080049e8 l     F .boot_text	00000048 winusb_descriptor_request
2000045c l     O .boot_data	000000b2 msos20_descriptor_set
20000510 l     O .boot_data	00000028 winusb_wcid
08005c98 l     O .boot_text	00000092 guid
08005da0 l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 target_stm32f103.c
20000950 l     O .boot_bss	00000004 erase_end.5446
20000954 l     O .boot_bss	00000004 erase_start.5445
20000b46 l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 cdc.c
08004d28 l     F .boot_text	0000000c cdcacm_comm_cb
08004d34 l     F .boot_text	00000068 cdcacm_set_config
08004e54 l     F .boot_text	0000004c cdcacm_data_rx_cb
08004d9c l     F .boot_text	00000064 cdcacm_control_request
20000b47 l     O .boot_bss	00000001 connected
20000958 l     O .boot_bss	00000004 connected_func
2000095c l     O .boot_bss	00000041 rx_buf
08005ec8 l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08004ecc l     F .boot_text	000000b8 pokeSend
08004f84 l     F .boot_text	0000003c hf2_set_config
08004fc0 l     F .boot_text	00000024 hf2_data_tx_cb
08005000 l     F .boot_text	0000035c hf2_data_rx_cb
08004fe4 l     F .boot_text	0000001c assert.part.1
200009a0 l     O .boot_bss	00000004 _usbd_dev
20000b48 l     O .boot_bss	00000001 connected
200009a4 l     O .boot_bss	00000004 connected_func
200009a8 l     O .boot_bss	00000004 pkt.5983
200009ac l     O .boot_bss	00000004 remDataToSend
20000b49 l     O .boot_bss	00000001 remDataToSendFlag
200009b0 l     O .boot_bss	00000004 remDataToSendLength
200009b4 l     O .boot_bss	00000040 rx_buf
200009f4 l     O .boot_bss	00000004 rx_time
200009f8 l     O .boot_bss	00000040 tx_buf
08005edc l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 usb21_standard.c
080053b0 l     F .boot_text	00000028 usb21_set_config
080053d8 l     F .boot_text	000000e0 usb21_standard_get_descriptor
20000a38 l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 ghostfat.c
08005540 l     F .boot_text	0000007c flushFlash
20000a3c l     O .boot_bss	00000004 lastFlush
20000a40 l     O .boot_bss	00000004 ms
2000053c l     O .boot_data	00000001 firstFlush
20000538 l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 application.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 core.cpp
080070d4 l     F .text	00000002 _ZN3pxtL13dtorDoNothingEv
080070d8 l     F .text	00000008 _ZN3pxtL11string_sizeEPNS_11BoxedStringE
080070e0 l     F .text	00000004 _ZN3pxtL11number_sizeEPNS_11BoxedNumberE
080070e4 l     F .text	00000008 _ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE
08007654 l     F .text	0000000e _ZN3pxt7fromIntEi.part.7
080081c4 l     F .text	000000a6 _ZN6numopsL10valCompareEPN3pxt12TValueStructES2_
2000100c l     O .bss	00000004 _ZN3pxtL15handlerBindingsE
20001000 l     O .data	00000004 _ZN3pxtL12random_valueE
0800c420 l     O .text	0000000e _ZN3pxtL10sBooleanTpE
0800c430 l     O .text	00000010 _ZN3pxtL10sUndefinedE
0800c440 l     O .text	0000000a _ZN3pxtL11emptyBufferE
0800c44c l     O .text	00000007 _ZN3pxtL11emptyStringE
0800c454 l     O .text	0000000f _ZN3pxtL11sFunctionTpE
0800c464 l     O .text	00000010 _ZN3pxtL12sUndefinedTpE
0800c474 l     O .text	0000000f _ZN3pxtL4sInfE
0800c484 l     O .text	0000000a _ZN3pxtL4sNaNE
0800c490 l     O .text	00000010 _ZN3pxtL5sMInfE
0800c4a0 l     O .text	0000000b _ZN3pxtL5sNullE
0800c4ac l     O .text	0000000b _ZN3pxtL5sTrueE
0800c4b8 l     O .text	0000000c _ZN3pxtL6sFalseE
0800c4c4 l     O .text	0000000f _ZN3pxtL7sObjectE
0800c4d4 l     O .text	00000011 _ZN3pxtL9sFunctionE
0800c4e8 l     O .text	0000000d _ZN3pxtL9sNumberTpE
0800c4f8 l     O .text	0000000d _ZN3pxtL9sObjectTpE
0800c508 l     O .text	0000000d _ZN3pxtL9sStringTpE
00000000 l    df *ABS*	00000000 advmath.cpp
00000000 l    df *ABS*	00000000 buffer.cpp
08006b94 l     F .text	00000062 _ZN3pxtL9readBytesEPhS0_ibi
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 gc.cpp
08008554 l     F .text	00000040 _ZN3pxtL13getObjectSizeEPNS_9RefObjectE
08008594 l     F .text	00000054 _ZN3pxtL9removePtrEPNS_12TValueStructE
080089c0 l     F .text	000000d0 _ZN3pxtL13allocateBlockEv
08008e20 l     F .text	00000018 _GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
20001010 l     O .bss	00000004 _ZN3pxtL10firstBlockE
20001661 l     O .bss	00000001 _ZN3pxtL11tempRootLenE
20001014 l     O .bss	00000004 _ZN3pxtL6midPtrE
20001018 l     O .bss	00000008 _ZN3pxtL7gcRootsE
20001020 l     O .bss	00000004 _ZN3pxtL8tempRootE
20001024 l     O .bss	00000004 _ZN3pxtL9firstFreeE
20001028 l     O .bss	00000008 _ZN3pxtL9workQueueE
00000000 l    df *ABS*	00000000 loops.cpp
00000000 l    df *ABS*	00000000 pxt.cpp
08008ea8 l     F .text	00000098 _ZN3pxt9LLSegment9setLengthEj.part.5
08008f40 l     F .text	0000001c _ZN3pxt8checkStrEbPKc.part.6
0800c2f0 l     O .text	00000024 _ZN3pxtL13RefMap_vtableE
0800c320 l     O .text	00000024 _ZN3pxtL18RefRefLocal_vtableE
0800c350 l     O .text	00000024 _ZN3pxtL20RefCollection_vtableE
00000000 l    df *ABS*	00000000 codal.cpp
08009504 l     F .text	00000018 _ZN3pxtL10runAction0EPNS_12TValueStructE
0800986c l     F .text	00000058 _GLOBAL__sub_I__ZN3pxt8devTimerE
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 i2c.cpp
08009974 l     F .text	00000040 _ZN4pinsL7initI2CEv.part.0
2000108c l     O .bss	00000004 _ZN4pinsL3i2cE
00000000 l    df *ABS*	00000000 pins.cpp
20001662 l     O .bss	00000001 _ZN3pxtL10numPinPtrsE
20001090 l     O .bss	00000080 _ZN3pxtL6pinPosE
20001110 l     O .bss	00000004 _ZN3pxtL7pinPtrsE
00000000 l    df *ABS*	00000000 pinsAnalog.cpp
00000000 l    df *ABS*	00000000 pinsDigital.cpp
00000000 l    df *ABS*	00000000 pinsPWM.cpp
00000000 l    df *ABS*	00000000 platform.cpp
00000000 l    df *ABS*	00000000 spi.cpp
08009c98 l     F .text	00000054 _ZN4pinsL7initSPIEv.part.0
20001114 l     O .bss	00000004 _ZN4pinsL3spiE
00000000 l    df *ABS*	00000000 usb.cpp
20001118 l     O .bss	00000004 _ZN3pxtL11pSendToUARTE
00000000 l    df *ABS*	00000000 pointers.cpp
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDevice.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
0800a068 l     F .text	00000080 _ZL9logwritenPKci
0800a0e8 l     F .text	0000007c _ZL11logwritenummbb
00000000 l    df *ABS*	00000000 CodalFiber.cpp
0800a268 l     F .text	00000032 _ZL15get_fibers_fromPPPN5codal5FiberEPiS1_
0800a29c l     F .text	0000002e _ZN5codal13dequeue_fiberEPNS_5FiberE.part.0
0800a4dc l     F .text	00000034 _ZL10handle_fobv
0800a7dc l     F .text	00000188 _ZN5codal8scheduleEv.part.3
0800a9f0 l     F .text	0000007c _ZN5codal13release_fiberEv.part.4
20001624 l     O .bss	00000004 _ZN5codalL10messageBusE
20001628 l     O .bss	00000004 _ZN5codalL10sleepQueueE
20001664 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
2000162c l     O .bss	00000004 _ZN5codalL11forkedFiberE
20001630 l     O .bss	00000004 _ZN5codalL8runQueueE
20001634 l     O .bss	00000004 _ZN5codalL9fiberPoolE
20001638 l     O .bss	00000004 _ZN5codalL9idleFiberE
2000163c l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20001665 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001008 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
0800b618 l     F .text	0000002c _ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0
0800b618 l     F .text	0000002c _ZN5codal5EventC2EttmNS_15EventLaunchModeE.part.1
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
0800b8a8 l     F .text	00000024 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1
00000000 l    df *ABS*	00000000 CmSPI.cpp
0800b968 l     F .text	0000004e _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0
0800b9b8 l     F .text	0000005c _ZN5codal3_cm3SPI4initEv.part.1
00000000 l    df *ABS*	00000000 CmTimer.cpp
0800bae8 l     F .text	0000006c _ZN5codal3_cmL10timer_taskEv
20001654 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
20001667 l     O .bss	00000001 _ZN5codal3_cmL15timer_semaphoreE
20001658 l     O .bss	00000001 _ZN5codal3_cmL7contextE
00000000 l    df *ABS*	00000000 CmPinMap.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .boot_data	00000410 impure_data
08002fc8 g     F .boot_text	00000034 __wrap___aeabi_dcmpun
0800bc84 g     F .text	00000038 pinmap_mode
080074c0 g     F .text	00000030 _ZN7String_7indexOfEPN3pxt11BoxedStringES2_i
0800ae24 g     F .text	00000030 _ZN5codal5TimerC1Ev
08006c28 g     F .text	0000004e _ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii
080055bc g     F .boot_text	00000048 flash_write
08007ee8 g     F .text	00000020 _ZN5Math_5roundEPN3pxt12TValueStructE
0800b91c g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800b368 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08002e0c g     F .boot_text	00000030 __wrap___aeabi_ddiv
08009758 g     F .text	00000020 _ZN3pxt16afterProgramPageEv
08009eac  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
080086d4 g     F .text	00000034 _ZN3pxt13gcScanSegmentERNS_7SegmentE
080018a0 g     F .boot_text	00000040 st_usbfs_ep_stall_get
0800a360 g     F .text	00000040 _ZN5codal14scheduler_tickENS_5EventE
080029f2 g     F .boot_text	00000000 qfp_fdiv_fast
0800307c g     F .boot_text	0000001c log
080070b4 g     F .text	00000006 _ZN7control2gcEv
080060a0 g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08006e20 g     F .text	00000106 _ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE
08003060 g     F .boot_text	0000001c sqrt
08000f2c g     F .boot_text	0000009e _usbd_control_out
08009dfc  w    F .text	00000002 _ZN3pxt4decrEPNS_12TValueStructE
0800343c g     F .boot_text	000000a4 cosh
08000534 g     F .boot_text	00000004 tcb_configure_stack_base
08003598 g     F .boot_text	000000a4 asinh
0800b930 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08007094 g     F .text	00000004 _ZN7control13runInParallelEPN3pxt12TValueStructE
080071a0 g     F .text	00000044 _ZN3pxt8mkBufferEPKhi
08000150 g     F .boot_text	00000134 reset_handler
00006800 g       *ABS*	00000000 _bootrom_size
0800051c g     F .boot_text	00000008 fiber_initial_stack_base
20001666 g     O .bss	00000001 heap_count
08004224 g     F .boot_text	00000120 bootloader_start
0800b8dc g     F .text	00000020 _ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE
08009288 g     F .text	00000010 _ZN3pxt11RefRefLocalC1Ev
08000ce8 g     F .boot_text	0000000e usbd_ep_write_packet
08002708 g     F .boot_text	0000005a .hidden __floatdidf
08000d08 g     F .boot_text	00000008 usbd_ep_stall_set
0800b774 g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800cb54 g     O .text	00000048 PinMap_SPI_MOSI
08006cd0 g     F .text	00000080 _ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii
0800ad90 g     F .text	00000014 _ZN5codal8ListenerD2Ev
08009354 g     F .text	00000108 _ZN3pxt11exec_binaryEPj
08000530 g     F .boot_text	00000004 tcb_configure_sp
08000710  w    F .boot_text	00000002 usart3_isr
08009778 g     F .text	00000004 _ZN3pxt15getSerialNumberEv
08004178 g     F .boot_text	00000030 rtc_isr
0800ca64 g     O .text	00000018 _ZTVN5codal3_cm5TimerE
08007fa8 g     F .text	00000130 _ZN3pxt7eq_boolEPNS_12TValueStructES1_
08003e8c g     F .boot_text	00000030 _Z11debug_printi
0800b384 g     F .text	000000b0 _ZN5codal10MessageBusC2Ev
08003ee4 g     F .boot_text	00000018 _Z13debug_printlni
08000710  w    F .boot_text	00000002 tim7_isr
08001bcc g     F .boot_text	0000000c exti_reset_request
20000c54 g     O .boot_bss	00000001 running_tid
2000105c g     O .bss	00000004 _ZN3pxt6deviceE
08000710  w    F .boot_text	00000002 adc1_2_isr
0800b68c g     F .text	00000024 _ZN5codal14EventQueueItemC2ENS_5EventE
08001f84 g     F .boot_text	0000001c os_sem_increment
0800ba44 g     F .text	00000060 _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_
08006bfc g     F .text	00000016 _ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi
08007914 g     F .text	0000000c _ZN5pxtrt13getGlobalsPtrEv
0800053c g     F .boot_text	00000004 get_current_sp
08002ffc g     F .boot_text	0000002c __wrap___aeabi_d2iz
08000710  w    F .boot_text	00000002 tim1_trg_com_isr
08007720 g     F .text	00000010 _ZN6Array_5getAtEPN3pxt13RefCollectionEi
080080ec g     F .text	00000010 _ZN6numops3neqEPN3pxt12TValueStructES2_
0800748c g     F .text	00000034 _ZN7String_6substrEPN3pxt11BoxedStringEii
08009b08 g     F .text	00000010 _ZN3pxt9lookupPinEi
08007690 g     F .text	00000012 _ZN3pxt7fromIntEi
080076c0 g     F .text	0000000a _ZN3pxt8fromBoolEb
0800b6f4 g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
08003bee g     F .boot_text	00000034 memmove
08007eac g     F .text	00000012 _ZN5Math_5floorEPN3pxt12TValueStructE
080077f0 g     F .text	00000008 _ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE
08007730 g     F .text	00000006 _ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
080070d0 g     F .text	00000004 _ZN7control16profilingEnabledEv
08009e1c g     F .text	0000002c _ZN5codal14string_reverseEPc
0800bd2c g     F .text	0000004e _ZN5codal3I2C12readRegisterEthPhib
0800a010 g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
080095d8 g     F .text	00000004 _ZN3pxt8sleep_usEy
08008e60 g     F .text	00000028 _ZN3pxt9RefAction5printEPS0_
08006e04 g     F .text	00000014 _ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_
08002942 g     F .boot_text	00000000 qfp_fadd
08002804 g     F .boot_text	00000070 .hidden __powidf2
080015a8 g     F .boot_text	00000064 _usbd_standard_request
08009118 g     F .text	0000003e _ZN3pxt7Segment3setEjPNS_12TValueStructE
08004a8c g     F .boot_text	00000018 target_set_led
08009e00  w    F .text	00000010 _ZN3pxt12ptrOfLiteralEi
08001e34 g     F .boot_text	00000008 os_tick
08000d18 g     F .boot_text	00000008 usbd_ep_nak_set
08007108 g     F .text	0000004c _ZN3pxt10setBindingEiiPNS_12TValueStructE
08002e3c g     F .boot_text	00000030 __wrap___aeabi_dmul
08000710  w    F .boot_text	00000002 usb_hp_can_tx_isr
08007790 g     F .text	00000004 _ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE
08009220 g     F .text	00000038 _ZN3pxt7Segment5printEv
08009da8 g     F .text	00000002 _ZN3pxt8usb_initEv
08008dc4 g     F .text	00000006 _ZN3pxt13RefCollection4scanEPS0_
08008654 g     F .text	00000038 _ZN3pxt6gcScanEPNS_12TValueStructE
0800b08c  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800a164 g     F .text	000000dc codal_vdmesg
0800293c g     F .boot_text	00000000 qfp_fsub
08007e5c g     F .text	00000012 _ZN5Math_4atanEPN3pxt12TValueStructE
0800bd0c g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
080008ec g     F .boot_text	000000bc flash_erase_page
080038c4 g     F .boot_text	00000088 ceil
0800be10 g     F .text	000000d4 _ZN5codal3I2C4readEtPhib
080004d4 g     F .boot_text	00000010 target_seed_random
08006f28 g     F .text	0000001a _ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE
08009330 g     F .text	0000000c _ZN3pxt12templateHashEv
08000710  w    F .boot_text	00000002 tim6_isr
08004c2c g     F .boot_text	00000004 target_flash_unlock
080060a0 g       *ABS*	00000000 _boot_data_loadaddr
0800383c g     F .boot_text	00000088 floor
0800c260 g     O .text	00000024 _ZN3pxt9number_vtE
0800cc60 g       .init_array	00000000 _etext
08009278 g     F .text	00000010 _ZN3pxt13RefCollectionC1Ev
080009a8 g     F .boot_text	0000007c gpio_set_mode
080078b4 g     F .text	00000014 _ZN5pxtrt6mapGetEPN3pxt6RefMapEj
080060a0 g     O .boot_fini_array	00000004 __boot_fini_array_start
0800a328 g     F .text	00000036 _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800b8dc g     F .text	00000020 _ZN5codal3_cm3PinC2Ei7PinNameNS_13PinCapabilityE
08000710  w    F .boot_text	00000002 usb_wakeup_isr
080080dc g     F .text	00000010 _ZN6numops2eqEPN3pxt12TValueStructES2_
08000710 g     F .boot_text	00000002 blocking_handler
0800a040 g     F .text	00000006 _ZN5codal11CodalDevice5sleepEm
20000c55 g     O .boot_bss	00000001 running
08003fd8 g     F .boot_text	00000020 led_setup
08000710  w    F .boot_text	00000002 tim5_isr
08007ac4 g     F .text	0000002a _ZN6numops4asrsEPN3pxt12TValueStructES2_
08003ec8 g     F .boot_text	0000001c debug_println
200047bc g     O .boot_buf	00000442 hf2_buffer
080082b4 g     F .text	00000022 _ZN6numops2ltEPN3pxt12TValueStructES2_
08000710  w    F .boot_text	00000002 otg_fs_isr
0800054c g     F .boot_text	00000070 test_codal
0800b760 g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
0800bc48 g     F .text	0000003c pinmap_peripheral
08000710  w    F .boot_text	00000002 spi1_isr
08000488 g     F .boot_text	00000020 target_wait_us
080004a8 g     F .boot_text	00000014 target_reset
08003d7c g     F .boot_text	0000004c logger_add_output
08007bec g     F .text	00000026 _ZN6numops4subsEPN3pxt12TValueStructES2_
0800ab94 g     F .text	0000003c _Z18device_create_heapmm
0800796c g     F .text	00000060 _ZN3pxt8toDoubleEPNS_12TValueStructE
08000c94 g     F .boot_text	00000004 usbd_register_sof_callback
08007924 g     F .text	00000048 _ZN3pxt7valTypeEPNS_12TValueStructE
0800abf4 g     F .text	0000008e _Z16device_malloc_injR14HeapDefinition
08004a30 g     F .boot_text	0000005c winusb_setup
0800b868 g     F .text	00000040 _ZN5codal3_cm3Pin7eventOnEi
08003b90 g     F .boot_text	0000001c memcpy
080095bc  w    F .text	00000014 _ZN5codal3_cm5TimerD2Ev
08000710  w    F .boot_text	00000002 exti2_isr
08000710  w    F .boot_text	00000002 dma1_channel6_isr
08007704 g     F .text	00000006 _ZN6Array_9setLengthEPN3pxt13RefCollectionEi
08007084 g     F .text	00000004 _ZN7control15internalOnEventEiiPN3pxt12TValueStructEi
08009cec g     F .text	00000028 _ZN4pins8spiWriteEi
08009b3c g     F .text	00000010 _ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE
20001004 g     O .data	00000004 app_data_test
08000714 g     F .boot_text	00000002 null_handler
080077e4 g     F .text	0000000c _ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE
080092ac g     F .text	00000064 _ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE
20000008 g     O .boot_data	00000004 rcc_ahb_frequency
08002690 g     F .boot_text	00000022 .hidden __floatsidf
0800b6b0 g     F .text	0000001a _ZN5codal22MemberFunctionCallback4fireENS_5EventE
0800c290 g     O .text	00000024 _ZN3pxt9string_vtE
08001f70 g     F .boot_text	00000014 os_sem_decrement
0800ba44 g     F .text	00000060 _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_
0800958c g     F .text	0000000e _ZN3pxt9fiberDoneEPv
08006928 g     F .text	00000174 _ZN6numops5mycvtEdPc
08000544 g     F .boot_text	00000008 tcb_configure_args
2000165c g     O .bss	00000004 app_bss_test
0800535c g     F .boot_text	00000054 hf2_setup
0800c2c0 g     O .text	00000024 _ZN3pxt16RefAction_vtableE
080095d4 g     F .text	00000004 _ZN3pxt8sleep_msEj
08000710  w    F .boot_text	00000002 can_rx1_isr
0800cc60 g       .fini_array	00000000 __fini_array_end
08000710  w    F .boot_text	00000002 dma1_channel5_isr
08009c2c g     F .text	00000018 _ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode
080080fc g     F .text	0000002e _ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi
0800ba14 g     F .text	00000030 _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08006b30 g     F .text	00000012 _ZN5Math_4sinhEPN3pxt12TValueStructE
08009b2c g     F .text	00000006 _ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE
08008c40 g     F .text	00000028 malloc
0800c894 g     O .text	00000024 _ZTVN5codal11CodalDeviceE
08007700 g     F .text	00000004 _ZN6Array_6lengthEPN3pxt13RefCollectionE
08000710  w    F .boot_text	00000002 dma2_channel5_isr
0800ad90 g     F .text	00000014 _ZN5codal8ListenerD1Ev
08008e38 g     F .text	00000004 _ZN5loops7foreverEPN3pxt12TValueStructE
080056fc g     O .boot_text	00000034 st_usbfs_v1_usb_driver
08001d98 g     F .boot_text	00000034 rtc_clear_flag
0800ae54 g     F .text	000000b8 _ZN5codal5Timer8setEventEmttb
08007e20 g     F .text	00000012 _ZN5Math_3tanEPN3pxt12TValueStructE
08008148 g     F .text	00000068 _ZN6numops6toBoolEPN3pxt12TValueStructE
0800a6f8 g     F .text	00000068 _Z14__create_fibermmmi
080005dc g     F .boot_text	0000000c target_set_bootloader_callback
08009258 g     F .text	00000020 _ZN3pxt13RefCollection5printEPS0_
08000710  w    F .boot_text	00000002 usart1_isr
080070bc g     F .text	00000014 _ZN7control8heapDumpEv
0800a2cc g     F .text	0000005c _ZN5codal11list_fibersEPPNS_5FiberE
08009c7c g     F .text	0000001c _Z14cpu_clock_initv
00000844 g       *ABS*	00000000 _bootbuf_size
0800a794 g     F .text	00000048 _ZN5codal4idleEv
08007e70 g     F .text	00000012 _ZN5Math_4asinEPN3pxt12TValueStructE
20000558 g     O .boot_bss	00000004 .hidden __dso_handle
08002670 g     F .boot_text	0000001e .hidden __aeabi_ui2d
0800bcbc g     F .text	00000038 pinmap_cnf
0800903c g     F .text	0000002e _ZN3pxt9LLSegment3setEjPNS_12TValueStructE
08000540 g     F .boot_text	00000004 tcb_get_sp
080014dc g     F .boot_text	00000032 usbd_register_set_config_callback
08001680 g     F .boot_text	00000118 st_usbfs_ep_setup
08000740 g     F .boot_text	00000010 flash_lock
08009a00 g     F .text	00000034 _ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb
080004e4 g     F .boot_text	00000018 target_get_serial
0800b7a8 g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
08008760 g     F .text	00000260 _ZN3pxt2gcEi
080023ec g     F .boot_text	00000000 .hidden __aeabi_drsub
0800b6f0 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
08009c60 g     F .text	0000001c _ZN3pxt13platform_initEv
08001f28 g     F .boot_text	00000034 sem_bin_create
0800aaa0 g     F .text	00000014 _ZN5codal13release_fiberEPv
0800acd0 g     F .text	00000040 device_free
08009018 g     F .text	0000000a _ZN3pxt15deleteRefObjectEPNS_9RefObjectE
08006b44 g     F .text	00000012 _ZN5Math_4coshEPN3pxt12TValueStructE
08009a44  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
08007900 g     F .text	00000014 _ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE
08008e08 g     F .text	00000004 _ZN3pxt13RefCollection6gcsizeEPS0_
08000710  w    F .boot_text	00000002 usage_fault_handler
08000710  w    F .boot_text	00000002 tim8_trg_com_isr
0800bba0 g     F .text	0000002c _ZN5codal3_cm5TimerC1Ev
08009c48 g     F .text	00000014 _ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi
08003f00 g     F .boot_text	00000048 debug_printhex
08000710  w    F .boot_text	00000002 can2_rx0_isr
08007250 g     F .text	0000003c _ZN7String_6charAtEPN3pxt11BoxedStringEi
080098c4 g     F .text	00000064 _ZN3pxt15registerWithDalEiiPNS_12TValueStructEi
0800bd04 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
080020d8 g     F .boot_text	00000040 os_task_highest_prio_ready_task
08000710  w    F .boot_text	00000002 tim1_brk_isr
0800978c g     F .text	0000000c _ZN3pxt16setThreadContextEPNS_13ThreadContextE
08002ae4 g     F .boot_text	00000000 qfp_float2ufix
0800b4ac g     F .text	0000009c _ZN5codal10MessageBus7processERNS_5EventEb
08009624 g     F .text	00000008 _ZN3pxt12waitForEventEii
20001034 g     O .bss	00000004 _ZN3pxt8bytecodeE
0800b08c  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
080077ac g     F .text	00000034 _ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE
08008dd4 g     F .text	00000006 _ZN3pxt11RefRefLocal4scanEPS0_
08002a42 g     F .boot_text	00000000 qfp_fsqrt_fast
08003dc8 g     F .boot_text	00000014 debug_flush
080026b4 g     F .boot_text	00000042 .hidden __extendsfdf2
080048d4 g     F .boot_text	00000050 webusb_setup
080023f8 g     F .boot_text	00000276 .hidden __adddf3
08009940 g     F .text	00000010 _ZN7control16deviceDalVersionEv
08009d54 g     F .text	00000028 _ZN4pins12spiFrequencyEi
0800bcf4 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
0800a978 g     F .text	0000004c _ZN5codal11fiber_sleepEm
0800b5ac g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08001bf0 g     F .boot_text	00000018 rtc_exit_config_mode
08009e10  w    F .text	00000002 _ZN3pxt16startPerfCounterENS_12PerfCountersE
0800c964 g     O .text	0000002c _ZTVN5codal3_cm3I2CE
08000710  w    F .boot_text	00000002 can2_rx1_isr
08000854 g     F .boot_text	00000098 flash_program_half_word
08003fd4 g     F .boot_text	00000004 _ZdlPv
080079cc g     F .text	000000c8 _ZN3pxt6toUIntEPNS_12TValueStructE
0800075c g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
08008dcc g     F .text	00000008 _ZN3pxt9RefAction4scanEPS0_
08007ec0 g     F .text	00000012 _ZN5Math_4ceilEPN3pxt12TValueStructE
08000000 g       .boot_text	00000000 _boot_text
0800bac4 g     F .text	00000024 _ZN5codal3_cm14alarm_callbackEv
08000710  w    F .boot_text	00000002 tim1_cc_isr
0800b034 g     F .text	0000002c _ZN5codal27system_timer_event_every_usEmtt
0800b808 g     F .text	00000028 _ZN5codal3_cm3Pin15getAnalogPeriodEv
0800077c g     F .boot_text	0000001c rcc_periph_clock_enable
08000c98 g     F .boot_text	00000038 _usbd_reset
08002670 g     F .boot_text	0000001e .hidden __floatunsidf
080041dc g     F .boot_text	00000048 bootloader_poll
08007e98 g     F .text	00000012 _ZN5Math_4sqrtEPN3pxt12TValueStructE
08004580 g     F .boot_text	00000050 dump_buffer
0800baa4 g     F .text	00000020 _ZN5codal3_cm5Timer9triggerInEm
08000710  w    F .boot_text	00000002 sdio_isr
08006d90 g     F .text	00000072 _ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii
08007ed4 g     F .text	00000012 _ZN5Math_5truncEPN3pxt12TValueStructE
08007230 g     F .text	0000001e _ZN7String_12fromCharCodeEi
08000fcc g     F .boot_text	0000006e _usbd_control_in
080054f0 g     F .boot_text	00000038 backup_write
08000710  w    F .boot_text	00000002 eth_isr
080091dc g     F .text	00000044 _ZN3pxt7Segment6insertEjPNS_12TValueStructE
08007098 g     F .text	00000004 _ZN7control12waitForEventEii
08008e1c g     F .text	00000004 _ZN3pxt6RefMap6gcsizeEPS0_
0800bd04 g     F .text	00000006 _ZN5codal3I2C5writeEh
2000000c g     O .boot_data	00000004 rcc_apb1_frequency
08002b0c g     F .boot_text	00000000 qfp_ufix2float
08005528 g     F .boot_text	00000018 backup_read
08009b74 g     F .text	00000038 _ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE
20001663 g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
08003b7c g     F .boot_text	00000014 strtol
08002f00 g     F .boot_text	00000030 __wrap___aeabi_dcmplt
08000710  w    F .boot_text	00000002 dma1_channel4_isr
080072f8 g     F .text	00000024 _ZN7String_7compareEPN3pxt11BoxedStringES2_
08000710  w    F .boot_text	00000002 tim8_brk_isr
0800affc g     F .text	0000001c _ZN5codal25system_timer_current_timeEv
08009314 g     F .text	0000001c _ZN3pxt5errorENS_9PXT_PANICEi
08002f94 g     F .boot_text	00000034 __wrap___aeabi_dcmpgt
08000710  w    F .boot_text	00000002 dma2_channel4_5_isr
08009c5c g     F .text	00000004 _ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi
0800b68c g     F .text	00000024 _ZN5codal14EventQueueItemC1ENS_5EventE
08007bb8 g     F .text	0000000c _ZN3pxt7toFloatEPNS_12TValueStructE
20001620 g     O .bss	00000004 _ZN5codal12currentFiberE
08002118 g     F .boot_text	00000060 os_task_release_waiting_task
08002764 g     F .boot_text	0000009e .hidden __aeabi_d2f
0800aff8 g     F .text	00000002 _ZN5codal5TimerD2Ev
080005d0 g     F .boot_text	0000000c target_set_alarm_callback
2000164c g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
0800a784 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
08009ebc g     F .text	00000078 _Z18component_callbackN5codal5EventE
080044ac g     F .boot_text	0000002c get_usb_status
20001668 g       .bss	00000000 _ebss
08006d50 g     F .text	00000040 _ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE
0800b644 g     F .text	0000001c _ZN5codal5EventC1EttNS_15EventLaunchModeE
08001e00 g     F .boot_text	00000034 os_init
08000cd8 g     F .boot_text	0000000e usbd_ep_setup
08007500 g     F .text	00000008 _ZN8Boolean_4bangEi
08007a98 g     F .text	0000002a _ZN6numops4lslsEPN3pxt12TValueStructES2_
080006e2 g       .boot_text	00000000 restore_register_context
080094fc  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08000e98 g     F .boot_text	00000030 usbd_register_control_callback
0800af0c g     F .text	00000028 _ZN5codal5Timer4syncEm
20000000 g     O .boot_data	00000004 hal_data_test
08000710  w    F .boot_text	00000002 pvd_isr
08000cf8 g     F .boot_text	0000000e usbd_ep_read_packet
08008df4 g     F .text	00000012 _ZN3pxt14RefRecord_scanEPNS_9RefRecordE
0800bee4 g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800b660 g     F .text	00000018 _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08008e98 g     F .text	00000010 _ZN3pxt6RefMap5printEPS0_
0800ad10 g     F .text	00000020 calloc
08004b40 g     F .boot_text	00000018 target_manifest_app
08003f6c g     F .boot_text	0000004c platform_setup
08007f88 g     F .text	00000010 _ZN6numops3eqqEPN3pxt12TValueStructES2_
08007718 g     F .text	00000006 _ZN6Array_3popEPN3pxt13RefCollectionE
08009348 g     F .text	0000000c _ZN3pxt13getNumGlobalsEv
08008e18 g     F .text	00000004 _ZN3pxt11RefRefLocal6gcsizeEPS0_
08002ae2 g     F .boot_text	00000000 qfp_float2uint
0800a260  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08002394 g     F .boot_text	0000000c os_event_init
080095dc g     F .text	00000024 _ZN3pxt10runForeverEPNS_12TValueStructE
08008fc8 g     F .text	00000044 _ZN3pxt15mkClassInstanceEPNS_6VTableE
0800731c g     F .text	00000004 _ZN7String_6lengthEPN3pxt11BoxedStringE
20000948 g     O .boot_bss	00000004 usbd_dev
0800708c g     F .text	00000006 _ZN7control10waitMicrosEi
08004ba8 g     F .boot_text	0000007c target_get_startup_mode
080004d0 g     F .boot_text	00000004 target_disable_irq
08003ff8 g     F .boot_text	00000010 led_on
080023f8 g     F .boot_text	00000276 .hidden __aeabi_dadd
0800aa80 g     F .text	00000020 _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08001e3c g     F .boot_text	0000000c os_running
20000c56 g     O .boot_bss	00000001 last_running_task
08009e18  w    F .text	00000002 _ZN3pxt16dumpPerfCountersEv
0800b2dc g     F .text	00000084 _ZN5codal10MessageBusD2Ev
08000714  w    F .boot_text	00000002 sv_call_handler
0800c230 g     O .text	00000024 _ZN3pxt9buffer_vtE
08007064 g     F .text	0000001c _ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi
08000710  w    F .boot_text	00000002 rcc_isr
08002e9c g     F .boot_text	00000030 __wrap___aeabi_dsub
08000000 g     O .boot_text	00000150 vector_table
080007bc g     F .boot_text	00000070 desig_get_unique_id_as_string
080026f8 g     F .boot_text	0000006a .hidden __aeabi_ul2d
080006b2 g       .boot_text	00000000 save_register_context
08002bf6 g     F .boot_text	00000000 qfp_fexp
08007b40 g     F .text	0000001e _ZN6numops4bnotEPN3pxt12TValueStructE
08004514 g     F .boot_text	00000050 aggregate_register_callback
08002be4 g     F .boot_text	00000000 qfp_fcos
08008e88 g     F .text	00000010 _ZN3pxt11RefRefLocal5printEPS0_
08006800 g     F .text	00000118 application_start
08009278 g     F .text	00000010 _ZN3pxt13RefCollectionC2Ev
08009a4c g     F .text	000000a8 _ZN3pxt6getPinEi
08006b80 g     F .text	00000012 _ZN5Math_5acoshEPN3pxt12TValueStructE
08007748 g     F .text	00000010 _ZN3pxt11programSizeEv
08000710  w    F .boot_text	00000002 flash_isr
0800cc60 g       *ABS*	00000000 _data_loadaddr
0800a660 g     F .text	00000098 _ZN5codal19fiber_wake_on_eventEtt
08009950 g     F .text	00000008 _ZN7control19allocateNotifyEventEv
20005000 g       .boot_buf	00000000 end
08000710  w    F .boot_text	00000002 uart4_isr
08007c14 g     F .text	00000058 _ZN6numops4mulsEPN3pxt12TValueStructES2_
08001ce0 g     F .boot_text	0000005c rtc_interrupt_enable
0800b7b8 g     F .text	00000050 _ZN5codal3_cm3Pin15setDigitalValueEi
080041a8 g     F .boot_text	00000030 rtc_alarm_isr
0800709c g     F .text	00000004 _ZN7control18deviceSerialNumberEv
08000710  w    F .boot_text	00000002 exti15_10_isr
080060a0 g     O .boot_init_array	00000004 __boot_init_array_end
0800a650 g     F .text	00000010 _ZN5codal23fiber_scheduler_runningEv
0800a05c  w    F .text	00000006 _ZN5codal11CodalDevice4waitEm
0800af34 g     F .text	000000c2 _ZN5codal5Timer7triggerEv
0800ad30 g     F .text	0000002e device_realloc
0800b714 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
08000538 g     F .boot_text	00000004 tcb_get_stack_base
0800b678 g     F .text	00000012 _ZN5codal5EventC2Ev
08004e00 g     F .boot_text	00000054 cdcadm_transmit
08001ebc g     F .boot_text	00000060 os_msgQ_tick
08000524 g     F .boot_text	00000006 tcb_allocate
08007af0 g     F .text	00000028 _ZN6numops4eorsEPN3pxt12TValueStructES2_
0800c8e0 g     O .text	00000018 _ZTVN5codal5TimerE
0800394c g     F .boot_text	0000013c fmod
0800abd0 g     F .text	00000024 _Z16device_heap_sizeh
080031ac g     F .boot_text	00000034 cos
0800ca18 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800945c g     F .text	0000000c _ZN3pxt5startEv
0800cb9c g     O .text	00000048 PinMap_SPI_NSS
080034e0 g     F .boot_text	000000b8 tanh
08000710  w    F .boot_text	00000002 hard_fault_handler
0800bd7c g     F .text	00000094 _ZN5codal3I2C5writeEtPhib
08000710  w    F .boot_text	00000002 exti1_isr
080076a4 g     F .text	0000001c _ZN3pxt8fromUIntEj
0800b7b0 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
08009964 g     F .text	00000010 _ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv
08002f64 g     F .boot_text	00000030 __wrap___aeabi_dcmpge
08002204 g     F .boot_text	00000098 os_task_tick
0800bbcc g     F .text	0000007c _ZN5codal3_cm5Timer4initEv
08004564 g     F .boot_text	0000001c usb_set_serial_number
080085e8 g     F .text	0000000c _ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
08000710  w    F .boot_text	00000002 i2c1_ev_isr
20001084 g     O .bss	00000008 _ZN3pxt9lastEventE
0800aa6c g     F .text	00000014 _ZN5codal13release_fiberEv
08000798 g     F .boot_text	00000024 rcc_periph_reset_pulse
080029a0 g     F .boot_text	00000000 qfp_fmul
0800cbe4 g     O .text	00000048 PinMap_SPI_SCK
08001924 g     F .boot_text	00000088 st_usbfs_ep_write_packet
08008d94 g     F .text	0000001c _ZN3pxt13registerGCPtrEPNS_12TValueStructE
08001798 g     F .boot_text	00000048 st_usbfs_endpoints_reset
0800a240 g     F .text	0000001e codal_dmesg
08002358 g     F .boot_text	00000014 os_task_internal_state_set
080023f4 g     F .boot_text	0000027a .hidden __aeabi_dsub
08000710  w    F .boot_text	00000002 dma2_channel1_isr
0800b0c4  w    F .text	00000030 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
08009eb4  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
0800ac84 g     F .text	0000004c device_malloc
08002c60 g     F .boot_text	00000000 qfp_fln
08007cf4 g     F .text	00000026 _ZN5Math_3powEPN3pxt12TValueStructES2_
08003d70 g     F .boot_text	0000000c enable_log
08008c04 g     F .text	0000001a _ZN3pxt15gcAllocateArrayEi
08003c32 g     F .boot_text	0000002c strstr
08000714  w    F .boot_text	00000002 pend_sv_handler
08007794 g     F .text	00000004 _ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE
08003190 g     F .boot_text	0000001c sin
080026f8 g     F .boot_text	0000006a .hidden __floatundidf
08003fc8 g     F .boot_text	00000008 __cxa_pure_virtual
0800a3a0 g     F .text	000000e8 _ZN5codal15scheduler_eventENS_5EventE
08001dcc g     F .boot_text	00000030 rtc_check_flag
0800cb0c g     O .text	00000048 PinMap_SPI_MISO
08009dbc g     F .text	0000003c _ZN3pxt9dumpDmesgEv
08000710  w    F .boot_text	00000002 spi2_isr
080031fc g     F .boot_text	00000054 atan2
08008e54 g     F .text	0000000c _ZN3pxt6RefMap7destroyEPS0_
0800a050  w    F .text	00000006 _ZN5codal11CodalDevice5panicEi
0800b718 g     F .text	0000001c _ZN5codal3_cm3Pin14setAnalogValueEi
20001660 g     O .bss	00000001 _ZN3pxt4inGCE
08002e6c g     F .boot_text	00000030 __wrap___aeabi_dadd
080003d4 g     F .boot_text	00000030 target_init
20000cb4 g       .boot_bss	00000000 boot_end
0800a510 g     F .text	00000140 _ZN5codal14scheduler_initERNS_10EventModelE
08002310 g     F .boot_text	00000034 os_task_run
080085f4 g     F .text	00000060 _ZN3pxt16popThreadContextEPNS_13ThreadContextE
0800b6f0 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
08009df8  w    F .text	00000002 _ZN3pxt4incrEPNS_12TValueStructE
08000d10 g     F .boot_text	00000008 usbd_ep_stall_get
08002ecc g     F .boot_text	00000034 __wrap___aeabi_dcmpeq
08002ab8 g     F .boot_text	00000000 qfp_float2int
08000710  w    F .boot_text	00000002 tim8_up_isr
08009468 g     F .text	0000002a _ZN6Array_7isArrayEPN3pxt12TValueStructE
08002c84 g     F .boot_text	00000000 qfp_fatan2
08003104 g     F .boot_text	0000008c pow
08003c5e g     F .boot_text	0000002a strncpy
08003394 g     F .boot_text	000000a8 sinh
080036e8 g     F .boot_text	000000c8 atanh
080030dc g     F .boot_text	00000028 log10
08001f1c g     F .boot_text	0000000c os_sem_init
0800b608 g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
08009b20 g     F .text	0000000c _ZN4pins13pulseDurationEv
08008c68 g     F .text	00000074 realloc
08008c20 g     F .text	0000001e app_alloc
08007b88 g     F .text	0000002e _ZN6numops4lsrsEPN3pxt12TValueStructES2_
0800906c g     F .text	0000001c _ZN3pxt9LLSegment3popEv
08009e14  w    F .text	00000002 _ZN3pxt15stopPerfCounterENS_12PerfCountersE
0800780c g     F .text	0000001e _ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE
08002690 g     F .boot_text	00000022 .hidden __aeabi_i2d
08000710  w    F .boot_text	00000002 dma2_channel2_isr
08009310 g     F .text	00000002 _ZN3pxt13debugMemLeaksEv
0800160c g     F .boot_text	00000014 flash_set_ws
080060a0 g     O .boot_fini_array	00000004 __boot_fini_array_end
08000a54 g     F .boot_text	00000098 rcc_set_rtc_clock_source
0800163c g     F .boot_text	00000044 st_usbfs_set_ep_rx_bufsize
080045d0 g     F .boot_text	00000178 dump_usb_request
080060a0 g       .boot_init_array	00000000 _boot_etext
0800c8f8  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08003bd0 g     F .boot_text	0000001e memcmp
08001fe4 g     F .boot_text	000000f4 task_create
08002b00 g     F .boot_text	00000000 qfp_fix2float
08000ec8 g     F .boot_text	00000064 _usbd_control_setup
080084e4 g     F .text	00000054 _ZN3pxt10failedCastEPNS_12TValueStructE
0800b790 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
08000714  w    F .boot_text	00000002 debug_monitor_handler
08000710  w    F .boot_text	00000002 exti3_isr
08000710  w    F .boot_text	00000002 adc3_isr
080080d8 g     F .text	00000004 _ZN3pxt9switch_eqEPNS_12TValueStructES1_
0800b0a4  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
0800066e g       .boot_text	00000000 save_context
08000710  w    F .boot_text	00000002 tim3_isr
08000718 g     F .boot_text	00000010 scb_reset_system
08002bee g     F .boot_text	00000000 qfp_ftan
08000710  w    F .boot_text	00000002 usart2_isr
08002f30 g     F .boot_text	00000034 __wrap___aeabi_dcmple
080004fc g     F .boot_text	00000020 target_panic
08004c34 g     F .boot_text	000000f4 target_flash_program_array
08009b4c g     F .text	00000006 _ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb
08003ebc g     F .boot_text	0000000a debug_print
08000710  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08006800 g       .text	00000000 _text
08009194 g     F .text	00000048 _ZN3pxt7Segment6removeEj
08008e4c g     F .text	00000008 _ZN3pxt13RefCollection7destroyEPS0_
080005ec g       .boot_text	00000000 swap_context
20004c00 g     O .boot_buf	00000400 flashBuf
08002344 g     F .boot_text	00000014 os_task_internal_state_get
08008290 g     F .text	00000022 _ZN6numops2leEPN3pxt12TValueStructES2_
080023d0 g     F .boot_text	0000000c os_signal_event
0800cc60 g       .fini_array	00000000 __fini_array_start
08000710  w    F .boot_text	00000002 i2c2_er_isr
080070ec g     F .text	0000001c _ZN3pxt11findBindingEii
08009024 g     F .text	00000018 _ZN3pxt15RefRecord_printEPNS_9RefRecordE
08008708 g     F .text	00000058 _ZN3pxt9gcProcessEPNS_12TValueStructE
08006af4 g     F .text	00000012 _ZN5Math_4log2EPN3pxt12TValueStructE
080023a0 g     F .boot_text	00000030 event_create
08001dfc g     F .boot_text	00000002 os_cbkSleep
08008468 g     F .text	0000007c _ZN3pxt8anyPrintEPNS_12TValueStructE
080018e0 g     F .boot_text	00000044 st_usbfs_ep_nak_set
08007df8 g     F .text	00000012 _ZN5Math_3logEPN3pxt12TValueStructE
08008ad8 g     F .text	0000012c _ZN3pxt10gcAllocateEi
08003c22 g     F .boot_text	00000010 memset
20001648 g     O .bss	00000004 _ZN5codal12system_timerE
08006918 g     F .text	0000000a main
08001620 g     F .boot_text	0000000c flash_wait_for_last_operation
0800a760 g     F .text	00000024 _ZN5codal12create_fiberEPFvPvES0_S2_
08002ba2 g     F .boot_text	00000000 qfp_fsin
08000c40 g     F .boot_text	00000054 usbd_init
08007d1c g     F .text	00000026 _ZN5Math_5atan2EPN3pxt12TValueStructES2_
2000111c g     O .bss	00000100 _ZN5codal14CodalComponent10componentsE
0800bee4 g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
08000710  w    F .boot_text	00000002 i2c2_ev_isr
080023dc g     F .boot_text	00000010 os_event_set_signaling_tid
08004c30 g     F .boot_text	00000004 target_flash_lock
08009bac g     F .text	00000080 _ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei
08000710  w    F .boot_text	00000002 uart5_isr
08006ca8 g     F .text	00000026 _ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii
08004144 g     F .boot_text	00000034 platform_set_alarm
20001640 g     O .bss	00000008 heap
20001060 g     O .bss	00000024 _ZN3pxt8devTimerE
20000c58 g     O .boot_bss	0000005b hf2_buffer_mini
0800b950 g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
08007798 g     F .text	00000014 _ZN5pxtrt8mklocRefEv
08000714  w    F .boot_text	00000002 sys_tick_handler
0800c914  w    O .text	00000014 _ZTVN5codal10EventModelE
0800236c g     F .boot_text	00000028 os_on_assert
08002764 g     F .boot_text	0000009e .hidden __truncdfsf2
0800b2dc g     F .text	00000084 _ZN5codal10MessageBusD1Ev
08007920 g     F .text	00000002 _ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE
0800cc60 g       .init_array	00000000 __init_array_end
08000710  w    F .boot_text	00000002 fsmc_isr
08000710  w    F .boot_text	00000002 dma1_channel1_isr
08000710  w    F .boot_text	00000002 exti4_isr
08007680 g     F .text	0000000e _ZN3pxt9fromFloatEf
08009d14 g     F .text	00000040 _ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_
0800bba0 g     F .text	0000002c _ZN5codal3_cm5TimerC2Ev
08007d44 g     F .text	000000b2 _ZN5Math_11randomRangeEPN3pxt12TValueStructES2_
0800c990 g     O .text	00000054 _ZTVN5codal3_cm3PinE
08002708 g     F .boot_text	0000005a .hidden __aeabi_l2d
08002c26 g     F .boot_text	00000000 qfp_fsqrt
20000004 g     O .boot_data	00000004 codal_heap_start
080078c8 g     F .text	00000038 _ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE
080076dc g     F .text	00000006 _ZN5Math_4imulEii
0800b93c g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
0800ae24 g     F .text	00000030 _ZN5codal5TimerC2Ev
08000404 g     F .boot_text	00000070 target_wait_for_event
0800a9c4 g     F .text	0000002c _ZN5codal20fiber_wait_for_eventEtt
080054b8 g     F .boot_text	00000038 usb21_setup
0800ad60 g     F .text	0000002e _ZN5codal8ListenerC2EttPFvNS_5EventEEt
08003ddc g     F .boot_text	00000028 debug_force_flush
080095d0 g     F .text	00000004 _ZN3pxt12releaseFiberEv
0800b920 g     F .text	0000000e _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
08009298 g     F .text	00000014 _ZN3pxt6RefMapC1Ev
08003e04 g     F .boot_text	00000088 _Z11debug_printj
08007f08 g     F .text	0000007e _ZN3pxt8eqq_boolEPNS_12TValueStructES1_
08003098 g     F .boot_text	0000001c exp
08001e6c g     F .boot_text	00000050 os_msgQ_create
0800a064  w    F .text	00000004 _ZN5codal11CodalDevice5resetEv
0800b6ec g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08008f60 g     F .text	00000002 _ZN3pxt11RefRefLocal7destroyEPS0_
080074f0 g     F .text	0000000e _ZN7String_8includesEPN3pxt11BoxedStringES2_i
0800728c g     F .text	0000006c _ZN7String_6concatEPN3pxt11BoxedStringES2_
0800977c g     F .text	00000004 _ZN3pxt15current_time_msEv
0800b384 g     F .text	000000b0 _ZN5codal10MessageBusC1Ev
08003bac g     F .boot_text	00000014 strcmp
08002afe g     F .boot_text	00000000 qfp_int2float
08009088 g     F .text	00000090 _ZN3pxt7Segment9growByMinEt
0800b0f4 g     F .text	00000084 _ZN5codal10MessageBus6removeEPNS_8ListenerE
08006c78 g     F .text	00000004 _ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE
08001bb0 g     F .boot_text	0000001c exti_enable_request
080031e0 g     F .boot_text	0000001c tan
08007e34 g     F .text	00000012 _ZN5Math_3sinEPN3pxt12TValueStructE
08001b60 g     F .boot_text	00000050 exti_set_trigger
08000728 g     F .boot_text	00000018 flash_unlock
08000710  w    F .boot_text	00000002 mem_manage_handler
08008e3c g     F .text	0000000a _ZN5loops5pauseEi
0800b764 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800b784 g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
08007320 g     F .text	0000016c _ZN7String_8mystrtodEPKcPPc
20000010 g     O .boot_data	00000004 rcc_apb2_frequency
08001c08 g     F .boot_text	00000040 rtc_set_alarm_time
0800b678 g     F .text	00000012 _ZN5codal5EventC1Ev
08006e18 g     F .text	00000008 _ZN7control12createBufferEi
08000cd0 g     F .boot_text	00000008 usbd_poll
0800bcfc g     F .text	00000006 _ZN5codal3I2C4stopEv
080005bc g     F .boot_text	00000002 _fini
0800b018 g     F .text	0000001c _ZN5codal28system_timer_current_time_usEv
08000474 g     F .boot_text	00000014 target_wait
0800933c g     F .text	0000000c _ZN3pxt11programHashEv
08000710  w    F .boot_text	00000002 can2_tx_isr
08003250 g     F .boot_text	000000b0 atan
0800b6f8 g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
08007e0c g     F .text	00000012 _ZN5Math_5log10EPN3pxt12TValueStructE
0800aab4 g     F .text	000000a0 _ZN5codal6invokeEPFvPvES0_
08007bc4 g     F .text	00000026 _ZN6numops4addsEPN3pxt12TValueStructES2_
08004b70 g     F .boot_text	00000038 target_get_force_bootloader
2000121c g     O .bss	00000404 codalLogStore
080070b0 g     F .text	00000004 _ZN7control10dmesgValueEPN3pxt12TValueStructE
08000710  w    F .boot_text	00000002 exti9_5_isr
08006bf8 g     F .text	00000004 _ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE
08007758 g     F .text	00000038 _ZN3pxt9getConfigEii
08004008 g     F .boot_text	00000010 led_off
08009a34  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
08003300 g     F .boot_text	00000094 asin
08000710  w    F .boot_text	00000002 dma2_channel3_isr
08002aba g     F .boot_text	00000000 qfp_float2fix
08000a44 g     F .boot_text	00000010 rcc_enable_rtc_clock
0800b260 g     F .text	0000007c _Z14async_callbackPv
20000428 g     O .boot_data	00000004 _impure_ptr
08001568 g     F .boot_text	00000040 _usbd_standard_request_endpoint
08009eb0  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
0800229c g     F .boot_text	00000074 os_task_signal_event
08008db0 g     F .text	00000012 _ZN3pxt15unregisterGCPtrEPNS_12TValueStructE
080004bc g     F .boot_text	00000010 target_in_isr
0800cc58 g       .preinit_array	00000000 __preinit_array_end
08001b44 g     F .boot_text	0000001a nvic_enable_irq
08004018 g     F .boot_text	00000010 led_wait
080005e8 g     F .boot_text	00000004 target_enable_debug
08007c6c g     F .text	00000026 _ZN6numops3divEPN3pxt12TValueStructES2_
08000710  w    F .boot_text	00000002 dma1_channel7_isr
08004028 g     F .boot_text	0000011c platform_start_timer
0800962c g     F .text	0000012c _ZN3pxt11initRuntimeEv
0800ad60 g     F .text	0000002e _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08004ea0 g     F .boot_text	0000002c cdc_setup
20001000 g       .data	00000000 _data
08000710  w    F .boot_text	00000002 tim1_up_isr
08007b60 g     F .text	00000028 _ZN6numops4andsEPN3pxt12TValueStructES2_
080076e4 g     F .text	00000006 _ZN5Math_4idivEii
08001c48 g     F .boot_text	00000040 rtc_set_prescale_val
0800082c g     F .boot_text	00000028 flash_get_status_flags
08009d7c g     F .text	0000002c _ZN4pins7spiModeEi
08006f44 g     F .text	00000120 _ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE
0800bb54 g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
08007664 g     F .text	0000001c _ZN7String_10charCodeAtEPN3pxt11BoxedStringEi
0800b830 g     F .text	00000038 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
0800363c g     F .boot_text	000000ac acosh
08006c14 g     F .text	00000012 _ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii
20001650 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
0800b6f8 g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000aec g     F .boot_text	000000cc rcc_clock_setup_in_hse_8mhz_out_72mhz
08002178 g     F .boot_text	00000058 os_task_waiting_this_semaphore
0800bb9c g     F .text	00000002 _ZN5codal3_cm13tick_callbackEv
08003028 g     F .boot_text	00000038 __wrap___aeabi_d2uiz
0800bf00 g     O .text	00000324 _ZN3pxt20functionsAndBytecodeE
08002b0a g     F .boot_text	00000000 qfp_uint2float
0800770c g     F .text	0000000c _ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE
08007740 g     F .text	00000006 _ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
0800868c g     F .text	00000048 _ZN3pxt10gcScanManyEPPNS_12TValueStructEj
0800b6cc g     F .text	00000020 _ZN5codal22MemberFunctionCallbackeqERKS0_
08009928 g     F .text	00000016 _ZN7control10raiseEventEii
08001c88 g     F .boot_text	00000018 rtc_get_counter_val
08009a3c  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800b8cc g     F .text	0000000e _ZN5codal3_cm3Pin15setAnalogPeriodEi
08009780 g     F .text	0000000c _ZN3pxt16getThreadContextEv
0800076c g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
08000710  w    F .boot_text	00000002 can2_sce_isr
080082d8 g     F .text	0000001e _ZN6numops2geEPN3pxt12TValueStructES2_
08000710  w    F .boot_text	00000002 tim4_isr
0800900c g     F .text	0000000a _ZN3pxt9RefObject9destroyVTEv
08004b58 g     F .boot_text	00000018 target_manifest_bootloader
0800cc2c g     O .text	0000002c _ZTVN5codal3I2CE
0800b434 g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
080082f8 g     F .text	0000001e _ZN6numops2gtEPN3pxt12TValueStructES2_
080017e0 g     F .boot_text	000000c0 st_usbfs_ep_stall_set
0800b458 g     F .text	00000054 _ZN5codal10MessageBus21deleteMarkedListenersEv
08007224 g     F .text	0000000c _ZN7String_7mkEmptyEv
080099b4 g     F .text	0000004c _ZN4pins13i2cReadBufferEiib
08004400 g     F .boot_text	000000ac usb_setup
20000cb4 g       .boot_bss	00000000 _boot_ebss
2000100c g       .data	00000000 _edata
0800ab54 g     F .text	00000028 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
0800b178 g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
08000710  w    F .boot_text	00000002 dma1_channel2_isr
0800c7e8  w    O .text	00000054 _ZTVN5codal16STM32BluePillPinE
08000710  w    F .boot_text	00000002 i2c1_er_isr
0800b660 g     F .text	00000018 _ZN5codal5EventC2EttmNS_15EventLaunchModeE
0800a058  w    F .text	00000004 _ZN5codal11CodalDevice15getSerialNumberEv
08001510 g     F .boot_text	00000058 _usbd_standard_request_device
0800a488 g     F .text	00000054 _Z15getFiberContextv
080004cc g     F .boot_text	00000004 target_enable_irq
08008d60 g     F .text	00000034 _ZN3pxt10registerGCEPPNS_12TValueStructEi
0800ae0c g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
08000710  w    F .boot_text	00000002 can_sce_isr
0800b94c g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
08009b18 g     F .text	00000008 _ZN4pins12createBufferEi
080029b0 g     F .boot_text	00000000 qfp_fdiv
08000714  w    F .boot_text	00000002 nmi_handler
08001d3c g     F .boot_text	0000005c rtc_interrupt_disable
08002984 g     F .boot_text	00000000 qfp_fcmp
080060a0 g     O .boot_preinit_array	00000004 __boot_preinit_array_end
08003fd0 g     F .boot_text	00000004 _Znwj
20000b50 g     O .boot_bss	00000008 st_usbfs_force_nak
08007e48 g     F .text	00000012 _ZN5Math_3cosEPN3pxt12TValueStructE
0800c928 g     O .text	0000003c _ZTVN5codal10MessageBusE
080071e4 g     F .text	00000040 _ZN3pxt9getRandomEj
20000000 g       .boot_data	00000000 _boot_data
0800ab7c g     F .text	00000018 _ZN5codal9idle_taskEv
08009b54 g     F .text	00000020 _ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE
080030b4 g     F .boot_text	00000028 log2
080070a0 g     F .text	0000000e _ZN7control5__logEiPN3pxt11BoxedStringE
0800b37c g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
08007b18 g     F .text	00000028 _ZN6numops4orrsEPN3pxt12TValueStructES2_
08000710  w    F .boot_text	00000002 tim8_cc_isr
08008f5c g     F .text	00000002 _ZN3pxt9RefAction7destroyEPS0_
08007154 g     F .text	0000004c _ZN3pxt8mkStringEPKci
080081b0 g     F .text	00000014 _ZN6numops10toBoolDecrEPN3pxt12TValueStructE
08009dac g     F .text	00000010 _ZN3pxt10sendSerialEPKci
080075b4 g     F .text	000000a0 _ZN7String_8toNumberEPN3pxt11BoxedStringE
200047bc g       .boot_buf	00000000 _boot_stack
0800b074 g     F .text	00000016 _ZN5codal10MessageBus9elementAtEi
08009b34  w    F .text	00000006 _ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi
0800a038  w    F .text	00000008 _ZN5codal11CodalDevice10getVersionEv
08001a60 g     F .boot_text	000000e4 st_usbfs_poll
08005c48 g     O .boot_text	00000018 webusb_platform_capability_descriptor
0800b360 g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
080077e0 g     F .text	00000004 _ZN5pxtrt5panicEi
08008e0c g     F .text	0000000a _ZN3pxt9RefAction6gcsizeEPS0_
0800a964 g     F .text	00000014 _ZN5codal8scheduleEv
080060a0 g     O .boot_init_array	00000004 __boot_init_array_start
08009178 g     F .text	0000001c _ZN3pxt7Segment3popEv
0800b734 g     F .text	0000002c _ZN5codal3_cm3Pin13setServoValueEiii
20000b4c g     O .boot_bss	00000004 hal_bss_test
08000710  w    F .boot_text	00000002 tamper_isr
08008318 g     F .text	00000100 _ZN6numops8toStringEPN3pxt12TValueStructE
08004b14 g     F .boot_text	0000002c target_usb_init
0800574a g     O .boot_text	00000101 _ctype_
0800a048  w    F .text	00000006 _ZN5codal11CodalDevice10seedRandomEm
0800cc58 g       .init_array	00000000 __init_array_start
08000754 g     F .boot_text	00000006 gpio_clear
080044d8 g     F .boot_text	0000003c aggregate_register_config_callback
08009f34 g     F .text	000000dc _ZN5codal14CodalComponent12addComponentEv
08006b1c g     F .text	00000012 _ZN5Math_4tanhEPN3pxt12TValueStructE
08008f64 g     F .text	00000064 _ZN3pxt8mkActionEiPNS_9RefActionE
08009c44 g     F .text	00000004 _ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi
08000710  w    F .boot_text	00000002 eth_wkup_isr
08007508 g     F .text	000000ac _ZN3pxt10fromDoubleEd
08003fb8 g     F .boot_text	00000010 enable_debug
08000bec g     F .boot_text	00000022 st_usbfs_copy_to_pm
0800782c g     F .text	00000088 _ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE
08008cdc g     F .text	00000084 _ZN3pxt17pushThreadContextEPvS0_
0800b5c4 g     F .text	00000042 _ZN5codal10MessageBus4idleENS_5EventE
0800b644 g     F .text	0000001c _ZN5codal5EventC2EttNS_15EventLaunchModeE
08006c7c g     F .text	0000002a _ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii
0800b060  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08008e48 g     F .text	00000002 _ZN3pxt17RefRecord_destroyEPNS_9RefRecordE
08001fa0 g     F .boot_text	00000044 os_task_init
080021d0 g     F .boot_text	00000034 os_task_wait_sem_set
080077f8 g     F .text	00000014 _ZN5pxtrt5mkMapEv
08007080 g     F .text	00000004 _ZN7control6millisEv
0800b548 g     F .text	00000062 _ZN5codal10MessageBus10queueEventERNS_5EventE
0800826c g     F .text	00000024 _ZN6numops7lt_boolEPN3pxt12TValueStructES2_
08000c10 g     F .boot_text	00000030 st_usbfs_copy_from_pm
08004c24 g     F .boot_text	00000006 target_get_serial_number
08003bc0 g     F .boot_text	00000010 strlen
0800052c g     F .boot_text	00000004 tcb_configure_lr
08003f48 g     F .boot_text	00000024 debug_printhex_unsigned
20000540 g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
20005000 g       .boot_buf	00000000 _eboot_buf
08007f98 g     F .text	00000010 _ZN6numops4neqqEPN3pxt12TValueStructES2_
08000750 g     F .boot_text	00000004 gpio_set
0800b8fc g     F .text	0000001e _ZN5codal3_cm3Pin5setupEhh
080076cc g     F .text	0000000e _ZN5Math_6randomEv
0800959c g     F .text	00000020 _ZN3pxt12forever_stubEPv
08006b58 g     F .text	00000012 _ZN5Math_5atanhEPN3pxt12TValueStructE
08006b6c g     F .text	00000012 _ZN5Math_5asinhEPN3pxt12TValueStructE
0800ada4 g     F .text	00000068 _ZN5codal8Listener5queueENS_5EventE
08009494 g     F .text	00000068 _ZN5pxtrt6keysOfEPN3pxt12TValueStructE
080026b4 g     F .boot_text	00000042 .hidden __aeabi_f2d
08000710  w    F .boot_text	00000002 bus_fault_handler
08000710  w    F .boot_text	00000002 wwdg_isr
20001030 g     O .bss	00000004 _ZN3pxt7globalsE
080076ec g     F .text	00000014 _ZN6Array_2mkEv
08008418 g     F .text	00000050 _ZN3pxt6typeOfEPNS_12TValueStructE
08000710  w    F .boot_text	00000002 dma1_channel3_isr
0800ae18 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
08006aa0 g     F .text	00000054 _ZN5Math_12randomDoubleEv
080095bc  w    F .text	00000014 _ZN5codal3_cm5TimerD1Ev
08009e48 g     F .text	00000064 _ZN5codal4itoaEiPc
20001038 g     O .bss	00000024 _ZN3pxt13devMessageBusE
08009158 g     F .text	0000001e _ZN3pxt7Segment9setLengthEj
08009798 g     F .text	000000d4 _ZN3pxt15gcProcessStacksEi
08002d40 g     F .boot_text	000000cc acos
08001ca0 g     F .boot_text	00000040 rtc_set_counter_val
20000b58 g     O .boot_bss	000000fc st_usbfs_dev
0800aff8 g     F .text	00000002 _ZN5codal5TimerD1Ev
08007738 g     F .text	00000006 _ZN6Array_8removeAtEPN3pxt13RefCollectionEi
08006b08 g     F .text	00000012 _ZN5Math_3expEPN3pxt12TValueStructE
08008538 g     F .text	0000001c _ZN3pxt15missingPropertyEPNS_12TValueStructE
0800951c g     F .text	00000070 _ZN3pxt13dispatchEventEN5codal5EventE
08004aa4 g     F .boot_text	00000070 target_gpio_setup
080023f4 g     F .boot_text	0000027a .hidden __subdf3
08001e48 g     F .boot_text	00000024 os_msgQ_init
0800cc58 g       .preinit_array	00000000 __preinit_array_start
080037b0 g     F .boot_text	0000008c trunc
08007088 g     F .text	00000004 _ZN7control5resetEv
080019ac g     F .boot_text	000000b4 st_usbfs_ep_read_packet
08009298 g     F .text	00000014 _ZN3pxt6RefMapC2Ev
08000710  w    F .boot_text	00000002 spi3_isr
08009958 g     F .text	0000000c _ZN7control5dmesgEPN3pxt11BoxedStringE
0800812c g     F .text	0000001c _ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE
08009288 g     F .text	00000010 _ZN3pxt11RefRefLocalC2Ev
08009af4 g     F .text	00000012 _ZN3pxt9getPinCfgEi
08007a94 g     F .text	00000004 _ZN3pxt5toIntEPNS_12TValueStructE
08001f5c g     F .boot_text	00000014 os_sem_larger_than_zero
080005c0 g     F .boot_text	00000004 __aeabi_atexit
08006048 g     O .boot_text	00000055 infoUf2File
08007c94 g     F .text	00000060 _ZN6numops3modEPN3pxt12TValueStructES2_
080041d8 g     F .boot_text	00000004 millis
0800b7a0 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
080005c4 g     F .boot_text	0000000c target_set_tick_callback
08000710  w    F .boot_text	00000002 tim2_isr
08007e84 g     F .text	00000012 _ZN5Math_4acosEPN3pxt12TValueStructE
08003efc g     F .boot_text	00000004 debug_print_unsigned
08005d2c g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08008a90 g     F .text	00000048 free
08009600 g     F .text	00000024 _ZN3pxt13runInParallelEPNS_12TValueStructE
08001bd8 g     F .boot_text	00000018 rtc_enter_config_mode
0800162c g     F .boot_text	00000010 st_usbfs_set_address
08000710  w    F .boot_text	00000002 exti0_isr
08008ddc g     F .text	00000016 _ZN3pxt6RefMap4scanEPS0_
0800bcfc g     F .text	00000006 _ZN5codal3I2C5startEv



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 51 01 00 08 15 07 00 08 11 07 00 08     .P. Q...........
 8000010:	11 07 00 08 11 07 00 08 11 07 00 08 00 00 00 00     ................
	...
 800002c:	15 07 00 08 15 07 00 08 00 00 00 00 15 07 00 08     ................
 800003c:	15 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800004c:	79 41 00 08 11 07 00 08 11 07 00 08 11 07 00 08     yA..............
 800005c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800006c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800007c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800008c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800009c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 80000ac:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 80000bc:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 80000cc:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 80000dc:	11 07 00 08 11 07 00 08 a9 41 00 08 11 07 00 08     .........A......
 80000ec:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 80000fc:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800010c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800011c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800012c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800013c:	11 07 00 08 11 07 00 08 11 07 00 08 11 07 00 08     ................
 800014c:	11 07 00 08                                         ....

08000150 <reset_handler>:
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}

void reset_handler(void) {
 8000150:	b538      	push	{r3, r4, r5, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000152:	4a3c      	ldr	r2, [pc, #240]	; (8000244 <reset_handler+0xf4>)
 8000154:	4c3c      	ldr	r4, [pc, #240]	; (8000248 <reset_handler+0xf8>)
 8000156:	42a2      	cmp	r2, r4
 8000158:	d20f      	bcs.n	800017a <reset_handler+0x2a>
 800015a:	43d3      	mvns	r3, r2
 800015c:	4615      	mov	r5, r2
 800015e:	4423      	add	r3, r4
 8000160:	493a      	ldr	r1, [pc, #232]	; (800024c <reset_handler+0xfc>)
 8000162:	f023 0303 	bic.w	r3, r3, #3
 8000166:	3304      	adds	r3, #4
 8000168:	4608      	mov	r0, r1
 800016a:	4419      	add	r1, r3
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 800016c:	f850 4b04 	ldr.w	r4, [r0], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000170:	4288      	cmp	r0, r1
		*boot_dest = *src;
 8000172:	f845 4b04 	str.w	r4, [r5], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000176:	d1f9      	bne.n	800016c <reset_handler+0x1c>
 8000178:	441a      	add	r2, r3
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 800017a:	4b35      	ldr	r3, [pc, #212]	; (8000250 <reset_handler+0x100>)
 800017c:	429a      	cmp	r2, r3
 800017e:	d20d      	bcs.n	800019c <reset_handler+0x4c>
 8000180:	3303      	adds	r3, #3
 8000182:	1d11      	adds	r1, r2, #4
 8000184:	1a5b      	subs	r3, r3, r1
 8000186:	f023 0303 	bic.w	r3, r3, #3
 800018a:	3304      	adds	r3, #4
 800018c:	2000      	movs	r0, #0
 800018e:	4413      	add	r3, r2
 8000190:	e000      	b.n	8000194 <reset_handler+0x44>
 8000192:	3104      	adds	r1, #4
 8000194:	4299      	cmp	r1, r3
 8000196:	6010      	str	r0, [r2, #0]
 8000198:	460a      	mov	r2, r1
 800019a:	d1fa      	bne.n	8000192 <reset_handler+0x42>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 800019c:	4a2d      	ldr	r2, [pc, #180]	; (8000254 <reset_handler+0x104>)
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 800019e:	4d2e      	ldr	r5, [pc, #184]	; (8000258 <reset_handler+0x108>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 80001a0:	6813      	ldr	r3, [r2, #0]
 80001a2:	4c2e      	ldr	r4, [pc, #184]	; (800025c <reset_handler+0x10c>)
 80001a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001a8:	6013      	str	r3, [r2, #0]
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 80001aa:	f000 fa1d 	bl	80005e8 <target_enable_debug>
    target_init();               //  Init the STM32 platform.
 80001ae:	f000 f911 	bl	80003d4 <target_init>
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 80001b2:	682b      	ldr	r3, [r5, #0]
 80001b4:	b91b      	cbnz	r3, 80001be <reset_handler+0x6e>
 80001b6:	4b2a      	ldr	r3, [pc, #168]	; (8000260 <reset_handler+0x110>)
 80001b8:	6822      	ldr	r2, [r4, #0]
 80001ba:	429a      	cmp	r2, r3
 80001bc:	d00c      	beq.n	80001d8 <reset_handler+0x88>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 80001be:	4829      	ldr	r0, [pc, #164]	; (8000264 <reset_handler+0x114>)
 80001c0:	f003 fe7c 	bl	8003ebc <debug_print>
 80001c4:	6828      	ldr	r0, [r5, #0]
 80001c6:	f003 febf 	bl	8003f48 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 80001ca:	4827      	ldr	r0, [pc, #156]	; (8000268 <reset_handler+0x118>)
 80001cc:	f003 fe76 	bl	8003ebc <debug_print>
 80001d0:	6820      	ldr	r0, [r4, #0]
 80001d2:	f003 feb9 	bl	8003f48 <debug_printhex_unsigned>
 80001d6:	e7fe      	b.n	80001d6 <reset_handler+0x86>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 80001d8:	4c24      	ldr	r4, [pc, #144]	; (800026c <reset_handler+0x11c>)
 80001da:	4925      	ldr	r1, [pc, #148]	; (8000270 <reset_handler+0x120>)
 80001dc:	428c      	cmp	r4, r1
 80001de:	d20b      	bcs.n	80001f8 <reset_handler+0xa8>
 80001e0:	43e3      	mvns	r3, r4
 80001e2:	440b      	add	r3, r1
 80001e4:	f023 0303 	bic.w	r3, r3, #3
 80001e8:	3304      	adds	r3, #4
 80001ea:	4625      	mov	r5, r4
 80001ec:	441c      	add	r4, r3
		(*fp)();
 80001ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80001f2:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 80001f4:	42a5      	cmp	r5, r4
 80001f6:	d1fa      	bne.n	80001ee <reset_handler+0x9e>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 80001f8:	4c1e      	ldr	r4, [pc, #120]	; (8000274 <reset_handler+0x124>)
 80001fa:	491f      	ldr	r1, [pc, #124]	; (8000278 <reset_handler+0x128>)
 80001fc:	428c      	cmp	r4, r1
 80001fe:	d20b      	bcs.n	8000218 <reset_handler+0xc8>
 8000200:	43e3      	mvns	r3, r4
 8000202:	440b      	add	r3, r1
 8000204:	f023 0303 	bic.w	r3, r3, #3
 8000208:	3304      	adds	r3, #4
 800020a:	4625      	mov	r5, r4
 800020c:	441c      	add	r4, r3
		(*fp)();
 800020e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000212:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000214:	42a5      	cmp	r5, r4
 8000216:	d1fa      	bne.n	800020e <reset_handler+0xbe>
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 8000218:	f004 f804 	bl	8004224 <bootloader_start>
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800021c:	4c17      	ldr	r4, [pc, #92]	; (800027c <reset_handler+0x12c>)
	application_start();
 800021e:	f006 faef 	bl	8006800 <application_start>
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000222:	4917      	ldr	r1, [pc, #92]	; (8000280 <reset_handler+0x130>)
 8000224:	428c      	cmp	r4, r1
 8000226:	d20b      	bcs.n	8000240 <reset_handler+0xf0>
 8000228:	43e3      	mvns	r3, r4
 800022a:	440b      	add	r3, r1
 800022c:	f023 0303 	bic.w	r3, r3, #3
 8000230:	3304      	adds	r3, #4
 8000232:	4625      	mov	r5, r4
 8000234:	441c      	add	r4, r3
		(*fp)();
 8000236:	f855 3b04 	ldr.w	r3, [r5], #4
 800023a:	4798      	blx	r3
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800023c:	42ac      	cmp	r4, r5
 800023e:	d1fa      	bne.n	8000236 <reset_handler+0xe6>
	}

}
 8000240:	bd38      	pop	{r3, r4, r5, pc}
 8000242:	bf00      	nop
 8000244:	20000000 	.word	0x20000000
 8000248:	20000540 	.word	0x20000540
 800024c:	080060a0 	.word	0x080060a0
 8000250:	20000cb4 	.word	0x20000cb4
 8000254:	e000ed14 	.word	0xe000ed14
 8000258:	20000b4c 	.word	0x20000b4c
 800025c:	20000000 	.word	0x20000000
 8000260:	87654321 	.word	0x87654321
 8000264:	08005604 	.word	0x08005604
 8000268:	0800562c 	.word	0x0800562c
 800026c:	080060a0 	.word	0x080060a0
 8000270:	080060a0 	.word	0x080060a0
 8000274:	080060a0 	.word	0x080060a0
 8000278:	080060a0 	.word	0x080060a0
 800027c:	080060a0 	.word	0x080060a0
 8000280:	080060a0 	.word	0x080060a0

08000284 <_ZL10timer_tickv>:
        }
    }
    if (prev_poll_status > 0) { debug_print("} "); }
}

static void timer_tick() {
 8000284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!bootloader_callback) { return; }
 8000288:	4e18      	ldr	r6, [pc, #96]	; (80002ec <_ZL10timer_tickv+0x68>)
 800028a:	6833      	ldr	r3, [r6, #0]
 800028c:	b333      	cbz	r3, 80002dc <_ZL10timer_tickv+0x58>
    poll_status = bootloader_callback();
 800028e:	4798      	blx	r3
 8000290:	4d17      	ldr	r5, [pc, #92]	; (80002f0 <_ZL10timer_tickv+0x6c>)
    prev_poll_status = poll_status;
 8000292:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000300 <_ZL10timer_tickv+0x7c>
    poll_status = bootloader_callback();
 8000296:	6028      	str	r0, [r5, #0]
    prev_poll_status = poll_status;
 8000298:	682b      	ldr	r3, [r5, #0]
 800029a:	f8c8 3000 	str.w	r3, [r8]
    if (poll_status > 0) { debug_print("u{ "); }
 800029e:	682b      	ldr	r3, [r5, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	dd02      	ble.n	80002aa <_ZL10timer_tickv+0x26>
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <_ZL10timer_tickv+0x70>)
 80002a6:	f003 fe09 	bl	8003ebc <debug_print>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80002aa:	682b      	ldr	r3, [r5, #0]
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80002ac:	2700      	movs	r7, #0
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dd0d      	ble.n	80002ce <_ZL10timer_tickv+0x4a>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80002b2:	240a      	movs	r4, #10
 80002b4:	602f      	str	r7, [r5, #0]
            poll_status = poll_status | bootloader_callback();
 80002b6:	6833      	ldr	r3, [r6, #0]
 80002b8:	4798      	blx	r3
 80002ba:	682b      	ldr	r3, [r5, #0]
 80002bc:	3c01      	subs	r4, #1
 80002be:	4318      	orrs	r0, r3
 80002c0:	b2a4      	uxth	r4, r4
 80002c2:	6028      	str	r0, [r5, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d1f6      	bne.n	80002b6 <_ZL10timer_tickv+0x32>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80002c8:	682b      	ldr	r3, [r5, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	dcf1      	bgt.n	80002b2 <_ZL10timer_tickv+0x2e>
    if (prev_poll_status > 0) { debug_print("} "); }
 80002ce:	f8d8 3000 	ldr.w	r3, [r8]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	dd02      	ble.n	80002dc <_ZL10timer_tickv+0x58>
 80002d6:	4808      	ldr	r0, [pc, #32]	; (80002f8 <_ZL10timer_tickv+0x74>)
 80002d8:	f003 fdf0 	bl	8003ebc <debug_print>
    //  This is called every millisecond.  
    //  If bootloader is running in background, call it to handle USB requests.
    poll_bootloader();
    //  If Codal Timer exists, update the timer.
    if (tick_callback) { tick_callback(); }
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <_ZL10timer_tickv+0x78>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	b103      	cbz	r3, 80002e4 <_ZL10timer_tickv+0x60>
 80002e2:	4798      	blx	r3
    //  Call cocoOS at every tick.
    os_tick();
}
 80002e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    os_tick();
 80002e8:	f001 bda4 	b.w	8001e34 <os_tick>
 80002ec:	20000554 	.word	0x20000554
 80002f0:	20000544 	.word	0x20000544
 80002f4:	0800563c 	.word	0x0800563c
 80002f8:	08005640 	.word	0x08005640
 80002fc:	20000548 	.word	0x20000548
 8000300:	20000550 	.word	0x20000550

08000304 <_ZL11timer_alarmv>:
        debug_print(";");
        poll_bootloader();
    }
#endif  //  NOTUSED
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <_ZL11timer_alarmv+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	b103      	cbz	r3, 800030c <_ZL11timer_alarmv+0x8>
 800030a:	4718      	bx	r3
static void timer_alarm() {
 800030c:	b510      	push	{r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 800030e:	f003 ff63 	bl	80041d8 <millis>
 8000312:	28c7      	cmp	r0, #199	; 0xc7
 8000314:	d900      	bls.n	8000318 <_ZL11timer_alarmv+0x14>
}
 8000316:	bd10      	pop	{r4, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000318:	4803      	ldr	r0, [pc, #12]	; (8000328 <_ZL11timer_alarmv+0x24>)
}
 800031a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 800031e:	f003 bdcd 	b.w	8003ebc <debug_print>
 8000322:	bf00      	nop
 8000324:	2000054c 	.word	0x2000054c
 8000328:	08005644 	.word	0x08005644

0800032c <_ZL11os_schedulev.part.1>:
}

static void os_schedule( void ) {
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
    running_tid = NO_TID;
 800032c:	23ff      	movs	r3, #255	; 0xff
static void os_schedule( void ) {
 800032e:	b510      	push	{r4, lr}
    running_tid = NO_TID;
 8000330:	4c07      	ldr	r4, [pc, #28]	; (8000350 <_ZL11os_schedulev.part.1+0x24>)
 8000332:	7023      	strb	r3, [r4, #0]
#ifdef ROUND_ROBIN
    /* Find next ready task */
    running_tid = os_task_next_ready_task();
#else
    /* Find the highest prio task ready to run */
    running_tid = os_task_highest_prio_ready_task();   
 8000334:	f001 fed0 	bl	80020d8 <os_task_highest_prio_ready_task>
#endif    
    if ( running_tid != NO_TID ) {
 8000338:	28ff      	cmp	r0, #255	; 0xff
    running_tid = os_task_highest_prio_ready_task();   
 800033a:	7020      	strb	r0, [r4, #0]
    if ( running_tid != NO_TID ) {
 800033c:	d003      	beq.n	8000346 <_ZL11os_schedulev.part.1+0x1a>
        os_task_run();
    }
    else {
        os_cbkSleep();
    }
}
 800033e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_task_run();
 8000342:	f001 bfe5 	b.w	8002310 <os_task_run>
}
 8000346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_cbkSleep();
 800034a:	f001 bd57 	b.w	8001dfc <os_cbkSleep>
 800034e:	bf00      	nop
 8000350:	20000c54 	.word	0x20000c54

08000354 <target_wait.part.2>:
void target_wait(uint32_t milliseconds) {
 8000354:	b510      	push	{r4, lr}
 8000356:	4604      	mov	r4, r0
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <target_wait.part.2+0x48>)
 800035a:	f003 fdaf 	bl	8003ebc <debug_print>
 800035e:	4810      	ldr	r0, [pc, #64]	; (80003a0 <target_wait.part.2+0x4c>)
 8000360:	fba0 3004 	umull	r3, r0, r0, r4
 8000364:	0980      	lsrs	r0, r0, #6
 8000366:	f003 fdc9 	bl	8003efc <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 800036a:	f003 ff35 	bl	80041d8 <millis>
 800036e:	4404      	add	r4, r0
 8000370:	e000      	b.n	8000374 <target_wait.part.2+0x20>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000372:	bf20      	wfe
        if (millis() >= end) { break; }
 8000374:	f003 ff30 	bl	80041d8 <millis>
 8000378:	4284      	cmp	r4, r0
 800037a:	d90a      	bls.n	8000392 <target_wait.part.2+0x3e>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 800037c:	f001 fd5e 	bl	8001e3c <os_running>
 8000380:	2800      	cmp	r0, #0
 8000382:	d0f6      	beq.n	8000372 <target_wait.part.2+0x1e>
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 8000384:	f001 fd5a 	bl	8001e3c <os_running>
 8000388:	2800      	cmp	r0, #0
 800038a:	d0f2      	beq.n	8000372 <target_wait.part.2+0x1e>
 800038c:	f7ff ffce 	bl	800032c <_ZL11os_schedulev.part.1>
 8000390:	e7ef      	b.n	8000372 <target_wait.part.2+0x1e>
    debug_print("> ");
 8000392:	4804      	ldr	r0, [pc, #16]	; (80003a4 <target_wait.part.2+0x50>)
}
 8000394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("> ");
 8000398:	f003 bd90 	b.w	8003ebc <debug_print>
 800039c:	080056a0 	.word	0x080056a0
 80003a0:	10624dd3 	.word	0x10624dd3
 80003a4:	080056a8 	.word	0x080056a8

080003a8 <target_dmesg_flush.part.3>:
void target_dmesg_flush() {
 80003a8:	b570      	push	{r4, r5, r6, lr}
        for (uint32_t i = 0; i < codalLogStore.ptr; i++) {
 80003aa:	4e09      	ldr	r6, [pc, #36]	; (80003d0 <target_dmesg_flush.part.3+0x28>)
 80003ac:	6833      	ldr	r3, [r6, #0]
 80003ae:	b14b      	cbz	r3, 80003c4 <target_dmesg_flush.part.3+0x1c>
 80003b0:	2400      	movs	r4, #0
 80003b2:	1cf5      	adds	r5, r6, #3
            debug_print((uint8_t) codalLogStore.buffer[i]);
 80003b4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80003b8:	f003 fd68 	bl	8003e8c <_Z11debug_printi>
        for (uint32_t i = 0; i < codalLogStore.ptr; i++) {
 80003bc:	6833      	ldr	r3, [r6, #0]
 80003be:	3401      	adds	r4, #1
 80003c0:	42a3      	cmp	r3, r4
 80003c2:	d8f7      	bhi.n	80003b4 <target_dmesg_flush.part.3+0xc>
        codalLogStore.ptr = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	6033      	str	r3, [r6, #0]
}
 80003c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        debug_flush();
 80003cc:	f003 bcfc 	b.w	8003dc8 <debug_flush>
 80003d0:	2000121c 	.word	0x2000121c

080003d4 <target_init>:
void target_init(void) {
 80003d4:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <target_init+0x24>)
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	b102      	cbz	r2, 80003de <target_init+0xa>
}
 80003dc:	bd08      	pop	{r3, pc}
    initialised = true;
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 80003e2:	f003 fdc3 	bl	8003f6c <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 80003e6:	f001 fd0b 	bl	8001e00 <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 80003ea:	4904      	ldr	r1, [pc, #16]	; (80003fc <target_init+0x28>)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <target_init+0x2c>)
}
 80003ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    platform_start_timer(timer_tick, timer_alarm);
 80003f2:	f003 be19 	b.w	8004028 <platform_start_timer>
 80003f6:	bf00      	nop
 80003f8:	2000055c 	.word	0x2000055c
 80003fc:	08000305 	.word	0x08000305
 8000400:	08000285 	.word	0x08000285

08000404 <target_wait_for_event>:
void target_wait_for_event() {
 8000404:	b570      	push	{r4, r5, r6, lr}
    if (!initialised) { return; }  //  If not initialised, quit.
 8000406:	4c17      	ldr	r4, [pc, #92]	; (8000464 <target_wait_for_event+0x60>)
 8000408:	7823      	ldrb	r3, [r4, #0]
 800040a:	b903      	cbnz	r3, 800040e <target_wait_for_event+0xa>
}
 800040c:	bd70      	pop	{r4, r5, r6, pc}
    if (!os_running()) { os_preschedule(); }  //  Start the cocoOS scheduler if not started.
 800040e:	f001 fd15 	bl	8001e3c <os_running>
 8000412:	b160      	cbz	r0, 800042e <target_wait_for_event+0x2a>
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 8000414:	f001 fd12 	bl	8001e3c <os_running>
 8000418:	bb00      	cbnz	r0, 800045c <target_wait_for_event+0x58>
    if ((last_flush + FLUSH_INTERVAL) >= millis()) {
 800041a:	4e13      	ldr	r6, [pc, #76]	; (8000468 <target_wait_for_event+0x64>)
 800041c:	6835      	ldr	r5, [r6, #0]
 800041e:	f003 fedb 	bl	80041d8 <millis>
 8000422:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 8000426:	4285      	cmp	r5, r0
 8000428:	d209      	bcs.n	800043e <target_wait_for_event+0x3a>
    __asm("wfe");  //  Allow CPU to go to sleep.
 800042a:	bf20      	wfe
}
 800042c:	bd70      	pop	{r4, r5, r6, pc}
    if (os_running()) { return; }  //  Already running.
 800042e:	f001 fd05 	bl	8001e3c <os_running>
 8000432:	2800      	cmp	r0, #0
 8000434:	d1ee      	bne.n	8000414 <target_wait_for_event+0x10>
    running = 1;
 8000436:	2201      	movs	r2, #1
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <target_wait_for_event+0x68>)
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	e7ea      	b.n	8000414 <target_wait_for_event+0x10>
        last_flush = millis();
 800043e:	f003 fecb 	bl	80041d8 <millis>
 8000442:	6030      	str	r0, [r6, #0]
        debug_flush();
 8000444:	f003 fcc0 	bl	8003dc8 <debug_flush>
    if (codalLogStore.ptr > 0 && initialised) {
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <target_wait_for_event+0x6c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0ec      	beq.n	800042a <target_wait_for_event+0x26>
 8000450:	7823      	ldrb	r3, [r4, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0e9      	beq.n	800042a <target_wait_for_event+0x26>
 8000456:	f7ff ffa7 	bl	80003a8 <target_dmesg_flush.part.3>
 800045a:	e7e6      	b.n	800042a <target_wait_for_event+0x26>
 800045c:	f7ff ff66 	bl	800032c <_ZL11os_schedulev.part.1>
 8000460:	e7db      	b.n	800041a <target_wait_for_event+0x16>
 8000462:	bf00      	nop
 8000464:	2000055c 	.word	0x2000055c
 8000468:	20000540 	.word	0x20000540
 800046c:	20000c55 	.word	0x20000c55
 8000470:	2000121c 	.word	0x2000121c

08000474 <target_wait>:
    if (milliseconds <= 0) { return; }
 8000474:	b110      	cbz	r0, 800047c <target_wait+0x8>
    if (!initialised) { return; }  //  If not initialised, quit.
 8000476:	4b03      	ldr	r3, [pc, #12]	; (8000484 <target_wait+0x10>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b903      	cbnz	r3, 800047e <target_wait+0xa>
}
 800047c:	4770      	bx	lr
 800047e:	f7ff bf69 	b.w	8000354 <target_wait.part.2>
 8000482:	bf00      	nop
 8000484:	2000055c 	.word	0x2000055c

08000488 <target_wait_us>:
    return target_wait(microseconds / 1000);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <target_wait_us+0x18>)
 800048a:	fba3 3000 	umull	r3, r0, r3, r0
    if (milliseconds <= 0) { return; }
 800048e:	0980      	lsrs	r0, r0, #6
 8000490:	d002      	beq.n	8000498 <target_wait_us+0x10>
    if (!initialised) { return; }  //  If not initialised, quit.
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <target_wait_us+0x1c>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b903      	cbnz	r3, 800049a <target_wait_us+0x12>
}
 8000498:	4770      	bx	lr
 800049a:	f7ff bf5b 	b.w	8000354 <target_wait.part.2>
 800049e:	bf00      	nop
 80004a0:	10624dd3 	.word	0x10624dd3
 80004a4:	2000055c 	.word	0x2000055c

080004a8 <target_reset>:
void target_reset() {
 80004a8:	b508      	push	{r3, lr}
  	debug_println("----target_reset"); debug_flush();
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <target_reset+0x10>)
 80004ac:	f003 fd0c 	bl	8003ec8 <debug_println>
 80004b0:	f003 fc8a 	bl	8003dc8 <debug_flush>
    scb_reset_system();
 80004b4:	f000 f930 	bl	8000718 <scb_reset_system>
 80004b8:	08005674 	.word	0x08005674

080004bc <target_in_isr>:
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 80004bc:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <target_in_isr+0xc>)
 80004be:	6818      	ldr	r0, [r3, #0]
}
 80004c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 80004cc:	b662      	cpsie	i
}
 80004ce:	4770      	bx	lr

080004d0 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__ volatile ("CPSID I\n");
 80004d0:	b672      	cpsid	i
}
 80004d2:	4770      	bx	lr

080004d4 <target_seed_random>:
int target_seed_random(uint32_t rand) {
 80004d4:	b508      	push	{r3, lr}
    debug_println("----target_seed_random");
 80004d6:	4802      	ldr	r0, [pc, #8]	; (80004e0 <target_seed_random+0xc>)
 80004d8:	f003 fcf6 	bl	8003ec8 <debug_println>
}
 80004dc:	2000      	movs	r0, #0
 80004de:	bd08      	pop	{r3, pc}
 80004e0:	08005688 	.word	0x08005688

080004e4 <target_get_serial>:
uint32_t target_get_serial() {
 80004e4:	b508      	push	{r3, lr}
    debug_println("----target_get_serial");
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <target_get_serial+0x10>)
 80004e8:	f003 fcee 	bl	8003ec8 <debug_println>
    return (uint32_t)STM32_UUID[1];
 80004ec:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <target_get_serial+0x14>)
}
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	bd08      	pop	{r3, pc}
 80004f2:	bf00      	nop
 80004f4:	08005648 	.word	0x08005648
 80004f8:	1fff7a14 	.word	0x1fff7a14

080004fc <target_panic>:
void target_panic(int statusCode) {
 80004fc:	b508      	push	{r3, lr}
 80004fe:	4604      	mov	r4, r0
 8000500:	b672      	cpsid	i
	debug_print("*****target_panic ");
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <target_panic+0x1c>)
 8000504:	f003 fcda 	bl	8003ebc <debug_print>
	debug_println((int) statusCode);
 8000508:	4620      	mov	r0, r4
 800050a:	f003 fceb 	bl	8003ee4 <_Z13debug_printlni>
	debug_flush();
 800050e:	f003 fc5b 	bl	8003dc8 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000512:	bf20      	wfe
 8000514:	e7fd      	b.n	8000512 <target_panic+0x16>
 8000516:	bf00      	nop
 8000518:	08005660 	.word	0x08005660

0800051c <fiber_initial_stack_base>:
}
 800051c:	4800      	ldr	r0, [pc, #0]	; (8000520 <fiber_initial_stack_base+0x4>)
 800051e:	4770      	bx	lr
 8000520:	20005000 	.word	0x20005000

08000524 <tcb_allocate>:
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8000524:	2040      	movs	r0, #64	; 0x40
 8000526:	f008 bb8b 	b.w	8008c40 <malloc>
 800052a:	bf00      	nop

0800052c <tcb_configure_lr>:
    tcbPointer->LR = function;
 800052c:	6381      	str	r1, [r0, #56]	; 0x38
}
 800052e:	4770      	bx	lr

08000530 <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8000530:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000532:	4770      	bx	lr

08000534 <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8000534:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000536:	4770      	bx	lr

08000538 <tcb_get_stack_base>:
}
 8000538:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800053a:	4770      	bx	lr

0800053c <get_current_sp>:
}
 800053c:	4668      	mov	r0, sp
 800053e:	4770      	bx	lr

08000540 <tcb_get_sp>:
}
 8000540:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000542:	4770      	bx	lr

08000544 <tcb_configure_args>:
    tcbPointer->R1 = (uint32_t)cp;
 8000544:	e9c0 1200 	strd	r1, r2, [r0]
    tcbPointer->R2 = (uint32_t)pm;
 8000548:	6083      	str	r3, [r0, #8]
}
 800054a:	4770      	bx	lr

0800054c <test_codal>:
void test_codal() {
 800054c:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <test_codal+0x54>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000550:	4814      	ldr	r0, [pc, #80]	; (80005a4 <test_codal+0x58>)
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000552:	681d      	ldr	r5, [r3, #0]
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000554:	4c14      	ldr	r4, [pc, #80]	; (80005a8 <test_codal+0x5c>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000556:	f003 fcb1 	bl	8003ebc <debug_print>
 800055a:	4628      	mov	r0, r5
 800055c:	f003 fcf4 	bl	8003f48 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <test_codal+0x60>)
 8000562:	f003 fcab 	bl	8003ebc <debug_print>
 8000566:	4620      	mov	r0, r4
 8000568:	f003 fcee 	bl	8003f48 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <test_codal+0x64>)
 800056e:	f003 fca5 	bl	8003ebc <debug_print>
	PROCESSOR_WORD_TYPE size = end - start;
 8000572:	1b60      	subs	r0, r4, r5
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000574:	0a80      	lsrs	r0, r0, #10
 8000576:	f003 fc45 	bl	8003e04 <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <test_codal+0x68>)
 800057c:	f003 fc9e 	bl	8003ebc <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000580:	466b      	mov	r3, sp
 8000582:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 8000586:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 800058a:	0a80      	lsrs	r0, r0, #10
 800058c:	f003 fc3a 	bl	8003e04 <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <test_codal+0x6c>)
 8000592:	f003 fc99 	bl	8003ec8 <debug_println>
}
 8000596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    debug_println(" KB"); debug_flush();
 800059a:	f003 bc15 	b.w	8003dc8 <debug_flush>
 800059e:	bf00      	nop
 80005a0:	20000004 	.word	0x20000004
 80005a4:	080056ac 	.word	0x080056ac
 80005a8:	20004800 	.word	0x20004800
 80005ac:	080056bc 	.word	0x080056bc
 80005b0:	080056c4 	.word	0x080056c4
 80005b4:	080056d0 	.word	0x080056d0
 80005b8:	080056e4 	.word	0x080056e4

080005bc <_fini>:
    void _fini(void) { }
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_atexit>:
    }
 80005c0:	2000      	movs	r0, #0
 80005c2:	4770      	bx	lr

080005c4 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <target_set_tick_callback+0x8>)
 80005c6:	6018      	str	r0, [r3, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000548 	.word	0x20000548

080005d0 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <target_set_alarm_callback+0x8>)
 80005d2:	6018      	str	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000054c 	.word	0x2000054c

080005dc <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <target_set_bootloader_callback+0x8>)
 80005de:	6018      	str	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000554 	.word	0x20000554

080005e8 <target_enable_debug>:
    enable_debug();   
 80005e8:	f003 bce6 	b.w	8003fb8 <enable_debug>

080005ec <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 80005ec:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 80005ee:	d015      	beq.n	800061c <store_context_complete>

    STR     R0, [R0,#0]
 80005f0:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 80005f2:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 80005f4:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 80005f6:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 80005f8:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 80005fa:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 80005fc:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 80005fe:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000600:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000602:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000604:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000606:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000608:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 800060a:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800060c:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800060e:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000610:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000612:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000614:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000616:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000618:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 800061a:	6384      	str	r4, [r0, #56]	; 0x38

0800061c <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 800061c:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 800061e:	d006      	beq.n	800062e <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000620:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000622 <store_stack>:
store_stack:
    SUBS    R4, #4
 8000622:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000624:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000626:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000628:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 800062a:	42b4      	cmp	r4, r6
    BNE     store_stack
 800062c:	d1f9      	bne.n	8000622 <store_stack>

0800062e <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 800062e:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000630:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000632:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000634:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000636:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000638:	d006      	beq.n	8000648 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 800063a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

0800063c <restore_stack>:

restore_stack:
    SUBS    R4, #4
 800063c:	3c04      	subs	r4, #4
    SUBS    R3, #4
 800063e:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000640:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000642:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000644:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000646:	d1f9      	bne.n	800063c <restore_stack>

08000648 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000648:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 800064a:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 800064c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 800064e:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000650:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000652:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000654:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000656:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000658:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 800065a:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 800065c:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 800065e:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000660:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000662:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000664:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000666:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000668:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 800066a:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 800066c:	4770      	bx	lr

0800066e <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 800066e:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000670:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000672:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000674:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000676:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000678:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 800067a:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 800067c:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 800067e:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000680:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000682:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000684:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000686:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000688:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800068a:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800068c:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 800068e:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000690:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000692:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000694:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000696:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000698:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 800069a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

0800069c <store_stack1>:

store_stack1:
    SUBS    R4, #4
 800069c:	3c04      	subs	r4, #4
    SUBS    R1, #4
 800069e:	3904      	subs	r1, #4

    LDR     R5, [R4]
 80006a0:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 80006a2:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 80006a4:	42b4      	cmp	r4, r6
    BNE     store_stack1
 80006a6:	d1f9      	bne.n	800069c <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 80006a8:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 80006aa:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 80006ac:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 80006ae:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 80006b0:	4770      	bx	lr

080006b2 <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 80006b2:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 80006b4:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 80006b6:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 80006b8:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 80006ba:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 80006bc:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 80006be:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 80006c0:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 80006c2:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 80006c4:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 80006c6:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 80006c8:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 80006ca:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 80006cc:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 80006ce:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 80006d0:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 80006d2:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 80006d4:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 80006d6:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 80006d8:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 80006da:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 80006dc:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 80006de:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 80006e0:	4770      	bx	lr

080006e2 <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 80006e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 80006e4:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 80006e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 80006e8:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 80006ea:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 80006ec:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 80006ee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 80006f0:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 80006f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 80006f4:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 80006f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 80006f8:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 80006fa:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 80006fc:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 80006fe:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000700:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000702:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000704:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000706:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000708:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 800070a:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 800070c:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 800070e:	4770      	bx	lr

08000710 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8000710:	e7fe      	b.n	8000710 <blocking_handler>
 8000712:	bf00      	nop

08000714 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <scb_reset_system+0x8>)
 800071a:	4a02      	ldr	r2, [pc, #8]	; (8000724 <scb_reset_system+0xc>)
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	e7fe      	b.n	800071e <scb_reset_system+0x6>
 8000720:	e000ed0c 	.word	0xe000ed0c
 8000724:	05fa0004 	.word	0x05fa0004

08000728 <flash_unlock>:


void flash_unlock(void)
{
	/* Authorize the FPEC access. */
	FLASH_KEYR = FLASH_KEYR_KEY1;
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <flash_unlock+0xc>)
 800072a:	4903      	ldr	r1, [pc, #12]	; (8000738 <flash_unlock+0x10>)
	FLASH_KEYR = FLASH_KEYR_KEY2;
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <flash_unlock+0x14>)
	FLASH_KEYR = FLASH_KEYR_KEY1;
 800072e:	6019      	str	r1, [r3, #0]
	FLASH_KEYR = FLASH_KEYR_KEY2;
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	4770      	bx	lr
 8000734:	40022004 	.word	0x40022004
 8000738:	45670123 	.word	0x45670123
 800073c:	cdef89ab 	.word	0xcdef89ab

08000740 <flash_lock>:

void flash_lock(void)
{
	FLASH_CR |= FLASH_CR_LOCK;
 8000740:	4a02      	ldr	r2, [pc, #8]	; (800074c <flash_lock+0xc>)
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6013      	str	r3, [r2, #0]
}
 800074a:	4770      	bx	lr
 800074c:	40022010 	.word	0x40022010

08000750 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000750:	6101      	str	r1, [r0, #16]
}
 8000752:	4770      	bx	lr

08000754 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000754:	0409      	lsls	r1, r1, #16
 8000756:	6101      	str	r1, [r0, #16]
}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 800075c:	4a02      	ldr	r2, [pc, #8]	; (8000768 <pwr_disable_backup_domain_write_protect+0xc>)
 800075e:	6813      	ldr	r3, [r2, #0]
 8000760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	4770      	bx	lr
 8000768:	40007000 	.word	0x40007000

0800076c <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 800076c:	4a02      	ldr	r2, [pc, #8]	; (8000778 <pwr_enable_backup_domain_write_protect+0xc>)
 800076e:	6813      	ldr	r3, [r2, #0]
 8000770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	4770      	bx	lr
 8000778:	40007000 	.word	0x40007000

0800077c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800077c:	2201      	movs	r2, #1
 800077e:	0943      	lsrs	r3, r0, #5
 8000780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000784:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	f000 001f 	and.w	r0, r0, #31
 800078e:	fa02 f000 	lsl.w	r0, r2, r0
 8000792:	4308      	orrs	r0, r1
 8000794:	6018      	str	r0, [r3, #0]
}
 8000796:	4770      	bx	lr

08000798 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000798:	2201      	movs	r2, #1
 800079a:	0943      	lsrs	r3, r0, #5
 800079c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	f000 001f 	and.w	r0, r0, #31
 80007aa:	fa02 f000 	lsl.w	r0, r2, r0
 80007ae:	4301      	orrs	r1, r0
 80007b0:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	ea22 0000 	bic.w	r0, r2, r0
 80007b8:	6018      	str	r0, [r3, #0]
}
 80007ba:	4770      	bx	lr

080007bc <desig_get_unique_id_as_string>:

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 80007bc:	2919      	cmp	r1, #25
 80007be:	bf28      	it	cs
 80007c0:	2119      	movcs	r1, #25
{
 80007c2:	b4f0      	push	{r4, r5, r6, r7}
		2 * sizeof(dev_id_buf) : string_len - 1;
 80007c4:	460d      	mov	r5, r1
{
 80007c6:	b088      	sub	sp, #32
	const char chars[] = "0123456789ABCDEF";
 80007c8:	4f16      	ldr	r7, [pc, #88]	; (8000824 <desig_get_unique_id_as_string+0x68>)
 80007ca:	ae03      	add	r6, sp, #12
{
 80007cc:	4604      	mov	r4, r0
	const char chars[] = "0123456789ABCDEF";
 80007ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80007d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007d2:	683a      	ldr	r2, [r7, #0]
	*result++ = DESIG_UNIQUE_ID2;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <desig_get_unique_id_as_string+0x6c>)
	const char chars[] = "0123456789ABCDEF";
 80007d6:	7032      	strb	r2, [r6, #0]
	*result++ = DESIG_UNIQUE_ID2;
 80007d8:	681a      	ldr	r2, [r3, #0]
	*result = DESIG_UNIQUE_ID0;
 80007da:	3b08      	subs	r3, #8
	*result++ = DESIG_UNIQUE_ID2;
 80007dc:	9200      	str	r2, [sp, #0]
	*result++ = DESIG_UNIQUE_ID1;
 80007de:	685a      	ldr	r2, [r3, #4]
		2 * sizeof(dev_id_buf) : string_len - 1;
 80007e0:	3d01      	subs	r5, #1
	*result++ = DESIG_UNIQUE_ID1;
 80007e2:	9201      	str	r2, [sp, #4]
	*result = DESIG_UNIQUE_ID0;
 80007e4:	681b      	ldr	r3, [r3, #0]

	for (i = 0; i < len; i += 2) {
 80007e6:	2d00      	cmp	r5, #0
	*result = DESIG_UNIQUE_ID0;
 80007e8:	9302      	str	r3, [sp, #8]
	for (i = 0; i < len; i += 2) {
 80007ea:	dd16      	ble.n	800081a <desig_get_unique_id_as_string+0x5e>
 80007ec:	2200      	movs	r2, #0
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 80007ee:	ab08      	add	r3, sp, #32
 80007f0:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80007f4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80007f8:	a808      	add	r0, sp, #32
 80007fa:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 80007fe:	f810 0c14 	ldrb.w	r0, [r0, #-20]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	ae08      	add	r6, sp, #32
 8000808:	4433      	add	r3, r6
 800080a:	18a1      	adds	r1, r4, r2
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 800080c:	54a0      	strb	r0, [r4, r2]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 800080e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
	for (i = 0; i < len; i += 2) {
 8000812:	3202      	adds	r2, #2
 8000814:	4295      	cmp	r5, r2
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000816:	704b      	strb	r3, [r1, #1]
	for (i = 0; i < len; i += 2) {
 8000818:	dce9      	bgt.n	80007ee <desig_get_unique_id_as_string+0x32>
	}

	string[len] = '\0';
 800081a:	2300      	movs	r3, #0
 800081c:	5563      	strb	r3, [r4, r5]
}
 800081e:	b008      	add	sp, #32
 8000820:	bcf0      	pop	{r4, r5, r6, r7}
 8000822:	4770      	bx	lr
 8000824:	080056e8 	.word	0x080056e8
 8000828:	1ffff7f0 	.word	0x1ffff7f0

0800082c <flash_get_status_flags>:
error, bit 5: end of operation.
*/

uint32_t flash_get_status_flags(void)
{
	uint32_t flags = (FLASH_SR & (FLASH_SR_PGERR |
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <flash_get_status_flags+0x1c>)
			FLASH_SR_EOP |
			FLASH_SR_WRPRTERR |
			FLASH_SR_BSY));
	if (DESIG_FLASH_SIZE > 512) {
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <flash_get_status_flags+0x20>)
	uint32_t flags = (FLASH_SR & (FLASH_SR_PGERR |
 8000830:	6810      	ldr	r0, [r2, #0]
	if (DESIG_FLASH_SIZE > 512) {
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		flags |= (FLASH_SR2 & (FLASH_SR_PGERR |
 8000838:	bf82      	ittt	hi
 800083a:	4b05      	ldrhi	r3, [pc, #20]	; (8000850 <flash_get_status_flags+0x24>)
 800083c:	681b      	ldrhi	r3, [r3, #0]
 800083e:	4318      	orrhi	r0, r3
 8000840:	f000 0035 	and.w	r0, r0, #53	; 0x35
			FLASH_SR_WRPRTERR |
			FLASH_SR_BSY));
	}

	return flags;
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	4002200c 	.word	0x4002200c
 800084c:	1ffff7e0 	.word	0x1ffff7e0
 8000850:	4002204c 	.word	0x4002204c

08000854 <flash_program_half_word>:
@param[in] address Full address of flash half word to be programmed.
@param[in] data half word to write
*/

void flash_program_half_word(uint32_t address, uint16_t data)
{
 8000854:	b570      	push	{r4, r5, r6, lr}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 8000856:	4c21      	ldr	r4, [pc, #132]	; (80008dc <flash_program_half_word+0x88>)
{
 8000858:	4605      	mov	r5, r0
 800085a:	460e      	mov	r6, r1
	flash_wait_for_last_operation();
 800085c:	f000 fee0 	bl	8001620 <flash_wait_for_last_operation>
	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 8000860:	8823      	ldrh	r3, [r4, #0]
 8000862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000866:	d914      	bls.n	8000892 <flash_program_half_word+0x3e>
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <flash_program_half_word+0x8c>)
 800086a:	429d      	cmp	r5, r3
 800086c:	d926      	bls.n	80008bc <flash_program_half_word+0x68>
		FLASH_CR2 |= FLASH_CR_PG;
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <flash_program_half_word+0x90>)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR |= FLASH_CR_PG;
	}

	MMIO16(address) = data;
 8000878:	802e      	strh	r6, [r5, #0]

	flash_wait_for_last_operation();
 800087a:	f000 fed1 	bl	8001620 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 800087e:	8823      	ldrh	r3, [r4, #0]
 8000880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000884:	d914      	bls.n	80008b0 <flash_program_half_word+0x5c>
		FLASH_CR2 &= ~FLASH_CR_PG;
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <flash_program_half_word+0x90>)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR &= ~FLASH_CR_PG;
	}
}
 8000890:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_CR |= FLASH_CR_PG;
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <flash_program_half_word+0x94>)
 8000894:	6813      	ldr	r3, [r2, #0]
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]
	MMIO16(address) = data;
 800089c:	802e      	strh	r6, [r5, #0]
	flash_wait_for_last_operation();
 800089e:	f000 febf 	bl	8001620 <flash_wait_for_last_operation>
	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 80008a2:	8823      	ldrh	r3, [r4, #0]
 80008a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a8:	d902      	bls.n	80008b0 <flash_program_half_word+0x5c>
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <flash_program_half_word+0x8c>)
 80008ac:	429d      	cmp	r5, r3
 80008ae:	d8ea      	bhi.n	8000886 <flash_program_half_word+0x32>
		FLASH_CR &= ~FLASH_CR_PG;
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <flash_program_half_word+0x94>)
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	6013      	str	r3, [r2, #0]
}
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_CR |= FLASH_CR_PG;
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <flash_program_half_word+0x94>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
	MMIO16(address) = data;
 80008c6:	802e      	strh	r6, [r5, #0]
	flash_wait_for_last_operation();
 80008c8:	f000 feaa 	bl	8001620 <flash_wait_for_last_operation>
		FLASH_CR &= ~FLASH_CR_PG;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <flash_program_half_word+0x94>)
	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 80008ce:	8823      	ldrh	r3, [r4, #0]
		FLASH_CR &= ~FLASH_CR_PG;
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e7ef      	b.n	80008ba <flash_program_half_word+0x66>
 80008da:	bf00      	nop
 80008dc:	1ffff7e0 	.word	0x1ffff7e0
 80008e0:	0807ffff 	.word	0x0807ffff
 80008e4:	40022050 	.word	0x40022050
 80008e8:	40022010 	.word	0x40022010

080008ec <flash_erase_page>:

@param[in] page_address Full address of flash page to be erased.
*/

void flash_erase_page(uint32_t page_address)
{
 80008ec:	b538      	push	{r3, r4, r5, lr}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512)
 80008ee:	4c28      	ldr	r4, [pc, #160]	; (8000990 <flash_erase_page+0xa4>)
{
 80008f0:	4605      	mov	r5, r0
	flash_wait_for_last_operation();
 80008f2:	f000 fe95 	bl	8001620 <flash_wait_for_last_operation>
	if ((DESIG_FLASH_SIZE > 512)
 80008f6:	8823      	ldrh	r3, [r4, #0]
 80008f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008fc:	d919      	bls.n	8000932 <flash_erase_page+0x46>
	    && (page_address >= FLASH_BASE+0x00080000)) {
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <flash_erase_page+0xa8>)
 8000900:	429d      	cmp	r5, r3
 8000902:	d930      	bls.n	8000966 <flash_erase_page+0x7a>
		FLASH_CR2 |= FLASH_CR_PER;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <flash_erase_page+0xac>)
		FLASH_AR2 = page_address;
 8000906:	4925      	ldr	r1, [pc, #148]	; (800099c <flash_erase_page+0xb0>)
		FLASH_CR2 |= FLASH_CR_PER;
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f042 0202 	orr.w	r2, r2, #2
 800090e:	601a      	str	r2, [r3, #0]
		FLASH_AR2 = page_address;
 8000910:	600d      	str	r5, [r1, #0]
		FLASH_CR2 |= FLASH_CR_STRT;
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000918:	601a      	str	r2, [r3, #0]
		FLASH_CR |= FLASH_CR_PER;
		FLASH_AR = page_address;
		FLASH_CR |= FLASH_CR_STRT;
	}

	flash_wait_for_last_operation();
 800091a:	f000 fe81 	bl	8001620 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512)
 800091e:	8823      	ldrh	r3, [r4, #0]
 8000920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000924:	d919      	bls.n	800095a <flash_erase_page+0x6e>
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 &= ~FLASH_CR_PER;
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <flash_erase_page+0xac>)
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f023 0302 	bic.w	r3, r3, #2
 800092e:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR &= ~FLASH_CR_PER;
	}
}
 8000930:	bd38      	pop	{r3, r4, r5, pc}
		FLASH_CR |= FLASH_CR_PER;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <flash_erase_page+0xb4>)
		FLASH_AR = page_address;
 8000934:	491b      	ldr	r1, [pc, #108]	; (80009a4 <flash_erase_page+0xb8>)
		FLASH_CR |= FLASH_CR_PER;
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f042 0202 	orr.w	r2, r2, #2
 800093c:	601a      	str	r2, [r3, #0]
		FLASH_AR = page_address;
 800093e:	600d      	str	r5, [r1, #0]
		FLASH_CR |= FLASH_CR_STRT;
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000946:	601a      	str	r2, [r3, #0]
	flash_wait_for_last_operation();
 8000948:	f000 fe6a 	bl	8001620 <flash_wait_for_last_operation>
	if ((DESIG_FLASH_SIZE > 512)
 800094c:	8823      	ldrh	r3, [r4, #0]
 800094e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000952:	d902      	bls.n	800095a <flash_erase_page+0x6e>
	    && (page_address >= FLASH_BASE+0x00080000)) {
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <flash_erase_page+0xa8>)
 8000956:	429d      	cmp	r5, r3
 8000958:	d8e5      	bhi.n	8000926 <flash_erase_page+0x3a>
		FLASH_CR &= ~FLASH_CR_PER;
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <flash_erase_page+0xb4>)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f023 0302 	bic.w	r3, r3, #2
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bd38      	pop	{r3, r4, r5, pc}
		FLASH_CR |= FLASH_CR_PER;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <flash_erase_page+0xb4>)
		FLASH_AR = page_address;
 8000968:	490e      	ldr	r1, [pc, #56]	; (80009a4 <flash_erase_page+0xb8>)
		FLASH_CR |= FLASH_CR_PER;
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	f042 0202 	orr.w	r2, r2, #2
 8000970:	601a      	str	r2, [r3, #0]
		FLASH_AR = page_address;
 8000972:	600d      	str	r5, [r1, #0]
		FLASH_CR |= FLASH_CR_STRT;
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800097a:	601a      	str	r2, [r3, #0]
	flash_wait_for_last_operation();
 800097c:	f000 fe50 	bl	8001620 <flash_wait_for_last_operation>
		FLASH_CR &= ~FLASH_CR_PER;
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <flash_erase_page+0xb4>)
	if ((DESIG_FLASH_SIZE > 512)
 8000982:	8823      	ldrh	r3, [r4, #0]
		FLASH_CR &= ~FLASH_CR_PER;
 8000984:	6813      	ldr	r3, [r2, #0]
 8000986:	f023 0302 	bic.w	r3, r3, #2
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e7ea      	b.n	8000964 <flash_erase_page+0x78>
 800098e:	bf00      	nop
 8000990:	1ffff7e0 	.word	0x1ffff7e0
 8000994:	0807ffff 	.word	0x0807ffff
 8000998:	40022050 	.word	0x40022050
 800099c:	40022054 	.word	0x40022054
 80009a0:	40022010 	.word	0x40022010
 80009a4:	40022014 	.word	0x40022014

080009a8 <gpio_set_mode>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 80009a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80009ac:	f643 7cf8 	movw	ip, #16376	; 0x3ff8
	crl = GPIO_CRL(gpioport);
 80009b0:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 80009b2:	2400      	movs	r4, #0
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80009b4:	270f      	movs	r7, #15
	crh = GPIO_CRH(gpioport);
 80009b6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80009ba:	e004      	b.n	80009c6 <gpio_set_mode+0x1e>
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80009bc:	ea48 060a 	orr.w	r6, r8, sl
 80009c0:	3401      	adds	r4, #1
	for (i = 0; i < 16; i++) {
 80009c2:	2c10      	cmp	r4, #16
 80009c4:	d029      	beq.n	8000a1a <gpio_set_mode+0x72>
		if (!((1 << i) & gpios)) {
 80009c6:	fa43 f504 	asr.w	r5, r3, r4
 80009ca:	f015 0f01 	tst.w	r5, #1
 80009ce:	b2a5      	uxth	r5, r4
 80009d0:	d0f6      	beq.n	80009c0 <gpio_set_mode+0x18>
 80009d2:	ea4f 0884 	mov.w	r8, r4, lsl #2
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80009d6:	f108 0902 	add.w	r9, r8, #2
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80009da:	fa07 fa08 	lsl.w	sl, r7, r8
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80009de:	fa02 f909 	lsl.w	r9, r2, r9
 80009e2:	fa01 f808 	lsl.w	r8, r1, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80009e6:	2c07      	cmp	r4, #7
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80009e8:	ea26 0a0a 	bic.w	sl, r6, sl
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80009ec:	ea49 0808 	orr.w	r8, r9, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80009f0:	d9e4      	bls.n	80009bc <gpio_set_mode+0x14>
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80009f2:	4465      	add	r5, ip
 80009f4:	00ad      	lsls	r5, r5, #2
 80009f6:	b2ad      	uxth	r5, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80009f8:	f105 0802 	add.w	r8, r5, #2
 80009fc:	fa01 f905 	lsl.w	r9, r1, r5
 8000a00:	fa02 f808 	lsl.w	r8, r2, r8
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000a04:	fa07 f505 	lsl.w	r5, r7, r5
 8000a08:	3401      	adds	r4, #1
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000a0a:	ea48 0809 	orr.w	r8, r8, r9
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000a0e:	ea2e 0505 	bic.w	r5, lr, r5
	for (i = 0; i < 16; i++) {
 8000a12:	2c10      	cmp	r4, #16
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000a14:	ea48 0e05 	orr.w	lr, r8, r5
	for (i = 0; i < 16; i++) {
 8000a18:	d1d5      	bne.n	80009c6 <gpio_set_mode+0x1e>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000a1a:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000a1c:	f8c0 e004 	str.w	lr, [r0, #4]
}
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000a24 <rcc_is_osc_ready.part.0>:

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <rcc_is_osc_ready.part.0+0xc>)
 8000a26:	6818      	ldr	r0, [r3, #0]
		return RCC_BDCR & RCC_BDCR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
	}
	return false;
}
 8000a28:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <rcc_osc_on.part.1>:

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000a34:	4a02      	ldr	r2, [pc, #8]	; (8000a40 <rcc_osc_on.part.1+0xc>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a3c:	6013      	str	r3, [r2, #0]
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
		break;
	}
}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000

08000a44 <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000a44:	4a02      	ldr	r2, [pc, #8]	; (8000a50 <rcc_enable_rtc_clock+0xc>)
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4c:	6013      	str	r3, [r2, #0]
}
 8000a4e:	4770      	bx	lr
 8000a50:	40021020 	.word	0x40021020

08000a54 <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8000a54:	2806      	cmp	r0, #6
 8000a56:	d80a      	bhi.n	8000a6e <rcc_set_rtc_clock_source+0x1a>
 8000a58:	e8df f000 	tbb	[pc, r0]
 8000a5c:	2f040404 	.word	0x2f040404
 8000a60:	1d04      	.short	0x1d04
 8000a62:	0a          	.byte	0x0a
 8000a63:	00          	.byte	0x00
	case RCC_PLL2:
	case RCC_PLL3:
	case RCC_HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000a64:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <rcc_set_rtc_clock_source+0x8c>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a6c:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000a6e:	4770      	bx	lr
		RCC_CSR |= RCC_CSR_LSION;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <rcc_set_rtc_clock_source+0x90>)
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000a72:	461a      	mov	r2, r3
		RCC_CSR |= RCC_CSR_LSION;
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	f041 0101 	orr.w	r1, r1, #1
 8000a7a:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	0799      	lsls	r1, r3, #30
 8000a80:	d5fc      	bpl.n	8000a7c <rcc_set_rtc_clock_source+0x28>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <rcc_set_rtc_clock_source+0x8c>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a8a:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a92:	601a      	str	r2, [r3, #0]
		break;
 8000a94:	4770      	bx	lr
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <rcc_set_rtc_clock_source+0x8c>)
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000a98:	461a      	mov	r2, r3
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	f041 0101 	orr.w	r1, r1, #1
 8000aa0:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000aa2:	6813      	ldr	r3, [r2, #0]
 8000aa4:	0798      	lsls	r0, r3, #30
 8000aa6:	d5fc      	bpl.n	8000aa2 <rcc_set_rtc_clock_source+0x4e>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aae:	6013      	str	r3, [r2, #0]
		RCC_BDCR |= (1 << 8);
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
		break;
 8000ab8:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <rcc_set_rtc_clock_source+0x94>)
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000abc:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSEON;
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000ac4:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	039b      	lsls	r3, r3, #14
 8000aca:	d5fc      	bpl.n	8000ac6 <rcc_set_rtc_clock_source+0x72>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <rcc_set_rtc_clock_source+0x8c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ad4:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000adc:	601a      	str	r2, [r3, #0]
		break;
 8000ade:	4770      	bx	lr
 8000ae0:	40021020 	.word	0x40021020
 8000ae4:	40021024 	.word	0x40021024
 8000ae8:	40021000 	.word	0x40021000

08000aec <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000aec:	b538      	push	{r3, r4, r5, lr}
		RCC_CR |= RCC_CR_HSION;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
		return RCC_CR & RCC_CR_HSIRDY;
 8000af0:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSION;
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	f041 0101 	orr.w	r1, r1, #1
 8000af8:	6019      	str	r1, [r3, #0]
		return RCC_CR & RCC_CR_HSIRDY;
 8000afa:	6813      	ldr	r3, [r2, #0]
	while (!rcc_is_osc_ready(osc));
 8000afc:	0799      	lsls	r1, r3, #30
 8000afe:	d5fc      	bpl.n	8000afa <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xe>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b00:	4827      	ldr	r0, [pc, #156]	; (8000ba0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
		return RCC_CR & RCC_CR_HSERDY;
 8000b02:	4926      	ldr	r1, [pc, #152]	; (8000b9c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b04:	6803      	ldr	r3, [r0, #0]
 8000b06:	f023 0303 	bic.w	r3, r3, #3
 8000b0a:	6003      	str	r3, [r0, #0]
		RCC_CR |= RCC_CR_HSEON;
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b12:	6013      	str	r3, [r2, #0]
		return RCC_CR & RCC_CR_HSERDY;
 8000b14:	680b      	ldr	r3, [r1, #0]
	while (!rcc_is_osc_ready(osc));
 8000b16:	039b      	lsls	r3, r3, #14
 8000b18:	d5fc      	bpl.n	8000b14 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x28>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b1a:	4c21      	ldr	r4, [pc, #132]	; (8000ba0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000b1c:	2002      	movs	r0, #2
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	f023 0303 	bic.w	r3, r3, #3
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b30:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b38:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b44:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b4c:	6023      	str	r3, [r4, #0]
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000b4e:	f000 fd5d 	bl	800160c <flash_set_ws>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000b58:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000b5c:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b6c:	6023      	str	r3, [r4, #0]
 8000b6e:	f7ff ff61 	bl	8000a34 <rcc_osc_on.part.1>
 8000b72:	f7ff ff57 	bl	8000a24 <rcc_is_osc_ready.part.0>
	while (!rcc_is_osc_ready(osc));
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d0fb      	beq.n	8000b72 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x86>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b7a:	4909      	ldr	r1, [pc, #36]	; (8000ba0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb8>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b7e:	680b      	ldr	r3, [r1, #0]
	rcc_ahb_frequency = 72000000;
 8000b80:	4d09      	ldr	r5, [pc, #36]	; (8000ba8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xbc>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000b82:	f023 0303 	bic.w	r3, r3, #3
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	600b      	str	r3, [r1, #0]
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
 8000b8c:	4c07      	ldr	r4, [pc, #28]	; (8000bac <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc0>)
	rcc_apb1_frequency = 36000000;
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc4>)
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc8>)
	rcc_ahb_frequency = 72000000;
 8000b92:	602a      	str	r2, [r5, #0]
	rcc_apb2_frequency = 72000000;
 8000b94:	6022      	str	r2, [r4, #0]
	rcc_apb1_frequency = 36000000;
 8000b96:	6003      	str	r3, [r0, #0]
}
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40021004 	.word	0x40021004
 8000ba4:	044aa200 	.word	0x044aa200
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	02255100 	.word	0x02255100

08000bb8 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8000bb8:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8000bba:	f240 3097 	movw	r0, #919	; 0x397
 8000bbe:	f7ff fddd 	bl	800077c <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8000bc2:	2300      	movs	r3, #0
	SET_REG(USB_BTABLE_REG, 0);
	SET_REG(USB_ISTR_REG, 0);

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000bc4:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
	SET_REG(USB_CNTR_REG, 0);
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <st_usbfs_v1_usbd_init+0x24>)
	SET_REG(USB_BTABLE_REG, 0);
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <st_usbfs_v1_usbd_init+0x28>)
	SET_REG(USB_ISTR_REG, 0);
 8000bcc:	4c05      	ldr	r4, [pc, #20]	; (8000be4 <st_usbfs_v1_usbd_init+0x2c>)
	SET_REG(USB_CNTR_REG, 0);
 8000bce:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 8000bd0:	6003      	str	r3, [r0, #0]
	SET_REG(USB_ISTR_REG, 0);
 8000bd2:	6023      	str	r3, [r4, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <st_usbfs_v1_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000bd6:	6011      	str	r1, [r2, #0]
}
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005c40 	.word	0x40005c40
 8000be0:	40005c50 	.word	0x40005c50
 8000be4:	40005c44 	.word	0x40005c44
 8000be8:	20000b58 	.word	0x20000b58

08000bec <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8000bec:	3201      	adds	r2, #1
 8000bee:	1052      	asrs	r2, r2, #1
 8000bf0:	b293      	uxth	r3, r2
 8000bf2:	b15a      	cbz	r2, 8000c0c <st_usbfs_copy_to_pm+0x20>
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		*PM++ = *lbuf++;
 8000bfe:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000c02:	3004      	adds	r0, #4
	for (len = (len + 1) >> 1; len; len--) {
 8000c04:	4299      	cmp	r1, r3
		*PM++ = *lbuf++;
 8000c06:	f840 2c04 	str.w	r2, [r0, #-4]
	for (len = (len + 1) >> 1; len; len--) {
 8000c0a:	d1f8      	bne.n	8000bfe <st_usbfs_copy_to_pm+0x12>
	}
}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 8000c10:	b470      	push	{r4, r5, r6}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 8000c12:	f002 0601 	and.w	r6, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000c16:	0852      	lsrs	r2, r2, #1
 8000c18:	d00d      	beq.n	8000c36 <st_usbfs_copy_from_pm+0x26>
	const volatile uint16_t *PM = vPM;
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	3201      	adds	r2, #1
 8000c22:	eb00 0542 	add.w	r5, r0, r2, lsl #1
		*lbuf = *PM;
 8000c26:	f833 4b04 	ldrh.w	r4, [r3], #4
 8000c2a:	f820 4b02 	strh.w	r4, [r0], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000c2e:	42a8      	cmp	r0, r5
 8000c30:	d1f9      	bne.n	8000c26 <st_usbfs_copy_from_pm+0x16>
 8000c32:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	}

	if (odd) {
 8000c36:	b10e      	cbz	r6, 8000c3c <st_usbfs_copy_from_pm+0x2c>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 8000c38:	780b      	ldrb	r3, [r1, #0]
 8000c3a:	7003      	strb	r3, [r0, #0]
	}
}
 8000c3c:	bc70      	pop	{r4, r5, r6}
 8000c3e:	4770      	bx	lr

08000c40 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	4680      	mov	r8, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8000c46:	6800      	ldr	r0, [r0, #0]
{
 8000c48:	468a      	mov	sl, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	461e      	mov	r6, r3
 8000c4e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	usbd_dev = driver->init();
 8000c52:	4780      	blx	r0
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 8000c54:	2500      	movs	r5, #0
	usbd_dev->strings = strings;
 8000c56:	6086      	str	r6, [r0, #8]
	usbd_dev->num_strings = num_strings;
 8000c58:	9e08      	ldr	r6, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <usbd_init+0x48>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8000c5c:	490b      	ldr	r1, [pc, #44]	; (8000c8c <usbd_init+0x4c>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <usbd_init+0x50>)
	usbd_dev->num_strings = num_strings;
 8000c60:	60c6      	str	r6, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 8000c62:	9e09      	ldr	r6, [sp, #36]	; 0x24
	usbd_dev->desc = dev;
 8000c64:	f8c0 a000 	str.w	sl, [r0]
	usbd_dev->driver = driver;
 8000c68:	f8c0 80dc 	str.w	r8, [r0, #220]	; 0xdc
	usbd_dev->config = conf;
 8000c6c:	6047      	str	r7, [r0, #4]
	usbd_dev->ctrl_buf = control_buffer;
 8000c6e:	6106      	str	r6, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8000c70:	f8a0 9014 	strh.w	r9, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8000c74:	e9c0 131b 	strd	r1, r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8000c78:	6682      	str	r2, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8000c7a:	e9c0 5532 	strd	r5, r5, [r0, #200]	; 0xc8
 8000c7e:	e9c0 5534 	strd	r5, r5, [r0, #208]	; 0xd0
	}

	return usbd_dev;
}
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	bf00      	nop
 8000c88:	08000ec9 	.word	0x08000ec9
 8000c8c:	08000f2d 	.word	0x08000f2d
 8000c90:	08000fcd 	.word	0x08000fcd

08000c94 <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 8000c94:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000c96:	4770      	bx	lr

08000c98 <_usbd_reset>:

void _usbd_reset(usbd_device *usbd_dev)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->current_address = 0;
 8000c9a:	2500      	movs	r5, #0
{
 8000c9c:	4604      	mov	r4, r0
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8000c9e:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8000ca0:	82c5      	strh	r5, [r0, #22]
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000ca2:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
 8000ca6:	b082      	sub	sp, #8
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000ca8:	79db      	ldrb	r3, [r3, #7]
 8000caa:	9500      	str	r5, [sp, #0]
 8000cac:	6896      	ldr	r6, [r2, #8]
 8000cae:	4629      	mov	r1, r5
 8000cb0:	462a      	mov	r2, r5
 8000cb2:	47b0      	blx	r6
	usbd_dev->driver->set_address(usbd_dev, 0);
 8000cb4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000cb8:	4629      	mov	r1, r5
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8000cc0:	69e3      	ldr	r3, [r4, #28]
 8000cc2:	b11b      	cbz	r3, 8000ccc <_usbd_reset+0x34>
}
 8000cc4:	b002      	add	sp, #8
 8000cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbd_dev->user_callback_reset();
 8000cca:	4718      	bx	r3
}
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd70      	pop	{r4, r5, r6, pc}

08000cd0 <usbd_poll>:
	usbd_dev->driver->poll(usbd_dev);
 8000cd0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	4718      	bx	r3

08000cd8 <usbd_ep_setup>:
{
 8000cd8:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000cda:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000cde:	68a4      	ldr	r4, [r4, #8]
 8000ce0:	46a4      	mov	ip, r4
}
 8000ce2:	bc10      	pop	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000ce4:	4760      	bx	ip
 8000ce6:	bf00      	nop

08000ce8 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8000ce8:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000cea:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000cee:	69e4      	ldr	r4, [r4, #28]
 8000cf0:	46a4      	mov	ip, r4
}
 8000cf2:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000cf4:	4760      	bx	ip
 8000cf6:	bf00      	nop

08000cf8 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8000cf8:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000cfa:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000cfe:	6a24      	ldr	r4, [r4, #32]
 8000d00:	46a4      	mov	ip, r4
}
 8000d02:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000d04:	4760      	bx	ip
 8000d06:	bf00      	nop

08000d08 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8000d08:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	4718      	bx	r3

08000d10 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8000d10:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4718      	bx	r3

08000d18 <usbd_ep_nak_set>:
}

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8000d18:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4718      	bx	r3

08000d20 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8000d20:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000d22:	6802      	ldr	r2, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
 8000d24:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000d26:	79d1      	ldrb	r1, [r2, #7]
{
 8000d28:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000d2e:	d310      	bcc.n	8000d52 <usb_control_send_chunk+0x32>
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8000d30:	2100      	movs	r1, #0
 8000d32:	f7ff ffd9 	bl	8000ce8 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
 8000d36:	2300      	movs	r3, #0
			DATA_IN : LAST_DATA_IN;
 8000d38:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 8000d3c:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	bf0c      	ite	eq
 8000d42:	2203      	moveq	r2, #3
 8000d44:	2202      	movne	r2, #2
		usbd_dev->control_state.needs_zlp = false;
 8000d46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.state =
 8000d4a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf = NULL;
 8000d4e:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8000d50:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 8000d52:	460b      	mov	r3, r1
 8000d54:	2100      	movs	r1, #0
 8000d56:	f7ff ffc7 	bl	8000ce8 <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8000d5a:	2202      	movs	r2, #2
			usbd_dev->desc->bMaxPacketSize0;
 8000d5c:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.state = DATA_IN;
 8000d5e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 8000d62:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 8000d64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8000d66:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8000d68:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8000d6a:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8000d6c:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8000d6e:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	bf00      	nop

08000d74 <usb_control_request_dispatch>:
}

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 8000d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d78:	4605      	mov	r5, r0
 8000d7a:	460f      	mov	r7, r1
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8000d82:	f100 093c 	add.w	r9, r0, #60	; 0x3c
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8000d86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d8a:	f100 0a68 	add.w	sl, r0, #104	; 0x68
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8000d8e:	f100 0b40 	add.w	fp, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 8000d92:	6826      	ldr	r6, [r4, #0]
 8000d94:	b196      	cbz	r6, 8000dbc <usb_control_request_dispatch+0x48>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8000d96:	7961      	ldrb	r1, [r4, #5]
 8000d98:	783b      	ldrb	r3, [r7, #0]
 8000d9a:	7922      	ldrb	r2, [r4, #4]
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f104 0408 	add.w	r4, r4, #8
 8000da4:	d108      	bne.n	8000db8 <usb_control_request_dispatch+0x44>
			result = cb[i].cb(usbd_dev, req,
 8000da6:	f8cd b000 	str.w	fp, [sp]
 8000daa:	464b      	mov	r3, r9
 8000dac:	4642      	mov	r2, r8
 8000dae:	4639      	mov	r1, r7
 8000db0:	4628      	mov	r0, r5
 8000db2:	47b0      	blx	r6
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8000db4:	2801      	cmp	r0, #1
 8000db6:	d90a      	bls.n	8000dce <usb_control_request_dispatch+0x5a>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000db8:	4554      	cmp	r4, sl
 8000dba:	d1ea      	bne.n	8000d92 <usb_control_request_dispatch+0x1e>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	4628      	mov	r0, r5
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8000dc4:	b003      	add	sp, #12
 8000dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 8000dca:	f000 bbed 	b.w	80015a8 <_usbd_standard_request>
}
 8000dce:	b003      	add	sp, #12
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dd4 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8000dd4:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000dd6:	6903      	ldr	r3, [r0, #16]
{
 8000dd8:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000dda:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000ddc:	798b      	ldrb	r3, [r1, #6]
 8000dde:	79ca      	ldrb	r2, [r1, #7]
{
 8000de0:	460d      	mov	r5, r1
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000de6:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8000de8:	f7ff ffc4 	bl	8000d74 <usb_control_request_dispatch>
 8000dec:	b1a8      	cbz	r0, 8000e1a <usb_control_setup_read+0x46>
		if (req->wLength) {
 8000dee:	88eb      	ldrh	r3, [r5, #6]
 8000df0:	b323      	cbz	r3, 8000e3c <usb_control_setup_read+0x68>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000df2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000df4:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 8000df6:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000df8:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 8000dfa:	d917      	bls.n	8000e2c <usb_control_setup_read+0x58>
		if (len && (len % ep_size == 0)) {
 8000dfc:	b132      	cbz	r2, 8000e0c <usb_control_setup_read+0x38>
 8000dfe:	fb92 f3f1 	sdiv	r3, r2, r1
 8000e02:	fb01 2213 	mls	r2, r1, r3, r2
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	0952      	lsrs	r2, r2, #5
			usbd_dev->control_state.needs_zlp =
 8000e0c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000e10:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8000e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 8000e16:	f7ff bf83 	b.w	8000d20 <usb_control_send_chunk>
 8000e1a:	4606      	mov	r6, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff71 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000e26:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8000e2c:	2200      	movs	r2, #0
			usb_control_send_chunk(usbd_dev);
 8000e2e:	4620      	mov	r0, r4
			usbd_dev->control_state.needs_zlp =
 8000e30:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8000e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 8000e38:	f7ff bf72 	b.w	8000d20 <usb_control_send_chunk>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff ff51 	bl	8000ce8 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000e46:	2304      	movs	r3, #4
 8000e48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	bf00      	nop

08000e50 <usb_control_recv_chunk>:
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000e56:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8000e58:	79d2      	ldrb	r2, [r2, #7]
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	4294      	cmp	r4, r2
 8000e5e:	bfa8      	it	ge
 8000e60:	4614      	movge	r4, r2
				       usbd_dev->control_state.ctrl_buf +
 8000e62:	6b82      	ldr	r2, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000e64:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000e66:	441a      	add	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4633      	mov	r3, r6
{
 8000e6c:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000e6e:	f7ff ff43 	bl	8000cf8 <usbd_ep_read_packet>
	if (size != packetsize) {
 8000e72:	4286      	cmp	r6, r0
 8000e74:	d104      	bne.n	8000e80 <usb_control_recv_chunk+0x30>
	usbd_dev->control_state.ctrl_len += size;
 8000e76:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8000e78:	b2a0      	uxth	r0, r4
 8000e7a:	441e      	add	r6, r3
 8000e7c:	87ae      	strh	r6, [r5, #60]	; 0x3c
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000e80:	4628      	mov	r0, r5
 8000e82:	2201      	movs	r2, #1
 8000e84:	2100      	movs	r1, #0
 8000e86:	f7ff ff3f 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
 8000e96:	bf00      	nop

08000e98 <usbd_register_control_callback>:
{
 8000e98:	b470      	push	{r4, r5, r6}
 8000e9a:	4605      	mov	r5, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000e9c:	2600      	movs	r6, #0
		if (usbd_dev->user_control_callback[i].cb) {
 8000e9e:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8000ea0:	3508      	adds	r5, #8
 8000ea2:	b13c      	cbz	r4, 8000eb4 <usbd_register_control_callback+0x1c>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000ea4:	3601      	adds	r6, #1
 8000ea6:	2e04      	cmp	r6, #4
 8000ea8:	d1f9      	bne.n	8000e9e <usbd_register_control_callback+0x6>
	return -1;
 8000eaa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8000eae:	4620      	mov	r0, r4
 8000eb0:	bc70      	pop	{r4, r5, r6}
 8000eb2:	4770      	bx	lr
 8000eb4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
		usbd_dev->user_control_callback[i].type = type;
 8000eb8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8000ebc:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 8000ec0:	6483      	str	r3, [r0, #72]	; 0x48
}
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	bc70      	pop	{r4, r5, r6}
 8000ec6:	4770      	bx	lr

08000ec8 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8000ec8:	b538      	push	{r3, r4, r5, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8000eca:	2500      	movs	r5, #0
{
 8000ecc:	4604      	mov	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8000ece:	4629      	mov	r1, r5
 8000ed0:	2201      	movs	r2, #1
	usbd_dev->control_state.complete = NULL;
 8000ed2:	6405      	str	r5, [r0, #64]	; 0x40
	usbd_ep_nak_set(usbd_dev, 0, 1);
 8000ed4:	f7ff ff20 	bl	8000d18 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 8000ed8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8000eda:	f104 0130 	add.w	r1, r4, #48	; 0x30
	if (req->wLength == 0) {
 8000ede:	b1c3      	cbz	r3, 8000f12 <_usbd_control_setup+0x4a>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8000ee0:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	db14      	blt.n	8000f12 <_usbd_control_setup+0x4a>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8000ee8:	8aa2      	ldrh	r2, [r4, #20]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d316      	bcc.n	8000f1c <_usbd_control_setup+0x54>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000eee:	6921      	ldr	r1, [r4, #16]
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000ef0:	6822      	ldr	r2, [r4, #0]
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000ef2:	63a1      	str	r1, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 8000ef4:	87a5      	strh	r5, [r4, #60]	; 0x3c
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000ef6:	79d2      	ldrb	r2, [r2, #7]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000ef8:	4620      	mov	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000efa:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 8000efc:	bf34      	ite	cc
 8000efe:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8000f00:	2306      	movcs	r3, #6
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000f02:	2200      	movs	r2, #0
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8000f04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000f08:	4611      	mov	r1, r2
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8000f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000f0e:	f7ff bf03 	b.w	8000d18 <usbd_ep_nak_set>
		usb_control_setup_read(usbd_dev, req);
 8000f12:	4620      	mov	r0, r4
}
 8000f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_control_setup_read(usbd_dev, req);
 8000f18:	f7ff bf5c 	b.w	8000dd4 <usb_control_setup_read>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4620      	mov	r0, r4
 8000f22:	f7ff fef1 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000f26:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}

08000f2c <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8000f2c:	b538      	push	{r3, r4, r5, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8000f2e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8000f32:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8000f34:	2b06      	cmp	r3, #6
 8000f36:	d02b      	beq.n	8000f90 <_usbd_control_out+0x64>
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	d018      	beq.n	8000f6e <_usbd_control_out+0x42>
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d007      	beq.n	8000f50 <_usbd_control_out+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2100      	movs	r1, #0
 8000f44:	f7ff fee0 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000f50:	f7ff ff7e 	bl	8000e50 <usb_control_recv_chunk>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	dbfa      	blt.n	8000f4e <_usbd_control_out+0x22>
					usbd_dev->desc->bMaxPacketSize0) {
 8000f58:	6822      	ldr	r2, [r4, #0]
		if ((usbd_dev->control_state.req.wLength -
 8000f5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 8000f5c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
					usbd_dev->desc->bMaxPacketSize0) {
 8000f5e:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	4293      	cmp	r3, r2
 8000f64:	dcf3      	bgt.n	8000f4e <_usbd_control_out+0x22>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8000f66:	2306      	movs	r3, #6
 8000f68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fec0 	bl	8000cf8 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8000f78:	2200      	movs	r2, #0
		if (usbd_dev->control_state.complete) {
 8000f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
		usbd_dev->control_state.state = IDLE;
 8000f7c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8000f80:	b11b      	cbz	r3, 8000f8a <_usbd_control_out+0x5e>
			usbd_dev->control_state.complete(usbd_dev,
 8000f82:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000f86:	4620      	mov	r0, r4
 8000f88:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000f90:	f7ff ff5e 	bl	8000e50 <usb_control_recv_chunk>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	dbda      	blt.n	8000f4e <_usbd_control_out+0x22>
		if (usb_control_request_dispatch(usbd_dev,
 8000f98:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fee9 	bl	8000d74 <usb_control_request_dispatch>
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	b148      	cbz	r0, 8000fba <_usbd_control_out+0x8e>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	4620      	mov	r0, r4
 8000faa:	461a      	mov	r2, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fe9b 	bl	8000ce8 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000fb8:	bd38      	pop	{r3, r4, r5, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000fba:	4601      	mov	r1, r0
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fea2 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000fc4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop

08000fcc <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8000fcc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8000fd0:	b510      	push	{r4, lr}
	switch (usbd_dev->control_state.state) {
 8000fd2:	2b03      	cmp	r3, #3
{
 8000fd4:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8000fd6:	d027      	beq.n	8001028 <_usbd_control_in+0x5c>
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d00d      	beq.n	8000ff8 <_usbd_control_in+0x2c>
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d007      	beq.n	8000ff0 <_usbd_control_in+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f7ff fe90 	bl	8000d08 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 8000ff4:	f7ff be94 	b.w	8000d20 <usb_control_send_chunk>
		if (usbd_dev->control_state.complete) {
 8000ff8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ffa:	b113      	cbz	r3, 8001002 <_usbd_control_in+0x36>
			usbd_dev->control_state.complete(usbd_dev,
 8000ffc:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001000:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8001002:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ee      	bne.n	8000fe8 <_usbd_control_in+0x1c>
 800100a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800100e:	2b05      	cmp	r3, #5
 8001010:	d1ea      	bne.n	8000fe8 <_usbd_control_in+0x1c>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001012:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001014:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001018:	b2c9      	uxtb	r1, r1
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4620      	mov	r0, r4
 800101e:	4798      	blx	r3
	usbd_dev->control_state.state = IDLE;
 8001020:	2300      	movs	r3, #0
 8001022:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001026:	bd10      	pop	{r4, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8001028:	2307      	movs	r3, #7
}
 800102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_ep_nak_set(usbd_dev, 0, 0);
 800102e:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 8001030:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8001034:	4611      	mov	r1, r2
 8001036:	f7ff be6f 	b.w	8000d18 <usbd_ep_nak_set>
 800103a:	bf00      	nop

0800103c <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 800103e:	884e      	ldrh	r6, [r1, #2]
 8001040:	b196      	cbz	r6, 8001068 <usb_standard_set_configuration+0x2c>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001042:	6803      	ldr	r3, [r0, #0]
 8001044:	7c5d      	ldrb	r5, [r3, #17]
 8001046:	b16d      	cbz	r5, 8001064 <usb_standard_set_configuration+0x28>
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8001048:	6844      	ldr	r4, [r0, #4]
			if (req->wValue
 800104a:	7963      	ldrb	r3, [r4, #5]
 800104c:	42b3      	cmp	r3, r6
 800104e:	d044      	beq.n	80010da <usb_standard_set_configuration+0x9e>
 8001050:	4622      	mov	r2, r4
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	e003      	b.n	800105e <usb_standard_set_configuration+0x22>
			    == usbd_dev->config[i].bConfigurationValue) {
 8001056:	7c97      	ldrb	r7, [r2, #18]
 8001058:	320d      	adds	r2, #13
			if (req->wValue
 800105a:	42be      	cmp	r6, r7
 800105c:	d022      	beq.n	80010a4 <usb_standard_set_configuration+0x68>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800105e:	3301      	adds	r3, #1
 8001060:	42ab      	cmp	r3, r5
 8001062:	d1f8      	bne.n	8001056 <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8001064:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8001066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 8001068:	75c6      	strb	r6, [r0, #23]
 800106a:	4604      	mov	r4, r0
	usbd_dev->driver->ep_reset(usbd_dev);
 800106c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001070:	460e      	mov	r6, r1
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001076:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800107a:	b18b      	cbz	r3, 80010a0 <usb_standard_set_configuration+0x64>
			usbd_dev->user_control_callback[i].cb = NULL;
 800107c:	2200      	movs	r2, #0
 800107e:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
 8001082:	64a2      	str	r2, [r4, #72]	; 0x48
 8001084:	6522      	str	r2, [r4, #80]	; 0x50
 8001086:	65a2      	str	r2, [r4, #88]	; 0x58
 8001088:	6622      	str	r2, [r4, #96]	; 0x60
 800108a:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 800108e:	b113      	cbz	r3, 8001096 <usb_standard_set_configuration+0x5a>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001090:	8871      	ldrh	r1, [r6, #2]
 8001092:	4620      	mov	r0, r4
 8001094:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001096:	42af      	cmp	r7, r5
 8001098:	d002      	beq.n	80010a0 <usb_standard_set_configuration+0x64>
 800109a:	f855 3b04 	ldr.w	r3, [r5], #4
 800109e:	e7f6      	b.n	800108e <usb_standard_set_configuration+0x52>
	return USBD_REQ_HANDLED;
 80010a0:	2001      	movs	r0, #1
}
 80010a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75c3      	strb	r3, [r0, #23]
	if (usbd_dev->current_config > 0) {
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0dd      	beq.n	800106a <usb_standard_set_configuration+0x2e>
 80010ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80010b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80010b6:	3b0d      	subs	r3, #13
 80010b8:	441c      	add	r4, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80010ba:	7925      	ldrb	r5, [r4, #4]
 80010bc:	2d00      	cmp	r5, #0
 80010be:	d0d4      	beq.n	800106a <usb_standard_set_configuration+0x2e>
 80010c0:	2300      	movs	r3, #0
				*cfg->interface[i].cur_altsetting = 0;
 80010c2:	461f      	mov	r7, r3
			if (cfg->interface[i].cur_altsetting) {
 80010c4:	f8d4 2009 	ldr.w	r2, [r4, #9]
 80010c8:	011e      	lsls	r6, r3, #4
 80010ca:	58b2      	ldr	r2, [r6, r2]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80010cc:	3301      	adds	r3, #1
			if (cfg->interface[i].cur_altsetting) {
 80010ce:	b10a      	cbz	r2, 80010d4 <usb_standard_set_configuration+0x98>
				*cfg->interface[i].cur_altsetting = 0;
 80010d0:	7017      	strb	r7, [r2, #0]
 80010d2:	7925      	ldrb	r5, [r4, #4]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80010d4:	429d      	cmp	r5, r3
 80010d6:	d8f5      	bhi.n	80010c4 <usb_standard_set_configuration+0x88>
 80010d8:	e7c7      	b.n	800106a <usb_standard_set_configuration+0x2e>
	usbd_dev->current_config = found_index + 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	75c3      	strb	r3, [r0, #23]
 80010de:	e7ec      	b.n	80010ba <usb_standard_set_configuration+0x7e>

080010e0 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	2901      	cmp	r1, #1
		*len = 1;
 80010e6:	bf84      	itt	hi
 80010e8:	2101      	movhi	r1, #1
 80010ea:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 80010ec:	7dc3      	ldrb	r3, [r0, #23]
 80010ee:	b913      	cbnz	r3, 80010f6 <usb_standard_get_configuration+0x16>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
	} else {
		(*buf)[0] = 0;
 80010f0:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 80010f2:	2001      	movs	r0, #1
 80010f4:	4770      	bx	lr
		(*buf)[0] = cfg->bConfigurationValue;
 80010f6:	6841      	ldr	r1, [r0, #4]
 80010f8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80010fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001100:	440b      	add	r3, r1
 8001102:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001106:	2001      	movs	r0, #1
		(*buf)[0] = cfg->bConfigurationValue;
 8001108:	7013      	strb	r3, [r2, #0]
}
 800110a:	4770      	bx	lr

0800110c <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 800110c:	b430      	push	{r4, r5}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 800110e:	7dc4      	ldrb	r4, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8001110:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001112:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001116:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800111a:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 800111c:	4404      	add	r4, r0

	if (req->wIndex >= cfx->bNumInterfaces) {
 800111e:	7920      	ldrb	r0, [r4, #4]
 8001120:	888d      	ldrh	r5, [r1, #4]
 8001122:	4285      	cmp	r5, r0
 8001124:	d20d      	bcs.n	8001142 <usb_standard_get_interface+0x36>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 8001126:	2001      	movs	r0, #1
 8001128:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 800112a:	888b      	ldrh	r3, [r1, #4]
 800112c:	f8d4 1009 	ldr.w	r1, [r4, #9]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	585b      	ldr	r3, [r3, r1]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001134:	b103      	cbz	r3, 8001138 <usb_standard_get_interface+0x2c>
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 800113a:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 800113c:	7013      	strb	r3, [r2, #0]
}
 800113e:	bc30      	pop	{r4, r5}
 8001140:	4770      	bx	lr
		return USBD_REQ_NOTSUPP;
 8001142:	2000      	movs	r0, #0
}
 8001144:	bc30      	pop	{r4, r5}
 8001146:	4770      	bx	lr

08001148 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8001148:	8819      	ldrh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 800114a:	2001      	movs	r0, #1
	if (*len > 2) {
 800114c:	2902      	cmp	r1, #2
		*len = 2;
 800114e:	bf84      	itt	hi
 8001150:	2102      	movhi	r1, #2
 8001152:	8019      	strhhi	r1, [r3, #0]
	(*buf)[0] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	6811      	ldr	r1, [r2, #0]
 8001158:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	7053      	strb	r3, [r2, #1]
}
 800115e:	4770      	bx	lr

08001160 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8001160:	b538      	push	{r3, r4, r5, lr}
	(void)req;

	if (*len > 2) {
 8001162:	881d      	ldrh	r5, [r3, #0]
{
 8001164:	4614      	mov	r4, r2
	if (*len > 2) {
 8001166:	2d02      	cmp	r5, #2
		*len = 2;
 8001168:	bf84      	itt	hi
 800116a:	2202      	movhi	r2, #2
 800116c:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800116e:	8889      	ldrh	r1, [r1, #4]
 8001170:	b2c9      	uxtb	r1, r1
 8001172:	f7ff fdcd 	bl	8000d10 <usbd_ep_stall_get>
 8001176:	1c01      	adds	r1, r0, #0
 8001178:	bf18      	it	ne
 800117a:	2101      	movne	r1, #1
	(*buf)[1] = 0;
 800117c:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800117e:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8001180:	2001      	movs	r0, #1
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001182:	7019      	strb	r1, [r3, #0]
	(*buf)[1] = 0;
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	705a      	strb	r2, [r3, #1]
}
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 800118c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 800118e:	8889      	ldrh	r1, [r1, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	b2c9      	uxtb	r1, r1
 8001194:	f7ff fdb8 	bl	8000d08 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001198:	2001      	movs	r0, #1
 800119a:	bd08      	pop	{r3, pc}

0800119c <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 800119c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 800119e:	8889      	ldrh	r1, [r1, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	b2c9      	uxtb	r1, r1
 80011a4:	f7ff fdb0 	bl	8000d08 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 80011a8:	2001      	movs	r0, #1
 80011aa:	bd08      	pop	{r3, pc}

080011ac <usb_standard_set_address>:
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 80011ac:	780b      	ldrb	r3, [r1, #0]
 80011ae:	b98b      	cbnz	r3, 80011d4 <usb_standard_set_address+0x28>
{
 80011b0:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 80011b2:	884c      	ldrh	r4, [r1, #2]
 80011b4:	2c7f      	cmp	r4, #127	; 0x7f
 80011b6:	d80b      	bhi.n	80011d0 <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 80011b8:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 80011bc:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 80011be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80011c2:	b14a      	cbz	r2, 80011d8 <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80011c4:	8849      	ldrh	r1, [r1, #2]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	b2c9      	uxtb	r1, r1
 80011ca:	4798      	blx	r3
	return USBD_REQ_HANDLED;
 80011cc:	2001      	movs	r0, #1
}
 80011ce:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 80011d0:	4618      	mov	r0, r3
}
 80011d2:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	4770      	bx	lr
	return USBD_REQ_HANDLED;
 80011d8:	2001      	movs	r0, #1
}
 80011da:	bd10      	pop	{r4, pc}

080011dc <usb_standard_set_interface>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 80011de:	7dc2      	ldrb	r2, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80011e0:	6844      	ldr	r4, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80011e2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80011e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80011ea:	3a0d      	subs	r2, #13
	const struct usb_config_descriptor *cfx =
 80011ec:	4422      	add	r2, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 80011ee:	7915      	ldrb	r5, [r2, #4]
 80011f0:	888c      	ldrh	r4, [r1, #4]
 80011f2:	42a5      	cmp	r5, r4
 80011f4:	d915      	bls.n	8001222 <usb_standard_set_interface+0x46>
	iface = &cfx->interface[req->wIndex];
 80011f6:	f8d2 2009 	ldr.w	r2, [r2, #9]
 80011fa:	0124      	lsls	r4, r4, #4
 80011fc:	1915      	adds	r5, r2, r4
	if (req->wValue >= iface->num_altsetting) {
 80011fe:	792e      	ldrb	r6, [r5, #4]
 8001200:	884d      	ldrh	r5, [r1, #2]
 8001202:	42ae      	cmp	r6, r5
 8001204:	d90d      	bls.n	8001222 <usb_standard_set_interface+0x46>
	if (iface->cur_altsetting) {
 8001206:	5912      	ldr	r2, [r2, r4]
 8001208:	b16a      	cbz	r2, 8001226 <usb_standard_set_interface+0x4a>
		*iface->cur_altsetting = req->wValue;
 800120a:	7015      	strb	r5, [r2, #0]
 800120c:	461c      	mov	r4, r3
	if (usbd_dev->user_callback_set_altsetting) {
 800120e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001212:	b113      	cbz	r3, 800121a <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001214:	884a      	ldrh	r2, [r1, #2]
 8001216:	8889      	ldrh	r1, [r1, #4]
 8001218:	4798      	blx	r3
	*len = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	2001      	movs	r0, #1
 800121e:	8023      	strh	r3, [r4, #0]
}
 8001220:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 8001222:	2000      	movs	r0, #0
}
 8001224:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 8001226:	2d00      	cmp	r5, #0
 8001228:	d0f0      	beq.n	800120c <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 800122a:	4610      	mov	r0, r2
}
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	bf00      	nop

08001230 <usb_standard_get_descriptor>:
{
 8001230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 8001234:	884d      	ldrh	r5, [r1, #2]
{
 8001236:	b089      	sub	sp, #36	; 0x24
	switch (usb_descriptor_type(req->wValue)) {
 8001238:	0a2c      	lsrs	r4, r5, #8
 800123a:	2c02      	cmp	r4, #2
{
 800123c:	9306      	str	r3, [sp, #24]
	switch (usb_descriptor_type(req->wValue)) {
 800123e:	d048      	beq.n	80012d2 <usb_standard_get_descriptor+0xa2>
 8001240:	2c03      	cmp	r4, #3
 8001242:	d012      	beq.n	800126a <usb_standard_get_descriptor+0x3a>
 8001244:	2c01      	cmp	r4, #1
 8001246:	d003      	beq.n	8001250 <usb_standard_get_descriptor+0x20>
				return USBD_REQ_NOTSUPP;
 8001248:	2000      	movs	r0, #0
}
 800124a:	b009      	add	sp, #36	; 0x24
 800124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = (uint8_t *) usbd_dev->desc;
 8001250:	6801      	ldr	r1, [r0, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001252:	881d      	ldrh	r5, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8001254:	6011      	str	r1, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001256:	461e      	mov	r6, r3
 8001258:	780b      	ldrb	r3, [r1, #0]
		return USBD_REQ_HANDLED;
 800125a:	4620      	mov	r0, r4
		*len = MIN(*len, usbd_dev->desc->bLength);
 800125c:	42ab      	cmp	r3, r5
 800125e:	bf28      	it	cs
 8001260:	462b      	movcs	r3, r5
 8001262:	8033      	strh	r3, [r6, #0]
}
 8001264:	b009      	add	sp, #36	; 0x24
 8001266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (descr_idx == 0) {
 800126a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 800126e:	6906      	ldr	r6, [r0, #16]
		if (descr_idx == 0) {
 8001270:	f000 8115 	beq.w	800149e <usb_standard_get_descriptor+0x26e>
			if (!usbd_dev->strings) {
 8001274:	6884      	ldr	r4, [r0, #8]
 8001276:	2c00      	cmp	r4, #0
 8001278:	d0e6      	beq.n	8001248 <usb_standard_get_descriptor+0x18>
			if (array_idx >= usbd_dev->num_strings) {
 800127a:	68c3      	ldr	r3, [r0, #12]
			array_idx = descr_idx - 1;
 800127c:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 800127e:	42ab      	cmp	r3, r5
 8001280:	dde2      	ble.n	8001248 <usb_standard_get_descriptor+0x18>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001282:	f240 4309 	movw	r3, #1033	; 0x409
 8001286:	8889      	ldrh	r1, [r1, #4]
 8001288:	4299      	cmp	r1, r3
 800128a:	d1dd      	bne.n	8001248 <usb_standard_get_descriptor+0x18>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 800128c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	4620      	mov	r0, r4
 8001294:	f002 fc94 	bl	8003bc0 <strlen>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
			*len = MIN(*len, sd->bLength);
 800129e:	9a06      	ldr	r2, [sp, #24]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 80012a0:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 80012a2:	8811      	ldrh	r1, [r2, #0]
 80012a4:	4615      	mov	r5, r2
 80012a6:	428b      	cmp	r3, r1
 80012a8:	bf28      	it	cs
 80012aa:	460b      	movcs	r3, r1
			for (i = 0; i < (*len / 2) - 1; i++) {
 80012ac:	2b03      	cmp	r3, #3
			*len = MIN(*len, sd->bLength);
 80012ae:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	f240 80ff 	bls.w	80014b4 <usb_standard_get_descriptor+0x284>
 80012b6:	2100      	movs	r1, #0
 80012b8:	1e60      	subs	r0, r4, #1
					usbd_dev->strings[array_idx][i];
 80012ba:	f810 4f01 	ldrb.w	r4, [r0, #1]!
				sd->wData[i] =
 80012be:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 80012c2:	805c      	strh	r4, [r3, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80012c4:	882b      	ldrh	r3, [r5, #0]
 80012c6:	3101      	adds	r1, #1
 80012c8:	085b      	lsrs	r3, r3, #1
 80012ca:	3b01      	subs	r3, #1
 80012cc:	428b      	cmp	r3, r1
 80012ce:	dcf4      	bgt.n	80012ba <usb_standard_get_descriptor+0x8a>
 80012d0:	e0f0      	b.n	80014b4 <usb_standard_get_descriptor+0x284>
		*buf = usbd_dev->ctrl_buf;
 80012d2:	6901      	ldr	r1, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80012d4:	b2ed      	uxtb	r5, r5
 80012d6:	6846      	ldr	r6, [r0, #4]
 80012d8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		*buf = usbd_dev->ctrl_buf;
 80012dc:	6011      	str	r1, [r2, #0]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80012de:	9a06      	ldr	r2, [sp, #24]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80012e0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80012e4:	5d73      	ldrb	r3, [r6, r5]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80012e6:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80012e8:	1972      	adds	r2, r6, r5
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	bf28      	it	cs
 80012ee:	4623      	movcs	r3, r4
 80012f0:	4690      	mov	r8, r2
 80012f2:	469b      	mov	fp, r3
		*buf = usbd_dev->ctrl_buf;
 80012f4:	460f      	mov	r7, r1
 80012f6:	9107      	str	r1, [sp, #28]
 80012f8:	4608      	mov	r0, r1
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80012fa:	9203      	str	r2, [sp, #12]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80012fc:	4611      	mov	r1, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	f002 fc46 	bl	8003b90 <memcpy>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001304:	f898 3004 	ldrb.w	r3, [r8, #4]
	len -= count;
 8001308:	eba4 040b 	sub.w	r4, r4, fp
 800130c:	b2a4      	uxth	r4, r4
	totallen += cfg->bLength;
 800130e:	f816 a005 	ldrb.w	sl, [r6, r5]
	buf += count;
 8001312:	eb07 090b 	add.w	r9, r7, fp
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80b7 	beq.w	800148a <usb_standard_get_descriptor+0x25a>
 800131c:	2300      	movs	r3, #0
 800131e:	9305      	str	r3, [sp, #20]
 8001320:	f8d8 2009 	ldr.w	r2, [r8, #9]
 8001324:	9b05      	ldr	r3, [sp, #20]
 8001326:	011f      	lsls	r7, r3, #4
		if (cfg->interface[i].iface_assoc) {
 8001328:	19d3      	adds	r3, r2, r7
 800132a:	689d      	ldr	r5, [r3, #8]
 800132c:	9704      	str	r7, [sp, #16]
 800132e:	b1bd      	cbz	r5, 8001360 <usb_standard_get_descriptor+0x130>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001330:	782e      	ldrb	r6, [r5, #0]
 8001332:	4629      	mov	r1, r5
 8001334:	42a6      	cmp	r6, r4
 8001336:	bf28      	it	cs
 8001338:	4626      	movcs	r6, r4
 800133a:	4648      	mov	r0, r9
 800133c:	4632      	mov	r2, r6
 800133e:	f002 fc27 	bl	8003b90 <memcpy>
 8001342:	9a03      	ldr	r2, [sp, #12]
			totallen += assoc->bLength;
 8001344:	782b      	ldrb	r3, [r5, #0]
 8001346:	f8d2 2009 	ldr.w	r2, [r2, #9]
 800134a:	449a      	add	sl, r3
			len -= count;
 800134c:	1ba4      	subs	r4, r4, r6
			total += count;
 800134e:	eb06 010b 	add.w	r1, r6, fp
			len -= count;
 8001352:	b2a4      	uxth	r4, r4
			total += count;
 8001354:	fa1f fb81 	uxth.w	fp, r1
			buf += count;
 8001358:	44b1      	add	r9, r6
			totallen += assoc->bLength;
 800135a:	fa1f fa8a 	uxth.w	sl, sl
 800135e:	19d3      	adds	r3, r2, r7
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001360:	7919      	ldrb	r1, [r3, #4]
 8001362:	2900      	cmp	r1, #0
 8001364:	f000 8088 	beq.w	8001478 <usb_standard_get_descriptor+0x248>
 8001368:	2200      	movs	r2, #0
 800136a:	9202      	str	r2, [sp, #8]
			const struct usb_interface_descriptor *iface =
 800136c:	68df      	ldr	r7, [r3, #12]
 800136e:	9b02      	ldr	r3, [sp, #8]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001370:	4648      	mov	r0, r9
			const struct usb_interface_descriptor *iface =
 8001372:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8001376:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800137a:	5dbd      	ldrb	r5, [r7, r6]
			const struct usb_interface_descriptor *iface =
 800137c:	19ba      	adds	r2, r7, r6
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800137e:	42a5      	cmp	r5, r4
 8001380:	bf28      	it	cs
 8001382:	4625      	movcs	r5, r4
 8001384:	4690      	mov	r8, r2
 8001386:	4611      	mov	r1, r2
			const struct usb_interface_descriptor *iface =
 8001388:	9200      	str	r2, [sp, #0]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800138a:	462a      	mov	r2, r5
 800138c:	f002 fc00 	bl	8003b90 <memcpy>
			totallen += iface->bLength;
 8001390:	5dbb      	ldrb	r3, [r7, r6]
			if (iface->extra) {
 8001392:	f8d8 100d 	ldr.w	r1, [r8, #13]
			len -= count;
 8001396:	1b64      	subs	r4, r4, r5
			total += count;
 8001398:	44ab      	add	fp, r5
			totallen += iface->bLength;
 800139a:	449a      	add	sl, r3
			len -= count;
 800139c:	b2a4      	uxth	r4, r4
			total += count;
 800139e:	fa1f fb8b 	uxth.w	fp, fp
			buf += count;
 80013a2:	44a9      	add	r9, r5
			totallen += iface->bLength;
 80013a4:	fa1f fa8a 	uxth.w	sl, sl
			if (iface->extra) {
 80013a8:	b1a1      	cbz	r1, 80013d4 <usb_standard_get_descriptor+0x1a4>
				       count = MIN(len, iface->extralen));
 80013aa:	f8d8 5011 	ldr.w	r5, [r8, #17]
				memcpy(buf, iface->extra,
 80013ae:	4648      	mov	r0, r9
				       count = MIN(len, iface->extralen));
 80013b0:	42a5      	cmp	r5, r4
 80013b2:	bfa8      	it	ge
 80013b4:	4625      	movge	r5, r4
				memcpy(buf, iface->extra,
 80013b6:	b2ae      	uxth	r6, r5
 80013b8:	4632      	mov	r2, r6
 80013ba:	f002 fbe9 	bl	8003b90 <memcpy>
				totallen += iface->extralen;
 80013be:	f8d8 3011 	ldr.w	r3, [r8, #17]
				len -= count;
 80013c2:	1ba4      	subs	r4, r4, r6
				total += count;
 80013c4:	44b3      	add	fp, r6
				totallen += iface->extralen;
 80013c6:	449a      	add	sl, r3
				len -= count;
 80013c8:	b2a4      	uxth	r4, r4
				total += count;
 80013ca:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 80013ce:	44b1      	add	r9, r6
				totallen += iface->extralen;
 80013d0:	fa1f fa8a 	uxth.w	sl, sl
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80013d4:	9b00      	ldr	r3, [sp, #0]
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d040      	beq.n	800145e <usb_standard_get_descriptor+0x22e>
 80013dc:	2500      	movs	r5, #0
 80013de:	4653      	mov	r3, sl
 80013e0:	9301      	str	r3, [sp, #4]
				    &iface->endpoint[k];
 80013e2:	9b00      	ldr	r3, [sp, #0]
				const struct usb_endpoint_descriptor *ep =
 80013e4:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
				    &iface->endpoint[k];
 80013e8:	f8d3 a009 	ldr.w	sl, [r3, #9]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80013ec:	4648      	mov	r0, r9
 80013ee:	f81a 6008 	ldrb.w	r6, [sl, r8]
				const struct usb_endpoint_descriptor *ep =
 80013f2:	eb0a 0708 	add.w	r7, sl, r8
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80013f6:	42a6      	cmp	r6, r4
 80013f8:	bf28      	it	cs
 80013fa:	4626      	movcs	r6, r4
 80013fc:	4639      	mov	r1, r7
 80013fe:	4632      	mov	r2, r6
 8001400:	f002 fbc6 	bl	8003b90 <memcpy>
				totallen += ep->bLength;
 8001404:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8001408:	9b01      	ldr	r3, [sp, #4]
				if (ep->extra) {
 800140a:	f8d7 1007 	ldr.w	r1, [r7, #7]
				len -= count;
 800140e:	1ba4      	subs	r4, r4, r6
				total += count;
 8001410:	44b3      	add	fp, r6
				totallen += ep->bLength;
 8001412:	4413      	add	r3, r2
				len -= count;
 8001414:	b2a4      	uxth	r4, r4
				total += count;
 8001416:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 800141a:	44b1      	add	r9, r6
				totallen += ep->bLength;
 800141c:	b29b      	uxth	r3, r3
				if (ep->extra) {
 800141e:	b1b9      	cbz	r1, 8001450 <usb_standard_get_descriptor+0x220>
 8001420:	9301      	str	r3, [sp, #4]
					       count = MIN(len, ep->extralen));
 8001422:	f8d7 600b 	ldr.w	r6, [r7, #11]
					memcpy(buf, ep->extra,
 8001426:	4648      	mov	r0, r9
					       count = MIN(len, ep->extralen));
 8001428:	42a6      	cmp	r6, r4
 800142a:	bfa8      	it	ge
 800142c:	4626      	movge	r6, r4
					memcpy(buf, ep->extra,
 800142e:	fa1f f886 	uxth.w	r8, r6
					       count = MIN(len, ep->extralen));
 8001432:	4646      	mov	r6, r8
					memcpy(buf, ep->extra,
 8001434:	4642      	mov	r2, r8
 8001436:	f002 fbab 	bl	8003b90 <memcpy>
					totallen += ep->extralen;
 800143a:	f8d7 200b 	ldr.w	r2, [r7, #11]
 800143e:	9b01      	ldr	r3, [sp, #4]
					len -= count;
 8001440:	1ba4      	subs	r4, r4, r6
					total += count;
 8001442:	44c3      	add	fp, r8
					totallen += ep->extralen;
 8001444:	4413      	add	r3, r2
					len -= count;
 8001446:	b2a4      	uxth	r4, r4
					total += count;
 8001448:	fa1f fb8b 	uxth.w	fp, fp
					buf += count;
 800144c:	44c1      	add	r9, r8
					totallen += ep->extralen;
 800144e:	b29b      	uxth	r3, r3
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001450:	9a00      	ldr	r2, [sp, #0]
 8001452:	3501      	adds	r5, #1
 8001454:	7911      	ldrb	r1, [r2, #4]
 8001456:	b2aa      	uxth	r2, r5
 8001458:	4291      	cmp	r1, r2
 800145a:	d8c1      	bhi.n	80013e0 <usb_standard_get_descriptor+0x1b0>
 800145c:	469a      	mov	sl, r3
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800145e:	9b03      	ldr	r3, [sp, #12]
 8001460:	9902      	ldr	r1, [sp, #8]
 8001462:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8001466:	9b04      	ldr	r3, [sp, #16]
 8001468:	3101      	adds	r1, #1
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	791d      	ldrb	r5, [r3, #4]
 800146e:	b288      	uxth	r0, r1
 8001470:	4285      	cmp	r5, r0
 8001472:	9102      	str	r1, [sp, #8]
 8001474:	f63f af7a 	bhi.w	800136c <usb_standard_get_descriptor+0x13c>
 8001478:	9b05      	ldr	r3, [sp, #20]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 800147a:	9903      	ldr	r1, [sp, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	7908      	ldrb	r0, [r1, #4]
 8001480:	b299      	uxth	r1, r3
 8001482:	4288      	cmp	r0, r1
 8001484:	9305      	str	r3, [sp, #20]
 8001486:	f63f af4d 	bhi.w	8001324 <usb_standard_get_descriptor+0xf4>
		return USBD_REQ_HANDLED;
 800148a:	2001      	movs	r0, #1
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 800148c:	9b07      	ldr	r3, [sp, #28]
 800148e:	f8a3 a002 	strh.w	sl, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001492:	9b06      	ldr	r3, [sp, #24]
 8001494:	f8a3 b000 	strh.w	fp, [r3]
}
 8001498:	b009      	add	sp, #36	; 0x24
 800149a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 800149e:	2109      	movs	r1, #9
 80014a0:	2304      	movs	r3, #4
 80014a2:	70b1      	strb	r1, [r6, #2]
			*len = MIN(*len, sd->bLength);
 80014a4:	9906      	ldr	r1, [sp, #24]
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 80014a6:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 80014a8:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 80014aa:	880b      	ldrh	r3, [r1, #0]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	bf28      	it	cs
 80014b0:	2304      	movcs	r3, #4
 80014b2:	800b      	strh	r3, [r1, #0]
		sd->bDescriptorType = USB_DT_STRING;
 80014b4:	2303      	movs	r3, #3
		return USBD_REQ_HANDLED;
 80014b6:	2001      	movs	r0, #1
		sd->bDescriptorType = USB_DT_STRING;
 80014b8:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 80014ba:	6016      	str	r6, [r2, #0]
}
 80014bc:	b009      	add	sp, #36	; 0x24
 80014be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c2:	bf00      	nop

080014c4 <usb_standard_interface_get_status>:
 80014c4:	8819      	ldrh	r1, [r3, #0]
 80014c6:	2001      	movs	r0, #1
 80014c8:	2902      	cmp	r1, #2
 80014ca:	bf84      	itt	hi
 80014cc:	2102      	movhi	r1, #2
 80014ce:	8019      	strhhi	r1, [r3, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	6811      	ldr	r1, [r2, #0]
 80014d4:	700b      	strb	r3, [r1, #0]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	7053      	strb	r3, [r2, #1]
 80014da:	4770      	bx	lr

080014dc <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80014dc:	2200      	movs	r2, #0
{
 80014de:	b410      	push	{r4}
 80014e0:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 80014e4:	f854 3b04 	ldr.w	r3, [r4], #4
 80014e8:	b163      	cbz	r3, 8001504 <usbd_register_set_config_callback+0x28>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 80014ea:	428b      	cmp	r3, r1
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80014ec:	f102 0201 	add.w	r2, r2, #1
			if (usbd_dev->user_callback_set_config[i] == callback) {
 80014f0:	d005      	beq.n	80014fe <usbd_register_set_config_callback+0x22>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80014f2:	2a04      	cmp	r2, #4
 80014f4:	d1f6      	bne.n	80014e4 <usbd_register_set_config_callback+0x8>
	return -1;
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014fa:	bc10      	pop	{r4}
 80014fc:	4770      	bx	lr
				return 0;
 80014fe:	2000      	movs	r0, #0
}
 8001500:	bc10      	pop	{r4}
 8001502:	4770      	bx	lr
		usbd_dev->user_callback_set_config[i] = callback;
 8001504:	3232      	adds	r2, #50	; 0x32
 8001506:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		return 0;
 800150a:	4618      	mov	r0, r3
 800150c:	e7f8      	b.n	8001500 <usbd_register_set_config_callback+0x24>
 800150e:	bf00      	nop

08001510 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8001510:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001512:	784c      	ldrb	r4, [r1, #1]
 8001514:	2c09      	cmp	r4, #9
 8001516:	d81a      	bhi.n	800154e <_usbd_standard_request_device+0x3e>
 8001518:	e8df f004 	tbb	[pc, r4]
 800151c:	19191911 	.word	0x19191911
 8001520:	19090519 	.word	0x19090519
 8001524:	0d15      	.short	0x0d15
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 8001526:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <_usbd_standard_request_device+0x44>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001528:	46a4      	mov	ip, r4
}
 800152a:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 800152c:	4760      	bx	ip
		command = usb_standard_get_descriptor;
 800152e:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <_usbd_standard_request_device+0x48>)
	return command(usbd_dev, req, buf, len);
 8001530:	46a4      	mov	ip, r4
}
 8001532:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001534:	4760      	bx	ip
		command = usb_standard_set_configuration;
 8001536:	4c09      	ldr	r4, [pc, #36]	; (800155c <_usbd_standard_request_device+0x4c>)
	return command(usbd_dev, req, buf, len);
 8001538:	46a4      	mov	ip, r4
}
 800153a:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 800153c:	4760      	bx	ip
		command = usb_standard_device_get_status;
 800153e:	4c08      	ldr	r4, [pc, #32]	; (8001560 <_usbd_standard_request_device+0x50>)
	return command(usbd_dev, req, buf, len);
 8001540:	46a4      	mov	ip, r4
}
 8001542:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001544:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8001546:	4c07      	ldr	r4, [pc, #28]	; (8001564 <_usbd_standard_request_device+0x54>)
	return command(usbd_dev, req, buf, len);
 8001548:	46a4      	mov	ip, r4
}
 800154a:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 800154c:	4760      	bx	ip
}
 800154e:	2000      	movs	r0, #0
 8001550:	bc10      	pop	{r4}
 8001552:	4770      	bx	lr
 8001554:	080011ad 	.word	0x080011ad
 8001558:	08001231 	.word	0x08001231
 800155c:	0800103d 	.word	0x0800103d
 8001560:	08001149 	.word	0x08001149
 8001564:	080010e1 	.word	0x080010e1

08001568 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8001568:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800156a:	784c      	ldrb	r4, [r1, #1]
 800156c:	2c01      	cmp	r4, #1
 800156e:	d008      	beq.n	8001582 <_usbd_standard_request_endpoint+0x1a>
 8001570:	d30c      	bcc.n	800158c <_usbd_standard_request_endpoint+0x24>
 8001572:	2c03      	cmp	r4, #3
 8001574:	d107      	bne.n	8001586 <_usbd_standard_request_endpoint+0x1e>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001576:	884c      	ldrh	r4, [r1, #2]
 8001578:	b92c      	cbnz	r4, 8001586 <_usbd_standard_request_endpoint+0x1e>
			command = usb_standard_endpoint_stall;
 800157a:	4c08      	ldr	r4, [pc, #32]	; (800159c <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800157c:	46a4      	mov	ip, r4
}
 800157e:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001580:	4760      	bx	ip
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001582:	884c      	ldrh	r4, [r1, #2]
 8001584:	b134      	cbz	r4, 8001594 <_usbd_standard_request_endpoint+0x2c>
}
 8001586:	2000      	movs	r0, #0
 8001588:	bc10      	pop	{r4}
 800158a:	4770      	bx	lr
		command = usb_standard_endpoint_get_status;
 800158c:	4c04      	ldr	r4, [pc, #16]	; (80015a0 <_usbd_standard_request_endpoint+0x38>)
	return command(usbd_dev, req, buf, len);
 800158e:	46a4      	mov	ip, r4
}
 8001590:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001592:	4760      	bx	ip
			command = usb_standard_endpoint_unstall;
 8001594:	4c03      	ldr	r4, [pc, #12]	; (80015a4 <_usbd_standard_request_endpoint+0x3c>)
	return command(usbd_dev, req, buf, len);
 8001596:	46a4      	mov	ip, r4
}
 8001598:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 800159a:	4760      	bx	ip
 800159c:	0800118d 	.word	0x0800118d
 80015a0:	08001161 	.word	0x08001161
 80015a4:	0800119d 	.word	0x0800119d

080015a8 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 80015a8:	b4f0      	push	{r4, r5, r6, r7}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 80015aa:	780c      	ldrb	r4, [r1, #0]
 80015ac:	f014 0f60 	tst.w	r4, #96	; 0x60
 80015b0:	d113      	bne.n	80015da <_usbd_standard_request+0x32>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 80015b2:	f004 041f 	and.w	r4, r4, #31
 80015b6:	2c01      	cmp	r4, #1
 80015b8:	d005      	beq.n	80015c6 <_usbd_standard_request+0x1e>
 80015ba:	d311      	bcc.n	80015e0 <_usbd_standard_request+0x38>
 80015bc:	2c02      	cmp	r4, #2
 80015be:	d10c      	bne.n	80015da <_usbd_standard_request+0x32>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 80015c0:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 80015c2:	f7ff bfd1 	b.w	8001568 <_usbd_standard_request_endpoint>
 80015c6:	469c      	mov	ip, r3
	switch (req->bRequest) {
 80015c8:	784b      	ldrb	r3, [r1, #1]
 80015ca:	460d      	mov	r5, r1
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	4606      	mov	r6, r0
 80015d0:	4617      	mov	r7, r2
 80015d2:	d012      	beq.n	80015fa <_usbd_standard_request+0x52>
 80015d4:	2b0b      	cmp	r3, #11
 80015d6:	d00e      	beq.n	80015f6 <_usbd_standard_request+0x4e>
 80015d8:	b12b      	cbz	r3, 80015e6 <_usbd_standard_request+0x3e>
}
 80015da:	bcf0      	pop	{r4, r5, r6, r7}
 80015dc:	2000      	movs	r0, #0
 80015de:	4770      	bx	lr
 80015e0:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80015e2:	f7ff bf95 	b.w	8001510 <_usbd_standard_request_device>
		command = usb_standard_interface_get_status;
 80015e6:	4c06      	ldr	r4, [pc, #24]	; (8001600 <_usbd_standard_request+0x58>)
	return command(usbd_dev, req, buf, len);
 80015e8:	4663      	mov	r3, ip
 80015ea:	463a      	mov	r2, r7
 80015ec:	4629      	mov	r1, r5
 80015ee:	4630      	mov	r0, r6
 80015f0:	46a4      	mov	ip, r4
}
 80015f2:	bcf0      	pop	{r4, r5, r6, r7}
	return command(usbd_dev, req, buf, len);
 80015f4:	4760      	bx	ip
		command = usb_standard_set_interface;
 80015f6:	4c03      	ldr	r4, [pc, #12]	; (8001604 <_usbd_standard_request+0x5c>)
 80015f8:	e7f6      	b.n	80015e8 <_usbd_standard_request+0x40>
		command = usb_standard_get_interface;
 80015fa:	4c03      	ldr	r4, [pc, #12]	; (8001608 <_usbd_standard_request+0x60>)
 80015fc:	e7f4      	b.n	80015e8 <_usbd_standard_request+0x40>
 80015fe:	bf00      	nop
 8001600:	080014c5 	.word	0x080014c5
 8001604:	080011dd 	.word	0x080011dd
 8001608:	0800110d 	.word	0x0800110d

0800160c <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <flash_set_ws+0x10>)
 800160e:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8001610:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8001614:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 8001616:	6010      	str	r0, [r2, #0]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000

08001620 <flash_wait_for_last_operation>:
This loops indefinitely until an operation (write or erase) has completed by
testing the busy flag.
*/

void flash_wait_for_last_operation(void)
{
 8001620:	b508      	push	{r3, lr}
	while ((flash_get_status_flags() & FLASH_SR_BSY) == FLASH_SR_BSY);
 8001622:	f7ff f903 	bl	800082c <flash_get_status_flags>
 8001626:	07c3      	lsls	r3, r0, #31
 8001628:	d4fb      	bmi.n	8001622 <flash_wait_for_last_operation+0x2>
}
 800162a:	bd08      	pop	{r3, pc}

0800162c <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <st_usbfs_set_address+0xc>)
 800162e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001632:	6019      	str	r1, [r3, #0]
}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40005c4c 	.word	0x40005c4c

0800163c <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 800163c:	2a3e      	cmp	r2, #62	; 0x3e
{
 800163e:	b410      	push	{r4}
	if (size > 62) {
 8001640:	d811      	bhi.n	8001666 <st_usbfs_set_ep_rx_bufsize+0x2a>
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
	} else {
		/* round up and div by 2 */
		size = (size + 1) >> 1;
 8001642:	3201      	adds	r2, #1
		realsize = size << 1;
 8001644:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8001648:	0050      	lsls	r0, r2, #1
 800164a:	b280      	uxth	r0, r0
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <st_usbfs_set_ep_rx_bufsize+0x3c>)
 800164e:	4c0b      	ldr	r4, [pc, #44]	; (800167c <st_usbfs_set_ep_rx_bufsize+0x40>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0292      	lsls	r2, r2, #10
 8001654:	b29b      	uxth	r3, r3
 8001656:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800165a:	0049      	lsls	r1, r1, #1
 800165c:	440c      	add	r4, r1
 800165e:	b292      	uxth	r2, r2
 8001660:	6022      	str	r2, [r4, #0]
	return realsize;
}
 8001662:	bc10      	pop	{r4}
 8001664:	4770      	bx	lr
		size = ((size - 1) >> 5) & 0x1F;
 8001666:	3a01      	subs	r2, #1
 8001668:	f3c2 1244 	ubfx	r2, r2, #5, #5
		realsize = (size + 1) << 5;
 800166c:	1c50      	adds	r0, r2, #1
 800166e:	0140      	lsls	r0, r0, #5
 8001670:	f042 0220 	orr.w	r2, r2, #32
 8001674:	e7ea      	b.n	800164c <st_usbfs_set_ep_rx_bufsize+0x10>
 8001676:	bf00      	nop
 8001678:	40005c50 	.word	0x40005c50
 800167c:	4000600c 	.word	0x4000600c

08001680 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 8001682:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001686:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 800168a:	00b4      	lsls	r4, r6, #2
 800168c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001690:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001694:	6825      	ldr	r5, [r4, #0]
{
 8001696:	b083      	sub	sp, #12
	USB_SET_EP_ADDR(addr, addr);
 8001698:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
	USB_SET_EP_TYPE(addr, typelookup[type]);
 800169c:	f10d 0c08 	add.w	ip, sp, #8
	USB_SET_EP_ADDR(addr, addr);
 80016a0:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80016a4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
	USB_SET_EP_ADDR(addr, addr);
 80016a8:	4335      	orrs	r5, r6
	const uint16_t typelookup[] = {
 80016aa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001794 <st_usbfs_ep_setup+0x114>
	USB_SET_EP_ADDR(addr, addr);
 80016ae:	b2ad      	uxth	r5, r5
	const uint16_t typelookup[] = {
 80016b0:	e9cd c700 	strd	ip, r7, [sp]
	USB_SET_EP_ADDR(addr, addr);
 80016b4:	6025      	str	r5, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80016b6:	6825      	ldr	r5, [r4, #0]
 80016b8:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80016bc:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80016c0:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80016c4:	4315      	orrs	r5, r2
 80016c6:	b249      	sxtb	r1, r1
 80016c8:	b2ad      	uxth	r5, r5

	if (dir || (addr == 0)) {
 80016ca:	2900      	cmp	r1, #0
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80016cc:	6025      	str	r5, [r4, #0]
 80016ce:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80016d2:	f8b0 c018 	ldrh.w	ip, [r0, #24]
{
 80016d6:	9f08      	ldr	r7, [sp, #32]
	if (dir || (addr == 0)) {
 80016d8:	db00      	blt.n	80016dc <st_usbfs_ep_setup+0x5c>
 80016da:	bb5e      	cbnz	r6, 8001734 <st_usbfs_ep_setup+0xb4>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <st_usbfs_ep_setup+0x110>)
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	b292      	uxth	r2, r2
 80016e2:	4472      	add	r2, lr
 80016e4:	0052      	lsls	r2, r2, #1
 80016e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016ea:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80016ee:	f8c2 c000 	str.w	ip, [r2]
		if (callback) {
 80016f2:	b127      	cbz	r7, 80016fe <st_usbfs_ep_setup+0x7e>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 80016f4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80016f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80016fc:	6697      	str	r7, [r2, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 80016fe:	f648 75cf 	movw	r5, #36815	; 0x8fcf
 8001702:	6822      	ldr	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
		dev->pm_top += max_size;
 8001704:	449c      	add	ip, r3
		USB_CLR_EP_TX_DTOG(addr);
 8001706:	402a      	ands	r2, r5
 8001708:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 800170a:	6825      	ldr	r5, [r4, #0]
		dev->pm_top += max_size;
 800170c:	fa1f fc8c 	uxth.w	ip, ip
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001710:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001714:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001718:	b2ad      	uxth	r5, r5
 800171a:	f085 0520 	eor.w	r5, r5, #32
 800171e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001722:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	}

	if (!dir) {
 8001726:	2900      	cmp	r1, #0
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001728:	6025      	str	r5, [r4, #0]
		dev->pm_top += max_size;
 800172a:	f8a0 c018 	strh.w	ip, [r0, #24]
	if (!dir) {
 800172e:	da01      	bge.n	8001734 <st_usbfs_ep_setup+0xb4>
		}
		USB_CLR_EP_RX_DTOG(addr);
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
		dev->pm_top += realsize;
	}
}
 8001730:	b003      	add	sp, #12
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	461a      	mov	r2, r3
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <st_usbfs_ep_setup+0x110>)
 8001738:	4605      	mov	r5, r0
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001740:	b289      	uxth	r1, r1
 8001742:	448e      	add	lr, r1
 8001744:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001748:	4473      	add	r3, lr
 800174a:	f8c3 c000 	str.w	ip, [r3]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 800174e:	4631      	mov	r1, r6
 8001750:	f7ff ff74 	bl	800163c <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001754:	b127      	cbz	r7, 8001760 <st_usbfs_ep_setup+0xe0>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001756:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800175a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800175e:	66f7      	str	r7, [r6, #108]	; 0x6c
		USB_CLR_EP_RX_DTOG(addr);
 8001760:	f64c 718f 	movw	r1, #53135	; 0xcf8f
 8001764:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 8001766:	8b2a      	ldrh	r2, [r5, #24]
		USB_CLR_EP_RX_DTOG(addr);
 8001768:	400b      	ands	r3, r1
 800176a:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800176c:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 800176e:	4410      	add	r0, r2
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001778:	b29b      	uxth	r3, r3
 800177a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800177e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8001788:	8328      	strh	r0, [r5, #24]
}
 800178a:	b003      	add	sp, #12
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178e:	bf00      	nop
 8001790:	40005c50 	.word	0x40005c50
 8001794:	04000200 	.word	0x04000200

08001798 <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001798:	f248 0180 	movw	r1, #32896	; 0x8080
{
 800179c:	b470      	push	{r4, r5, r6}
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80017a0:	4e0c      	ldr	r6, [pc, #48]	; (80017d4 <st_usbfs_endpoints_reset+0x3c>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80017a2:	4d0d      	ldr	r5, [pc, #52]	; (80017d8 <st_usbfs_endpoints_reset+0x40>)
	for (i = 1; i < 8; i++) {
 80017a4:	4c0d      	ldr	r4, [pc, #52]	; (80017dc <st_usbfs_endpoints_reset+0x44>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	4033      	ands	r3, r6
 80017aa:	430b      	orrs	r3, r1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	402b      	ands	r3, r5
 80017b4:	430b      	orrs	r3, r1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 1; i < 8; i++) {
 80017bc:	42a2      	cmp	r2, r4
 80017be:	d1f2      	bne.n	80017a6 <st_usbfs_endpoints_reset+0xe>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
}
 80017c0:	bc70      	pop	{r4, r5, r6}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80017c2:	6803      	ldr	r3, [r0, #0]
 80017c4:	79db      	ldrb	r3, [r3, #7]
 80017c6:	3320      	adds	r3, #32
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	8303      	strh	r3, [r0, #24]
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40005c04 	.word	0x40005c04
 80017d4:	ffff8fbf 	.word	0xffff8fbf
 80017d8:	ffffbf8f 	.word	0xffffbf8f
 80017dc:	40005c20 	.word	0x40005c20

080017e0 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 80017e0:	b410      	push	{r4}
	(void)dev;
	if (addr == 0) {
 80017e2:	bb49      	cbnz	r1, 8001838 <st_usbfs_ep_stall_set+0x58>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2420      	moveq	r4, #32
 80017ea:	2410      	movne	r4, #16
 80017ec:	482b      	ldr	r0, [pc, #172]	; (800189c <st_usbfs_ep_stall_set+0xbc>)
 80017ee:	6803      	ldr	r3, [r0, #0]
 80017f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f8:	4063      	eors	r3, r4
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	b29b      	uxth	r3, r3
 8001806:	6003      	str	r3, [r0, #0]
 8001808:	0089      	lsls	r1, r1, #2
 800180a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800180e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 8001812:	b322      	cbz	r2, 800185e <st_usbfs_ep_stall_set+0x7e>
			USB_CLR_EP_RX_DTOG(addr);
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	680a      	ldr	r2, [r1, #0]
 800181a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800181e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001822:	b292      	uxth	r2, r2
 8001824:	4053      	eors	r3, r2
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001826:	b21b      	sxth	r3, r3
 8001828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	b29b      	uxth	r3, r3
 8001832:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 8001834:	bc10      	pop	{r4}
 8001836:	4770      	bx	lr
	if (addr & 0x80) {
 8001838:	060b      	lsls	r3, r1, #24
 800183a:	d5e5      	bpl.n	8001808 <st_usbfs_ep_stall_set+0x28>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 800183c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001840:	0089      	lsls	r1, r1, #2
 8001842:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001846:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800184a:	680b      	ldr	r3, [r1, #0]
 800184c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001854:	b29b      	uxth	r3, r3
 8001856:	b182      	cbz	r2, 800187a <st_usbfs_ep_stall_set+0x9a>
 8001858:	f083 0310 	eor.w	r3, r3, #16
 800185c:	e7e3      	b.n	8001826 <st_usbfs_ep_stall_set+0x46>
			USB_CLR_EP_RX_DTOG(addr);
 800185e:	f64c 708f 	movw	r0, #53135	; 0xcf8f
 8001862:	680a      	ldr	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001864:	f44f 5340 	mov.w	r3, #12288	; 0x3000
			USB_CLR_EP_RX_DTOG(addr);
 8001868:	4002      	ands	r2, r0
 800186a:	600a      	str	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 800186c:	680a      	ldr	r2, [r1, #0]
 800186e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001876:	b292      	uxth	r2, r2
 8001878:	e7d4      	b.n	8001824 <st_usbfs_ep_stall_set+0x44>
			USB_CLR_EP_TX_DTOG(addr);
 800187a:	f648 72cf 	movw	r2, #36815	; 0x8fcf
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 800187e:	f083 0320 	eor.w	r3, r3, #32
 8001882:	b21b      	sxth	r3, r3
 8001884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	b29b      	uxth	r3, r3
 800188e:	600b      	str	r3, [r1, #0]
			USB_CLR_EP_TX_DTOG(addr);
 8001890:	680b      	ldr	r3, [r1, #0]
}
 8001892:	bc10      	pop	{r4}
			USB_CLR_EP_TX_DTOG(addr);
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40005c00 	.word	0x40005c00

080018a0 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 80018a0:	060b      	lsls	r3, r1, #24
 80018a2:	d40d      	bmi.n	80018c0 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80018a4:	0089      	lsls	r1, r1, #2
 80018a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80018aa:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80018ae:	6808      	ldr	r0, [r1, #0]
 80018b0:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
			return 1;
 80018b4:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 80018b8:	fab0 f080 	clz	r0, r0
 80018bc:	0940      	lsrs	r0, r0, #5
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 80018be:	4770      	bx	lr
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 80018c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80018c4:	0089      	lsls	r1, r1, #2
 80018c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80018ca:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80018ce:	6808      	ldr	r0, [r1, #0]
 80018d0:	f000 0030 	and.w	r0, r0, #48	; 0x30
			return 1;
 80018d4:	f1a0 0010 	sub.w	r0, r0, #16
 80018d8:	fab0 f080 	clz	r0, r0
 80018dc:	0940      	lsrs	r0, r0, #5
 80018de:	4770      	bx	lr

080018e0 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80018e0:	060b      	lsls	r3, r1, #24
 80018e2:	d414      	bmi.n	800190e <st_usbfs_ep_nak_set+0x2e>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <st_usbfs_ep_nak_set+0x40>)
 80018e6:	0088      	lsls	r0, r1, #2
 80018e8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80018ec:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80018f0:	545a      	strb	r2, [r3, r1]

	if (nak) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018fc:	b29b      	uxth	r3, r3
	if (nak) {
 80018fe:	b93a      	cbnz	r2, 8001910 <st_usbfs_ep_nak_set+0x30>
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001900:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	6003      	str	r3, [r0, #0]
	}
}
 800190e:	4770      	bx	lr
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001910:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6003      	str	r3, [r0, #0]
 800191e:	4770      	bx	lr
 8001920:	20000b50 	.word	0x20000b50

08001924 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)dev;
	addr &= 0x7F;
 8001928:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 800192c:	00b4      	lsls	r4, r6, #2
 800192e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001932:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001936:	6825      	ldr	r5, [r4, #0]
 8001938:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800193c:	2d30      	cmp	r5, #48	; 0x30
 800193e:	d02e      	beq.n	800199e <st_usbfs_ep_write_packet+0x7a>
 8001940:	461f      	mov	r7, r3
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8001942:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80019a8 <st_usbfs_ep_write_packet+0x84>
 8001946:	4611      	mov	r1, r2
 8001948:	f8d8 2000 	ldr.w	r2, [r8]
 800194c:	00f6      	lsls	r6, r6, #3
 800194e:	b292      	uxth	r2, r2
 8001950:	4432      	add	r2, r6
 8001952:	0052      	lsls	r2, r2, #1
 8001954:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001958:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800195c:	8810      	ldrh	r0, [r2, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	0040      	lsls	r0, r0, #1
 8001962:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001966:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 800196a:	f7ff f93f 	bl	8000bec <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 800196e:	f8d8 1000 	ldr.w	r1, [r8]
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <st_usbfs_ep_write_packet+0x80>)
 8001974:	b289      	uxth	r1, r1
 8001976:	440e      	add	r6, r1
 8001978:	0076      	lsls	r6, r6, #1
 800197a:	4433      	add	r3, r6
 800197c:	601f      	str	r7, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800197e:	6821      	ldr	r1, [r4, #0]

	return len;
 8001980:	4638      	mov	r0, r7
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001982:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001986:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800198a:	b289      	uxth	r1, r1
 800198c:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8001990:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001994:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001998:	6021      	str	r1, [r4, #0]
}
 800199a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 800199e:	2000      	movs	r0, #0
}
 80019a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a4:	40006004 	.word	0x40006004
 80019a8:	40005c50 	.word	0x40005c50

080019ac <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80019ae:	008c      	lsls	r4, r1, #2
 80019b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80019b4:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80019b8:	6826      	ldr	r6, [r4, #0]
 80019ba:	f406 5640 	and.w	r6, r6, #12288	; 0x3000
 80019be:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 80019c2:	d043      	beq.n	8001a4c <st_usbfs_ep_read_packet+0xa0>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80019c4:	4f23      	ldr	r7, [pc, #140]	; (8001a54 <st_usbfs_ep_read_packet+0xa8>)
 80019c6:	00ce      	lsls	r6, r1, #3
 80019c8:	683d      	ldr	r5, [r7, #0]
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <st_usbfs_ep_read_packet+0xac>)
 80019cc:	b2ad      	uxth	r5, r5
 80019ce:	4435      	add	r5, r6
 80019d0:	006d      	lsls	r5, r5, #1
 80019d2:	4428      	add	r0, r5
 80019d4:	6800      	ldr	r0, [r0, #0]
 80019d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80019da:	4298      	cmp	r0, r3
 80019dc:	db2c      	blt.n	8001a38 <st_usbfs_ep_read_packet+0x8c>
 80019de:	461d      	mov	r5, r3
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <st_usbfs_ep_read_packet+0xa8>)
 80019e2:	4610      	mov	r0, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80019ea:	b292      	uxth	r2, r2
 80019ec:	4416      	add	r6, r2
 80019ee:	0076      	lsls	r6, r6, #1
 80019f0:	4433      	add	r3, r6
 80019f2:	460f      	mov	r7, r1
 80019f4:	8819      	ldrh	r1, [r3, #0]
 80019f6:	462a      	mov	r2, r5
 80019f8:	0049      	lsls	r1, r1, #1
 80019fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80019fe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001a02:	f7ff f905 	bl	8000c10 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8001a06:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001a0a:	6821      	ldr	r1, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 8001a0c:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <st_usbfs_ep_read_packet+0xb0>)
	USB_CLR_EP_RX_CTR(addr);
 8001a0e:	400b      	ands	r3, r1
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6023      	str	r3, [r4, #0]
	if (!st_usbfs_force_nak[addr]) {
 8001a16:	5dd3      	ldrb	r3, [r2, r7]
 8001a18:	b963      	cbnz	r3, 8001a34 <st_usbfs_ep_read_packet+0x88>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	6023      	str	r3, [r4, #0]
	}

	return len;
}
 8001a34:	4628      	mov	r0, r5
 8001a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <st_usbfs_ep_read_packet+0xac>)
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4433      	add	r3, r6
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4418      	add	r0, r3
 8001a44:	6805      	ldr	r5, [r0, #0]
 8001a46:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001a4a:	e7c9      	b.n	80019e0 <st_usbfs_ep_read_packet+0x34>
		return 0;
 8001a4c:	2500      	movs	r5, #0
}
 8001a4e:	4628      	mov	r0, r5
 8001a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005c50 	.word	0x40005c50
 8001a58:	4000600c 	.word	0x4000600c
 8001a5c:	20000b50 	.word	0x20000b50

08001a60 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 8001a60:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <st_usbfs_poll+0xdc>)
{
 8001a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8001a64:	6813      	ldr	r3, [r2, #0]
{
 8001a66:	4604      	mov	r4, r0

	if (istr & USB_ISTR_RESET) {
 8001a68:	0559      	lsls	r1, r3, #21
 8001a6a:	d449      	bmi.n	8001b00 <st_usbfs_poll+0xa0>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	b29d      	uxth	r5, r3
 8001a70:	d422      	bmi.n	8001ab8 <st_usbfs_poll+0x58>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 8001a72:	0528      	lsls	r0, r5, #20
 8001a74:	d506      	bpl.n	8001a84 <st_usbfs_poll+0x24>
		USB_CLR_ISTR_SUSP();
 8001a76:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001a7a:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <st_usbfs_poll+0xdc>)
		if (dev->user_callback_suspend) {
 8001a7c:	6a23      	ldr	r3, [r4, #32]
		USB_CLR_ISTR_SUSP();
 8001a7e:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_suspend) {
 8001a80:	b103      	cbz	r3, 8001a84 <st_usbfs_poll+0x24>
			dev->user_callback_suspend();
 8001a82:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 8001a84:	04e9      	lsls	r1, r5, #19
 8001a86:	d506      	bpl.n	8001a96 <st_usbfs_poll+0x36>
		USB_CLR_ISTR_WKUP();
 8001a88:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8001a8c:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <st_usbfs_poll+0xdc>)
		if (dev->user_callback_resume) {
 8001a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		USB_CLR_ISTR_WKUP();
 8001a90:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_resume) {
 8001a92:	b103      	cbz	r3, 8001a96 <st_usbfs_poll+0x36>
			dev->user_callback_resume();
 8001a94:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 8001a96:	05aa      	lsls	r2, r5, #22
 8001a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a9a:	d506      	bpl.n	8001aaa <st_usbfs_poll+0x4a>
		USB_CLR_ISTR_SOF();
 8001a9c:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <st_usbfs_poll+0xdc>)
 8001aa2:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_sof) {
 8001aa4:	b333      	cbz	r3, 8001af4 <st_usbfs_poll+0x94>
			dev->user_callback_sof();
 8001aa6:	4798      	blx	r3
 8001aa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}

	if (dev->user_callback_sof) {
 8001aaa:	b31b      	cbz	r3, 8001af4 <st_usbfs_poll+0x94>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001aac:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <st_usbfs_poll+0xe0>)
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab4:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001ab8:	f003 070f 	and.w	r7, r3, #15
 8001abc:	00be      	lsls	r6, r7, #2
 8001abe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
		if (istr & USB_ISTR_DIR) {
 8001ac2:	f013 0310 	ands.w	r3, r3, #16
 8001ac6:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8001aca:	d122      	bne.n	8001b12 <st_usbfs_poll+0xb2>
			USB_CLR_EP_TX_CTR(ep);
 8001acc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001ad0:	6831      	ldr	r1, [r6, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad8:	6032      	str	r2, [r6, #0]
		if (dev->user_callback_ctr[ep][type]) {
 8001ada:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	331a      	adds	r3, #26
 8001ae2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001ae6:	b30b      	cbz	r3, 8001b2c <st_usbfs_poll+0xcc>
			dev->user_callback_ctr[ep][type] (dev, ep);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4639      	mov	r1, r7
 8001aec:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 8001aee:	0528      	lsls	r0, r5, #20
 8001af0:	d5c8      	bpl.n	8001a84 <st_usbfs_poll+0x24>
 8001af2:	e7c0      	b.n	8001a76 <st_usbfs_poll+0x16>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <st_usbfs_poll+0xe0>)
 8001af6:	6813      	ldr	r3, [r2, #0]
 8001af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dev->pm_top = USBD_PM_TOP;
 8001b00:	2340      	movs	r3, #64	; 0x40
		USB_CLR_ISTR_RESET();
 8001b02:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8001b06:	6011      	str	r1, [r2, #0]
		dev->pm_top = USBD_PM_TOP;
 8001b08:	8303      	strh	r3, [r0, #24]
}
 8001b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_usbd_reset(dev);
 8001b0e:	f7ff b8c3 	b.w	8000c98 <_usbd_reset>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001b12:	6833      	ldr	r3, [r6, #0]
 8001b14:	051b      	lsls	r3, r3, #20
 8001b16:	d401      	bmi.n	8001b1c <st_usbfs_poll+0xbc>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e7de      	b.n	8001ada <st_usbfs_poll+0x7a>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8001b22:	4639      	mov	r1, r7
 8001b24:	f7ff ff42 	bl	80019ac <st_usbfs_ep_read_packet>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e7d6      	b.n	8001ada <st_usbfs_poll+0x7a>
			USB_CLR_EP_RX_CTR(ep);
 8001b2c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001b30:	6832      	ldr	r2, [r6, #0]
 8001b32:	4013      	ands	r3, r2
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	e79a      	b.n	8001a72 <st_usbfs_poll+0x12>
 8001b3c:	40005c44 	.word	0x40005c44
 8001b40:	40005c40 	.word	0x40005c40

08001b44 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001b44:	2201      	movs	r2, #1
 8001b46:	0943      	lsrs	r3, r0, #5
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001b4e:	f000 001f 	and.w	r0, r0, #31
 8001b52:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001b56:	fa02 f000 	lsl.w	r0, r2, r0
 8001b5a:	6018      	str	r0, [r3, #0]
}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8001b60:	2901      	cmp	r1, #1
 8001b62:	d016      	beq.n	8001b92 <exti_set_trigger+0x32>
 8001b64:	d30b      	bcc.n	8001b7e <exti_set_trigger+0x1e>
 8001b66:	2902      	cmp	r1, #2
 8001b68:	d108      	bne.n	8001b7c <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 8001b6a:	490f      	ldr	r1, [pc, #60]	; (8001ba8 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 8001b6e:	680b      	ldr	r3, [r1, #0]
 8001b70:	4303      	orrs	r3, r0
 8001b72:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	4318      	orrs	r0, r3
 8001b78:	6010      	str	r0, [r2, #0]
		break;
	}
}
 8001b7a:	4770      	bx	lr
 8001b7c:	4770      	bx	lr
		EXTI_RTSR |= extis;
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <exti_set_trigger+0x48>)
		EXTI_FTSR &= ~extis;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 8001b82:	680b      	ldr	r3, [r1, #0]
 8001b84:	4303      	orrs	r3, r0
 8001b86:	600b      	str	r3, [r1, #0]
		EXTI_FTSR &= ~extis;
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	ea23 0000 	bic.w	r0, r3, r0
 8001b8e:	6010      	str	r0, [r2, #0]
		break;
 8001b90:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8001b92:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8001b94:	4a05      	ldr	r2, [pc, #20]	; (8001bac <exti_set_trigger+0x4c>)
		EXTI_RTSR &= ~extis;
 8001b96:	680b      	ldr	r3, [r1, #0]
 8001b98:	ea23 0300 	bic.w	r3, r3, r0
 8001b9c:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	4318      	orrs	r0, r3
 8001ba2:	6010      	str	r0, [r2, #0]
		break;
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010408 	.word	0x40010408
 8001bac:	4001040c 	.word	0x4001040c

08001bb0 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <exti_enable_request+0x14>)

	/* Enable events. */
	EXTI_EMR |= extis;
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <exti_enable_request+0x18>)
	EXTI_IMR |= extis;
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	600b      	str	r3, [r1, #0]
	EXTI_EMR |= extis;
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	4318      	orrs	r0, r3
 8001bbe:	6010      	str	r0, [r2, #0]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010400 	.word	0x40010400
 8001bc8:	40010404 	.word	0x40010404

08001bcc <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <exti_reset_request+0x8>)
 8001bce:	6018      	str	r0, [r3, #0]
}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40010414 	.word	0x40010414

08001bd8 <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <rtc_enter_config_mode+0x14>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	069b      	lsls	r3, r3, #26
 8001bde:	d5fc      	bpl.n	8001bda <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40002804 	.word	0x40002804

08001bf0 <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <rtc_exit_config_mode+0x14>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001bf2:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	f021 0110 	bic.w	r1, r1, #16
 8001bfa:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	069b      	lsls	r3, r3, #26
 8001c00:	d5fc      	bpl.n	8001bfc <rtc_exit_config_mode+0xc>
}
 8001c02:	4770      	bx	lr
 8001c04:	40002804 	.word	0x40002804

08001c08 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8001c08:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c0a:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <rtc_set_alarm_time+0x34>)
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	0699      	lsls	r1, r3, #26
 8001c10:	d5fc      	bpl.n	8001c0c <rtc_set_alarm_time+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001c12:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001c14:	490a      	ldr	r1, [pc, #40]	; (8001c40 <rtc_set_alarm_time+0x38>)
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001c16:	4c0b      	ldr	r4, [pc, #44]	; (8001c44 <rtc_set_alarm_time+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001c18:	f043 0310 	orr.w	r3, r3, #16
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001c1c:	b285      	uxth	r5, r0
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001c1e:	0c00      	lsrs	r0, r0, #16
	RTC_CRL |= RTC_CRL_CNF;
 8001c20:	6013      	str	r3, [r2, #0]
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001c22:	6025      	str	r5, [r4, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001c24:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001c26:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c28:	391c      	subs	r1, #28
	RTC_CRL &= ~RTC_CRL_CNF;
 8001c2a:	f023 0310 	bic.w	r3, r3, #16
 8001c2e:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c30:	680b      	ldr	r3, [r1, #0]
 8001c32:	069b      	lsls	r3, r3, #26
 8001c34:	d5fc      	bpl.n	8001c30 <rtc_set_alarm_time+0x28>
	rtc_exit_config_mode();
}
 8001c36:	bc30      	pop	{r4, r5}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40002804 	.word	0x40002804
 8001c40:	40002820 	.word	0x40002820
 8001c44:	40002824 	.word	0x40002824

08001c48 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8001c48:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <rtc_set_prescale_val+0x34>)
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	0699      	lsls	r1, r3, #26
 8001c50:	d5fc      	bpl.n	8001c4c <rtc_set_prescale_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001c52:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001c54:	490a      	ldr	r1, [pc, #40]	; (8001c80 <rtc_set_prescale_val+0x38>)
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001c56:	4c0b      	ldr	r4, [pc, #44]	; (8001c84 <rtc_set_prescale_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001c58:	f043 0310 	orr.w	r3, r3, #16
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001c5c:	b285      	uxth	r5, r0
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001c5e:	f3c0 4003 	ubfx	r0, r0, #16, #4
	RTC_CRL |= RTC_CRL_CNF;
 8001c62:	6013      	str	r3, [r2, #0]
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001c64:	6025      	str	r5, [r4, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001c66:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001c68:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c6a:	3904      	subs	r1, #4
	RTC_CRL &= ~RTC_CRL_CNF;
 8001c6c:	f023 0310 	bic.w	r3, r3, #16
 8001c70:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001c72:	680b      	ldr	r3, [r1, #0]
 8001c74:	069b      	lsls	r3, r3, #26
 8001c76:	d5fc      	bpl.n	8001c72 <rtc_set_prescale_val+0x2a>
	rtc_exit_config_mode();
}
 8001c78:	bc30      	pop	{r4, r5}
 8001c7a:	4770      	bx	lr
 8001c7c:	40002804 	.word	0x40002804
 8001c80:	40002808 	.word	0x40002808
 8001c84:	4000280c 	.word	0x4000280c

08001c88 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <rtc_get_counter_val+0x10>)
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <rtc_get_counter_val+0x14>)
 8001c8c:	6810      	ldr	r0, [r2, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40002818 	.word	0x40002818
 8001c9c:	4000281c 	.word	0x4000281c

08001ca0 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8001ca0:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <rtc_set_counter_val+0x34>)
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	0699      	lsls	r1, r3, #26
 8001ca8:	d5fc      	bpl.n	8001ca4 <rtc_set_counter_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001caa:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001cac:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <rtc_set_counter_val+0x38>)
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001cae:	4c0b      	ldr	r4, [pc, #44]	; (8001cdc <rtc_set_counter_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001cb4:	0c05      	lsrs	r5, r0, #16
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001cb6:	b280      	uxth	r0, r0
	RTC_CRL |= RTC_CRL_CNF;
 8001cb8:	6013      	str	r3, [r2, #0]
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001cba:	6025      	str	r5, [r4, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001cbc:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001cbe:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001cc0:	3918      	subs	r1, #24
	RTC_CRL &= ~RTC_CRL_CNF;
 8001cc2:	f023 0310 	bic.w	r3, r3, #16
 8001cc6:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001cc8:	680b      	ldr	r3, [r1, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	d5fc      	bpl.n	8001cc8 <rtc_set_counter_val+0x28>
	rtc_exit_config_mode();
}
 8001cce:	bc30      	pop	{r4, r5}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40002804 	.word	0x40002804
 8001cd8:	4000281c 	.word	0x4000281c
 8001cdc:	40002818 	.word	0x40002818

08001ce0 <rtc_interrupt_enable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <rtc_interrupt_enable+0x54>)
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	0699      	lsls	r1, r3, #26
 8001ce6:	d5fc      	bpl.n	8001ce2 <rtc_interrupt_enable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 8001ce8:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_enable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001cea:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 8001cf2:	d018      	beq.n	8001d26 <rtc_interrupt_enable+0x46>
 8001cf4:	d311      	bcc.n	8001d1a <rtc_interrupt_enable+0x3a>
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d009      	beq.n	8001d0e <rtc_interrupt_enable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <rtc_interrupt_enable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001cfc:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	f021 0110 	bic.w	r1, r1, #16
 8001d04:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	d5fc      	bpl.n	8001d06 <rtc_interrupt_enable+0x26>
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8001d0c:	4770      	bx	lr
		RTC_CRH |= RTC_CRH_OWIE;
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <rtc_interrupt_enable+0x58>)
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6013      	str	r3, [r2, #0]
		break;
 8001d18:	e7ef      	b.n	8001cfa <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_SECIE;
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <rtc_interrupt_enable+0x58>)
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
		break;
 8001d24:	e7e9      	b.n	8001cfa <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_ALRIE;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <rtc_interrupt_enable+0x58>)
 8001d28:	6813      	ldr	r3, [r2, #0]
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	6013      	str	r3, [r2, #0]
		break;
 8001d30:	e7e3      	b.n	8001cfa <rtc_interrupt_enable+0x1a>
 8001d32:	bf00      	nop
 8001d34:	40002804 	.word	0x40002804
 8001d38:	40002800 	.word	0x40002800

08001d3c <rtc_interrupt_disable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <rtc_interrupt_disable+0x54>)
 8001d3e:	6813      	ldr	r3, [r2, #0]
 8001d40:	0699      	lsls	r1, r3, #26
 8001d42:	d5fc      	bpl.n	8001d3e <rtc_interrupt_disable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 8001d44:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_disable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8001d46:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 8001d4e:	d018      	beq.n	8001d82 <rtc_interrupt_disable+0x46>
 8001d50:	d311      	bcc.n	8001d76 <rtc_interrupt_disable+0x3a>
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d009      	beq.n	8001d6a <rtc_interrupt_disable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <rtc_interrupt_disable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001d58:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	f021 0110 	bic.w	r1, r1, #16
 8001d60:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	d5fc      	bpl.n	8001d62 <rtc_interrupt_disable+0x26>
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8001d68:	4770      	bx	lr
		RTC_CRH &= ~RTC_CRH_OWIE;
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <rtc_interrupt_disable+0x58>)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6013      	str	r3, [r2, #0]
		break;
 8001d74:	e7ef      	b.n	8001d56 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_SECIE;
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <rtc_interrupt_disable+0x58>)
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6013      	str	r3, [r2, #0]
		break;
 8001d80:	e7e9      	b.n	8001d56 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <rtc_interrupt_disable+0x58>)
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f023 0302 	bic.w	r3, r3, #2
 8001d8a:	6013      	str	r3, [r2, #0]
		break;
 8001d8c:	e7e3      	b.n	8001d56 <rtc_interrupt_disable+0x1a>
 8001d8e:	bf00      	nop
 8001d90:	40002804 	.word	0x40002804
 8001d94:	40002800 	.word	0x40002800

08001d98 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8001d98:	2801      	cmp	r0, #1
 8001d9a:	d00f      	beq.n	8001dbc <rtc_clear_flag+0x24>
 8001d9c:	d308      	bcc.n	8001db0 <rtc_clear_flag+0x18>
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d105      	bne.n	8001dae <rtc_clear_flag+0x16>
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
		break;
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <rtc_clear_flag+0x30>)
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001dac:	4770      	bx	lr
 8001dae:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_SECF;
 8001db0:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <rtc_clear_flag+0x30>)
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]
		break;
 8001dba:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_ALRF;
 8001dbc:	4a02      	ldr	r2, [pc, #8]	; (8001dc8 <rtc_clear_flag+0x30>)
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	6013      	str	r3, [r2, #0]
		break;
 8001dc6:	4770      	bx	lr
 8001dc8:	40002804 	.word	0x40002804

08001dcc <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 8001dcc:	2801      	cmp	r0, #1
 8001dce:	d00e      	beq.n	8001dee <rtc_check_flag+0x22>
 8001dd0:	d308      	bcc.n	8001de4 <rtc_check_flag+0x18>
 8001dd2:	2802      	cmp	r0, #2
 8001dd4:	d104      	bne.n	8001de0 <rtc_check_flag+0x14>
		break;
	case RTC_ALR:
		reg32 = RTC_CRL & RTC_CRL_ALRF;
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <rtc_check_flag+0x2c>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f000 0004 	and.w	r0, r0, #4
		break;
 8001dde:	4770      	bx	lr
	default:
		reg32 = 0;
 8001de0:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 8001de2:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <rtc_check_flag+0x2c>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f000 0001 	and.w	r0, r0, #1
		break;
 8001dec:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 8001dee:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <rtc_check_flag+0x2c>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f000 0002 	and.w	r0, r0, #2
		break;
 8001df6:	4770      	bx	lr
 8001df8:	40002804 	.word	0x40002804

08001dfc <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <os_init>:
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 8001e00:	23ff      	movs	r3, #255	; 0xff
    last_running_task = NO_TID;
    running = 0;
 8001e02:	2100      	movs	r1, #0
void os_init( void ) {
 8001e04:	b510      	push	{r4, lr}
    last_running_task = NO_TID;
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <os_init+0x28>)
    running = 0;
 8001e08:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <os_init+0x2c>)
	running_tid = NO_TID;
 8001e0a:	4c09      	ldr	r4, [pc, #36]	; (8001e30 <os_init+0x30>)
    last_running_task = NO_TID;
 8001e0c:	7003      	strb	r3, [r0, #0]
	running_tid = NO_TID;
 8001e0e:	7023      	strb	r3, [r4, #0]
    running = 0;
 8001e10:	7011      	strb	r1, [r2, #0]
    os_sem_init();
 8001e12:	f000 f883 	bl	8001f1c <os_sem_init>
    os_event_init();
 8001e16:	f000 fabd 	bl	8002394 <os_event_init>
    os_msgQ_init();
 8001e1a:	f000 f815 	bl	8001e48 <os_msgQ_init>
    os_task_init();
}
 8001e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_task_init();
 8001e22:	f000 b8bd 	b.w	8001fa0 <os_task_init>
 8001e26:	bf00      	nop
 8001e28:	20000c56 	.word	0x20000c56
 8001e2c:	20000c55 	.word	0x20000c55
 8001e30:	20000c54 	.word	0x20000c54

08001e34 <os_tick>:
*       
*/
/*********************************************************************************/
void os_tick( void ) {
    /* Master clock tick */
    os_task_tick( 0, 1 );
 8001e34:	2101      	movs	r1, #1
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 b9e4 	b.w	8002204 <os_task_tick>

08001e3c <os_running>:
    }
}


uint8_t os_running( void ) {
    return running;
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <os_running+0x8>)
}
 8001e3e:	7818      	ldrb	r0, [r3, #0]
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000c55 	.word	0x20000c55

08001e48 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8001e48:	2300      	movs	r3, #0
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <os_msgQ_init+0x1c>)
    nQueues = 0;
 8001e4c:	4906      	ldr	r1, [pc, #24]	; (8001e68 <os_msgQ_init+0x20>)
        msgQList[ i ].q.list = 0;
 8001e4e:	e9c2 3300 	strd	r3, r3, [r2]
    nQueues = 0;
 8001e52:	700b      	strb	r3, [r1, #0]
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
 8001e54:	7213      	strb	r3, [r2, #8]
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 8001e56:	8193      	strh	r3, [r2, #12]
        msgQList[ i ].q.list = 0;
 8001e58:	e9c2 3304 	strd	r3, r3, [r2, #16]
        msgQList[ i ].q.tail = 0;
 8001e5c:	7613      	strb	r3, [r2, #24]
        msgQList[ i ].taskId = 0;
 8001e5e:	8393      	strh	r3, [r2, #28]
        msgQList[ i ].change = 0;
    }
#endif
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000560 	.word	0x20000560
 8001e68:	20000634 	.word	0x20000634

08001e6c <os_msgQ_create>:

MsgQ_t os_msgQ_create( Msg_t *buffer, uint8_t nMessages, uint16_t msgSize, uint8_t task_id ) {
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if( N_QUEUES > 0 )
    os_assert( nQueues < N_QUEUES );
 8001e70:	4d10      	ldr	r5, [pc, #64]	; (8001eb4 <os_msgQ_create+0x48>)
MsgQ_t os_msgQ_create( Msg_t *buffer, uint8_t nMessages, uint16_t msgSize, uint8_t task_id ) {
 8001e72:	4681      	mov	r9, r0
    os_assert( nQueues < N_QUEUES );
 8001e74:	7828      	ldrb	r0, [r5, #0]
MsgQ_t os_msgQ_create( Msg_t *buffer, uint8_t nMessages, uint16_t msgSize, uint8_t task_id ) {
 8001e76:	4688      	mov	r8, r1
    os_assert( nQueues < N_QUEUES );
 8001e78:	2801      	cmp	r0, #1
MsgQ_t os_msgQ_create( Msg_t *buffer, uint8_t nMessages, uint16_t msgSize, uint8_t task_id ) {
 8001e7a:	4692      	mov	sl, r2
 8001e7c:	461f      	mov	r7, r3
    os_assert( nQueues < N_QUEUES );
 8001e7e:	d903      	bls.n	8001e88 <os_msgQ_create+0x1c>
 8001e80:	205a      	movs	r0, #90	; 0x5a
 8001e82:	f000 fa73 	bl	800236c <os_on_assert>
 8001e86:	7828      	ldrb	r0, [r5, #0]
    msgQList[ nQueues ].q.list = (Mem_t*)buffer;
    msgQList[ nQueues ].q.head = 1;
 8001e88:	2601      	movs	r6, #1
    msgQList[ nQueues ].q.list = (Mem_t*)buffer;
 8001e8a:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <os_msgQ_create+0x4c>)
 8001e8c:	0100      	lsls	r0, r0, #4
 8001e8e:	f844 9000 	str.w	r9, [r4, r0]
 8001e92:	4404      	add	r4, r0
    msgQList[ nQueues ].q.tail = 0;
    msgQList[ nQueues ].q.size = nMessages;
 8001e94:	f884 8008 	strb.w	r8, [r4, #8]
    msgQList[ nQueues ].q.messageSize = msgSize;
 8001e98:	f8a4 a004 	strh.w	sl, [r4, #4]
    msgQList[ nQueues ].taskId = task_id;
 8001e9c:	7327      	strb	r7, [r4, #12]
    msgQList[ nQueues ].q.head = 1;
 8001e9e:	80e6      	strh	r6, [r4, #6]
    msgQList[ nQueues ].change = event_create();
 8001ea0:	f000 fa7e 	bl	80023a0 <event_create>

    nQueues++;
 8001ea4:	782b      	ldrb	r3, [r5, #0]
    msgQList[ nQueues ].change = event_create();
 8001ea6:	7360      	strb	r0, [r4, #13]
    nQueues++;
 8001ea8:	199a      	adds	r2, r3, r6
 8001eaa:	702a      	strb	r2, [r5, #0]
    return nQueues - 1;
#else
    return 0;
#endif
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000634 	.word	0x20000634
 8001eb8:	20000560 	.word	0x20000560

08001ebc <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 8001ebe:	4d16      	ldr	r5, [pc, #88]	; (8001f18 <os_msgQ_tick+0x5c>)
 8001ec0:	eb05 1500 	add.w	r5, r5, r0, lsl #4
 8001ec4:	79ec      	ldrb	r4, [r5, #7]
 8001ec6:	7a2a      	ldrb	r2, [r5, #8]
 8001ec8:	1c63      	adds	r3, r4, #1
 8001eca:	fb93 f4f2 	sdiv	r4, r3, r2
 8001ece:	fb02 3414 	mls	r4, r2, r4, r3

    uint8_t head = q->head;
 8001ed2:	79ae      	ldrb	r6, [r5, #6]
    nextMessage = (q->tail+1) % q->size;
 8001ed4:	b2e4      	uxtb	r4, r4
    uint16_t msgSz = q->messageSize;

    while ( nextMessage != head ) {
 8001ed6:	42b4      	cmp	r4, r6
    uint16_t msgSz = q->messageSize;
 8001ed8:	88af      	ldrh	r7, [r5, #4]
    while ( nextMessage != head ) {
 8001eda:	d109      	bne.n	8001ef0 <os_msgQ_tick+0x34>
 8001edc:	e01a      	b.n	8001f14 <os_msgQ_tick+0x58>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 8001ede:	7a2a      	ldrb	r2, [r5, #8]
 8001ee0:	3401      	adds	r4, #1
 8001ee2:	fb94 f3f2 	sdiv	r3, r4, r2
 8001ee6:	fb02 4413 	mls	r4, r2, r3, r4
 8001eea:	b2e4      	uxtb	r4, r4
    while ( nextMessage != head ) {
 8001eec:	42a6      	cmp	r6, r4
 8001eee:	d011      	beq.n	8001f14 <os_msgQ_tick+0x58>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	fb07 3304 	mla	r3, r7, r4, r3
        if ( pMsg->delay > 0 ) {
 8001ef6:	685a      	ldr	r2, [r3, #4]
            --(pMsg->delay);
 8001ef8:	1e51      	subs	r1, r2, #1
        if ( pMsg->delay > 0 ) {
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d0ef      	beq.n	8001ede <os_msgQ_tick+0x22>
            --(pMsg->delay);
 8001efe:	6059      	str	r1, [r3, #4]
            if ( pMsg->delay == 0 ) {
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d1ec      	bne.n	8001ede <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 8001f04:	7b68      	ldrb	r0, [r5, #13]
 8001f06:	f000 fa63 	bl	80023d0 <os_signal_event>
 8001f0a:	21fe      	movs	r1, #254	; 0xfe
 8001f0c:	7b68      	ldrb	r0, [r5, #13]
 8001f0e:	f000 fa65 	bl	80023dc <os_event_set_signaling_tid>
 8001f12:	e7e4      	b.n	8001ede <os_msgQ_tick+0x22>

    }
#endif    
}
 8001f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000560 	.word	0x20000560

08001f1c <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4b01      	ldr	r3, [pc, #4]	; (8001f24 <os_sem_init+0x8>)
 8001f20:	701a      	strb	r2, [r3, #0]
#endif
}
 8001f22:	4770      	bx	lr
 8001f24:	20000635 	.word	0x20000635

08001f28 <sem_bin_create>:
*
*   @endcode
*       
*		 */
/*********************************************************************************/
Sem_t sem_bin_create( uint8_t initial ) {
 8001f28:	b538      	push	{r3, r4, r5, lr}
    os_assert( nSemaphores < N_TOTAL_SEMAPHORES );
 8001f2a:	4c0a      	ldr	r4, [pc, #40]	; (8001f54 <sem_bin_create+0x2c>)
    initial = initial > 0 ? 1 : 0;
 8001f2c:	1c05      	adds	r5, r0, #0
    os_assert( nSemaphores < N_TOTAL_SEMAPHORES );
 8001f2e:	7820      	ldrb	r0, [r4, #0]
    initial = initial > 0 ? 1 : 0;
 8001f30:	bf18      	it	ne
 8001f32:	2501      	movne	r5, #1
    os_assert( nSemaphores < N_TOTAL_SEMAPHORES );
 8001f34:	280b      	cmp	r0, #11
 8001f36:	d903      	bls.n	8001f40 <sem_bin_create+0x18>
 8001f38:	203f      	movs	r0, #63	; 0x3f
 8001f3a:	f000 fa17 	bl	800236c <os_on_assert>
 8001f3e:	7820      	ldrb	r0, [r4, #0]
    semList[ nSemaphores ].maxValue = max;
 8001f40:	2101      	movs	r1, #1
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <sem_bin_create+0x30>)
    ++nSemaphores;
 8001f44:	1842      	adds	r2, r0, r1
    semList[ nSemaphores ].maxValue = max;
 8001f46:	f803 1010 	strb.w	r1, [r3, r0, lsl #1]
    semList[ nSemaphores ].value = initial;
 8001f4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001f4e:	705d      	strb	r5, [r3, #1]
    ++nSemaphores;
 8001f50:	7022      	strb	r2, [r4, #0]
    return os_sem_create( 1, initial );
}
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	20000635 	.word	0x20000635
 8001f58:	20000580 	.word	0x20000580

08001f5c <os_sem_larger_than_zero>:
}


uint8_t os_sem_larger_than_zero( Sem_t sem) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    return ( semList[ sem ].value > 0 );
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <os_sem_larger_than_zero+0x10>)
 8001f5e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001f62:	7840      	ldrb	r0, [r0, #1]
#else
    return 0;
#endif
}
 8001f64:	3000      	adds	r0, #0
 8001f66:	bf18      	it	ne
 8001f68:	2001      	movne	r0, #1
 8001f6a:	4770      	bx	lr
 8001f6c:	20000580 	.word	0x20000580

08001f70 <os_sem_decrement>:


void os_sem_decrement( Sem_t sem ) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    if ( semList[ sem ].value > 0 ) {
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <os_sem_decrement+0x10>)
 8001f72:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001f76:	7843      	ldrb	r3, [r0, #1]
 8001f78:	b10b      	cbz	r3, 8001f7e <os_sem_decrement+0xe>
        --semList[ sem ].value;
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	7043      	strb	r3, [r0, #1]
    }
#endif
}
 8001f7e:	4770      	bx	lr
 8001f80:	20000580 	.word	0x20000580

08001f84 <os_sem_increment>:


void os_sem_increment( Sem_t sem ) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    if ( semList[ sem ].value < semList[ sem ].maxValue ) {
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <os_sem_increment+0x18>)
 8001f86:	eb03 0240 	add.w	r2, r3, r0, lsl #1
 8001f8a:	f813 1010 	ldrb.w	r1, [r3, r0, lsl #1]
 8001f8e:	7853      	ldrb	r3, [r2, #1]
 8001f90:	4299      	cmp	r1, r3
        ++semList[ sem ].value;
 8001f92:	bf84      	itt	hi
 8001f94:	3301      	addhi	r3, #1
 8001f96:	7053      	strbhi	r3, [r2, #1]
    }
#endif
}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000580 	.word	0x20000580

08001fa0 <os_task_init>:
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8001fa0:	2100      	movs	r1, #0
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
 8001fa2:	20ff      	movs	r0, #255	; 0xff
void os_task_init( void ) {
 8001fa4:	b410      	push	{r4}
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <os_task_init+0x3c>)
    nTasks = 0;
 8001fa8:	4c0d      	ldr	r4, [pc, #52]	; (8001fe0 <os_task_init+0x40>)
        task->internal_state = 0xff;
        task->msgQ = 0;
 8001faa:	460a      	mov	r2, r1
    nTasks = 0;
 8001fac:	7021      	strb	r1, [r4, #0]
 8001fae:	f103 018c 	add.w	r1, r3, #140	; 0x8c
        task->clockId = 0xff;
 8001fb2:	7518      	strb	r0, [r3, #20]
        task->internal_state = 0xff;
 8001fb4:	80d8      	strh	r0, [r3, #6]
        task->msgQ = 0;
 8001fb6:	73da      	strb	r2, [r3, #15]
        task->waitQ = 0;
 8001fb8:	741a      	strb	r2, [r3, #16]
        task->msgChangeEvent = 0;
 8001fba:	745a      	strb	r2, [r3, #17]
        task->msgResult = 0;
 8001fbc:	749a      	strb	r2, [r3, #18]
        task->prio = 0;
 8001fbe:	735a      	strb	r2, [r3, #13]
        task->savedState = SUSPENDED;
 8001fc0:	715a      	strb	r2, [r3, #5]
        task->semaphore = NO_SEM;
 8001fc2:	7398      	strb	r0, [r3, #14]
        task->state = SUSPENDED;
 8001fc4:	711a      	strb	r2, [r3, #4]
        task->taskproc = 0;
 8001fc6:	601a      	str	r2, [r3, #0]
        task->tid = NO_TID;
 8001fc8:	7318      	strb	r0, [r3, #12]
        task->time = 0;
 8001fca:	609a      	str	r2, [r3, #8]
        task->waitSingleEvent = 0;
 8001fcc:	74da      	strb	r2, [r3, #19]

        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
 8001fce:	7558      	strb	r0, [r3, #21]
        }
        task->data = 0;
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	331c      	adds	r3, #28
    for ( i = 0; i < N_TASKS; ++i ) {
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d1ec      	bne.n	8001fb2 <os_task_init+0x12>
    }
}
 8001fd8:	bc10      	pop	{r4}
 8001fda:	4770      	bx	lr
 8001fdc:	20000598 	.word	0x20000598
 8001fe0:	20000636 	.word	0x20000636

08001fe4 <task_create>:
}
@endcode
*       
*/
/*********************************************************************************/
uint8_t task_create( taskproctype taskproc, void *data, uint8_t prio, Msg_t *msgPool, uint8_t poolSize, uint16_t msgSize ) {
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001ff0:	4683      	mov	fp, r0
 8001ff2:	4688      	mov	r8, r1
 8001ff4:	4691      	mov	r9, r2
 8001ff6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001ffa:	9301      	str	r3, [sp, #4]
    uint8_t taskId;
    tcb *task;

    os_assert( os_running() == 0 );
 8001ffc:	f7ff ff1e 	bl	8001e3c <os_running>
 8002000:	2800      	cmp	r0, #0
 8002002:	d158      	bne.n	80020b6 <task_create+0xd2>
    os_assert( nTasks < N_TASKS );
 8002004:	4e32      	ldr	r6, [pc, #200]	; (80020d0 <task_create+0xec>)
 8002006:	7833      	ldrb	r3, [r6, #0]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d846      	bhi.n	800209a <task_create+0xb6>
    os_assert( taskproc != NULL );
 800200c:	f1bb 0f00 	cmp.w	fp, #0
 8002010:	d049      	beq.n	80020a6 <task_create+0xc2>

    taskId = nTasks;
 8002012:	7833      	ldrb	r3, [r6, #0]

    /* Check that no other task has the same prio */
    while ( taskId != 0 ) {
 8002014:	2b00      	cmp	r3, #0
 8002016:	d04c      	beq.n	80020b2 <task_create+0xce>
 8002018:	3b01      	subs	r3, #1
 800201a:	4d2e      	ldr	r5, [pc, #184]	; (80020d4 <task_create+0xf0>)
 800201c:	b2dc      	uxtb	r4, r3
 800201e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002022:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8002026:	f1a5 0a1c 	sub.w	sl, r5, #28
 800202a:	e001      	b.n	8002030 <task_create+0x4c>
 800202c:	45a2      	cmp	sl, r4
 800202e:	d008      	beq.n	8002042 <task_create+0x5e>
        --taskId;
        os_assert( task_list[ taskId ].prio != prio );
 8002030:	7b63      	ldrb	r3, [r4, #13]
 8002032:	3c1c      	subs	r4, #28
 8002034:	454b      	cmp	r3, r9
 8002036:	d1f9      	bne.n	800202c <task_create+0x48>
 8002038:	2093      	movs	r0, #147	; 0x93
 800203a:	f000 f997 	bl	800236c <os_on_assert>
    while ( taskId != 0 ) {
 800203e:	45a2      	cmp	sl, r4
 8002040:	d1f6      	bne.n	8002030 <task_create+0x4c>
 8002042:	7833      	ldrb	r3, [r6, #0]

    task->tid = nTasks;
    task->prio = prio;
    task->state = READY;
    task->savedState = READY;
    task->semaphore = 0;
 8002044:	2000      	movs	r0, #0
    task->state = READY;
 8002046:	f04f 0c05 	mov.w	ip, #5
    task->tid = nTasks;
 800204a:	00d9      	lsls	r1, r3, #3
 800204c:	1acc      	subs	r4, r1, r3
 800204e:	00a4      	lsls	r4, r4, #2
    task->internal_state = 0;
    task->taskproc = taskproc;
 8002050:	f845 b004 	str.w	fp, [r5, r4]
    task->tid = nTasks;
 8002054:	442c      	add	r4, r5
 8002056:	7323      	strb	r3, [r4, #12]
    task->prio = prio;
 8002058:	f884 900d 	strb.w	r9, [r4, #13]
    task->state = READY;
 800205c:	f884 c004 	strb.w	ip, [r4, #4]
    task->savedState = READY;
 8002060:	f884 c005 	strb.w	ip, [r4, #5]
    task->semaphore = 0;
 8002064:	73a0      	strb	r0, [r4, #14]
    task->internal_state = 0;
 8002066:	80e0      	strh	r0, [r4, #6]
    task->waitSingleEvent = 0;
 8002068:	74e0      	strb	r0, [r4, #19]
    task->time = 0;
 800206a:	60a0      	str	r0, [r4, #8]
    task = &task_list[ nTasks ];
 800206c:	469b      	mov	fp, r3
    if ( poolSize > 0 ) {
 800206e:	bb37      	cbnz	r7, 80020be <task_create+0xda>
        task->msgQ = os_msgQ_create( msgPool, poolSize, msgSize, task->tid );
    }
    else {
        task->msgQ = NO_QUEUE;
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	73e2      	strb	r2, [r4, #15]
    uint8_t event;
    tcb *task;

    task = &task_list[ tid ];

    task->waitSingleEvent = 0;
 8002074:	2200      	movs	r2, #0
    task->data = data;
 8002076:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
 800207a:	eb05 0b8b 	add.w	fp, r5, fp, lsl #2
    task->waitSingleEvent = 0;
 800207e:	1ac9      	subs	r1, r1, r3
}
 8002080:	f89b 000c 	ldrb.w	r0, [fp, #12]
    task->waitSingleEvent = 0;
 8002084:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    nTasks++;
 8002088:	3301      	adds	r3, #1
    task->data = data;
 800208a:	f8cb 8018 	str.w	r8, [fp, #24]
    nTasks++;
 800208e:	7033      	strb	r3, [r6, #0]
    task->waitSingleEvent = 0;
 8002090:	74ea      	strb	r2, [r5, #19]
    event = EVENT_QUEUE_SIZE;

    do {
        --event;
        task->eventQueue.eventList[ event ] = 0;
 8002092:	756a      	strb	r2, [r5, #21]
}
 8002094:	b003      	add	sp, #12
 8002096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    os_assert( nTasks < N_TASKS );
 800209a:	208b      	movs	r0, #139	; 0x8b
 800209c:	f000 f966 	bl	800236c <os_on_assert>
    os_assert( taskproc != NULL );
 80020a0:	f1bb 0f00 	cmp.w	fp, #0
 80020a4:	d1b5      	bne.n	8002012 <task_create+0x2e>
 80020a6:	208c      	movs	r0, #140	; 0x8c
 80020a8:	f000 f960 	bl	800236c <os_on_assert>
    taskId = nTasks;
 80020ac:	7833      	ldrb	r3, [r6, #0]
    while ( taskId != 0 ) {
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1b2      	bne.n	8002018 <task_create+0x34>
 80020b2:	4d08      	ldr	r5, [pc, #32]	; (80020d4 <task_create+0xf0>)
 80020b4:	e7c6      	b.n	8002044 <task_create+0x60>
    os_assert( os_running() == 0 );
 80020b6:	208a      	movs	r0, #138	; 0x8a
 80020b8:	f000 f958 	bl	800236c <os_on_assert>
 80020bc:	e7a2      	b.n	8002004 <task_create+0x20>
        task->msgQ = os_msgQ_create( msgPool, poolSize, msgSize, task->tid );
 80020be:	4639      	mov	r1, r7
 80020c0:	9a01      	ldr	r2, [sp, #4]
 80020c2:	9800      	ldr	r0, [sp, #0]
 80020c4:	f7ff fed2 	bl	8001e6c <os_msgQ_create>
 80020c8:	7833      	ldrb	r3, [r6, #0]
 80020ca:	73e0      	strb	r0, [r4, #15]
 80020cc:	00d9      	lsls	r1, r3, #3
 80020ce:	e7d1      	b.n	8002074 <task_create+0x90>
 80020d0:	20000636 	.word	0x20000636
 80020d4:	20000598 	.word	0x20000598

080020d8 <os_task_highest_prio_ready_task>:
uint8_t os_task_highest_prio_ready_task( void ) {
 80020d8:	b4f0      	push	{r4, r5, r6, r7}
    for ( index = 0; index != nTasks; ++index ) {
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <os_task_highest_prio_ready_task+0x38>)
 80020dc:	781e      	ldrb	r6, [r3, #0]
 80020de:	b1a6      	cbz	r6, 800210a <os_task_highest_prio_ready_task+0x32>
    uint8_t highest_prio = 255;
 80020e0:	27ff      	movs	r7, #255	; 0xff
    for ( index = 0; index != nTasks; ++index ) {
 80020e2:	2200      	movs	r2, #0
    uint8_t highest_prio_task = NO_TID;
 80020e4:	4638      	mov	r0, r7
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <os_task_highest_prio_ready_task+0x3c>)
        if ( READY == state ) {
 80020e8:	791c      	ldrb	r4, [r3, #4]
        prio = task->prio;
 80020ea:	7b5d      	ldrb	r5, [r3, #13]
        if ( READY == state ) {
 80020ec:	2c05      	cmp	r4, #5
    for ( index = 0; index != nTasks; ++index ) {
 80020ee:	f102 0101 	add.w	r1, r2, #1
 80020f2:	f103 031c 	add.w	r3, r3, #28
        if ( READY == state ) {
 80020f6:	d103      	bne.n	8002100 <os_task_highest_prio_ready_task+0x28>
            if ( prio < highest_prio ) {
 80020f8:	42bd      	cmp	r5, r7
                highest_prio_task = index;
 80020fa:	bf3c      	itt	cc
 80020fc:	462f      	movcc	r7, r5
 80020fe:	b2d0      	uxtbcc	r0, r2
    for ( index = 0; index != nTasks; ++index ) {
 8002100:	b28a      	uxth	r2, r1
 8002102:	42b2      	cmp	r2, r6
 8002104:	d1f0      	bne.n	80020e8 <os_task_highest_prio_ready_task+0x10>
}
 8002106:	bcf0      	pop	{r4, r5, r6, r7}
 8002108:	4770      	bx	lr
    uint8_t highest_prio_task = NO_TID;
 800210a:	20ff      	movs	r0, #255	; 0xff
}
 800210c:	bcf0      	pop	{r4, r5, r6, r7}
 800210e:	4770      	bx	lr
 8002110:	20000636 	.word	0x20000636
 8002114:	20000598 	.word	0x20000598

08002118 <os_task_release_waiting_task>:
void os_task_release_waiting_task( Sem_t sem ) {
 8002118:	b4f0      	push	{r4, r5, r6, r7}
    for ( tid = 0; tid != nTasks; ++tid ) {
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <os_task_release_waiting_task+0x58>)
 800211c:	781d      	ldrb	r5, [r3, #0]
 800211e:	b32d      	cbz	r5, 800216c <os_task_release_waiting_task+0x54>
 8002120:	2200      	movs	r2, #0
    uint8_t foundTask = NO_TID;
 8002122:	26ff      	movs	r6, #255	; 0xff
 8002124:	4f13      	ldr	r7, [pc, #76]	; (8002174 <os_task_release_waiting_task+0x5c>)
 8002126:	4611      	mov	r1, r2
    uint8_t highestPrio = 255;
 8002128:	46b4      	mov	ip, r6
 800212a:	463b      	mov	r3, r7
 800212c:	e005      	b.n	800213a <os_task_release_waiting_task+0x22>
 800212e:	3201      	adds	r2, #1
    for ( tid = 0; tid != nTasks; ++tid ) {
 8002130:	b2d1      	uxtb	r1, r2
 8002132:	42a9      	cmp	r1, r5
 8002134:	f103 031c 	add.w	r3, r3, #28
 8002138:	d010      	beq.n	800215c <os_task_release_waiting_task+0x44>
        taskIsWaitingForThisSemaphore = (( task->state == WAITING_SEM ) && ( task->semaphore == sem ) );
 800213a:	791c      	ldrb	r4, [r3, #4]
 800213c:	2c01      	cmp	r4, #1
 800213e:	d1f6      	bne.n	800212e <os_task_release_waiting_task+0x16>
 8002140:	7b9c      	ldrb	r4, [r3, #14]
 8002142:	4284      	cmp	r4, r0
 8002144:	d1f3      	bne.n	800212e <os_task_release_waiting_task+0x16>
                if ( task->prio < highestPrio ) {
 8002146:	7b5c      	ldrb	r4, [r3, #13]
 8002148:	4564      	cmp	r4, ip
 800214a:	d2f0      	bcs.n	800212e <os_task_release_waiting_task+0x16>
 800214c:	3201      	adds	r2, #1
 800214e:	460e      	mov	r6, r1
    for ( tid = 0; tid != nTasks; ++tid ) {
 8002150:	b2d1      	uxtb	r1, r2
 8002152:	42a9      	cmp	r1, r5
                if ( task->prio < highestPrio ) {
 8002154:	46a4      	mov	ip, r4
 8002156:	f103 031c 	add.w	r3, r3, #28
    for ( tid = 0; tid != nTasks; ++tid ) {
 800215a:	d1ee      	bne.n	800213a <os_task_release_waiting_task+0x22>
    if ( NO_TID != foundTask ) {
 800215c:	2eff      	cmp	r6, #255	; 0xff
 800215e:	d005      	beq.n	800216c <os_task_release_waiting_task+0x54>
        task_list[ foundTask ].state = READY;
 8002160:	2305      	movs	r3, #5
 8002162:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8002166:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 800216a:	7133      	strb	r3, [r6, #4]
}
 800216c:	bcf0      	pop	{r4, r5, r6, r7}
 800216e:	4770      	bx	lr
 8002170:	20000636 	.word	0x20000636
 8002174:	20000598 	.word	0x20000598

08002178 <os_task_waiting_this_semaphore>:
    for ( tid = 0; tid != nTasks; ++tid ) {
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <os_task_waiting_this_semaphore+0x50>)
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	b30a      	cbz	r2, 80021c2 <os_task_waiting_this_semaphore+0x4a>
 800217e:	3a01      	subs	r2, #1
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <os_task_waiting_this_semaphore+0x54>)
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8002188:	f103 011c 	add.w	r1, r3, #28
 800218c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002190:	e002      	b.n	8002198 <os_task_waiting_this_semaphore+0x20>
 8002192:	331c      	adds	r3, #28
 8002194:	428b      	cmp	r3, r1
 8002196:	d013      	beq.n	80021c0 <os_task_waiting_this_semaphore+0x48>
        taskIsWaitingForThisSemaphore = (( task->state == WAITING_SEM ) && ( task->semaphore == sem ) );
 8002198:	791a      	ldrb	r2, [r3, #4]
 800219a:	2a01      	cmp	r2, #1
 800219c:	d1f9      	bne.n	8002192 <os_task_waiting_this_semaphore+0x1a>
uint8_t os_task_waiting_this_semaphore( Sem_t sem ) {
 800219e:	b410      	push	{r4}
        taskIsWaitingForThisSemaphore = (( task->state == WAITING_SEM ) && ( task->semaphore == sem ) );
 80021a0:	7b9c      	ldrb	r4, [r3, #14]
 80021a2:	4284      	cmp	r4, r0
 80021a4:	d009      	beq.n	80021ba <os_task_waiting_this_semaphore+0x42>
 80021a6:	331c      	adds	r3, #28
    for ( tid = 0; tid != nTasks; ++tid ) {
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d005      	beq.n	80021b8 <os_task_waiting_this_semaphore+0x40>
        taskIsWaitingForThisSemaphore = (( task->state == WAITING_SEM ) && ( task->semaphore == sem ) );
 80021ac:	791a      	ldrb	r2, [r3, #4]
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d0f6      	beq.n	80021a0 <os_task_waiting_this_semaphore+0x28>
 80021b2:	331c      	adds	r3, #28
    for ( tid = 0; tid != nTasks; ++tid ) {
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d1f9      	bne.n	80021ac <os_task_waiting_this_semaphore+0x34>
    uint8_t result = 0;
 80021b8:	2200      	movs	r2, #0
}
 80021ba:	4610      	mov	r0, r2
 80021bc:	bc10      	pop	{r4}
 80021be:	4770      	bx	lr
    uint8_t result = 0;
 80021c0:	2200      	movs	r2, #0
}
 80021c2:	4610      	mov	r0, r2
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000636 	.word	0x20000636
 80021cc:	20000598 	.word	0x20000598

080021d0 <os_task_wait_sem_set>:
void os_task_wait_sem_set( uint8_t tid, Sem_t sem ) {
 80021d0:	b538      	push	{r3, r4, r5, lr}
    os_assert( tid < nTasks );
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <os_task_wait_sem_set+0x2c>)
void os_task_wait_sem_set( uint8_t tid, Sem_t sem ) {
 80021d4:	4604      	mov	r4, r0
    os_assert( tid < nTasks );
 80021d6:	781b      	ldrb	r3, [r3, #0]
void os_task_wait_sem_set( uint8_t tid, Sem_t sem ) {
 80021d8:	460d      	mov	r5, r1
    os_assert( tid < nTasks );
 80021da:	4283      	cmp	r3, r0
 80021dc:	d803      	bhi.n	80021e6 <os_task_wait_sem_set+0x16>
 80021de:	f44f 70ce 	mov.w	r0, #412	; 0x19c
 80021e2:	f000 f8c3 	bl	800236c <os_on_assert>
uint32_t os_task_timeout_get(uint8_t tid) {
  return task_list[ tid ].time;
}

static void task_wait_sem_set( uint8_t tid, Sem_t sem ) {
    task_list[ tid ].state = WAITING_SEM;
 80021e6:	2201      	movs	r2, #1
	task_list[ tid ].time = 0;
 80021e8:	2300      	movs	r3, #0
    task_list[ tid ].state = WAITING_SEM;
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <os_task_wait_sem_set+0x30>)
 80021ec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80021f0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    task_list[ tid ].semaphore = sem;
 80021f4:	7385      	strb	r5, [r0, #14]
    task_list[ tid ].state = WAITING_SEM;
 80021f6:	7102      	strb	r2, [r0, #4]
	task_list[ tid ].time = 0;
 80021f8:	6083      	str	r3, [r0, #8]
}
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	20000636 	.word	0x20000636
 8002200:	20000598 	.word	0x20000598

08002204 <os_task_tick>:
void os_task_tick( uint8_t id, uint32_t tickSize ) {
 8002204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for ( index = 0; index != nTasks; ++index ) {
 8002208:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002298 <os_task_tick+0x94>
 800220c:	f899 3000 	ldrb.w	r3, [r9]
 8002210:	b313      	cbz	r3, 8002258 <os_task_tick+0x54>
 8002212:	2400      	movs	r4, #0
 8002214:	460e      	mov	r6, r1
 8002216:	4682      	mov	sl, r0
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 8002218:	f04f 0805 	mov.w	r8, #5
            task_list[ index ].time = 0;
 800221c:	4627      	mov	r7, r4
 800221e:	4d1d      	ldr	r5, [pc, #116]	; (8002294 <os_task_tick+0x90>)
		state = task_list[ index ].state;
 8002220:	00e3      	lsls	r3, r4, #3
 8002222:	1b19      	subs	r1, r3, r4
 8002224:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002228:	790a      	ldrb	r2, [r1, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 800222a:	2a02      	cmp	r2, #2
 800222c:	d01a      	beq.n	8002264 <os_task_tick+0x60>
 800222e:	2a04      	cmp	r2, #4
 8002230:	d018      	beq.n	8002264 <os_task_tick+0x60>
		else if ( state ==  WAITING_SEM ) {
 8002232:	2a01      	cmp	r2, #1
 8002234:	d012      	beq.n	800225c <os_task_tick+0x58>
        if ( id == 0 ) {
 8002236:	f1ba 0f00 	cmp.w	sl, #0
 800223a:	d107      	bne.n	800224c <os_task_tick+0x48>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 800223c:	1b1b      	subs	r3, r3, r4
 800223e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002242:	7bd8      	ldrb	r0, [r3, #15]
 8002244:	28ff      	cmp	r0, #255	; 0xff
 8002246:	d001      	beq.n	800224c <os_task_tick+0x48>
                os_msgQ_tick( task_list[ index ].msgQ );
 8002248:	f7ff fe38 	bl	8001ebc <os_msgQ_tick>
    for ( index = 0; index != nTasks; ++index ) {
 800224c:	3401      	adds	r4, #1
 800224e:	f899 3000 	ldrb.w	r3, [r9]
 8002252:	b2e4      	uxtb	r4, r4
 8002254:	42a3      	cmp	r3, r4
 8002256:	d1e3      	bne.n	8002220 <os_task_tick+0x1c>
}
 8002258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			task_list[ index ].time++;
 800225c:	688a      	ldr	r2, [r1, #8]
 800225e:	3201      	adds	r2, #1
 8002260:	608a      	str	r2, [r1, #8]
 8002262:	e7e8      	b.n	8002236 <os_task_tick+0x32>
        if ( task_list[ index ].clockId == id ) {
 8002264:	1b19      	subs	r1, r3, r4
 8002266:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800226a:	7d08      	ldrb	r0, [r1, #20]
 800226c:	4550      	cmp	r0, sl
 800226e:	d1e2      	bne.n	8002236 <os_task_tick+0x32>
          if ( task_list[ index ].time <= tickSize ) {
 8002270:	6888      	ldr	r0, [r1, #8]
 8002272:	42b0      	cmp	r0, r6
 8002274:	d80b      	bhi.n	800228e <os_task_tick+0x8a>
            if ( state == WAITING_EVENT_TIMEOUT ) {
 8002276:	2a04      	cmp	r2, #4
    task_list[ tid ].state = READY;
 8002278:	eba3 0204 	sub.w	r2, r3, r4
 800227c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
            task_list[ index ].time = 0;
 8002280:	608f      	str	r7, [r1, #8]
    task->waitSingleEvent = 0;
 8002282:	bf04      	itt	eq
 8002284:	74cf      	strbeq	r7, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 8002286:	754f      	strbeq	r7, [r1, #21]
    task_list[ tid ].state = READY;
 8002288:	f882 8004 	strb.w	r8, [r2, #4]
 800228c:	e7d3      	b.n	8002236 <os_task_tick+0x32>
            task_list[ index ].time -= tickSize;
 800228e:	1b80      	subs	r0, r0, r6
 8002290:	6088      	str	r0, [r1, #8]
 8002292:	e7d0      	b.n	8002236 <os_task_tick+0x32>
 8002294:	20000598 	.word	0x20000598
 8002298:	20000636 	.word	0x20000636

0800229c <os_task_signal_event>:
    for ( index = 0; index != nTasks; index++ ) {
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <os_task_signal_event+0x6c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b38b      	cbz	r3, 8002306 <os_task_signal_event+0x6a>
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80022a2:	2201      	movs	r2, #1
void os_task_signal_event( Evt_t eventId ) {
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	08c4      	lsrs	r4, r0, #3
 80022a8:	f000 0007 	and.w	r0, r0, #7
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80022ac:	fa02 f000 	lsl.w	r0, r2, r0
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <os_task_signal_event+0x70>)
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	b240      	sxtb	r0, r0
 80022b8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80022bc:	f103 011c 	add.w	r1, r3, #28
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022c0:	43c6      	mvns	r6, r0
    task->waitSingleEvent = 0;
 80022c2:	2500      	movs	r5, #0
    task_list[ tid ].state = READY;
 80022c4:	2705      	movs	r7, #5
 80022c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80022ca:	e002      	b.n	80022d2 <os_task_signal_event+0x36>
 80022cc:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 80022ce:	4299      	cmp	r1, r3
 80022d0:	d018      	beq.n	8002304 <os_task_signal_event+0x68>
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 80022d2:	791a      	ldrb	r2, [r3, #4]
 80022d4:	3a03      	subs	r2, #3
 80022d6:	2a01      	cmp	r2, #1
 80022d8:	d8f8      	bhi.n	80022cc <os_task_signal_event+0x30>
 80022da:	eb03 0c04 	add.w	ip, r3, r4
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80022de:	f99c 2015 	ldrsb.w	r2, [ip, #21]
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 80022e2:	4202      	tst	r2, r0
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022e4:	ea06 0e02 	and.w	lr, r6, r2
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 80022e8:	d0f0      	beq.n	80022cc <os_task_signal_event+0x30>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022ea:	f88c e015 	strb.w	lr, [ip, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 80022ee:	7cda      	ldrb	r2, [r3, #19]
 80022f0:	b912      	cbnz	r2, 80022f8 <os_task_signal_event+0x5c>
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 80022f2:	7d5a      	ldrb	r2, [r3, #21]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d1e9      	bne.n	80022cc <os_task_signal_event+0x30>
    task->waitSingleEvent = 0;
 80022f8:	74dd      	strb	r5, [r3, #19]
        task->eventQueue.eventList[ event ] = 0;
 80022fa:	755d      	strb	r5, [r3, #21]
    task_list[ tid ].state = READY;
 80022fc:	711f      	strb	r7, [r3, #4]
 80022fe:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 8002300:	4299      	cmp	r1, r3
 8002302:	d1e6      	bne.n	80022d2 <os_task_signal_event+0x36>
}
 8002304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002306:	4770      	bx	lr
 8002308:	20000636 	.word	0x20000636
 800230c:	20000598 	.word	0x20000598

08002310 <os_task_run>:
void os_task_run( void ) {
 8002310:	b510      	push	{r4, lr}
    os_assert( running_tid < nTasks );
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <os_task_run+0x28>)
 8002314:	4c09      	ldr	r4, [pc, #36]	; (800233c <os_task_run+0x2c>)
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	7823      	ldrb	r3, [r4, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d804      	bhi.n	8002328 <os_task_run+0x18>
 800231e:	f44f 701c 	mov.w	r0, #624	; 0x270
 8002322:	f000 f823 	bl	800236c <os_on_assert>
 8002326:	7823      	ldrb	r3, [r4, #0]
    task_list[ running_tid ].taskproc();
 8002328:	4a05      	ldr	r2, [pc, #20]	; (8002340 <os_task_run+0x30>)
 800232a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    task_list[ running_tid ].taskproc();
 8002336:	4718      	bx	r3
 8002338:	20000636 	.word	0x20000636
 800233c:	20000c54 	.word	0x20000c54
 8002340:	20000598 	.word	0x20000598

08002344 <os_task_internal_state_get>:
    return task_list[ tid ].internal_state;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <os_task_internal_state_get+0x10>)
 8002346:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800234a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 800234e:	88d8      	ldrh	r0, [r3, #6]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000598 	.word	0x20000598

08002358 <os_task_internal_state_set>:
    task_list[ tid ].internal_state = state;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <os_task_internal_state_set+0x10>)
 800235a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800235e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002362:	80d9      	strh	r1, [r3, #6]
}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000598 	.word	0x20000598

0800236c <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 800236c:	4604      	mov	r4, r0
 800236e:	b508      	push	{r3, lr}
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 8002370:	4806      	ldr	r0, [pc, #24]	; (800238c <os_on_assert+0x20>)
 8002372:	f001 fda3 	bl	8003ebc <debug_print>
 8002376:	4620      	mov	r0, r4
 8002378:	f001 fdc0 	bl	8003efc <debug_print_unsigned>
 800237c:	f001 fd24 	bl	8003dc8 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <os_on_assert+0x24>)
 8002382:	801c      	strh	r4, [r3, #0]
    l = l;
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	b292      	uxth	r2, r2
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e7fe      	b.n	800238a <os_on_assert+0x1e>
 800238c:	08005730 	.word	0x08005730
 8002390:	20000632 	.word	0x20000632

08002394 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8002394:	2200      	movs	r2, #0
 8002396:	4b01      	ldr	r3, [pc, #4]	; (800239c <os_event_init+0x8>)
 8002398:	701a      	strb	r2, [r3, #0]
#endif
}
 800239a:	4770      	bx	lr
 800239c:	20000637 	.word	0x20000637

080023a0 <event_create>:
*   myEvent = event_create();
*   @endcode
*       
*		 */
/*********************************************************************************/
Evt_t event_create( void ) {
 80023a0:	b538      	push	{r3, r4, r5, lr}
    #if( N_TOTAL_EVENTS > 0 )
	os_assert( nEvents < N_TOTAL_EVENTS );
 80023a2:	4c09      	ldr	r4, [pc, #36]	; (80023c8 <event_create+0x28>)
 80023a4:	7820      	ldrb	r0, [r4, #0]
 80023a6:	2806      	cmp	r0, #6
 80023a8:	d903      	bls.n	80023b2 <event_create+0x12>
 80023aa:	2053      	movs	r0, #83	; 0x53
 80023ac:	f7ff ffde 	bl	800236c <os_on_assert>
 80023b0:	7820      	ldrb	r0, [r4, #0]

    eventList[ nEvents ].id = nEvents;
    eventList[ nEvents ].signaledByTid = NO_TID;
 80023b2:	25ff      	movs	r5, #255	; 0xff
    eventList[ nEvents ].id = nEvents;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <event_create+0x2c>)
	
	++nEvents;
 80023b6:	1c42      	adds	r2, r0, #1
    eventList[ nEvents ].signaledByTid = NO_TID;
 80023b8:	eb03 0140 	add.w	r1, r3, r0, lsl #1
    eventList[ nEvents ].id = nEvents;
 80023bc:	f803 0010 	strb.w	r0, [r3, r0, lsl #1]
    eventList[ nEvents ].signaledByTid = NO_TID;
 80023c0:	704d      	strb	r5, [r1, #1]
	++nEvents;
 80023c2:	7022      	strb	r2, [r4, #0]

	return nEvents - 1;
    #else
    return 0;
    #endif
}
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
 80023c6:	bf00      	nop
 80023c8:	20000637 	.word	0x20000637
 80023cc:	20000624 	.word	0x20000624

080023d0 <os_signal_event>:
#endif
}


void os_signal_event( Evt_t ev ) {
	lastSignaledEvent = ev;
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <os_signal_event+0x8>)
 80023d2:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 80023d4:	f7ff bf62 	b.w	800229c <os_task_signal_event>
 80023d8:	20000014 	.word	0x20000014

080023dc <os_event_set_signaling_tid>:
}


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <os_event_set_signaling_tid+0xc>)
 80023de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80023e2:	7041      	strb	r1, [r0, #1]
#endif
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000624 	.word	0x20000624

080023ec <__aeabi_drsub>:
 80023ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80023f0:	e002      	b.n	80023f8 <__adddf3>
 80023f2:	bf00      	nop

080023f4 <__aeabi_dsub>:
 80023f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080023f8 <__adddf3>:
 80023f8:	b530      	push	{r4, r5, lr}
 80023fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80023fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002402:	ea94 0f05 	teq	r4, r5
 8002406:	bf08      	it	eq
 8002408:	ea90 0f02 	teqeq	r0, r2
 800240c:	bf1f      	itttt	ne
 800240e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002412:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002416:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800241a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800241e:	f000 80e2 	beq.w	80025e6 <__adddf3+0x1ee>
 8002422:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002426:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800242a:	bfb8      	it	lt
 800242c:	426d      	neglt	r5, r5
 800242e:	dd0c      	ble.n	800244a <__adddf3+0x52>
 8002430:	442c      	add	r4, r5
 8002432:	ea80 0202 	eor.w	r2, r0, r2
 8002436:	ea81 0303 	eor.w	r3, r1, r3
 800243a:	ea82 0000 	eor.w	r0, r2, r0
 800243e:	ea83 0101 	eor.w	r1, r3, r1
 8002442:	ea80 0202 	eor.w	r2, r0, r2
 8002446:	ea81 0303 	eor.w	r3, r1, r3
 800244a:	2d36      	cmp	r5, #54	; 0x36
 800244c:	bf88      	it	hi
 800244e:	bd30      	pophi	{r4, r5, pc}
 8002450:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002454:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002458:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800245c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002460:	d002      	beq.n	8002468 <__adddf3+0x70>
 8002462:	4240      	negs	r0, r0
 8002464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002468:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800246c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002470:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002474:	d002      	beq.n	800247c <__adddf3+0x84>
 8002476:	4252      	negs	r2, r2
 8002478:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800247c:	ea94 0f05 	teq	r4, r5
 8002480:	f000 80a7 	beq.w	80025d2 <__adddf3+0x1da>
 8002484:	f1a4 0401 	sub.w	r4, r4, #1
 8002488:	f1d5 0e20 	rsbs	lr, r5, #32
 800248c:	db0d      	blt.n	80024aa <__adddf3+0xb2>
 800248e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002492:	fa22 f205 	lsr.w	r2, r2, r5
 8002496:	1880      	adds	r0, r0, r2
 8002498:	f141 0100 	adc.w	r1, r1, #0
 800249c:	fa03 f20e 	lsl.w	r2, r3, lr
 80024a0:	1880      	adds	r0, r0, r2
 80024a2:	fa43 f305 	asr.w	r3, r3, r5
 80024a6:	4159      	adcs	r1, r3
 80024a8:	e00e      	b.n	80024c8 <__adddf3+0xd0>
 80024aa:	f1a5 0520 	sub.w	r5, r5, #32
 80024ae:	f10e 0e20 	add.w	lr, lr, #32
 80024b2:	2a01      	cmp	r2, #1
 80024b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80024b8:	bf28      	it	cs
 80024ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80024be:	fa43 f305 	asr.w	r3, r3, r5
 80024c2:	18c0      	adds	r0, r0, r3
 80024c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80024c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80024cc:	d507      	bpl.n	80024de <__adddf3+0xe6>
 80024ce:	f04f 0e00 	mov.w	lr, #0
 80024d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80024d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80024da:	eb6e 0101 	sbc.w	r1, lr, r1
 80024de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80024e2:	d31b      	bcc.n	800251c <__adddf3+0x124>
 80024e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80024e8:	d30c      	bcc.n	8002504 <__adddf3+0x10c>
 80024ea:	0849      	lsrs	r1, r1, #1
 80024ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80024f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80024f4:	f104 0401 	add.w	r4, r4, #1
 80024f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80024fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002500:	f080 809a 	bcs.w	8002638 <__adddf3+0x240>
 8002504:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002508:	bf08      	it	eq
 800250a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800250e:	f150 0000 	adcs.w	r0, r0, #0
 8002512:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002516:	ea41 0105 	orr.w	r1, r1, r5
 800251a:	bd30      	pop	{r4, r5, pc}
 800251c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002520:	4140      	adcs	r0, r0
 8002522:	eb41 0101 	adc.w	r1, r1, r1
 8002526:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800252a:	f1a4 0401 	sub.w	r4, r4, #1
 800252e:	d1e9      	bne.n	8002504 <__adddf3+0x10c>
 8002530:	f091 0f00 	teq	r1, #0
 8002534:	bf04      	itt	eq
 8002536:	4601      	moveq	r1, r0
 8002538:	2000      	moveq	r0, #0
 800253a:	fab1 f381 	clz	r3, r1
 800253e:	bf08      	it	eq
 8002540:	3320      	addeq	r3, #32
 8002542:	f1a3 030b 	sub.w	r3, r3, #11
 8002546:	f1b3 0220 	subs.w	r2, r3, #32
 800254a:	da0c      	bge.n	8002566 <__adddf3+0x16e>
 800254c:	320c      	adds	r2, #12
 800254e:	dd08      	ble.n	8002562 <__adddf3+0x16a>
 8002550:	f102 0c14 	add.w	ip, r2, #20
 8002554:	f1c2 020c 	rsb	r2, r2, #12
 8002558:	fa01 f00c 	lsl.w	r0, r1, ip
 800255c:	fa21 f102 	lsr.w	r1, r1, r2
 8002560:	e00c      	b.n	800257c <__adddf3+0x184>
 8002562:	f102 0214 	add.w	r2, r2, #20
 8002566:	bfd8      	it	le
 8002568:	f1c2 0c20 	rsble	ip, r2, #32
 800256c:	fa01 f102 	lsl.w	r1, r1, r2
 8002570:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002574:	bfdc      	itt	le
 8002576:	ea41 010c 	orrle.w	r1, r1, ip
 800257a:	4090      	lslle	r0, r2
 800257c:	1ae4      	subs	r4, r4, r3
 800257e:	bfa2      	ittt	ge
 8002580:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002584:	4329      	orrge	r1, r5
 8002586:	bd30      	popge	{r4, r5, pc}
 8002588:	ea6f 0404 	mvn.w	r4, r4
 800258c:	3c1f      	subs	r4, #31
 800258e:	da1c      	bge.n	80025ca <__adddf3+0x1d2>
 8002590:	340c      	adds	r4, #12
 8002592:	dc0e      	bgt.n	80025b2 <__adddf3+0x1ba>
 8002594:	f104 0414 	add.w	r4, r4, #20
 8002598:	f1c4 0220 	rsb	r2, r4, #32
 800259c:	fa20 f004 	lsr.w	r0, r0, r4
 80025a0:	fa01 f302 	lsl.w	r3, r1, r2
 80025a4:	ea40 0003 	orr.w	r0, r0, r3
 80025a8:	fa21 f304 	lsr.w	r3, r1, r4
 80025ac:	ea45 0103 	orr.w	r1, r5, r3
 80025b0:	bd30      	pop	{r4, r5, pc}
 80025b2:	f1c4 040c 	rsb	r4, r4, #12
 80025b6:	f1c4 0220 	rsb	r2, r4, #32
 80025ba:	fa20 f002 	lsr.w	r0, r0, r2
 80025be:	fa01 f304 	lsl.w	r3, r1, r4
 80025c2:	ea40 0003 	orr.w	r0, r0, r3
 80025c6:	4629      	mov	r1, r5
 80025c8:	bd30      	pop	{r4, r5, pc}
 80025ca:	fa21 f004 	lsr.w	r0, r1, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	bd30      	pop	{r4, r5, pc}
 80025d2:	f094 0f00 	teq	r4, #0
 80025d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80025da:	bf06      	itte	eq
 80025dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80025e0:	3401      	addeq	r4, #1
 80025e2:	3d01      	subne	r5, #1
 80025e4:	e74e      	b.n	8002484 <__adddf3+0x8c>
 80025e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80025ea:	bf18      	it	ne
 80025ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80025f0:	d029      	beq.n	8002646 <__adddf3+0x24e>
 80025f2:	ea94 0f05 	teq	r4, r5
 80025f6:	bf08      	it	eq
 80025f8:	ea90 0f02 	teqeq	r0, r2
 80025fc:	d005      	beq.n	800260a <__adddf3+0x212>
 80025fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8002602:	bf04      	itt	eq
 8002604:	4619      	moveq	r1, r3
 8002606:	4610      	moveq	r0, r2
 8002608:	bd30      	pop	{r4, r5, pc}
 800260a:	ea91 0f03 	teq	r1, r3
 800260e:	bf1e      	ittt	ne
 8002610:	2100      	movne	r1, #0
 8002612:	2000      	movne	r0, #0
 8002614:	bd30      	popne	{r4, r5, pc}
 8002616:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800261a:	d105      	bne.n	8002628 <__adddf3+0x230>
 800261c:	0040      	lsls	r0, r0, #1
 800261e:	4149      	adcs	r1, r1
 8002620:	bf28      	it	cs
 8002622:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002626:	bd30      	pop	{r4, r5, pc}
 8002628:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800262c:	bf3c      	itt	cc
 800262e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002632:	bd30      	popcc	{r4, r5, pc}
 8002634:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002638:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800263c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	bd30      	pop	{r4, r5, pc}
 8002646:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800264a:	bf1a      	itte	ne
 800264c:	4619      	movne	r1, r3
 800264e:	4610      	movne	r0, r2
 8002650:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002654:	bf1c      	itt	ne
 8002656:	460b      	movne	r3, r1
 8002658:	4602      	movne	r2, r0
 800265a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800265e:	bf06      	itte	eq
 8002660:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002664:	ea91 0f03 	teqeq	r1, r3
 8002668:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800266c:	bd30      	pop	{r4, r5, pc}
 800266e:	bf00      	nop

08002670 <__aeabi_ui2d>:
 8002670:	f090 0f00 	teq	r0, #0
 8002674:	bf04      	itt	eq
 8002676:	2100      	moveq	r1, #0
 8002678:	4770      	bxeq	lr
 800267a:	b530      	push	{r4, r5, lr}
 800267c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002680:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002684:	f04f 0500 	mov.w	r5, #0
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	e750      	b.n	8002530 <__adddf3+0x138>
 800268e:	bf00      	nop

08002690 <__aeabi_i2d>:
 8002690:	f090 0f00 	teq	r0, #0
 8002694:	bf04      	itt	eq
 8002696:	2100      	moveq	r1, #0
 8002698:	4770      	bxeq	lr
 800269a:	b530      	push	{r4, r5, lr}
 800269c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80026a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80026a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80026a8:	bf48      	it	mi
 80026aa:	4240      	negmi	r0, r0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	e73e      	b.n	8002530 <__adddf3+0x138>
 80026b2:	bf00      	nop

080026b4 <__aeabi_f2d>:
 80026b4:	0042      	lsls	r2, r0, #1
 80026b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80026ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80026be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80026c2:	bf1f      	itttt	ne
 80026c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80026c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80026cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80026d0:	4770      	bxne	lr
 80026d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80026d6:	bf08      	it	eq
 80026d8:	4770      	bxeq	lr
 80026da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80026de:	bf04      	itt	eq
 80026e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80026e4:	4770      	bxeq	lr
 80026e6:	b530      	push	{r4, r5, lr}
 80026e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80026ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80026f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80026f4:	e71c      	b.n	8002530 <__adddf3+0x138>
 80026f6:	bf00      	nop

080026f8 <__aeabi_ul2d>:
 80026f8:	ea50 0201 	orrs.w	r2, r0, r1
 80026fc:	bf08      	it	eq
 80026fe:	4770      	bxeq	lr
 8002700:	b530      	push	{r4, r5, lr}
 8002702:	f04f 0500 	mov.w	r5, #0
 8002706:	e00a      	b.n	800271e <__aeabi_l2d+0x16>

08002708 <__aeabi_l2d>:
 8002708:	ea50 0201 	orrs.w	r2, r0, r1
 800270c:	bf08      	it	eq
 800270e:	4770      	bxeq	lr
 8002710:	b530      	push	{r4, r5, lr}
 8002712:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002716:	d502      	bpl.n	800271e <__aeabi_l2d+0x16>
 8002718:	4240      	negs	r0, r0
 800271a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800271e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002722:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002726:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800272a:	f43f aed8 	beq.w	80024de <__adddf3+0xe6>
 800272e:	f04f 0203 	mov.w	r2, #3
 8002732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002736:	bf18      	it	ne
 8002738:	3203      	addne	r2, #3
 800273a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800273e:	bf18      	it	ne
 8002740:	3203      	addne	r2, #3
 8002742:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002746:	f1c2 0320 	rsb	r3, r2, #32
 800274a:	fa00 fc03 	lsl.w	ip, r0, r3
 800274e:	fa20 f002 	lsr.w	r0, r0, r2
 8002752:	fa01 fe03 	lsl.w	lr, r1, r3
 8002756:	ea40 000e 	orr.w	r0, r0, lr
 800275a:	fa21 f102 	lsr.w	r1, r1, r2
 800275e:	4414      	add	r4, r2
 8002760:	e6bd      	b.n	80024de <__adddf3+0xe6>
 8002762:	bf00      	nop

08002764 <__aeabi_d2f>:
 8002764:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002768:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800276c:	bf24      	itt	cs
 800276e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8002772:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002776:	d90d      	bls.n	8002794 <__aeabi_d2f+0x30>
 8002778:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800277c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002780:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002784:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002788:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800278c:	bf08      	it	eq
 800278e:	f020 0001 	biceq.w	r0, r0, #1
 8002792:	4770      	bx	lr
 8002794:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002798:	d121      	bne.n	80027de <__aeabi_d2f+0x7a>
 800279a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800279e:	bfbc      	itt	lt
 80027a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80027a4:	4770      	bxlt	lr
 80027a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80027aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80027ae:	f1c2 0218 	rsb	r2, r2, #24
 80027b2:	f1c2 0c20 	rsb	ip, r2, #32
 80027b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80027ba:	fa20 f002 	lsr.w	r0, r0, r2
 80027be:	bf18      	it	ne
 80027c0:	f040 0001 	orrne.w	r0, r0, #1
 80027c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80027c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80027cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80027d0:	ea40 000c 	orr.w	r0, r0, ip
 80027d4:	fa23 f302 	lsr.w	r3, r3, r2
 80027d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80027dc:	e7cc      	b.n	8002778 <__aeabi_d2f+0x14>
 80027de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80027e2:	d107      	bne.n	80027f4 <__aeabi_d2f+0x90>
 80027e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80027e8:	bf1e      	ittt	ne
 80027ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80027ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80027f2:	4770      	bxne	lr
 80027f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80027f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80027fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <__powidf2>:
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002808:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 800280c:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
 8002810:	4615      	mov	r5, r2
 8002812:	07e2      	lsls	r2, r4, #31
 8002814:	4606      	mov	r6, r0
 8002816:	460f      	mov	r7, r1
 8002818:	bf53      	iteet	pl
 800281a:	f04f 0800 	movpl.w	r8, #0
 800281e:	4680      	movmi	r8, r0
 8002820:	4689      	movmi	r9, r1
 8002822:	f8df 904c 	ldrpl.w	r9, [pc, #76]	; 8002870 <__powidf2+0x6c>
 8002826:	0864      	lsrs	r4, r4, #1
 8002828:	d013      	beq.n	8002852 <__powidf2+0x4e>
 800282a:	463b      	mov	r3, r7
 800282c:	4632      	mov	r2, r6
 800282e:	4630      	mov	r0, r6
 8002830:	4639      	mov	r1, r7
 8002832:	f000 fb03 	bl	8002e3c <__wrap___aeabi_dmul>
 8002836:	07e3      	lsls	r3, r4, #31
 8002838:	4606      	mov	r6, r0
 800283a:	460f      	mov	r7, r1
 800283c:	d5f3      	bpl.n	8002826 <__powidf2+0x22>
 800283e:	4640      	mov	r0, r8
 8002840:	4649      	mov	r1, r9
 8002842:	4632      	mov	r2, r6
 8002844:	463b      	mov	r3, r7
 8002846:	f000 faf9 	bl	8002e3c <__wrap___aeabi_dmul>
 800284a:	0864      	lsrs	r4, r4, #1
 800284c:	4680      	mov	r8, r0
 800284e:	4689      	mov	r9, r1
 8002850:	d1eb      	bne.n	800282a <__powidf2+0x26>
 8002852:	2d00      	cmp	r5, #0
 8002854:	da07      	bge.n	8002866 <__powidf2+0x62>
 8002856:	4642      	mov	r2, r8
 8002858:	464b      	mov	r3, r9
 800285a:	2000      	movs	r0, #0
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <__powidf2+0x6c>)
 800285e:	f000 fad5 	bl	8002e0c <__wrap___aeabi_ddiv>
 8002862:	4680      	mov	r8, r0
 8002864:	4689      	mov	r9, r1
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800286e:	bf00      	nop
 8002870:	3ff00000 	.word	0x3ff00000

08002874 <xchxy>:
.global qfp_fsqrt_fast
.endif

@ exchange r0<->r1, r2<->r3
xchxy:
 push {r0,r2,r14}
 8002874:	b505      	push	{r0, r2, lr}
 mov r0,r1
 8002876:	4608      	mov	r0, r1
 mov r2,r3
 8002878:	461a      	mov	r2, r3
 pop {r1,r3,r15}
 800287a:	bd0a      	pop	{r1, r3, pc}

0800287c <unpackxy>:

@ IEEE single precision floats in r0,r1-> mantissae in r1,r0 exponents in r3,r2 *respectively*
@ trashes r4
unpackxy:
 push {r14}
 800287c:	b500      	push	{lr}
 bl unpackx
 800287e:	f000 f804 	bl	800288a <unpackx>
 bl xchxy
 8002882:	f7ff fff7 	bl	8002874 <xchxy>
 pop {r4}
 8002886:	bc10      	pop	{r4}
 mov r14,r4
 8002888:	46a6      	mov	lr, r4

0800288a <unpackx>:

@ IEEE single in r0-> signed (two's complemennt) mantissa in r0 9Q23 (24 significant bits), signed exponent (bias removed) in r2
@ trashes r4; zero, denormal -> mantissa=+/-1, exponent=-380; Inf, NaN -> mantissa=+/-1, exponent=+640
unpackx:
 lsrs r2,r0,#23 @ save exponent and sign
 800288a:	0dc2      	lsrs	r2, r0, #23
 lsls r0,#9     @ extract mantissa
 800288c:	0240      	lsls	r0, r0, #9
 lsrs r0,#9
 800288e:	0a40      	lsrs	r0, r0, #9
 movs r4,#1
 8002890:	2401      	movs	r4, #1
 lsls r4,#23
 8002892:	05e4      	lsls	r4, r4, #23
 orrs r0,r4     @ reinstate implied leading 1
 8002894:	4320      	orrs	r0, r4
 cmp r2,#255    @ test sign bit
 8002896:	2aff      	cmp	r2, #255	; 0xff
 uxtb r2,r2     @ clear it
 8002898:	b2d2      	uxtb	r2, r2
 bls 1f         @ branch on positive
 800289a:	d900      	bls.n	800289e <unpackx+0x14>
 rsbs r0,#0     @ negate mantissa
 800289c:	4240      	negs	r0, r0
1:
 subs r2,#1
 800289e:	3a01      	subs	r2, #1
 cmp r2,#254    @ zero/denormal/Inf/NaN?
 80028a0:	2afe      	cmp	r2, #254	; 0xfe
 bhs 2f
 80028a2:	d201      	bcs.n	80028a8 <unpackx+0x1e>
 subs r2,#126   @ remove exponent bias: can now be -126..+127
 80028a4:	3a7e      	subs	r2, #126	; 0x7e
 bx r14
 80028a6:	4770      	bx	lr

2:              @ here with special-case values
 cmp r0,#0
 80028a8:	2800      	cmp	r0, #0
 mov r0,r4      @ set mantissa to +1
 80028aa:	4620      	mov	r0, r4
 bpl 3f
 80028ac:	d500      	bpl.n	80028b0 <unpackx+0x26>
 rsbs r0,#0     @ zero/denormal/Inf/NaN: mantissa=+/-1
 80028ae:	4240      	negs	r0, r0
3:
 subs r2,#126   @ zero/denormal: exponent -> -127; Inf, NaN: exponent -> 128
 80028b0:	3a7e      	subs	r2, #126	; 0x7e
 lsls r2,#2     @ zero/denormal: exponent -> -508; Inf, NaN: exponent -> 512
 80028b2:	0092      	lsls	r2, r2, #2
 adds r2,#128   @ zero/denormal: exponent -> -380; Inf, NaN: exponent -> 640
 80028b4:	3280      	adds	r2, #128	; 0x80
 bx r14
 80028b6:	4770      	bx	lr

080028b8 <packx>:

@ normalise and pack signed mantissa in r0 nominally 3Q29, signed exponent in r2-> IEEE single in r0
@ trashes r4, preserves r1,r3
@ r5: "sticky bits", must be zero iff all result bits below r0 are zero for correct rounding
packx:
 lsrs r4,r0,#31 @ save sign bit
 80028b8:	0fc4      	lsrs	r4, r0, #31
 lsls r4,r4,#31 @ sign now in b31
 80028ba:	07e4      	lsls	r4, r4, #31
 bpl 2f         @ skip if positive
 80028bc:	d504      	bpl.n	80028c8 <packx0+0x2>
 cmp r5,#0
 80028be:	2d00      	cmp	r5, #0
 beq 11f
 80028c0:	d000      	beq.n	80028c4 <packx+0xc>
 adds r0,#1     @ fiddle carry in to following rsb if sticky bits are non-zero
 80028c2:	3001      	adds	r0, #1
11:
 rsbs r0,#0     @ can now treat r0 as unsigned
 80028c4:	4240      	negs	r0, r0

080028c6 <packx0>:
packx0:
 bmi 3f         @ catch r0=0x80000000 case
 80028c6:	d403      	bmi.n	80028d0 <packx0+0xa>
2:
 subs r2,#1     @ normalisation loop
 80028c8:	3a01      	subs	r2, #1
 adds r0,r0
 80028ca:	1800      	adds	r0, r0, r0
 beq 1f         @ zero? special case
 80028cc:	d012      	beq.n	80028f4 <packx0+0x2e>
 bpl 2b         @ normalise so leading "1" in bit 31
 80028ce:	d5fb      	bpl.n	80028c8 <packx0+0x2>
3:
 adds r2,#129   @ (mis-)offset exponent
 80028d0:	3281      	adds	r2, #129	; 0x81
 bne 12f        @ special case: highest denormal can round to lowest normal
 80028d2:	d101      	bne.n	80028d8 <packx0+0x12>
 adds r0,#0x80  @ in special case, need to add 256 to r0 for rounding
 80028d4:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required
 80028d6:	d205      	bcs.n	80028e4 <packx0+0x1e>
12:
 adds r0,#0x80  @ rounding
 80028d8:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required (and result is even so can ignore sticky bits)
 80028da:	d203      	bcs.n	80028e4 <packx0+0x1e>
 cmp r5,#0
 80028dc:	2d00      	cmp	r5, #0
 beq 7f         @ sticky bits zero?
 80028de:	d00f      	beq.n	8002900 <packx0+0x3a>
8:
 lsls r0,#1     @ remove leading 1
 80028e0:	0040      	lsls	r0, r0, #1
9:
 subs r2,#1     @ compensate exponent on this path
 80028e2:	3a01      	subs	r2, #1
4:
 cmp r2,#254
 80028e4:	2afe      	cmp	r2, #254	; 0xfe
 bge 5f         @ overflow?
 80028e6:	da06      	bge.n	80028f6 <packx0+0x30>
 adds r2,#1     @ correct exponent offset
 80028e8:	3201      	adds	r2, #1
 ble 10f        @ denormal/underflow?
 80028ea:	dd07      	ble.n	80028fc <packx0+0x36>
 lsrs r0,#9     @ align mantissa
 80028ec:	0a40      	lsrs	r0, r0, #9
 lsls r2,#23    @ align exponent
 80028ee:	05d2      	lsls	r2, r2, #23
 orrs r0,r2     @ assemble exponent and mantissa
 80028f0:	4310      	orrs	r0, r2
6:
 orrs r0,r4     @ apply sign
 80028f2:	4320      	orrs	r0, r4
1:
 bx r14
 80028f4:	4770      	bx	lr

5:
 movs r0,#0xff  @ create infinity
 80028f6:	20ff      	movs	r0, #255	; 0xff
 lsls r0,#23
 80028f8:	05c0      	lsls	r0, r0, #23
 b 6b
 80028fa:	e7fa      	b.n	80028f2 <packx0+0x2c>

10:
 movs r0,#0     @ create zero
 80028fc:	2000      	movs	r0, #0
 bx r14
 80028fe:	4770      	bx	lr

7:              @ sticky bit rounding case
 lsls r5,r0,#24 @ check bottom 8 bits of r0
 8002900:	0605      	lsls	r5, r0, #24
 bne 8b         @ in rounding-tie case?
 8002902:	d1ed      	bne.n	80028e0 <packx0+0x1a>
 lsrs r0,#9     @ ensure even result
 8002904:	0a40      	lsrs	r0, r0, #9
 lsls r0,#10
 8002906:	0280      	lsls	r0, r0, #10
 b 9b
 8002908:	e7eb      	b.n	80028e2 <packx0+0x1c>

0800290a <unpackxyalign>:

@ unpack two arguments (r0,r1) and shift one down to have common exponent, returned in r2; note that arguments are exchanged
@ sticky bits shifted off bottom of smaller argument in r5
@ following code is unnecessarily general for fadd, but is shared with atan2
unpackxyalign:
 push {r14}
 800290a:	b500      	push	{lr}
 bl unpackxy
 800290c:	f7ff ffb6 	bl	800287c <unpackxy>
 lsls r0,r0,#6  @ Q29
 8002910:	0180      	lsls	r0, r0, #6
 lsls r1,r1,#6  @ Q29
 8002912:	0189      	lsls	r1, r1, #6
 subs r4,r2,r3  @ calculate shift
 8002914:	1ad4      	subs	r4, r2, r3
 bge 1f         @ x>=y?
 8002916:	da07      	bge.n	8002928 <unpackxyalign+0x1e>
 mov r2,r3      @ no: take common exponent from y
 8002918:	461a      	mov	r2, r3
 mov r5,r0      @ potential sticky bits from x
 800291a:	4605      	mov	r5, r0
 rsbs r4,#0     @ make shift positive
 800291c:	4264      	negs	r4, r4
 asrs r0,r4
 800291e:	4120      	asrs	r0, r4
 cmp r4,#32
 8002920:	2c20      	cmp	r4, #32
 blo 2f
 8002922:	d307      	bcc.n	8002934 <unpackxyalign+0x2a>
 movs r0,#0    @ large shift, so all bits are sticky and result is zero
 8002924:	2000      	movs	r0, #0
 pop {r15}
 8002926:	bd00      	pop	{pc}
1:
 mov r5,r1     @ common exponent from x; potential sticky bits from y
 8002928:	460d      	mov	r5, r1
 asrs r1,r4
 800292a:	4121      	asrs	r1, r4
 cmp r4,#32
 800292c:	2c20      	cmp	r4, #32
 blo 2f
 800292e:	d301      	bcc.n	8002934 <unpackxyalign+0x2a>
 movs r1,#0    @ large shift, so all bits are sticky and result is zero
 8002930:	2100      	movs	r1, #0
 pop {r15}
 8002932:	bd00      	pop	{pc}
2:
 rsbs r4,#0
 8002934:	4264      	negs	r4, r4
 adds r4,#32
 8002936:	3420      	adds	r4, #32
 lsls r5,r4    @ extract sticky bits
 8002938:	40a5      	lsls	r5, r4
 pop {r15}
 800293a:	bd00      	pop	{pc}

0800293c <qfp_fsub>:

.thumb_func
qfp_fsub:
 movs r2,#1    @ subtract: flip sign bit of second argument and fall through to fadd
 800293c:	2201      	movs	r2, #1
 lsls r2,#31
 800293e:	07d2      	lsls	r2, r2, #31
 eors r1,r2
 8002940:	4051      	eors	r1, r2

08002942 <qfp_fadd>:
.thumb_func
qfp_fadd:
 push {r4,r5,r14}
 8002942:	b530      	push	{r4, r5, lr}
 bl unpackxyalign
 8002944:	f7ff ffe1 	bl	800290a <unpackxyalign>
 adds r0,r1    @ do addition
 8002948:	1840      	adds	r0, r0, r1
 bne 2f        @ not in Inf-Inf case?
 800294a:	d103      	bne.n	8002954 <packret>
 cmp r2,#200
 800294c:	2ac8      	cmp	r2, #200	; 0xc8
 blt 2f
 800294e:	db01      	blt.n	8002954 <packret>
 movs r0,#1
 8002950:	2001      	movs	r0, #1
 lsls r0,#29   @ for Inf-Inf, set mantissa to +1 to prevent zero result
 8002952:	0740      	lsls	r0, r0, #29

08002954 <packret>:
2:
packret:       @ common return point: "pack and return"
 bl packx
 8002954:	f7ff ffb0 	bl	80028b8 <packx>
 pop {r4,r5,r15}
 8002958:	bd30      	pop	{r4, r5, pc}

0800295a <mul0>:

@ signed multiply r0 1Q23 by r1 4Q23, result in r0 7Q25, sticky bits in r5
@ trashes r3,r4
mul0:
 uxth r3,r0      @ Q23
 800295a:	b283      	uxth	r3, r0
 asrs r4,r1,#16  @ Q7
 800295c:	140c      	asrs	r4, r1, #16
 muls r3,r4      @ L*H, Q30 signed
 800295e:	4363      	muls	r3, r4
 asrs r4,r0,#16  @ Q7
 8002960:	1404      	asrs	r4, r0, #16
 uxth r5,r1      @ Q23
 8002962:	b28d      	uxth	r5, r1
 muls r4,r5      @ H*L, Q30 signed
 8002964:	436c      	muls	r4, r5
 adds r3,r4      @ sum of middle partial products
 8002966:	191b      	adds	r3, r3, r4
 uxth r4,r0
 8002968:	b284      	uxth	r4, r0
 muls r4,r5      @ L*L, Q46 unsigned
 800296a:	436c      	muls	r4, r5
 lsls r5,r4,#16  @ initialise sticky bits from low half of low partial product
 800296c:	0425      	lsls	r5, r4, #16
 lsrs r4,#16     @ Q25
 800296e:	0c24      	lsrs	r4, r4, #16
 adds r3,r4      @ add high half of low partial product to sum of middle partial products
 8002970:	191b      	adds	r3, r3, r4
                 @ (cannot generate carry by limits on input arguments)
 asrs r0,#16     @ Q7
 8002972:	1400      	asrs	r0, r0, #16
 asrs r1,#16     @ Q7
 8002974:	1409      	asrs	r1, r1, #16
 muls r0,r1      @ H*H, Q14 signed
 8002976:	4348      	muls	r0, r1
 lsls r0,#11     @ high partial product Q25
 8002978:	02c0      	lsls	r0, r0, #11
 lsls r1,r3,#27  @ sticky
 800297a:	06d9      	lsls	r1, r3, #27
 orrs r5,r1      @ collect further sticky bits
 800297c:	430d      	orrs	r5, r1
 asrs r1,r3,#5   @ middle partial products Q25
 800297e:	1159      	asrs	r1, r3, #5
 adds r0,r1      @ final result
 8002980:	1840      	adds	r0, r0, r1
 bx r14
 8002982:	4770      	bx	lr

08002984 <qfp_fcmp>:

.thumb_func
qfp_fcmp:
 movs r2,#1      @ initialise result
 8002984:	2201      	movs	r2, #1
 lsls r3,r2,#31  @ r3=0x80000000
 8002986:	07d3      	lsls	r3, r2, #31
 tst r0,r3       @ check sign of first argument
 8002988:	4218      	tst	r0, r3
 beq 1f
 800298a:	d000      	beq.n	800298e <qfp_fcmp+0xa>
 subs r0,r3,r0   @ convert to 2's complement form for direct comparison
 800298c:	1a18      	subs	r0, r3, r0
1:
 tst r1,r3       @ repeat for second argument
 800298e:	4219      	tst	r1, r3
 beq 2f
 8002990:	d000      	beq.n	8002994 <qfp_fcmp+0x10>
 subs r1,r3,r1
 8002992:	1a59      	subs	r1, r3, r1
2:
 subs r0,r1     @ perform comparison
 8002994:	1a40      	subs	r0, r0, r1
 beq 4f         @ equal? return 0
 8002996:	d002      	beq.n	800299e <qfp_fcmp+0x1a>
 bgt 3f         @ r0>r1? return +1
 8002998:	dc00      	bgt.n	800299c <qfp_fcmp+0x18>
 rsbs r2,#0     @ r0<r1: return -1
 800299a:	4252      	negs	r2, r2
3:
 mov r0,r2
 800299c:	4610      	mov	r0, r2
4:
 bx r14
 800299e:	4770      	bx	lr

080029a0 <qfp_fmul>:

.thumb_func
qfp_fmul:
 push {r4,r5,r14}
 80029a0:	b530      	push	{r4, r5, lr}
 bl unpackxy
 80029a2:	f7ff ff6b 	bl	800287c <unpackxy>
 add r2,r3      @ sum exponents
 80029a6:	441a      	add	r2, r3
 adds r2,#4     @ adjust exponent for pack which expects Q29
 80029a8:	3204      	adds	r2, #4

080029aa <fmul0>:
fmul0:
 bl mul0
 80029aa:	f7ff ffd6 	bl	800295a <mul0>
 b packret
 80029ae:	e7d1      	b.n	8002954 <packret>

080029b0 <qfp_fdiv>:

.thumb_func
qfp_fdiv:
 push {r4,r5,r14}
 80029b0:	b530      	push	{r4, r5, lr}

080029b2 <fdiv_n>:
fdiv_n:
 bl unpackxy
 80029b2:	f7ff ff63 	bl	800287c <unpackxy>
 movs r5,#1      @ result cannot fall exactly half-way between two representable numbers (exercise for reader - note that
 80029b6:	2501      	movs	r5, #1
                 @ we do not handle denormals) so there will always be sticky bits
 cmp r0,#0       @ check divisor sign
 80029b8:	2800      	cmp	r0, #0
 bpl 1f
 80029ba:	d501      	bpl.n	80029c0 <fdiv_n+0xe>
 rsbs r0,#0      @ ensure divisor positive
 80029bc:	4240      	negs	r0, r0
 rsbs r1,#0      @ preserve sign of result
 80029be:	4249      	negs	r1, r1
1:
 movs r4,#0
 80029c0:	2400      	movs	r4, #0
 cmp r1,#0       @ check sign of dividend
 80029c2:	2900      	cmp	r1, #0
 bpl 2f
 80029c4:	d501      	bpl.n	80029ca <fdiv_n+0x18>
 rsbs r1,#0      @ result will be negative
 80029c6:	4249      	negs	r1, r1
 mvns r4,r4      @ save sign as 0x00000000 or 0xffffffff
 80029c8:	43e4      	mvns	r4, r4
2:               @ now do unsigned division on unpacked values {r1,r3}/{r0,r2}
 cmp r3,#200     @ dividend is an infinity? return it
 80029ca:	2bc8      	cmp	r3, #200	; 0xc8
 bge 3f
 80029cc:	da0e      	bge.n	80029ec <infret+0x2>
 rsbs r2,#0
 80029ce:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero? return infinity
 80029d0:	2ac8      	cmp	r2, #200	; 0xc8
 bge 3f
 80029d2:	da0b      	bge.n	80029ec <infret+0x2>
 adds r2,r3      @ difference of exponents
 80029d4:	18d2      	adds	r2, r2, r3
 movs r3,#0x40   @ termination marker (calculate enough bits to do rounding correctly)
 80029d6:	2340      	movs	r3, #64	; 0x40
2:               @ division loop
 subs r1,r0      @ trial subtraction
 80029d8:	1a09      	subs	r1, r1, r0
 bcs 1f
 80029da:	d200      	bcs.n	80029de <fdiv_n+0x2c>
 add r1,r0       @ restore if failed
 80029dc:	4401      	add	r1, r0
1:
 adcs r3,r3      @ shift in result bit
 80029de:	415b      	adcs	r3, r3
 add r1,r1       @ shift up dividend
 80029e0:	4409      	add	r1, r1
 bcc 2b          @ loop until marker appears in carry
 80029e2:	d3f9      	bcc.n	80029d8 <fdiv_n+0x26>
 lsls r0,r3,#4   @ align for packing
 80029e4:	0118      	lsls	r0, r3, #4
4:
 eors r0,r4      @ apply sign
 80029e6:	4060      	eors	r0, r4
 b packret
 80029e8:	e7b4      	b.n	8002954 <packret>

080029ea <infret>:
infret:
 movs r4,#0
 80029ea:	2400      	movs	r4, #0
3:
 mov r0,r1
 80029ec:	4608      	mov	r0, r1
 movs r2,#255    @ return infinity
 80029ee:	22ff      	movs	r2, #255	; 0xff
 b 4b
 80029f0:	e7f9      	b.n	80029e6 <fdiv_n+0x34>

080029f2 <qfp_fdiv_fast>:
@ cases the value is known to be very close to an integer (usually 1) and so the bits of greater significance do not need
@ to be stored.
@ The reciprocal calculation has been tested for all possible input mantissa values.
.thumb_func
qfp_fdiv_fast:
 push {r4,r5,r14}
 80029f2:	b530      	push	{r4, r5, lr}

080029f4 <fdiv_fast_n>:
fdiv_fast_n:
 bl unpackxy
 80029f4:	f7ff ff42 	bl	800287c <unpackxy>
 cmp r0,#0
 80029f8:	2800      	cmp	r0, #0
 bpl 1f
 80029fa:	d501      	bpl.n	8002a00 <fdiv_fast_n+0xc>
 rsbs r0,#0
 80029fc:	4240      	negs	r0, r0
 rsbs r1,#0      @ ensure divisor positive
 80029fe:	4249      	negs	r1, r1
1:
 cmp r3,#200
 8002a00:	2bc8      	cmp	r3, #200	; 0xc8
 bge infret      @ dividend is an infinity? return it
 8002a02:	daf2      	bge.n	80029ea <infret>
 rsbs r2,#0
 8002a04:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero?
 8002a06:	2ac8      	cmp	r2, #200	; 0xc8
 bge infret      @ return infinity
 8002a08:	daef      	bge.n	80029ea <infret>
 adds r2,r3      @ difference of exponents
 8002a0a:	18d2      	adds	r2, r2, r3
 adr r4,rcpapp-8 @ the first 8 elements of the table are never accessed because of the mantissa's leading 1
 8002a0c:	a423      	add	r4, pc, #140	; (adr r4, 8002a9c <qfp_fsqrt_fast+0x5a>)
 lsrs r3,r0,#20  @ y Q23; y>>20 Q7
 8002a0e:	0d03      	lsrs	r3, r0, #20
 ldrb r4,[r4,r3] @ m=rcpapp[(y>>20)&7]; // Q8, .5<m<1
 8002a10:	5ce4      	ldrb	r4, [r4, r3]

 lsls r3,r4,#2   @ m<<2         // Q10  first Newton-Raphson iteration
 8002a12:	00a3      	lsls	r3, r4, #2
 muls r3,r0      @ s=y*(m<<2);  // Q33
 8002a14:	4343      	muls	r3, r0
 lsls r4,#8      @ m<<=8;       // Q16
 8002a16:	0224      	lsls	r4, r4, #8
 asrs r3,#21     @ s>>=21;      // Q12
 8002a18:	155b      	asrs	r3, r3, #21
 muls r3,r4      @ s*=m;        // Q28
 8002a1a:	4363      	muls	r3, r4
 asrs r3,#12     @ s>>=12;      // Q16
 8002a1c:	131b      	asrs	r3, r3, #12
 subs r4,r3      @ m=m-s;       // Q16
 8002a1e:	1ae4      	subs	r4, r4, r3

 mov r3,r4       @ s=y*m        // Q39 second Newton-Raphson iteration
 8002a20:	4623      	mov	r3, r4
 muls r4,r0      @ ...
 8002a22:	4344      	muls	r4, r0
 asrs r4,#16     @ s>>=16;      // Q23
 8002a24:	1424      	asrs	r4, r4, #16
 muls r4,r3      @ s*=m;        // Q39
 8002a26:	435c      	muls	r4, r3
 lsls r3,#8      @ m<<=8;       // Q24
 8002a28:	021b      	lsls	r3, r3, #8
 asrs r4,#15     @ s>>=15;      // Q24
 8002a2a:	13e4      	asrs	r4, r4, #15
 subs r3,r4      @ m=m-s;       // Q24
 8002a2c:	1b1b      	subs	r3, r3, r4

 lsls r4,r3,#7   @ \/ s=y*m;    // Q47 third Newton-Raphson iteration
 8002a2e:	01dc      	lsls	r4, r3, #7
 muls r3,r0      @ /\ m<<=7;    // Q31
 8002a30:	4343      	muls	r3, r0
 asrs r3,#15     @ s>>=15;      // Q32
 8002a32:	13db      	asrs	r3, r3, #15
 lsrs r0,r4,#16  @ s*=(m>>16);  // Q47
 8002a34:	0c20      	lsrs	r0, r4, #16
 muls r3,r0      @ ...
 8002a36:	4343      	muls	r3, r0
 asrs r3,#16     @ s>>=16;      // Q31
 8002a38:	141b      	asrs	r3, r3, #16
 subs r0,r4,r3   @ m=m-s;       // Q31
 8002a3a:	1ae0      	subs	r0, r4, r3

08002a3c <div0>:
div0:
 adds r0,#7      @ rounding; reduce systematic error
 8002a3c:	3007      	adds	r0, #7
 lsrs r0,#4      @ Q27
 8002a3e:	0900      	lsrs	r0, r0, #4
 b fmul0         @ drop into multiplication code to calculate result
 8002a40:	e7b3      	b.n	80029aa <fmul0>

08002a42 <qfp_fsqrt_fast>:
@ Again, the fixed-point calculation is carefully implemented to preserve accuracy, and similar comments to those
@ made above on the fast division routine apply.
@ The reciprocal square root calculation has been tested for all possible (possibly shifted) input mantissa values.
.thumb_func
qfp_fsqrt_fast:
 push {r4,r5,r14}
 8002a42:	b530      	push	{r4, r5, lr}
 bl unpackx
 8002a44:	f7ff ff21 	bl	800288a <unpackx>
 movs r1,r0
 8002a48:	0001      	movs	r1, r0
 bmi infret       @ negative? return -Inf
 8002a4a:	d4ce      	bmi.n	80029ea <infret>
 asrs r0,r2,#1    @ check LSB of exponent
 8002a4c:	1050      	asrs	r0, r2, #1
 bcc 1f
 8002a4e:	d300      	bcc.n	8002a52 <qfp_fsqrt_fast+0x10>
 lsls r1,#1       @ was odd: double mantissa; mantissa y now 1..4 Q23
 8002a50:	0049      	lsls	r1, r1, #1
1:
 adds r2,#4       @ correction for packing
 8002a52:	3204      	adds	r2, #4
 adr r4,rsqrtapp-4@ first four table entries are never accessed because of the mantissa's leading 1
 8002a54:	a414      	add	r4, pc, #80	; (adr r4, 8002aa8 <rcpapp+0x4>)
 lsrs r3,r1,#21   @ y>>21 Q2
 8002a56:	0d4b      	lsrs	r3, r1, #21
 ldrb r4,[r4,r3]  @ initial approximation to reciprocal square root m Q8
 8002a58:	5ce4      	ldrb	r4, [r4, r3]

 lsrs r0,r1,#7    @ y>>7             // Q16 first Newton-Raphson iteration
 8002a5a:	09c8      	lsrs	r0, r1, #7
 muls r0,r4       @ m*y
 8002a5c:	4360      	muls	r0, r4
 muls r0,r4       @ s=m*y*y          // Q32
 8002a5e:	4360      	muls	r0, r4
 asrs r0,#12      @ s>>12
 8002a60:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ m*s              // Q28
 8002a62:	4360      	muls	r0, r4
 asrs r0,#13      @ m*s              // Q15
 8002a64:	1340      	asrs	r0, r0, #13
 lsls r4,#8       @ m                // Q16
 8002a66:	0224      	lsls	r4, r4, #8
 subs r4,r0       @ m=(m<<8)-(s>>13) // Q16-Q15/2 -> Q16
 8002a68:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // second Newton-Raphson iteration
 8002a6a:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002a6c:	4340      	muls	r0, r0
 lsrs r0,#16      @ u>>16            // Q16
 8002a6e:	0c00      	lsrs	r0, r0, #16
 lsrs r3,r1,#7    @ y>>7             // Q16
 8002a70:	09cb      	lsrs	r3, r1, #7
 muls r0,r3       @ s=u*(y>>7)       // Q32
 8002a72:	4358      	muls	r0, r3
 asrs r0,#12      @ s>>12            // Q20
 8002a74:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ s*m              // Q36
 8002a76:	4360      	muls	r0, r4
 asrs r0,#21      @ s*m              // Q15
 8002a78:	1540      	asrs	r0, r0, #21
 subs r4,r0       @ m=m-s            // Q16-Q15/2
 8002a7a:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // third Newton-Raphson iteration
 8002a7c:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002a7e:	4340      	muls	r0, r0
 lsrs r3,r0,#12   @ now multiply u and y in two parts: u>>12
 8002a80:	0b03      	lsrs	r3, r0, #12
 muls r3,r1       @ first partial product (u>>12)*y Q43
 8002a82:	434b      	muls	r3, r1
 lsls r0,#20
 8002a84:	0500      	lsls	r0, r0, #20
 lsrs r0,#20      @ u&0xfff
 8002a86:	0d00      	lsrs	r0, r0, #20
 lsrs r5,r1,#12   @ y>>12
 8002a88:	0b0d      	lsrs	r5, r1, #12
 muls r0,r5       @ second partial product (u&0xfff)*(y>>12) Q43
 8002a8a:	4368      	muls	r0, r5
 add r0,r3        @ s=u*y            // Q43
 8002a8c:	4418      	add	r0, r3
 asrs r0,#15      @ s>>15            // Q28
 8002a8e:	13c0      	asrs	r0, r0, #15
 muls r0,r4       @ (s>>15)*m        // Q44
 8002a90:	4360      	muls	r0, r4
 lsls r4,#13      @ m<<13            // Q29
 8002a92:	0364      	lsls	r4, r4, #13
 asrs r0,#16      @ s>>16            // Q28
 8002a94:	1400      	asrs	r0, r0, #16
 subs r0,r4,r0    @                  // Q29-Q28/2
 8002a96:	1a20      	subs	r0, r4, r0

 asrs r2,#1       @ halve exponent
 8002a98:	1052      	asrs	r2, r2, #1
 bcc div0         @ was y shifted?
 8002a9a:	d3cf      	bcc.n	8002a3c <div0>
 lsrs r0,#1
 8002a9c:	0840      	lsrs	r0, r0, #1
 lsls r1,#1       @ shift y back
 8002a9e:	0049      	lsls	r1, r1, #1
 b div0           @ round and complete with multiplication
 8002aa0:	e7cc      	b.n	8002a3c <div0>
 8002aa2:	46c0      	nop			; (mov r8, r8)

08002aa4 <rcpapp>:
 8002aa4:	b2c3d8f1 	.word	0xb2c3d8f1
 8002aa8:	848d98a4 	.word	0x848d98a4

08002aac <rsqrtapp>:
 8002aac:	bbc9daf1 	.word	0xbbc9daf1
 8002ab0:	979ea6b0 	.word	0x979ea6b0
 8002ab4:	82868b91 	.word	0x82868b91

08002ab8 <qfp_float2int>:
.if include_conversions

@ convert float to signed int, rounding towards -Inf, clamping
.thumb_func
qfp_float2int:
 movs r1,#0      @ fall through
 8002ab8:	2100      	movs	r1, #0

08002aba <qfp_float2fix>:

@ convert float in r0 to signed fixed point in r0, clamping
.thumb_func
qfp_float2fix:
 push {r4,r14}
 8002aba:	b510      	push	{r4, lr}
 bl unpackx
 8002abc:	f7ff fee5 	bl	800288a <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002ac0:	440a      	add	r2, r1
 subs r2,#23     @ r2 is now amount of left shift required
 8002ac2:	3a17      	subs	r2, #23
 blt 1f          @ requires right shift?
 8002ac4:	db07      	blt.n	8002ad6 <qfp_float2fix+0x1c>
 cmp r2,#7       @ overflow?
 8002ac6:	2a07      	cmp	r2, #7
 ble 4f
 8002ac8:	dd17      	ble.n	8002afa <qfp_float2ufix+0x16>
3:               @ overflow
 asrs r1,r0,#31  @ +ve:0 -ve:0xffffffff
 8002aca:	17c1      	asrs	r1, r0, #31
 mvns r1,r1      @ +ve:0xffffffff -ve:0
 8002acc:	43c9      	mvns	r1, r1
 movs r0,#1
 8002ace:	2001      	movs	r0, #1
 lsls r0,#31
 8002ad0:	07c0      	lsls	r0, r0, #31
5:
 eors r0,r1      @ +ve:0x7fffffff -ve:0x80000000 (unsigned path: 0xffffffff)
 8002ad2:	4048      	eors	r0, r1
 pop {r4,r15}
 8002ad4:	bd10      	pop	{r4, pc}
1:
 rsbs r2,#0      @ right shift for r0, >0
 8002ad6:	4252      	negs	r2, r2
 cmp r2,#32
 8002ad8:	2a20      	cmp	r2, #32
 blt 2f          @ more than 32 bits of right shift?
 8002ada:	db00      	blt.n	8002ade <qfp_float2fix+0x24>
 movs r2,#32
 8002adc:	2220      	movs	r2, #32
2:
 asrs r0,r0,r2
 8002ade:	4110      	asrs	r0, r2
 pop {r4,r15}
 8002ae0:	bd10      	pop	{r4, pc}

08002ae2 <qfp_float2uint>:

@ unsigned version
.thumb_func
qfp_float2uint:
 movs r1,#0      @ fall through
 8002ae2:	2100      	movs	r1, #0

08002ae4 <qfp_float2ufix>:
.thumb_func
qfp_float2ufix:
 push {r4,r14}
 8002ae4:	b510      	push	{r4, lr}
 bl unpackx
 8002ae6:	f7ff fed0 	bl	800288a <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002aea:	440a      	add	r2, r1
 movs r1,r0
 8002aec:	0001      	movs	r1, r0
 bmi 5b          @ negative? return zero
 8002aee:	d4f0      	bmi.n	8002ad2 <qfp_float2fix+0x18>
 subs r2,#23     @ r2 is now amount of left shift required
 8002af0:	3a17      	subs	r2, #23
 blt 1b          @ requires right shift?
 8002af2:	dbf0      	blt.n	8002ad6 <qfp_float2fix+0x1c>
 mvns r1,r0      @ ready to return 0xffffffff
 8002af4:	43c1      	mvns	r1, r0
 cmp r2,#8       @ overflow?
 8002af6:	2a08      	cmp	r2, #8
 bgt 5b
 8002af8:	dceb      	bgt.n	8002ad2 <qfp_float2fix+0x18>
4:
 lsls r0,r0,r2   @ result fits, left shifted
 8002afa:	4090      	lsls	r0, r2
 pop {r4,r15}
 8002afc:	bd10      	pop	{r4, pc}

08002afe <qfp_int2float>:

@ convert signed int to float, rounding
.thumb_func
qfp_int2float:
 movs r1,#0      @ fall through
 8002afe:	2100      	movs	r1, #0

08002b00 <qfp_fix2float>:

@ convert signed fix to float, rounding; number of r0 bits after point in r1
.thumb_func
qfp_fix2float:
 push {r4,r5,r14}
 8002b00:	b530      	push	{r4, r5, lr}
1:
 movs r2,#29
 8002b02:	221d      	movs	r2, #29
 subs r2,r1      @ fix exponent
 8002b04:	1a52      	subs	r2, r2, r1

08002b06 <packretns>:
packretns:       @ pack and return, sticky bits=0
 movs r5,#0
 8002b06:	2500      	movs	r5, #0
 b packret
 8002b08:	e724      	b.n	8002954 <packret>

08002b0a <qfp_uint2float>:

@ unsigned version
.thumb_func
qfp_uint2float:
 movs r1,#0      @ fall through
 8002b0a:	2100      	movs	r1, #0

08002b0c <qfp_ufix2float>:
.thumb_func
qfp_ufix2float:
 push {r4,r5,r14}
 8002b0c:	b530      	push	{r4, r5, lr}
 cmp r0,#0
 8002b0e:	2800      	cmp	r0, #0
 bge 1b          @ treat <2^31 as signed
 8002b10:	daf7      	bge.n	8002b02 <qfp_fix2float+0x2>
 movs r2,#30
 8002b12:	221e      	movs	r2, #30
 subs r2,r1      @ fix exponent
 8002b14:	1a52      	subs	r2, r2, r1
 lsls r5,r0,#31  @ one sticky bit
 8002b16:	07c5      	lsls	r5, r0, #31
 lsrs r0,#1
 8002b18:	0840      	lsrs	r0, r0, #1
 b packret
 8002b1a:	e71b      	b.n	8002954 <packret>

08002b1c <cordic_start>:
@ r3: coefficient pointer
@ r4,r8: m
@ r5: i (shift)

cordic_start: @ initialisation
 mov r7,r8
 8002b1c:	4647      	mov	r7, r8
 push {r7}
 8002b1e:	b480      	push	{r7}
 movs r5,#0   @ initial shift=0
 8002b20:	2500      	movs	r5, #0
 mov r8,r4
 8002b22:	46a0      	mov	r8, r4
 b 5f
 8002b24:	e00d      	b.n	8002b42 <cordic_rstep+0x16>

08002b26 <cordic_vstep>:

cordic_vstep: @ one step of algorithm in vector mode
 cmp r1,#0    @ check sign of y
 8002b26:	2900      	cmp	r1, #0
 bgt 4f
 8002b28:	dc02      	bgt.n	8002b30 <cordic_rstep+0x4>
 b 1f
 8002b2a:	e005      	b.n	8002b38 <cordic_rstep+0xc>

08002b2c <cordic_rstep>:
cordic_rstep: @ one step of algorithm in rotation mode
 cmp r2,#0    @ check sign of angle
 8002b2c:	2a00      	cmp	r2, #0
 bge 1f
 8002b2e:	da03      	bge.n	8002b38 <cordic_rstep+0xc>
4:
 subs r1,r6   @ negative rotation: y=y-(x>>i)
 8002b30:	1b89      	subs	r1, r1, r6
 rsbs r7,#0
 8002b32:	427f      	negs	r7, r7
 adds r2,r4   @ accumulate angle
 8002b34:	1912      	adds	r2, r2, r4
 b 2f
 8002b36:	e001      	b.n	8002b3c <cordic_rstep+0x10>
1:
 adds r1,r6   @ positive rotation: y=y+(x>>i)
 8002b38:	1989      	adds	r1, r1, r6
 subs r2,r4   @ accumulate angle
 8002b3a:	1b12      	subs	r2, r2, r4
2:
 mov r4,r8
 8002b3c:	4644      	mov	r4, r8
 muls r7,r4   @ apply sign from m
 8002b3e:	4367      	muls	r7, r4
 subs r0,r7   @ finish rotation: x=x{+/-}(y>>i)
 8002b40:	1bc0      	subs	r0, r0, r7
5:
 ldr r4,[r3]  @ fetch next angle from table
 8002b42:	681c      	ldr	r4, [r3, #0]
 adds r3,#4   @ bump pointer
 8002b44:	3304      	adds	r3, #4
 lsrs r4,#1   @ repeated angle?
 8002b46:	0864      	lsrs	r4, r4, #1
 bcs 3f
 8002b48:	d200      	bcs.n	8002b4c <cordic_rstep+0x20>
 adds r5,#1   @ adjust shift if not
 8002b4a:	3501      	adds	r5, #1
3:
 mov r6,r0
 8002b4c:	4606      	mov	r6, r0
 asrs r6,r5   @ x>>i
 8002b4e:	412e      	asrs	r6, r5
 mov r7,r1
 8002b50:	460f      	mov	r7, r1
 asrs r7,r5   @ y>>i
 8002b52:	412f      	asrs	r7, r5
 lsrs r4,#1   @ shift end flag into carry
 8002b54:	0864      	lsrs	r4, r4, #1
 bx r14
 8002b56:	4770      	bx	lr

08002b58 <cordic_rot>:

@ CORDIC rotation mode
cordic_rot:
 push {r6,r7,r14}
 8002b58:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002b5a:	f7ff ffdf 	bl	8002b1c <cordic_start>
1:
 bl cordic_rstep
 8002b5e:	f7ff ffe5 	bl	8002b2c <cordic_rstep>
 bcc 1b            @ step until table finished
 8002b62:	d3fc      	bcc.n	8002b5e <cordic_rot+0x6>
 asrs r6,r0,#14    @ remaining small rotations can be linearised: see IV.B of paper referenced above
 8002b64:	1386      	asrs	r6, r0, #14
 asrs r7,r1,#14
 8002b66:	138f      	asrs	r7, r1, #14
 asrs r2,#3
 8002b68:	10d2      	asrs	r2, r2, #3
 muls r6,r2        @ all remaining CORDIC steps in a multiplication
 8002b6a:	4356      	muls	r6, r2
 muls r7,r2
 8002b6c:	4357      	muls	r7, r2
 mov r4,r8
 8002b6e:	4644      	mov	r4, r8
 muls r7,r4
 8002b70:	4367      	muls	r7, r4
 asrs r6,#12
 8002b72:	1336      	asrs	r6, r6, #12
 asrs r7,#12
 8002b74:	133f      	asrs	r7, r7, #12
 subs r0,r7        @ x=x{+/-}(yz>>k)
 8002b76:	1bc0      	subs	r0, r0, r7
 adds r1,r6        @ y=y+(xz>>k)
 8002b78:	1989      	adds	r1, r1, r6

08002b7a <cordic_exit>:
cordic_exit:
 pop {r7}
 8002b7a:	bc80      	pop	{r7}
 mov r8,r7
 8002b7c:	46b8      	mov	r8, r7
 pop {r6,r7,r15}
 8002b7e:	bdc0      	pop	{r6, r7, pc}

08002b80 <cordic_vec>:

@ CORDIC vector mode
cordic_vec:
 push {r6,r7,r14}
 8002b80:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002b82:	f7ff ffcb 	bl	8002b1c <cordic_start>
1:
 bl cordic_vstep
 8002b86:	f7ff ffce 	bl	8002b26 <cordic_vstep>
 bcc 1b            @ step until table finished
 8002b8a:	d3fc      	bcc.n	8002b86 <cordic_vec+0x6>
4:
 cmp r1,#0         @ continue as in cordic_vstep but without using table; x is not affected as y is small
 8002b8c:	2900      	cmp	r1, #0
 bgt 2f            @ check sign of y
 8002b8e:	dc02      	bgt.n	8002b96 <cordic_vec+0x16>
 adds r1,r6        @ positive rotation: y=y+(x>>i)
 8002b90:	1989      	adds	r1, r1, r6
 subs r2,r4        @ accumulate angle
 8002b92:	1b12      	subs	r2, r2, r4
 b 3f
 8002b94:	e001      	b.n	8002b9a <cordic_vec+0x1a>
2:
 subs r1,r6        @ negative rotation: y=y-(x>>i)
 8002b96:	1b89      	subs	r1, r1, r6
 adds r2,r4        @ accumulate angle
 8002b98:	1912      	adds	r2, r2, r4
3:
 asrs r6,#1
 8002b9a:	1076      	asrs	r6, r6, #1
 asrs r4,#1        @ next "table entry"
 8002b9c:	1064      	asrs	r4, r4, #1
 bne 4b
 8002b9e:	d1f5      	bne.n	8002b8c <cordic_vec+0xc>
 b cordic_exit
 8002ba0:	e7eb      	b.n	8002b7a <cordic_exit>

08002ba2 <qfp_fsin>:

.thumb_func
qfp_fsin:            @ calculate sin and cos using CORDIC rotation method
 push {r4,r5,r14}
 8002ba2:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002ba4:	2118      	movs	r1, #24
 bl qfp_float2fix    @ range reduction by repeated subtraction/addition in fixed point
 8002ba6:	f7ff ff88 	bl	8002aba <qfp_float2fix>
 ldr r4,pi_q29
 8002baa:	4c48      	ldr	r4, [pc, #288]	; (8002ccc <pi_q29>)
 lsrs r4,#4          @ 2pi Q24
 8002bac:	0924      	lsrs	r4, r4, #4
1:
 subs r0,r4
 8002bae:	1b00      	subs	r0, r0, r4
 bge 1b
 8002bb0:	dafd      	bge.n	8002bae <qfp_fsin+0xc>
1:
 adds r0,r4
 8002bb2:	1900      	adds	r0, r0, r4
 bmi 1b              @ now in range 0..2pi
 8002bb4:	d4fd      	bmi.n	8002bb2 <qfp_fsin+0x10>
 lsls r2,r0,#2       @ z Q26
 8002bb6:	0082      	lsls	r2, r0, #2
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 8002bb8:	0065      	lsls	r5, r4, #1
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002bba:	483e      	ldr	r0, [pc, #248]	; (8002cb4 <qfp_fatan2+0x30>)
 movs r1,#0
 8002bbc:	2100      	movs	r1, #0
1:
 cmp r2,r4           @ >pi/2?
 8002bbe:	42a2      	cmp	r2, r4
 blt 2f
 8002bc0:	db02      	blt.n	8002bc8 <qfp_fsin+0x26>
 subs r2,r5          @ reduce range to -pi/2..pi/2
 8002bc2:	1b52      	subs	r2, r2, r5
 rsbs r0,#0          @ rotate vector by pi
 8002bc4:	4240      	negs	r0, r0
 b 1b
 8002bc6:	e7fa      	b.n	8002bbe <qfp_fsin+0x1c>
2:
 lsls r2,#3          @ Q29
 8002bc8:	00d2      	lsls	r2, r2, #3
 adr r3,tab_cc       @ circular coefficients
 8002bca:	a340      	add	r3, pc, #256	; (adr r3, 8002ccc <pi_q29>)
 movs r4,#1          @ m=1
 8002bcc:	2401      	movs	r4, #1
 bl cordic_rot
 8002bce:	f7ff ffc3 	bl	8002b58 <cordic_rot>
 adds r1,#9          @ fiddle factor to make sin(0)==0
 8002bd2:	3109      	adds	r1, #9
 movs r2,#0          @ exponents to zero
 8002bd4:	2200      	movs	r2, #0
 movs r3,#0
 8002bd6:	2300      	movs	r3, #0
 movs r5,#0          @ no sticky bits
 8002bd8:	2500      	movs	r5, #0
 bl packx            @ pack cosine
 8002bda:	f7ff fe6d 	bl	80028b8 <packx>
 bl xchxy
 8002bde:	f7ff fe49 	bl	8002874 <xchxy>
 b packretns         @ pack sine
 8002be2:	e790      	b.n	8002b06 <packretns>

08002be4 <qfp_fcos>:

.thumb_func
qfp_fcos:
 push {r14}
 8002be4:	b500      	push	{lr}
 bl qfp_fsin
 8002be6:	f7ff ffdc 	bl	8002ba2 <qfp_fsin>
 mov r0,r1           @ extract cosine result
 8002bea:	4608      	mov	r0, r1
 pop {r15}
 8002bec:	bd00      	pop	{pc}

08002bee <qfp_ftan>:

.thumb_func
qfp_ftan:
 push {r4,r5,r14}
 8002bee:	b530      	push	{r4, r5, lr}
 bl qfp_fsin         @ sine in r0/r2, cosine in r1/r3
 8002bf0:	f7ff ffd7 	bl	8002ba2 <qfp_fsin>
.if include_faster
 b fdiv_fast_n       @ sin/cos
 8002bf4:	e6fe      	b.n	80029f4 <fdiv_fast_n>

08002bf6 <qfp_fexp>:

.endif

.thumb_func
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 8002bf6:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002bf8:	2118      	movs	r1, #24
 bl qfp_float2fix    @ Q24: covers entire valid input range
 8002bfa:	f7ff ff5e 	bl	8002aba <qfp_float2fix>
 asrs r1,r0,#16      @ Q8
 8002bfe:	1401      	asrs	r1, r0, #16
 ldr r2,=#5909       @ log_2(e) Q12
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <qfp_fatan2+0x34>)
 muls r1,r2          @ estimate exponent of result Q20
 8002c02:	4351      	muls	r1, r2
 asrs r1,#19         @ Q1
 8002c04:	14c9      	asrs	r1, r1, #19
 adds r1,#1          @ rounding
 8002c06:	3101      	adds	r1, #1
 asrs r1,#1          @ rounded estimate of exponent of result
 8002c08:	1049      	asrs	r1, r1, #1
 push {r1}           @ save for later
 8002c0a:	b402      	push	{r1}
 lsls r2,r0,#5       @ Q29
 8002c0c:	0142      	lsls	r2, r0, #5
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002c0e:	482b      	ldr	r0, [pc, #172]	; (8002cbc <qfp_fatan2+0x38>)
 muls r1,r0          @ accurate contribution of estimated exponent
 8002c10:	4341      	muls	r1, r0
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 8002c12:	1a52      	subs	r2, r2, r1
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002c14:	482a      	ldr	r0, [pc, #168]	; (8002cc0 <qfp_fatan2+0x3c>)
 movs r1,#0
 8002c16:	2100      	movs	r1, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002c18:	a339      	add	r3, pc, #228	; (adr r3, 8002d00 <tab_ch>)
 mvns r4,r1          @ m=-1
 8002c1a:	43cc      	mvns	r4, r1
 bl cordic_rot       @ calculate cosh and sinh
 8002c1c:	f7ff ff9c 	bl	8002b58 <cordic_rot>
 add r0,r1           @ exp=cosh+sinh
 8002c20:	4408      	add	r0, r1
 pop {r2}            @ recover exponent
 8002c22:	bc04      	pop	{r2}
 b packretns         @ pack result
 8002c24:	e76f      	b.n	8002b06 <packretns>

08002c26 <qfp_fsqrt>:

.thumb_func
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 8002c26:	b530      	push	{r4, r5, lr}
 bl unpackx
 8002c28:	f7ff fe2f 	bl	800288a <unpackx>
 movs r1,r0          @ -ve argument?
 8002c2c:	0001      	movs	r1, r0
 bmi 3f              @ return -Inf, -Inf
 8002c2e:	d415      	bmi.n	8002c5c <qfp_fsqrt+0x36>
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002c30:	4924      	ldr	r1, [pc, #144]	; (8002cc4 <qfp_fatan2+0x40>)
 bl mul0             @ Q29
 8002c32:	f7ff fe92 	bl	800295a <mul0>
 asrs r1,r2,#1       @ halve exponent
 8002c36:	1051      	asrs	r1, r2, #1
 bcc 1f
 8002c38:	d301      	bcc.n	8002c3e <qfp_fsqrt+0x18>
 adds r1,#1          @ was odd: add 1 and shift mantissa
 8002c3a:	3101      	adds	r1, #1
 asrs r0,#1
 8002c3c:	1040      	asrs	r0, r0, #1
1:
 push {r1}           @ save exponent/2 for later
 8002c3e:	b402      	push	{r1}
 mov r1,r0
 8002c40:	4601      	mov	r1, r0
 ldr r3,=#0x0593C2B9 @ re-use constant
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <qfp_fatan2+0x40>)
 lsls r3,#2
 8002c44:	009b      	lsls	r3, r3, #2
 adds r0,r3          @ "a+1"
 8002c46:	18c0      	adds	r0, r0, r3
 subs r1,r3          @ "a-1"
 8002c48:	1ac9      	subs	r1, r1, r3
 movs r2,#0
 8002c4a:	2200      	movs	r2, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002c4c:	a32c      	add	r3, pc, #176	; (adr r3, 8002d00 <tab_ch>)
 mvns r4,r2          @ m=-1
 8002c4e:	43d4      	mvns	r4, r2
 bl cordic_vec
 8002c50:	f7ff ff96 	bl	8002b80 <cordic_vec>
 mov r1,r2           @ keep ln result
 8002c54:	4611      	mov	r1, r2
 pop {r2}            @ retrieve exponent/2
 8002c56:	bc04      	pop	{r2}
2:
 movs r3,r2
 8002c58:	0013      	movs	r3, r2
 b packretns         @ pack sqrt result
 8002c5a:	e754      	b.n	8002b06 <packretns>

3:
 movs r2,#255
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 b 2b
 8002c5e:	e7fb      	b.n	8002c58 <qfp_fsqrt+0x32>

08002c60 <qfp_fln>:

.thumb_func
qfp_fln:
 push {r4,r5,r14}
 8002c60:	b530      	push	{r4, r5, lr}
 bl qfp_fsqrt            @ get unpacked ln in r1/r3; exponent has been halved
 8002c62:	f7ff ffe0 	bl	8002c26 <qfp_fsqrt>
 cmp r3,#70              @ ln(Inf)?
 8002c66:	2b46      	cmp	r3, #70	; 0x46
 bgt 2f                  @ return Inf
 8002c68:	dc0a      	bgt.n	8002c80 <qfp_fln+0x20>
 rsbs r3,#0
 8002c6a:	425b      	negs	r3, r3
 cmp r3,#70
 8002c6c:	2b46      	cmp	r3, #70	; 0x46
 bgt 1f                  @ ln(0)? return -Inf
 8002c6e:	dc06      	bgt.n	8002c7e <qfp_fln+0x1e>
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002c70:	4815      	ldr	r0, [pc, #84]	; (8002cc8 <qfp_fatan2+0x44>)
 muls r0,r3              @ contribution from negated, halved exponent
 8002c72:	4358      	muls	r0, r3
 adds r1,#8              @ round result of ln
 8002c74:	3108      	adds	r1, #8
 asrs r1,#4              @ Q24
 8002c76:	1109      	asrs	r1, r1, #4
 subs r0,r1,r0           @ add in contribution from (negated) exponent
 8002c78:	1a08      	subs	r0, r1, r0
 movs r2,#5              @ pack expects Q29
 8002c7a:	2205      	movs	r2, #5
 b packretns
 8002c7c:	e743      	b.n	8002b06 <packretns>
1:
 mvns r0,r0              @ make result -Inf
 8002c7e:	43c0      	mvns	r0, r0
2:
 movs r2,#255
 8002c80:	22ff      	movs	r2, #255	; 0xff
 b packretns
 8002c82:	e740      	b.n	8002b06 <packretns>

08002c84 <qfp_fatan2>:

.thumb_func
qfp_fatan2:
 push {r4,r5,r14}
 8002c84:	b530      	push	{r4, r5, lr}
 bl unpackxyalign        @ convert to fixed point (ensure common exponent, which is discarded)
 8002c86:	f7ff fe40 	bl	800290a <unpackxyalign>
 movs r2,#0              @ initial angle
 8002c8a:	2200      	movs	r2, #0
 cmp r0,#0               @ x negative
 8002c8c:	2800      	cmp	r0, #0
 bge 5f
 8002c8e:	da02      	bge.n	8002c96 <qfp_fatan2+0x12>
 rsbs r0,#0              @ rotate to 1st/4th quadrants
 8002c90:	4240      	negs	r0, r0
 rsbs r1,#0
 8002c92:	4249      	negs	r1, r1
 ldr r2,pi_q29           @ pi Q29
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <pi_q29>)
5:
 adr r3,tab_cc           @ circular coefficients
 8002c96:	a30d      	add	r3, pc, #52	; (adr r3, 8002ccc <pi_q29>)
 movs r4,#1              @ m=1
 8002c98:	2401      	movs	r4, #1
 bl cordic_vec           @ also produces magnitude (with scaling factor 1.646760119), which is discarded
 8002c9a:	f7ff ff71 	bl	8002b80 <cordic_vec>
 mov r0,r2               @ result here is -pi/2..3pi/2 Q29
 8002c9e:	4610      	mov	r0, r2
 ldr r2,pi_q29           @ pi Q29
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <pi_q29>)
 adds r4,r0,r2           @ attempt to fix -3pi/2..-pi case
 8002ca2:	1884      	adds	r4, r0, r2
 bcs 6f                  @ -pi/2..0? leave result as is
 8002ca4:	d202      	bcs.n	8002cac <qfp_fatan2+0x28>
 subs r4,r0,r2           @ <pi? leave as is
 8002ca6:	1a84      	subs	r4, r0, r2
 bmi 6f
 8002ca8:	d400      	bmi.n	8002cac <qfp_fatan2+0x28>
 subs r0,r4,r2           @ >pi: take off 2pi
 8002caa:	1aa0      	subs	r0, r4, r2
6:
 subs r0,#1              @ fiddle factor so atan2(0,1)==0
 8002cac:	3801      	subs	r0, #1
 movs r2,#0              @ exponent for pack
 8002cae:	2200      	movs	r2, #0
 b packretns
 8002cb0:	e729      	b.n	8002b06 <packretns>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002cb4:	136e9db4 	.word	0x136e9db4
 ldr r2,=#5909       @ log_2(e) Q12
 8002cb8:	00001715 	.word	0x00001715
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002cbc:	162e42ff 	.word	0x162e42ff
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002cc0:	2c9e15ca 	.word	0x2c9e15ca
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002cc4:	0593c2b9 	.word	0x0593c2b9
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002cc8:	0162e430 	.word	0x0162e430

08002ccc <pi_q29>:
 8002ccc:	6487ed51 	.word	0x6487ed51
 8002cd0:	3b58ce0c 	.word	0x3b58ce0c
 8002cd4:	1f5b75f8 	.word	0x1f5b75f8
 8002cd8:	0feadd4c 	.word	0x0feadd4c
 8002cdc:	07fd56ec 	.word	0x07fd56ec
 8002ce0:	03ffaab8 	.word	0x03ffaab8
 8002ce4:	01fff554 	.word	0x01fff554
 8002ce8:	00fffeac 	.word	0x00fffeac
 8002cec:	007fffd4 	.word	0x007fffd4
 8002cf0:	003ffffc 	.word	0x003ffffc
 8002cf4:	001ffffc 	.word	0x001ffffc
 8002cf8:	00100000 	.word	0x00100000
 8002cfc:	00080002 	.word	0x00080002

08002d00 <tab_ch>:
 8002d00:	464fa9ec 	.word	0x464fa9ec
 8002d04:	464fa9ed 	.word	0x464fa9ed
 8002d08:	20b15df4 	.word	0x20b15df4
 8002d0c:	1015891c 	.word	0x1015891c
 8002d10:	0802ac44 	.word	0x0802ac44
 8002d14:	0802ac45 	.word	0x0802ac45
 8002d18:	04005564 	.word	0x04005564
 8002d1c:	02000aac 	.word	0x02000aac
 8002d20:	01000154 	.word	0x01000154
 8002d24:	0080002c 	.word	0x0080002c
 8002d28:	00400004 	.word	0x00400004
 8002d2c:	00200004 	.word	0x00200004
 8002d30:	00100000 	.word	0x00100000
 8002d34:	00080000 	.word	0x00080000
 8002d38:	00080003 	.word	0x00080003

08002d3c <qfp_lib_end>:
 8002d3c:	00000000 	.word	0x00000000

08002d40 <acos>:

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ACOS]++;
 8002d42:	4d2f      	ldr	r5, [pc, #188]	; (8002e00 <acos+0xc0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002d44:	4602      	mov	r2, r0
    float_usage[USAGE_ACOS]++;
 8002d46:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
    if (isnan(x)) { return NAN; }
 8002d4a:	460b      	mov	r3, r1
    float_usage[USAGE_ACOS]++;
 8002d4c:	3401      	adds	r4, #1
 8002d4e:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
double acos(double x) {
 8002d52:	4606      	mov	r6, r0
 8002d54:	460f      	mov	r7, r1
    if (isnan(x)) { return NAN; }
 8002d56:	f000 f937 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8002d5a:	b998      	cbnz	r0, 8002d84 <acos+0x44>

    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f7ff fd00 	bl	8002764 <__aeabi_d2f>
 8002d64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d68:	4604      	mov	r4, r0
 8002d6a:	f7ff fe0b 	bl	8002984 <qfp_fcmp>
 8002d6e:	b910      	cbnz	r0, 8002d76 <acos+0x36>
 8002d70:	2000      	movs	r0, #0
 8002d72:	2100      	movs	r1, #0
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 8002d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8002d76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff fe02 	bl	8002984 <qfp_fcmp>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	dd02      	ble.n	8002d8a <acos+0x4a>
    if (isnan(x)) { return NAN; }
 8002d84:	2000      	movs	r0, #0
 8002d86:	491f      	ldr	r1, [pc, #124]	; (8002e04 <acos+0xc4>)
}
 8002d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002d8a:	491f      	ldr	r1, [pc, #124]	; (8002e08 <acos+0xc8>)
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fdf9 	bl	8002984 <qfp_fcmp>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	dbf6      	blt.n	8002d84 <acos+0x44>
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 8002d96:	491c      	ldr	r1, [pc, #112]	; (8002e08 <acos+0xc8>)
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff fdf3 	bl	8002984 <qfp_fcmp>
 8002d9e:	b918      	cbnz	r0, 8002da8 <acos+0x68>
 8002da0:	a115      	add	r1, pc, #84	; (adr r1, 8002df8 <acos+0xb8>)
 8002da2:	e9d1 0100 	ldrd	r0, r1, [r1]
}
 8002da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            qfp_fsqrt_fast(
 8002da8:	4621      	mov	r1, r4
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff fdf8 	bl	80029a0 <qfp_fmul>
 8002db0:	4601      	mov	r1, r0
 8002db2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002db6:	f7ff fdc1 	bl	800293c <qfp_fsub>
 8002dba:	f7ff fe42 	bl	8002a42 <qfp_fsqrt_fast>
            qfp_fadd( 1.0f , x )
 8002dbe:	4621      	mov	r1, r4
            qfp_fsqrt_fast(
 8002dc0:	4606      	mov	r6, r0
            qfp_fadd( 1.0f , x )
 8002dc2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002dc6:	f7ff fdbc 	bl	8002942 <qfp_fadd>
        atan2(
 8002dca:	f7ff fc73 	bl	80026b4 <__aeabi_f2d>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	460d      	mov	r5, r1
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f7ff fc6e 	bl	80026b4 <__aeabi_f2d>
 8002dd8:	4622      	mov	r2, r4
 8002dda:	462b      	mov	r3, r5
 8002ddc:	f000 fa0e 	bl	80031fc <atan2>
    return qfp_fmul(
 8002de0:	f7ff fcc0 	bl	8002764 <__aeabi_d2f>
 8002de4:	4601      	mov	r1, r0
 8002de6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dea:	f7ff fdd9 	bl	80029a0 <qfp_fmul>
 8002dee:	f7ff fc61 	bl	80026b4 <__aeabi_f2d>
}
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df4:	f3af 8000 	nop.w
 8002df8:	54442d18 	.word	0x54442d18
 8002dfc:	400921fb 	.word	0x400921fb
 8002e00:	20000638 	.word	0x20000638
 8002e04:	7ff80000 	.word	0x7ff80000
 8002e08:	bf800000 	.word	0xbf800000

08002e0c <__wrap___aeabi_ddiv>:
double __wrap___aeabi_ddiv(double n, double d) { 
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DDIV]++;
 8002e0e:	4d0a      	ldr	r5, [pc, #40]	; (8002e38 <__wrap___aeabi_ddiv+0x2c>)
double __wrap___aeabi_ddiv(double n, double d) { 
 8002e10:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DDIV]++;
 8002e12:	786c      	ldrb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002e14:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DDIV]++;
 8002e16:	3401      	adds	r4, #1
double __wrap___aeabi_ddiv(double n, double d) { 
 8002e18:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DDIV]++;
 8002e1a:	706c      	strb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7ff fca1 	bl	8002764 <__aeabi_d2f>
 8002e22:	4604      	mov	r4, r0
 8002e24:	4639      	mov	r1, r7
 8002e26:	4630      	mov	r0, r6
 8002e28:	f7ff fc9c 	bl	8002764 <__aeabi_d2f>
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	f7ff fde0 	bl	80029f2 <qfp_fdiv_fast>
 8002e32:	f7ff fc3f 	bl	80026b4 <__aeabi_f2d>
}
 8002e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e38:	20000638 	.word	0x20000638

08002e3c <__wrap___aeabi_dmul>:
double __wrap___aeabi_dmul(double x, double y) { 
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DMUL]++;
 8002e3e:	4d0a      	ldr	r5, [pc, #40]	; (8002e68 <__wrap___aeabi_dmul+0x2c>)
double __wrap___aeabi_dmul(double x, double y) { 
 8002e40:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DMUL]++;
 8002e42:	78ac      	ldrb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8002e44:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DMUL]++;
 8002e46:	3401      	adds	r4, #1
double __wrap___aeabi_dmul(double x, double y) { 
 8002e48:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DMUL]++;
 8002e4a:	70ac      	strb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7ff fc89 	bl	8002764 <__aeabi_d2f>
 8002e52:	4604      	mov	r4, r0
 8002e54:	4639      	mov	r1, r7
 8002e56:	4630      	mov	r0, r6
 8002e58:	f7ff fc84 	bl	8002764 <__aeabi_d2f>
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f7ff fd9f 	bl	80029a0 <qfp_fmul>
 8002e62:	f7ff fc27 	bl	80026b4 <__aeabi_f2d>
}
 8002e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e68:	20000638 	.word	0x20000638

08002e6c <__wrap___aeabi_dadd>:
double __wrap___aeabi_dadd(double a, double b) {
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DADD]++;
 8002e6e:	4d0a      	ldr	r5, [pc, #40]	; (8002e98 <__wrap___aeabi_dadd+0x2c>)
double __wrap___aeabi_dadd(double a, double b) {
 8002e70:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DADD]++;
 8002e72:	78ec      	ldrb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8002e74:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DADD]++;
 8002e76:	3401      	adds	r4, #1
double __wrap___aeabi_dadd(double a, double b) {
 8002e78:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DADD]++;
 8002e7a:	70ec      	strb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7ff fc71 	bl	8002764 <__aeabi_d2f>
 8002e82:	4604      	mov	r4, r0
 8002e84:	4639      	mov	r1, r7
 8002e86:	4630      	mov	r0, r6
 8002e88:	f7ff fc6c 	bl	8002764 <__aeabi_d2f>
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	f7ff fd58 	bl	8002942 <qfp_fadd>
 8002e92:	f7ff fc0f 	bl	80026b4 <__aeabi_f2d>
}
 8002e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e98:	20000638 	.word	0x20000638

08002e9c <__wrap___aeabi_dsub>:
double __wrap___aeabi_dsub(double a, double b) {
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DSUB]++;
 8002e9e:	4d0a      	ldr	r5, [pc, #40]	; (8002ec8 <__wrap___aeabi_dsub+0x2c>)
double __wrap___aeabi_dsub(double a, double b) {
 8002ea0:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DSUB]++;
 8002ea2:	792c      	ldrb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8002ea4:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DSUB]++;
 8002ea6:	3401      	adds	r4, #1
double __wrap___aeabi_dsub(double a, double b) {
 8002ea8:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DSUB]++;
 8002eaa:	712c      	strb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7ff fc59 	bl	8002764 <__aeabi_d2f>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4639      	mov	r1, r7
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f7ff fc54 	bl	8002764 <__aeabi_d2f>
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	f7ff fd3d 	bl	800293c <qfp_fsub>
 8002ec2:	f7ff fbf7 	bl	80026b4 <__aeabi_f2d>
}
 8002ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec8:	20000638 	.word	0x20000638

08002ecc <__wrap___aeabi_dcmpeq>:
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002ece:	4d0b      	ldr	r5, [pc, #44]	; (8002efc <__wrap___aeabi_dcmpeq+0x30>)
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002ed0:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002ed2:	796c      	ldrb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002ed4:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002ed6:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002ed8:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002eda:	716c      	strb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7ff fc41 	bl	8002764 <__aeabi_d2f>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f7ff fc3c 	bl	8002764 <__aeabi_d2f>
 8002eec:	4621      	mov	r1, r4
 8002eee:	f7ff fd49 	bl	8002984 <qfp_fcmp>
}
 8002ef2:	fab0 f080 	clz	r0, r0
 8002ef6:	0940      	lsrs	r0, r0, #5
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000638 	.word	0x20000638

08002f00 <__wrap___aeabi_dcmplt>:
int __wrap___aeabi_dcmplt(double x, double y) {
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002f02:	4d0a      	ldr	r5, [pc, #40]	; (8002f2c <__wrap___aeabi_dcmplt+0x2c>)
int __wrap___aeabi_dcmplt(double x, double y) {
 8002f04:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002f06:	79ac      	ldrb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f08:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002f0a:	3401      	adds	r4, #1
int __wrap___aeabi_dcmplt(double x, double y) {
 8002f0c:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002f0e:	71ac      	strb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7ff fc27 	bl	8002764 <__aeabi_d2f>
 8002f16:	4604      	mov	r4, r0
 8002f18:	4639      	mov	r1, r7
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f7ff fc22 	bl	8002764 <__aeabi_d2f>
 8002f20:	4621      	mov	r1, r4
 8002f22:	f7ff fd2f 	bl	8002984 <qfp_fcmp>
}
 8002f26:	0fc0      	lsrs	r0, r0, #31
 8002f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000638 	.word	0x20000638

08002f30 <__wrap___aeabi_dcmple>:
int __wrap___aeabi_dcmple(double x, double y) { 
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002f32:	4d0b      	ldr	r5, [pc, #44]	; (8002f60 <__wrap___aeabi_dcmple+0x30>)
int __wrap___aeabi_dcmple(double x, double y) { 
 8002f34:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002f36:	79ec      	ldrb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002f38:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002f3a:	3401      	adds	r4, #1
int __wrap___aeabi_dcmple(double x, double y) { 
 8002f3c:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002f3e:	71ec      	strb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7ff fc0f 	bl	8002764 <__aeabi_d2f>
 8002f46:	4604      	mov	r4, r0
 8002f48:	4639      	mov	r1, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	f7ff fc0a 	bl	8002764 <__aeabi_d2f>
 8002f50:	4621      	mov	r1, r4
 8002f52:	f7ff fd17 	bl	8002984 <qfp_fcmp>
}
 8002f56:	2800      	cmp	r0, #0
 8002f58:	bfcc      	ite	gt
 8002f5a:	2000      	movgt	r0, #0
 8002f5c:	2001      	movle	r0, #1
 8002f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f60:	20000638 	.word	0x20000638

08002f64 <__wrap___aeabi_dcmpge>:
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f66:	4d0a      	ldr	r5, [pc, #40]	; (8002f90 <__wrap___aeabi_dcmpge+0x2c>)
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002f68:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f6a:	7a2c      	ldrb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f6c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f6e:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002f70:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f72:	722c      	strb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f74:	4619      	mov	r1, r3
 8002f76:	f7ff fbf5 	bl	8002764 <__aeabi_d2f>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f7ff fbf0 	bl	8002764 <__aeabi_d2f>
 8002f84:	4621      	mov	r1, r4
 8002f86:	f7ff fcfd 	bl	8002984 <qfp_fcmp>
}
 8002f8a:	43c0      	mvns	r0, r0
 8002f8c:	0fc0      	lsrs	r0, r0, #31
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f90:	20000638 	.word	0x20000638

08002f94 <__wrap___aeabi_dcmpgt>:
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f96:	4d0b      	ldr	r5, [pc, #44]	; (8002fc4 <__wrap___aeabi_dcmpgt+0x30>)
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002f98:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f9a:	7a6c      	ldrb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002f9c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f9e:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002fa0:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002fa2:	726c      	strb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7ff fbdd 	bl	8002764 <__aeabi_d2f>
 8002faa:	4604      	mov	r4, r0
 8002fac:	4639      	mov	r1, r7
 8002fae:	4630      	mov	r0, r6
 8002fb0:	f7ff fbd8 	bl	8002764 <__aeabi_d2f>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7ff fce5 	bl	8002984 <qfp_fcmp>
}
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	bfd4      	ite	le
 8002fbe:	2000      	movle	r0, #0
 8002fc0:	2001      	movgt	r0, #1
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc4:	20000638 	.word	0x20000638

08002fc8 <__wrap___aeabi_dcmpun>:
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002fca:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__wrap___aeabi_dcmpun+0x30>)
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002fcc:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002fce:	7aac      	ldrb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002fd0:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002fd2:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002fd4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002fd6:	72ac      	strb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7ff fbc3 	bl	8002764 <__aeabi_d2f>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f7ff fbbe 	bl	8002764 <__aeabi_d2f>
 8002fe8:	4621      	mov	r1, r4
 8002fea:	f7ff fccb 	bl	8002984 <qfp_fcmp>
}
 8002fee:	3000      	adds	r0, #0
 8002ff0:	bf18      	it	ne
 8002ff2:	2001      	movne	r0, #1
 8002ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000638 	.word	0x20000638

08002ffc <__wrap___aeabi_d2iz>:
int __wrap___aeabi_d2iz(double x) { 
 8002ffc:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2IZ]++;
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <__wrap___aeabi_d2iz+0x28>)
 8003000:	7bd3      	ldrb	r3, [r2, #15]
 8003002:	3301      	adds	r3, #1
 8003004:	73d3      	strb	r3, [r2, #15]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8003006:	f7ff fbad 	bl	8002764 <__aeabi_d2f>
 800300a:	2100      	movs	r1, #0
 800300c:	4604      	mov	r4, r0
 800300e:	f7ff fcb9 	bl	8002984 <qfp_fcmp>
 8003012:	b900      	cbnz	r0, 8003016 <__wrap___aeabi_d2iz+0x1a>
}
 8003014:	bd10      	pop	{r4, pc}
    int xfloored = qfp_float2int(x);
 8003016:	4620      	mov	r0, r4
 8003018:	f7ff fd4e 	bl	8002ab8 <qfp_float2int>
    if (xfloored < 0) { return xfloored + 1; }
 800301c:	2800      	cmp	r0, #0
 800301e:	bfb8      	it	lt
 8003020:	3001      	addlt	r0, #1
}
 8003022:	bd10      	pop	{r4, pc}
 8003024:	20000638 	.word	0x20000638

08003028 <__wrap___aeabi_d2uiz>:
unsigned __wrap___aeabi_d2uiz(double x) { 
 8003028:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2UIZ]++;
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <__wrap___aeabi_d2uiz+0x34>)
 800302c:	7c13      	ldrb	r3, [r2, #16]
 800302e:	3301      	adds	r3, #1
 8003030:	7413      	strb	r3, [r2, #16]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8003032:	f7ff fb97 	bl	8002764 <__aeabi_d2f>
 8003036:	2100      	movs	r1, #0
 8003038:	4604      	mov	r4, r0
 800303a:	f7ff fca3 	bl	8002984 <qfp_fcmp>
 800303e:	b908      	cbnz	r0, 8003044 <__wrap___aeabi_d2uiz+0x1c>
}
 8003040:	2000      	movs	r0, #0
 8003042:	bd10      	pop	{r4, pc}
    if (qfp_fcmp(x, 0) < 0) { return 0; }
 8003044:	2100      	movs	r1, #0
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fc9c 	bl	8002984 <qfp_fcmp>
 800304c:	2800      	cmp	r0, #0
 800304e:	dbf7      	blt.n	8003040 <__wrap___aeabi_d2uiz+0x18>
    return qfp_float2uint(x); 
 8003050:	4620      	mov	r0, r4
}
 8003052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return qfp_float2uint(x); 
 8003056:	f7ff bd44 	b.w	8002ae2 <qfp_float2uint>
 800305a:	bf00      	nop
 800305c:	20000638 	.word	0x20000638

08003060 <sqrt>:
double sqrt(double x) { 
 8003060:	b508      	push	{r3, lr}
    float_usage[USAGE_SQRT]++;
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <sqrt+0x18>)
 8003064:	7d53      	ldrb	r3, [r2, #21]
 8003066:	3301      	adds	r3, #1
 8003068:	7553      	strb	r3, [r2, #21]
    return qfp_fsqrt_fast(x); 
 800306a:	f7ff fb7b 	bl	8002764 <__aeabi_d2f>
 800306e:	f7ff fce8 	bl	8002a42 <qfp_fsqrt_fast>
 8003072:	f7ff fb1f 	bl	80026b4 <__aeabi_f2d>
}
 8003076:	bd08      	pop	{r3, pc}
 8003078:	20000638 	.word	0x20000638

0800307c <log>:
double log(double x) { 
 800307c:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG]++;
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <log+0x18>)
 8003080:	7d93      	ldrb	r3, [r2, #22]
 8003082:	3301      	adds	r3, #1
 8003084:	7593      	strb	r3, [r2, #22]
    return qfp_fln(x); 
 8003086:	f7ff fb6d 	bl	8002764 <__aeabi_d2f>
 800308a:	f7ff fde9 	bl	8002c60 <qfp_fln>
 800308e:	f7ff fb11 	bl	80026b4 <__aeabi_f2d>
}
 8003092:	bd08      	pop	{r3, pc}
 8003094:	20000638 	.word	0x20000638

08003098 <exp>:
double exp(double x) { 
 8003098:	b508      	push	{r3, lr}
    float_usage[USAGE_EXP]++;
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <exp+0x18>)
 800309c:	7dd3      	ldrb	r3, [r2, #23]
 800309e:	3301      	adds	r3, #1
 80030a0:	75d3      	strb	r3, [r2, #23]
    return qfp_fexp(x); 
 80030a2:	f7ff fb5f 	bl	8002764 <__aeabi_d2f>
 80030a6:	f7ff fda6 	bl	8002bf6 <qfp_fexp>
 80030aa:	f7ff fb03 	bl	80026b4 <__aeabi_f2d>
}
 80030ae:	bd08      	pop	{r3, pc}
 80030b0:	20000638 	.word	0x20000638

080030b4 <log2>:
double log2(double x) { 
 80030b4:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG2]++;
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <log2+0x20>)
 80030b8:	7e13      	ldrb	r3, [r2, #24]
 80030ba:	3301      	adds	r3, #1
 80030bc:	7613      	strb	r3, [r2, #24]
    return qfp_fmul(
 80030be:	f7ff fb51 	bl	8002764 <__aeabi_d2f>
 80030c2:	f7ff fdcd 	bl	8002c60 <qfp_fln>
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <log2+0x24>)
 80030c8:	f7ff fc6a 	bl	80029a0 <qfp_fmul>
 80030cc:	f7ff faf2 	bl	80026b4 <__aeabi_f2d>
}
 80030d0:	bd08      	pop	{r3, pc}
 80030d2:	bf00      	nop
 80030d4:	20000638 	.word	0x20000638
 80030d8:	3fb8aa3b 	.word	0x3fb8aa3b

080030dc <log10>:
double log10(double x) { 
 80030dc:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG10]++;
 80030de:	4a07      	ldr	r2, [pc, #28]	; (80030fc <log10+0x20>)
 80030e0:	7e53      	ldrb	r3, [r2, #25]
 80030e2:	3301      	adds	r3, #1
 80030e4:	7653      	strb	r3, [r2, #25]
    return qfp_fmul(
 80030e6:	f7ff fb3d 	bl	8002764 <__aeabi_d2f>
 80030ea:	f7ff fdb9 	bl	8002c60 <qfp_fln>
 80030ee:	4904      	ldr	r1, [pc, #16]	; (8003100 <log10+0x24>)
 80030f0:	f7ff fc56 	bl	80029a0 <qfp_fmul>
 80030f4:	f7ff fade 	bl	80026b4 <__aeabi_f2d>
}
 80030f8:	bd08      	pop	{r3, pc}
 80030fa:	bf00      	nop
 80030fc:	20000638 	.word	0x20000638
 8003100:	3ede5bd9 	.word	0x3ede5bd9

08003104 <pow>:
double pow(double b, double x) { 
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_POW]++;
 8003106:	4c21      	ldr	r4, [pc, #132]	; (800318c <pow+0x88>)
double pow(double b, double x) { 
 8003108:	461f      	mov	r7, r3
    float_usage[USAGE_POW]++;
 800310a:	7ea3      	ldrb	r3, [r4, #26]
double pow(double b, double x) { 
 800310c:	4616      	mov	r6, r2
    float_usage[USAGE_POW]++;
 800310e:	3301      	adds	r3, #1
 8003110:	76a3      	strb	r3, [r4, #26]
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 8003112:	f7ff fb27 	bl	8002764 <__aeabi_d2f>
 8003116:	2100      	movs	r1, #0
 8003118:	4604      	mov	r4, r0
 800311a:	f7ff fc33 	bl	8002984 <qfp_fcmp>
 800311e:	2800      	cmp	r0, #0
 8003120:	db10      	blt.n	8003144 <pow+0x40>
    return qfp_fexp(
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff fd9c 	bl	8002c60 <qfp_fln>
 8003128:	4639      	mov	r1, r7
 800312a:	4604      	mov	r4, r0
 800312c:	4630      	mov	r0, r6
 800312e:	f7ff fb19 	bl	8002764 <__aeabi_d2f>
 8003132:	4601      	mov	r1, r0
 8003134:	4620      	mov	r0, r4
 8003136:	f7ff fc33 	bl	80029a0 <qfp_fmul>
 800313a:	f7ff fd5c 	bl	8002bf6 <qfp_fexp>
 800313e:	f7ff fab9 	bl	80026b4 <__aeabi_f2d>
}
 8003142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 8003144:	4639      	mov	r1, r7
 8003146:	4630      	mov	r0, r6
 8003148:	f7ff fb0c 	bl	8002764 <__aeabi_d2f>
 800314c:	2100      	movs	r1, #0
 800314e:	4605      	mov	r5, r0
 8003150:	f7ff fc18 	bl	8002984 <qfp_fcmp>
 8003154:	2800      	cmp	r0, #0
 8003156:	dae4      	bge.n	8003122 <pow+0x1e>
        int xfloored = qfp_float2int(-x);
 8003158:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 800315c:	f7ff fcac 	bl	8002ab8 <qfp_float2int>
        if (xfloored % 2 == 1) {
 8003160:	2800      	cmp	r0, #0
 8003162:	f000 0001 	and.w	r0, r0, #1
 8003166:	bfb8      	it	lt
 8003168:	4240      	neglt	r0, r0
 800316a:	2801      	cmp	r0, #1
 800316c:	d1d9      	bne.n	8003122 <pow+0x1e>
            return -qfp_fexp(
 800316e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8003172:	f7ff fd75 	bl	8002c60 <qfp_fln>
 8003176:	4629      	mov	r1, r5
 8003178:	f7ff fc12 	bl	80029a0 <qfp_fmul>
 800317c:	f7ff fd3b 	bl	8002bf6 <qfp_fexp>
 8003180:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003184:	f7ff fa96 	bl	80026b4 <__aeabi_f2d>
}
 8003188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318a:	bf00      	nop
 800318c:	20000638 	.word	0x20000638

08003190 <sin>:
double sin(double x) { 
 8003190:	b508      	push	{r3, lr}
    float_usage[USAGE_SIN]++;
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <sin+0x18>)
 8003194:	7f13      	ldrb	r3, [r2, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	7713      	strb	r3, [r2, #28]
    return qfp_fsin(x); 
 800319a:	f7ff fae3 	bl	8002764 <__aeabi_d2f>
 800319e:	f7ff fd00 	bl	8002ba2 <qfp_fsin>
 80031a2:	f7ff fa87 	bl	80026b4 <__aeabi_f2d>
}
 80031a6:	bd08      	pop	{r3, pc}
 80031a8:	20000638 	.word	0x20000638

080031ac <cos>:
double cos(double x) { 
 80031ac:	b510      	push	{r4, lr}
    float_usage[USAGE_COS]++;
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <cos+0x2c>)
 80031b0:	7f53      	ldrb	r3, [r2, #29]
 80031b2:	3301      	adds	r3, #1
 80031b4:	7753      	strb	r3, [r2, #29]
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 80031b6:	f7ff fad5 	bl	8002764 <__aeabi_d2f>
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <cos+0x30>)
 80031bc:	4604      	mov	r4, r0
 80031be:	f7ff fbe1 	bl	8002984 <qfp_fcmp>
 80031c2:	b910      	cbnz	r0, 80031ca <cos+0x1e>
 80031c4:	2000      	movs	r0, #0
 80031c6:	2100      	movs	r1, #0
}
 80031c8:	bd10      	pop	{r4, pc}
    return qfp_fcos(x); 
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff fd0a 	bl	8002be4 <qfp_fcos>
 80031d0:	f7ff fa70 	bl	80026b4 <__aeabi_f2d>
}
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	20000638 	.word	0x20000638
 80031dc:	3fc90fdb 	.word	0x3fc90fdb

080031e0 <tan>:
double tan(double x) { 
 80031e0:	b508      	push	{r3, lr}
    float_usage[USAGE_TAN]++;
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <tan+0x18>)
 80031e4:	7f93      	ldrb	r3, [r2, #30]
 80031e6:	3301      	adds	r3, #1
 80031e8:	7793      	strb	r3, [r2, #30]
    return qfp_ftan(x); 
 80031ea:	f7ff fabb 	bl	8002764 <__aeabi_d2f>
 80031ee:	f7ff fcfe 	bl	8002bee <qfp_ftan>
 80031f2:	f7ff fa5f 	bl	80026b4 <__aeabi_f2d>
}
 80031f6:	bd08      	pop	{r3, pc}
 80031f8:	20000638 	.word	0x20000638

080031fc <atan2>:
double atan2(double y, double x) { 
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATAN2]++;
 80031fe:	4c13      	ldr	r4, [pc, #76]	; (800324c <atan2+0x50>)
double atan2(double y, double x) { 
 8003200:	461f      	mov	r7, r3
    float_usage[USAGE_ATAN2]++;
 8003202:	7fe3      	ldrb	r3, [r4, #31]
double atan2(double y, double x) { 
 8003204:	4616      	mov	r6, r2
    float_usage[USAGE_ATAN2]++;
 8003206:	3301      	adds	r3, #1
 8003208:	77e3      	strb	r3, [r4, #31]
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 800320a:	f7ff faab 	bl	8002764 <__aeabi_d2f>
 800320e:	2100      	movs	r1, #0
 8003210:	4604      	mov	r4, r0
 8003212:	f7ff fbb7 	bl	8002984 <qfp_fcmp>
 8003216:	b158      	cbz	r0, 8003230 <atan2+0x34>
 8003218:	4630      	mov	r0, r6
 800321a:	4639      	mov	r1, r7
 800321c:	f7ff faa2 	bl	8002764 <__aeabi_d2f>
 8003220:	4605      	mov	r5, r0
    return qfp_fatan2( y, x ); 
 8003222:	4629      	mov	r1, r5
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff fd2d 	bl	8002c84 <qfp_fatan2>
 800322a:	f7ff fa43 	bl	80026b4 <__aeabi_f2d>
}
 800322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 8003230:	4639      	mov	r1, r7
 8003232:	4630      	mov	r0, r6
 8003234:	f7ff fa96 	bl	8002764 <__aeabi_d2f>
 8003238:	2100      	movs	r1, #0
 800323a:	4605      	mov	r5, r0
 800323c:	f7ff fba2 	bl	8002984 <qfp_fcmp>
 8003240:	2800      	cmp	r0, #0
 8003242:	d1ee      	bne.n	8003222 <atan2+0x26>
 8003244:	2000      	movs	r0, #0
 8003246:	2100      	movs	r1, #0
}
 8003248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800324a:	bf00      	nop
 800324c:	20000638 	.word	0x20000638

08003250 <atan>:
double atan(double y_over_x) {
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_ATAN]++;
 8003254:	4f24      	ldr	r7, [pc, #144]	; (80032e8 <atan+0x98>)
    if (isnan(y_over_x)) { return NAN; }
 8003256:	4602      	mov	r2, r0
    float_usage[USAGE_ATAN]++;
 8003258:	f897 6020 	ldrb.w	r6, [r7, #32]
    if (isnan(y_over_x)) { return NAN; }
 800325c:	460b      	mov	r3, r1
    float_usage[USAGE_ATAN]++;
 800325e:	3601      	adds	r6, #1
 8003260:	f887 6020 	strb.w	r6, [r7, #32]
double atan(double y_over_x) {
 8003264:	4604      	mov	r4, r0
 8003266:	460d      	mov	r5, r1
    if (isnan(y_over_x)) { return NAN; }
 8003268:	f7ff feae 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800326c:	bb70      	cbnz	r0, 80032cc <atan+0x7c>
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }
 800326e:	4629      	mov	r1, r5
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff fa77 	bl	8002764 <__aeabi_d2f>
 8003276:	2100      	movs	r1, #0
 8003278:	4607      	mov	r7, r0
 800327a:	f7ff fb83 	bl	8002984 <qfp_fcmp>
 800327e:	b308      	cbz	r0, 80032c4 <atan+0x74>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8003280:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003284:	4620      	mov	r0, r4
 8003286:	4631      	mov	r1, r6
 8003288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <atan+0x9c>)
 800328e:	f7ff fe9b 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003292:	b938      	cbnz	r0, 80032a4 <atan+0x54>
 8003294:	4620      	mov	r0, r4
 8003296:	4631      	mov	r1, r6
 8003298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <atan+0x9c>)
 800329e:	f7ff fe47 	bl	8002f30 <__wrap___aeabi_dcmple>
 80032a2:	b138      	cbz	r0, 80032b4 <atan+0x64>
    return atan2( y_over_x, 1 ); 
 80032a4:	4620      	mov	r0, r4
 80032a6:	4629      	mov	r1, r5
}
 80032a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return atan2( y_over_x, 1 ); 
 80032ac:	2200      	movs	r2, #0
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <atan+0xa0>)
 80032b0:	f7ff bfa4 	b.w	80031fc <atan2>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 80032b4:	2100      	movs	r1, #0
 80032b6:	4638      	mov	r0, r7
 80032b8:	f7ff fb64 	bl	8002984 <qfp_fcmp>
 80032bc:	2800      	cmp	r0, #0
 80032be:	dd0b      	ble.n	80032d8 <atan+0x88>
 80032c0:	4c0c      	ldr	r4, [pc, #48]	; (80032f4 <atan+0xa4>)
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <atan+0xa8>)
}
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isnan(y_over_x)) { return NAN; }
 80032cc:	2400      	movs	r4, #0
 80032ce:	4d0b      	ldr	r5, [pc, #44]	; (80032fc <atan+0xac>)
}
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }
 80032d8:	4638      	mov	r0, r7
 80032da:	2100      	movs	r1, #0
 80032dc:	f7ff fb52 	bl	8002984 <qfp_fcmp>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	dadf      	bge.n	80032a4 <atan+0x54>
 80032e4:	e7ec      	b.n	80032c0 <atan+0x70>
 80032e6:	bf00      	nop
 80032e8:	20000638 	.word	0x20000638
 80032ec:	7fefffff 	.word	0x7fefffff
 80032f0:	3ff00000 	.word	0x3ff00000
 80032f4:	54442d18 	.word	0x54442d18
 80032f8:	3ff921fb 	.word	0x3ff921fb
 80032fc:	7ff80000 	.word	0x7ff80000

08003300 <asin>:
double asin(double x) { 
 8003300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float_usage[USAGE_ASIN]++;
 8003304:	4f20      	ldr	r7, [pc, #128]	; (8003388 <asin+0x88>)
    if (isnan(x)) { return NAN; }
 8003306:	4602      	mov	r2, r0
    float_usage[USAGE_ASIN]++;
 8003308:	f897 6021 	ldrb.w	r6, [r7, #33]	; 0x21
    if (isnan(x)) { return NAN; }
 800330c:	460b      	mov	r3, r1
    float_usage[USAGE_ASIN]++;
 800330e:	3601      	adds	r6, #1
 8003310:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
double asin(double x) { 
 8003314:	4604      	mov	r4, r0
 8003316:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003318:	f7ff fe56 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800331c:	b998      	cbnz	r0, 8003346 <asin+0x46>
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800331e:	4629      	mov	r1, r5
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff fa1f 	bl	8002764 <__aeabi_d2f>
 8003326:	2100      	movs	r1, #0
 8003328:	4606      	mov	r6, r0
 800332a:	f7ff fb2b 	bl	8002984 <qfp_fcmp>
 800332e:	b918      	cbnz	r0, 8003338 <asin+0x38>
}
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8003338:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800333c:	4630      	mov	r0, r6
 800333e:	f7ff fb21 	bl	8002984 <qfp_fcmp>
 8003342:	2800      	cmp	r0, #0
 8003344:	dd05      	ble.n	8003352 <asin+0x52>
    if (isnan(x)) { return NAN; }
 8003346:	2400      	movs	r4, #0
 8003348:	4d10      	ldr	r5, [pc, #64]	; (800338c <asin+0x8c>)
}
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8003352:	490f      	ldr	r1, [pc, #60]	; (8003390 <asin+0x90>)
 8003354:	4630      	mov	r0, r6
 8003356:	f7ff fb15 	bl	8002984 <qfp_fcmp>
 800335a:	2800      	cmp	r0, #0
 800335c:	dbf3      	blt.n	8003346 <asin+0x46>
        qfp_fsqrt_fast(
 800335e:	4631      	mov	r1, r6
 8003360:	4630      	mov	r0, r6
 8003362:	f7ff fb1d 	bl	80029a0 <qfp_fmul>
 8003366:	4601      	mov	r1, r0
 8003368:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800336c:	f7ff fae6 	bl	800293c <qfp_fsub>
 8003370:	f7ff fb67 	bl	8002a42 <qfp_fsqrt_fast>
    return atan2(
 8003374:	f7ff f99e 	bl	80026b4 <__aeabi_f2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
}
 8003380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return atan2(
 8003384:	f7ff bf3a 	b.w	80031fc <atan2>
 8003388:	20000638 	.word	0x20000638
 800338c:	7ff80000 	.word	0x7ff80000
 8003390:	bf800000 	.word	0xbf800000

08003394 <sinh>:

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 8003394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_SINH]++;
 8003398:	4f25      	ldr	r7, [pc, #148]	; (8003430 <sinh+0x9c>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800339a:	4602      	mov	r2, r0
    float_usage[USAGE_SINH]++;
 800339c:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
    if (isnan(x)) { return NAN; }
 80033a0:	460b      	mov	r3, r1
    float_usage[USAGE_SINH]++;
 80033a2:	3601      	adds	r6, #1
 80033a4:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
double sinh(double x) {
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80033ac:	f7ff fe0c 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80033b0:	bbb8      	cbnz	r0, 8003422 <sinh+0x8e>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80033b2:	4629      	mov	r1, r5
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff f9d5 	bl	8002764 <__aeabi_d2f>
 80033ba:	2100      	movs	r1, #0
 80033bc:	4606      	mov	r6, r0
 80033be:	f7ff fae1 	bl	8002984 <qfp_fcmp>
 80033c2:	b188      	cbz	r0, 80033e8 <sinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 80033c4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80033c8:	4620      	mov	r0, r4
 80033ca:	4639      	mov	r1, r7
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <sinh+0xa0>)
 80033d2:	f7ff fdf9 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80033d6:	b958      	cbnz	r0, 80033f0 <sinh+0x5c>
 80033d8:	4620      	mov	r0, r4
 80033da:	4639      	mov	r1, r7
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <sinh+0xa0>)
 80033e2:	f7ff fda5 	bl	8002f30 <__wrap___aeabi_dcmple>
 80033e6:	b918      	cbnz	r0, 80033f0 <sinh+0x5c>
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 80033f0:	4630      	mov	r0, r6
 80033f2:	f7ff fc00 	bl	8002bf6 <qfp_fexp>
 80033f6:	4604      	mov	r4, r0
 80033f8:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80033fc:	f7ff fbfb 	bl	8002bf6 <qfp_fexp>
 8003400:	4601      	mov	r1, r0
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff fa9a 	bl	800293c <qfp_fsub>
 8003408:	4601      	mov	r1, r0
 800340a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800340e:	f7ff fac7 	bl	80029a0 <qfp_fmul>
 8003412:	f7ff f94f 	bl	80026b4 <__aeabi_f2d>
 8003416:	4604      	mov	r4, r0
 8003418:	460d      	mov	r5, r1
}
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003422:	2400      	movs	r4, #0
 8003424:	4d04      	ldr	r5, [pc, #16]	; (8003438 <sinh+0xa4>)
}
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800342e:	bf00      	nop
 8003430:	20000638 	.word	0x20000638
 8003434:	7fefffff 	.word	0x7fefffff
 8003438:	7ff80000 	.word	0x7ff80000

0800343c <cosh>:
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_COSH]++;
 8003440:	4f23      	ldr	r7, [pc, #140]	; (80034d0 <cosh+0x94>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003442:	4602      	mov	r2, r0
    float_usage[USAGE_COSH]++;
 8003444:	f897 6024 	ldrb.w	r6, [r7, #36]	; 0x24
    if (isnan(x)) { return NAN; }
 8003448:	460b      	mov	r3, r1
    float_usage[USAGE_COSH]++;
 800344a:	3601      	adds	r6, #1
 800344c:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
double cosh(double x) {
 8003450:	4605      	mov	r5, r0
 8003452:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 8003454:	f7ff fdb8 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003458:	bbb0      	cbnz	r0, 80034c8 <cosh+0x8c>
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 800345a:	4621      	mov	r1, r4
 800345c:	4628      	mov	r0, r5
 800345e:	f7ff f981 	bl	8002764 <__aeabi_d2f>
 8003462:	2100      	movs	r1, #0
 8003464:	4606      	mov	r6, r0
 8003466:	f7ff fa8d 	bl	8002984 <qfp_fcmp>
 800346a:	b1a8      	cbz	r0, 8003498 <cosh+0x5c>

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞
 800346c:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003470:	4628      	mov	r0, r5
 8003472:	4639      	mov	r1, r7
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <cosh+0x98>)
 800347a:	f7ff fda5 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800347e:	b970      	cbnz	r0, 800349e <cosh+0x62>
 8003480:	4628      	mov	r0, r5
 8003482:	4639      	mov	r1, r7
 8003484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <cosh+0x98>)
 800348a:	f7ff fd51 	bl	8002f30 <__wrap___aeabi_dcmple>
 800348e:	b930      	cbnz	r0, 800349e <cosh+0x62>
 8003490:	4628      	mov	r0, r5
 8003492:	4621      	mov	r1, r4
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8003494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 8003498:	490f      	ldr	r1, [pc, #60]	; (80034d8 <cosh+0x9c>)
}
 800349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 800349e:	4630      	mov	r0, r6
 80034a0:	f7ff fba9 	bl	8002bf6 <qfp_fexp>
 80034a4:	4604      	mov	r4, r0
 80034a6:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80034aa:	f7ff fba4 	bl	8002bf6 <qfp_fexp>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fa46 	bl	8002942 <qfp_fadd>
 80034b6:	4601      	mov	r1, r0
 80034b8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80034bc:	f7ff fa70 	bl	80029a0 <qfp_fmul>
 80034c0:	f7ff f8f8 	bl	80026b4 <__aeabi_f2d>
}
 80034c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80034c8:	2000      	movs	r0, #0
 80034ca:	4904      	ldr	r1, [pc, #16]	; (80034dc <cosh+0xa0>)
}
 80034cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d0:	20000638 	.word	0x20000638
 80034d4:	7fefffff 	.word	0x7fefffff
 80034d8:	3ff00000 	.word	0x3ff00000
 80034dc:	7ff80000 	.word	0x7ff80000

080034e0 <tanh>:
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 80034e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TANH]++;
 80034e4:	4f28      	ldr	r7, [pc, #160]	; (8003588 <tanh+0xa8>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80034e6:	4602      	mov	r2, r0
    float_usage[USAGE_TANH]++;
 80034e8:	f897 6025 	ldrb.w	r6, [r7, #37]	; 0x25
    if (isnan(x)) { return NAN; }
 80034ec:	460b      	mov	r3, r1
    float_usage[USAGE_TANH]++;
 80034ee:	3601      	adds	r6, #1
 80034f0:	f887 6025 	strb.w	r6, [r7, #37]	; 0x25
double tanh(double x) {
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80034f8:	f7ff fd66 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d13e      	bne.n	800357e <tanh+0x9e>

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff f92e 	bl	8002764 <__aeabi_d2f>
 8003508:	2100      	movs	r1, #0
 800350a:	4606      	mov	r6, r0
 800350c:	f7ff fa3a 	bl	8002984 <qfp_fcmp>
 8003510:	b1a8      	cbz	r0, 800353e <tanh+0x5e>

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 8003512:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003516:	4620      	mov	r0, r4
 8003518:	4629      	mov	r1, r5
 800351a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <tanh+0xac>)
 8003520:	f7ff fd52 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003524:	b978      	cbnz	r0, 8003546 <tanh+0x66>
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <tanh+0xac>)
 8003530:	f7ff fcfe 	bl	8002f30 <__wrap___aeabi_dcmple>
 8003534:	b938      	cbnz	r0, 8003546 <tanh+0x66>
 8003536:	4d16      	ldr	r5, [pc, #88]	; (8003590 <tanh+0xb0>)
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8003538:	4629      	mov	r1, r5
 800353a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800353e:	4620      	mov	r0, r4
}
 8003540:	4629      	mov	r1, r5
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float e2x = qfp_fexp(  //  e^{2x}
 8003546:	4631      	mov	r1, r6
 8003548:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800354c:	f7ff fa28 	bl	80029a0 <qfp_fmul>
 8003550:	f7ff fb51 	bl	8002bf6 <qfp_fexp>
    return qfp_fdiv_fast(
 8003554:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    float e2x = qfp_fexp(  //  e^{2x}
 8003558:	4605      	mov	r5, r0
    return qfp_fdiv_fast(
 800355a:	f7ff f9ef 	bl	800293c <qfp_fsub>
 800355e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003562:	4604      	mov	r4, r0
 8003564:	4628      	mov	r0, r5
 8003566:	f7ff f9ec 	bl	8002942 <qfp_fadd>
 800356a:	4601      	mov	r1, r0
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff fa40 	bl	80029f2 <qfp_fdiv_fast>
 8003572:	f7ff f89f 	bl	80026b4 <__aeabi_f2d>
 8003576:	460d      	mov	r5, r1
}
 8003578:	4629      	mov	r1, r5
 800357a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 800357e:	4d05      	ldr	r5, [pc, #20]	; (8003594 <tanh+0xb4>)
 8003580:	2000      	movs	r0, #0
}
 8003582:	4629      	mov	r1, r5
 8003584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003588:	20000638 	.word	0x20000638
 800358c:	7fefffff 	.word	0x7fefffff
 8003590:	3ff00000 	.word	0x3ff00000
 8003594:	7ff80000 	.word	0x7ff80000

08003598 <asinh>:

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ASINH]++;
 800359c:	4f24      	ldr	r7, [pc, #144]	; (8003630 <asinh+0x98>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800359e:	4602      	mov	r2, r0
    float_usage[USAGE_ASINH]++;
 80035a0:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    if (isnan(x)) { return NAN; }
 80035a4:	460b      	mov	r3, r1
    float_usage[USAGE_ASINH]++;
 80035a6:	3601      	adds	r6, #1
 80035a8:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
double asinh(double x) {
 80035ac:	4604      	mov	r4, r0
 80035ae:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80035b0:	f7ff fd0a 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80035b4:	bbb0      	cbnz	r0, 8003624 <asinh+0x8c>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80035b6:	4629      	mov	r1, r5
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7ff f8d3 	bl	8002764 <__aeabi_d2f>
 80035be:	2100      	movs	r1, #0
 80035c0:	4607      	mov	r7, r0
 80035c2:	f7ff f9df 	bl	8002984 <qfp_fcmp>
 80035c6:	b188      	cbz	r0, 80035ec <asinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 80035c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80035cc:	4620      	mov	r0, r4
 80035ce:	4631      	mov	r1, r6
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <asinh+0x9c>)
 80035d6:	f7ff fcf7 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80035da:	b958      	cbnz	r0, 80035f4 <asinh+0x5c>
 80035dc:	4620      	mov	r0, r4
 80035de:	4631      	mov	r1, r6
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <asinh+0x9c>)
 80035e6:	f7ff fca3 	bl	8002f30 <__wrap___aeabi_dcmple>
 80035ea:	b918      	cbnz	r0, 80035f4 <asinh+0x5c>
                    1.0f
                )
            )
        )
    );
}
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 80035f4:	4639      	mov	r1, r7
 80035f6:	4638      	mov	r0, r7
 80035f8:	f7ff f9d2 	bl	80029a0 <qfp_fmul>
 80035fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003600:	f7ff f99f 	bl	8002942 <qfp_fadd>
 8003604:	f7ff fa1d 	bl	8002a42 <qfp_fsqrt_fast>
 8003608:	4601      	mov	r1, r0
 800360a:	4638      	mov	r0, r7
 800360c:	f7ff f999 	bl	8002942 <qfp_fadd>
 8003610:	f7ff fb26 	bl	8002c60 <qfp_fln>
 8003614:	f7ff f84e 	bl	80026b4 <__aeabi_f2d>
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
}
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003624:	2400      	movs	r4, #0
 8003626:	4d04      	ldr	r5, [pc, #16]	; (8003638 <asinh+0xa0>)
}
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003630:	20000638 	.word	0x20000638
 8003634:	7fefffff 	.word	0x7fefffff
 8003638:	7ff80000 	.word	0x7ff80000

0800363c <acosh>:
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 800363c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ACOSH]++;
 8003640:	4f26      	ldr	r7, [pc, #152]	; (80036dc <acosh+0xa0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003642:	4602      	mov	r2, r0
    float_usage[USAGE_ACOSH]++;
 8003644:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
    if (isnan(x)) { return NAN; }
 8003648:	460b      	mov	r3, r1
    float_usage[USAGE_ACOSH]++;
 800364a:	3601      	adds	r6, #1
 800364c:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
double acosh(double x) {
 8003650:	4605      	mov	r5, r0
 8003652:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 8003654:	f7ff fcb8 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003658:	bb30      	cbnz	r0, 80036a8 <acosh+0x6c>

    //  If the argument is less than 1, NaN is returned
    if (qfp_fcmp(x, 1) < 0) { return NAN; }
 800365a:	4621      	mov	r1, r4
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff f881 	bl	8002764 <__aeabi_d2f>
 8003662:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003666:	4606      	mov	r6, r0
 8003668:	f7ff f98c 	bl	8002984 <qfp_fcmp>
 800366c:	2800      	cmp	r0, #0
 800366e:	db1b      	blt.n	80036a8 <acosh+0x6c>

    //  If the argument is 1, 0 is returned
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8003670:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff f985 	bl	8002984 <qfp_fcmp>
 800367a:	b360      	cbz	r0, 80036d6 <acosh+0x9a>

    //  If the argument is +∞, it is returned unmodified
    if (isinf(x)) { return x; }
 800367c:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003680:	4628      	mov	r0, r5
 8003682:	4639      	mov	r1, r7
 8003684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <acosh+0xa4>)
 800368a:	f7ff fc9d 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800368e:	b978      	cbnz	r0, 80036b0 <acosh+0x74>
 8003690:	4628      	mov	r0, r5
 8003692:	4639      	mov	r1, r7
 8003694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <acosh+0xa4>)
 800369a:	f7ff fc49 	bl	8002f30 <__wrap___aeabi_dcmple>
 800369e:	b938      	cbnz	r0, 80036b0 <acosh+0x74>
 80036a0:	4628      	mov	r0, r5
 80036a2:	4621      	mov	r1, r4
                    1.0f
                )
            )
        )
    );
}
 80036a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80036a8:	2000      	movs	r0, #0
 80036aa:	490e      	ldr	r1, [pc, #56]	; (80036e4 <acosh+0xa8>)
}
 80036ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 80036b0:	4631      	mov	r1, r6
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7ff f974 	bl	80029a0 <qfp_fmul>
 80036b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036bc:	f7ff f93e 	bl	800293c <qfp_fsub>
 80036c0:	f7ff f9bf 	bl	8002a42 <qfp_fsqrt_fast>
 80036c4:	4601      	mov	r1, r0
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff f93b 	bl	8002942 <qfp_fadd>
 80036cc:	f7ff fac8 	bl	8002c60 <qfp_fln>
 80036d0:	f7fe fff0 	bl	80026b4 <__aeabi_f2d>
 80036d4:	e7ea      	b.n	80036ac <acosh+0x70>
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 80036d6:	4601      	mov	r1, r0
}
 80036d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036dc:	20000638 	.word	0x20000638
 80036e0:	7fefffff 	.word	0x7fefffff
 80036e4:	7ff80000 	.word	0x7ff80000

080036e8 <atanh>:
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATANH]++;
 80036ea:	4f2c      	ldr	r7, [pc, #176]	; (800379c <atanh+0xb4>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80036ec:	4602      	mov	r2, r0
    float_usage[USAGE_ATANH]++;
 80036ee:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
    if (isnan(x)) { return NAN; }
 80036f2:	460b      	mov	r3, r1
    float_usage[USAGE_ATANH]++;
 80036f4:	3601      	adds	r6, #1
 80036f6:	f887 6028 	strb.w	r6, [r7, #40]	; 0x28
double atanh(double x) {
 80036fa:	4604      	mov	r4, r0
 80036fc:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80036fe:	f7ff fc63 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003702:	b9f0      	cbnz	r0, 8003742 <atanh+0x5a>

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003704:	4629      	mov	r1, r5
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff f82c 	bl	8002764 <__aeabi_d2f>
 800370c:	2100      	movs	r1, #0
 800370e:	4606      	mov	r6, r0
 8003710:	f7ff f938 	bl	8002984 <qfp_fcmp>
 8003714:	b910      	cbnz	r0, 800371c <atanh+0x34>
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 800371c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff f92f 	bl	8002984 <qfp_fcmp>
 8003726:	b920      	cbnz	r0, 8003732 <atanh+0x4a>
 8003728:	2400      	movs	r4, #0
 800372a:	4d1d      	ldr	r5, [pc, #116]	; (80037a0 <atanh+0xb8>)
}
 800372c:	4620      	mov	r0, r4
 800372e:	4629      	mov	r1, r5
 8003730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 8003732:	491c      	ldr	r1, [pc, #112]	; (80037a4 <atanh+0xbc>)
 8003734:	4630      	mov	r0, r6
 8003736:	f7ff f925 	bl	8002984 <qfp_fcmp>
 800373a:	b938      	cbnz	r0, 800374c <atanh+0x64>
 800373c:	2400      	movs	r4, #0
 800373e:	4d1a      	ldr	r5, [pc, #104]	; (80037a8 <atanh+0xc0>)
 8003740:	e7e9      	b.n	8003716 <atanh+0x2e>
    if (isnan(x)) { return NAN; }
 8003742:	2400      	movs	r4, #0
 8003744:	4d19      	ldr	r5, [pc, #100]	; (80037ac <atanh+0xc4>)
}
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
 800374c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003750:	4630      	mov	r0, r6
 8003752:	f7ff f917 	bl	8002984 <qfp_fcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	dcf3      	bgt.n	8003742 <atanh+0x5a>
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 800375a:	4912      	ldr	r1, [pc, #72]	; (80037a4 <atanh+0xbc>)
 800375c:	4630      	mov	r0, r6
 800375e:	f7ff f911 	bl	8002984 <qfp_fcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	dbed      	blt.n	8003742 <atanh+0x5a>
    return qfp_fmul(
 8003766:	4631      	mov	r1, r6
 8003768:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800376c:	f7ff f8e9 	bl	8002942 <qfp_fadd>
 8003770:	4631      	mov	r1, r6
 8003772:	4604      	mov	r4, r0
 8003774:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003778:	f7ff f8e0 	bl	800293c <qfp_fsub>
 800377c:	4601      	mov	r1, r0
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff f937 	bl	80029f2 <qfp_fdiv_fast>
 8003784:	f7ff fa6c 	bl	8002c60 <qfp_fln>
 8003788:	4601      	mov	r1, r0
 800378a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800378e:	f7ff f907 	bl	80029a0 <qfp_fmul>
 8003792:	f7fe ff8f 	bl	80026b4 <__aeabi_f2d>
 8003796:	4604      	mov	r4, r0
 8003798:	460d      	mov	r5, r1
 800379a:	e7bc      	b.n	8003716 <atanh+0x2e>
 800379c:	20000638 	.word	0x20000638
 80037a0:	7ff00000 	.word	0x7ff00000
 80037a4:	bf800000 	.word	0xbf800000
 80037a8:	fff00000 	.word	0xfff00000
 80037ac:	7ff80000 	.word	0x7ff80000

080037b0 <trunc>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 80037b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TRUNC]++;
 80037b4:	4f1e      	ldr	r7, [pc, #120]	; (8003830 <trunc+0x80>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80037b6:	4602      	mov	r2, r0
    float_usage[USAGE_TRUNC]++;
 80037b8:	f897 6029 	ldrb.w	r6, [r7, #41]	; 0x29
    if (isnan(x)) { return NAN; }
 80037bc:	460b      	mov	r3, r1
    float_usage[USAGE_TRUNC]++;
 80037be:	3601      	adds	r6, #1
 80037c0:	f887 6029 	strb.w	r6, [r7, #41]	; 0x29
double trunc(double x) { 
 80037c4:	4604      	mov	r4, r0
 80037c6:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80037c8:	f7ff fbfe 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80037cc:	bb68      	cbnz	r0, 800382a <trunc+0x7a>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 80037ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80037d2:	4620      	mov	r0, r4
 80037d4:	4631      	mov	r1, r6
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <trunc+0x84>)
 80037dc:	f7ff fbf4 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80037e0:	b958      	cbnz	r0, 80037fa <trunc+0x4a>
 80037e2:	4620      	mov	r0, r4
 80037e4:	4631      	mov	r1, r6
 80037e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <trunc+0x84>)
 80037ec:	f7ff fba0 	bl	8002f30 <__wrap___aeabi_dcmple>
 80037f0:	b918      	cbnz	r0, 80037fa <trunc+0x4a>

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
    if (floored < 0) { return floored + 1; }
    return floored;
}
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80037fa:	4629      	mov	r1, r5
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7fe ffb1 	bl	8002764 <__aeabi_d2f>
 8003802:	2100      	movs	r1, #0
 8003804:	4606      	mov	r6, r0
 8003806:	f7ff f8bd 	bl	8002984 <qfp_fcmp>
 800380a:	2800      	cmp	r0, #0
 800380c:	d0f1      	beq.n	80037f2 <trunc+0x42>
    int floored = qfp_float2int(x);
 800380e:	4630      	mov	r0, r6
 8003810:	f7ff f952 	bl	8002ab8 <qfp_float2int>
    if (floored < 0) { return floored + 1; }
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	bfb8      	it	lt
 8003818:	1c58      	addlt	r0, r3, #1
    return floored;
 800381a:	f7fe ff39 	bl	8002690 <__aeabi_i2d>
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
}
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 800382a:	2400      	movs	r4, #0
 800382c:	4d02      	ldr	r5, [pc, #8]	; (8003838 <trunc+0x88>)
 800382e:	e7e0      	b.n	80037f2 <trunc+0x42>
 8003830:	20000638 	.word	0x20000638
 8003834:	7fefffff 	.word	0x7fefffff
 8003838:	7ff80000 	.word	0x7ff80000

0800383c <floor>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 800383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_FLOOR]++;
 8003840:	4f1d      	ldr	r7, [pc, #116]	; (80038b8 <floor+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003842:	4602      	mov	r2, r0
    float_usage[USAGE_FLOOR]++;
 8003844:	f897 602a 	ldrb.w	r6, [r7, #42]	; 0x2a
    if (isnan(x)) { return NAN; }
 8003848:	460b      	mov	r3, r1
    float_usage[USAGE_FLOOR]++;
 800384a:	3601      	adds	r6, #1
 800384c:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
double floor(double x) { 
 8003850:	4604      	mov	r4, r0
 8003852:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003854:	f7ff fbb8 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8003858:	bb50      	cbnz	r0, 80038b0 <floor+0x74>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 800385a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800385e:	4620      	mov	r0, r4
 8003860:	4631      	mov	r1, r6
 8003862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <floor+0x80>)
 8003868:	f7ff fbae 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800386c:	b958      	cbnz	r0, 8003886 <floor+0x4a>
 800386e:	4620      	mov	r0, r4
 8003870:	4631      	mov	r1, r6
 8003872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <floor+0x80>)
 8003878:	f7ff fb5a 	bl	8002f30 <__wrap___aeabi_dcmple>
 800387c:	b918      	cbnz	r0, 8003886 <floor+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
    return floored;
}
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003886:	4629      	mov	r1, r5
 8003888:	4620      	mov	r0, r4
 800388a:	f7fe ff6b 	bl	8002764 <__aeabi_d2f>
 800388e:	2100      	movs	r1, #0
 8003890:	4606      	mov	r6, r0
 8003892:	f7ff f877 	bl	8002984 <qfp_fcmp>
 8003896:	2800      	cmp	r0, #0
 8003898:	d0f1      	beq.n	800387e <floor+0x42>
    int floored = qfp_float2int(x);
 800389a:	4630      	mov	r0, r6
 800389c:	f7ff f90c 	bl	8002ab8 <qfp_float2int>
    return floored;
 80038a0:	f7fe fef6 	bl	8002690 <__aeabi_i2d>
 80038a4:	4604      	mov	r4, r0
 80038a6:	460d      	mov	r5, r1
}
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80038b0:	2400      	movs	r4, #0
 80038b2:	4d03      	ldr	r5, [pc, #12]	; (80038c0 <floor+0x84>)
 80038b4:	e7e3      	b.n	800387e <floor+0x42>
 80038b6:	bf00      	nop
 80038b8:	20000638 	.word	0x20000638
 80038bc:	7fefffff 	.word	0x7fefffff
 80038c0:	7ff80000 	.word	0x7ff80000

080038c4 <ceil>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 80038c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_CEIL]++;
 80038c8:	4f1d      	ldr	r7, [pc, #116]	; (8003940 <ceil+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80038ca:	4602      	mov	r2, r0
    float_usage[USAGE_CEIL]++;
 80038cc:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
    if (isnan(x)) { return NAN; }
 80038d0:	460b      	mov	r3, r1
    float_usage[USAGE_CEIL]++;
 80038d2:	3601      	adds	r6, #1
 80038d4:	f887 602b 	strb.w	r6, [r7, #43]	; 0x2b
double ceil(double x) { 
 80038d8:	4604      	mov	r4, r0
 80038da:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80038dc:	f7ff fb74 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80038e0:	bb58      	cbnz	r0, 800393a <ceil+0x76>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 80038e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80038e6:	4620      	mov	r0, r4
 80038e8:	4631      	mov	r1, r6
 80038ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <ceil+0x80>)
 80038f0:	f7ff fb6a 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80038f4:	b958      	cbnz	r0, 800390e <ceil+0x4a>
 80038f6:	4620      	mov	r0, r4
 80038f8:	4631      	mov	r1, r6
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <ceil+0x80>)
 8003900:	f7ff fb16 	bl	8002f30 <__wrap___aeabi_dcmple>
 8003904:	b918      	cbnz	r0, 800390e <ceil+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
    return floored + 1;
}
 8003906:	4620      	mov	r0, r4
 8003908:	4629      	mov	r1, r5
 800390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800390e:	4629      	mov	r1, r5
 8003910:	4620      	mov	r0, r4
 8003912:	f7fe ff27 	bl	8002764 <__aeabi_d2f>
 8003916:	2100      	movs	r1, #0
 8003918:	4606      	mov	r6, r0
 800391a:	f7ff f833 	bl	8002984 <qfp_fcmp>
 800391e:	2800      	cmp	r0, #0
 8003920:	d0f1      	beq.n	8003906 <ceil+0x42>
    int floored = qfp_float2int(x);
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff f8c8 	bl	8002ab8 <qfp_float2int>
    return floored + 1;
 8003928:	3001      	adds	r0, #1
 800392a:	f7fe feb1 	bl	8002690 <__aeabi_i2d>
 800392e:	4604      	mov	r4, r0
 8003930:	460d      	mov	r5, r1
}
 8003932:	4620      	mov	r0, r4
 8003934:	4629      	mov	r1, r5
 8003936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 800393a:	2400      	movs	r4, #0
 800393c:	4d02      	ldr	r5, [pc, #8]	; (8003948 <ceil+0x84>)
 800393e:	e7e2      	b.n	8003906 <ceil+0x42>
 8003940:	20000638 	.word	0x20000638
 8003944:	7fefffff 	.word	0x7fefffff
 8003948:	7ff80000 	.word	0x7ff80000

0800394c <fmod>:
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
    float_usage[USAGE_FMOD]++;
 800394c:	f8df c134 	ldr.w	ip, [pc, #308]	; 8003a84 <fmod+0x138>
double fmod(double x, double y) { 
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_FMOD]++;
 8003954:	f89c 602c 	ldrb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 8003958:	4692      	mov	sl, r2
    float_usage[USAGE_FMOD]++;
 800395a:	3601      	adds	r6, #1
double fmod(double x, double y) { 
 800395c:	461f      	mov	r7, r3
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
    float_usage[USAGE_FMOD]++;
 8003962:	f88c 602c 	strb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 8003966:	4605      	mov	r5, r0
 8003968:	460c      	mov	r4, r1
    if (isnan(x) || isnan(y)) { return NAN; }
 800396a:	f7ff fb2d 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800396e:	bb10      	cbnz	r0, 80039b6 <fmod+0x6a>
 8003970:	4652      	mov	r2, sl
 8003972:	4650      	mov	r0, sl
 8003974:	463b      	mov	r3, r7
 8003976:	4639      	mov	r1, r7
 8003978:	f7ff fb26 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800397c:	b9d8      	cbnz	r0, 80039b6 <fmod+0x6a>

    // If x is ±0 and y is not zero, ±0 is returned
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 800397e:	4621      	mov	r1, r4
 8003980:	4628      	mov	r0, r5
 8003982:	f7fe feef 	bl	8002764 <__aeabi_d2f>
 8003986:	2100      	movs	r1, #0
 8003988:	4680      	mov	r8, r0
 800398a:	f7fe fffb 	bl	8002984 <qfp_fcmp>
 800398e:	4606      	mov	r6, r0
 8003990:	b398      	cbz	r0, 80039fa <fmod+0xae>

    // If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
    if (isinf(x) && !isnan(y)) { return NAN; }
 8003992:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8003996:	4628      	mov	r0, r5
 8003998:	4631      	mov	r1, r6
 800399a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <fmod+0x130>)
 80039a0:	f7ff fb12 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80039a4:	b958      	cbnz	r0, 80039be <fmod+0x72>
 80039a6:	4628      	mov	r0, r5
 80039a8:	4631      	mov	r1, r6
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ae:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <fmod+0x130>)
 80039b0:	f7ff fabe 	bl	8002f30 <__wrap___aeabi_dcmple>
 80039b4:	b918      	cbnz	r0, 80039be <fmod+0x72>
    if (isnan(x) || isnan(y)) { return NAN; }
 80039b6:	2000      	movs	r0, #0
 80039b8:	4931      	ldr	r1, [pc, #196]	; (8003a80 <fmod+0x134>)
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 80039ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (qfp_fcmp(y, 0) == 0 && !isnan(x)) { return NAN; }
 80039be:	4639      	mov	r1, r7
 80039c0:	4650      	mov	r0, sl
 80039c2:	f7fe fecf 	bl	8002764 <__aeabi_d2f>
 80039c6:	2100      	movs	r1, #0
 80039c8:	f7fe ffdc 	bl	8002984 <qfp_fcmp>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0f2      	beq.n	80039b6 <fmod+0x6a>
    if (isinf(y) && !isinf(x)) { return x; }
 80039d0:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 80039d4:	4650      	mov	r0, sl
 80039d6:	4639      	mov	r1, r7
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <fmod+0x130>)
 80039de:	f7ff faf3 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 80039e2:	b9b8      	cbnz	r0, 8003a14 <fmod+0xc8>
 80039e4:	4650      	mov	r0, sl
 80039e6:	4639      	mov	r1, r7
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <fmod+0x130>)
 80039ee:	f7ff fa9f 	bl	8002f30 <__wrap___aeabi_dcmple>
 80039f2:	b978      	cbnz	r0, 8003a14 <fmod+0xc8>
 80039f4:	4628      	mov	r0, r5
 80039f6:	4621      	mov	r1, r4
 80039f8:	e7df      	b.n	80039ba <fmod+0x6e>
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 80039fa:	4639      	mov	r1, r7
 80039fc:	4650      	mov	r0, sl
 80039fe:	f7fe feb1 	bl	8002764 <__aeabi_d2f>
 8003a02:	2100      	movs	r1, #0
 8003a04:	f7fe ffbe 	bl	8002984 <qfp_fcmp>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0c2      	beq.n	8003992 <fmod+0x46>
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	4631      	mov	r1, r6
}
 8003a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
 8003a14:	4628      	mov	r0, r5
 8003a16:	4631      	mov	r1, r6
 8003a18:	f7fe fea4 	bl	8002764 <__aeabi_d2f>
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4650      	mov	r0, sl
 8003a22:	f7fe fe9f 	bl	8002764 <__aeabi_d2f>
 8003a26:	4605      	mov	r5, r0
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7fe ffe1 	bl	80029f2 <qfp_fdiv_fast>
 8003a30:	f7fe fe40 	bl	80026b4 <__aeabi_f2d>
 8003a34:	f7ff febc 	bl	80037b0 <trunc>
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8003a38:	f7fe fe94 	bl	8002764 <__aeabi_d2f>
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fe ffaf 	bl	80029a0 <qfp_fmul>
 8003a42:	4601      	mov	r1, r0
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7fe ff79 	bl	800293c <qfp_fsub>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003a4a:	2100      	movs	r1, #0
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8003a4c:	4604      	mov	r4, r0
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003a4e:	f7fe ff99 	bl	8002984 <qfp_fcmp>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	db0b      	blt.n	8003a6e <fmod+0x122>
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
 8003a56:	4640      	mov	r0, r8
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f7fe ff93 	bl	8002984 <qfp_fcmp>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	bfb8      	it	lt
 8003a62:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7fe fe24 	bl	80026b4 <__aeabi_f2d>
 8003a6c:	e7a5      	b.n	80039ba <fmod+0x6e>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003a6e:	4620      	mov	r0, r4
 8003a70:	4629      	mov	r1, r5
 8003a72:	f7fe ff66 	bl	8002942 <qfp_fadd>
 8003a76:	4604      	mov	r4, r0
 8003a78:	e7ed      	b.n	8003a56 <fmod+0x10a>
 8003a7a:	bf00      	nop
 8003a7c:	7fefffff 	.word	0x7fefffff
 8003a80:	7ff80000 	.word	0x7ff80000
 8003a84:	20000638 	.word	0x20000638

08003a88 <_strtol_l.isra.0>:
 8003a88:	4684      	mov	ip, r0
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	4f39      	ldr	r7, [pc, #228]	; (8003b78 <_strtol_l.isra.0+0xf0>)
 8003a92:	4605      	mov	r5, r0
 8003a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a98:	5de6      	ldrb	r6, [r4, r7]
 8003a9a:	f016 0608 	ands.w	r6, r6, #8
 8003a9e:	d10a      	bne.n	8003ab6 <_strtol_l.isra.0+0x2e>
 8003aa0:	2c2d      	cmp	r4, #45	; 0x2d
 8003aa2:	d10a      	bne.n	8003aba <_strtol_l.isra.0+0x32>
 8003aa4:	2601      	movs	r6, #1
 8003aa6:	782c      	ldrb	r4, [r5, #0]
 8003aa8:	1c85      	adds	r5, r0, #2
 8003aaa:	b15b      	cbz	r3, 8003ac4 <_strtol_l.isra.0+0x3c>
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d113      	bne.n	8003ad8 <_strtol_l.isra.0+0x50>
 8003ab0:	2c30      	cmp	r4, #48	; 0x30
 8003ab2:	d009      	beq.n	8003ac8 <_strtol_l.isra.0+0x40>
 8003ab4:	e010      	b.n	8003ad8 <_strtol_l.isra.0+0x50>
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	e7eb      	b.n	8003a92 <_strtol_l.isra.0+0xa>
 8003aba:	2c2b      	cmp	r4, #43	; 0x2b
 8003abc:	bf04      	itt	eq
 8003abe:	782c      	ldrbeq	r4, [r5, #0]
 8003ac0:	1c85      	addeq	r5, r0, #2
 8003ac2:	e7f2      	b.n	8003aaa <_strtol_l.isra.0+0x22>
 8003ac4:	2c30      	cmp	r4, #48	; 0x30
 8003ac6:	d12a      	bne.n	8003b1e <_strtol_l.isra.0+0x96>
 8003ac8:	7828      	ldrb	r0, [r5, #0]
 8003aca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003ace:	2858      	cmp	r0, #88	; 0x58
 8003ad0:	d14a      	bne.n	8003b68 <_strtol_l.isra.0+0xe0>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	786c      	ldrb	r4, [r5, #1]
 8003ad6:	3502      	adds	r5, #2
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8003ae0:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8003ae4:	f04f 0e00 	mov.w	lr, #0
 8003ae8:	fbb8 f9f3 	udiv	r9, r8, r3
 8003aec:	4670      	mov	r0, lr
 8003aee:	fb03 8a19 	mls	sl, r3, r9, r8
 8003af2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003af6:	2f09      	cmp	r7, #9
 8003af8:	d813      	bhi.n	8003b22 <_strtol_l.isra.0+0x9a>
 8003afa:	463c      	mov	r4, r7
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	dd1f      	ble.n	8003b40 <_strtol_l.isra.0+0xb8>
 8003b00:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8003b04:	d008      	beq.n	8003b18 <_strtol_l.isra.0+0x90>
 8003b06:	4581      	cmp	r9, r0
 8003b08:	d317      	bcc.n	8003b3a <_strtol_l.isra.0+0xb2>
 8003b0a:	d101      	bne.n	8003b10 <_strtol_l.isra.0+0x88>
 8003b0c:	45a2      	cmp	sl, r4
 8003b0e:	db14      	blt.n	8003b3a <_strtol_l.isra.0+0xb2>
 8003b10:	f04f 0e01 	mov.w	lr, #1
 8003b14:	fb00 4003 	mla	r0, r0, r3, r4
 8003b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b1c:	e7e9      	b.n	8003af2 <_strtol_l.isra.0+0x6a>
 8003b1e:	230a      	movs	r3, #10
 8003b20:	e7da      	b.n	8003ad8 <_strtol_l.isra.0+0x50>
 8003b22:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003b26:	2f19      	cmp	r7, #25
 8003b28:	d801      	bhi.n	8003b2e <_strtol_l.isra.0+0xa6>
 8003b2a:	3c37      	subs	r4, #55	; 0x37
 8003b2c:	e7e6      	b.n	8003afc <_strtol_l.isra.0+0x74>
 8003b2e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003b32:	2f19      	cmp	r7, #25
 8003b34:	d804      	bhi.n	8003b40 <_strtol_l.isra.0+0xb8>
 8003b36:	3c57      	subs	r4, #87	; 0x57
 8003b38:	e7e0      	b.n	8003afc <_strtol_l.isra.0+0x74>
 8003b3a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003b3e:	e7eb      	b.n	8003b18 <_strtol_l.isra.0+0x90>
 8003b40:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8003b44:	d106      	bne.n	8003b54 <_strtol_l.isra.0+0xcc>
 8003b46:	2322      	movs	r3, #34	; 0x22
 8003b48:	4640      	mov	r0, r8
 8003b4a:	f8cc 3000 	str.w	r3, [ip]
 8003b4e:	b93a      	cbnz	r2, 8003b60 <_strtol_l.isra.0+0xd8>
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	b106      	cbz	r6, 8003b58 <_strtol_l.isra.0+0xd0>
 8003b56:	4240      	negs	r0, r0
 8003b58:	b15a      	cbz	r2, 8003b72 <_strtol_l.isra.0+0xea>
 8003b5a:	f1be 0f00 	cmp.w	lr, #0
 8003b5e:	d000      	beq.n	8003b62 <_strtol_l.isra.0+0xda>
 8003b60:	1e69      	subs	r1, r5, #1
 8003b62:	6011      	str	r1, [r2, #0]
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	2430      	movs	r4, #48	; 0x30
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1b4      	bne.n	8003ad8 <_strtol_l.isra.0+0x50>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	e7b2      	b.n	8003ad8 <_strtol_l.isra.0+0x50>
 8003b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b76:	bf00      	nop
 8003b78:	0800574b 	.word	0x0800574b

08003b7c <strtol>:
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	460a      	mov	r2, r1
 8003b80:	4601      	mov	r1, r0
 8003b82:	4802      	ldr	r0, [pc, #8]	; (8003b8c <strtol+0x10>)
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	f7ff bf7f 	b.w	8003a88 <_strtol_l.isra.0>
 8003b8a:	bf00      	nop
 8003b8c:	20000428 	.word	0x20000428

08003b90 <memcpy>:
 8003b90:	440a      	add	r2, r1
 8003b92:	4291      	cmp	r1, r2
 8003b94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b98:	d100      	bne.n	8003b9c <memcpy+0xc>
 8003b9a:	4770      	bx	lr
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba2:	4291      	cmp	r1, r2
 8003ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba8:	d1f9      	bne.n	8003b9e <memcpy+0xe>
 8003baa:	bd10      	pop	{r4, pc}

08003bac <strcmp>:
 8003bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb4:	2a01      	cmp	r2, #1
 8003bb6:	bf28      	it	cs
 8003bb8:	429a      	cmpcs	r2, r3
 8003bba:	d0f7      	beq.n	8003bac <strcmp>
 8003bbc:	1ad0      	subs	r0, r2, r3
 8003bbe:	4770      	bx	lr

08003bc0 <strlen>:
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d1fb      	bne.n	8003bc2 <strlen+0x2>
 8003bca:	1a18      	subs	r0, r3, r0
 8003bcc:	3801      	subs	r0, #1
 8003bce:	4770      	bx	lr

08003bd0 <memcmp>:
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	3901      	subs	r1, #1
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4290      	cmp	r0, r2
 8003bd8:	d101      	bne.n	8003bde <memcmp+0xe>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003be2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	d0f5      	beq.n	8003bd6 <memcmp+0x6>
 8003bea:	1b18      	subs	r0, r3, r4
 8003bec:	bd10      	pop	{r4, pc}

08003bee <memmove>:
 8003bee:	4288      	cmp	r0, r1
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	eb01 0302 	add.w	r3, r1, r2
 8003bf6:	d803      	bhi.n	8003c00 <memmove+0x12>
 8003bf8:	1e42      	subs	r2, r0, #1
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d10c      	bne.n	8003c18 <memmove+0x2a>
 8003bfe:	bd10      	pop	{r4, pc}
 8003c00:	4298      	cmp	r0, r3
 8003c02:	d2f9      	bcs.n	8003bf8 <memmove+0xa>
 8003c04:	1881      	adds	r1, r0, r2
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	42d3      	cmn	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memmove+0x20>
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c16:	e7f7      	b.n	8003c08 <memmove+0x1a>
 8003c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c20:	e7eb      	b.n	8003bfa <memmove+0xc>

08003c22 <memset>:
 8003c22:	4603      	mov	r3, r0
 8003c24:	4402      	add	r2, r0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d100      	bne.n	8003c2c <memset+0xa>
 8003c2a:	4770      	bx	lr
 8003c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c30:	e7f9      	b.n	8003c26 <memset+0x4>

08003c32 <strstr>:
 8003c32:	780a      	ldrb	r2, [r1, #0]
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	b96a      	cbnz	r2, 8003c54 <strstr+0x22>
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d109      	bne.n	8003c52 <strstr+0x20>
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4605      	mov	r5, r0
 8003c42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c46:	b903      	cbnz	r3, 8003c4a <strstr+0x18>
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c4e:	429e      	cmp	r6, r3
 8003c50:	d0f7      	beq.n	8003c42 <strstr+0x10>
 8003c52:	3001      	adds	r0, #1
 8003c54:	7803      	ldrb	r3, [r0, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ef      	bne.n	8003c3a <strstr+0x8>
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}

08003c5e <strncpy>:
 8003c5e:	b570      	push	{r4, r5, r6, lr}
 8003c60:	4604      	mov	r4, r0
 8003c62:	b902      	cbnz	r2, 8003c66 <strncpy+0x8>
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
 8003c66:	4623      	mov	r3, r4
 8003c68:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003c6c:	1e56      	subs	r6, r2, #1
 8003c6e:	f803 5b01 	strb.w	r5, [r3], #1
 8003c72:	b91d      	cbnz	r5, 8003c7c <strncpy+0x1e>
 8003c74:	4414      	add	r4, r2
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	d103      	bne.n	8003c82 <strncpy+0x24>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	461c      	mov	r4, r3
 8003c7e:	4632      	mov	r2, r6
 8003c80:	e7ef      	b.n	8003c62 <strncpy+0x4>
 8003c82:	f803 5b01 	strb.w	r5, [r3], #1
 8003c86:	e7f6      	b.n	8003c76 <strncpy+0x18>

08003c88 <_ZL12debug_appendPKcj>:
        if (debugBufferLength == 0) { return; }  //  No more chunks.
        debug_flush_internal(true);
    }
}

static void debug_append(const char *buffer, unsigned int length) {
 8003c88:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    //  If can't fit into buffer, flush first.
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003c8a:	4d0c      	ldr	r5, [pc, #48]	; (8003cbc <_ZL12debug_appendPKcj+0x34>)
 8003c8c:	882b      	ldrh	r3, [r5, #0]
 8003c8e:	440b      	add	r3, r1
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d304      	bcc.n	8003ca0 <_ZL12debug_appendPKcj+0x18>
        //// debug_flush();
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003c96:	882b      	ldrh	r3, [r5, #0]
 8003c98:	440b      	add	r3, r1
 8003c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9e:	d20b      	bcs.n	8003cb8 <_ZL12debug_appendPKcj+0x30>
 8003ca0:	460c      	mov	r4, r1
            //  Still can't fit after flushing.  Quit.
            return;
        }
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8003ca2:	882b      	ldrh	r3, [r5, #0]
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <_ZL12debug_appendPKcj+0x38>)
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	18d0      	adds	r0, r2, r3
 8003caa:	4622      	mov	r2, r4
 8003cac:	f7ff ff70 	bl	8003b90 <memcpy>
    debugBufferLength += length;
 8003cb0:	8829      	ldrh	r1, [r5, #0]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	b289      	uxth	r1, r1
 8003cb6:	8029      	strh	r1, [r5, #0]
}
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000087c 	.word	0x2000087c
 8003cc0:	20000668 	.word	0x20000668

08003cc4 <debug_print.part.3>:

void debug_write(uint8_t ch) {
	debug_append((const char *) &ch, 1);
}

void debug_print(const char *s) {
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	4604      	mov	r4, r0
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
 8003cc8:	f7ff ff7a 	bl	8003bc0 <strlen>
 8003ccc:	4601      	mov	r1, r0
 8003cce:	4620      	mov	r0, r4
}
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	debug_append(s, strlen(s));
 8003cd4:	f7ff bfd8 	b.w	8003c88 <_ZL12debug_appendPKcj>

08003cd8 <_Z20debug_flush_internalb.part.2>:
void debug_flush_internal(bool forced) {
 8003cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <_Z20debug_flush_internalb.part.2+0x84>)
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003cde:	4f20      	ldr	r7, [pc, #128]	; (8003d60 <_Z20debug_flush_internalb.part.2+0x88>)
void debug_flush_internal(bool forced) {
 8003ce0:	b085      	sub	sp, #20
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003ce2:	883d      	ldrh	r5, [r7, #0]
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine
 8003cea:	b9c3      	cbnz	r3, 8003d1e <_Z20debug_flush_internalb.part.2+0x46>
 8003cec:	b2ad      	uxth	r5, r5
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8003cee:	2d3c      	cmp	r5, #60	; 0x3c
 8003cf0:	462e      	mov	r6, r5
 8003cf2:	bf28      	it	cs
 8003cf4:	263c      	movcs	r6, #60	; 0x3c
    if (length == 0) { return 0; }
 8003cf6:	b9ad      	cbnz	r5, 8003d24 <_Z20debug_flush_internalb.part.2+0x4c>
 8003cf8:	4c1a      	ldr	r4, [pc, #104]	; (8003d64 <_Z20debug_flush_internalb.part.2+0x8c>)
            func(buf, outlen);
 8003cfa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003d6c <_Z20debug_flush_internalb.part.2+0x94>
 8003cfe:	f104 0810 	add.w	r8, r4, #16
        if (output_funcs[i]) {
 8003d02:	f854 3b04 	ldr.w	r3, [r4], #4
 8003d06:	b113      	cbz	r3, 8003d0e <_Z20debug_flush_internalb.part.2+0x36>
            func(buf, outlen);
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4648      	mov	r0, r9
 8003d0c:	4798      	blx	r3
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d0e:	4544      	cmp	r4, r8
 8003d10:	d1f7      	bne.n	8003d02 <_Z20debug_flush_internalb.part.2+0x2a>
    if (outlen == 0) {
 8003d12:	b125      	cbz	r5, 8003d1e <_Z20debug_flush_internalb.part.2+0x46>
    } else if (outlen >= debugBufferLength) {
 8003d14:	883b      	ldrh	r3, [r7, #0]
 8003d16:	429e      	cmp	r6, r3
 8003d18:	d313      	bcc.n	8003d42 <_Z20debug_flush_internalb.part.2+0x6a>
        debugBufferLength = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	803b      	strh	r3, [r7, #0]
}
 8003d1e:	b005      	add	sp, #20
 8003d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    args[0] = (uint32_t)fh;
 8003d24:	2102      	movs	r1, #2
    if (!logEnabled) return -1;
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <_Z20debug_flush_internalb.part.2+0x90>)
    args[1] = (uint32_t)buffer;
 8003d28:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <_Z20debug_flush_internalb.part.2+0x94>)
    if (!logEnabled) return -1;
 8003d2a:	781b      	ldrb	r3, [r3, #0]
    args[2] = (uint32_t)length;
 8003d2c:	9603      	str	r6, [sp, #12]
    args[1] = (uint32_t)buffer;
 8003d2e:	e9cd 1201 	strd	r1, r2, [sp, #4]
    if (!logEnabled) return -1;
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0e0      	beq.n	8003cf8 <_Z20debug_flush_internalb.part.2+0x20>
	);
 8003d36:	2305      	movs	r3, #5
 8003d38:	aa01      	add	r2, sp, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	beab      	bkpt	0x00ab
 8003d40:	e7da      	b.n	8003cf8 <_Z20debug_flush_internalb.part.2+0x20>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8003d42:	883a      	ldrh	r2, [r7, #0]
 8003d44:	4809      	ldr	r0, [pc, #36]	; (8003d6c <_Z20debug_flush_internalb.part.2+0x94>)
 8003d46:	1b92      	subs	r2, r2, r6
 8003d48:	1981      	adds	r1, r0, r6
 8003d4a:	f7ff ff21 	bl	8003b90 <memcpy>
    debugBufferLength -= outlen;
 8003d4e:	883b      	ldrh	r3, [r7, #0]
 8003d50:	1b9e      	subs	r6, r3, r6
 8003d52:	b2b6      	uxth	r6, r6
 8003d54:	803e      	strh	r6, [r7, #0]
}
 8003d56:	b005      	add	sp, #20
 8003d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d5c:	e000ed04 	.word	0xe000ed04
 8003d60:	2000087c 	.word	0x2000087c
 8003d64:	2000086c 	.word	0x2000086c
 8003d68:	2000087e 	.word	0x2000087e
 8003d6c:	20000668 	.word	0x20000668

08003d70 <enable_log>:
void enable_log(void) { logEnabled = true; }
 8003d70:	2201      	movs	r2, #1
 8003d72:	4b01      	ldr	r3, [pc, #4]	; (8003d78 <enable_log+0x8>)
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	4770      	bx	lr
 8003d78:	2000087e 	.word	0x2000087e

08003d7c <logger_add_output>:
    if (!func) { return -1; }
 8003d7c:	b1f0      	cbz	r0, 8003dbc <logger_add_output+0x40>
 8003d7e:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <logger_add_output+0x48>)
int logger_add_output(logger_output_func *func) {
 8003d80:	b430      	push	{r4, r5}
    if (!func) { return -1; }
 8003d82:	4613      	mov	r3, r2
 8003d84:	4615      	mov	r5, r2
 8003d86:	f102 0410 	add.w	r4, r2, #16
        if (output_funcs[i] == func) {
 8003d8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8003d8e:	4281      	cmp	r1, r0
 8003d90:	d00c      	beq.n	8003dac <logger_add_output+0x30>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d92:	42a3      	cmp	r3, r4
 8003d94:	d1f9      	bne.n	8003d8a <logger_add_output+0xe>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d96:	2300      	movs	r3, #0
        if (!output_funcs[i]) {
 8003d98:	f852 1b04 	ldr.w	r1, [r2], #4
 8003d9c:	b149      	cbz	r1, 8003db2 <logger_add_output+0x36>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d9e:	3301      	adds	r3, #1
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d1f9      	bne.n	8003d98 <logger_add_output+0x1c>
}
 8003da4:	bc30      	pop	{r4, r5}
    if (!func) { return -1; }
 8003da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003daa:	4770      	bx	lr
            return 0;  //  Already added.
 8003dac:	2000      	movs	r0, #0
}
 8003dae:	bc30      	pop	{r4, r5}
 8003db0:	4770      	bx	lr
            output_funcs[i] = func;
 8003db2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
            return 0;
 8003db6:	4608      	mov	r0, r1
}
 8003db8:	bc30      	pop	{r4, r5}
 8003dba:	4770      	bx	lr
    if (!func) { return -1; }
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000086c 	.word	0x2000086c

08003dc8 <debug_flush>:
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <debug_flush+0x10>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b903      	cbnz	r3, 8003dd2 <debug_flush+0xa>
}
 8003dd0:	4770      	bx	lr
 8003dd2:	f7ff bf81 	b.w	8003cd8 <_Z20debug_flush_internalb.part.2>
 8003dd6:	bf00      	nop
 8003dd8:	2000087c 	.word	0x2000087c

08003ddc <debug_force_flush>:
void debug_force_flush(void) {
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	2464      	movs	r4, #100	; 0x64
 8003de0:	4d07      	ldr	r5, [pc, #28]	; (8003e00 <debug_force_flush+0x24>)
 8003de2:	e001      	b.n	8003de8 <debug_force_flush+0xc>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003de4:	3c01      	subs	r4, #1
 8003de6:	d00a      	beq.n	8003dfe <debug_force_flush+0x22>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8003de8:	882b      	ldrh	r3, [r5, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b13b      	cbz	r3, 8003dfe <debug_force_flush+0x22>
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003dee:	882b      	ldrh	r3, [r5, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f6      	beq.n	8003de4 <debug_force_flush+0x8>
 8003df6:	f7ff ff6f 	bl	8003cd8 <_Z20debug_flush_internalb.part.2>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003dfa:	3c01      	subs	r4, #1
 8003dfc:	d1f4      	bne.n	8003de8 <debug_force_flush+0xc>
}
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	2000087c 	.word	0x2000087c

08003e04 <_Z11debug_printj>:
void debug_print(size_t l) {
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	210a      	movs	r1, #10
    int length = 0;
 8003e08:	2500      	movs	r5, #0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <_Z11debug_printj+0x7c>)
 8003e0c:	4f1d      	ldr	r7, [pc, #116]	; (8003e84 <_Z11debug_printj+0x80>)
void debug_print(size_t l) {
 8003e0e:	b085      	sub	sp, #20
        char digit = '0' + (char)(l / divisor);
 8003e10:	fbb0 f4f2 	udiv	r4, r0, r2
 8003e14:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003e18:	b2db      	uxtb	r3, r3
        if (digit > '9') {
 8003e1a:	2b39      	cmp	r3, #57	; 0x39
 8003e1c:	d82a      	bhi.n	8003e74 <_Z11debug_printj+0x70>
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003e1e:	fba7 c602 	umull	ip, r6, r7, r2
        if (digit > '0' || length > 0 || prefixByZero) {
 8003e22:	2b30      	cmp	r3, #48	; 0x30
        l = l % divisor;
 8003e24:	fb02 0014 	mls	r0, r2, r4, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003e28:	ea4f 02d6 	mov.w	r2, r6, lsr #3
        if (digit > '0' || length > 0 || prefixByZero) {
 8003e2c:	d800      	bhi.n	8003e30 <_Z11debug_printj+0x2c>
 8003e2e:	b135      	cbz	r5, 8003e3e <_Z11debug_printj+0x3a>
            if (length < size) {
 8003e30:	2d0a      	cmp	r5, #10
 8003e32:	dc04      	bgt.n	8003e3e <_Z11debug_printj+0x3a>
                buffer[length++] = digit;
 8003e34:	ac04      	add	r4, sp, #16
 8003e36:	442c      	add	r4, r5
 8003e38:	f804 3c0c 	strb.w	r3, [r4, #-12]
 8003e3c:	3501      	adds	r5, #1
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003e3e:	3901      	subs	r1, #1
 8003e40:	d1e6      	bne.n	8003e10 <_Z11debug_printj+0xc>
    if (length == 0) { buffer[length++] = '0'; };
 8003e42:	b9a5      	cbnz	r5, 8003e6e <_Z11debug_printj+0x6a>
 8003e44:	2330      	movs	r3, #48	; 0x30
 8003e46:	2501      	movs	r5, #1
 8003e48:	f88d 3004 	strb.w	r3, [sp, #4]
    if (length < size) buffer[length] = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	aa04      	add	r2, sp, #16
 8003e50:	4415      	add	r5, r2
 8003e52:	f805 3c0c 	strb.w	r3, [r5, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003e56:	2300      	movs	r3, #0
    debug_append(buffer, strlen(buffer));
 8003e58:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003e5a:	f88d 300e 	strb.w	r3, [sp, #14]
    debug_append(buffer, strlen(buffer));
 8003e5e:	f7ff feaf 	bl	8003bc0 <strlen>
 8003e62:	4601      	mov	r1, r0
 8003e64:	a801      	add	r0, sp, #4
 8003e66:	f7ff ff0f 	bl	8003c88 <_ZL12debug_appendPKcj>
}
 8003e6a:	b005      	add	sp, #20
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (length < size) buffer[length] = 0;
 8003e6e:	2d0a      	cmp	r5, #10
 8003e70:	dcf1      	bgt.n	8003e56 <_Z11debug_printj+0x52>
 8003e72:	e7eb      	b.n	8003e4c <_Z11debug_printj+0x48>
 8003e74:	4804      	ldr	r0, [pc, #16]	; (8003e88 <_Z11debug_printj+0x84>)
 8003e76:	f7ff ff25 	bl	8003cc4 <debug_print.part.3>
}
 8003e7a:	b005      	add	sp, #20
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	3b9aca00 	.word	0x3b9aca00
 8003e84:	cccccccd 	.word	0xcccccccd
 8003e88:	08005854 	.word	0x08005854

08003e8c <_Z11debug_printi>:
    if (i == 0) { debug_append("0", 1); } 
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d00d      	beq.n	8003eac <_Z11debug_printi+0x20>
    else if (i >= 0) { debug_print((size_t) i); }
 8003e90:	db01      	blt.n	8003e96 <_Z11debug_printi+0xa>
        debug_print((size_t) -i);
 8003e92:	f7ff bfb7 	b.w	8003e04 <_Z11debug_printj>
void debug_print(int i) {
 8003e96:	b510      	push	{r4, lr}
 8003e98:	461c      	mov	r4, r3
        debug_append("-", 1);
 8003e9a:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <_Z11debug_printi+0x28>)
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	f7ff fef3 	bl	8003c88 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 8003ea2:	4260      	negs	r0, r4
}
 8003ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_print((size_t) -i);
 8003ea8:	f7ff bfac 	b.w	8003e04 <_Z11debug_printj>
    if (i == 0) { debug_append("0", 1); } 
 8003eac:	2101      	movs	r1, #1
 8003eae:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <_Z11debug_printi+0x2c>)
 8003eb0:	f7ff beea 	b.w	8003c88 <_ZL12debug_appendPKcj>
 8003eb4:	08005850 	.word	0x08005850
 8003eb8:	0800584c 	.word	0x0800584c

08003ebc <debug_print>:
    if (s[0] == 0) return;
 8003ebc:	7803      	ldrb	r3, [r0, #0]
 8003ebe:	b903      	cbnz	r3, 8003ec2 <debug_print+0x6>
}
 8003ec0:	4770      	bx	lr
 8003ec2:	f7ff beff 	b.w	8003cc4 <debug_print.part.3>
 8003ec6:	bf00      	nop

08003ec8 <debug_println>:

void debug_println(const char *s) {
 8003ec8:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 8003eca:	7803      	ldrb	r3, [r0, #0]
 8003ecc:	b10b      	cbz	r3, 8003ed2 <debug_println+0xa>
 8003ece:	f7ff fef9 	bl	8003cc4 <debug_print.part.3>
    debug_append("\r\n", 2);
}
 8003ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <debug_println+0x18>)
 8003eda:	f7ff bed5 	b.w	8003c88 <_ZL12debug_appendPKcj>
 8003ede:	bf00      	nop
 8003ee0:	08005860 	.word	0x08005860

08003ee4 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 8003ee4:	b508      	push	{r3, lr}
    debug_print(i);
 8003ee6:	f7ff ffd1 	bl	8003e8c <_Z11debug_printi>
    debug_append("\r\n", 2);
}
 8003eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <_Z13debug_printlni+0x14>)
 8003ef2:	f7ff bec9 	b.w	8003c88 <_ZL12debug_appendPKcj>
 8003ef6:	bf00      	nop
 8003ef8:	08005860 	.word	0x08005860

08003efc <debug_print_unsigned>:
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
void debug_print_unsigned(size_t l) { debug_print(l); }
 8003efc:	f7ff bf82 	b.w	8003e04 <_Z11debug_printj>

08003f00 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8003f00:	b500      	push	{lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8003f02:	0903      	lsrs	r3, r0, #4
 8003f04:	f103 0230 	add.w	r2, r3, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003f08:	2a39      	cmp	r2, #57	; 0x39
 8003f0a:	bfc8      	it	gt
 8003f0c:	f103 0257 	addgt.w	r2, r3, #87	; 0x57
void debug_printhex(uint8_t v) {
 8003f10:	b083      	sub	sp, #12
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003f12:	bfc8      	it	gt
 8003f14:	b252      	sxtbgt	r2, r2
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 8003f16:	f88d 2004 	strb.w	r2, [sp, #4]
            }
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
 8003f1a:	2200      	movs	r2, #0
        char digit = '0' + (char)(v / divisor);
 8003f1c:	f000 000f 	and.w	r0, r0, #15
 8003f20:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003f24:	2b39      	cmp	r3, #57	; 0x39
 8003f26:	bfc4      	itt	gt
 8003f28:	3057      	addgt	r0, #87	; 0x57
 8003f2a:	b243      	sxtbgt	r3, r0
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
 8003f2c:	a801      	add	r0, sp, #4
                buffer[length++] = digit;
 8003f2e:	f88d 3005 	strb.w	r3, [sp, #5]
    if (length < size) buffer[length] = 0;
 8003f32:	f88d 2006 	strb.w	r2, [sp, #6]
    debug_append(buffer, strlen(buffer));
 8003f36:	f7ff fe43 	bl	8003bc0 <strlen>
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	a801      	add	r0, sp, #4
 8003f3e:	f7ff fea3 	bl	8003c88 <_ZL12debug_appendPKcj>
}
 8003f42:	b003      	add	sp, #12
 8003f44:	f85d fb04 	ldr.w	pc, [sp], #4

08003f48 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4604      	mov	r4, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 8003f4c:	0e00      	lsrs	r0, r0, #24
 8003f4e:	f7ff ffd7 	bl	8003f00 <debug_printhex>
 8003f52:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8003f56:	f7ff ffd3 	bl	8003f00 <debug_printhex>
 8003f5a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003f5e:	f7ff ffcf 	bl	8003f00 <debug_printhex>
 8003f62:	b2e0      	uxtb	r0, r4
    }
}
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_printhex(b);
 8003f68:	f7ff bfca 	b.w	8003f00 <debug_printhex>

08003f6c <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 8003f6c:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8003f6e:	f7fc fdbd 	bl	8000aec <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8003f72:	f000 f831 	bl	8003fd8 <led_setup>
	if (debugEnabled) {
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <platform_setup+0x44>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b1a3      	cbz	r3, 8003fa6 <platform_setup+0x3a>
		led_on(); led_wait();
 8003f7c:	f000 f83c 	bl	8003ff8 <led_on>
 8003f80:	f000 f84a 	bl	8004018 <led_wait>
		led_off(); led_wait();
 8003f84:	f000 f840 	bl	8004008 <led_off>
 8003f88:	f000 f846 	bl	8004018 <led_wait>
		led_on(); led_wait();
 8003f8c:	f000 f834 	bl	8003ff8 <led_on>
 8003f90:	f000 f842 	bl	8004018 <led_wait>
		led_off(); led_wait();
 8003f94:	f000 f838 	bl	8004008 <led_off>
 8003f98:	f000 f83e 	bl	8004018 <led_wait>
		//  This line will call ARM Semihosting and may hang until debugger is connected.
  		debug_println("----platform_setup");
 8003f9c:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <platform_setup+0x48>)
 8003f9e:	f7ff ff93 	bl	8003ec8 <debug_println>
		led_on();
 8003fa2:	f000 f829 	bl	8003ff8 <led_on>
	}

	////TODO
	test_codal();
}
 8003fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_codal();
 8003faa:	f7fc bacf 	b.w	800054c <test_codal>
 8003fae:	bf00      	nop
 8003fb0:	20000890 	.word	0x20000890
 8003fb4:	08005864 	.word	0x08005864

08003fb8 <enable_debug>:

void enable_debug(void) {
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <enable_debug+0xc>)
 8003fbc:	701a      	strb	r2, [r3, #0]
	enable_log();
 8003fbe:	f7ff bed7 	b.w	8003d70 <enable_log>
 8003fc2:	bf00      	nop
 8003fc4:	20000890 	.word	0x20000890

08003fc8 <__cxa_pure_virtual>:
//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8003fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fcc:	f7fc ba96 	b.w	80004fc <target_panic>

08003fd0 <_Znwj>:
}

// define new and delete.
extern "C" void *operator new(size_t objsize) {
    return malloc(objsize);
 8003fd0:	f004 be36 	b.w	8008c40 <malloc>

08003fd4 <_ZdlPv>:
}

extern "C" void operator delete(void* obj) {
    free(obj);
 8003fd4:	f004 bd5c 	b.w	8008a90 <free>

08003fd8 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 8003fd8:	b510      	push	{r4, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 8003fda:	f44f 7041 	mov.w	r0, #772	; 0x304
 8003fde:	f7fc fbcd 	bl	800077c <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
}
 8003fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8003fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fea:	2200      	movs	r2, #0
 8003fec:	2102      	movs	r1, #2
 8003fee:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <led_setup+0x1c>)
 8003ff0:	f7fc bcda 	b.w	80009a8 <gpio_set_mode>
 8003ff4:	40011000 	.word	0x40011000

08003ff8 <led_on>:

void led_on(void) {
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 8003ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <led_on+0xc>)
 8003ffe:	f7fc bba9 	b.w	8000754 <gpio_clear>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000

08004008 <led_off>:
}

void led_off(void) {
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8004008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <led_off+0xc>)
 800400e:	f7fc bb9f 	b.w	8000750 <gpio_set>
 8004012:	bf00      	nop
 8004014:	40011000 	.word	0x40011000

08004018 <led_wait>:
void led_toggle(void) {
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <led_wait+0xc>)
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
		__asm__("nop");
 800401a:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 800401c:	3b01      	subs	r3, #1
 800401e:	d1fc      	bne.n	800401a <led_wait+0x2>
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	0016e360 	.word	0x0016e360

08004028 <platform_start_timer>:
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
	cm_enable_interrupts();
}

void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8004028:	b538      	push	{r3, r4, r5, lr}
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
	
	//  But system timer will only be started once.
	static bool timerStarted = false;
	if (timerStarted) { return; }
 800402a:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <platform_start_timer+0xf0>)
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 800402c:	4d3b      	ldr	r5, [pc, #236]	; (800411c <platform_start_timer+0xf4>)
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 800402e:	4a3c      	ldr	r2, [pc, #240]	; (8004120 <platform_start_timer+0xf8>)
	if (timerStarted) { return; }
 8004030:	781c      	ldrb	r4, [r3, #0]
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8004032:	6028      	str	r0, [r5, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8004034:	6011      	str	r1, [r2, #0]
	if (timerStarted) { return; }
 8004036:	b104      	cbz	r4, 800403a <platform_start_timer+0x12>
	timerStarted = true;
	debug_println("platform_start_timer"); ////
	rtc_setup();
}
 8004038:	bd38      	pop	{r3, r4, r5, pc}
	timerStarted = true;
 800403a:	2501      	movs	r5, #1
	debug_println("platform_start_timer"); ////
 800403c:	4839      	ldr	r0, [pc, #228]	; (8004124 <platform_start_timer+0xfc>)
	timerStarted = true;
 800403e:	701d      	strb	r5, [r3, #0]
	debug_println("platform_start_timer"); ////
 8004040:	f7ff ff42 	bl	8003ec8 <debug_println>
	rcc_enable_rtc_clock();
 8004044:	f7fc fcfe 	bl	8000a44 <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8004048:	4620      	mov	r0, r4
 800404a:	f7fd fe77 	bl	8001d3c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 800404e:	4628      	mov	r0, r5
 8004050:	f7fd fe74 	bl	8001d3c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8004054:	2002      	movs	r0, #2
 8004056:	f7fd fe71 	bl	8001d3c <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 800405a:	4833      	ldr	r0, [pc, #204]	; (8004128 <platform_start_timer+0x100>)
 800405c:	f7ff ff34 	bl	8003ec8 <debug_println>
 8004060:	f7ff feb2 	bl	8003dc8 <debug_flush>
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8004064:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8004068:	f7fc fb88 	bl	800077c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 800406c:	f240 309b 	movw	r0, #923	; 0x39b
 8004070:	f7fc fb84 	bl	800077c <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8004074:	f7fc fb72 	bl	800075c <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8004078:	2005      	movs	r0, #5
 800407a:	f7fc fceb 	bl	8000a54 <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
	RTC_CRL = 0;
 800407e:	4d2b      	ldr	r5, [pc, #172]	; (800412c <platform_start_timer+0x104>)
	RTC_CRH = 0;
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <platform_start_timer+0x108>)
 8004082:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8004084:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8004086:	f7fc fcdd 	bl	8000a44 <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 800408a:	f7fd fda5 	bl	8001bd8 <rtc_enter_config_mode>
	RTC_PRLH = 0;
	RTC_PRLL = 0;
	RTC_CNTH = 0;
	RTC_CNTL = 0;
	RTC_ALRH = 0xFFFF;
 800408e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	RTC_CNTH = 0;
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <platform_start_timer+0x10c>)
	RTC_PRLH = 0;
 8004094:	4828      	ldr	r0, [pc, #160]	; (8004138 <platform_start_timer+0x110>)
	RTC_PRLL = 0;
 8004096:	4929      	ldr	r1, [pc, #164]	; (800413c <platform_start_timer+0x114>)
	RTC_PRLH = 0;
 8004098:	6004      	str	r4, [r0, #0]
	RTC_PRLL = 0;
 800409a:	600c      	str	r4, [r1, #0]
	RTC_CNTH = 0;
 800409c:	6014      	str	r4, [r2, #0]
	RTC_CNTL = 0;
 800409e:	6144      	str	r4, [r0, #20]
	RTC_ALRH = 0xFFFF;
 80040a0:	614b      	str	r3, [r1, #20]
	RTC_ALRL = 0xFFFF;
 80040a2:	60d3      	str	r3, [r2, #12]
	rtc_exit_config_mode();
 80040a4:	f7fd fda4 	bl	8001bf0 <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 80040a8:	462a      	mov	r2, r5
	RTC_CRL &= ~RTC_CRL_RSF;
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	f023 0308 	bic.w	r3, r3, #8
 80040b0:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	071b      	lsls	r3, r3, #28
 80040b6:	d5fc      	bpl.n	80040b2 <platform_start_timer+0x8a>
	rtc_set_prescale_val(prescale);
 80040b8:	2020      	movs	r0, #32
 80040ba:	f7fd fdc5 	bl	8001c48 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 80040be:	4820      	ldr	r0, [pc, #128]	; (8004140 <platform_start_timer+0x118>)
 80040c0:	f7ff ff02 	bl	8003ec8 <debug_println>
 80040c4:	f7ff fe80 	bl	8003dc8 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7fd fde9 	bl	8001ca0 <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d2:	f7fd fd99 	bl	8001c08 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 80040d6:	2100      	movs	r1, #0
 80040d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80040dc:	f7fd fd40 	bl	8001b60 <exti_set_trigger>
	exti_enable_request(EXTI17);
 80040e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80040e4:	f7fd fd64 	bl	8001bb0 <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 80040e8:	2003      	movs	r0, #3
 80040ea:	f7fd fd2b 	bl	8001b44 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 80040ee:	2029      	movs	r0, #41	; 0x29
 80040f0:	f7fd fd28 	bl	8001b44 <nvic_enable_irq>
 80040f4:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7fd fe4e 	bl	8001d98 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 80040fc:	2001      	movs	r0, #1
 80040fe:	f7fd fe4b 	bl	8001d98 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8004102:	2002      	movs	r0, #2
 8004104:	f7fd fe48 	bl	8001d98 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8004108:	2000      	movs	r0, #0
 800410a:	f7fd fde9 	bl	8001ce0 <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 800410e:	2001      	movs	r0, #1
 8004110:	f7fd fde6 	bl	8001ce0 <rtc_interrupt_enable>
	__asm__ volatile ("CPSIE I\n");
 8004114:	b662      	cpsie	i
}
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000891 	.word	0x20000891
 800411c:	20000884 	.word	0x20000884
 8004120:	20000888 	.word	0x20000888
 8004124:	08005880 	.word	0x08005880
 8004128:	08005898 	.word	0x08005898
 800412c:	40002804 	.word	0x40002804
 8004130:	40002800 	.word	0x40002800
 8004134:	40002818 	.word	0x40002818
 8004138:	40002808 	.word	0x40002808
 800413c:	4000280c 	.word	0x4000280c
 8004140:	080058a8 	.word	0x080058a8

08004144 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8004144:	b510      	push	{r4, lr}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <platform_set_alarm+0x2c>)
void platform_set_alarm(uint32_t millisec) {
 8004148:	b082      	sub	sp, #8
	if (!alarmFunc) { debug_print("alm? "); } ////
 800414a:	681b      	ldr	r3, [r3, #0]
void platform_set_alarm(uint32_t millisec) {
 800414c:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 800414e:	b15b      	cbz	r3, 8004168 <platform_set_alarm+0x24>
	volatile uint32_t now = rtc_get_counter_val();
 8004150:	f7fd fd9a 	bl	8001c88 <rtc_get_counter_val>
 8004154:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8004156:	f7fc fb01 	bl	800075c <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 800415a:	9801      	ldr	r0, [sp, #4]
 800415c:	4420      	add	r0, r4
}
 800415e:	b002      	add	sp, #8
 8004160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_set_alarm_time(now + millisec);
 8004164:	f7fd bd50 	b.w	8001c08 <rtc_set_alarm_time>
	if (!alarmFunc) { debug_print("alm? "); } ////
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <platform_set_alarm+0x30>)
 800416a:	f7ff fea7 	bl	8003ebc <debug_print>
 800416e:	e7ef      	b.n	8004150 <platform_set_alarm+0xc>
 8004170:	20000888 	.word	0x20000888
 8004174:	08005878 	.word	0x08005878

08004178 <rtc_isr>:
void rtc_isr(void) {
 8004178:	b510      	push	{r4, lr}
	if (rtc_check_flag(RTC_SEC)) {
 800417a:	2000      	movs	r0, #0
 800417c:	f7fd fe26 	bl	8001dcc <rtc_check_flag>
 8004180:	b900      	cbnz	r0, 8004184 <rtc_isr+0xc>
}
 8004182:	bd10      	pop	{r4, pc}
		rtc_clear_flag(RTC_SEC);
 8004184:	2000      	movs	r0, #0
 8004186:	f7fd fe07 	bl	8001d98 <rtc_clear_flag>
		tickCount++;
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <rtc_isr+0x28>)
		if (tickFunc != NULL) { tickFunc(); }
 800418c:	4905      	ldr	r1, [pc, #20]	; (80041a4 <rtc_isr+0x2c>)
		tickCount++;
 800418e:	6813      	ldr	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 8004190:	6809      	ldr	r1, [r1, #0]
		tickCount++;
 8004192:	3301      	adds	r3, #1
 8004194:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 8004196:	2900      	cmp	r1, #0
 8004198:	d0f3      	beq.n	8004182 <rtc_isr+0xa>
}
 800419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (tickFunc != NULL) { tickFunc(); }
 800419e:	4708      	bx	r1
 80041a0:	2000088c 	.word	0x2000088c
 80041a4:	20000884 	.word	0x20000884

080041a8 <rtc_alarm_isr>:
void rtc_alarm_isr(void) {
 80041a8:	b510      	push	{r4, lr}
	exti_reset_request(EXTI17);
 80041aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80041ae:	f7fd fd0d 	bl	8001bcc <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fd fdf0 	bl	8001d98 <rtc_clear_flag>
	alarmCount++;
 80041b8:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <rtc_alarm_isr+0x28>)
	if (alarmFunc != NULL) { alarmFunc(); }
 80041ba:	4906      	ldr	r1, [pc, #24]	; (80041d4 <rtc_alarm_isr+0x2c>)
	alarmCount++;
 80041bc:	6813      	ldr	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 80041be:	6809      	ldr	r1, [r1, #0]
	alarmCount++;
 80041c0:	3301      	adds	r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 80041c4:	b111      	cbz	r1, 80041cc <rtc_alarm_isr+0x24>
}
 80041c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (alarmFunc != NULL) { alarmFunc(); }
 80041ca:	4708      	bx	r1
}
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	bf00      	nop
 80041d0:	20000880 	.word	0x20000880
 80041d4:	20000888 	.word	0x20000888

080041d8 <millis>:
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 80041d8:	f7fd bd56 	b.w	8001c88 <rtc_get_counter_val>

080041dc <bootloader_poll>:
    //  If we are in Bootloader Mode, poll forever here.
    poll_loop();
    return -1;  //  Never comes here.
}

int bootloader_poll(void) {
 80041dc:	b510      	push	{r4, lr}
    //  Run bootloader in background via polling.  Return 1 if there was USB activity within the last few seconds, 0 if none.
    static uint32_t last_poll = 0;
    static uint32_t delay = 0;
    if (last_poll > 0) { delay = millis() - last_poll; } 
 80041de:	4c0d      	ldr	r4, [pc, #52]	; (8004214 <bootloader_poll+0x38>)
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	b983      	cbnz	r3, 8004206 <bootloader_poll+0x2a>
    last_poll = millis();
 80041e4:	f7ff fff8 	bl	80041d8 <millis>

    if (!usbd_dev) { return -1; }
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <bootloader_poll+0x3c>)
    last_poll = millis();
 80041ea:	6020      	str	r0, [r4, #0]
    if (!usbd_dev) { return -1; }
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	b168      	cbz	r0, 800420c <bootloader_poll+0x30>

    //  Run any USB request processing.
	usbd_poll(usbd_dev);
 80041f0:	f7fc fd6e 	bl	8000cd0 <usbd_poll>

    //  Get the status - should we continue polling?
    status = get_usb_status();
 80041f4:	f000 f95a 	bl	80044ac <get_usb_status>
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <bootloader_poll+0x40>)
    //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
    last_status = status;
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <bootloader_poll+0x44>)
    status = get_usb_status();
 80041fc:	6018      	str	r0, [r3, #0]
    last_status = status;
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	6011      	str	r1, [r2, #0]
    return status;
 8004202:	6818      	ldr	r0, [r3, #0]
    // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
}
 8004204:	bd10      	pop	{r4, pc}
    if (last_poll > 0) { delay = millis() - last_poll; } 
 8004206:	f7ff ffe7 	bl	80041d8 <millis>
 800420a:	e7eb      	b.n	80041e4 <bootloader_poll+0x8>
    if (!usbd_dev) { return -1; }
 800420c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004210:	bd10      	pop	{r4, pc}
 8004212:	bf00      	nop
 8004214:	20000898 	.word	0x20000898
 8004218:	200008a8 	.word	0x200008a8
 800421c:	200008a4 	.word	0x200008a4
 8004220:	2000089c 	.word	0x2000089c

08004224 <bootloader_start>:
int bootloader_start(void) {
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (usbd_dev) { return 1; }  // Already started, quit.
 8004228:	4c3a      	ldr	r4, [pc, #232]	; (8004314 <bootloader_start+0xf0>)
int bootloader_start(void) {
 800422a:	b088      	sub	sp, #32
    if (usbd_dev) { return 1; }  // Already started, quit.
 800422c:	6825      	ldr	r5, [r4, #0]
 800422e:	b11d      	cbz	r5, 8004238 <bootloader_start+0x14>
 8004230:	2001      	movs	r0, #1
}
 8004232:	b008      	add	sp, #32
 8004234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    debug_println("----bootloader");  // debug_flush();    
 8004238:	4837      	ldr	r0, [pc, #220]	; (8004318 <bootloader_start+0xf4>)
    }
#endif // NOTUSED

static void get_serial_number(void) {
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 800423a:	ae08      	add	r6, sp, #32
    debug_println("----bootloader");  // debug_flush();    
 800423c:	f7ff fe44 	bl	8003ec8 <debug_println>
    target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 8004240:	f000 fc30 	bl	8004aa4 <target_gpio_setup>
    serial[0] = '\0';
 8004244:	f806 5d1c 	strb.w	r5, [r6, #-28]!
    debug_println("target_get_serial_number");  // debug_flush();
 8004248:	4834      	ldr	r0, [pc, #208]	; (800431c <bootloader_start+0xf8>)
 800424a:	f7ff fe3d 	bl	8003ec8 <debug_println>
    target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 800424e:	2118      	movs	r1, #24
 8004250:	4630      	mov	r0, r6
 8004252:	f000 fce7 	bl	8004c24 <target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8004256:	4832      	ldr	r0, [pc, #200]	; (8004320 <bootloader_start+0xfc>)
 8004258:	f7ff fe36 	bl	8003ec8 <debug_println>
    usb_set_serial_number(serial);
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f981 	bl	8004564 <usb_set_serial_number>
    if (target_get_startup_mode() == BOOTLOADER_MODE) { 
 8004262:	f000 fca1 	bl	8004ba8 <target_get_startup_mode>
 8004266:	2802      	cmp	r0, #2
 8004268:	d010      	beq.n	800428c <bootloader_start+0x68>
    debug_println("usb_setup");  // debug_flush();
 800426a:	482e      	ldr	r0, [pc, #184]	; (8004324 <bootloader_start+0x100>)
 800426c:	f7ff fe2c 	bl	8003ec8 <debug_println>
    usbd_dev = usb_setup();
 8004270:	f000 f8c6 	bl	8004400 <usb_setup>
 8004274:	6020      	str	r0, [r4, #0]
    if (target_get_startup_mode() == APPLICATION_MODE) { 
 8004276:	f000 fc97 	bl	8004ba8 <target_get_startup_mode>
 800427a:	2801      	cmp	r0, #1
 800427c:	d10a      	bne.n	8004294 <bootloader_start+0x70>
        target_set_bootloader_callback(bootloader_poll);
 800427e:	482a      	ldr	r0, [pc, #168]	; (8004328 <bootloader_start+0x104>)
 8004280:	f7fc f9ac 	bl	80005dc <target_set_bootloader_callback>
        return 0; 
 8004284:	2000      	movs	r0, #0
}
 8004286:	b008      	add	sp, #32
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    asm("msr msp, %0" : : "r" (topOfMainStack));
 800428c:	4b27      	ldr	r3, [pc, #156]	; (800432c <bootloader_start+0x108>)
 800428e:	f383 8808 	msr	MSP, r3
 8004292:	e7ea      	b.n	800426a <bootloader_start+0x46>
    debug_println("usbd polling...");  debug_flush();  ////
 8004294:	4826      	ldr	r0, [pc, #152]	; (8004330 <bootloader_start+0x10c>)
 8004296:	f7ff fe17 	bl	8003ec8 <debug_println>
            cycleCount = 0;
 800429a:	f04f 0900 	mov.w	r9, #0
    debug_println("usbd polling...");  debug_flush();  ////
 800429e:	f7ff fd93 	bl	8003dc8 <debug_flush>
            target_set_led((msTimer++ % 500) < 50);
 80042a2:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 80042a6:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004340 <bootloader_start+0x11c>
 80042aa:	4f22      	ldr	r7, [pc, #136]	; (8004334 <bootloader_start+0x110>)
 80042ac:	4e22      	ldr	r6, [pc, #136]	; (8004338 <bootloader_start+0x114>)
 80042ae:	4d23      	ldr	r5, [pc, #140]	; (800433c <bootloader_start+0x118>)
        usbd_poll(usbd_dev);
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	f7fc fd0d 	bl	8000cd0 <usbd_poll>
        cycleCount++;
 80042b6:	f8da 3000 	ldr.w	r3, [sl]
 80042ba:	3301      	adds	r3, #1
        if (cycleCount >= 700) {
 80042bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
        cycleCount++;
 80042c0:	f8ca 3000 	str.w	r3, [sl]
        if (cycleCount >= 700) {
 80042c4:	d3f4      	bcc.n	80042b0 <bootloader_start+0x8c>
            target_set_led((msTimer++ % 500) < 50);
 80042c6:	683b      	ldr	r3, [r7, #0]
            cycleCount = 0;
 80042c8:	f8ca 9000 	str.w	r9, [sl]
            target_set_led((msTimer++ % 500) < 50);
 80042cc:	fba5 2003 	umull	r2, r0, r5, r3
 80042d0:	0940      	lsrs	r0, r0, #5
 80042d2:	fb08 3010 	mls	r0, r8, r0, r3
 80042d6:	2831      	cmp	r0, #49	; 0x31
 80042d8:	f103 0301 	add.w	r3, r3, #1
 80042dc:	bf8c      	ite	hi
 80042de:	2000      	movhi	r0, #0
 80042e0:	2001      	movls	r0, #1
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	f000 fbd2 	bl	8004a8c <target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 80042e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042ec:	6832      	ldr	r2, [r6, #0]
 80042ee:	fba5 0302 	umull	r0, r3, r5, r2
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	fb01 2313 	mls	r3, r1, r3, r2
 80042f8:	3201      	adds	r2, #1
 80042fa:	6032      	str	r2, [r6, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1d7      	bne.n	80042b0 <bootloader_start+0x8c>
 8004300:	f000 f8d4 	bl	80044ac <get_usb_status>
 8004304:	2800      	cmp	r0, #0
 8004306:	d1d3      	bne.n	80042b0 <bootloader_start+0x8c>
                get_usb_status(); ////
 8004308:	f000 f8d0 	bl	80044ac <get_usb_status>
                debug_flush(); 
 800430c:	f7ff fd5c 	bl	8003dc8 <debug_flush>
 8004310:	e7ce      	b.n	80042b0 <bootloader_start+0x8c>
 8004312:	bf00      	nop
 8004314:	200008a8 	.word	0x200008a8
 8004318:	080058b8 	.word	0x080058b8
 800431c:	080058c8 	.word	0x080058c8
 8004320:	080058e4 	.word	0x080058e4
 8004324:	080058fc 	.word	0x080058fc
 8004328:	080041dd 	.word	0x080041dd
 800432c:	200047bc 	.word	0x200047bc
 8004330:	08005908 	.word	0x08005908
 8004334:	200008a0 	.word	0x200008a0
 8004338:	2000042c 	.word	0x2000042c
 800433c:	10624dd3 	.word	0x10624dd3
 8004340:	20000894 	.word	0x20000894

08004344 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <hf2_connected+0xc>)
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	b90a      	cbnz	r2, 800434e <hf2_connected+0xa>
    hf2_is_connected = 1;
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 800434e:	4770      	bx	lr
 8004350:	20000b45 	.word	0x20000b45

08004354 <usb_cdc_transmit>:
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <usb_cdc_transmit+0x28>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b16b      	cbz	r3, 8004376 <usb_cdc_transmit+0x22>
	uint16_t len) {
 800435a:	b410      	push	{r4}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 800435c:	4c08      	ldr	r4, [pc, #32]	; (8004380 <usb_cdc_transmit+0x2c>)
 800435e:	7824      	ldrb	r4, [r4, #0]
 8004360:	b12c      	cbz	r4, 800436e <usb_cdc_transmit+0x1a>
    return cdcadm_transmit(usbd_dev, buf, len);
 8004362:	460a      	mov	r2, r1
}
 8004364:	bc10      	pop	{r4}
    return cdcadm_transmit(usbd_dev, buf, len);
 8004366:	4601      	mov	r1, r0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 bd49 	b.w	8004e00 <cdcadm_transmit>
}
 800436e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004372:	bc10      	pop	{r4}
 8004374:	4770      	bx	lr
 8004376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437a:	4770      	bx	lr
 800437c:	20000948 	.word	0x20000948
 8004380:	20000b44 	.word	0x20000b44

08004384 <sof_callback>:
static void sof_callback(void) {
 8004384:	b508      	push	{r3, lr}
    last_frame_time = millis();
 8004386:	f7ff ff27 	bl	80041d8 <millis>
 800438a:	4b01      	ldr	r3, [pc, #4]	; (8004390 <sof_callback+0xc>)
 800438c:	6018      	str	r0, [r3, #0]
}
 800438e:	bd08      	pop	{r3, pc}
 8004390:	20000928 	.word	0x20000928

08004394 <cdc_connected>:
    if (cdc_is_connected) { return; }
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <cdc_connected+0x14>)
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	b102      	cbz	r2, 800439c <cdc_connected+0x8>
}
 800439a:	4770      	bx	lr
    cdc_is_connected = 1;
 800439c:	2201      	movs	r2, #1
    logger_add_output(usb_cdc_transmit);
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <cdc_connected+0x18>)
    cdc_is_connected = 1;
 80043a0:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 80043a2:	f7ff bceb 	b.w	8003d7c <logger_add_output>
 80043a6:	bf00      	nop
 80043a8:	20000b44 	.word	0x20000b44
 80043ac:	08004355 	.word	0x08004355

080043b0 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80043b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043b6:	4299      	cmp	r1, r3
  uint16_t wValue) {
 80043b8:	4605      	mov	r5, r0
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80043ba:	d00b      	beq.n	80043d4 <set_aggregate_callback+0x24>
 80043bc:	460e      	mov	r6, r1
 80043be:	4c0d      	ldr	r4, [pc, #52]	; (80043f4 <set_aggregate_callback+0x44>)
 80043c0:	f104 0728 	add.w	r7, r4, #40	; 0x28
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
            if (!config_callback[i]) { break; }
 80043c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80043c8:	b123      	cbz	r3, 80043d4 <set_aggregate_callback+0x24>
            (config_callback[i])(usbd_dev, wValue);
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80043d0:	42bc      	cmp	r4, r7
 80043d2:	d1f7      	bne.n	80043c4 <set_aggregate_callback+0x14>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80043d4:	2200      	movs	r2, #0
 80043d6:	4628      	mov	r0, r5
 80043d8:	4611      	mov	r1, r2
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <set_aggregate_callback+0x48>)
 80043dc:	f7fc fd5c 	bl	8000e98 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80043e0:	2800      	cmp	r0, #0
 80043e2:	db00      	blt.n	80043e6 <set_aggregate_callback+0x36>
}
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <set_aggregate_callback+0x4c>)
 80043e8:	f7ff fd6e 	bl	8003ec8 <debug_println>
}
 80043ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80043f0:	f7ff bcea 	b.w	8003dc8 <debug_flush>
 80043f4:	200008ac 	.word	0x200008ac
 80043f8:	08004749 	.word	0x08004749
 80043fc:	08005b1c 	.word	0x08005b1c

08004400 <usb_setup>:
usbd_device* usb_setup(void) {
 8004400:	b510      	push	{r4, lr}
 8004402:	b084      	sub	sp, #16
    const usbd_driver* driver = target_usb_init();
 8004404:	f000 fb86 	bl	8004b14 <target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 8004408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800440c:	2209      	movs	r2, #9
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <usb_setup+0x7c>)
 8004410:	9102      	str	r1, [sp, #8]
 8004412:	e9cd 2300 	strd	r2, r3, [sp]
 8004416:	491a      	ldr	r1, [pc, #104]	; (8004480 <usb_setup+0x80>)
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <usb_setup+0x84>)
 800441a:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <usb_setup+0x88>)
 800441c:	f7fc fc10 	bl	8000c40 <usbd_init>
 8004420:	4c1a      	ldr	r4, [pc, #104]	; (800448c <usb_setup+0x8c>)
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8004422:	491b      	ldr	r1, [pc, #108]	; (8004490 <usb_setup+0x90>)
    usbd_dev = usbd_init(driver, &dev, &config, 
 8004424:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8004426:	f7fc fc35 	bl	8000c94 <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	4919      	ldr	r1, [pc, #100]	; (8004494 <usb_setup+0x94>)
 800442e:	f000 fd37 	bl	8004ea0 <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 8004432:	6820      	ldr	r0, [r4, #0]
 8004434:	4918      	ldr	r1, [pc, #96]	; (8004498 <usb_setup+0x98>)
 8004436:	f000 ff91 	bl	800535c <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	4917      	ldr	r1, [pc, #92]	; (800449c <usb_setup+0x9c>)
 800443e:	f001 f83b 	bl	80054b8 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	4916      	ldr	r1, [pc, #88]	; (80044a0 <usb_setup+0xa0>)
 8004446:	f000 fa45 	bl	80048d4 <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	2100      	movs	r1, #0
 800444e:	f000 faef 	bl	8004a30 <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	4913      	ldr	r1, [pc, #76]	; (80044a4 <usb_setup+0xa4>)
 8004456:	f7fd f841 	bl	80014dc <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 800445a:	2800      	cmp	r0, #0
 800445c:	db07      	blt.n	800446e <usb_setup+0x6e>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004464:	f7ff ffa4 	bl	80043b0 <set_aggregate_callback>
}
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	b004      	add	sp, #16
 800446c:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 800446e:	480e      	ldr	r0, [pc, #56]	; (80044a8 <usb_setup+0xa8>)
 8004470:	f7ff fd2a 	bl	8003ec8 <debug_println>
 8004474:	f7ff fca8 	bl	8003dc8 <debug_flush>
 8004478:	e7f1      	b.n	800445e <usb_setup+0x5e>
 800447a:	bf00      	nop
 800447c:	20000a44 	.word	0x20000a44
 8004480:	08005a0c 	.word	0x08005a0c
 8004484:	20000438 	.word	0x20000438
 8004488:	080059c4 	.word	0x080059c4
 800448c:	20000948 	.word	0x20000948
 8004490:	08004385 	.word	0x08004385
 8004494:	08004395 	.word	0x08004395
 8004498:	08004345 	.word	0x08004345
 800449c:	08005974 	.word	0x08005974
 80044a0:	08005bd4 	.word	0x08005bd4
 80044a4:	080043b1 	.word	0x080043b1
 80044a8:	08005bf0 	.word	0x08005bf0

080044ac <get_usb_status>:
volatile int get_usb_status(void) { 
 80044ac:	b510      	push	{r4, lr}
    if (last_busy_time == 0) { return 0; }
 80044ae:	4c09      	ldr	r4, [pc, #36]	; (80044d4 <get_usb_status+0x28>)
volatile int get_usb_status(void) { 
 80044b0:	b082      	sub	sp, #8
    if (last_busy_time == 0) { return 0; }
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	b160      	cbz	r0, 80044d0 <get_usb_status+0x24>
    volatile uint32_t now = millis();
 80044b6:	f7ff fe8f 	bl	80041d8 <millis>
 80044ba:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	9a01      	ldr	r2, [sp, #4]
 80044c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80044c4:	3308      	adds	r3, #8
 80044c6:	4293      	cmp	r3, r2
    last_busy_time = 0;
 80044c8:	bf96      	itet	ls
 80044ca:	2000      	movls	r0, #0
        return 1; 
 80044cc:	2001      	movhi	r0, #1
    last_busy_time = 0;
 80044ce:	6020      	strls	r0, [r4, #0]
}
 80044d0:	b002      	add	sp, #8
 80044d2:	bd10      	pop	{r4, pc}
 80044d4:	20000924 	.word	0x20000924

080044d8 <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 80044d8:	b510      	push	{r4, lr}
 80044da:	4c0c      	ldr	r4, [pc, #48]	; (800450c <aggregate_register_config_callback+0x34>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80044dc:	2300      	movs	r3, #0
 80044de:	4622      	mov	r2, r4
		if (config_callback[i]) {
 80044e0:	f852 0b04 	ldr.w	r0, [r2], #4
 80044e4:	b178      	cbz	r0, 8004506 <aggregate_register_config_callback+0x2e>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80044e6:	4288      	cmp	r0, r1
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80044e8:	f103 0301 	add.w	r3, r3, #1
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80044ec:	d009      	beq.n	8004502 <aggregate_register_config_callback+0x2a>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80044ee:	2b0a      	cmp	r3, #10
 80044f0:	d1f6      	bne.n	80044e0 <aggregate_register_config_callback+0x8>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <aggregate_register_config_callback+0x38>)
 80044f4:	f7ff fce8 	bl	8003ec8 <debug_println>
 80044f8:	f7ff fc66 	bl	8003dc8 <debug_flush>
	return -1;
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004500:	bd10      	pop	{r4, pc}
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 8004502:	2000      	movs	r0, #0
}
 8004504:	bd10      	pop	{r4, pc}
		config_callback[i] = callback;
 8004506:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 800450a:	bd10      	pop	{r4, pc}
 800450c:	200008ac 	.word	0x200008ac
 8004510:	0800594c 	.word	0x0800594c

08004514 <aggregate_register_callback>:
    usbd_control_callback callback) {
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	4f11      	ldr	r7, [pc, #68]	; (800455c <aggregate_register_callback+0x48>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004518:	2500      	movs	r5, #0
 800451a:	463c      	mov	r4, r7
		if (control_callback[i].cb) { 
 800451c:	6860      	ldr	r0, [r4, #4]
 800451e:	b1b0      	cbz	r0, 800454e <aggregate_register_callback+0x3a>
            if (control_callback[i].type == type &&
 8004520:	7826      	ldrb	r6, [r4, #0]
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004522:	3501      	adds	r5, #1
            if (control_callback[i].type == type &&
 8004524:	428e      	cmp	r6, r1
 8004526:	d104      	bne.n	8004532 <aggregate_register_callback+0x1e>
 8004528:	7866      	ldrb	r6, [r4, #1]
 800452a:	4296      	cmp	r6, r2
 800452c:	d101      	bne.n	8004532 <aggregate_register_callback+0x1e>
                control_callback[i].type_mask == type_mask &&
 800452e:	4298      	cmp	r0, r3
 8004530:	d00b      	beq.n	800454a <aggregate_register_callback+0x36>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004532:	2d0a      	cmp	r5, #10
 8004534:	f104 0408 	add.w	r4, r4, #8
 8004538:	d1f0      	bne.n	800451c <aggregate_register_callback+0x8>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 800453a:	4809      	ldr	r0, [pc, #36]	; (8004560 <aggregate_register_callback+0x4c>)
 800453c:	f7ff fcc4 	bl	8003ec8 <debug_println>
 8004540:	f7ff fc42 	bl	8003dc8 <debug_flush>
	return -1;
 8004544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    return 0;
 800454a:	2000      	movs	r0, #0
}
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		control_callback[i].type_mask = type_mask;
 800454e:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
		control_callback[i].type = type;
 8004552:	f807 1035 	strb.w	r1, [r7, r5, lsl #3]
		control_callback[i].type_mask = type_mask;
 8004556:	7062      	strb	r2, [r4, #1]
		control_callback[i].cb = callback;
 8004558:	6063      	str	r3, [r4, #4]
}
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	200008d4 	.word	0x200008d4
 8004560:	08005924 	.word	0x08005924

08004564 <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
 8004564:	b510      	push	{r4, lr}
    serial_number[0] = '\0';
 8004566:	2400      	movs	r4, #0
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <usb_set_serial_number+0x18>)
 800456a:	701c      	strb	r4, [r3, #0]
    if (serial) {
 800456c:	b128      	cbz	r0, 800457a <usb_set_serial_number+0x16>
 800456e:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8004570:	2218      	movs	r2, #24
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fb73 	bl	8003c5e <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 8004578:	7604      	strb	r4, [r0, #24]
    }
}
 800457a:	bd10      	pop	{r4, pc}
 800457c:	2000092c 	.word	0x2000092c

08004580 <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4615      	mov	r5, r2
 8004584:	460c      	mov	r4, r1
    debug_print(msg); debug_print(" ");
 8004586:	f7ff fc99 	bl	8003ebc <debug_print>
 800458a:	480e      	ldr	r0, [pc, #56]	; (80045c4 <dump_buffer+0x44>)
 800458c:	f7ff fc96 	bl	8003ebc <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 8004590:	4628      	mov	r0, r5
 8004592:	f7ff fcb3 	bl	8003efc <debug_print_unsigned>
 8004596:	480c      	ldr	r0, [pc, #48]	; (80045c8 <dump_buffer+0x48>)
 8004598:	f7ff fc90 	bl	8003ebc <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 800459c:	2d00      	cmp	r5, #0
 800459e:	dd0b      	ble.n	80045b8 <dump_buffer+0x38>
 80045a0:	3c01      	subs	r4, #1
        debug_printhex(buf[i]); debug_print(" "); 
 80045a2:	4e08      	ldr	r6, [pc, #32]	; (80045c4 <dump_buffer+0x44>)
 80045a4:	4425      	add	r5, r4
 80045a6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80045aa:	f7ff fca9 	bl	8003f00 <debug_printhex>
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff fc84 	bl	8003ebc <debug_print>
    for (i = 0; i < len; i++) { 
 80045b4:	42ac      	cmp	r4, r5
 80045b6:	d1f6      	bne.n	80045a6 <dump_buffer+0x26>
    }
    debug_println("");
}
 80045b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <dump_buffer+0x4c>)
 80045be:	f7ff bc83 	b.w	8003ec8 <debug_println>
 80045c2:	bf00      	nop
 80045c4:	08005aa4 	.word	0x08005aa4
 80045c8:	08005a20 	.word	0x08005a20
 80045cc:	080056cc 	.word	0x080056cc

080045d0 <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	460c      	mov	r4, r1
    debug_print(msg);
 80045d4:	f7ff fc72 	bl	8003ebc <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80045d8:	4849      	ldr	r0, [pc, #292]	; (8004700 <dump_usb_request+0x130>)
    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80045da:	8865      	ldrh	r5, [r4, #2]
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80045dc:	f7ff fc6e 	bl	8003ebc <debug_print>
 80045e0:	7820      	ldrb	r0, [r4, #0]
 80045e2:	f7ff fc8d 	bl	8003f00 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 80045e6:	4847      	ldr	r0, [pc, #284]	; (8004704 <dump_usb_request+0x134>)
 80045e8:	f7ff fc68 	bl	8003ebc <debug_print>
 80045ec:	7860      	ldrb	r0, [r4, #1]
 80045ee:	f7ff fc87 	bl	8003f00 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80045f2:	4845      	ldr	r0, [pc, #276]	; (8004708 <dump_usb_request+0x138>)
 80045f4:	f7ff fc62 	bl	8003ebc <debug_print>
 80045f8:	8860      	ldrh	r0, [r4, #2]
	return wValue >> 8;
 80045fa:	0a2e      	lsrs	r6, r5, #8
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80045fc:	0a00      	lsrs	r0, r0, #8
 80045fe:	f7ff fc7f 	bl	8003f00 <debug_printhex>
 8004602:	8860      	ldrh	r0, [r4, #2]
 8004604:	b2c0      	uxtb	r0, r0
 8004606:	f7ff fc7b 	bl	8003f00 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 800460a:	4840      	ldr	r0, [pc, #256]	; (800470c <dump_usb_request+0x13c>)
 800460c:	f7ff fc56 	bl	8003ebc <debug_print>
 8004610:	88a0      	ldrh	r0, [r4, #4]
 8004612:	0a00      	lsrs	r0, r0, #8
 8004614:	f7ff fc74 	bl	8003f00 <debug_printhex>
 8004618:	88a0      	ldrh	r0, [r4, #4]
 800461a:	b2c0      	uxtb	r0, r0
 800461c:	f7ff fc70 	bl	8003f00 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 8004620:	483b      	ldr	r0, [pc, #236]	; (8004710 <dump_usb_request+0x140>)
 8004622:	f7ff fc4b 	bl	8003ebc <debug_print>
 8004626:	88e0      	ldrh	r0, [r4, #6]
 8004628:	0a00      	lsrs	r0, r0, #8
 800462a:	f7ff fc69 	bl	8003f00 <debug_printhex>
 800462e:	88e0      	ldrh	r0, [r4, #6]
 8004630:	b2c0      	uxtb	r0, r0
 8004632:	f7ff fc65 	bl	8003f00 <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8004636:	7823      	ldrb	r3, [r4, #0]
 8004638:	b9cb      	cbnz	r3, 800466e <dump_usb_request+0x9e>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 800463a:	7863      	ldrb	r3, [r4, #1]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d043      	beq.n	80046c8 <dump_usb_request+0xf8>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 8004640:	2b09      	cmp	r3, #9
            debug_print(", SET_CFG    ");
 8004642:	bf0c      	ite	eq
 8004644:	4833      	ldreq	r0, [pc, #204]	; (8004714 <dump_usb_request+0x144>)
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 8004646:	4834      	ldrne	r0, [pc, #208]	; (8004718 <dump_usb_request+0x148>)
 8004648:	f7ff fc38 	bl	8003ebc <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 800464c:	4833      	ldr	r0, [pc, #204]	; (800471c <dump_usb_request+0x14c>)
 800464e:	f7ff fc35 	bl	8003ebc <debug_print>
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff fc54 	bl	8003f00 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8004658:	4831      	ldr	r0, [pc, #196]	; (8004720 <dump_usb_request+0x150>)
 800465a:	f7ff fc2f 	bl	8003ebc <debug_print>
 800465e:	b2e8      	uxtb	r0, r5
 8004660:	f7ff fc4e 	bl	8003f00 <debug_printhex>
    }
    debug_println("");
}
 8004664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 8004668:	482e      	ldr	r0, [pc, #184]	; (8004724 <dump_usb_request+0x154>)
 800466a:	f7ff bc2d 	b.w	8003ec8 <debug_println>
    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d1f8      	bne.n	8004664 <dump_usb_request+0x94>
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8004672:	7863      	ldrb	r3, [r4, #1]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d1e3      	bne.n	8004640 <dump_usb_request+0x70>
            debug_print(", GET_DES");
 8004678:	482b      	ldr	r0, [pc, #172]	; (8004728 <dump_usb_request+0x158>)
 800467a:	f7ff fc1f 	bl	8003ebc <debug_print>
            switch(desc_type) {
 800467e:	1e73      	subs	r3, r6, #1
 8004680:	2b0e      	cmp	r3, #14
 8004682:	d8e3      	bhi.n	800464c <dump_usb_request+0x7c>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <dump_usb_request+0xbc>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080046f1 	.word	0x080046f1
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e1 	.word	0x080046e1
 800469c:	080046d9 	.word	0x080046d9
 80046a0:	0800464d 	.word	0x0800464d
 80046a4:	0800464d 	.word	0x0800464d
 80046a8:	0800464d 	.word	0x0800464d
 80046ac:	0800464d 	.word	0x0800464d
 80046b0:	0800464d 	.word	0x0800464d
 80046b4:	0800464d 	.word	0x0800464d
 80046b8:	0800464d 	.word	0x0800464d
 80046bc:	0800464d 	.word	0x0800464d
 80046c0:	0800464d 	.word	0x0800464d
 80046c4:	080046d1 	.word	0x080046d1
            debug_print(", SET_ADR    ");
 80046c8:	4818      	ldr	r0, [pc, #96]	; (800472c <dump_usb_request+0x15c>)
 80046ca:	f7ff fbf7 	bl	8003ebc <debug_print>
 80046ce:	e7bd      	b.n	800464c <dump_usb_request+0x7c>
                case 15: debug_print("_BOS"); break;
 80046d0:	4817      	ldr	r0, [pc, #92]	; (8004730 <dump_usb_request+0x160>)
 80046d2:	f7ff fbf3 	bl	8003ebc <debug_print>
 80046d6:	e7b9      	b.n	800464c <dump_usb_request+0x7c>
                case 5: debug_print("_ENP"); break;
 80046d8:	4816      	ldr	r0, [pc, #88]	; (8004734 <dump_usb_request+0x164>)
 80046da:	f7ff fbef 	bl	8003ebc <debug_print>
 80046de:	e7b5      	b.n	800464c <dump_usb_request+0x7c>
                case 4: debug_print("_INF"); break;
 80046e0:	4815      	ldr	r0, [pc, #84]	; (8004738 <dump_usb_request+0x168>)
 80046e2:	f7ff fbeb 	bl	8003ebc <debug_print>
 80046e6:	e7b1      	b.n	800464c <dump_usb_request+0x7c>
                case 3: debug_print("_STR"); break;
 80046e8:	4814      	ldr	r0, [pc, #80]	; (800473c <dump_usb_request+0x16c>)
 80046ea:	f7ff fbe7 	bl	8003ebc <debug_print>
 80046ee:	e7ad      	b.n	800464c <dump_usb_request+0x7c>
                case 2: debug_print("_CFG"); break;
 80046f0:	4813      	ldr	r0, [pc, #76]	; (8004740 <dump_usb_request+0x170>)
 80046f2:	f7ff fbe3 	bl	8003ebc <debug_print>
 80046f6:	e7a9      	b.n	800464c <dump_usb_request+0x7c>
                case 1: debug_print("_DEV"); break;
 80046f8:	4812      	ldr	r0, [pc, #72]	; (8004744 <dump_usb_request+0x174>)
 80046fa:	f7ff fbdf 	bl	8003ebc <debug_print>
 80046fe:	e7a5      	b.n	800464c <dump_usb_request+0x7c>
 8004700:	08005a24 	.word	0x08005a24
 8004704:	08005a2c 	.word	0x08005a2c
 8004708:	08005a34 	.word	0x08005a34
 800470c:	08005a3c 	.word	0x08005a3c
 8004710:	08005a44 	.word	0x08005a44
 8004714:	08005a98 	.word	0x08005a98
 8004718:	08005aa8 	.word	0x08005aa8
 800471c:	08005aac 	.word	0x08005aac
 8004720:	08005ab0 	.word	0x08005ab0
 8004724:	080056cc 	.word	0x080056cc
 8004728:	08005a4c 	.word	0x08005a4c
 800472c:	08005a88 	.word	0x08005a88
 8004730:	08005a80 	.word	0x08005a80
 8004734:	08005a78 	.word	0x08005a78
 8004738:	08005a70 	.word	0x08005a70
 800473c:	08005a68 	.word	0x08005a68
 8004740:	08005a60 	.word	0x08005a60
 8004744:	08005a58 	.word	0x08005a58

08004748 <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 800474c:	780c      	ldrb	r4, [r1, #0]
	usbd_control_complete_callback *complete) {
 800474e:	b083      	sub	sp, #12
 8004750:	460e      	mov	r6, r1
 8004752:	4681      	mov	r9, r0
 8004754:	4692      	mov	sl, r2
 8004756:	4698      	mov	r8, r3
 8004758:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 800475c:	b914      	cbnz	r4, 8004764 <aggregate_callback+0x1c>
 800475e:	784b      	ldrb	r3, [r1, #1]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d031      	beq.n	80047c8 <aggregate_callback+0x80>
 8004764:	4c23      	ldr	r4, [pc, #140]	; (80047f4 <aggregate_callback+0xac>)
 8004766:	f104 0750 	add.w	r7, r4, #80	; 0x50
        if (control_callback[i].cb == NULL) { break; }
 800476a:	6865      	ldr	r5, [r4, #4]
 800476c:	b195      	cbz	r5, 8004794 <aggregate_callback+0x4c>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 800476e:	7861      	ldrb	r1, [r4, #1]
 8004770:	7833      	ldrb	r3, [r6, #0]
 8004772:	7822      	ldrb	r2, [r4, #0]
 8004774:	400b      	ands	r3, r1
 8004776:	429a      	cmp	r2, r3
 8004778:	f104 0408 	add.w	r4, r4, #8
 800477c:	d108      	bne.n	8004790 <aggregate_callback+0x48>
            result = control_callback[i].cb(
 800477e:	f8cd b000 	str.w	fp, [sp]
 8004782:	4643      	mov	r3, r8
 8004784:	4652      	mov	r2, sl
 8004786:	4631      	mov	r1, r6
 8004788:	4648      	mov	r0, r9
 800478a:	47a8      	blx	r5
            if (result == USBD_REQ_HANDLED ||
 800478c:	2801      	cmp	r0, #1
 800478e:	d914      	bls.n	80047ba <aggregate_callback+0x72>
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004790:	42bc      	cmp	r4, r7
 8004792:	d1ea      	bne.n	800476a <aggregate_callback+0x22>
    last_busy_time = millis();
 8004794:	f7ff fd20 	bl	80041d8 <millis>
 8004798:	4602      	mov	r2, r0
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <aggregate_callback+0xb0>)
    debug_print(".");
 800479c:	4817      	ldr	r0, [pc, #92]	; (80047fc <aggregate_callback+0xb4>)
    last_busy_time = millis();
 800479e:	601a      	str	r2, [r3, #0]
    debug_print(".");
 80047a0:	f7ff fb8c 	bl	8003ebc <debug_print>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 80047a4:	7833      	ldrb	r3, [r6, #0]
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d102      	bne.n	80047b0 <aggregate_callback+0x68>
 80047aa:	7873      	ldrb	r3, [r6, #1]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d007      	beq.n	80047c0 <aggregate_callback+0x78>
	    dump_usb_request(">> ", req);
 80047b0:	4813      	ldr	r0, [pc, #76]	; (8004800 <aggregate_callback+0xb8>)
 80047b2:	4631      	mov	r1, r6
 80047b4:	f7ff ff0c 	bl	80045d0 <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 80047b8:	2002      	movs	r0, #2
}
 80047ba:	b003      	add	sp, #12
 80047bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return USBD_REQ_NEXT_CALLBACK;
 80047c0:	2002      	movs	r0, #2
}
 80047c2:	b003      	add	sp, #12
 80047c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    last_busy_time = millis();
 80047c8:	f7ff fd06 	bl	80041d8 <millis>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <aggregate_callback+0xb0>)
    debug_print(".");
 80047d0:	480a      	ldr	r0, [pc, #40]	; (80047fc <aggregate_callback+0xb4>)
    last_busy_time = millis();
 80047d2:	601a      	str	r2, [r3, #0]
    debug_print(".");
 80047d4:	f7ff fb72 	bl	8003ebc <debug_print>
        debug_println("SET_ADR");
 80047d8:	480a      	ldr	r0, [pc, #40]	; (8004804 <aggregate_callback+0xbc>)
 80047da:	f7ff fb75 	bl	8003ec8 <debug_println>
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80047de:	4643      	mov	r3, r8
 80047e0:	4652      	mov	r2, sl
 80047e2:	4631      	mov	r1, r6
 80047e4:	4648      	mov	r0, r9
        *len = 0;          //  Return an empty message.
 80047e6:	f8a8 4000 	strh.w	r4, [r8]
}
 80047ea:	b003      	add	sp, #12
 80047ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80047f0:	f7fc be8e 	b.w	8001510 <_usbd_standard_request_device>
 80047f4:	200008d4 	.word	0x200008d4
 80047f8:	20000924 	.word	0x20000924
 80047fc:	08005b48 	.word	0x08005b48
 8004800:	08005920 	.word	0x08005920
 8004804:	08005918 	.word	0x08005918

08004808 <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004808:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 800480a:	227f      	movs	r2, #127	; 0x7f
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <webusb_set_config+0x20>)
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	f7ff fe80 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8004814:	2800      	cmp	r0, #0
 8004816:	db00      	blt.n	800481a <webusb_set_config+0x12>
}
 8004818:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 800481a:	4804      	ldr	r0, [pc, #16]	; (800482c <webusb_set_config+0x24>)
 800481c:	f7ff fb54 	bl	8003ec8 <debug_println>
}
 8004820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8004824:	f7ff bad0 	b.w	8003dc8 <debug_flush>
 8004828:	08004831 	.word	0x08004831
 800482c:	08005c60 	.word	0x08005c60

08004830 <webusb_control_vendor_request>:
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004830:	7808      	ldrb	r0, [r1, #0]
 8004832:	3040      	adds	r0, #64	; 0x40
 8004834:	b2c0      	uxtb	r0, r0
 8004836:	2801      	cmp	r0, #1
 8004838:	d81e      	bhi.n	8004878 <webusb_control_vendor_request+0x48>
									 usbd_control_complete_callback* complete) {
 800483a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 800483e:	7848      	ldrb	r0, [r1, #1]
 8004840:	460c      	mov	r4, r1
 8004842:	2822      	cmp	r0, #34	; 0x22
 8004844:	d115      	bne.n	8004872 <webusb_control_vendor_request+0x42>
 8004846:	461d      	mov	r5, r3
	switch (req->wIndex) {
 8004848:	888b      	ldrh	r3, [r1, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d116      	bne.n	800487c <webusb_control_vendor_request+0x4c>
			uint16_t index = req->wValue;
 800484e:	884c      	ldrh	r4, [r1, #2]
			if (index == 0) {
 8004850:	b10c      	cbz	r4, 8004856 <webusb_control_vendor_request+0x26>
			if (index == 1) {
 8004852:	2c01      	cmp	r4, #1
 8004854:	d017      	beq.n	8004886 <webusb_control_vendor_request+0x56>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8004856:	481a      	ldr	r0, [pc, #104]	; (80048c0 <webusb_control_vendor_request+0x90>)
 8004858:	f7ff fb30 	bl	8003ebc <debug_print>
 800485c:	4620      	mov	r0, r4
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 800485e:	f7ff fb4d 	bl	8003efc <debug_print_unsigned>
 8004862:	4818      	ldr	r0, [pc, #96]	; (80048c4 <webusb_control_vendor_request+0x94>)
 8004864:	f7ff fb30 	bl	8003ec8 <debug_println>
 8004868:	f7ff faae 	bl	8003dc8 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 800486c:	2000      	movs	r0, #0
}
 800486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004872:	2002      	movs	r0, #2
}
 8004874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004878:	2002      	movs	r0, #2
}
 800487a:	4770      	bx	lr
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 800487c:	4812      	ldr	r0, [pc, #72]	; (80048c8 <webusb_control_vendor_request+0x98>)
 800487e:	f7ff fb1d 	bl	8003ebc <debug_print>
 8004882:	88a0      	ldrh	r0, [r4, #4]
 8004884:	e7eb      	b.n	800485e <webusb_control_vendor_request+0x2e>
				dump_usb_request("weburl", req); // debug_flush(); ////
 8004886:	4811      	ldr	r0, [pc, #68]	; (80048cc <webusb_control_vendor_request+0x9c>)
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 8004888:	6817      	ldr	r7, [r2, #0]
				dump_usb_request("weburl", req); // debug_flush(); ////
 800488a:	f7ff fea1 	bl	80045d0 <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <webusb_control_vendor_request+0xa0>)
 8004890:	f8d3 8000 	ldr.w	r8, [r3]
 8004894:	4640      	mov	r0, r8
 8004896:	f7ff f993 	bl	8003bc0 <strlen>
				url->bDescriptorType = WEBUSB_DT_URL;
 800489a:	2303      	movs	r3, #3
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 800489c:	18c6      	adds	r6, r0, r3
 800489e:	b2f6      	uxtb	r6, r6
				size_t url_len = strlen(webusb_https_url);
 80048a0:	4602      	mov	r2, r0
				url->bDescriptorType = WEBUSB_DT_URL;
 80048a2:	707b      	strb	r3, [r7, #1]
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 80048a4:	703e      	strb	r6, [r7, #0]
				memcpy(&url->URL, webusb_https_url, url_len);
 80048a6:	18f8      	adds	r0, r7, r3
 80048a8:	4641      	mov	r1, r8
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 80048aa:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 80048ac:	f7ff f970 	bl	8003b90 <memcpy>
				*len = MIN(*len, url->bLength);
 80048b0:	882b      	ldrh	r3, [r5, #0]
				status = USBD_REQ_HANDLED;
 80048b2:	4620      	mov	r0, r4
				*len = MIN(*len, url->bLength);
 80048b4:	429e      	cmp	r6, r3
 80048b6:	bf28      	it	cs
 80048b8:	461e      	movcs	r6, r3
 80048ba:	802e      	strh	r6, [r5, #0]
 80048bc:	e7da      	b.n	8004874 <webusb_control_vendor_request+0x44>
 80048be:	bf00      	nop
 80048c0:	08005c08 	.word	0x08005c08
 80048c4:	080056cc 	.word	0x080056cc
 80048c8:	08005c2c 	.word	0x08005c2c
 80048cc:	08005c24 	.word	0x08005c24
 80048d0:	2000094c 	.word	0x2000094c

080048d4 <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 80048d4:	4a0f      	ldr	r2, [pc, #60]	; (8004914 <webusb_setup+0x40>)
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 80048d6:	b510      	push	{r4, lr}

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <webusb_setup+0x44>)
	webusb_https_url = https_url;
 80048da:	6011      	str	r1, [r2, #0]
	int status = aggregate_register_callback(
 80048dc:	227f      	movs	r2, #127	; 0x7f
 80048de:	2140      	movs	r1, #64	; 0x40
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 80048e0:	4604      	mov	r4, r0
	int status = aggregate_register_callback(
 80048e2:	f7ff fe17 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80048e6:	2800      	cmp	r0, #0
 80048e8:	db0d      	blt.n	8004906 <webusb_setup+0x32>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 80048ea:	4620      	mov	r0, r4
 80048ec:	490b      	ldr	r1, [pc, #44]	; (800491c <webusb_setup+0x48>)
 80048ee:	f7ff fdf3 	bl	80044d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80048f2:	2800      	cmp	r0, #0
 80048f4:	db00      	blt.n	80048f8 <webusb_setup+0x24>
}
 80048f6:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80048f8:	4809      	ldr	r0, [pc, #36]	; (8004920 <webusb_setup+0x4c>)
 80048fa:	f7ff fae5 	bl	8003ec8 <debug_println>
}
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004902:	f7ff ba61 	b.w	8003dc8 <debug_flush>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004906:	4806      	ldr	r0, [pc, #24]	; (8004920 <webusb_setup+0x4c>)
 8004908:	f7ff fade 	bl	8003ec8 <debug_println>
 800490c:	f7ff fa5c 	bl	8003dc8 <debug_flush>
 8004910:	e7eb      	b.n	80048ea <webusb_setup+0x16>
 8004912:	bf00      	nop
 8004914:	2000094c 	.word	0x2000094c
 8004918:	08004831 	.word	0x08004831
 800491c:	08004809 	.word	0x08004809
 8004920:	08005c80 	.word	0x08005c80

08004924 <winusb_control_vendor_request>:
}

static int winusb_control_vendor_request(usbd_device *usbd_dev,
					struct usb_setup_data *req,
					uint8_t **buf, uint16_t *len,
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004926:	780d      	ldrb	r5, [r1, #0]
 8004928:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800492c:	b2c0      	uxtb	r0, r0
 800492e:	2801      	cmp	r0, #1
 8004930:	d80b      	bhi.n	800494a <winusb_control_vendor_request+0x26>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8004932:	7848      	ldrb	r0, [r1, #1]
 8004934:	2821      	cmp	r0, #33	; 0x21
 8004936:	d108      	bne.n	800494a <winusb_control_vendor_request+0x26>

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004938:	2dc0      	cmp	r5, #192	; 0xc0
 800493a:	461f      	mov	r7, r3
 800493c:	4616      	mov	r6, r2
 800493e:	888b      	ldrh	r3, [r1, #4]
 8004940:	d105      	bne.n	800494e <winusb_control_vendor_request+0x2a>
 8004942:	2b07      	cmp	r3, #7
 8004944:	d024      	beq.n	8004990 <winusb_control_vendor_request+0x6c>
#ifdef NOTUSED
		uint8_t *b = (uint8_t*) &msos20_descriptor_set; int i;
		debug_print_unsigned(MSOS20_DESCRIPTOR_SET_SIZE); debug_print(" / ");
		for (i = 0; i < MSOS20_DESCRIPTOR_SET_SIZE; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004946:	2b04      	cmp	r3, #4
 8004948:	d015      	beq.n	8004976 <winusb_control_vendor_request+0x52>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 800494a:	2002      	movs	r0, #2

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 800494e:	2b05      	cmp	r3, #5
 8004950:	d1fb      	bne.n	800494a <winusb_control_vendor_request+0x26>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <winusb_control_vendor_request+0x84>)
 8004954:	884b      	ldrh	r3, [r1, #2]
 8004956:	7c12      	ldrb	r2, [r2, #16]
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 8004958:	b2db      	uxtb	r3, r3
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 800495a:	429a      	cmp	r2, r3
 800495c:	d1f5      	bne.n	800494a <winusb_control_vendor_request+0x26>
		dump_usb_request("winprp", req); // debug_flush(); ////
 800495e:	4813      	ldr	r0, [pc, #76]	; (80049ac <winusb_control_vendor_request+0x88>)
 8004960:	f7ff fe36 	bl	80045d0 <dump_usb_request>
		*len = MIN(*len, guid.header.dwLength);
 8004964:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*)(&guid);
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <winusb_control_vendor_request+0x8c>)
		*len = MIN(*len, guid.header.dwLength);
 8004968:	2b92      	cmp	r3, #146	; 0x92
 800496a:	bf28      	it	cs
 800496c:	2392      	movcs	r3, #146	; 0x92
		*buf = (uint8_t*)(&guid);
 800496e:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 8004970:	2001      	movs	r0, #1
		*len = MIN(*len, guid.header.dwLength);
 8004972:	803b      	strh	r3, [r7, #0]
}
 8004974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("winid", req); // debug_flush(); ////
 8004976:	480f      	ldr	r0, [pc, #60]	; (80049b4 <winusb_control_vendor_request+0x90>)
 8004978:	f7ff fe2a 	bl	80045d0 <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 800497c:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <winusb_control_vendor_request+0x84>)
		*len = MIN(*len, winusb_wcid.header.dwLength);
 800497e:	883b      	ldrh	r3, [r7, #0]
 8004980:	6811      	ldr	r1, [r2, #0]
		status = USBD_REQ_HANDLED;
 8004982:	2001      	movs	r0, #1
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004984:	428b      	cmp	r3, r1
 8004986:	bf28      	it	cs
 8004988:	460b      	movcs	r3, r1
		*buf = (uint8_t*)(&winusb_wcid);
 800498a:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 800498c:	803b      	strh	r3, [r7, #0]
}
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("windes", req); // debug_flush(); ////
 8004990:	4809      	ldr	r0, [pc, #36]	; (80049b8 <winusb_control_vendor_request+0x94>)
 8004992:	f7ff fe1d 	bl	80045d0 <dump_usb_request>
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004996:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*) &msos20_descriptor_set;
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <winusb_control_vendor_request+0x98>)
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 800499a:	2bb2      	cmp	r3, #178	; 0xb2
 800499c:	bf28      	it	cs
 800499e:	23b2      	movcs	r3, #178	; 0xb2
		*buf = (uint8_t*) &msos20_descriptor_set;
 80049a0:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 80049a2:	2001      	movs	r0, #1
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 80049a4:	803b      	strh	r3, [r7, #0]
}
 80049a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a8:	20000510 	.word	0x20000510
 80049ac:	08005d58 	.word	0x08005d58
 80049b0:	08005c98 	.word	0x08005c98
 80049b4:	08005d50 	.word	0x08005d50
 80049b8:	08005d48 	.word	0x08005d48
 80049bc:	2000045c 	.word	0x2000045c

080049c0 <winusb_set_config>:

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 80049c0:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 80049c2:	2260      	movs	r2, #96	; 0x60
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <winusb_set_config+0x20>)
 80049c6:	2140      	movs	r1, #64	; 0x40
 80049c8:	f7ff fda4 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 80049cc:	2800      	cmp	r0, #0
 80049ce:	db00      	blt.n	80049d2 <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 80049d0:	bd08      	pop	{r3, pc}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 80049d2:	4804      	ldr	r0, [pc, #16]	; (80049e4 <winusb_set_config+0x24>)
 80049d4:	f7ff fa78 	bl	8003ec8 <debug_println>
}
 80049d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 80049dc:	f7ff b9f4 	b.w	8003dc8 <debug_flush>
 80049e0:	08004925 	.word	0x08004925
 80049e4:	08005d68 	.word	0x08005d68

080049e8 <winusb_descriptor_request>:
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 80049e8:	b538      	push	{r3, r4, r5, lr}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 80049ea:	780c      	ldrb	r4, [r1, #0]
 80049ec:	f014 0f60 	tst.w	r4, #96	; 0x60
 80049f0:	d117      	bne.n	8004a22 <winusb_descriptor_request+0x3a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 80049f2:	784c      	ldrb	r4, [r1, #1]
 80049f4:	2c06      	cmp	r4, #6
 80049f6:	d114      	bne.n	8004a22 <winusb_descriptor_request+0x3a>
 80049f8:	8848      	ldrh	r0, [r1, #2]
 80049fa:	0a04      	lsrs	r4, r0, #8
 80049fc:	2c03      	cmp	r4, #3
 80049fe:	d110      	bne.n	8004a22 <winusb_descriptor_request+0x3a>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8004a00:	b2c0      	uxtb	r0, r0
 8004a02:	28ee      	cmp	r0, #238	; 0xee
 8004a04:	d10d      	bne.n	8004a22 <winusb_descriptor_request+0x3a>
 8004a06:	461c      	mov	r4, r3
			dump_usb_request("winee", req); // debug_flush(); ////
 8004a08:	4807      	ldr	r0, [pc, #28]	; (8004a28 <winusb_descriptor_request+0x40>)
 8004a0a:	4615      	mov	r5, r2
 8004a0c:	f7ff fde0 	bl	80045d0 <dump_usb_request>
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004a10:	8823      	ldrh	r3, [r4, #0]
			*buf = (uint8_t*) &winusb_string_descriptor;
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <winusb_descriptor_request+0x44>)
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004a14:	2b12      	cmp	r3, #18
 8004a16:	bf28      	it	cs
 8004a18:	2312      	movcs	r3, #18
			*buf = (uint8_t*) &winusb_string_descriptor;
 8004a1a:	602a      	str	r2, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	8023      	strh	r3, [r4, #0]
}
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8004a22:	2002      	movs	r0, #2
}
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	08005d60 	.word	0x08005d60
 8004a2c:	08005da0 	.word	0x08005da0

08004a30 <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <winusb_setup+0x48>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8004a32:	b570      	push	{r4, r5, r6, lr}
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8004a34:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004a36:	4911      	ldr	r1, [pc, #68]	; (8004a7c <winusb_setup+0x4c>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8004a38:	4604      	mov	r4, r0
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004a3a:	f7ff fd4d 	bl	80044d8 <aggregate_register_config_callback>

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <winusb_setup+0x50>)
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004a40:	4605      	mov	r5, r0
	int status1 = aggregate_register_callback(
 8004a42:	2260      	movs	r2, #96	; 0x60
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fd64 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <winusb_setup+0x54>)
	int status1 = aggregate_register_callback(
 8004a4e:	4606      	mov	r6, r0
	int status2 = aggregate_register_callback(
 8004a50:	221f      	movs	r2, #31
 8004a52:	4620      	mov	r0, r4
 8004a54:	2100      	movs	r1, #0
 8004a56:	f7ff fd5d 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	db04      	blt.n	8004a68 <winusb_setup+0x38>
 8004a5e:	2e00      	cmp	r6, #0
 8004a60:	db02      	blt.n	8004a68 <winusb_setup+0x38>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	db00      	blt.n	8004a68 <winusb_setup+0x38>
}
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004a68:	4807      	ldr	r0, [pc, #28]	; (8004a88 <winusb_setup+0x58>)
 8004a6a:	f7ff fa2d 	bl	8003ec8 <debug_println>
}
 8004a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004a72:	f7ff b9a9 	b.w	8003dc8 <debug_flush>
 8004a76:	bf00      	nop
 8004a78:	20000510 	.word	0x20000510
 8004a7c:	080049c1 	.word	0x080049c1
 8004a80:	08004925 	.word	0x08004925
 8004a84:	080049e9 	.word	0x080049e9
 8004a88:	08005d88 	.word	0x08005d88

08004a8c <target_set_led>:
#endif  //  NOTUSED

void target_set_led(int on) {
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8004a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 8004a90:	b910      	cbnz	r0, 8004a98 <target_set_led+0xc>
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8004a92:	4803      	ldr	r0, [pc, #12]	; (8004aa0 <target_set_led+0x14>)
 8004a94:	f7fb be5c 	b.w	8000750 <gpio_set>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <target_set_led+0x14>)
 8004a9a:	f7fb be5b 	b.w	8000754 <gpio_clear>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000

08004aa4 <target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void target_gpio_setup(void) {
 8004aa4:	b508      	push	{r3, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 8004aa6:	f240 3002 	movw	r0, #770	; 0x302
 8004aaa:	f7fb fe67 	bl	800077c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 8004aae:	f240 3003 	movw	r0, #771	; 0x303
 8004ab2:	f7fb fe63 	bl	800077c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 8004ab6:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004aba:	f7fb fe5f 	bl	800077c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 8004abe:	f240 3097 	movw	r0, #919	; 0x397
 8004ac2:	f7fb fe5b 	bl	800077c <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8004ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aca:	480f      	ldr	r0, [pc, #60]	; (8004b08 <target_gpio_setup+0x64>)
 8004acc:	f7fb fe40 	bl	8000750 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	480b      	ldr	r0, [pc, #44]	; (8004b08 <target_gpio_setup+0x64>)
 8004ada:	f7fb ff65 	bl	80009a8 <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 8004ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	4809      	ldr	r0, [pc, #36]	; (8004b0c <target_gpio_setup+0x68>)
 8004ae8:	f7fb ff5e 	bl	80009a8 <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 8004aec:	2110      	movs	r1, #16
 8004aee:	4806      	ldr	r0, [pc, #24]	; (8004b08 <target_gpio_setup+0x64>)
 8004af0:	f7fb fe30 	bl	8000754 <gpio_clear>
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <target_gpio_setup+0x6c>)
        __asm__("nop");
 8004af6:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8004af8:	3b01      	subs	r3, #1
 8004afa:	d1fc      	bne.n	8004af6 <target_gpio_setup+0x52>
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <target_gpio_setup+0x6c>)
        __asm__("nop");
 8004afe:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8004b00:	3b01      	subs	r3, #1
 8004b02:	d1fc      	bne.n	8004afe <target_gpio_setup+0x5a>
    sleep_us(20000);
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
}
 8004b04:	bd08      	pop	{r3, pc}
 8004b06:	bf00      	nop
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	40010800 	.word	0x40010800
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <target_usb_init>:

const usbd_driver* target_usb_init(void) {
 8004b14:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8004b16:	f240 2017 	movw	r0, #535	; 0x217
 8004b1a:	f7fb fe3d 	bl	8000798 <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 8004b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b22:	4804      	ldr	r0, [pc, #16]	; (8004b34 <target_usb_init+0x20>)
 8004b24:	f7fb fe16 	bl	8000754 <gpio_clear>
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <target_usb_init+0x24>)
    int i;
    for (i = 0; i < 800000; i++) {
        __asm__("nop");
 8004b2a:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	d1fc      	bne.n	8004b2a <target_usb_init+0x16>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 8004b30:	4802      	ldr	r0, [pc, #8]	; (8004b3c <target_usb_init+0x28>)
 8004b32:	bd08      	pop	{r3, pc}
 8004b34:	40010800 	.word	0x40010800
 8004b38:	000c3500 	.word	0x000c3500
 8004b3c:	080056fc 	.word	0x080056fc

08004b40 <target_manifest_app>:

void target_manifest_app(void) {
 8004b40:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_force_flush();
 8004b42:	f7ff f94b 	bl	8003ddc <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 8004b46:	4903      	ldr	r1, [pc, #12]	; (8004b54 <target_manifest_app+0x14>)
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f000 fcd1 	bl	80054f0 <backup_write>
    scb_reset_system();
 8004b4e:	f7fb fde3 	bl	8000718 <scb_reset_system>
 8004b52:	bf00      	nop
 8004b54:	3f82722a 	.word	0x3f82722a

08004b58 <target_manifest_bootloader>:
}

void target_manifest_bootloader(void) {
 8004b58:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_force_flush();
 8004b5a:	f7ff f93f 	bl	8003ddc <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 8004b5e:	4903      	ldr	r1, [pc, #12]	; (8004b6c <target_manifest_bootloader+0x14>)
 8004b60:	2000      	movs	r0, #0
 8004b62:	f000 fcc5 	bl	80054f0 <backup_write>
    scb_reset_system();
 8004b66:	f7fb fdd7 	bl	8000718 <scb_reset_system>
 8004b6a:	bf00      	nop
 8004b6c:	544f4f42 	.word	0x544f4f42

08004b70 <target_get_force_bootloader>:
        return true;        
    }
    return false;
}

bool target_get_force_bootloader(void) {
 8004b70:	b508      	push	{r3, lr}
    //  Return true if we should run the bootloader at startup.
    //  Note: Should not be called twice because it changes the backup registers.
    bool force = false;
    /* Check the RTC backup register */
    uint32_t cmd = backup_read(BKP0);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f000 fcd8 	bl	8005528 <backup_read>
    if (cmd == CMD_BOOT) {
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <target_get_force_bootloader+0x30>)
 8004b7a:	4298      	cmp	r0, r3
 8004b7c:	d009      	beq.n	8004b92 <target_get_force_bootloader+0x22>
        // asked to go into bootloader?
        backup_write(BKP0, 0);
        return true;
    }
    if (cmd == CMD_APP) {        
 8004b7e:	4909      	ldr	r1, [pc, #36]	; (8004ba4 <target_get_force_bootloader+0x34>)
 8004b80:	4288      	cmp	r0, r1
        // we were told to reset into app
        backup_write(BKP0, 0);
 8004b82:	bf0a      	itet	eq
 8004b84:	2100      	moveq	r1, #0
        return false;
    }

    // a reset now should go into app
    backup_write(BKP0, CMD_APP);
 8004b86:	2000      	movne	r0, #0
        backup_write(BKP0, 0);
 8004b88:	4608      	moveq	r0, r1
    backup_write(BKP0, CMD_APP);
 8004b8a:	f000 fcb1 	bl	80054f0 <backup_write>
            force = true;
        }
    }
#endif

    return force;
 8004b8e:	2000      	movs	r0, #0
}
 8004b90:	bd08      	pop	{r3, pc}
        backup_write(BKP0, 0);
 8004b92:	2100      	movs	r1, #0
 8004b94:	4608      	mov	r0, r1
 8004b96:	f000 fcab 	bl	80054f0 <backup_write>
 8004b9a:	2001      	movs	r0, #1
}
 8004b9c:	bd08      	pop	{r3, pc}
 8004b9e:	bf00      	nop
 8004ba0:	544f4f42 	.word	0x544f4f42
 8004ba4:	3f82722a 	.word	0x3f82722a

08004ba8 <target_get_startup_mode>:
enum StartupMode target_get_startup_mode(void) {
 8004ba8:	b538      	push	{r3, r4, r5, lr}
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 8004baa:	4c17      	ldr	r4, [pc, #92]	; (8004c08 <target_get_startup_mode+0x60>)
 8004bac:	7820      	ldrb	r0, [r4, #0]
 8004bae:	b100      	cbz	r0, 8004bb2 <target_get_startup_mode+0xa>
}
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <target_get_startup_mode+0x64>)
 8004bb4:	681d      	ldr	r5, [r3, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 8004bb6:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8004bba:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 8004bbe:	d015      	beq.n	8004bec <target_get_startup_mode+0x44>
 8004bc0:	f005 437f 	and.w	r3, r5, #4278190080	; 0xff000000
 8004bc4:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 8004bc8:	d010      	beq.n	8004bec <target_get_startup_mode+0x44>
    debug_print("app missing "); debug_printhex_unsigned(first_word); debug_println("");
 8004bca:	4811      	ldr	r0, [pc, #68]	; (8004c10 <target_get_startup_mode+0x68>)
 8004bcc:	f7ff f976 	bl	8003ebc <debug_print>
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f7ff f9b9 	bl	8003f48 <debug_printhex_unsigned>
 8004bd6:	480f      	ldr	r0, [pc, #60]	; (8004c14 <target_get_startup_mode+0x6c>)
 8004bd8:	f7ff f976 	bl	8003ec8 <debug_println>
    if (target_get_force_bootloader() || !appValid) {
 8004bdc:	f7ff ffc8 	bl	8004b70 <target_get_force_bootloader>
        debug_println("bootloader mode");
 8004be0:	480d      	ldr	r0, [pc, #52]	; (8004c18 <target_get_startup_mode+0x70>)
 8004be2:	f7ff f971 	bl	8003ec8 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8004be6:	2002      	movs	r0, #2
 8004be8:	7020      	strb	r0, [r4, #0]
}
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
        debug_println("app exists");
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <target_get_startup_mode+0x74>)
 8004bee:	f7ff f96b 	bl	8003ec8 <debug_println>
    if (target_get_force_bootloader() || !appValid) {
 8004bf2:	f7ff ffbd 	bl	8004b70 <target_get_force_bootloader>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d1f2      	bne.n	8004be0 <target_get_startup_mode+0x38>
        debug_println("app mode");
 8004bfa:	4809      	ldr	r0, [pc, #36]	; (8004c20 <target_get_startup_mode+0x78>)
 8004bfc:	f7ff f964 	bl	8003ec8 <debug_println>
        startup_mode = APPLICATION_MODE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	7023      	strb	r3, [r4, #0]
}
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	20000b46 	.word	0x20000b46
 8004c0c:	08006800 	.word	0x08006800
 8004c10:	08005e34 	.word	0x08005e34
 8004c14:	080056cc 	.word	0x080056cc
 8004c18:	08005e44 	.word	0x08005e44
 8004c1c:	08005e28 	.word	0x08005e28
 8004c20:	08005e54 	.word	0x08005e54

08004c24 <target_get_serial_number>:

void target_get_serial_number(char* dest, size_t max_chars) {
    desig_get_unique_id_as_string(dest, max_chars+1);
 8004c24:	3101      	adds	r1, #1
 8004c26:	f7fb bdc9 	b.w	80007bc <desig_get_unique_id_as_string>
 8004c2a:	bf00      	nop

08004c2c <target_flash_unlock>:

    return (flash_end >= flash_start) ? (size_t)(flash_end - flash_start) : 0;
}

void target_flash_unlock(void) {
    flash_unlock();
 8004c2c:	f7fb bd7c 	b.w	8000728 <flash_unlock>

08004c30 <target_flash_lock>:
}

void target_flash_lock(void) {
    flash_lock();
 8004c30:	f7fb bd86 	b.w	8000740 <flash_lock>

08004c34 <target_flash_program_array>:

static inline uint16_t* get_flash_page_address(uint16_t* dest) {
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
}

bool target_flash_program_array(uint16_t* dest, const uint16_t* data, size_t half_word_count) {
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	4616      	mov	r6, r2
    /* Remember the bounds of erased data in the current page */
    static uint16_t* erase_start;
    static uint16_t* erase_end;

    const uint16_t* flash_end = get_flash_end();
    debug_print("target_flash_program_array dest "); debug_print_unsigned((size_t) dest); ////
 8004c3e:	482e      	ldr	r0, [pc, #184]	; (8004cf8 <target_flash_program_array+0xc4>)
 8004c40:	f7ff f93c 	bl	8003ebc <debug_print>
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff f959 	bl	8003efc <debug_print_unsigned>
    debug_print(", data "); debug_print_unsigned((size_t) data); 
 8004c4a:	482c      	ldr	r0, [pc, #176]	; (8004cfc <target_flash_program_array+0xc8>)
 8004c4c:	f7ff f936 	bl	8003ebc <debug_print>
 8004c50:	4628      	mov	r0, r5
 8004c52:	f7ff f953 	bl	8003efc <debug_print_unsigned>
    debug_print(", half_word_count "); debug_print_unsigned((size_t) half_word_count); 
 8004c56:	482a      	ldr	r0, [pc, #168]	; (8004d00 <target_flash_program_array+0xcc>)
 8004c58:	f7ff f930 	bl	8003ebc <debug_print>
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff f94d 	bl	8003efc <debug_print_unsigned>
    debug_print(", flash_end "); debug_print_unsigned((size_t) flash_end); 
 8004c62:	4828      	ldr	r0, [pc, #160]	; (8004d04 <target_flash_program_array+0xd0>)
 8004c64:	f7ff f92a 	bl	8003ebc <debug_print>
 8004c68:	4827      	ldr	r0, [pc, #156]	; (8004d08 <target_flash_program_array+0xd4>)
 8004c6a:	f7ff f947 	bl	8003efc <debug_print_unsigned>
    debug_println(""); debug_flush(); ////
 8004c6e:	4827      	ldr	r0, [pc, #156]	; (8004d0c <target_flash_program_array+0xd8>)
 8004c70:	f7ff f92a 	bl	8003ec8 <debug_println>
 8004c74:	f7ff f8a8 	bl	8003dc8 <debug_flush>
    while (half_word_count > 0) {
 8004c78:	b39e      	cbz	r6, 8004ce2 <target_flash_program_array+0xae>
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {
 8004c7a:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <target_flash_program_array+0xdc>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d833      	bhi.n	8004ce8 <target_flash_program_array+0xb4>
 8004c80:	4699      	mov	r9, r3
 8004c82:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004d20 <target_flash_program_array+0xec>
 8004c86:	4f23      	ldr	r7, [pc, #140]	; (8004d14 <target_flash_program_array+0xe0>)
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
 8004c88:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004d24 <target_flash_program_array+0xf0>
 8004c8c:	3d02      	subs	r5, #2
 8004c8e:	e003      	b.n	8004c98 <target_flash_program_array+0x64>
    while (half_word_count > 0) {
 8004c90:	3e01      	subs	r6, #1
 8004c92:	d026      	beq.n	8004ce2 <target_flash_program_array+0xae>
        if (dest >= flash_end) {
 8004c94:	454c      	cmp	r4, r9
 8004c96:	d827      	bhi.n	8004ce8 <target_flash_program_array+0xb4>
            debug_println("dest >= flash_end"); debug_flush();
            verified = false;
            break;
        }

        if (dest >= erase_end || dest < erase_start) {
 8004c98:	f8d8 2000 	ldr.w	r2, [r8]
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
 8004c9c:	ea04 030a 	and.w	r3, r4, sl
        if (dest >= erase_end || dest < erase_start) {
 8004ca0:	42a2      	cmp	r2, r4
            erase_start = get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 8004ca2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
        if (dest >= erase_end || dest < erase_start) {
 8004ca6:	d902      	bls.n	8004cae <target_flash_program_array+0x7a>
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	42a1      	cmp	r1, r4
 8004cac:	d905      	bls.n	8004cba <target_flash_program_array+0x86>
            flash_erase_page((uint32_t)erase_start);
 8004cae:	4618      	mov	r0, r3
            erase_start = get_flash_page_address(dest);
 8004cb0:	603b      	str	r3, [r7, #0]
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 8004cb2:	f8c8 2000 	str.w	r2, [r8]
            flash_erase_page((uint32_t)erase_start);
 8004cb6:	f7fb fe19 	bl	80008ec <flash_erase_page>
        }
        flash_program_half_word((uint32_t)dest, *data);
 8004cba:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8004cbe:	4620      	mov	r0, r4
        erase_start = dest + 1;
 8004cc0:	3402      	adds	r4, #2
        flash_program_half_word((uint32_t)dest, *data);
 8004cc2:	f7fb fdc7 	bl	8000854 <flash_program_half_word>
        if (*dest != *data) {
 8004cc6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8004cca:	882b      	ldrh	r3, [r5, #0]
        erase_start = dest + 1;
 8004ccc:	603c      	str	r4, [r7, #0]
        if (*dest != *data) {
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d0de      	beq.n	8004c90 <target_flash_program_array+0x5c>
            debug_println("*dest != *data"); debug_flush();
 8004cd2:	4811      	ldr	r0, [pc, #68]	; (8004d18 <target_flash_program_array+0xe4>)
 8004cd4:	f7ff f8f8 	bl	8003ec8 <debug_println>
 8004cd8:	f7ff f876 	bl	8003dc8 <debug_flush>
            verified = false;
 8004cdc:	2000      	movs	r0, #0
        data++;
        half_word_count--;
    }

    return verified;
}
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool verified = true;
 8004ce2:	2001      	movs	r0, #1
}
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            debug_println("dest >= flash_end"); debug_flush();
 8004ce8:	480c      	ldr	r0, [pc, #48]	; (8004d1c <target_flash_program_array+0xe8>)
 8004cea:	f7ff f8ed 	bl	8003ec8 <debug_println>
 8004cee:	f7ff f86b 	bl	8003dc8 <debug_flush>
            verified = false;
 8004cf2:	2000      	movs	r0, #0
}
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	08005db4 	.word	0x08005db4
 8004cfc:	08005dd8 	.word	0x08005dd8
 8004d00:	08005de0 	.word	0x08005de0
 8004d04:	08005df4 	.word	0x08005df4
 8004d08:	08010000 	.word	0x08010000
 8004d0c:	080056cc 	.word	0x080056cc
 8004d10:	0800ffff 	.word	0x0800ffff
 8004d14:	20000954 	.word	0x20000954
 8004d18:	08005e18 	.word	0x08005e18
 8004d1c:	08005e04 	.word	0x08005e04
 8004d20:	20000950 	.word	0x20000950
 8004d24:	fffffc00 	.word	0xfffffc00

08004d28 <cdcacm_comm_cb>:
static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	//  Callback for the comm channel.
	debug_println("comm");
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <cdcacm_comm_cb+0x8>)
 8004d2a:	f7ff b8cd 	b.w	8003ec8 <debug_println>
 8004d2e:	bf00      	nop
 8004d30:	08005e78 	.word	0x08005e78

08004d34 <cdcacm_set_config>:
}

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8004d34:	b510      	push	{r4, lr}
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <cdcacm_set_config+0x58>)
) {
 8004d38:	b082      	sub	sp, #8
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	9200      	str	r2, [sp, #0]
 8004d3e:	2103      	movs	r1, #3
 8004d40:	2202      	movs	r2, #2
) {
 8004d42:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d44:	f7fb ffc8 	bl	8000cd8 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	2183      	movs	r1, #131	; 0x83
 8004d54:	f7fb ffc0 	bl	8000cd8 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <cdcacm_set_config+0x5c>)
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	2310      	movs	r3, #16
 8004d62:	2184      	movs	r1, #132	; 0x84
 8004d64:	f7fb ffb8 	bl	8000cd8 <usbd_ep_setup>
	int status = aggregate_register_callback(
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <cdcacm_set_config+0x60>)
 8004d6c:	227f      	movs	r2, #127	; 0x7f
 8004d6e:	2121      	movs	r1, #33	; 0x21
 8004d70:	f7ff fbd0 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004d74:	2800      	cmp	r0, #0
 8004d76:	db01      	blt.n	8004d7c <cdcacm_set_config+0x48>
}
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004d7c:	4806      	ldr	r0, [pc, #24]	; (8004d98 <cdcacm_set_config+0x64>)
 8004d7e:	f7ff f8a3 	bl	8003ec8 <debug_println>
}
 8004d82:	b002      	add	sp, #8
 8004d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004d88:	f7ff b81e 	b.w	8003dc8 <debug_flush>
 8004d8c:	08004e55 	.word	0x08004e55
 8004d90:	08004d29 	.word	0x08004d29
 8004d94:	08004d9d 	.word	0x08004d9d
 8004d98:	08005ea8 	.word	0x08005ea8

08004d9c <cdcacm_control_request>:
) {
 8004d9c:	b510      	push	{r4, lr}
	switch (req->bRequest) {
 8004d9e:	7849      	ldrb	r1, [r1, #1]
 8004da0:	2921      	cmp	r1, #33	; 0x21
 8004da2:	d00a      	beq.n	8004dba <cdcacm_control_request+0x1e>
 8004da4:	2922      	cmp	r1, #34	; 0x22
 8004da6:	d006      	beq.n	8004db6 <cdcacm_control_request+0x1a>
 8004da8:	2920      	cmp	r1, #32
 8004daa:	d001      	beq.n	8004db0 <cdcacm_control_request+0x14>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 8004dac:	2002      	movs	r0, #2
}
 8004dae:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	2a06      	cmp	r2, #6
 8004db4:	d90a      	bls.n	8004dcc <cdcacm_control_request+0x30>
			return USBD_REQ_HANDLED;
 8004db6:	2001      	movs	r0, #1
}
 8004db8:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8004dba:	8819      	ldrh	r1, [r3, #0]
 8004dbc:	2906      	cmp	r1, #6
 8004dbe:	d905      	bls.n	8004dcc <cdcacm_control_request+0x30>
			*len = sizeof(struct usb_cdc_line_coding);
 8004dc0:	2107      	movs	r1, #7
			*buf = (uint8_t *) &line_coding;
 8004dc2:	4c0b      	ldr	r4, [pc, #44]	; (8004df0 <cdcacm_control_request+0x54>)
			return USBD_REQ_HANDLED;
 8004dc4:	2001      	movs	r0, #1
			*buf = (uint8_t *) &line_coding;
 8004dc6:	6014      	str	r4, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 8004dc8:	8019      	strh	r1, [r3, #0]
}
 8004dca:	bd10      	pop	{r4, pc}
 8004dcc:	461c      	mov	r4, r3
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 8004dce:	4809      	ldr	r0, [pc, #36]	; (8004df4 <cdcacm_control_request+0x58>)
 8004dd0:	f7ff f874 	bl	8003ebc <debug_print>
 8004dd4:	2007      	movs	r0, #7
 8004dd6:	f7ff f891 	bl	8003efc <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 8004dda:	4807      	ldr	r0, [pc, #28]	; (8004df8 <cdcacm_control_request+0x5c>)
 8004ddc:	f7ff f86e 	bl	8003ebc <debug_print>
 8004de0:	8820      	ldrh	r0, [r4, #0]
 8004de2:	f7ff f88b 	bl	8003efc <debug_print_unsigned>
				debug_println("");
 8004de6:	4805      	ldr	r0, [pc, #20]	; (8004dfc <cdcacm_control_request+0x60>)
 8004de8:	f7ff f86e 	bl	8003ec8 <debug_println>
				return USBD_REQ_NOTSUPP;
 8004dec:	2000      	movs	r0, #0
}
 8004dee:	bd10      	pop	{r4, pc}
 8004df0:	08005ec8 	.word	0x08005ec8
 8004df4:	08005e80 	.word	0x08005e80
 8004df8:	08005a44 	.word	0x08005a44
 8004dfc:	080056cc 	.word	0x080056cc

08004e00 <cdcadm_transmit>:
) {
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <cdcadm_transmit+0x50>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b303      	cbz	r3, 8004e4a <cdcadm_transmit+0x4a>
 8004e08:	4607      	mov	r7, r0
 8004e0a:	b1f0      	cbz	r0, 8004e4a <cdcadm_transmit+0x4a>
 8004e0c:	460e      	mov	r6, r1
 8004e0e:	b1e1      	cbz	r1, 8004e4a <cdcadm_transmit+0x4a>
 8004e10:	4614      	mov	r4, r2
	if (len == 0) { return 0; }
 8004e12:	b192      	cbz	r2, 8004e3a <cdcadm_transmit+0x3a>
	if (len <= MAX_USB_PACKET_SIZE) {
 8004e14:	2a40      	cmp	r2, #64	; 0x40
 8004e16:	d912      	bls.n	8004e3e <cdcadm_transmit+0x3e>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 8004e18:	2c40      	cmp	r4, #64	; 0x40
 8004e1a:	4625      	mov	r5, r4
 8004e1c:	bf28      	it	cs
 8004e1e:	2540      	movcs	r5, #64	; 0x40
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8004e20:	4632      	mov	r2, r6
 8004e22:	462b      	mov	r3, r5
 8004e24:	2183      	movs	r1, #131	; 0x83
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7fb ff5e 	bl	8000ce8 <usbd_ep_write_packet>
		len = len - tx_len;
 8004e2c:	1b64      	subs	r4, r4, r5
		if (status != tx_len) { return 0; }  //  Stop if error.
 8004e2e:	4285      	cmp	r5, r0
		len = len - tx_len;
 8004e30:	b2a4      	uxth	r4, r4
		if (status != tx_len) { return 0; }  //  Stop if error.
 8004e32:	d102      	bne.n	8004e3a <cdcadm_transmit+0x3a>
		buf = &buf[tx_len];
 8004e34:	442e      	add	r6, r5
	while (len > 0) {
 8004e36:	2c00      	cmp	r4, #0
 8004e38:	d1ee      	bne.n	8004e18 <cdcadm_transmit+0x18>
	if (len == 0) { return 0; }
 8004e3a:	2000      	movs	r0, #0
}
 8004e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8004e3e:	4613      	mov	r3, r2
 8004e40:	460a      	mov	r2, r1
 8004e42:	2183      	movs	r1, #131	; 0x83
 8004e44:	f7fb ff50 	bl	8000ce8 <usbd_ep_write_packet>
}
 8004e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	20000b47 	.word	0x20000b47

08004e54 <cdcacm_data_rx_cb>:
) {
 8004e54:	b570      	push	{r4, r5, r6, lr}
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8004e56:	4d0f      	ldr	r5, [pc, #60]	; (8004e94 <cdcacm_data_rx_cb+0x40>)
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	2103      	movs	r1, #3
) {
 8004e5e:	4606      	mov	r6, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8004e60:	f7fb ff4a 	bl	8000cf8 <usbd_ep_read_packet>
    if (len == 0) { return; }
 8004e64:	b1a8      	cbz	r0, 8004e92 <cdcacm_data_rx_cb+0x3e>
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8004e66:	2840      	cmp	r0, #64	; 0x40
 8004e68:	bf28      	it	cs
 8004e6a:	2040      	movcs	r0, #64	; 0x40
    rx_buf[pos] = 0;
 8004e6c:	2100      	movs	r1, #0
	if (!connected) {
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <cdcacm_data_rx_cb+0x44>)
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8004e70:	b284      	uxth	r4, r0
	if (!connected) {
 8004e72:	781a      	ldrb	r2, [r3, #0]
    rx_buf[pos] = 0;
 8004e74:	5529      	strb	r1, [r5, r4]
	if (!connected) {
 8004e76:	b92a      	cbnz	r2, 8004e84 <cdcacm_data_rx_cb+0x30>
		connected = 1;
 8004e78:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 8004e7a:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <cdcacm_data_rx_cb+0x48>)
		connected = 1;
 8004e7c:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b103      	cbz	r3, 8004e84 <cdcacm_data_rx_cb+0x30>
 8004e82:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8004e84:	4622      	mov	r2, r4
 8004e86:	4630      	mov	r0, r6
}
 8004e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8004e8c:	4901      	ldr	r1, [pc, #4]	; (8004e94 <cdcacm_data_rx_cb+0x40>)
 8004e8e:	f7ff bfb7 	b.w	8004e00 <cdcadm_transmit>
}
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	2000095c 	.word	0x2000095c
 8004e98:	20000b47 	.word	0x20000b47
 8004e9c:	20000958 	.word	0x20000958

08004ea0 <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8004ea0:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <cdc_setup+0x20>)
 8004ea4:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8004ea6:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <cdc_setup+0x24>)
 8004ea8:	f7ff fb16 	bl	80044d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004eac:	2800      	cmp	r0, #0
 8004eae:	db00      	blt.n	8004eb2 <cdc_setup+0x12>
}
 8004eb0:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <cdc_setup+0x28>)
 8004eb4:	f7ff f808 	bl	8003ec8 <debug_println>
}
 8004eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004ebc:	f7fe bf84 	b.w	8003dc8 <debug_flush>
 8004ec0:	20000958 	.word	0x20000958
 8004ec4:	08004d35 	.word	0x08004d35
 8004ec8:	08005e60 	.word	0x08005e60

08004ecc <pokeSend>:
}

static void pokeSend(
    const uint8_t *dataToSend,
    volatile uint32_t dataToSendLength,
    uint8_t dataToSendFlag) {
 8004ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	9101      	str	r1, [sp, #4]
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	4614      	mov	r4, r2
    //  Send the next packet of the HF2 response to host.
    //  debug_println("pokeSend"); debug_flush(); ////
    bool sendIt = false;
    memset(tx_buf, 0, sizeof(tx_buf));
 8004ed8:	2100      	movs	r1, #0
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	4823      	ldr	r0, [pc, #140]	; (8004f6c <pokeSend+0xa0>)
 8004ede:	f7fe fea0 	bl	8003c22 <memset>
	__asm__ volatile ("CPSID I\n");
 8004ee2:	b672      	cpsid	i

    cm_disable_interrupts();
    int s = sizeof(tx_buf) - 1;  //  63
    if (dataToSendLength) {
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	b91b      	cbnz	r3, 8004ef0 <pokeSend+0x24>
	__asm__ volatile ("CPSIE I\n");
 8004ee8:	b662      	cpsie	i
        }
        // debug_print_unsigned(millis() - rx_time); 
        dump_buffer("hf2pkt >>", tx_buf, s + 1);
        // debug_print("hf2pkt >> "); debug_printhex(s + 1); debug_println(""); ////
    }
}
 8004eea:	b002      	add	sp, #8
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (dataToSendLength < s) {
 8004ef0:	9b01      	ldr	r3, [sp, #4]
        int flag = dataToSendFlag;
 8004ef2:	46a0      	mov	r8, r4
        if (dataToSendLength < s) {
 8004ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef6:	d82a      	bhi.n	8004f4e <pokeSend+0x82>
            s = dataToSendLength;
 8004ef8:	9d01      	ldr	r5, [sp, #4]
 8004efa:	ea44 0305 	orr.w	r3, r4, r5
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f105 0801 	add.w	r8, r5, #1
        tx_buf[0] = flag | s;
 8004f04:	4f19      	ldr	r7, [pc, #100]	; (8004f6c <pokeSend+0xa0>)
        memcpy(tx_buf + 1, dataToSend, s);
 8004f06:	462a      	mov	r2, r5
        tx_buf[0] = flag | s;
 8004f08:	4638      	mov	r0, r7
        memcpy(tx_buf + 1, dataToSend, s);
 8004f0a:	4631      	mov	r1, r6
        tx_buf[0] = flag | s;
 8004f0c:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8004f10:	f7fe fe3e 	bl	8003b90 <memcpy>
        dataToSendLength -= s;
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	1b5b      	subs	r3, r3, r5
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	b662      	cpsie	i
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <pokeSend+0xa4>)
 8004f1e:	463a      	mov	r2, r7
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	2182      	movs	r1, #130	; 0x82
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	f7fb fedf 	bl	8000ce8 <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 8004f2a:	9b01      	ldr	r3, [sp, #4]
 8004f2c:	b1d3      	cbz	r3, 8004f64 <pokeSend+0x98>
            remDataToSend = dataToSend;
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <pokeSend+0xa8>)
        dataToSend += s;
 8004f30:	4435      	add	r5, r6
            remDataToSend = dataToSend;
 8004f32:	601d      	str	r5, [r3, #0]
            remDataToSendLength = dataToSendLength;
 8004f34:	9901      	ldr	r1, [sp, #4]
 8004f36:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <pokeSend+0xac>)
            remDataToSendFlag = dataToSendFlag;
 8004f38:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <pokeSend+0xb0>)
            remDataToSendLength = dataToSendLength;
 8004f3a:	6011      	str	r1, [r2, #0]
            remDataToSendFlag = dataToSendFlag;
 8004f3c:	701c      	strb	r4, [r3, #0]
        dump_buffer("hf2pkt >>", tx_buf, s + 1);
 8004f3e:	4642      	mov	r2, r8
 8004f40:	490a      	ldr	r1, [pc, #40]	; (8004f6c <pokeSend+0xa0>)
 8004f42:	480f      	ldr	r0, [pc, #60]	; (8004f80 <pokeSend+0xb4>)
}
 8004f44:	b002      	add	sp, #8
 8004f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        dump_buffer("hf2pkt >>", tx_buf, s + 1);
 8004f4a:	f7ff bb19 	b.w	8004580 <dump_buffer>
            if (flag == HF2_FLAG_CMDPKT_LAST)
 8004f4e:	2c40      	cmp	r4, #64	; 0x40
 8004f50:	d005      	beq.n	8004f5e <pokeSend+0x92>
 8004f52:	f044 033f 	orr.w	r3, r4, #63	; 0x3f
 8004f56:	f04f 0840 	mov.w	r8, #64	; 0x40
 8004f5a:	253f      	movs	r5, #63	; 0x3f
 8004f5c:	e7d2      	b.n	8004f04 <pokeSend+0x38>
 8004f5e:	253f      	movs	r5, #63	; 0x3f
 8004f60:	462b      	mov	r3, r5
 8004f62:	e7cf      	b.n	8004f04 <pokeSend+0x38>
            remDataToSendLength = 0;  //  No more data to send.
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <pokeSend+0xac>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e7e9      	b.n	8004f3e <pokeSend+0x72>
 8004f6a:	bf00      	nop
 8004f6c:	200009f8 	.word	0x200009f8
 8004f70:	200009a0 	.word	0x200009a0
 8004f74:	200009ac 	.word	0x200009ac
 8004f78:	200009b0 	.word	0x200009b0
 8004f7c:	20000b49 	.word	0x20000b49
 8004f80:	08005fe4 	.word	0x08005fe4

08004f84 <hf2_set_config>:

static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4604      	mov	r4, r0
 8004f88:	b082      	sub	sp, #8
    //  Setup the endpoints to be bulk & register the callbacks.
    LOG("HF2 config");
 8004f8a:	480a      	ldr	r0, [pc, #40]	; (8004fb4 <hf2_set_config+0x30>)
 8004f8c:	f7fe ff9c 	bl	8003ec8 <debug_println>
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <hf2_set_config+0x34>)
 8004f92:	4620      	mov	r0, r4
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	2182      	movs	r1, #130	; 0x82
 8004f9c:	f7fb fe9c 	bl	8000cd8 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <hf2_set_config+0x38>)
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2340      	movs	r3, #64	; 0x40
 8004fac:	f7fb fe94 	bl	8000cd8 <usbd_ep_setup>
}
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	08005fc0 	.word	0x08005fc0
 8004fb8:	08004fc1 	.word	0x08004fc1
 8004fbc:	08005001 	.word	0x08005001

08004fc0 <hf2_data_tx_cb>:
    if (remDataToSendLength == 0) { return; }  //  No remaining data to be sent.
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <hf2_data_tx_cb+0x18>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	b902      	cbnz	r2, 8004fc8 <hf2_data_tx_cb+0x8>
}
 8004fc6:	4770      	bx	lr
    pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <hf2_data_tx_cb+0x1c>)
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <hf2_data_tx_cb+0x20>)
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	f7ff bf7b 	b.w	8004ecc <pokeSend>
 8004fd6:	bf00      	nop
 8004fd8:	200009b0 	.word	0x200009b0
 8004fdc:	20000b49 	.word	0x20000b49
 8004fe0:	200009ac 	.word	0x200009ac

08004fe4 <assert.part.1>:
    }
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
}

static void assert(bool assertion, const char *msg) {
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4604      	mov	r4, r0
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_flush();
 8004fe8:	4804      	ldr	r0, [pc, #16]	; (8004ffc <assert.part.1+0x18>)
 8004fea:	f7fe ff67 	bl	8003ebc <debug_print>
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f7fe ff6a 	bl	8003ec8 <debug_println>
}
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("*** ERROR: "); debug_println(msg); debug_flush();
 8004ff8:	f7fe bee6 	b.w	8003dc8 <debug_flush>
 8004ffc:	08005ed0 	.word	0x08005ed0

08005000 <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 8005004:	4eb7      	ldr	r6, [pc, #732]	; (80052e4 <hf2_data_rx_cb+0x2e4>)
 8005006:	2340      	movs	r3, #64	; 0x40
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 8005008:	b089      	sub	sp, #36	; 0x24
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 800500a:	4632      	mov	r2, r6
 800500c:	f7fb fe74 	bl	8000cf8 <usbd_ep_read_packet>
 8005010:	4604      	mov	r4, r0
    rx_time = millis();
 8005012:	f7ff f8e1 	bl	80041d8 <millis>
 8005016:	4bb4      	ldr	r3, [pc, #720]	; (80052e8 <hf2_data_rx_cb+0x2e8>)
 8005018:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 800501a:	b31c      	cbz	r4, 8005064 <hf2_data_rx_cb+0x64>
    if (!pkt) {
 800501c:	4fb3      	ldr	r7, [pc, #716]	; (80052ec <hf2_data_rx_cb+0x2ec>)
    uint8_t tag = rx_buf[0];
 800501e:	7835      	ldrb	r5, [r6, #0]
    if (!pkt) {
 8005020:	683c      	ldr	r4, [r7, #0]
    uint8_t cmd = rx_buf[1];  //  Only valid if pkt->size = 0 (first packet of message).
 8005022:	7876      	ldrb	r6, [r6, #1]
    if (!pkt) {
 8005024:	2c00      	cmp	r4, #0
 8005026:	d048      	beq.n	80050ba <hf2_data_rx_cb+0xba>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 8005028:	8820      	ldrh	r0, [r4, #0]
 800502a:	f005 093f 	and.w	r9, r5, #63	; 0x3f
 800502e:	b368      	cbz	r0, 800508c <hf2_data_rx_cb+0x8c>
 8005030:	062b      	lsls	r3, r5, #24
 8005032:	d41a      	bmi.n	800506a <hf2_data_rx_cb+0x6a>
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 8005034:	eb00 0309 	add.w	r3, r0, r9
    if (assertion) { return; }
 8005038:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800503c:	dc1f      	bgt.n	800507e <hf2_data_rx_cb+0x7e>
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 800503e:	f104 0802 	add.w	r8, r4, #2
 8005042:	4440      	add	r0, r8
 8005044:	464a      	mov	r2, r9
 8005046:	49aa      	ldr	r1, [pc, #680]	; (80052f0 <hf2_data_rx_cb+0x2f0>)
 8005048:	f7fe fda2 	bl	8003b90 <memcpy>
    pkt->size += size;
 800504c:	8826      	ldrh	r6, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 800504e:	f015 05c0 	ands.w	r5, r5, #192	; 0xc0
    pkt->size += size;
 8005052:	444e      	add	r6, r9
 8005054:	b2b6      	uxth	r6, r6
 8005056:	8026      	strh	r6, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8005058:	d004      	beq.n	8005064 <hf2_data_rx_cb+0x64>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 800505a:	2d40      	cmp	r5, #64	; 0x40
 800505c:	d040      	beq.n	80050e0 <hf2_data_rx_cb+0xe0>
        pkt->size = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	7023      	strb	r3, [r4, #0]
 8005062:	7063      	strb	r3, [r4, #1]
}
 8005064:	b009      	add	sp, #36	; 0x24
 8005066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506a:	48a2      	ldr	r0, [pc, #648]	; (80052f4 <hf2_data_rx_cb+0x2f4>)
 800506c:	f7ff ffba 	bl	8004fe4 <assert.part.1>
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 8005070:	683c      	ldr	r4, [r7, #0]
 8005072:	8820      	ldrh	r0, [r4, #0]
 8005074:	eb00 0309 	add.w	r3, r0, r9
    if (assertion) { return; }
 8005078:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800507c:	dd04      	ble.n	8005088 <hf2_data_rx_cb+0x88>
 800507e:	489d      	ldr	r0, [pc, #628]	; (80052f4 <hf2_data_rx_cb+0x2f4>)
 8005080:	f7ff ffb0 	bl	8004fe4 <assert.part.1>
 8005084:	683c      	ldr	r4, [r7, #0]
 8005086:	8820      	ldrh	r0, [r4, #0]
    if ((pkt->size == 0) && 
 8005088:	2800      	cmp	r0, #0
 800508a:	d1d8      	bne.n	800503e <hf2_data_rx_cb+0x3e>
 800508c:	2d00      	cmp	r5, #0
 800508e:	d0e9      	beq.n	8005064 <hf2_data_rx_cb+0x64>
        (tag && HF2_FLAG_CMDPKT_LAST) && 
 8005090:	1e73      	subs	r3, r6, #1
 8005092:	2b04      	cmp	r3, #4
 8005094:	d80e      	bhi.n	80050b4 <hf2_data_rx_cb+0xb4>
        debug_print("small pkt "); debug_printhex(cmd);
 8005096:	4898      	ldr	r0, [pc, #608]	; (80052f8 <hf2_data_rx_cb+0x2f8>)
 8005098:	f7fe ff10 	bl	8003ebc <debug_print>
 800509c:	4630      	mov	r0, r6
 800509e:	f7fe ff2f 	bl	8003f00 <debug_printhex>
        debug_print(", len "); debug_printhex(size);
 80050a2:	4896      	ldr	r0, [pc, #600]	; (80052fc <hf2_data_rx_cb+0x2fc>)
 80050a4:	f7fe ff0a 	bl	8003ebc <debug_print>
 80050a8:	4648      	mov	r0, r9
 80050aa:	f7fe ff29 	bl	8003f00 <debug_printhex>
        debug_println("");
 80050ae:	4894      	ldr	r0, [pc, #592]	; (8005300 <hf2_data_rx_cb+0x300>)
 80050b0:	f7fe ff0a 	bl	8003ec8 <debug_println>
 80050b4:	683c      	ldr	r4, [r7, #0]
 80050b6:	8820      	ldrh	r0, [r4, #0]
 80050b8:	e7c1      	b.n	800503e <hf2_data_rx_cb+0x3e>
        pkt = (target_get_startup_mode() == BOOTLOADER_MODE) ?
 80050ba:	f7ff fd75 	bl	8004ba8 <target_get_startup_mode>
            &hf2_buffer :
 80050be:	4a91      	ldr	r2, [pc, #580]	; (8005304 <hf2_data_rx_cb+0x304>)
 80050c0:	4b91      	ldr	r3, [pc, #580]	; (8005308 <hf2_data_rx_cb+0x308>)
 80050c2:	2802      	cmp	r0, #2
 80050c4:	bf08      	it	eq
 80050c6:	4613      	moveq	r3, r2
        debug_print("pkt "); debug_printhex_unsigned((size_t) pkt); debug_println("");
 80050c8:	4890      	ldr	r0, [pc, #576]	; (800530c <hf2_data_rx_cb+0x30c>)
        pkt = (target_get_startup_mode() == BOOTLOADER_MODE) ?
 80050ca:	603b      	str	r3, [r7, #0]
        debug_print("pkt "); debug_printhex_unsigned((size_t) pkt); debug_println("");
 80050cc:	f7fe fef6 	bl	8003ebc <debug_print>
 80050d0:	6838      	ldr	r0, [r7, #0]
 80050d2:	f7fe ff39 	bl	8003f48 <debug_printhex_unsigned>
 80050d6:	488a      	ldr	r0, [pc, #552]	; (8005300 <hf2_data_rx_cb+0x300>)
 80050d8:	f7fe fef6 	bl	8003ec8 <debug_println>
 80050dc:	683c      	ldr	r4, [r7, #0]
 80050de:	e7a3      	b.n	8005028 <hf2_data_rx_cb+0x28>
	if (!connected) {
 80050e0:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <hf2_data_rx_cb+0x310>)
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	b932      	cbnz	r2, 80050f4 <hf2_data_rx_cb+0xf4>
		connected = 1;
 80050e6:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 80050e8:	4a8a      	ldr	r2, [pc, #552]	; (8005314 <hf2_data_rx_cb+0x314>)
		connected = 1;
 80050ea:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	b10b      	cbz	r3, 80050f4 <hf2_data_rx_cb+0xf4>
 80050f0:	4798      	blx	r3
 80050f2:	8826      	ldrh	r6, [r4, #0]
    resp->status16 = HF2_STATUS_OK;
 80050f4:	2200      	movs	r2, #0
    uint32_t cmdId = cmd->command_id;
 80050f6:	f8d4 5002 	ldr.w	r5, [r4, #2]
    resp->tag = cmd->tag;
 80050fa:	88e1      	ldrh	r1, [r4, #6]
    switch (cmdId) {
 80050fc:	1e6b      	subs	r3, r5, #1
    resp->status16 = HF2_STATUS_OK;
 80050fe:	7122      	strb	r2, [r4, #4]
 8005100:	7162      	strb	r2, [r4, #5]
    resp->tag = cmd->tag;
 8005102:	8061      	strh	r1, [r4, #2]
    switch (cmdId) {
 8005104:	2b07      	cmp	r3, #7
 8005106:	f200 80cb 	bhi.w	80052a0 <hf2_data_rx_cb+0x2a0>
 800510a:	e8df f003 	tbb	[pc, r3]
 800510e:	7793      	.short	0x7793
 8005110:	1e4a5b69 	.word	0x1e4a5b69
 8005114:	04c9      	.short	0x04c9
            debug_println("hf2 read");
 8005116:	4880      	ldr	r0, [pc, #512]	; (8005318 <hf2_data_rx_cb+0x318>)
 8005118:	f7fe fed6 	bl	8003ec8 <debug_println>
    if (assertion) { return; }
 800511c:	2e10      	cmp	r6, #16
 800511e:	d002      	beq.n	8005126 <hf2_data_rx_cb+0x126>
 8005120:	487e      	ldr	r0, [pc, #504]	; (800531c <hf2_data_rx_cb+0x31c>)
 8005122:	f7ff ff5f 	bl	8004fe4 <assert.part.1>
            int num_words = cmd->read_words.num_words;
 8005126:	f8d4 500e 	ldr.w	r5, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 800512a:	f8d4 100a 	ldr.w	r1, [r4, #10]
 800512e:	00ad      	lsls	r5, r5, #2
 8005130:	462a      	mov	r2, r5
 8005132:	1da0      	adds	r0, r4, #6
    volatile uint32_t dataToSendLength = 4 + size;
 8005134:	3504      	adds	r5, #4
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 8005136:	f7fe fd2b 	bl	8003b90 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 800513a:	9507      	str	r5, [sp, #28]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800513c:	9907      	ldr	r1, [sp, #28]
 800513e:	4640      	mov	r0, r8
 8005140:	2240      	movs	r2, #64	; 0x40
 8005142:	f7ff fec3 	bl	8004ecc <pokeSend>
 8005146:	683c      	ldr	r4, [r7, #0]
 8005148:	e789      	b.n	800505e <hf2_data_rx_cb+0x5e>
            uint32_t target_addr = cmd->write_flash_page.target_addr;
 800514a:	f8d4 500a 	ldr.w	r5, [r4, #10]
            debug_print("hf2 flash "); debug_printhex_unsigned((size_t) target_addr); debug_println("");  ////
 800514e:	4874      	ldr	r0, [pc, #464]	; (8005320 <hf2_data_rx_cb+0x320>)
 8005150:	f7fe feb4 	bl	8003ebc <debug_print>
 8005154:	4628      	mov	r0, r5
 8005156:	f7fe fef7 	bl	8003f48 <debug_printhex_unsigned>
 800515a:	4869      	ldr	r0, [pc, #420]	; (8005300 <hf2_data_rx_cb+0x300>)
 800515c:	f7fe feb4 	bl	8003ec8 <debug_println>
    if (assertion) { return; }
 8005160:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 8005164:	d002      	beq.n	800516c <hf2_data_rx_cb+0x16c>
 8005166:	486d      	ldr	r0, [pc, #436]	; (800531c <hf2_data_rx_cb+0x31c>)
 8005168:	f7ff ff3c 	bl	8004fe4 <assert.part.1>
    volatile uint32_t dataToSendLength = 4 + size;
 800516c:	2304      	movs	r3, #4
 800516e:	9306      	str	r3, [sp, #24]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005170:	9906      	ldr	r1, [sp, #24]
 8005172:	4640      	mov	r0, r8
 8005174:	2240      	movs	r2, #64	; 0x40
 8005176:	f7ff fea9 	bl	8004ecc <pokeSend>
            if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) {
 800517a:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <hf2_data_rx_cb+0x324>)
 800517c:	429d      	cmp	r5, r3
 800517e:	d305      	bcc.n	800518c <hf2_data_rx_cb+0x18c>
 8005180:	4b69      	ldr	r3, [pc, #420]	; (8005328 <hf2_data_rx_cb+0x328>)
 8005182:	f505 7280 	add.w	r2, r5, #256	; 0x100
 8005186:	429a      	cmp	r2, r3
 8005188:	f240 809f 	bls.w	80052ca <hf2_data_rx_cb+0x2ca>
            } else { debug_print("*** invalid flash "); debug_printhex_unsigned((size_t) target_addr); debug_println(""); }
 800518c:	4867      	ldr	r0, [pc, #412]	; (800532c <hf2_data_rx_cb+0x32c>)
 800518e:	f7fe fe95 	bl	8003ebc <debug_print>
 8005192:	4628      	mov	r0, r5
 8005194:	f7fe fed8 	bl	8003f48 <debug_printhex_unsigned>
 8005198:	4859      	ldr	r0, [pc, #356]	; (8005300 <hf2_data_rx_cb+0x300>)
 800519a:	f7fe fe95 	bl	8003ec8 <debug_println>
 800519e:	683c      	ldr	r4, [r7, #0]
 80051a0:	e75d      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_println("hf2 start");
 80051a2:	4863      	ldr	r0, [pc, #396]	; (8005330 <hf2_data_rx_cb+0x330>)
 80051a4:	f7fe fe90 	bl	8003ec8 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 80051a8:	2304      	movs	r3, #4
 80051aa:	9301      	str	r3, [sp, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80051ac:	9901      	ldr	r1, [sp, #4]
 80051ae:	4640      	mov	r0, r8
 80051b0:	2240      	movs	r2, #64	; 0x40
 80051b2:	f7ff fe8b 	bl	8004ecc <pokeSend>
            if (target_get_startup_mode() == APPLICATION_MODE) {
 80051b6:	f7ff fcf7 	bl	8004ba8 <target_get_startup_mode>
 80051ba:	2801      	cmp	r0, #1
 80051bc:	f000 80ca 	beq.w	8005354 <hf2_data_rx_cb+0x354>
 80051c0:	683c      	ldr	r4, [r7, #0]
 80051c2:	e74c      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_println("hf2 rst boot");
 80051c4:	485b      	ldr	r0, [pc, #364]	; (8005334 <hf2_data_rx_cb+0x334>)
 80051c6:	f7fe fe7f 	bl	8003ec8 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 80051ca:	2304      	movs	r3, #4
 80051cc:	9302      	str	r3, [sp, #8]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80051ce:	9902      	ldr	r1, [sp, #8]
 80051d0:	4640      	mov	r0, r8
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	f7ff fe7a 	bl	8004ecc <pokeSend>
            target_manifest_bootloader();  //  Never returns.
 80051d8:	f7ff fcbe 	bl	8004b58 <target_manifest_bootloader>
 80051dc:	683c      	ldr	r4, [r7, #0]
 80051de:	e73e      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_println("hf2 rst app");
 80051e0:	4855      	ldr	r0, [pc, #340]	; (8005338 <hf2_data_rx_cb+0x338>)
 80051e2:	f7fe fe71 	bl	8003ec8 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 80051e6:	2304      	movs	r3, #4
 80051e8:	9303      	str	r3, [sp, #12]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80051ea:	9903      	ldr	r1, [sp, #12]
 80051ec:	4640      	mov	r0, r8
 80051ee:	2240      	movs	r2, #64	; 0x40
 80051f0:	f7ff fe6c 	bl	8004ecc <pokeSend>
            target_manifest_app();  //  Never returns.
 80051f4:	f7ff fca4 	bl	8004b40 <target_manifest_app>
 80051f8:	683c      	ldr	r4, [r7, #0]
 80051fa:	e730      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_println("hf2 info");
 80051fc:	484f      	ldr	r0, [pc, #316]	; (800533c <hf2_data_rx_cb+0x33c>)
 80051fe:	f7fe fe63 	bl	8003ec8 <debug_println>
            int info_size = strlen(infoUf2File);
 8005202:	484f      	ldr	r0, [pc, #316]	; (8005340 <hf2_data_rx_cb+0x340>)
 8005204:	f7fe fcdc 	bl	8003bc0 <strlen>
 8005208:	4605      	mov	r5, r0
 800520a:	1d06      	adds	r6, r0, #4
    if (assertion) { return; }
 800520c:	2800      	cmp	r0, #0
 800520e:	d065      	beq.n	80052dc <hf2_data_rx_cb+0x2dc>
 8005210:	2e58      	cmp	r6, #88	; 0x58
 8005212:	dd02      	ble.n	800521a <hf2_data_rx_cb+0x21a>
 8005214:	484b      	ldr	r0, [pc, #300]	; (8005344 <hf2_data_rx_cb+0x344>)
 8005216:	f7ff fee5 	bl	8004fe4 <assert.part.1>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 800521a:	462a      	mov	r2, r5
 800521c:	1da0      	adds	r0, r4, #6
 800521e:	4948      	ldr	r1, [pc, #288]	; (8005340 <hf2_data_rx_cb+0x340>)
 8005220:	f7fe fcb6 	bl	8003b90 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 8005224:	9605      	str	r6, [sp, #20]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005226:	9905      	ldr	r1, [sp, #20]
 8005228:	4640      	mov	r0, r8
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	f7ff fe4e 	bl	8004ecc <pokeSend>
 8005230:	683c      	ldr	r4, [r7, #0]
 8005232:	e714      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_println("hf2 bininfo");
 8005234:	4844      	ldr	r0, [pc, #272]	; (8005348 <hf2_data_rx_cb+0x348>)
 8005236:	f7fe fe47 	bl	8003ec8 <debug_println>
            resp->bininfo.mode = (target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 800523a:	f7ff fcb5 	bl	8004ba8 <target_get_startup_mode>
    volatile uint32_t dataToSendLength = 4 + size;
 800523e:	2118      	movs	r1, #24
                HF2_MODE_BOOTLOADER :
 8005240:	2802      	cmp	r0, #2
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005242:	f04f 0300 	mov.w	r3, #0
                HF2_MODE_BOOTLOADER :
 8005246:	bf18      	it	ne
 8005248:	2502      	movne	r5, #2
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 800524a:	f04f 0b01 	mov.w	fp, #1
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800524e:	2240      	movs	r2, #64	; 0x40
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005250:	f04f 0e10 	mov.w	lr, #16
 8005254:	f06f 0c1d 	mvn.w	ip, #29
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8005258:	f04f 0a04 	mov.w	sl, #4
            resp->bininfo.uf2_family = UF2_FAMILY;
 800525c:	f04f 0972 	mov.w	r9, #114	; 0x72
 8005260:	265e      	movs	r6, #94	; 0x5e
    volatile uint32_t dataToSendLength = 4 + size;
 8005262:	9104      	str	r1, [sp, #16]
            resp->bininfo.mode = (target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8005264:	f8c4 5006 	str.w	r5, [r4, #6]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005268:	72a3      	strb	r3, [r4, #10]
 800526a:	7323      	strb	r3, [r4, #12]
 800526c:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 800526e:	73a3      	strb	r3, [r4, #14]
 8005270:	7423      	strb	r3, [r4, #16]
 8005272:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8005274:	7523      	strb	r3, [r4, #20]
 8005276:	7563      	strb	r3, [r4, #21]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005278:	f884 b00b 	strb.w	fp, [r4, #11]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 800527c:	f884 b00f 	strb.w	fp, [r4, #15]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8005280:	74a2      	strb	r2, [r4, #18]
 8005282:	f884 a013 	strb.w	sl, [r4, #19]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005286:	f884 9016 	strb.w	r9, [r4, #22]
 800528a:	f884 e017 	strb.w	lr, [r4, #23]
 800528e:	f884 c018 	strb.w	ip, [r4, #24]
 8005292:	7666      	strb	r6, [r4, #25]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005294:	9904      	ldr	r1, [sp, #16]
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff fe18 	bl	8004ecc <pokeSend>
 800529c:	683c      	ldr	r4, [r7, #0]
 800529e:	e6de      	b.n	800505e <hf2_data_rx_cb+0x5e>
            debug_print("hf2 unknown cmd "); debug_print_unsigned(cmdId); debug_println("");
 80052a0:	482a      	ldr	r0, [pc, #168]	; (800534c <hf2_data_rx_cb+0x34c>)
 80052a2:	f7fe fe0b 	bl	8003ebc <debug_print>
 80052a6:	4628      	mov	r0, r5
 80052a8:	f7fe fe28 	bl	8003efc <debug_print_unsigned>
 80052ac:	4814      	ldr	r0, [pc, #80]	; (8005300 <hf2_data_rx_cb+0x300>)
 80052ae:	f7fe fe0b 	bl	8003ec8 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 80052b2:	2104      	movs	r1, #4
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80052b4:	2200      	movs	r2, #0
 80052b6:	2301      	movs	r3, #1
    volatile uint32_t dataToSendLength = 4 + size;
 80052b8:	9100      	str	r1, [sp, #0]
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80052ba:	7162      	strb	r2, [r4, #5]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80052bc:	9900      	ldr	r1, [sp, #0]
 80052be:	4640      	mov	r0, r8
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80052c0:	7123      	strb	r3, [r4, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	f7ff fe02 	bl	8004ecc <pokeSend>
 80052c8:	e77a      	b.n	80051c0 <hf2_data_rx_cb+0x1c0>
                flash_write(target_addr, data, HF2_PAGE_SIZE);
 80052ca:	f104 010e 	add.w	r1, r4, #14
 80052ce:	4628      	mov	r0, r5
 80052d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d4:	f000 f972 	bl	80055bc <flash_write>
 80052d8:	683c      	ldr	r4, [r7, #0]
 80052da:	e6c0      	b.n	800505e <hf2_data_rx_cb+0x5e>
 80052dc:	481c      	ldr	r0, [pc, #112]	; (8005350 <hf2_data_rx_cb+0x350>)
 80052de:	f7ff fe81 	bl	8004fe4 <assert.part.1>
 80052e2:	e79a      	b.n	800521a <hf2_data_rx_cb+0x21a>
 80052e4:	200009b4 	.word	0x200009b4
 80052e8:	200009f4 	.word	0x200009f4
 80052ec:	200009a8 	.word	0x200009a8
 80052f0:	200009b5 	.word	0x200009b5
 80052f4:	08005edc 	.word	0x08005edc
 80052f8:	08005ef0 	.word	0x08005ef0
 80052fc:	08005a44 	.word	0x08005a44
 8005300:	080056cc 	.word	0x080056cc
 8005304:	200047bc 	.word	0x200047bc
 8005308:	20000c58 	.word	0x20000c58
 800530c:	08005ee8 	.word	0x08005ee8
 8005310:	20000b48 	.word	0x20000b48
 8005314:	200009a4 	.word	0x200009a4
 8005318:	08005fa0 	.word	0x08005fa0
 800531c:	08005f6c 	.word	0x08005f6c
 8005320:	08005f60 	.word	0x08005f60
 8005324:	08006800 	.word	0x08006800
 8005328:	08010000 	.word	0x08010000
 800532c:	08005f8c 	.word	0x08005f8c
 8005330:	08005f54 	.word	0x08005f54
 8005334:	08005f44 	.word	0x08005f44
 8005338:	08005f38 	.word	0x08005f38
 800533c:	08005efc 	.word	0x08005efc
 8005340:	08006048 	.word	0x08006048
 8005344:	08005f18 	.word	0x08005f18
 8005348:	08005f2c 	.word	0x08005f2c
 800534c:	08005fac 	.word	0x08005fac
 8005350:	08005f08 	.word	0x08005f08
                target_manifest_bootloader();  //  Never returns.
 8005354:	f7ff fc00 	bl	8004b58 <target_manifest_bootloader>
 8005358:	683c      	ldr	r4, [r7, #0]
 800535a:	e680      	b.n	800505e <hf2_data_rx_cb+0x5e>

0800535c <hf2_setup>:
    _usbd_dev = usbd_dev;
 800535c:	4a0f      	ldr	r2, [pc, #60]	; (800539c <hf2_setup+0x40>)
    connected_func = connected_func0;
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <hf2_setup+0x44>)
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
    _usbd_dev = usbd_dev;
 8005364:	6010      	str	r0, [r2, #0]
    connected_func = connected_func0;
 8005366:	6019      	str	r1, [r3, #0]
    if (target_get_startup_mode() == BOOTLOADER_MODE) {
 8005368:	f7ff fc1e 	bl	8004ba8 <target_get_startup_mode>
 800536c:	2802      	cmp	r0, #2
 800536e:	d00d      	beq.n	800538c <hf2_setup+0x30>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 8005370:	4620      	mov	r0, r4
 8005372:	490c      	ldr	r1, [pc, #48]	; (80053a4 <hf2_setup+0x48>)
 8005374:	f7ff f8b0 	bl	80044d8 <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 8005378:	2800      	cmp	r0, #0
 800537a:	db00      	blt.n	800537e <hf2_setup+0x22>
}
 800537c:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 800537e:	480a      	ldr	r0, [pc, #40]	; (80053a8 <hf2_setup+0x4c>)
 8005380:	f7fe fda2 	bl	8003ec8 <debug_println>
}
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 8005388:	f7fe bd1e 	b.w	8003dc8 <debug_flush>
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 800538c:	f240 4242 	movw	r2, #1090	; 0x442
 8005390:	2100      	movs	r1, #0
 8005392:	4806      	ldr	r0, [pc, #24]	; (80053ac <hf2_setup+0x50>)
 8005394:	f7fe fc45 	bl	8003c22 <memset>
 8005398:	e7ea      	b.n	8005370 <hf2_setup+0x14>
 800539a:	bf00      	nop
 800539c:	200009a0 	.word	0x200009a0
 80053a0:	200009a4 	.word	0x200009a4
 80053a4:	08004f85 	.word	0x08004f85
 80053a8:	08005fcc 	.word	0x08005fcc
 80053ac:	200047bc 	.word	0x200047bc

080053b0 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 80053b0:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <usb21_set_config+0x20>)
 80053b6:	2180      	movs	r1, #128	; 0x80
 80053b8:	f7ff f8ac 	bl	8004514 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80053bc:	2800      	cmp	r0, #0
 80053be:	db00      	blt.n	80053c2 <usb21_set_config+0x12>
}
 80053c0:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80053c2:	4804      	ldr	r0, [pc, #16]	; (80053d4 <usb21_set_config+0x24>)
 80053c4:	f7fe fd80 	bl	8003ec8 <debug_println>
}
 80053c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80053cc:	f7fe bcfc 	b.w	8003dc8 <debug_flush>
 80053d0:	080053d9 	.word	0x080053d9
 80053d4:	08005ff0 	.word	0x08005ff0

080053d8 <usb21_standard_get_descriptor>:
	int descr_type = req->wValue >> 8;
 80053d8:	8848      	ldrh	r0, [r1, #2]
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80053da:	0a00      	lsrs	r0, r0, #8
 80053dc:	280f      	cmp	r0, #15
 80053de:	d10e      	bne.n	80053fe <usb21_standard_get_descriptor+0x26>
											usbd_control_complete_callback* complete) {
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb21_bos) {
 80053e4:	4f31      	ldr	r7, [pc, #196]	; (80054ac <usb21_standard_get_descriptor+0xd4>)
											usbd_control_complete_callback* complete) {
 80053e6:	b085      	sub	sp, #20
	if (!usb21_bos) {
 80053e8:	683d      	ldr	r5, [r7, #0]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	4616      	mov	r6, r2
 80053ee:	b145      	cbz	r5, 8005402 <usb21_standard_get_descriptor+0x2a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 80053f0:	784b      	ldrb	r3, [r1, #1]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d00c      	beq.n	8005410 <usb21_standard_get_descriptor+0x38>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80053f6:	2002      	movs	r0, #2
}
 80053f8:	b005      	add	sp, #20
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80053fe:	2002      	movs	r0, #2
}
 8005400:	4770      	bx	lr
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 8005402:	482b      	ldr	r0, [pc, #172]	; (80054b0 <usb21_standard_get_descriptor+0xd8>)
 8005404:	f7fe fd60 	bl	8003ec8 <debug_println>
 8005408:	f7fe fcde 	bl	8003dc8 <debug_flush>
 800540c:	4628      	mov	r0, r5
 800540e:	e7f3      	b.n	80053f8 <usb21_standard_get_descriptor+0x20>
		dump_usb_request("bos", req); // debug_flush(); ////
 8005410:	4828      	ldr	r0, [pc, #160]	; (80054b4 <usb21_standard_get_descriptor+0xdc>)
 8005412:	f7ff f8dd 	bl	80045d0 <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005416:	f8d7 b000 	ldr.w	fp, [r7]
 800541a:	9b01      	ldr	r3, [sp, #4]
	bytes_to_copy = MIN(len, bos->bLength);
 800541c:	f89b 8000 	ldrb.w	r8, [fp]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005420:	881c      	ldrh	r4, [r3, #0]
 8005422:	6830      	ldr	r0, [r6, #0]
	bytes_to_copy = MIN(len, bos->bLength);
 8005424:	45a0      	cmp	r8, r4
 8005426:	bf28      	it	cs
 8005428:	46a0      	movcs	r8, r4
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800542a:	4605      	mov	r5, r0
	memcpy(buf, bos, bytes_to_copy);
 800542c:	4642      	mov	r2, r8
 800542e:	4659      	mov	r1, fp
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005430:	9403      	str	r4, [sp, #12]
 8005432:	9002      	str	r0, [sp, #8]
	memcpy(buf, bos, bytes_to_copy);
 8005434:	f7fe fbac 	bl	8003b90 <memcpy>
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005438:	f89b 2004 	ldrb.w	r2, [fp, #4]
	len -= bytes_to_copy;
 800543c:	eba4 0708 	sub.w	r7, r4, r8
	buf += bytes_to_copy;
 8005440:	eb05 0a08 	add.w	sl, r5, r8
	len -= bytes_to_copy;
 8005444:	b2bf      	uxth	r7, r7
	totallen += bos->bLength;
 8005446:	f89b 5000 	ldrb.w	r5, [fp]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800544a:	b302      	cbz	r2, 800548e <usb21_standard_get_descriptor+0xb6>
 800544c:	2600      	movs	r6, #0
 800544e:	46a9      	mov	r9, r5
			bos->capabilities[i];
 8005450:	f8db 3005 	ldr.w	r3, [fp, #5]
		memcpy(buf, cap, bytes_to_copy);
 8005454:	4650      	mov	r0, sl
		const struct usb_device_capability_descriptor *cap =
 8005456:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800545a:	3601      	adds	r6, #1
		bytes_to_copy = MIN(len, cap->bLength);
 800545c:	782c      	ldrb	r4, [r5, #0]
		memcpy(buf, cap, bytes_to_copy);
 800545e:	4629      	mov	r1, r5
		bytes_to_copy = MIN(len, cap->bLength);
 8005460:	42bc      	cmp	r4, r7
 8005462:	bf28      	it	cs
 8005464:	463c      	movcs	r4, r7
		memcpy(buf, cap, bytes_to_copy);
 8005466:	4622      	mov	r2, r4
 8005468:	f7fe fb92 	bl	8003b90 <memcpy>
		totallen += cap->bLength;
 800546c:	782b      	ldrb	r3, [r5, #0]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800546e:	f89b 2004 	ldrb.w	r2, [fp, #4]
		totallen += cap->bLength;
 8005472:	eb09 0503 	add.w	r5, r9, r3
 8005476:	b2b3      	uxth	r3, r6
		len -= bytes_to_copy;
 8005478:	1b3f      	subs	r7, r7, r4
		total += bytes_to_copy;
 800547a:	44a0      	add	r8, r4
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800547c:	429a      	cmp	r2, r3
		len -= bytes_to_copy;
 800547e:	b2bf      	uxth	r7, r7
		total += bytes_to_copy;
 8005480:	fa1f f888 	uxth.w	r8, r8
		buf += bytes_to_copy;
 8005484:	44a2      	add	sl, r4
		totallen += cap->bLength;
 8005486:	fa1f f985 	uxth.w	r9, r5
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800548a:	d8e1      	bhi.n	8005450 <usb21_standard_get_descriptor+0x78>
 800548c:	464d      	mov	r5, r9
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800548e:	9b03      	ldr	r3, [sp, #12]
		return USBD_REQ_HANDLED;
 8005490:	2001      	movs	r0, #1
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005492:	4543      	cmp	r3, r8
 8005494:	bf28      	it	cs
 8005496:	4643      	movcs	r3, r8
 8005498:	4698      	mov	r8, r3
	*(uint16_t *)(tmpbuf + 2) = totallen;
 800549a:	9b02      	ldr	r3, [sp, #8]
 800549c:	805d      	strh	r5, [r3, #2]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	f8a3 8000 	strh.w	r8, [r3]
}
 80054a4:	b005      	add	sp, #20
 80054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	20000a38 	.word	0x20000a38
 80054b0:	08006024 	.word	0x08006024
 80054b4:	08006044 	.word	0x08006044

080054b8 <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <usb21_setup+0x2c>)
 80054be:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 80054c0:	2100      	movs	r1, #0
 80054c2:	f7ff ff75 	bl	80053b0 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 80054c6:	4620      	mov	r0, r4
 80054c8:	4907      	ldr	r1, [pc, #28]	; (80054e8 <usb21_setup+0x30>)
 80054ca:	f7ff f805 	bl	80044d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 80054ce:	2800      	cmp	r0, #0
 80054d0:	db00      	blt.n	80054d4 <usb21_setup+0x1c>
}
 80054d2:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 80054d4:	4805      	ldr	r0, [pc, #20]	; (80054ec <usb21_setup+0x34>)
 80054d6:	f7fe fcf7 	bl	8003ec8 <debug_println>
}
 80054da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 80054de:	f7fe bc73 	b.w	8003dc8 <debug_flush>
 80054e2:	bf00      	nop
 80054e4:	20000a38 	.word	0x20000a38
 80054e8:	080053b1 	.word	0x080053b1
 80054ec:	0800600c 	.word	0x0800600c

080054f0 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4605      	mov	r5, r0
 80054f4:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 80054f6:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80054fa:	f7fb f93f 	bl	800077c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 80054fe:	f240 309b 	movw	r0, #923	; 0x39b
 8005502:	f7fb f93b 	bl	800077c <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 8005506:	f7fb f929 	bl	800075c <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 800550a:	4a06      	ldr	r2, [pc, #24]	; (8005524 <backup_write+0x34>)
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 800550c:	006b      	lsls	r3, r5, #1
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 800550e:	b2a1      	uxth	r1, r4
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8005510:	3301      	adds	r3, #1
 8005512:	0c24      	lsrs	r4, r4, #16
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8005514:	f822 1035 	strh.w	r1, [r2, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8005518:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    pwr_enable_backup_domain_write_protect();
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 800551c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pwr_enable_backup_domain_write_protect();
 8005520:	f7fb b924 	b.w	800076c <pwr_enable_backup_domain_write_protect>
 8005524:	40006c04 	.word	0x40006c04

08005528 <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <backup_read+0x14>)
 800552a:	0043      	lsls	r3, r0, #1
 800552c:	3301      	adds	r3, #1
 800552e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 8005532:	f832 0030 	ldrh.w	r0, [r2, r0, lsl #3]
    return value;
}
 8005536:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800553a:	4770      	bx	lr
 800553c:	40006c04 	.word	0x40006c04

08005540 <flushFlash>:
static bool hadWrite = false;
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

static void flushFlash(void) {
 8005540:	b510      	push	{r4, lr}
    //  TODO: Don't overwrite the bootloader.
    lastFlush = ms;
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <flushFlash+0x60>)
    if (flashAddr == NO_CACHE)
 8005544:	4c17      	ldr	r4, [pc, #92]	; (80055a4 <flushFlash+0x64>)
    lastFlush = ms;
 8005546:	681a      	ldr	r2, [r3, #0]
    if (flashAddr == NO_CACHE)
 8005548:	6821      	ldr	r1, [r4, #0]
    lastFlush = ms;
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <flushFlash+0x68>)
 800554c:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE)
 800554e:	1c4b      	adds	r3, r1, #1
 8005550:	d00d      	beq.n	800556e <flushFlash+0x2e>
        return;
    if (firstFlush) {
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <flushFlash+0x6c>)
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	b10a      	cbz	r2, 800555c <flushFlash+0x1c>
        firstFlush = false;
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
        // disable bootloader or something
    }
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 800555c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005560:	4813      	ldr	r0, [pc, #76]	; (80055b0 <flushFlash+0x70>)
 8005562:	f7fe fb35 	bl	8003bd0 <memcmp>
 8005566:	b918      	cbnz	r0, 8005570 <flushFlash+0x30>
        target_flash_unlock();
        bool ok = target_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        target_flash_lock();
        (void)ok;
    }
    flashAddr = NO_CACHE;
 8005568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556c:	6023      	str	r3, [r4, #0]
}
 800556e:	bd10      	pop	{r4, pc}
        debug_print("flash "); debug_printhex_unsigned((size_t) flashAddr); debug_println(""); ////
 8005570:	4810      	ldr	r0, [pc, #64]	; (80055b4 <flushFlash+0x74>)
 8005572:	f7fe fca3 	bl	8003ebc <debug_print>
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	f7fe fce6 	bl	8003f48 <debug_printhex_unsigned>
 800557c:	480e      	ldr	r0, [pc, #56]	; (80055b8 <flushFlash+0x78>)
 800557e:	f7fe fca3 	bl	8003ec8 <debug_println>
        target_flash_unlock();
 8005582:	f7ff fb53 	bl	8004c2c <target_flash_unlock>
        bool ok = target_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 8005586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558a:	4909      	ldr	r1, [pc, #36]	; (80055b0 <flushFlash+0x70>)
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	f7ff fb51 	bl	8004c34 <target_flash_program_array>
        target_flash_lock();
 8005592:	f7ff fb4d 	bl	8004c30 <target_flash_lock>
    flashAddr = NO_CACHE;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	e7e7      	b.n	800556e <flushFlash+0x2e>
 800559e:	bf00      	nop
 80055a0:	20000a40 	.word	0x20000a40
 80055a4:	20000538 	.word	0x20000538
 80055a8:	20000a3c 	.word	0x20000a3c
 80055ac:	2000053c 	.word	0x2000053c
 80055b0:	20004c00 	.word	0x20004c00
 80055b4:	08005f64 	.word	0x08005f64
 80055b8:	080056cc 	.word	0x080056cc

080055bc <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int len) {
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
    // debug_print("flash "); debug_printhex_unsigned(dst); debug_println("");
    hadWrite = true;
    if (newAddr != flashAddr) {
 80055c0:	4e0e      	ldr	r6, [pc, #56]	; (80055fc <flash_write+0x40>)
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80055c2:	f420 747f 	bic.w	r4, r0, #1020	; 0x3fc
    if (newAddr != flashAddr) {
 80055c6:	6833      	ldr	r3, [r6, #0]
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80055c8:	f024 0403 	bic.w	r4, r4, #3
    if (newAddr != flashAddr) {
 80055cc:	42a3      	cmp	r3, r4
void flash_write(uint32_t dst, const uint8_t *src, int len) {
 80055ce:	4605      	mov	r5, r0
 80055d0:	460f      	mov	r7, r1
 80055d2:	4690      	mov	r8, r2
    if (newAddr != flashAddr) {
 80055d4:	d008      	beq.n	80055e8 <flash_write+0x2c>
        flushFlash();
 80055d6:	f7ff ffb3 	bl	8005540 <flushFlash>
        flashAddr = newAddr;
        memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);
 80055da:	4621      	mov	r1, r4
 80055dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055e0:	4807      	ldr	r0, [pc, #28]	; (8005600 <flash_write+0x44>)
        flashAddr = newAddr;
 80055e2:	6034      	str	r4, [r6, #0]
        memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);
 80055e4:	f7fe fad4 	bl	8003b90 <memcpy>
    }
    memcpy(flashBuf + (dst & (FLASH_PAGE_SIZE - 1)), src, len);
 80055e8:	4805      	ldr	r0, [pc, #20]	; (8005600 <flash_write+0x44>)
 80055ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80055ee:	4642      	mov	r2, r8
 80055f0:	4639      	mov	r1, r7
 80055f2:	4428      	add	r0, r5
}
 80055f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memcpy(flashBuf + (dst & (FLASH_PAGE_SIZE - 1)), src, len);
 80055f8:	f7fe baca 	b.w	8003b90 <memcpy>
 80055fc:	20000538 	.word	0x20000538
 8005600:	20004c00 	.word	0x20004c00
 8005604:	202a2a2a 	.word	0x202a2a2a
 8005608:	206c6168 	.word	0x206c6168
 800560c:	2f737362 	.word	0x2f737362
 8005610:	61746164 	.word	0x61746164
 8005614:	69616620 	.word	0x69616620
 8005618:	2c64656c 	.word	0x2c64656c
 800561c:	73736220 	.word	0x73736220
 8005620:	7365745f 	.word	0x7365745f
 8005624:	203d2074 	.word	0x203d2074
 8005628:	00000000 	.word	0x00000000
 800562c:	6164202c 	.word	0x6164202c
 8005630:	745f6174 	.word	0x745f6174
 8005634:	20747365 	.word	0x20747365
 8005638:	0000203d 	.word	0x0000203d
 800563c:	00207b75 	.word	0x00207b75
 8005640:	0000207d 	.word	0x0000207d
 8005644:	00203f61 	.word	0x00203f61
 8005648:	2d2d2d2d 	.word	0x2d2d2d2d
 800564c:	67726174 	.word	0x67726174
 8005650:	675f7465 	.word	0x675f7465
 8005654:	735f7465 	.word	0x735f7465
 8005658:	61697265 	.word	0x61697265
 800565c:	0000006c 	.word	0x0000006c
 8005660:	2a2a2a2a 	.word	0x2a2a2a2a
 8005664:	7261742a 	.word	0x7261742a
 8005668:	5f746567 	.word	0x5f746567
 800566c:	696e6170 	.word	0x696e6170
 8005670:	00002063 	.word	0x00002063
 8005674:	2d2d2d2d 	.word	0x2d2d2d2d
 8005678:	67726174 	.word	0x67726174
 800567c:	725f7465 	.word	0x725f7465
 8005680:	74657365 	.word	0x74657365
 8005684:	00000000 	.word	0x00000000
 8005688:	2d2d2d2d 	.word	0x2d2d2d2d
 800568c:	67726174 	.word	0x67726174
 8005690:	735f7465 	.word	0x735f7465
 8005694:	5f646565 	.word	0x5f646565
 8005698:	646e6172 	.word	0x646e6172
 800569c:	00006d6f 	.word	0x00006d6f
 80056a0:	3c207477 	.word	0x3c207477
 80056a4:	00000000 	.word	0x00000000
 80056a8:	0000203e 	.word	0x0000203e
 80056ac:	70616568 	.word	0x70616568
 80056b0:	61747320 	.word	0x61747320
 80056b4:	203a7472 	.word	0x203a7472
 80056b8:	00000000 	.word	0x00000000
 80056bc:	6e65202c 	.word	0x6e65202c
 80056c0:	00203a64 	.word	0x00203a64
 80056c4:	6973202c 	.word	0x6973202c
 80056c8:	203a657a 	.word	0x203a657a
 80056cc:	00000000 	.word	0x00000000
 80056d0:	2c424b20 	.word	0x2c424b20
 80056d4:	61747320 	.word	0x61747320
 80056d8:	75206b63 	.word	0x75206b63
 80056dc:	3a646573 	.word	0x3a646573
 80056e0:	00000020 	.word	0x00000020
 80056e4:	00424b20 	.word	0x00424b20
 80056e8:	33323130 	.word	0x33323130
 80056ec:	37363534 	.word	0x37363534
 80056f0:	42413938 	.word	0x42413938
 80056f4:	46454443 	.word	0x46454443
 80056f8:	00000000 	.word	0x00000000

080056fc <st_usbfs_v1_usb_driver>:
 80056fc:	08000bb9 0800162d 08001681 08001799     ....-...........
 800570c:	080017e1 080018e1 080018a1 08001925     ............%...
 800571c:	080019ad 08001a61 00000000 00000000     ....a...........
 800572c:	00000000 202a2a2a 6f636f63 6120736f     ....*** cocoos a
 800573c:	72657373 61662074 64656c69               ssert failed .

0800574a <_ctype_>:
 800574a:	20202000 20202020 28282020 20282828     .         ((((( 
 800575a:	20202020 20202020 20202020 20202020                     
 800576a:	10108820 10101010 10101010 10101010      ...............
 800577a:	04040410 04040404 10040404 10101010     ................
 800578a:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800579a:	01010101 01010101 01010101 10101010     ................
 80057aa:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80057ba:	02020202 02020202 02020202 10101010     ................
 80057ca:	00000020 00000000 00000000 00000000      ...............
	...
 800584a:	00300000 002d0000 4f280000 66726576     ..0...-...(Overf
 800585a:	29776f6c 0a0d0000 2d2d0000 6c702d2d     low)......----pl
 800586a:	6f667461 735f6d72 70757465 6c610000     atform_setup..al
 800587a:	00203f6d 6c700000 6f667461 735f6d72     m? ...platform_s
 800588a:	74726174 6d69745f 00007265 74720000     tart_timer....rt
 800589a:	77612063 2e656b61 00002e2e 74720000     c awake.......rt
 80058aa:	77612063 20656b61 00006b6f 2d2d0000     c awake ok....--
 80058ba:	6f622d2d 6f6c746f 72656461 61740000     --bootloader..ta
 80058ca:	74656772 7465675f 7265735f 5f6c6169     rget_get_serial_
 80058da:	626d756e 00007265 73750000 65735f62     number....usb_se
 80058ea:	65735f74 6c616972 6d756e5f 00726562     t_serial_number.
 80058fa:	73750000 65735f62 00707574 73750000     ..usb_setup...us
 800590a:	70206462 696c6c6f 2e2e676e 4553002e     bd polling....SE
 800591a:	44415f54 3e3e0052 2a2a0020 5245202a     T_ADR.>> .*** ER
 800592a:	3a524f52 6f6f5420 6e616d20 6f632079     ROR: Too many co
 800593a:	6f72746e 6163206c 61626c6c 00736b63     ntrol callbacks.
 800594a:	2a2a0000 5245202a 3a524f52 6f6f5420     ..*** ERROR: Too
 800595a:	6e616d20 6f632079 6769666e 6c616320      many config cal
 800596a:	6361626c 0000736b                        lbacks....

08005974 <bos_descriptor>:
 8005974:	00000f05 00043002 00000020              .....0.. ...

08005980 <cdc_iface_assoc>:
 8005980:	02010b08 06010202                       ........

08005988 <cdcacm_functional_descriptors>:
 8005988:	10002405 01240501 24040200 24050002     .$....$....$...$
 8005998:	00020106                                ....

0800599c <comm_endp>:
 800599c:	03840507 00ff0010 00000000 00000000     ................

080059ac <comm_iface>:
 80059ac:	00010409 01020201 00599c07 00598808     ..........Y...Y.
 80059bc:	00001308 00000000                       ........

080059c4 <config>:
 80059c4:	00000209 80000103 005aecfa 00000008     ..........Z.....

080059d4 <data_endp>:
 80059d4:	02030507 00010040 00000000 07000000     ....@...........
 80059e4:	40028305 00000100 00000000 00000000     ...@............

080059f4 <data_iface>:
 80059f4:	00020409 00000a02 0059d408 00000008     ..........Y.....
	...

08005a0c <dev>:
 8005a0c:	02100112 400102ef db421209 02010221     .......@..B.!...
 8005a1c:	00000103 00202f20 70797420 00000020     .... / . typ ...
 8005a2c:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 8005a3c:	6469202c 00002078 656c202c 0000206e     , idx .., len ..
 8005a4c:	4547202c 45445f54 00000053 5645445f     , GET_DES..._DEV
 8005a5c:	00000000 4746435f 00000000 5254535f     ...._CFG...._STR
 8005a6c:	00000000 464e495f 00000000 504e455f     ...._INF...._ENP
 8005a7c:	00000000 534f425f 00000000 4553202c     ...._BOS...., SE
 8005a8c:	44415f54 20202052 00000020 4553202c     T_ADR    ..., SE
 8005a9c:	46435f54 20202047 00000020 0000002c     T_CFG    ...,...
 8005aac:	00207420 00206920                        t . i .

08005ab4 <hf2_endp>:
 8005ab4:	02020507 00000040 00000000 07000000     ....@...........
 8005ac4:	40028205 00000000 00000000 00000000     ...@............

08005ad4 <hf2_iface>:
 8005ad4:	00000409 012aff02 005ab409 00000008     ......*...Z.....
	...

08005aec <interfaces>:
 8005aec:	00000000 00000001 00000000 08005ad4     .............Z..
 8005afc:	00000000 00000001 08005980 080059ac     .........Y...Y..
 8005b0c:	00000000 00000001 00000000 080059f4     .............Y..
 8005b1c:	202a2a2a 4f525245 73203a52 615f7465     *** ERROR: set_a
 8005b2c:	65726767 65746167 6c61635f 6361626c     ggregate_callbac
 8005b3c:	6166206b 64656c69 00000000 0000002e     k failed........
 8005b4c:	61766544 6372616e 00007968 42504144     Devanarchy..DAPB
 8005b5c:	20746f6f 20554644 746f6f42 64616f6c     oot DFU Bootload
 8005b6c:	00007265 42504144 20746f6f 00554644     er..DAPBoot DFU.
 8005b7c:	65756c42 6c695020 534d206c 00000043     Blue Pill MSC...
 8005b8c:	65756c42 6c695020 6553206c 6c616972     Blue Pill Serial
 8005b9c:	726f5020 00000074 65756c42 6c695020      Port...Blue Pil
 8005bac:	4f43206c 00004d4d 65756c42 6c695020     l COMM..Blue Pil
 8005bbc:	4144206c 00004154 65756c42 6c695020     l DATA..Blue Pil
 8005bcc:	4648206c 00000032 75736976 6c626c61     l HF2...visualbl
 8005bdc:	69706575 672e6c6c 75687469 6f692e62     uepill.github.io
 8005bec:	00000000 202a2a2a 5f627375 75746573     ....*** usb_setu
 8005bfc:	61662070 64656c69 00000000 202a2a2a     p failed....*** 
 8005c0c:	75626577 6e206273 7573746f 69207070     webusb notsupp i
 8005c1c:	7865646e 00000020 75626577 00006c72     ndex ...weburl..
 8005c2c:	202a2a2a 75626577 6e206273 7573746f     *** webusb notsu
 8005c3c:	77207070 65646e49 00002078              pp wIndex ..

08005c48 <webusb_platform_capability_descriptor>:
 8005c48:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 8005c58:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8005c68:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 8005c78:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8005c88:	735f6273 70757465 69616620 0064656c     sb_setup failed.

08005c98 <guid>:
 8005c98:	00000092 00050100 00880001 00070000     ................
 8005ca8:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 8005cb8:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 8005cc8:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8005cd8:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8005ce8:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8005cf8:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 8005d08:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 8005d18:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 8005d28:	00000000                                ....

08005d2c <microsoft_platform_capability_descriptor>:
 8005d2c:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8005d3c:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8005d4c:	00007365 696e6977 00000064 706e6977     es..winid...winp
 8005d5c:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8005d6c:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 8005d7c:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 8005d8c:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 8005d9c:	0064656c                                led.

08005da0 <winusb_string_descriptor>:
 8005da0:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 8005db0:	00000021 67726174 665f7465 6873616c     !...target_flash
 8005dc0:	6f72705f 6d617267 7272615f 64207961     _program_array d
 8005dd0:	20747365 00000000 6164202c 00206174     est ...., data .
 8005de0:	6168202c 775f666c 5f64726f 6e756f63     , half_word_coun
 8005df0:	00002074 6c66202c 5f687361 20646e65     t .., flash_end 
 8005e00:	00000000 74736564 203d3e20 73616c66     ....dest >= flas
 8005e10:	6e655f68 00000064 7365642a 3d212074     h_end...*dest !=
 8005e20:	61642a20 00006174 20707061 73697865      *data..app exis
 8005e30:	00007374 20707061 7373696d 20676e69     ts..app missing 
 8005e40:	00000000 746f6f62 64616f6c 6d207265     ....bootloader m
 8005e50:	0065646f 20707061 65646f6d 00000000     ode.app mode....
 8005e60:	202a2a2a 5f636463 75746573 61662070     *** cdc_setup fa
 8005e70:	64656c69 00000000 6d6d6f63 00000000     iled....comm....
 8005e80:	202a2a2a 61636463 635f6d63 72746e6f     *** cdcacm_contr
 8005e90:	6e206c6f 7573746f 6c207070 5f656e69     ol notsupp line_
 8005ea0:	69646f63 0020676e 202a2a2a 61636463     coding .*** cdca
 8005eb0:	735f6d63 635f7465 69666e6f 61662067     cm_set_config fa
 8005ec0:	64656c69 00000000                       iled....

08005ec8 <line_coding>:
 8005ec8:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 8005ed8:	00203a52                                R: .

08005edc <bad_packet_message>:
 8005edc:	20646162 6b636170 00007465 20746b70     bad packet..pkt 
 8005eec:	00000000 6c616d73 6b70206c 00002074     ....small pkt ..
 8005efc:	20326668 6f666e69 00000000 74706d65     hf2 info....empt
 8005f0c:	66682079 6e692032 00006f66 20326668     y hf2 info..hf2 
 8005f1c:	20667562 206f6f74 6c616d73 0000006c     buf too small...
 8005f2c:	20326668 696e6962 006f666e 20326668     hf2 bininfo.hf2 
 8005f3c:	20747372 00707061 20326668 20747372     rst app.hf2 rst 
 8005f4c:	746f6f62 00000000 20326668 72617473     boot....hf2 star
 8005f5c:	00000074 20326668 73616c66 00002068     t...hf2 flash ..
 8005f6c:	202a2a2a 4f525245 63203a52 6b636568     *** ERROR: check
 8005f7c:	61746144 657a6953 69616620 0064656c     DataSize failed.
 8005f8c:	202a2a2a 61766e69 2064696c 73616c66     *** invalid flas
 8005f9c:	00002068 20326668 64616572 00000000     h ..hf2 read....
 8005fac:	20326668 6e6b6e75 206e776f 20646d63     hf2 unknown cmd 
 8005fbc:	00000000 20324648 666e6f63 00006769     ....HF2 config..
 8005fcc:	202a2a2a 5f326668 75746573 61662070     *** hf2_setup fa
 8005fdc:	64656c69 00000000 70326668 3e20746b     iled....hf2pkt >
 8005fec:	0000003e 202a2a2a 32627375 65735f31     >...*** usb21_se
 8005ffc:	6f635f74 6769666e 69616620 0064656c     t_config failed.
 800600c:	202a2a2a 32627375 65735f31 20707574     *** usb21_setup 
 800601c:	6c696166 00006465 202a2a2a 32627375     failed..*** usb2
 800602c:	65645f31 69726373 726f7470 206f6e20     1_descriptor no 
 800603c:	20736f62 00000000 00736f62              bos ....bos.

08006048 <infoUf2File>:
 8006048:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 8006058:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 8006068:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 8006078:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 8006088:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 8006098:	0a0d3076 00000000                       v0......

Disassembly of section .text:

08006800 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8006800:	b538      	push	{r3, r4, r5, lr}
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
	while (dest < &_edata) {
 8006802:	4a36      	ldr	r2, [pc, #216]	; (80068dc <application_start+0xdc>)
 8006804:	4c36      	ldr	r4, [pc, #216]	; (80068e0 <application_start+0xe0>)
 8006806:	42a2      	cmp	r2, r4
 8006808:	d20f      	bcs.n	800682a <application_start+0x2a>
 800680a:	43d3      	mvns	r3, r2
	volatile uint32_t *dest = &_data;
 800680c:	4615      	mov	r5, r2
 800680e:	4423      	add	r3, r4
 8006810:	4934      	ldr	r1, [pc, #208]	; (80068e4 <application_start+0xe4>)
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	3304      	adds	r3, #4
	volatile uint32_t *src = &_data_loadaddr;
 8006818:	4608      	mov	r0, r1
 800681a:	4419      	add	r1, r3
		*dest = *src;
 800681c:	f850 4b04 	ldr.w	r4, [r0], #4
	while (dest < &_edata) {
 8006820:	4288      	cmp	r0, r1
		*dest = *src;
 8006822:	f845 4b04 	str.w	r4, [r5], #4
	while (dest < &_edata) {
 8006826:	d1f9      	bne.n	800681c <application_start+0x1c>
 8006828:	441a      	add	r2, r3
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 800682a:	4b2f      	ldr	r3, [pc, #188]	; (80068e8 <application_start+0xe8>)
 800682c:	429a      	cmp	r2, r3
 800682e:	d20d      	bcs.n	800684c <application_start+0x4c>
 8006830:	3303      	adds	r3, #3
 8006832:	1d11      	adds	r1, r2, #4
 8006834:	1a5b      	subs	r3, r3, r1
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	3304      	adds	r3, #4
 800683c:	2000      	movs	r0, #0
 800683e:	4413      	add	r3, r2
 8006840:	e000      	b.n	8006844 <application_start+0x44>
 8006842:	3104      	adds	r1, #4
 8006844:	4299      	cmp	r1, r3
 8006846:	6010      	str	r0, [r2, #0]
 8006848:	460a      	mov	r2, r1
 800684a:	d1fa      	bne.n	8006842 <application_start+0x42>
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 800684c:	4d27      	ldr	r5, [pc, #156]	; (80068ec <application_start+0xec>)
 800684e:	4c28      	ldr	r4, [pc, #160]	; (80068f0 <application_start+0xf0>)
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b91b      	cbnz	r3, 800685c <application_start+0x5c>
 8006854:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <application_start+0xf4>)
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d00c      	beq.n	8006876 <application_start+0x76>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 800685c:	4826      	ldr	r0, [pc, #152]	; (80068f8 <application_start+0xf8>)
 800685e:	f7fd fb2d 	bl	8003ebc <debug_print>
 8006862:	6828      	ldr	r0, [r5, #0]
 8006864:	f7fd fb70 	bl	8003f48 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8006868:	4824      	ldr	r0, [pc, #144]	; (80068fc <application_start+0xfc>)
 800686a:	f7fd fb27 	bl	8003ebc <debug_print>
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	f7fd fb6a 	bl	8003f48 <debug_printhex_unsigned>
 8006874:	e7fe      	b.n	8006874 <application_start+0x74>

	//  Call any init functions here.
	pre_main();
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006876:	4c22      	ldr	r4, [pc, #136]	; (8006900 <application_start+0x100>)
 8006878:	4922      	ldr	r1, [pc, #136]	; (8006904 <application_start+0x104>)
 800687a:	428c      	cmp	r4, r1
 800687c:	d20b      	bcs.n	8006896 <application_start+0x96>
 800687e:	43e3      	mvns	r3, r4
 8006880:	440b      	add	r3, r1
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	3304      	adds	r3, #4
 8006888:	4625      	mov	r5, r4
 800688a:	441c      	add	r4, r3
		(*fp)();
 800688c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006890:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006892:	42a5      	cmp	r5, r4
 8006894:	d1fa      	bne.n	800688c <application_start+0x8c>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006896:	4c1c      	ldr	r4, [pc, #112]	; (8006908 <application_start+0x108>)
 8006898:	491c      	ldr	r1, [pc, #112]	; (800690c <application_start+0x10c>)
 800689a:	428c      	cmp	r4, r1
 800689c:	d20b      	bcs.n	80068b6 <application_start+0xb6>
 800689e:	43e3      	mvns	r3, r4
 80068a0:	440b      	add	r3, r1
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	3304      	adds	r3, #4
 80068a8:	4625      	mov	r5, r4
 80068aa:	441c      	add	r4, r3
		(*fp)();
 80068ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b0:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80068b2:	42a5      	cmp	r5, r4
 80068b4:	d1fa      	bne.n	80068ac <application_start+0xac>
	}

	//  Call the application's entry point.
	main();
 80068b6:	f000 f82f 	bl	8006918 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80068ba:	4c15      	ldr	r4, [pc, #84]	; (8006910 <application_start+0x110>)
 80068bc:	4915      	ldr	r1, [pc, #84]	; (8006914 <application_start+0x114>)
 80068be:	428c      	cmp	r4, r1
 80068c0:	d20b      	bcs.n	80068da <application_start+0xda>
 80068c2:	43e3      	mvns	r3, r4
 80068c4:	440b      	add	r3, r1
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	3304      	adds	r3, #4
 80068cc:	4625      	mov	r5, r4
 80068ce:	441c      	add	r4, r3
		(*fp)();
 80068d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d4:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80068d6:	42ac      	cmp	r4, r5
 80068d8:	d1fa      	bne.n	80068d0 <application_start+0xd0>
	}
}
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20001000 	.word	0x20001000
 80068e0:	2000100c 	.word	0x2000100c
 80068e4:	0800cc60 	.word	0x0800cc60
 80068e8:	20001668 	.word	0x20001668
 80068ec:	2000165c 	.word	0x2000165c
 80068f0:	20001004 	.word	0x20001004
 80068f4:	12345678 	.word	0x12345678
 80068f8:	0800ca7c 	.word	0x0800ca7c
 80068fc:	0800caa4 	.word	0x0800caa4
 8006900:	0800cc58 	.word	0x0800cc58
 8006904:	0800cc58 	.word	0x0800cc58
 8006908:	0800cc58 	.word	0x0800cc58
 800690c:	0800cc60 	.word	0x0800cc60
 8006910:	0800cc60 	.word	0x0800cc60
 8006914:	0800cc60 	.word	0x0800cc60

08006918 <main>:

#include "pxt.h"
#ifdef PXT_MAIN
PXT_MAIN
 8006918:	b508      	push	{r3, lr}
 800691a:	f002 fd9f 	bl	800945c <_ZN3pxt5startEv>
 800691e:	2000      	movs	r0, #0
 8006920:	bd08      	pop	{r3, pc}
 8006922:	bf00      	nop
 8006924:	0000      	movs	r0, r0
	...

08006928 <_ZN6numops5mycvtEdPc>:
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (d < 0) {
 800692c:	2300      	movs	r3, #0
void mycvt(NUMBER d, char *buf) {
 800692e:	b083      	sub	sp, #12
 8006930:	4616      	mov	r6, r2
    if (d < 0) {
 8006932:	2200      	movs	r2, #0
void mycvt(NUMBER d, char *buf) {
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
    if (d < 0) {
 8006938:	f7fc fae2 	bl	8002f00 <__wrap___aeabi_dcmplt>
 800693c:	b120      	cbz	r0, 8006948 <_ZN6numops5mycvtEdPc+0x20>
        *buf++ = '-';
 800693e:	232d      	movs	r3, #45	; 0x2d
        d = -d;
 8006940:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        *buf++ = '-';
 8006944:	7033      	strb	r3, [r6, #0]
 8006946:	3601      	adds	r6, #1
    }

    if (!d) {
 8006948:	4628      	mov	r0, r5
 800694a:	4621      	mov	r1, r4
 800694c:	2200      	movs	r2, #0
 800694e:	2300      	movs	r3, #0
 8006950:	f7fc fabc 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 8006954:	b130      	cbz	r0, 8006964 <_ZN6numops5mycvtEdPc+0x3c>
        *buf++ = '0';
 8006956:	2230      	movs	r2, #48	; 0x30
        *buf++ = 0;
 8006958:	2300      	movs	r3, #0
        *buf++ = '0';
 800695a:	7032      	strb	r2, [r6, #0]
        *buf++ = 0;
 800695c:	7073      	strb	r3, [r6, #1]
        *buf++ = 'e';
        itoa(e, buf);
    } else {
        *buf = 0;
    }
}
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pw = (int)log10(d);
 8006964:	4628      	mov	r0, r5
 8006966:	4621      	mov	r1, r4
 8006968:	f7fc fbb8 	bl	80030dc <log10>
 800696c:	f7fc fb46 	bl	8002ffc <__wrap___aeabi_d2iz>
    if (0.000001 <= d && d < 1e21) {
 8006970:	a345      	add	r3, pc, #276	; (adr r3, 8006a88 <_ZN6numops5mycvtEdPc+0x160>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
    int pw = (int)log10(d);
 8006976:	4607      	mov	r7, r0
 8006978:	9001      	str	r0, [sp, #4]
    if (0.000001 <= d && d < 1e21) {
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f7fc faf1 	bl	8002f64 <__wrap___aeabi_dcmpge>
 8006982:	2800      	cmp	r0, #0
 8006984:	d157      	bne.n	8006a36 <_ZN6numops5mycvtEdPc+0x10e>
        d /= p10(pw);
 8006986:	9a01      	ldr	r2, [sp, #4]
 8006988:	2000      	movs	r0, #0
 800698a:	4943      	ldr	r1, [pc, #268]	; (8006a98 <_ZN6numops5mycvtEdPc+0x170>)
 800698c:	f7fb ff3a 	bl	8002804 <__powidf2>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4628      	mov	r0, r5
 8006996:	4621      	mov	r1, r4
 8006998:	f7fc fa38 	bl	8002e0c <__wrap___aeabi_ddiv>
    int beforeDot = 1;
 800699c:	2701      	movs	r7, #1
        d /= p10(pw);
 800699e:	4605      	mov	r5, r0
 80069a0:	460c      	mov	r4, r1
    int sig = 0;
 80069a2:	f04f 0a00 	mov.w	sl, #0
        d = (d - c) * 10;
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8006a98 <_ZN6numops5mycvtEdPc+0x170>
        int c = (int)d;
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7fc fb23 	bl	8002ffc <__wrap___aeabi_d2iz>
        *buf++ = '0' + c;
 80069b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80069ba:	7033      	strb	r3, [r6, #0]
        int c = (int)d;
 80069bc:	4683      	mov	fp, r0
        d = (d - c) * 10;
 80069be:	f7fb fe67 	bl	8002690 <__aeabi_i2d>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4628      	mov	r0, r5
 80069c8:	4621      	mov	r1, r4
 80069ca:	f7fc fa67 	bl	8002e9c <__wrap___aeabi_dsub>
 80069ce:	464b      	mov	r3, r9
 80069d0:	4642      	mov	r2, r8
 80069d2:	f7fc fa33 	bl	8002e3c <__wrap___aeabi_dmul>
        if (--beforeDot == 0)
 80069d6:	3f01      	subs	r7, #1
            *buf++ = '.';
 80069d8:	bf08      	it	eq
 80069da:	232e      	moveq	r3, #46	; 0x2e
        d = (d - c) * 10;
 80069dc:	4605      	mov	r5, r0
            *buf++ = '.';
 80069de:	bf08      	it	eq
 80069e0:	7073      	strbeq	r3, [r6, #1]
        d = (d - c) * 10;
 80069e2:	460c      	mov	r4, r1
        *buf++ = '0' + c;
 80069e4:	bf14      	ite	ne
 80069e6:	3601      	addne	r6, #1
            *buf++ = '.';
 80069e8:	3602      	addeq	r6, #2
        if (sig || c)
 80069ea:	f1ba 0f00 	cmp.w	sl, #0
 80069ee:	d106      	bne.n	80069fe <_ZN6numops5mycvtEdPc+0xd6>
 80069f0:	f1bb 0f00 	cmp.w	fp, #0
 80069f4:	bf0c      	ite	eq
 80069f6:	46da      	moveq	sl, fp
 80069f8:	f04f 0a01 	movne.w	sl, #1
 80069fc:	e7d7      	b.n	80069ae <_ZN6numops5mycvtEdPc+0x86>
 80069fe:	f10a 0a01 	add.w	sl, sl, #1
    while (sig < 17 || beforeDot > 0) {
 8006a02:	f1ba 0f10 	cmp.w	sl, #16
 8006a06:	ddd2      	ble.n	80069ae <_ZN6numops5mycvtEdPc+0x86>
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	dcd0      	bgt.n	80069ae <_ZN6numops5mycvtEdPc+0x86>
    while (*buf == '0')
 8006a0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    buf--;
 8006a10:	3e01      	subs	r6, #1
    while (*buf == '0')
 8006a12:	2b30      	cmp	r3, #48	; 0x30
 8006a14:	d103      	bne.n	8006a1e <_ZN6numops5mycvtEdPc+0xf6>
 8006a16:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 8006a1a:	2b30      	cmp	r3, #48	; 0x30
 8006a1c:	d0fb      	beq.n	8006a16 <_ZN6numops5mycvtEdPc+0xee>
    if (e != 1) {
 8006a1e:	9801      	ldr	r0, [sp, #4]
    if (*buf == '.')
 8006a20:	2b2e      	cmp	r3, #46	; 0x2e
        buf--;
 8006a22:	bf08      	it	eq
 8006a24:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    if (e != 1) {
 8006a28:	2801      	cmp	r0, #1
 8006a2a:	d120      	bne.n	8006a6e <_ZN6numops5mycvtEdPc+0x146>
        *buf = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	7073      	strb	r3, [r6, #1]
}
 8006a30:	b003      	add	sp, #12
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (0.000001 <= d && d < 1e21) {
 8006a36:	a316      	add	r3, pc, #88	; (adr r3, 8006a90 <_ZN6numops5mycvtEdPc+0x168>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	4621      	mov	r1, r4
 8006a40:	f7fc fa5e 	bl	8002f00 <__wrap___aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d09e      	beq.n	8006986 <_ZN6numops5mycvtEdPc+0x5e>
        if (pw > 0) {
 8006a48:	2f00      	cmp	r7, #0
 8006a4a:	dd18      	ble.n	8006a7e <_ZN6numops5mycvtEdPc+0x156>
            d /= p10(pw);
 8006a4c:	463a      	mov	r2, r7
 8006a4e:	2000      	movs	r0, #0
 8006a50:	4911      	ldr	r1, [pc, #68]	; (8006a98 <_ZN6numops5mycvtEdPc+0x170>)
 8006a52:	f7fb fed7 	bl	8002804 <__powidf2>
 8006a56:	460b      	mov	r3, r1
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f7fc f9d5 	bl	8002e0c <__wrap___aeabi_ddiv>
    int e = 1;
 8006a62:	2301      	movs	r3, #1
            beforeDot = 1 + pw;
 8006a64:	3701      	adds	r7, #1
            d /= p10(pw);
 8006a66:	4605      	mov	r5, r0
 8006a68:	460c      	mov	r4, r1
    int e = 1;
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	e799      	b.n	80069a2 <_ZN6numops5mycvtEdPc+0x7a>
        *buf++ = 'e';
 8006a6e:	2365      	movs	r3, #101	; 0x65
        itoa(e, buf);
 8006a70:	1cb1      	adds	r1, r6, #2
        *buf++ = 'e';
 8006a72:	7073      	strb	r3, [r6, #1]
}
 8006a74:	b003      	add	sp, #12
 8006a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        itoa(e, buf);
 8006a7a:	f003 b9e5 	b.w	8009e48 <_ZN5codal4itoaEiPc>
    int beforeDot = 1;
 8006a7e:	2701      	movs	r7, #1
    int e = 1;
 8006a80:	9701      	str	r7, [sp, #4]
 8006a82:	e78e      	b.n	80069a2 <_ZN6numops5mycvtEdPc+0x7a>
 8006a84:	f3af 8000 	nop.w
 8006a88:	a0b5ed8d 	.word	0xa0b5ed8d
 8006a8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006a90:	d6e2ef50 	.word	0xd6e2ef50
 8006a94:	444b1ae4 	.word	0x444b1ae4
 8006a98:	40240000 	.word	0x40240000
 8006a9c:	00000000 	.word	0x00000000

08006aa0 <_ZN5Math_12randomDoubleEv>:
//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
 8006aa0:	b570      	push	{r4, r5, r6, lr}
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa6:	f000 fb9d 	bl	80071e4 <_ZN3pxt9getRandomEj>
 8006aaa:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 8006aac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006ab0:	f000 fb98 	bl	80071e4 <_ZN3pxt9getRandomEj>
 8006ab4:	4606      	mov	r6, r0
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7fb fdda 	bl	8002670 <__aeabi_ui2d>
 8006abc:	2200      	movs	r2, #0
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <_ZN5Math_12randomDoubleEv+0x50>)
 8006ac0:	f7fc f9bc 	bl	8002e3c <__wrap___aeabi_dmul>
 8006ac4:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 8006ac6:	4630      	mov	r0, r6
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006ac8:	460d      	mov	r5, r1
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 8006aca:	f7fb fdd1 	bl	8002670 <__aeabi_ui2d>
 8006ace:	a306      	add	r3, pc, #24	; (adr r3, 8006ae8 <_ZN5Math_12randomDoubleEv+0x48>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7fc f99a 	bl	8002e0c <__wrap___aeabi_ddiv>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7fc f9c4 	bl	8002e6c <__wrap___aeabi_dadd>
}
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}
 8006ae6:	bf00      	nop
 8006ae8:	dfe00000 	.word	0xdfe00000
 8006aec:	436fffff 	.word	0x436fffff
 8006af0:	3df00000 	.word	0x3df00000

08006af4 <_ZN5Math_4log2EPN3pxt12TValueStructE>:
#define SINGLE(op) return fromDouble(::op(toDouble(x)));

namespace Math_ {

//
TNumber log2(TNumber x){SINGLE(log2)}
 8006af4:	b508      	push	{r3, lr}
 8006af6:	f000 ff39 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006afa:	f7fc fadb 	bl	80030b4 <log2>
 8006afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b02:	f000 bd01 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b06:	bf00      	nop

08006b08 <_ZN5Math_3expEPN3pxt12TValueStructE>:
//
TNumber exp(TNumber x){SINGLE(exp)}
 8006b08:	b508      	push	{r3, lr}
 8006b0a:	f000 ff2f 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b0e:	f7fc fac3 	bl	8003098 <exp>
 8006b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b16:	f000 bcf7 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b1a:	bf00      	nop

08006b1c <_ZN5Math_4tanhEPN3pxt12TValueStructE>:
//
TNumber tanh(TNumber x){SINGLE(tanh)}
 8006b1c:	b508      	push	{r3, lr}
 8006b1e:	f000 ff25 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b22:	f7fc fcdd 	bl	80034e0 <tanh>
 8006b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b2a:	f000 bced 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b2e:	bf00      	nop

08006b30 <_ZN5Math_4sinhEPN3pxt12TValueStructE>:
//
TNumber sinh(TNumber x){SINGLE(sinh)}
 8006b30:	b508      	push	{r3, lr}
 8006b32:	f000 ff1b 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b36:	f7fc fc2d 	bl	8003394 <sinh>
 8006b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b3e:	f000 bce3 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b42:	bf00      	nop

08006b44 <_ZN5Math_4coshEPN3pxt12TValueStructE>:
//
TNumber cosh(TNumber x){SINGLE(cosh)}
 8006b44:	b508      	push	{r3, lr}
 8006b46:	f000 ff11 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b4a:	f7fc fc77 	bl	800343c <cosh>
 8006b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b52:	f000 bcd9 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b56:	bf00      	nop

08006b58 <_ZN5Math_5atanhEPN3pxt12TValueStructE>:
//
TNumber atanh(TNumber x){SINGLE(atanh)}
 8006b58:	b508      	push	{r3, lr}
 8006b5a:	f000 ff07 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b5e:	f7fc fdc3 	bl	80036e8 <atanh>
 8006b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b66:	f000 bccf 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b6a:	bf00      	nop

08006b6c <_ZN5Math_5asinhEPN3pxt12TValueStructE>:
//
TNumber asinh(TNumber x){SINGLE(asinh)}
 8006b6c:	b508      	push	{r3, lr}
 8006b6e:	f000 fefd 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b72:	f7fc fd11 	bl	8003598 <asinh>
 8006b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b7a:	f000 bcc5 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b7e:	bf00      	nop

08006b80 <_ZN5Math_5acoshEPN3pxt12TValueStructE>:
//
TNumber acosh(TNumber x){SINGLE(acosh)}
 8006b80:	b508      	push	{r3, lr}
 8006b82:	f000 fef3 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006b86:	f7fc fd59 	bl	800363c <acosh>
 8006b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b8e:	f000 bcbb 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8006b92:	bf00      	nop

08006b94 <_ZN3pxtL9readBytesEPhS0_ibi>:
    }

    return 0;
}

static int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	9e04      	ldr	r6, [sp, #16]
 8006b98:	460c      	mov	r4, r1
    if (szLeft < length) {
 8006b9a:	4296      	cmp	r6, r2
 8006b9c:	db24      	blt.n	8006be8 <_ZN3pxtL9readBytesEPhS0_ibi+0x54>
 8006b9e:	4615      	mov	r5, r2
        memset(dst, 0, length);
        return -1;
    }

    if (swapBytes) {
 8006ba0:	b96b      	cbnz	r3, 8006bbe <_ZN3pxtL9readBytesEPhS0_ibi+0x2a>
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
 8006ba2:	2a04      	cmp	r2, #4
 8006ba4:	d019      	beq.n	8006bda <_ZN3pxtL9readBytesEPhS0_ibi+0x46>
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)src & 1) == 0)
 8006ba6:	2a02      	cmp	r2, #2
 8006ba8:	d102      	bne.n	8006bb0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
 8006baa:	f010 0301 	ands.w	r3, r0, #1
 8006bae:	d010      	beq.n	8006bd2 <_ZN3pxtL9readBytesEPhS0_ibi+0x3e>
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f7fc ffeb 	bl	8003b90 <memcpy>
 8006bba:	2000      	movs	r0, #0
    }

    return 0;
}
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t *p = src + length;
 8006bbe:	4410      	add	r0, r2
 8006bc0:	440d      	add	r5, r1
            dst[i] = *--p;
 8006bc2:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 8006bc6:	f801 3b01 	strb.w	r3, [r1], #1
        for (int i = 0; i < length; ++i)
 8006bca:	428d      	cmp	r5, r1
 8006bcc:	d1f9      	bne.n	8006bc2 <_ZN3pxtL9readBytesEPhS0_ibi+0x2e>
    return 0;
 8006bce:	2000      	movs	r0, #0
}
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
            *(uint16_t *)dst = *(uint16_t *)src;
 8006bd2:	8802      	ldrh	r2, [r0, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	800a      	strh	r2, [r1, #0]
}
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
        if (length == 4 && ((uint32_t)src & 3) == 0)
 8006bda:	f010 0303 	ands.w	r3, r0, #3
 8006bde:	d1e7      	bne.n	8006bb0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
            *(uint32_t *)dst = *(uint32_t *)src;
 8006be0:	6802      	ldr	r2, [r0, #0]
    return 0;
 8006be2:	4618      	mov	r0, r3
            *(uint32_t *)dst = *(uint32_t *)src;
 8006be4:	600a      	str	r2, [r1, #0]
}
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
        memset(dst, 0, length);
 8006be8:	4608      	mov	r0, r1
 8006bea:	2100      	movs	r1, #0
 8006bec:	f7fd f819 	bl	8003c22 <memset>
        return -1;
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	bf00      	nop

08006bf8 <_ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE>:
}
 8006bf8:	3008      	adds	r0, #8
 8006bfa:	4770      	bx	lr

08006bfc <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi>:
    if (buf && 0 <= off && off < buf->length)
 8006bfc:	b140      	cbz	r0, 8006c10 <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x14>
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	db05      	blt.n	8006c0e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
 8006c02:	6843      	ldr	r3, [r0, #4]
 8006c04:	428b      	cmp	r3, r1
 8006c06:	dd02      	ble.n	8006c0e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
        return buf->data[off];
 8006c08:	4408      	add	r0, r1
 8006c0a:	7a00      	ldrb	r0, [r0, #8]
 8006c0c:	4770      	bx	lr
    return 0;
 8006c0e:	2000      	movs	r0, #0
}
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop

08006c14 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii>:
    if (buf && 0 <= off && off < buf->length)
 8006c14:	b130      	cbz	r0, 8006c24 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 8006c16:	2900      	cmp	r1, #0
 8006c18:	db04      	blt.n	8006c24 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 8006c1a:	6843      	ldr	r3, [r0, #4]
 8006c1c:	428b      	cmp	r3, r1
        buf->data[off] = v;
 8006c1e:	bfc4      	itt	gt
 8006c20:	1840      	addgt	r0, r0, r1
 8006c22:	7202      	strbgt	r2, [r0, #8]
}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>:
int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db20      	blt.n	8006c70 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	db1e      	blt.n	8006c70 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 8006c32:	6846      	ldr	r6, [r0, #4]
 8006c34:	428e      	cmp	r6, r1
 8006c36:	db1b      	blt.n	8006c70 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    length = min(src->length - srcOffset, buf->length - dstOffset);
 8006c38:	6854      	ldr	r4, [r2, #4]
 8006c3a:	1a76      	subs	r6, r6, r1
 8006c3c:	1ae5      	subs	r5, r4, r3
 8006c3e:	42b5      	cmp	r5, r6
 8006c40:	bfa8      	it	ge
 8006c42:	4635      	movge	r5, r6
    if (length < 0)
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	db13      	blt.n	8006c70 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    if (buf == src) {
 8006c48:	4282      	cmp	r2, r0
 8006c4a:	f102 0708 	add.w	r7, r2, #8
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f100 0608 	add.w	r6, r0, #8
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8006c54:	462a      	mov	r2, r5
    if (buf == src) {
 8006c56:	d005      	beq.n	8006c64 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x3c>
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
 8006c58:	18f9      	adds	r1, r7, r3
 8006c5a:	1930      	adds	r0, r6, r4
 8006c5c:	f7fc ff98 	bl	8003b90 <memcpy>
    return 0;
 8006c60:	2000      	movs	r0, #0
}
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8006c64:	18f1      	adds	r1, r6, r3
 8006c66:	1938      	adds	r0, r7, r4
 8006c68:	f7fc ffc1 	bl	8003bee <memmove>
    return 0;
 8006c6c:	2000      	movs	r0, #0
}
 8006c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c76:	bf00      	nop

08006c78 <_ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE>:
}
 8006c78:	6840      	ldr	r0, [r0, #4]
 8006c7a:	4770      	bx	lr

08006c7c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>:
void fill(Buffer buf, int value, int offset = 0, int length = -1) {
 8006c7c:	b410      	push	{r4}
    if (offset < 0 || offset > buf->length)
 8006c7e:	1e14      	subs	r4, r2, #0
 8006c80:	db0f      	blt.n	8006ca2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8006c82:	6842      	ldr	r2, [r0, #4]
 8006c84:	42a2      	cmp	r2, r4
 8006c86:	db0c      	blt.n	8006ca2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8006c88:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8006c8c:	bf28      	it	cs
 8006c8e:	4613      	movcs	r3, r2
    length = min(length, buf->length - offset);
 8006c90:	1b12      	subs	r2, r2, r4
    memset(buf->data + offset, value, length);
 8006c92:	3008      	adds	r0, #8
 8006c94:	429a      	cmp	r2, r3
 8006c96:	4420      	add	r0, r4
 8006c98:	bfa8      	it	ge
 8006c9a:	461a      	movge	r2, r3
}
 8006c9c:	bc10      	pop	{r4}
    memset(buf->data + offset, value, length);
 8006c9e:	f7fc bfc0 	b.w	8003c22 <memset>
}
 8006ca2:	bc10      	pop	{r4}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop

08006ca8 <_ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii>:
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
 8006ca8:	b410      	push	{r4}
    offset = min((int)buf->length, offset);
 8006caa:	6843      	ldr	r3, [r0, #4]
    return mkBuffer(buf->data + offset, length);
 8006cac:	3008      	adds	r0, #8
 8006cae:	428b      	cmp	r3, r1
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	bfa8      	it	ge
 8006cb4:	460c      	movge	r4, r1
        length = buf->length;
 8006cb6:	ea32 0122 	bics.w	r1, r2, r2, asr #32
 8006cba:	bf28      	it	cs
 8006cbc:	4619      	movcs	r1, r3
    length = min(length, buf->length - offset);
 8006cbe:	1b1b      	subs	r3, r3, r4
    return mkBuffer(buf->data + offset, length);
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	4420      	add	r0, r4
 8006cc4:	bfa8      	it	ge
 8006cc6:	4619      	movge	r1, r3
}
 8006cc8:	bc10      	pop	{r4}
    return mkBuffer(buf->data + offset, length);
 8006cca:	f000 ba69 	b.w	80071a0 <_ZN3pxt8mkBufferEPKhi>
 8006cce:	bf00      	nop

08006cd0 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii>:
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 8006cd0:	b570      	push	{r4, r5, r6, lr}
    if (length < 0)
 8006cd2:	2b00      	cmp	r3, #0
        length = buf->length - start;
 8006cd4:	bfb8      	it	lt
 8006cd6:	6843      	ldrlt	r3, [r0, #4]
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 8006cd8:	460e      	mov	r6, r1
        length = buf->length - start;
 8006cda:	bfb8      	it	lt
 8006cdc:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	db20      	blt.n	8006d24 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 8006ce2:	6844      	ldr	r4, [r0, #4]
 8006ce4:	1899      	adds	r1, r3, r2
 8006ce6:	42a1      	cmp	r1, r4
 8006ce8:	dc1c      	bgt.n	8006d24 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 8006cea:	4291      	cmp	r1, r2
 8006cec:	db1a      	blt.n	8006d24 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 8006cee:	b1cb      	cbz	r3, 8006d24 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
        offset == 0 || offset == INT_MIN)
 8006cf0:	f036 4100 	bics.w	r1, r6, #2147483648	; 0x80000000
 8006cf4:	d016      	beq.n	8006d24 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
    if (offset <= -length || offset >= length) {
 8006cf6:	4259      	negs	r1, r3
 8006cf8:	42b1      	cmp	r1, r6
 8006cfa:	da14      	bge.n	8006d26 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
 8006cfc:	42b3      	cmp	r3, r6
 8006cfe:	dd12      	ble.n	8006d26 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
    uint8_t *data = buf->data + start;
 8006d00:	3008      	adds	r0, #8
    if (offset < 0) {
 8006d02:	2e00      	cmp	r6, #0
    uint8_t *data = buf->data + start;
 8006d04:	eb00 0502 	add.w	r5, r0, r2
    if (offset < 0) {
 8006d08:	db15      	blt.n	8006d36 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x66>
        length = length - offset;
 8006d0a:	1b9c      	subs	r4, r3, r6
        memmove(data, data + offset, length);
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	19a9      	adds	r1, r5, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7fc ff6c 	bl	8003bee <memmove>
        memset(data + length, 0, offset);
 8006d16:	4632      	mov	r2, r6
 8006d18:	1928      	adds	r0, r5, r4
 8006d1a:	2100      	movs	r1, #0
}
 8006d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data + length, 0, offset);
 8006d20:	f7fc bf7f 	b.w	8003c22 <memset>
}
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
        fill(buf, 0);
 8006d26:	2200      	movs	r2, #0
}
 8006d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fill(buf, 0);
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d32:	f7ff bfa3 	b.w	8006c7c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>
        offset = -offset;
 8006d36:	4274      	negs	r4, r6
        memmove(data + offset, data, length - offset);
 8006d38:	199a      	adds	r2, r3, r6
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	1928      	adds	r0, r5, r4
 8006d3e:	f7fc ff56 	bl	8003bee <memmove>
        memset(data, 0, offset);
 8006d42:	4622      	mov	r2, r4
 8006d44:	4628      	mov	r0, r5
}
 8006d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data, 0, offset);
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f7fc bf69 	b.w	8003c22 <memset>

08006d50 <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE>:
String toHex(Buffer buf) {
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4605      	mov	r5, r0
    auto res = mkString(NULL, buf->length * 2);
 8006d54:	6841      	ldr	r1, [r0, #4]
 8006d56:	2000      	movs	r0, #0
 8006d58:	0049      	lsls	r1, r1, #1
 8006d5a:	f000 f9fb 	bl	8007154 <_ZN3pxt8mkStringEPKci>
    for (int i = 0; i < buf->length; ++i) {
 8006d5e:	686b      	ldr	r3, [r5, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dd12      	ble.n	8006d8a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3a>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4e09      	ldr	r6, [pc, #36]	; (8006d8c <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3c>)
 8006d68:	1deb      	adds	r3, r5, #7
        res->data[i << 1] = hex[buf->data[i] >> 4];
 8006d6a:	785c      	ldrb	r4, [r3, #1]
 8006d6c:	1f99      	subs	r1, r3, #6
 8006d6e:	1124      	asrs	r4, r4, #4
 8006d70:	5d34      	ldrb	r4, [r6, r4]
 8006d72:	1b49      	subs	r1, r1, r5
 8006d74:	7194      	strb	r4, [r2, #6]
        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];
 8006d76:	785c      	ldrb	r4, [r3, #1]
 8006d78:	3202      	adds	r2, #2
 8006d7a:	f004 040f 	and.w	r4, r4, #15
 8006d7e:	5d34      	ldrb	r4, [r6, r4]
 8006d80:	3301      	adds	r3, #1
 8006d82:	7154      	strb	r4, [r2, #5]
    for (int i = 0; i < buf->length; ++i) {
 8006d84:	686c      	ldr	r4, [r5, #4]
 8006d86:	428c      	cmp	r4, r1
 8006d88:	dcef      	bgt.n	8006d6a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x1a>
}
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	0800c374 	.word	0x0800c374

08006d90 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii>:
    if (length < 0)
 8006d90:	2b00      	cmp	r3, #0
        length = buf->length - start;
 8006d92:	bfbc      	itt	lt
 8006d94:	6843      	ldrlt	r3, [r0, #4]
 8006d96:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	db2f      	blt.n	8006dfc <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6c>
void rotate(Buffer buf, int offset, int start = 0, int length = -1) {
 8006d9c:	b470      	push	{r4, r5, r6}
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8006d9e:	6845      	ldr	r5, [r0, #4]
 8006da0:	189c      	adds	r4, r3, r2
 8006da2:	42ac      	cmp	r4, r5
 8006da4:	dc28      	bgt.n	8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 8006da6:	4294      	cmp	r4, r2
 8006da8:	db26      	blt.n	8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 8006daa:	b32b      	cbz	r3, 8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        offset == 0 || offset == INT_MIN)
 8006dac:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8006db0:	d022      	beq.n	8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
    if (offset < 0)
 8006db2:	2900      	cmp	r1, #0
        offset += length << 8; // try to make it positive
 8006db4:	bfb8      	it	lt
 8006db6:	eb01 2103 	addlt.w	r1, r1, r3, lsl #8
    offset %= length;
 8006dba:	fb91 f4f3 	sdiv	r4, r1, r3
 8006dbe:	fb03 1114 	mls	r1, r3, r4, r1
    uint8_t *data = buf->data + start;
 8006dc2:	3008      	adds	r0, #8
    if (offset < 0)
 8006dc4:	2900      	cmp	r1, #0
        offset += length;
 8006dc6:	bfb8      	it	lt
 8006dc8:	18c9      	addlt	r1, r1, r3
    uint8_t *data = buf->data + start;
 8006dca:	4402      	add	r2, r0
    uint8_t *n_first = data + offset;
 8006dcc:	4411      	add	r1, r2
    while (first != next) {
 8006dce:	428a      	cmp	r2, r1
    uint8_t *last = data + length;
 8006dd0:	4413      	add	r3, r2
    while (first != next) {
 8006dd2:	d011      	beq.n	8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	e004      	b.n	8006de2 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x52>
        } else if (first == n_first) {
 8006dd8:	428a      	cmp	r2, r1
 8006dda:	4604      	mov	r4, r0
 8006ddc:	d00f      	beq.n	8006dfe <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6e>
    while (first != next) {
 8006dde:	4294      	cmp	r4, r2
 8006de0:	d00a      	beq.n	8006df8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        *first++ = *next;
 8006de2:	4620      	mov	r0, r4
 8006de4:	f810 6b01 	ldrb.w	r6, [r0], #1
        uint8_t tmp = *first;
 8006de8:	7815      	ldrb	r5, [r2, #0]
        if (next == last) {
 8006dea:	4283      	cmp	r3, r0
        *first++ = *next;
 8006dec:	f802 6b01 	strb.w	r6, [r2], #1
        *next++ = tmp;
 8006df0:	7025      	strb	r5, [r4, #0]
        if (next == last) {
 8006df2:	d1f1      	bne.n	8006dd8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x48>
 8006df4:	460c      	mov	r4, r1
 8006df6:	e7f2      	b.n	8006dde <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
}
 8006df8:	bc70      	pop	{r4, r5, r6}
 8006dfa:	4770      	bx	lr
 8006dfc:	4770      	bx	lr
        } else if (first == n_first) {
 8006dfe:	4601      	mov	r1, r0
 8006e00:	e7ed      	b.n	8006dde <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
 8006e02:	bf00      	nop

08006e04 <_ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_>:
void write(Buffer buf, int dstOffset, Buffer src) {
 8006e04:	b510      	push	{r4, lr}
    writeBuffer(buf, dstOffset, src, 0, -1);
 8006e06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
void write(Buffer buf, int dstOffset, Buffer src) {
 8006e0a:	b082      	sub	sp, #8
    writeBuffer(buf, dstOffset, src, 0, -1);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	9400      	str	r4, [sp, #0]
 8006e10:	f7ff ff0a 	bl	8006c28 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>
}
 8006e14:	b002      	add	sp, #8
 8006e16:	bd10      	pop	{r4, pc}

08006e18 <_ZN7control12createBufferEi>:
    return mkBuffer(NULL, size);
 8006e18:	4601      	mov	r1, r0
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f000 b9c0 	b.w	80071a0 <_ZN3pxt8mkBufferEPKhi>

08006e20 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>:

void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8006e20:	b530      	push	{r4, r5, lr}
#define WRITEBYTES(isz, swap, toInt)                                                               \
    isz = toInt(value);                                                                            \
    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \
    break

    switch (format) {
 8006e22:	3a01      	subs	r2, #1
void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8006e24:	b083      	sub	sp, #12
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
    switch (format) {
 8006e2a:	2a0f      	cmp	r2, #15
 8006e2c:	d813      	bhi.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8006e2e:	e8df f002 	tbb	[pc, r2]
 8006e32:	1414      	.short	0x1414
 8006e34:	14610808 	.word	0x14610808
 8006e38:	731b1b14 	.word	0x731b1b14
 8006e3c:	6754254a 	.word	0x6754254a
 8006e40:	385a      	.short	0x385a
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fe26 	bl	8007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006e48:	2d01      	cmp	r5, #1
 8006e4a:	dd04      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, false, toInt);
 8006e4c:	b280      	uxth	r0, r0
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
 8006e4e:	07e2      	lsls	r2, r4, #31
            *(uint16_t *)dst = *(uint16_t *)src;
 8006e50:	bf54      	ite	pl
 8006e52:	8020      	strhpl	r0, [r4, #0]
            memcpy(dst, src, length);
 8006e54:	8020      	strhmi	r0, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8006e56:	b003      	add	sp, #12
 8006e58:	bd30      	pop	{r4, r5, pc}
        WRITEBYTES(u8, true, toInt);
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fe1a 	bl	8007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	ddf8      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u8, true, toInt);
 8006e64:	7020      	strb	r0, [r4, #0]
 8006e66:	e7f6      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, true, toInt);
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fe13 	bl	8007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006e6e:	2d01      	cmp	r5, #1
 8006e70:	ddf1      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8006e72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006e76:	7060      	strb	r0, [r4, #1]
 8006e78:	7023      	strb	r3, [r4, #0]
 8006e7a:	e7ec      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, true, toUInt);
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fda5 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006e82:	2d03      	cmp	r5, #3
        WRITEBYTES(u32, true, toUInt);
 8006e84:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8006e86:	dde6      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8006e88:	f89d 0000 	ldrb.w	r0, [sp]
 8006e8c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8006e90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006e94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e98:	70e0      	strb	r0, [r4, #3]
 8006e9a:	70a1      	strb	r1, [r4, #2]
 8006e9c:	7062      	strb	r2, [r4, #1]
 8006e9e:	7023      	strb	r3, [r4, #0]
 8006ea0:	e7d9      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, true, toDouble);
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fd62 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 8006ea8:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, true, toDouble);
 8006eaa:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 8006eae:	ddd2      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8006eb0:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
        uint8_t *p = dst + length;
 8006eb4:	f104 0308 	add.w	r3, r4, #8
            *--p = src[i];
 8006eb8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006ebc:	f803 1d01 	strb.w	r1, [r3, #-1]!
        for (int i = 0; i < length; ++i)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d1f9      	bne.n	8006eb8 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x98>
 8006ec4:	e7c7      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, false, toUInt);
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fd80 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006ecc:	2d03      	cmp	r5, #3
 8006ece:	ddc2      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        if (length == 4 && ((uint32_t)dst & 3) == 0)
 8006ed0:	07a3      	lsls	r3, r4, #30
            *(uint32_t *)dst = *(uint32_t *)src;
 8006ed2:	bf0c      	ite	eq
 8006ed4:	6020      	streq	r0, [r4, #0]
            memcpy(dst, src, length);
 8006ed6:	6020      	strne	r0, [r4, #0]
 8006ed8:	e7bd      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, false, toFloat);
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fe6c 	bl	8007bb8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 8006ee0:	2d03      	cmp	r5, #3
 8006ee2:	dcf5      	bgt.n	8006ed0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 8006ee4:	e7b7      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, true, toFloat);
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fe66 	bl	8007bb8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 8006eec:	2d03      	cmp	r5, #3
        WRITEBYTES(f32, true, toFloat);
 8006eee:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8006ef0:	dcca      	bgt.n	8006e88 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 8006ef2:	e7b0      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, false, toInt);
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fdcd 	bl	8007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006efa:	2d03      	cmp	r5, #3
 8006efc:	dce8      	bgt.n	8006ed0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 8006efe:	e7aa      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, false, toDouble);
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fd33 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 8006f06:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, false, toDouble);
 8006f08:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 8006f0c:	dda3      	ble.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            memcpy(dst, src, length);
 8006f0e:	466b      	mov	r3, sp
 8006f10:	cb03      	ldmia	r3!, {r0, r1}
 8006f12:	6020      	str	r0, [r4, #0]
 8006f14:	6061      	str	r1, [r4, #4]
 8006f16:	e79e      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, true, toInt);
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fdbb 	bl	8007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8006f1e:	2d03      	cmp	r5, #3
        WRITEBYTES(i32, true, toInt);
 8006f20:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8006f22:	dcb1      	bgt.n	8006e88 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 8006f24:	e797      	b.n	8006e56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8006f26:	bf00      	nop

08006f28 <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE>:
void setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {
 8006f28:	b430      	push	{r4, r5}
    if (offset < 0)
 8006f2a:	1e14      	subs	r4, r2, #0
 8006f2c:	db07      	blt.n	8006f3e <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE+0x16>
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 8006f2e:	6845      	ldr	r5, [r0, #4]
 8006f30:	3008      	adds	r0, #8
 8006f32:	460a      	mov	r2, r1
 8006f34:	4420      	add	r0, r4
 8006f36:	1b29      	subs	r1, r5, r4
}
 8006f38:	bc30      	pop	{r4, r5}
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 8006f3a:	f7ff bf71 	b.w	8006e20 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>
}
 8006f3e:	bc30      	pop	{r4, r5}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop

08006f44 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>:

TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8006f44:	b500      	push	{lr}
// Assume little endian
#define READBYTES(isz, swap, conv)                                                                 \
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
 8006f46:	3a01      	subs	r2, #1
TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8006f48:	b085      	sub	sp, #20
    switch (format) {
 8006f4a:	2a0f      	cmp	r2, #15
 8006f4c:	f200 8088 	bhi.w	8007060 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x11c>
 8006f50:	e8df f002 	tbb	[pc, r2]
 8006f54:	3d302316 	.word	0x3d302316
 8006f58:	5c59564a 	.word	0x5c59564a
 8006f5c:	7165625f 	.word	0x7165625f
 8006f60:	08838074 	.word	0x08838074
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
    case NumberFormat::Float64LE:
        READBYTES(f64, false, fromDouble);
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
 8006f64:	2301      	movs	r3, #1
 8006f66:	9100      	str	r1, [sp, #0]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	eb0d 0102 	add.w	r1, sp, r2
 8006f6e:	f7ff fe11 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f76:	f000 fac7 	bl	8007508 <_ZN3pxt10fromDoubleEd>
    }

    return 0;
}
 8006f7a:	b005      	add	sp, #20
 8006f7c:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, false, fromInt);
 8006f80:	2300      	movs	r3, #0
 8006f82:	9100      	str	r1, [sp, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	a902      	add	r1, sp, #8
 8006f88:	f7ff fe04 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006f8c:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8006f90:	f000 fb7e 	bl	8007690 <_ZN3pxt7fromIntEi>
}
 8006f94:	b005      	add	sp, #20
 8006f96:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u8, false, fromInt);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9100      	str	r1, [sp, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	a902      	add	r1, sp, #8
 8006fa2:	f7ff fdf7 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006fa6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006faa:	f000 fb71 	bl	8007690 <_ZN3pxt7fromIntEi>
}
 8006fae:	b005      	add	sp, #20
 8006fb0:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i16, false, fromInt);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9100      	str	r1, [sp, #0]
        READBYTES(i16, true, fromInt);
 8006fb8:	2202      	movs	r2, #2
 8006fba:	a902      	add	r1, sp, #8
 8006fbc:	f7ff fdea 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006fc0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8006fc4:	f000 fb64 	bl	8007690 <_ZN3pxt7fromIntEi>
}
 8006fc8:	b005      	add	sp, #20
 8006fca:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u16, false, fromInt);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9100      	str	r1, [sp, #0]
        READBYTES(u16, true, fromInt);
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	a902      	add	r1, sp, #8
 8006fd6:	f7ff fddd 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006fda:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8006fde:	f000 fb57 	bl	8007690 <_ZN3pxt7fromIntEi>
}
 8006fe2:	b005      	add	sp, #20
 8006fe4:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i32, false, fromInt);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9100      	str	r1, [sp, #0]
        READBYTES(i32, true, fromInt);
 8006fec:	2204      	movs	r2, #4
 8006fee:	a902      	add	r1, sp, #8
 8006ff0:	f7ff fdd0 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006ff4:	9802      	ldr	r0, [sp, #8]
 8006ff6:	f000 fb4b 	bl	8007690 <_ZN3pxt7fromIntEi>
}
 8006ffa:	b005      	add	sp, #20
 8006ffc:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, true, fromInt);
 8007000:	2301      	movs	r3, #1
 8007002:	9100      	str	r1, [sp, #0]
 8007004:	e7be      	b.n	8006f84 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x40>
        READBYTES(u8, true, fromInt);
 8007006:	2301      	movs	r3, #1
 8007008:	9100      	str	r1, [sp, #0]
 800700a:	e7c8      	b.n	8006f9e <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x5a>
        READBYTES(i16, true, fromInt);
 800700c:	9100      	str	r1, [sp, #0]
 800700e:	2301      	movs	r3, #1
 8007010:	e7d2      	b.n	8006fb8 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x74>
        READBYTES(u16, true, fromInt);
 8007012:	9100      	str	r1, [sp, #0]
 8007014:	2301      	movs	r3, #1
 8007016:	e7dc      	b.n	8006fd2 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x8e>
        READBYTES(i32, true, fromInt);
 8007018:	9100      	str	r1, [sp, #0]
 800701a:	2301      	movs	r3, #1
 800701c:	e7e6      	b.n	8006fec <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xa8>
        READBYTES(u32, false, fromUInt);
 800701e:	2300      	movs	r3, #0
 8007020:	9100      	str	r1, [sp, #0]
        READBYTES(u32, true, fromUInt);
 8007022:	2204      	movs	r2, #4
 8007024:	a902      	add	r1, sp, #8
 8007026:	f7ff fdb5 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 800702a:	9802      	ldr	r0, [sp, #8]
 800702c:	f000 fb3a 	bl	80076a4 <_ZN3pxt8fromUIntEj>
}
 8007030:	b005      	add	sp, #20
 8007032:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u32, true, fromUInt);
 8007036:	9100      	str	r1, [sp, #0]
 8007038:	2301      	movs	r3, #1
 800703a:	e7f2      	b.n	8007022 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xde>
        READBYTES(f32, false, fromFloat);
 800703c:	2300      	movs	r3, #0
 800703e:	9100      	str	r1, [sp, #0]
        READBYTES(f32, true, fromFloat);
 8007040:	2204      	movs	r2, #4
 8007042:	a902      	add	r1, sp, #8
 8007044:	f7ff fda6 	bl	8006b94 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007048:	9802      	ldr	r0, [sp, #8]
 800704a:	f000 fb19 	bl	8007680 <_ZN3pxt9fromFloatEf>
}
 800704e:	b005      	add	sp, #20
 8007050:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(f64, false, fromDouble);
 8007054:	9100      	str	r1, [sp, #0]
 8007056:	2300      	movs	r3, #0
 8007058:	e786      	b.n	8006f68 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x24>
        READBYTES(f32, true, fromFloat);
 800705a:	9100      	str	r1, [sp, #0]
 800705c:	2301      	movs	r3, #1
 800705e:	e7ef      	b.n	8007040 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xfc>
    return 0;
 8007060:	2000      	movs	r0, #0
 8007062:	e78a      	b.n	8006f7a <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x36>

08007064 <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi>:
    if (offset < 0)
 8007064:	1e13      	subs	r3, r2, #0
 8007066:	db08      	blt.n	800707a <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi+0x16>
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
 8007068:	b410      	push	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 800706a:	6844      	ldr	r4, [r0, #4]
 800706c:	3008      	adds	r0, #8
 800706e:	460a      	mov	r2, r1
 8007070:	4418      	add	r0, r3
 8007072:	1ae1      	subs	r1, r4, r3
}
 8007074:	bc10      	pop	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 8007076:	f7ff bf65 	b.w	8006f44 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>
        return fromInt(0);
 800707a:	2000      	movs	r0, #0
 800707c:	f000 bb08 	b.w	8007690 <_ZN3pxt7fromIntEi>

08007080 <_ZN7control6millisEv>:
//
//
//
//
    int millis() {
        return current_time_ms();
 8007080:	f002 bb7c 	b.w	800977c <_ZN3pxt15current_time_msEv>

08007084 <_ZN7control15internalOnEventEiiPN3pxt12TValueStructEi>:
//
//
//
//
    void internalOnEvent(int src, int value, Action handler, int flags = 16) {
        registerWithDal(src, value, handler, flags);
 8007084:	f002 bc1e 	b.w	80098c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08007088 <_ZN7control5resetEv>:
//
//
//
//
    void reset() {
        target_reset();
 8007088:	f7f9 ba0e 	b.w	80004a8 <target_reset>

0800708c <_ZN7control10waitMicrosEi>:
//
//
//
//
    void waitMicros(int micros) {
        sleep_us(micros);
 800708c:	17c1      	asrs	r1, r0, #31
 800708e:	f002 baa3 	b.w	80095d8 <_ZN3pxt8sleep_usEy>
 8007092:	bf00      	nop

08007094 <_ZN7control13runInParallelEPN3pxt12TValueStructE>:
//
//
//
//
    void runInParallel(Action a) {
        pxt::runInParallel(a);
 8007094:	f002 bab4 	b.w	8009600 <_ZN3pxt13runInParallelEPNS_12TValueStructE>

08007098 <_ZN7control12waitForEventEii>:
//
//
//
//
    void waitForEvent(int src, int value) {
        pxt::waitForEvent(src, value);
 8007098:	f002 bac4 	b.w	8009624 <_ZN3pxt12waitForEventEii>

0800709c <_ZN7control18deviceSerialNumberEv>:
//
//
//
//
    int deviceSerialNumber() {
        return pxt::getSerialNumber();
 800709c:	f002 bb6c 	b.w	8009778 <_ZN3pxt15getSerialNumberEv>

080070a0 <_ZN7control5__logEiPN3pxt11BoxedStringE>:
//
//
//
//
    void __log(int prority, String text) {
        if (NULL == text) return;
 80070a0:	4608      	mov	r0, r1
 80070a2:	b119      	cbz	r1, 80070ac <_ZN7control5__logEiPN3pxt11BoxedStringE+0xc>
        pxt::sendSerial(text->data, text->length);
 80070a4:	8889      	ldrh	r1, [r1, #4]
 80070a6:	3006      	adds	r0, #6
 80070a8:	f002 be80 	b.w	8009dac <_ZN3pxt10sendSerialEPKci>
    }
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop

080070b0 <_ZN7control10dmesgValueEPN3pxt12TValueStructE>:
//
//
//
//
    void dmesgValue(TValue v) {
        anyPrint(v);
 80070b0:	f001 b9da 	b.w	8008468 <_ZN3pxt8anyPrintEPNS_12TValueStructE>

080070b4 <_ZN7control2gcEv>:
//
//
//
//
    void gc() {
        pxt::gc(1);
 80070b4:	2001      	movs	r0, #1
 80070b6:	f001 bb53 	b.w	8008760 <_ZN3pxt2gcEi>
 80070ba:	bf00      	nop

080070bc <_ZN7control8heapDumpEv>:

//
//
//
//
    void heapDump() {
 80070bc:	b508      	push	{r3, lr}
        pxt::gc(2);
 80070be:	2002      	movs	r0, #2
 80070c0:	f001 fb4e 	bl	8008760 <_ZN3pxt2gcEi>
        target_panic(PANIC_HEAP_DUMPED);
    }
 80070c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        target_panic(PANIC_HEAP_DUMPED);
 80070c8:	f240 3093 	movw	r0, #915	; 0x393
 80070cc:	f7f9 ba16 	b.w	80004fc <target_panic>

080070d0 <_ZN7control16profilingEnabledEv>:
#ifdef PXT_PROFILE
        return true;
#else
        return false;
#endif
    }
 80070d0:	2000      	movs	r0, #0
 80070d2:	4770      	bx	lr

080070d4 <_ZN3pxtL13dtorDoNothingEv>:
        decr((TValue)s);
#endif
    }
}

static void dtorDoNothing() {}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <_ZN3pxtL11string_sizeEPNS_11BoxedStringE>:
#else
#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \
    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint)
#endif

PRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)
 80070d8:	8880      	ldrh	r0, [r0, #4]
 80070da:	300c      	adds	r0, #12
 80070dc:	0880      	lsrs	r0, r0, #2
 80070de:	4770      	bx	lr

080070e0 <_ZN3pxtL11number_sizeEPNS_11BoxedNumberE>:
PRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)
 80070e0:	2003      	movs	r0, #3
 80070e2:	4770      	bx	lr

080070e4 <_ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE>:
PRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)
 80070e4:	6840      	ldr	r0, [r0, #4]
 80070e6:	300b      	adds	r0, #11
 80070e8:	0880      	lsrs	r0, r0, #2
 80070ea:	4770      	bx	lr

080070ec <_ZN3pxt11findBindingEii>:
    for (auto p = handlerBindings; p; p = p->next) {
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <_ZN3pxt11findBindingEii+0x18>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	b12b      	cbz	r3, 80070fe <_ZN3pxt11findBindingEii+0x12>
        if (p->source == source && p->value == value) {
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	4282      	cmp	r2, r0
 80070f6:	d1fa      	bne.n	80070ee <_ZN3pxt11findBindingEii+0x2>
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	428a      	cmp	r2, r1
 80070fc:	d1f7      	bne.n	80070ee <_ZN3pxt11findBindingEii+0x2>
}
 80070fe:	4618      	mov	r0, r3
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	2000100c 	.word	0x2000100c

08007108 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>:
void setBinding(int source, int value, Action act) {
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (auto p = handlerBindings; p; p = p->next) {
 800710c:	4f10      	ldr	r7, [pc, #64]	; (8007150 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x48>)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	b913      	cbnz	r3, 8007118 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x10>
 8007112:	e00a      	b.n	800712a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	b143      	cbz	r3, 800712a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
        if (p->source == source && p->value == value) {
 8007118:	685c      	ldr	r4, [r3, #4]
 800711a:	42a0      	cmp	r0, r4
 800711c:	d1fa      	bne.n	8007114 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
 800711e:	689c      	ldr	r4, [r3, #8]
 8007120:	42a1      	cmp	r1, r4
 8007122:	d1f7      	bne.n	8007114 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
        curr->action = act;
 8007124:	60da      	str	r2, [r3, #12]
}
 8007126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712a:	4604      	mov	r4, r0
    curr = new HandlerBinding();
 800712c:	2010      	movs	r0, #16
 800712e:	4690      	mov	r8, r2
 8007130:	460d      	mov	r5, r1
 8007132:	f7fc ff4d 	bl	8003fd0 <_Znwj>
 8007136:	4606      	mov	r6, r0
    curr->next = handlerBindings;
 8007138:	683b      	ldr	r3, [r7, #0]
    curr->source = source;
 800713a:	6044      	str	r4, [r0, #4]
    curr->value = value;
 800713c:	6085      	str	r5, [r0, #8]
    curr->next = handlerBindings;
 800713e:	6003      	str	r3, [r0, #0]
    registerGC(&curr->action);
 8007140:	2101      	movs	r1, #1
    curr->action = act;
 8007142:	f840 8f0c 	str.w	r8, [r0, #12]!
    registerGC(&curr->action);
 8007146:	f001 fe0b 	bl	8008d60 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
    handlerBindings = curr;
 800714a:	603e      	str	r6, [r7, #0]
}
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	2000100c 	.word	0x2000100c

08007154 <_ZN3pxt8mkStringEPKci>:
String mkString(const char *data, int len) {
 8007154:	b570      	push	{r4, r5, r6, lr}
    if (len < 0)
 8007156:	1e0c      	subs	r4, r1, #0
String mkString(const char *data, int len) {
 8007158:	4606      	mov	r6, r0
    if (len < 0)
 800715a:	db03      	blt.n	8007164 <_ZN3pxt8mkStringEPKci+0x10>
    if (len == 0)
 800715c:	b93c      	cbnz	r4, 800716e <_ZN3pxt8mkStringEPKci+0x1a>
        return (String)emptyString;
 800715e:	4d0e      	ldr	r5, [pc, #56]	; (8007198 <_ZN3pxt8mkStringEPKci+0x44>)
}
 8007160:	4628      	mov	r0, r5
 8007162:	bd70      	pop	{r4, r5, r6, pc}
        len = strlen(data);
 8007164:	f7fc fd2c 	bl	8003bc0 <strlen>
 8007168:	4604      	mov	r4, r0
    if (len == 0)
 800716a:	2c00      	cmp	r4, #0
 800716c:	d0f7      	beq.n	800715e <_ZN3pxt8mkStringEPKci+0xa>
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 800716e:	f104 0009 	add.w	r0, r4, #9
 8007172:	f001 fcb1 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 8007176:	4605      	mov	r5, r0
 8007178:	b108      	cbz	r0, 800717e <_ZN3pxt8mkStringEPKci+0x2a>
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <_ZN3pxt8mkStringEPKci+0x48>)
 800717c:	6003      	str	r3, [r0, #0]
    r->length = len;
 800717e:	80ac      	strh	r4, [r5, #4]
    if (data)
 8007180:	b126      	cbz	r6, 800718c <_ZN3pxt8mkStringEPKci+0x38>
        memcpy(r->data, data, len);
 8007182:	4631      	mov	r1, r6
 8007184:	4622      	mov	r2, r4
 8007186:	1da8      	adds	r0, r5, #6
 8007188:	f7fc fd02 	bl	8003b90 <memcpy>
    r->data[len] = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	442c      	add	r4, r5
 8007190:	71a3      	strb	r3, [r4, #6]
}
 8007192:	4628      	mov	r0, r5
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	bf00      	nop
 8007198:	0800c44c 	.word	0x0800c44c
 800719c:	0800c290 	.word	0x0800c290

080071a0 <_ZN3pxt8mkBufferEPKhi>:
Buffer mkBuffer(const uint8_t *data, int len) {
 80071a0:	b570      	push	{r4, r5, r6, lr}
    if (len <= 0)
 80071a2:	1e0d      	subs	r5, r1, #0
 80071a4:	dd12      	ble.n	80071cc <_ZN3pxt8mkBufferEPKhi+0x2c>
 80071a6:	4606      	mov	r6, r0
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
 80071a8:	f105 0008 	add.w	r0, r5, #8
 80071ac:	f001 fc94 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 80071b0:	4604      	mov	r4, r0
 80071b2:	b108      	cbz	r0, 80071b8 <_ZN3pxt8mkBufferEPKhi+0x18>
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <_ZN3pxt8mkBufferEPKhi+0x3c>)
 80071b6:	6003      	str	r3, [r0, #0]
    r->length = len;
 80071b8:	6065      	str	r5, [r4, #4]
 80071ba:	f104 0008 	add.w	r0, r4, #8
        memcpy(r->data, data, len);
 80071be:	462a      	mov	r2, r5
 80071c0:	4631      	mov	r1, r6
    if (data)
 80071c2:	b136      	cbz	r6, 80071d2 <_ZN3pxt8mkBufferEPKhi+0x32>
        memcpy(r->data, data, len);
 80071c4:	f7fc fce4 	bl	8003b90 <memcpy>
}
 80071c8:	4620      	mov	r0, r4
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
        return (Buffer)emptyBuffer;
 80071cc:	4c04      	ldr	r4, [pc, #16]	; (80071e0 <_ZN3pxt8mkBufferEPKhi+0x40>)
}
 80071ce:	4620      	mov	r0, r4
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
        memset(r->data, 0, len);
 80071d2:	f7fc fd26 	bl	8003c22 <memset>
}
 80071d6:	4620      	mov	r0, r4
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	bf00      	nop
 80071dc:	0800c230 	.word	0x0800c230
 80071e0:	0800c440 	.word	0x0800c440

080071e4 <_ZN3pxt9getRandomEj>:
unsigned getRandom(unsigned max) {
 80071e4:	b430      	push	{r4, r5}
 80071e6:	4604      	mov	r4, r0
 80071e8:	4d0d      	ldr	r5, [pc, #52]	; (8007220 <_ZN3pxt9getRandomEj+0x3c>)
 80071ea:	682a      	ldr	r2, [r5, #0]
        m = (unsigned)max;
 80071ec:	4621      	mov	r1, r4
        result = 0;
 80071ee:	2000      	movs	r0, #0
            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |
 80071f0:	0993      	lsrs	r3, r2, #6
 80071f2:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 80071f6:	4053      	eors	r3, r2
 80071f8:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 80071fc:	ea83 0392 	eor.w	r3, r3, r2, lsr #2
 8007200:	0852      	lsrs	r2, r2, #1
 8007202:	4053      	eors	r3, r2
 8007204:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
            result = ((result << 1) | (r & 0x00000001));
 8007208:	f002 0301 	and.w	r3, r2, #1
        } while (m >>= 1);
 800720c:	0849      	lsrs	r1, r1, #1
            result = ((result << 1) | (r & 0x00000001));
 800720e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
        } while (m >>= 1);
 8007212:	d1ed      	bne.n	80071f0 <_ZN3pxt9getRandomEj+0xc>
    } while (result > (unsigned)max);
 8007214:	4284      	cmp	r4, r0
 8007216:	d3e9      	bcc.n	80071ec <_ZN3pxt9getRandomEj+0x8>
 8007218:	602a      	str	r2, [r5, #0]
}
 800721a:	bc30      	pop	{r4, r5}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20001000 	.word	0x20001000

08007224 <_ZN7String_7mkEmptyEv>:
    return mkString("", 0);
 8007224:	2100      	movs	r1, #0
 8007226:	4801      	ldr	r0, [pc, #4]	; (800722c <_ZN7String_7mkEmptyEv+0x8>)
 8007228:	f7ff bf94 	b.w	8007154 <_ZN3pxt8mkStringEPKci>
 800722c:	0800c88c 	.word	0x0800c88c

08007230 <_ZN7String_12fromCharCodeEi>:
    char buf[] = {(char)code, 0};
 8007230:	2200      	movs	r2, #0
String fromCharCode(int code) {
 8007232:	b500      	push	{lr}
 8007234:	b083      	sub	sp, #12
    char buf[] = {(char)code, 0};
 8007236:	ab02      	add	r3, sp, #8
 8007238:	f8ad 2004 	strh.w	r2, [sp, #4]
 800723c:	f803 0d04 	strb.w	r0, [r3, #-4]!
    return mkString(buf, 1);
 8007240:	4618      	mov	r0, r3
 8007242:	2101      	movs	r1, #1
 8007244:	f7ff ff86 	bl	8007154 <_ZN3pxt8mkStringEPKci>
}
 8007248:	b003      	add	sp, #12
 800724a:	f85d fb04 	ldr.w	pc, [sp], #4
 800724e:	bf00      	nop

08007250 <_ZN7String_6charAtEPN3pxt11BoxedStringEi>:
String charAt(String s, int pos) {
 8007250:	b510      	push	{r4, lr}
 8007252:	b082      	sub	sp, #8
    if (s && 0 <= pos && pos < s->length) {
 8007254:	b120      	cbz	r0, 8007260 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8007256:	2900      	cmp	r1, #0
 8007258:	db02      	blt.n	8007260 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 800725a:	8883      	ldrh	r3, [r0, #4]
 800725c:	428b      	cmp	r3, r1
 800725e:	dc05      	bgt.n	800726c <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x1c>
    return mkString("", 0);
 8007260:	2100      	movs	r1, #0
 8007262:	4809      	ldr	r0, [pc, #36]	; (8007288 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x38>)
 8007264:	f7ff ff76 	bl	8007154 <_ZN3pxt8mkStringEPKci>
}
 8007268:	b002      	add	sp, #8
 800726a:	bd10      	pop	{r4, pc}
    char buf[] = {(char)code, 0};
 800726c:	2400      	movs	r4, #0
        return fromCharCode(s->data[pos]);
 800726e:	4401      	add	r1, r0
 8007270:	798a      	ldrb	r2, [r1, #6]
    char buf[] = {(char)code, 0};
 8007272:	ab02      	add	r3, sp, #8
 8007274:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007278:	f803 2d04 	strb.w	r2, [r3, #-4]!
    return mkString(buf, 1);
 800727c:	4618      	mov	r0, r3
 800727e:	2101      	movs	r1, #1
 8007280:	f7ff ff68 	bl	8007154 <_ZN3pxt8mkStringEPKci>
}
 8007284:	b002      	add	sp, #8
 8007286:	bd10      	pop	{r4, pc}
 8007288:	0800c88c 	.word	0x0800c88c

0800728c <_ZN7String_6concatEPN3pxt11BoxedStringES2_>:
String concat(String s, String other) {
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	460d      	mov	r5, r1
    if (!s)
 8007290:	b150      	cbz	r0, 80072a8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x1c>
 8007292:	4604      	mov	r4, r0
 8007294:	8881      	ldrh	r1, [r0, #4]
    if (!other)
 8007296:	b11d      	cbz	r5, 80072a0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x14>
    if (s->length == 0)
 8007298:	bb31      	cbnz	r1, 80072e8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x5c>
 800729a:	462e      	mov	r6, r5
}
 800729c:	4630      	mov	r0, r6
 800729e:	bd70      	pop	{r4, r5, r6, pc}
    if (s->length == 0)
 80072a0:	b961      	cbnz	r1, 80072bc <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x30>
        other = (String)sNull;
 80072a2:	4e14      	ldr	r6, [pc, #80]	; (80072f4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
}
 80072a4:	4630      	mov	r0, r6
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
    if (!other)
 80072a8:	b301      	cbz	r1, 80072ec <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x60>
 80072aa:	f44f 5169 	mov.w	r1, #14912	; 0x3a40
        s = (String)sNull;
 80072ae:	4e11      	ldr	r6, [pc, #68]	; (80072f4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    if (other->length == 0)
 80072b0:	88ab      	ldrh	r3, [r5, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f2      	beq.n	800729c <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x10>
 80072b6:	4634      	mov	r4, r6
 80072b8:	4419      	add	r1, r3
 80072ba:	e002      	b.n	80072c2 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x36>
 80072bc:	f501 5169 	add.w	r1, r1, #14912	; 0x3a40
        other = (String)sNull;
 80072c0:	4d0c      	ldr	r5, [pc, #48]	; (80072f4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    String r = mkString(NULL, s->length + other->length);
 80072c2:	2000      	movs	r0, #0
 80072c4:	f7ff ff46 	bl	8007154 <_ZN3pxt8mkStringEPKci>
    memcpy(r->data, s->data, s->length);
 80072c8:	1d83      	adds	r3, r0, #6
    String r = mkString(NULL, s->length + other->length);
 80072ca:	4606      	mov	r6, r0
    memcpy(r->data, s->data, s->length);
 80072cc:	88a2      	ldrh	r2, [r4, #4]
 80072ce:	1da1      	adds	r1, r4, #6
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fc fc5d 	bl	8003b90 <memcpy>
 80072d6:	4603      	mov	r3, r0
    memcpy(r->data + s->length, other->data, other->length);
 80072d8:	88a0      	ldrh	r0, [r4, #4]
 80072da:	88aa      	ldrh	r2, [r5, #4]
 80072dc:	4418      	add	r0, r3
 80072de:	1da9      	adds	r1, r5, #6
 80072e0:	f7fc fc56 	bl	8003b90 <memcpy>
}
 80072e4:	4630      	mov	r0, r6
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	4606      	mov	r6, r0
 80072ea:	e7e1      	b.n	80072b0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x24>
    if (!other)
 80072ec:	f44f 41e9 	mov.w	r1, #29824	; 0x7480
        s = (String)sNull;
 80072f0:	4c00      	ldr	r4, [pc, #0]	; (80072f4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
 80072f2:	e7e5      	b.n	80072c0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x34>
 80072f4:	0800c4a0 	.word	0x0800c4a0

080072f8 <_ZN7String_7compareEPN3pxt11BoxedStringES2_>:
    if (a == b)
 80072f8:	4288      	cmp	r0, r1
 80072fa:	d00a      	beq.n	8007312 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1a>
int compare(String a, String b) {
 80072fc:	b508      	push	{r3, lr}
    int compareResult = strcmp(a->data, b->data);
 80072fe:	3106      	adds	r1, #6
 8007300:	3006      	adds	r0, #6
 8007302:	f7fc fc53 	bl	8003bac <strcmp>
    if (compareResult < 0)
 8007306:	2800      	cmp	r0, #0
 8007308:	db05      	blt.n	8007316 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1e>
    else if (compareResult > 0)
 800730a:	bf14      	ite	ne
 800730c:	2001      	movne	r0, #1
 800730e:	2000      	moveq	r0, #0
}
 8007310:	bd08      	pop	{r3, pc}
        return 0;
 8007312:	2000      	movs	r0, #0
}
 8007314:	4770      	bx	lr
        return -1;
 8007316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800731a:	bd08      	pop	{r3, pc}

0800731c <_ZN7String_6lengthEPN3pxt11BoxedStringE>:
}
 800731c:	8880      	ldrh	r0, [r0, #4]
 800731e:	4770      	bx	lr

08007320 <_ZN7String_8mystrtodEPKcPPc>:
NUMBER mystrtod(const char *p, char **endp) {
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (isspace(*p))
 8007324:	7803      	ldrb	r3, [r0, #0]
NUMBER mystrtod(const char *p, char **endp) {
 8007326:	b083      	sub	sp, #12
    while (isspace(*p))
 8007328:	2b20      	cmp	r3, #32
NUMBER mystrtod(const char *p, char **endp) {
 800732a:	4604      	mov	r4, r0
 800732c:	460f      	mov	r7, r1
    while (isspace(*p))
 800732e:	d103      	bne.n	8007338 <_ZN7String_8mystrtodEPKcPPc+0x18>
 8007330:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007334:	2b20      	cmp	r3, #32
 8007336:	d0fb      	beq.n	8007330 <_ZN7String_8mystrtodEPKcPPc+0x10>
    if (*p == '+')
 8007338:	2b2b      	cmp	r3, #43	; 0x2b
        p++;
 800733a:	bf08      	it	eq
 800733c:	3401      	addeq	r4, #1
    if (*p == '-') {
 800733e:	7823      	ldrb	r3, [r4, #0]
 8007340:	2b2d      	cmp	r3, #45	; 0x2d
 8007342:	d05c      	beq.n	80073fe <_ZN7String_8mystrtodEPKcPPc+0xde>
    NUMBER m = 1;
 8007344:	2100      	movs	r1, #0
 8007346:	4a4d      	ldr	r2, [pc, #308]	; (800747c <_ZN7String_8mystrtodEPKcPPc+0x15c>)
 8007348:	e9cd 1200 	strd	r1, r2, [sp]
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d043      	beq.n	80073d8 <_ZN7String_8mystrtodEPKcPPc+0xb8>
    while (*p) {
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 808d 	beq.w	8007470 <_ZN7String_8mystrtodEPKcPPc+0x150>
        m = -1;
 8007356:	2600      	movs	r6, #0
 8007358:	f04f 0800 	mov.w	r8, #0
 800735c:	f04f 0900 	mov.w	r9, #0
            v *= 10;
 8007360:	f04f 0a00 	mov.w	sl, #0
 8007364:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8007484 <_ZN7String_8mystrtodEPKcPPc+0x164>
 8007368:	e01c      	b.n	80073a4 <_ZN7String_8mystrtodEPKcPPc+0x84>
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f7fb fd63 	bl	8002e3c <__wrap___aeabi_dmul>
 8007376:	4680      	mov	r8, r0
 8007378:	4689      	mov	r9, r1
            v += c;
 800737a:	4628      	mov	r0, r5
 800737c:	f7fb f988 	bl	8002690 <__aeabi_i2d>
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	f7fb fd72 	bl	8002e6c <__wrap___aeabi_dadd>
 8007388:	4680      	mov	r8, r0
 800738a:	4689      	mov	r9, r1
            if (dot)
 800738c:	b13e      	cbz	r6, 800739e <_ZN7String_8mystrtodEPKcPPc+0x7e>
                m /= 10;
 800738e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007392:	4652      	mov	r2, sl
 8007394:	465b      	mov	r3, fp
 8007396:	f7fb fd39 	bl	8002e0c <__wrap___aeabi_ddiv>
 800739a:	e9cd 0100 	strd	r0, r1, [sp]
    while (*p) {
 800739e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80073a2:	b15b      	cbz	r3, 80073bc <_ZN7String_8mystrtodEPKcPPc+0x9c>
        int c = *p - '0';
 80073a4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
        if (0 <= c && c <= 9) {
 80073a8:	2d09      	cmp	r5, #9
 80073aa:	d9de      	bls.n	800736a <_ZN7String_8mystrtodEPKcPPc+0x4a>
        } else if (!dot && *p == '.') {
 80073ac:	bb76      	cbnz	r6, 800740c <_ZN7String_8mystrtodEPKcPPc+0xec>
 80073ae:	2b2e      	cmp	r3, #46	; 0x2e
 80073b0:	d12c      	bne.n	800740c <_ZN7String_8mystrtodEPKcPPc+0xec>
    while (*p) {
 80073b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            dot = 1;
 80073b6:	2601      	movs	r6, #1
    while (*p) {
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f3      	bne.n	80073a4 <_ZN7String_8mystrtodEPKcPPc+0x84>
    v *= m;
 80073bc:	4640      	mov	r0, r8
 80073be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7fb fd3a 	bl	8002e3c <__wrap___aeabi_dmul>
 80073c8:	4680      	mov	r8, r0
 80073ca:	4689      	mov	r9, r1
        *endp = (char *)p;
 80073cc:	603c      	str	r4, [r7, #0]
}
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	b003      	add	sp, #12
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 80073d8:	7862      	ldrb	r2, [r4, #1]
 80073da:	f042 0220 	orr.w	r2, r2, #32
 80073de:	2a78      	cmp	r2, #120	; 0x78
 80073e0:	d1b9      	bne.n	8007356 <_ZN7String_8mystrtodEPKcPPc+0x36>
        return m * strtol(p, endp, 16);
 80073e2:	2210      	movs	r2, #16
 80073e4:	4639      	mov	r1, r7
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7fc fbc8 	bl	8003b7c <strtol>
 80073ec:	f7fb f950 	bl	8002690 <__aeabi_i2d>
 80073f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f4:	f7fb fd22 	bl	8002e3c <__wrap___aeabi_dmul>
 80073f8:	4680      	mov	r8, r0
 80073fa:	4689      	mov	r9, r1
 80073fc:	e7e7      	b.n	80073ce <_ZN7String_8mystrtodEPKcPPc+0xae>
        m = -1;
 80073fe:	2100      	movs	r1, #0
 8007400:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <_ZN7String_8mystrtodEPKcPPc+0x160>)
 8007402:	7863      	ldrb	r3, [r4, #1]
 8007404:	e9cd 1200 	strd	r1, r2, [sp]
        p++;
 8007408:	3401      	adds	r4, #1
 800740a:	e79f      	b.n	800734c <_ZN7String_8mystrtodEPKcPPc+0x2c>
        } else if (*p == 'e' || *p == 'E') {
 800740c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007410:	2b45      	cmp	r3, #69	; 0x45
 8007412:	7825      	ldrb	r5, [r4, #0]
 8007414:	d122      	bne.n	800745c <_ZN7String_8mystrtodEPKcPPc+0x13c>
    v *= m;
 8007416:	e9dd 0100 	ldrd	r0, r1, [sp]
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	f7fb fd0d 	bl	8002e3c <__wrap___aeabi_dmul>
 8007422:	4680      	mov	r8, r0
 8007424:	4689      	mov	r9, r1
    if (*p) {
 8007426:	2d00      	cmp	r5, #0
 8007428:	d0d0      	beq.n	80073cc <_ZN7String_8mystrtodEPKcPPc+0xac>
        int pw = strtol(p, endp, 10);
 800742a:	4639      	mov	r1, r7
 800742c:	1c60      	adds	r0, r4, #1
 800742e:	220a      	movs	r2, #10
 8007430:	f7fc fba4 	bl	8003b7c <strtol>
        v *= p10(pw);
 8007434:	4913      	ldr	r1, [pc, #76]	; (8007484 <_ZN7String_8mystrtodEPKcPPc+0x164>)
 8007436:	4602      	mov	r2, r0
 8007438:	2000      	movs	r0, #0
 800743a:	f7fb f9e3 	bl	8002804 <__powidf2>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f7fb fcf9 	bl	8002e3c <__wrap___aeabi_dmul>
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
}
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (isspace(*p))
 8007458:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800745c:	2d20      	cmp	r5, #32
 800745e:	d0fb      	beq.n	8007458 <_ZN7String_8mystrtodEPKcPPc+0x138>
            if (*p)
 8007460:	b90d      	cbnz	r5, 8007466 <_ZN7String_8mystrtodEPKcPPc+0x146>
 8007462:	7825      	ldrb	r5, [r4, #0]
 8007464:	e7d7      	b.n	8007416 <_ZN7String_8mystrtodEPKcPPc+0xf6>
                return NAN;
 8007466:	f04f 0800 	mov.w	r8, #0
 800746a:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8007488 <_ZN7String_8mystrtodEPKcPPc+0x168>
 800746e:	e7ae      	b.n	80073ce <_ZN7String_8mystrtodEPKcPPc+0xae>
    while (*p) {
 8007470:	f04f 0800 	mov.w	r8, #0
 8007474:	f04f 0900 	mov.w	r9, #0
 8007478:	e7a0      	b.n	80073bc <_ZN7String_8mystrtodEPKcPPc+0x9c>
 800747a:	bf00      	nop
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	bff00000 	.word	0xbff00000
 8007484:	40240000 	.word	0x40240000
 8007488:	7ff80000 	.word	0x7ff80000

0800748c <_ZN7String_6substrEPN3pxt11BoxedStringEii>:
String substr(String s, int start, int length) {
 800748c:	460b      	mov	r3, r1
    if (length <= 0)
 800748e:	1e11      	subs	r1, r2, #0
 8007490:	dd10      	ble.n	80074b4 <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x28>
String substr(String s, int start, int length) {
 8007492:	b410      	push	{r4}
 8007494:	8884      	ldrh	r4, [r0, #4]
    if (start < 0)
 8007496:	2b00      	cmp	r3, #0
        start = max(s->length + start, 0);
 8007498:	bfbc      	itt	lt
 800749a:	191b      	addlt	r3, r3, r4
 800749c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
    length = min(length, s->length - start);
 80074a0:	1ae4      	subs	r4, r4, r3
    return mkString(s->data + start, length);
 80074a2:	42a1      	cmp	r1, r4
 80074a4:	f100 0006 	add.w	r0, r0, #6
 80074a8:	bfa8      	it	ge
 80074aa:	4621      	movge	r1, r4
 80074ac:	4418      	add	r0, r3
}
 80074ae:	bc10      	pop	{r4}
    return mkString(s->data + start, length);
 80074b0:	f7ff be50 	b.w	8007154 <_ZN3pxt8mkStringEPKci>
    return mkString("", 0);
 80074b4:	2100      	movs	r1, #0
 80074b6:	4801      	ldr	r0, [pc, #4]	; (80074bc <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x30>)
 80074b8:	f7ff be4c 	b.w	8007154 <_ZN3pxt8mkStringEPKci>
 80074bc:	0800c88c 	.word	0x0800c88c

080074c0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>:
    if (!s || !searchString)
 80074c0:	b180      	cbz	r0, 80074e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
 80074c2:	b179      	cbz	r1, 80074e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
    if (start < 0 || start + searchString->length > s->length)
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	db0d      	blt.n	80074e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
int indexOf(String s, String searchString, int start) {
 80074c8:	b510      	push	{r4, lr}
    if (start < 0 || start + searchString->length > s->length)
 80074ca:	888b      	ldrh	r3, [r1, #4]
 80074cc:	8884      	ldrh	r4, [r0, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	dc0a      	bgt.n	80074ea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    const char *match = strstr(((const char *)s->data + start), searchString->data);
 80074d4:	1d84      	adds	r4, r0, #6
 80074d6:	18a0      	adds	r0, r4, r2
 80074d8:	3106      	adds	r1, #6
 80074da:	f7fc fbaa 	bl	8003c32 <strstr>
    if (NULL == match)
 80074de:	b120      	cbz	r0, 80074ea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    return match - s->data;
 80074e0:	1b00      	subs	r0, r0, r4
}
 80074e2:	bd10      	pop	{r4, pc}
        return -1;
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074e8:	4770      	bx	lr
        return -1;
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <_ZN7String_8includesEPN3pxt11BoxedStringES2_i>:
int includes(String s, String searchString, int start) {
 80074f0:	b508      	push	{r3, lr}
    return -1 != indexOf(s, searchString, start);
 80074f2:	f7ff ffe5 	bl	80074c0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>
}
 80074f6:	3001      	adds	r0, #1
 80074f8:	bf18      	it	ne
 80074fa:	2001      	movne	r0, #1
 80074fc:	bd08      	pop	{r3, pc}
 80074fe:	bf00      	nop

08007500 <_ZN8Boolean_4bangEi>:
}
 8007500:	fab0 f080 	clz	r0, r0
 8007504:	0940      	lsrs	r0, r0, #5
 8007506:	4770      	bx	lr

08007508 <_ZN3pxt10fromDoubleEd>:
    if (cnv.word1 == 0 && cnv.word0 == 0)
 8007508:	1e0a      	subs	r2, r1, #0
TNumber fromDouble(NUMBER r) {
 800750a:	b538      	push	{r3, r4, r5, lr}
    if (cnv.word1 == 0 && cnv.word0 == 0)
 800750c:	d111      	bne.n	8007532 <_ZN3pxt10fromDoubleEd+0x2a>
 800750e:	b338      	cbz	r0, 8007560 <_ZN3pxt10fromDoubleEd+0x58>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	f7fb fd56 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800751c:	2800      	cmp	r0, #0
 800751e:	d141      	bne.n	80075a4 <_ZN3pxt10fromDoubleEd+0x9c>
    BoxedNumber *p = NEW_GC(BoxedNumber);
 8007520:	200c      	movs	r0, #12
 8007522:	f001 fad9 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 8007526:	b108      	cbz	r0, 800752c <_ZN3pxt10fromDoubleEd+0x24>
 8007528:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <_ZN3pxt10fromDoubleEd+0xa0>)
 800752a:	6003      	str	r3, [r0, #0]
    p->num = r;
 800752c:	e9c0 5401 	strd	r5, r4, [r0, #4]
}
 8007530:	bd38      	pop	{r3, r4, r5, pc}
    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;
 8007532:	f3c2 540a 	ubfx	r4, r2, #20, #11
 8007536:	f2a4 33ff 	subw	r3, r4, #1023	; 0x3ff
    if (ex < 0 || ex > 29) {
 800753a:	2b1d      	cmp	r3, #29
 800753c:	d812      	bhi.n	8007564 <_ZN3pxt10fromDoubleEd+0x5c>
    if (ex <= 20) {
 800753e:	2b14      	cmp	r3, #20
 8007540:	4605      	mov	r5, r0
 8007542:	dc18      	bgt.n	8007576 <_ZN3pxt10fromDoubleEd+0x6e>
        if (cnv.word0)
 8007544:	2800      	cmp	r0, #0
 8007546:	d1e3      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
        if (cnv.word1 << (ex + 12))
 8007548:	f2a4 34f3 	subw	r4, r4, #1011	; 0x3f3
 800754c:	fa12 f404 	lsls.w	r4, r2, r4
 8007550:	d1de      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8007552:	02d0      	lsls	r0, r2, #11
 8007554:	f1c3 031f 	rsb	r3, r3, #31
 8007558:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800755c:	40d8      	lsrs	r0, r3
 800755e:	e01a      	b.n	8007596 <_ZN3pxt10fromDoubleEd+0x8e>
        return TAG_NUMBER(0);
 8007560:	2001      	movs	r0, #1
}
 8007562:	bd38      	pop	{r3, r4, r5, pc}
        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)
 8007564:	2b1e      	cmp	r3, #30
 8007566:	d1d3      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
 8007568:	2800      	cmp	r0, #0
 800756a:	d1d1      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <_ZN3pxt10fromDoubleEd+0xa4>)
 800756e:	429a      	cmp	r2, r3
 8007570:	d1ce      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
            return (TValue)(0x80000001);
 8007572:	480f      	ldr	r0, [pc, #60]	; (80075b0 <_ZN3pxt10fromDoubleEd+0xa8>)
}
 8007574:	bd38      	pop	{r3, r4, r5, pc}
        if (cnv.word0 << (ex - 20))
 8007576:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
 800757a:	fa10 f404 	lsls.w	r4, r0, r4
 800757e:	d1c7      	bne.n	8007510 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8007580:	02d0      	lsls	r0, r2, #11
 8007582:	f1c3 011f 	rsb	r1, r3, #31
 8007586:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
        r |= cnv.word0 >> (32 - (ex - 20));
 800758a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 800758e:	40c8      	lsrs	r0, r1
        r |= cnv.word0 >> (32 - (ex - 20));
 8007590:	fa25 f303 	lsr.w	r3, r5, r3
 8007594:	4318      	orrs	r0, r3
    if (cnv.word1 >> 31)
 8007596:	2a00      	cmp	r2, #0
        return TAG_NUMBER(-r);
 8007598:	bfb8      	it	lt
 800759a:	4240      	neglt	r0, r0
        return TAG_NUMBER(r);
 800759c:	0040      	lsls	r0, r0, #1
 800759e:	f040 0001 	orr.w	r0, r0, #1
}
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
        return TAG_NAN;
 80075a4:	200e      	movs	r0, #14
}
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	0800c260 	.word	0x0800c260
 80075ac:	c1d00000 	.word	0xc1d00000
 80075b0:	80000001 	.word	0x80000001

080075b4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>:
TNumber toNumber(String s) {
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	4607      	mov	r7, r0
 80075b8:	b083      	sub	sp, #12
    NUMBER v = mystrtod(s->data, &endptr);
 80075ba:	1d84      	adds	r4, r0, #6
 80075bc:	4620      	mov	r0, r4
 80075be:	a901      	add	r1, sp, #4
 80075c0:	f7ff feae 	bl	8007320 <_ZN7String_8mystrtodEPKcPPc>
    if (endptr != s->data + s->length)
 80075c4:	88ba      	ldrh	r2, [r7, #4]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	4414      	add	r4, r2
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	d007      	beq.n	80075de <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x2a>
        v = NAN;
 80075ce:	2500      	movs	r5, #0
 80075d0:	4e1e      	ldr	r6, [pc, #120]	; (800764c <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x98>)
    return fromDouble(v);
 80075d2:	4628      	mov	r0, r5
 80075d4:	4631      	mov	r1, r6
 80075d6:	f7ff ff97 	bl	8007508 <_ZN3pxt10fromDoubleEd>
}
 80075da:	b003      	add	sp, #12
 80075dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (v == 0.0 || v == -0.0)
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
 80075e2:	4605      	mov	r5, r0
 80075e4:	460e      	mov	r6, r1
 80075e6:	f7fb fc71 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1f1      	bne.n	80075d2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }
 80075ee:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80075f2:	4628      	mov	r0, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075fa:	4b15      	ldr	r3, [pc, #84]	; (8007650 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 80075fc:	f04f 0701 	mov.w	r7, #1
 8007600:	f7fb fce2 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8007604:	b940      	cbnz	r0, 8007618 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8007606:	4628      	mov	r0, r5
 8007608:	4621      	mov	r1, r4
 800760a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 8007610:	f7fb fcc0 	bl	8002f94 <__wrap___aeabi_dcmpgt>
 8007614:	b900      	cbnz	r0, 8007618 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8007616:	4607      	mov	r7, r0
    else if (!isnormal(v))
 8007618:	f017 0fff 	tst.w	r7, #255	; 0xff
 800761c:	d1d7      	bne.n	80075ce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 800761e:	4628      	mov	r0, r5
 8007620:	4621      	mov	r1, r4
 8007622:	2200      	movs	r2, #0
 8007624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007628:	f04f 0701 	mov.w	r7, #1
 800762c:	f7fb fccc 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8007630:	b940      	cbnz	r0, 8007644 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8007632:	4628      	mov	r0, r5
 8007634:	4621      	mov	r1, r4
 8007636:	2200      	movs	r2, #0
 8007638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800763c:	f7fb fc60 	bl	8002f00 <__wrap___aeabi_dcmplt>
 8007640:	b900      	cbnz	r0, 8007644 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8007642:	4607      	mov	r7, r0
 8007644:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007648:	d0c3      	beq.n	80075d2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
 800764a:	e7c0      	b.n	80075ce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 800764c:	7ff80000 	.word	0x7ff80000
 8007650:	7fefffff 	.word	0x7fefffff

08007654 <_ZN3pxt7fromIntEi.part.7>:
TNumber fromInt(int v) {
 8007654:	b508      	push	{r3, lr}
    return fromDouble(v);
 8007656:	f7fb f81b 	bl	8002690 <__aeabi_i2d>
}
 800765a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 800765e:	f7ff bf53 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007662:	bf00      	nop

08007664 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi>:
    if (s && 0 <= pos && pos < s->length) {
 8007664:	b150      	cbz	r0, 800767c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8007666:	2900      	cmp	r1, #0
 8007668:	db08      	blt.n	800767c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 800766a:	8883      	ldrh	r3, [r0, #4]
 800766c:	428b      	cmp	r3, r1
 800766e:	dd05      	ble.n	800767c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
        return fromInt(s->data[pos]);
 8007670:	4408      	add	r0, r1
 8007672:	7980      	ldrb	r0, [r0, #6]
    return (v << 1) >> 1 == v;
 8007674:	0040      	lsls	r0, r0, #1
        return TAG_NUMBER(v);
 8007676:	f040 0001 	orr.w	r0, r0, #1
 800767a:	4770      	bx	lr
        return TAG_NAN;
 800767c:	200e      	movs	r0, #14
}
 800767e:	4770      	bx	lr

08007680 <_ZN3pxt9fromFloatEf>:
TNumber fromFloat(float r) {
 8007680:	b508      	push	{r3, lr}
    return fromDouble(r);
 8007682:	f7fb f817 	bl	80026b4 <__aeabi_f2d>
}
 8007686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(r);
 800768a:	f7ff bf3d 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 800768e:	bf00      	nop

08007690 <_ZN3pxt7fromIntEi>:
 8007690:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007692:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007696:	d001      	beq.n	800769c <_ZN3pxt7fromIntEi+0xc>
 8007698:	f7ff bfdc 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 800769c:	f043 0001 	orr.w	r0, r3, #1
}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <_ZN3pxt8fromUIntEj>:
    if (v <= 0x3fffffff)
 80076a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
TNumber fromUInt(unsigned v) {
 80076a8:	b508      	push	{r3, lr}
    if (v <= 0x3fffffff)
 80076aa:	d203      	bcs.n	80076b4 <_ZN3pxt8fromUIntEj+0x10>
        return TAG_NUMBER(v);
 80076ac:	0040      	lsls	r0, r0, #1
 80076ae:	f040 0001 	orr.w	r0, r0, #1
}
 80076b2:	bd08      	pop	{r3, pc}
    return fromDouble(v);
 80076b4:	f7fa ffdc 	bl	8002670 <__aeabi_ui2d>
}
 80076b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 80076bc:	f7ff bf24 	b.w	8007508 <_ZN3pxt10fromDoubleEd>

080076c0 <_ZN3pxt8fromBoolEb>:
    if (v)
 80076c0:	2800      	cmp	r0, #0
}
 80076c2:	bf14      	ite	ne
 80076c4:	2042      	movne	r0, #66	; 0x42
 80076c6:	200a      	moveq	r0, #10
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <_ZN5Math_6randomEv>:
TNumber random() {
 80076cc:	b508      	push	{r3, lr}
    return fromDouble(randomDouble());
 80076ce:	f7ff f9e7 	bl	8006aa0 <_ZN5Math_12randomDoubleEv>
}
 80076d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(randomDouble());
 80076d6:	f7ff bf17 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 80076da:	bf00      	nop

080076dc <_ZN5Math_4imulEii>:
}
 80076dc:	fb01 f000 	mul.w	r0, r1, r0
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop

080076e4 <_ZN5Math_4idivEii>:
}
 80076e4:	fb90 f0f1 	sdiv	r0, r0, r1
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop

080076ec <_ZN6Array_2mkEv>:
RefCollection *mk() {
 80076ec:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefCollection);
 80076ee:	200c      	movs	r0, #12
 80076f0:	f001 f9f2 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 80076f4:	4604      	mov	r4, r0
 80076f6:	b108      	cbz	r0, 80076fc <_ZN6Array_2mkEv+0x10>
 80076f8:	f001 fdbe 	bl	8009278 <_ZN3pxt13RefCollectionC1Ev>
}
 80076fc:	4620      	mov	r0, r4
 80076fe:	bd10      	pop	{r4, pc}

08007700 <_ZN6Array_6lengthEPN3pxt13RefCollectionE>:
}
 8007700:	8900      	ldrh	r0, [r0, #8]
 8007702:	4770      	bx	lr

08007704 <_ZN6Array_9setLengthEPN3pxt13RefCollectionEi>:
    static void scan(RefCollection *coll);
    static unsigned gcsize(RefCollection *coll);
    static void print(RefCollection *coll);

    unsigned length() { return head.getLength(); }
    void setLength(unsigned newLength) { head.setLength(newLength); }
 8007704:	3004      	adds	r0, #4
 8007706:	f001 bd27 	b.w	8009158 <_ZN3pxt7Segment9setLengthEj>
 800770a:	bf00      	nop

0800770c <_ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
void push(RefCollection *c, TValue x) {
 800770c:	4603      	mov	r3, r0
    void push(TValue value) { set(length, value); }
 800770e:	460a      	mov	r2, r1
 8007710:	3004      	adds	r0, #4
 8007712:	8919      	ldrh	r1, [r3, #8]
 8007714:	f001 bd00 	b.w	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08007718 <_ZN6Array_3popEPN3pxt13RefCollectionE>:
    return c->head.pop();
 8007718:	3004      	adds	r0, #4
 800771a:	f001 bd2d 	b.w	8009178 <_ZN3pxt7Segment3popEv>
 800771e:	bf00      	nop

08007720 <_ZN6Array_5getAtEPN3pxt13RefCollectionEi>:
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8007720:	8903      	ldrh	r3, [r0, #8]
    return c->head.get(x);
 8007722:	6842      	ldr	r2, [r0, #4]
 8007724:	4299      	cmp	r1, r3
 8007726:	bf34      	ite	cc
 8007728:	f852 0021 	ldrcc.w	r0, [r2, r1, lsl #2]
 800772c:	2000      	movcs	r0, #0
}
 800772e:	4770      	bx	lr

08007730 <_ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.set(x, y);
 8007730:	3004      	adds	r0, #4
 8007732:	f001 bcf1 	b.w	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 8007736:	bf00      	nop

08007738 <_ZN6Array_8removeAtEPN3pxt13RefCollectionEi>:
    return c->head.remove(x);
 8007738:	3004      	adds	r0, #4
 800773a:	f001 bd2b 	b.w	8009194 <_ZN3pxt7Segment6removeEj>
 800773e:	bf00      	nop

08007740 <_ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.insert(x, value);
 8007740:	3004      	adds	r0, #4
 8007742:	f001 bd4b 	b.w	80091dc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>
 8007746:	bf00      	nop

08007748 <_ZN3pxt11programSizeEv>:
    return bytecode[17] * 8;
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <_ZN3pxt11programSizeEv+0xc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 800774e:	00c0      	lsls	r0, r0, #3
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20001034 	.word	0x20001034

08007758 <_ZN3pxt9getConfigEii>:
    cfgData = *(int **)&bytecode[18];
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <_ZN3pxt9getConfigEii+0x34>)
int getConfig(int key, int defl) {
 800775a:	b410      	push	{r4}
    cfgData = *(int **)&bytecode[18];
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        if (cfgData[i] == key)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	4298      	cmp	r0, r3
 8007764:	d010      	beq.n	8007788 <_ZN3pxt9getConfigEii+0x30>
        if (cfgData[i] == 0)
 8007766:	b163      	cbz	r3, 8007782 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <_ZN3pxt9getConfigEii+0x16>
        if (cfgData[i] == 0)
 800776c:	b14a      	cbz	r2, 8007782 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 800776e:	3302      	adds	r3, #2
        if (cfgData[i] == key)
 8007770:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007774:	4282      	cmp	r2, r0
 8007776:	d1f9      	bne.n	800776c <_ZN3pxt9getConfigEii+0x14>
 8007778:	3301      	adds	r3, #1
 800777a:	009b      	lsls	r3, r3, #2
            return cfgData[i + 1];
 800777c:	58e0      	ldr	r0, [r4, r3]
}
 800777e:	bc10      	pop	{r4}
 8007780:	4770      	bx	lr
            return defl;
 8007782:	4608      	mov	r0, r1
}
 8007784:	bc10      	pop	{r4}
 8007786:	4770      	bx	lr
        if (cfgData[i] == key)
 8007788:	2304      	movs	r3, #4
 800778a:	e7f7      	b.n	800777c <_ZN3pxt9getConfigEii+0x24>
 800778c:	20001034 	.word	0x20001034

08007790 <_ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE>:
}
 8007790:	6840      	ldr	r0, [r0, #4]
 8007792:	4770      	bx	lr

08007794 <_ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE>:
    r->v = v;
 8007794:	6041      	str	r1, [r0, #4]
}
 8007796:	4770      	bx	lr

08007798 <_ZN5pxtrt8mklocRefEv>:
RefRefLocal *mklocRef() {
 8007798:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefRefLocal);
 800779a:	2008      	movs	r0, #8
 800779c:	f001 f99c 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 80077a0:	4604      	mov	r4, r0
 80077a2:	b108      	cbz	r0, 80077a8 <_ZN5pxtrt8mklocRefEv+0x10>
 80077a4:	f001 fd70 	bl	8009288 <_ZN3pxt11RefRefLocalC1Ev>
}
 80077a8:	4620      	mov	r0, r4
 80077aa:	bd10      	pop	{r4, pc}

080077ac <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE>:
RefAction *stclo(RefAction *a, int idx, TValue v) {
 80077ac:	b570      	push	{r4, r5, r6, lr}

    RefAction();

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
 80077ae:	1e0c      	subs	r4, r1, #0
 80077b0:	4605      	mov	r5, r0
 80077b2:	4616      	mov	r6, r2
 80077b4:	db0e      	blt.n	80077d4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 80077b6:	8883      	ldrh	r3, [r0, #4]
 80077b8:	429c      	cmp	r4, r3
 80077ba:	da0b      	bge.n	80077d4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 80077bc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    if (!cond)
 80077c0:	68e3      	ldr	r3, [r4, #12]
 80077c2:	b123      	cbz	r3, 80077ce <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x22>
        error(code, subcode);
 80077c4:	210b      	movs	r1, #11
 80077c6:	f240 3086 	movw	r0, #902	; 0x386
 80077ca:	f001 fda3 	bl	8009314 <_ZN3pxt5errorENS_9PXT_PANICEi>
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
        fields[idx] = v;
 80077ce:	60e6      	str	r6, [r4, #12]
}
 80077d0:	4628      	mov	r0, r5
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
        error(code, subcode);
 80077d4:	210a      	movs	r1, #10
 80077d6:	f240 3086 	movw	r0, #902	; 0x386
 80077da:	f001 fd9b 	bl	8009314 <_ZN3pxt5errorENS_9PXT_PANICEi>
 80077de:	e7ed      	b.n	80077bc <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x10>

080077e0 <_ZN5pxtrt5panicEi>:
    target_panic(code);
 80077e0:	f7f8 be8c 	b.w	80004fc <target_panic>

080077e4 <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE>:
    if (!s || s->length == 0)
 80077e4:	b118      	cbz	r0, 80077ee <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE+0xa>
 80077e6:	8883      	ldrh	r3, [r0, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bf08      	it	eq
 80077ec:	2000      	moveq	r0, #0
}
 80077ee:	4770      	bx	lr

080077f0 <_ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE>:
}
 80077f0:	3000      	adds	r0, #0
 80077f2:	bf18      	it	ne
 80077f4:	2001      	movne	r0, #1
 80077f6:	4770      	bx	lr

080077f8 <_ZN5pxtrt5mkMapEv>:
RefMap *mkMap() {
 80077f8:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefMap);
 80077fa:	2014      	movs	r0, #20
 80077fc:	f001 f96c 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 8007800:	4604      	mov	r4, r0
 8007802:	b108      	cbz	r0, 8007808 <_ZN5pxtrt5mkMapEv+0x10>
 8007804:	f001 fd48 	bl	8009298 <_ZN3pxt6RefMapC1Ev>
}
 8007808:	4620      	mov	r0, r4
 800780a:	bd10      	pop	{r4, pc}

0800780c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>:
TValue mapGetByString(RefMap *map, String key) {
 800780c:	b510      	push	{r4, lr}
 800780e:	4604      	mov	r4, r0
    int i = map->findIdx(key);
 8007810:	f001 fd4c 	bl	80092ac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 8007814:	2800      	cmp	r0, #0
 8007816:	db06      	blt.n	8007826 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8007818:	8a23      	ldrh	r3, [r4, #16]
    TValue r = incr(map->values.get(i));
 800781a:	68e2      	ldr	r2, [r4, #12]
 800781c:	4298      	cmp	r0, r3
 800781e:	d202      	bcs.n	8007826 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
 8007820:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
}
 8007824:	bd10      	pop	{r4, pc}
        return 0;
 8007826:	2000      	movs	r0, #0
}
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop

0800782c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE>:
int lookupMapKey(String key) {
 800782c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    auto arr = *(uintptr_t **)&bytecode[22];
 8007830:	4b1f      	ldr	r3, [pc, #124]	; (80078b0 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x84>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8007836:	e9d7 3200 	ldrd	r3, r2, [r7]
 800783a:	4282      	cmp	r2, r0
    auto r = len - 1;
 800783c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    auto len = *arr++;
 8007840:	f107 0704 	add.w	r7, r7, #4
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8007844:	d806      	bhi.n	8007854 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x28>
 8007846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800784a:	3b01      	subs	r3, #1
 800784c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8007850:	4283      	cmp	r3, r0
 8007852:	d21e      	bcs.n	8007892 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x66>
 8007854:	2600      	movs	r6, #0
 8007856:	4680      	mov	r8, r0
    int compareResult = strcmp(a->data, b->data);
 8007858:	f100 0906 	add.w	r9, r0, #6
 800785c:	e003      	b.n	8007866 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    else if (compareResult > 0)
 800785e:	d015      	beq.n	800788c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                r = m - 1;
 8007860:	1e65      	subs	r5, r4, #1
        while (l <= r) {
 8007862:	42ae      	cmp	r6, r5
 8007864:	d80f      	bhi.n	8007886 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5a>
            auto m = (l + r) >> 1;
 8007866:	1974      	adds	r4, r6, r5
 8007868:	0864      	lsrs	r4, r4, #1
            auto cmp = String_::compare((String)arr[m], key);
 800786a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    if (a == b)
 800786e:	4543      	cmp	r3, r8
    int compareResult = strcmp(a->data, b->data);
 8007870:	f103 0006 	add.w	r0, r3, #6
    if (a == b)
 8007874:	d00a      	beq.n	800788c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
    int compareResult = strcmp(a->data, b->data);
 8007876:	4649      	mov	r1, r9
 8007878:	f7fc f998 	bl	8003bac <strcmp>
    if (compareResult < 0)
 800787c:	2800      	cmp	r0, #0
 800787e:	daee      	bge.n	800785e <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x32>
                l = m + 1;
 8007880:	1c66      	adds	r6, r4, #1
        while (l <= r) {
 8007882:	42ae      	cmp	r6, r5
 8007884:	d9ef      	bls.n	8007866 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    return 0;
 8007886:	2000      	movs	r0, #0
}
 8007888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return m;
 800788c:	4620      	mov	r0, r4
}
 800788e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    auto l = 0U;
 8007892:	2300      	movs	r3, #0
            auto m = (l + r) >> 1;
 8007894:	195c      	adds	r4, r3, r5
 8007896:	0864      	lsrs	r4, r4, #1
            if (arr[m] == ikey)
 8007898:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 800789c:	4282      	cmp	r2, r0
 800789e:	d0f5      	beq.n	800788c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                l = m + 1;
 80078a0:	bf34      	ite	cc
 80078a2:	1c63      	addcc	r3, r4, #1
                r = m - 1;
 80078a4:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
        while (l <= r) {
 80078a8:	429d      	cmp	r5, r3
 80078aa:	d2f3      	bcs.n	8007894 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x68>
    return 0;
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7eb      	b.n	8007888 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5c>
 80078b0:	20001034 	.word	0x20001034

080078b4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj>:
    auto arr = *(String **)&bytecode[22];
 80078b4:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj+0x10>)
    auto r = mapGetByString(map, arr[key + 1]);
 80078b6:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 80078b8:	681b      	ldr	r3, [r3, #0]
    auto r = mapGetByString(map, arr[key + 1]);
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80078c0:	f7ff bfa4 	b.w	800780c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>
 80078c4:	20001034 	.word	0x20001034

080078c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>:
void mapSetByString(RefMap *map, String key, TValue val) {
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	4616      	mov	r6, r2
    int i = map->findIdx(key);
 80078d0:	f001 fcec 	bl	80092ac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 80078d4:	1e01      	subs	r1, r0, #0
 80078d6:	f104 050c 	add.w	r5, r4, #12
 80078da:	db05      	blt.n	80078e8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE+0x20>
        map->values.set(i, val);
 80078dc:	4632      	mov	r2, r6
 80078de:	4628      	mov	r0, r5
}
 80078e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        map->values.set(i, val);
 80078e4:	f001 bc18 	b.w	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
    void push(TValue value) { set(length, value); }
 80078e8:	463a      	mov	r2, r7
 80078ea:	8921      	ldrh	r1, [r4, #8]
 80078ec:	1d20      	adds	r0, r4, #4
 80078ee:	f001 fc13 	bl	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 80078f2:	4632      	mov	r2, r6
 80078f4:	8a21      	ldrh	r1, [r4, #16]
 80078f6:	4628      	mov	r0, r5
}
 80078f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078fc:	f001 bc0c 	b.w	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08007900 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE>:
    auto arr = *(String **)&bytecode[22];
 8007900:	4b03      	ldr	r3, [pc, #12]	; (8007910 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE+0x10>)
    mapSetByString(map, arr[key + 1], val);
 8007902:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 8007904:	681b      	ldr	r3, [r3, #0]
    mapSetByString(map, arr[key + 1], val);
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800790c:	f7ff bfdc 	b.w	80078c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>
 8007910:	20001034 	.word	0x20001034

08007914 <_ZN5pxtrt13getGlobalsPtrEv>:
    return globals;
 8007914:	4b01      	ldr	r3, [pc, #4]	; (800791c <_ZN5pxtrt13getGlobalsPtrEv+0x8>)
}
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20001030 	.word	0x20001030

08007920 <_ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE>:
}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop

08007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8007924:	0782      	lsls	r2, r0, #30
ValType valType(TValue v) {
 8007926:	b508      	push	{r3, lr}
 8007928:	d108      	bne.n	800793c <_ZN3pxt7valTypeEPNS_12TValueStructE+0x18>
 800792a:	b130      	cbz	r0, 800793a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 800792c:	6803      	ldr	r3, [r0, #0]
 800792e:	f023 0301 	bic.w	r3, r3, #1
        if (vt->magic == VTABLE_MAGIC)
 8007932:	78da      	ldrb	r2, [r3, #3]
 8007934:	2af9      	cmp	r2, #249	; 0xf9
 8007936:	d113      	bne.n	8007960 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
            return vt->objectType;
 8007938:	7898      	ldrb	r0, [r3, #2]
}
 800793a:	bd08      	pop	{r3, pc}
        if (!v)
 800793c:	2800      	cmp	r0, #0
 800793e:	d0fc      	beq.n	800793a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
        if (isNumber(v) || v == TAG_NAN)
 8007940:	07c3      	lsls	r3, r0, #31
 8007942:	d40f      	bmi.n	8007964 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
 8007944:	280e      	cmp	r0, #14
 8007946:	d00d      	beq.n	8007964 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
        if (v == TAG_TRUE || v == TAG_FALSE)
 8007948:	2842      	cmp	r0, #66	; 0x42
 800794a:	d00d      	beq.n	8007968 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
 800794c:	280a      	cmp	r0, #10
 800794e:	d00b      	beq.n	8007968 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
        else if (v == TAG_NULL)
 8007950:	2806      	cmp	r0, #6
 8007952:	d005      	beq.n	8007960 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
    target_panic(800 + subcode);
 8007954:	f240 3021 	movw	r0, #801	; 0x321
 8007958:	f7f8 fdd0 	bl	80004fc <target_panic>
 800795c:	2004      	movs	r0, #4
}
 800795e:	bd08      	pop	{r3, pc}
            return ValType::Object;
 8007960:	2004      	movs	r0, #4
}
 8007962:	bd08      	pop	{r3, pc}
            return ValType::Number;
 8007964:	2002      	movs	r0, #2
}
 8007966:	bd08      	pop	{r3, pc}
            return ValType::Boolean;
 8007968:	2001      	movs	r0, #1
}
 800796a:	bd08      	pop	{r3, pc}

0800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>:
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800796c:	280e      	cmp	r0, #14
 800796e:	d026      	beq.n	80079be <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x52>
NUMBER toDouble(TNumber v) {
 8007970:	b510      	push	{r4, lr}
 8007972:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 8007974:	b968      	cbnz	r0, 8007992 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x26>
 8007976:	e018      	b.n	80079aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    ValType t = valType(v);
 8007978:	f7ff ffd4 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::Number) {
 800797c:	2802      	cmp	r0, #2
 800797e:	d019      	beq.n	80079b4 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x48>
    } else if (t == ValType::String) {
 8007980:	2803      	cmp	r0, #3
 8007982:	d112      	bne.n	80079aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
        auto tmp = String_::toNumber((String)v);
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff fe15 	bl	80075b4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800798a:	280e      	cmp	r0, #14
        auto tmp = String_::toNumber((String)v);
 800798c:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800798e:	d00c      	beq.n	80079aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
 8007990:	b15c      	cbz	r4, 80079aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    return ((intptr_t)v & 3) || !v;
 8007992:	07a3      	lsls	r3, r4, #30
    return (int)toUInt(v);
 8007994:	4620      	mov	r0, r4
 8007996:	d0ef      	beq.n	8007978 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0xc>
 8007998:	f000 f818 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        return toInt(v);
 800799c:	f7fa fe78 	bl	8002690 <__aeabi_i2d>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
}
 80079a4:	4610      	mov	r0, r2
 80079a6:	4619      	mov	r1, r3
 80079a8:	bd10      	pop	{r4, pc}
        return NAN;
 80079aa:	2200      	movs	r2, #0
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	bd10      	pop	{r4, pc}
        return p->num;
 80079b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
}
 80079b8:	4610      	mov	r0, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	bd10      	pop	{r4, pc}
        return NAN;
 80079be:	2200      	movs	r2, #0
 80079c0:	4b01      	ldr	r3, [pc, #4]	; (80079c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80079c2:	4610      	mov	r0, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	4770      	bx	lr
 80079c8:	7ff80000 	.word	0x7ff80000

080079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>:
    if (isNumber(v))
 80079cc:	07c1      	lsls	r1, r0, #31
unsigned toUInt(TNumber v) {
 80079ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d0:	4603      	mov	r3, r0
    if (isNumber(v))
 80079d2:	d44f      	bmi.n	8007a74 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa8>
    if (isSpecial(v)) {
 80079d4:	0782      	lsls	r2, r0, #30
 80079d6:	d504      	bpl.n	80079e2 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x16>
        if ((intptr_t)v >> 6)
 80079d8:	099b      	lsrs	r3, r3, #6
 80079da:	bf14      	ite	ne
 80079dc:	2001      	movne	r0, #1
 80079de:	2000      	moveq	r0, #0
}
 80079e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!v)
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d044      	beq.n	8007a70 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    NUMBER num = toDouble(v);
 80079e6:	f7ff ffc1 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80079ea:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80079ee:	460e      	mov	r6, r1
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f4:	4629      	mov	r1, r5
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	f04f 0701 	mov.w	r7, #1
 80079fe:	f7fb fae3 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8007a02:	b940      	cbnz	r0, 8007a16 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a0c:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 8007a0e:	f7fb fac1 	bl	8002f94 <__wrap___aeabi_dcmpgt>
 8007a12:	b900      	cbnz	r0, 8007a16 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8007a14:	4607      	mov	r7, r0
    if (!isnormal(num))
 8007a16:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007a1a:	d129      	bne.n	8007a70 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a26:	f04f 0701 	mov.w	r7, #1
 8007a2a:	f7fb facd 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8007a2e:	b940      	cbnz	r0, 8007a42 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a3a:	f7fb fa61 	bl	8002f00 <__wrap___aeabi_dcmplt>
 8007a3e:	b900      	cbnz	r0, 8007a42 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8007a40:	4607      	mov	r7, r0
 8007a42:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007a46:	d113      	bne.n	8007a70 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    double rem = fmod(trunc(num), 4294967296.0);
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	f7fb feb0 	bl	80037b0 <trunc>
 8007a50:	2200      	movs	r2, #0
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8007a54:	f7fb ff7a 	bl	800394c <fmod>
    if (rem < 0.0)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2300      	movs	r3, #0
    double rem = fmod(trunc(num), 4294967296.0);
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	460d      	mov	r5, r1
    if (rem < 0.0)
 8007a60:	f7fb fa4e 	bl	8002f00 <__wrap___aeabi_dcmplt>
 8007a64:	b940      	cbnz	r0, 8007a78 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xac>
    return (unsigned)rem;
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7fb fadd 	bl	8003028 <__wrap___aeabi_d2uiz>
}
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8007a70:	2000      	movs	r0, #0
}
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (intptr_t)n >> 1;
 8007a74:	1040      	asrs	r0, r0, #1
 8007a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rem += 4294967296.0;
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8007a80:	f7fb f9f4 	bl	8002e6c <__wrap___aeabi_dadd>
 8007a84:	4604      	mov	r4, r0
 8007a86:	460d      	mov	r5, r1
 8007a88:	e7ed      	b.n	8007a66 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x9a>
 8007a8a:	bf00      	nop
 8007a8c:	7fefffff 	.word	0x7fefffff
 8007a90:	41f00000 	.word	0x41f00000

08007a94 <_ZN3pxt5toIntEPNS_12TValueStructE>:
    return (int)toUInt(v);
 8007a94:	f7ff bf9a 	b.w	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>

08007a98 <_ZN6numops4lslsEPN3pxt12TValueStructES2_>:
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8007a9c:	f7ff ff96 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff ff92 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8007aa8:	fa04 f000 	lsl.w	r0, r4, r0
    return (v << 1) >> 1 == v;
 8007aac:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007aae:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007ab2:	d003      	beq.n	8007abc <_ZN6numops4lslsEPN3pxt12TValueStructES2_+0x24>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8007ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab8:	f7ff bdcc 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007abc:	f043 0001 	orr.w	r0, r3, #1
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop

08007ac4 <_ZN6numops4asrsEPN3pxt12TValueStructES2_>:
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8007ac8:	f7ff ff80 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007acc:	4604      	mov	r4, r0
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7ff ff7c 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007ad4:	fa44 f000 	asr.w	r0, r4, r0
 8007ad8:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007ada:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007ade:	d003      	beq.n	8007ae8 <_ZN6numops4asrsEPN3pxt12TValueStructES2_+0x24>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae4:	f7ff bdb6 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007ae8:	f043 0001 	orr.w	r0, r3, #1
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	bf00      	nop

08007af0 <_ZN6numops4eorsEPN3pxt12TValueStructES2_>:
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8007af4:	f7ff ff6a 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007af8:	4604      	mov	r4, r0
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff ff66 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007b00:	4060      	eors	r0, r4
 8007b02:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007b04:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007b08:	d003      	beq.n	8007b12 <_ZN6numops4eorsEPN3pxt12TValueStructES2_+0x22>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b0e:	f7ff bda1 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007b12:	f043 0001 	orr.w	r0, r3, #1
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007b16:	bd38      	pop	{r3, r4, r5, pc}

08007b18 <_ZN6numops4orrsEPN3pxt12TValueStructES2_>:
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8007b1c:	f7ff ff56 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007b20:	4604      	mov	r4, r0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7ff ff52 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007b28:	4320      	orrs	r0, r4
 8007b2a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007b2c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007b30:	d003      	beq.n	8007b3a <_ZN6numops4orrsEPN3pxt12TValueStructES2_+0x22>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b36:	f7ff bd8d 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007b3a:	f043 0001 	orr.w	r0, r3, #1
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}

08007b40 <_ZN6numops4bnotEPN3pxt12TValueStructE>:
TNumber bnot(TNumber a) {
 8007b40:	b508      	push	{r3, lr}
    return (int)toUInt(v);
 8007b42:	f7ff ff43 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    return fromInt(~toInt(a));
 8007b46:	43c0      	mvns	r0, r0
 8007b48:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007b4a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007b4e:	d003      	beq.n	8007b58 <_ZN6numops4bnotEPN3pxt12TValueStructE+0x18>
}
 8007b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b54:	f7ff bd7e 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007b58:	f043 0001 	orr.w	r0, r3, #1
}
 8007b5c:	bd08      	pop	{r3, pc}
 8007b5e:	bf00      	nop

08007b60 <_ZN6numops4andsEPN3pxt12TValueStructES2_>:
TNumber ands(TNumber a, TNumber b) {
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8007b64:	f7ff ff32 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff ff2e 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    BITOP(&)
 8007b70:	4020      	ands	r0, r4
 8007b72:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007b74:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007b78:	d003      	beq.n	8007b82 <_ZN6numops4andsEPN3pxt12TValueStructES2_+0x22>
}
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f7ff bd69 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007b82:	f043 0001 	orr.w	r0, r3, #1
}
 8007b86:	bd38      	pop	{r3, r4, r5, pc}

08007b88 <_ZN6numops4lsrsEPN3pxt12TValueStructES2_>:
TNumber lsrs(TNumber a, TNumber b) {
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	460d      	mov	r5, r1
    return fromUInt(toUInt(a) >> toUInt(b));
 8007b8c:	f7ff ff1e 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007b90:	4604      	mov	r4, r0
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7ff ff1a 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007b98:	fa24 f000 	lsr.w	r0, r4, r0
    if (v <= 0x3fffffff)
 8007b9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007ba0:	d203      	bcs.n	8007baa <_ZN6numops4lsrsEPN3pxt12TValueStructES2_+0x22>
        return TAG_NUMBER(v);
 8007ba2:	0040      	lsls	r0, r0, #1
 8007ba4:	f040 0001 	orr.w	r0, r0, #1
}
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
    return fromDouble(v);
 8007baa:	f7fa fd61 	bl	8002670 <__aeabi_ui2d>
}
 8007bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return fromDouble(v);
 8007bb2:	f7ff bca9 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007bb6:	bf00      	nop

08007bb8 <_ZN3pxt7toFloatEPNS_12TValueStructE>:
float toFloat(TNumber v) {
 8007bb8:	b508      	push	{r3, lr}
    return (float)toDouble(v);
 8007bba:	f7ff fed7 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007bbe:	f7fa fdd1 	bl	8002764 <__aeabi_d2f>
}
 8007bc2:	bd08      	pop	{r3, pc}

08007bc4 <_ZN6numops4addsEPN3pxt12TValueStructES2_>:
TNumber adds(TNumber a, TNumber b){NUMOP(+)}
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	f7ff fed0 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4630      	mov	r0, r6
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	f7ff fecb 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7fb f945 	bl	8002e6c <__wrap___aeabi_dadd>
 8007be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007be6:	f7ff bc8f 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007bea:	bf00      	nop

08007bec <_ZN6numops4subsEPN3pxt12TValueStructES2_>:
TNumber subs(TNumber a, TNumber b){NUMOP(-)}
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460e      	mov	r6, r1
 8007bf0:	f7ff febc 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	f7ff feb7 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4620      	mov	r0, r4
 8007c04:	4629      	mov	r1, r5
 8007c06:	f7fb f949 	bl	8002e9c <__wrap___aeabi_dsub>
 8007c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c0e:	f7ff bc7b 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007c12:	bf00      	nop

08007c14 <_ZN6numops4mulsEPN3pxt12TValueStructES2_>:
    return (intptr_t)a & (intptr_t)b & 1;
 8007c14:	f001 0301 	and.w	r3, r1, #1
    if (bothNumbers(a, b)) {
 8007c18:	4218      	tst	r0, r3
 8007c1a:	d003      	beq.n	8007c24 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 8007c1c:	13c3      	asrs	r3, r0, #15
 8007c1e:	3301      	adds	r3, #1
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d912      	bls.n	8007c4a <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x36>
TNumber muls(TNumber a, TNumber b) {
 8007c24:	b5d0      	push	{r4, r6, r7, lr}
 8007c26:	460c      	mov	r4, r1
    NUMOP(*)
 8007c28:	f7ff fea0 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	460f      	mov	r7, r1
 8007c32:	f7ff fe9b 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7fb f8fd 	bl	8002e3c <__wrap___aeabi_dmul>
}
 8007c42:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    NUMOP(*)
 8007c46:	f7ff bc5f 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 8007c4a:	13cb      	asrs	r3, r1, #15
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d8e8      	bhi.n	8007c24 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
            return fromInt((aa >> 1) * (bb >> 1));
 8007c52:	1043      	asrs	r3, r0, #1
 8007c54:	1048      	asrs	r0, r1, #1
 8007c56:	fb00 f003 	mul.w	r0, r0, r3
    return (v << 1) >> 1 == v;
 8007c5a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007c5c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007c60:	d102      	bne.n	8007c68 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x54>
        return TAG_NUMBER(v);
 8007c62:	f043 0001 	orr.w	r0, r3, #1
}
 8007c66:	4770      	bx	lr
 8007c68:	f7ff bcf4 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>

08007c6c <_ZN6numops3divEPN3pxt12TValueStructES2_>:
TNumber div(TNumber a, TNumber b){NUMOP(/)}
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	460e      	mov	r6, r1
 8007c70:	f7ff fe7c 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007c74:	4604      	mov	r4, r0
 8007c76:	4630      	mov	r0, r6
 8007c78:	460d      	mov	r5, r1
 8007c7a:	f7ff fe77 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7fb f8c1 	bl	8002e0c <__wrap___aeabi_ddiv>
 8007c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c8e:	f7ff bc3b 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007c92:	bf00      	nop

08007c94 <_ZN6numops3modEPN3pxt12TValueStructES2_>:
TNumber mod(TNumber a, TNumber b) {
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	460c      	mov	r4, r1
    if (isNumber(a) && isNumber(b) && numValue(b))
 8007c98:	07c1      	lsls	r1, r0, #31
TNumber mod(TNumber a, TNumber b) {
 8007c9a:	4603      	mov	r3, r0
    if (isNumber(a) && isNumber(b) && numValue(b))
 8007c9c:	d503      	bpl.n	8007ca6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 8007c9e:	07e2      	lsls	r2, r4, #31
 8007ca0:	d501      	bpl.n	8007ca6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 8007ca2:	0862      	lsrs	r2, r4, #1
 8007ca4:	d111      	bne.n	8007cca <_ZN6numops3modEPN3pxt12TValueStructES2_+0x36>
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fe60 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007cac:	4606      	mov	r6, r0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	f7ff fe5b 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4602      	mov	r2, r0
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7fb fe45 	bl	800394c <fmod>
}
 8007cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 8007cc6:	f7ff bc1f 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
    return (int)toUInt(v);
 8007cca:	f7ff fe7f 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff fe7b 	bl	80079cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        BITOP(%)
 8007cd6:	fb95 f3f0 	sdiv	r3, r5, r0
 8007cda:	fb03 5010 	mls	r0, r3, r0, r5
 8007cde:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007ce0:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007ce4:	d003      	beq.n	8007cee <_ZN6numops3modEPN3pxt12TValueStructES2_+0x5a>
}
 8007ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cea:	f7ff bcb3 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007cee:	f043 0001 	orr.w	r0, r3, #1
}
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cf4 <_ZN5Math_3powEPN3pxt12TValueStructES2_>:
TNumber pow(TNumber x, TNumber y) {
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	460e      	mov	r6, r1
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8007cf8:	f7ff fe38 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	460d      	mov	r5, r1
 8007d02:	f7ff fe33 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7fb f9f9 	bl	8003104 <pow>
}
 8007d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8007d16:	f7ff bbf7 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007d1a:	bf00      	nop

08007d1c <_ZN5Math_5atan2EPN3pxt12TValueStructES2_>:
TNumber atan2(TNumber y, TNumber x) {
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	460e      	mov	r6, r1
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 8007d20:	f7ff fe24 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007d24:	4604      	mov	r4, r0
 8007d26:	4630      	mov	r0, r6
 8007d28:	460d      	mov	r5, r1
 8007d2a:	f7ff fe1f 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4620      	mov	r0, r4
 8007d34:	4629      	mov	r1, r5
 8007d36:	f7fb fa61 	bl	80031fc <atan2>
}
 8007d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 8007d3e:	f7ff bbe3 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007d42:	bf00      	nop

08007d44 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_>:
    if (isNumber(min) && isNumber(max)) {
 8007d44:	07c2      	lsls	r2, r0, #31
TNumber randomRange(TNumber min, TNumber max) {
 8007d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4a:	460c      	mov	r4, r1
    if (isNumber(min) && isNumber(max)) {
 8007d4c:	d511      	bpl.n	8007d72 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
 8007d4e:	07cb      	lsls	r3, r1, #31
 8007d50:	d50f      	bpl.n	8007d72 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
    return (intptr_t)n >> 1;
 8007d52:	1040      	asrs	r0, r0, #1
 8007d54:	104d      	asrs	r5, r1, #1
        if (mini > maxi) {
 8007d56:	4285      	cmp	r5, r0
 8007d58:	da44      	bge.n	8007de4 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa0>
            return fromInt(mini + getRandom(maxi - mini));
 8007d5a:	1b40      	subs	r0, r0, r5
 8007d5c:	f7ff fa42 	bl	80071e4 <_ZN3pxt9getRandomEj>
 8007d60:	4428      	add	r0, r5
    return (v << 1) >> 1 == v;
 8007d62:	0044      	lsls	r4, r0, #1
    if (canBeTagged(v))
 8007d64:	ebb0 0f64 	cmp.w	r0, r4, asr #1
 8007d68:	d03d      	beq.n	8007de6 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa2>
}
 8007d6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6e:	f7ff bc71 	b.w	8007654 <_ZN3pxt7fromIntEi.part.7>
        auto mind = toDouble(min);
 8007d72:	f7ff fdfb 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007d76:	4606      	mov	r6, r0
        auto maxd = toDouble(max);
 8007d78:	4620      	mov	r0, r4
        auto mind = toDouble(min);
 8007d7a:	460f      	mov	r7, r1
        auto maxd = toDouble(max);
 8007d7c:	f7ff fdf6 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
        if (mind > maxd) {
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7fb f902 	bl	8002f94 <__wrap___aeabi_dcmpgt>
 8007d90:	b990      	cbnz	r0, 8007db8 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x74>
        if (maxd == mind)
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7fb f897 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 8007d9e:	b128      	cbz	r0, 8007dac <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x68>
            return fromDouble(mind);
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
}
 8007da4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind);
 8007da8:	f7ff bbae 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007dac:	4622      	mov	r2, r4
 8007dae:	462b      	mov	r3, r5
        auto mind = toDouble(min);
 8007db0:	4634      	mov	r4, r6
 8007db2:	463d      	mov	r5, r7
        auto maxd = toDouble(max);
 8007db4:	4616      	mov	r6, r2
 8007db6:	461f      	mov	r7, r3
            return fromDouble(mind + randomDouble() * (maxd - mind));
 8007db8:	f7fe fe72 	bl	8006aa0 <_ZN5Math_12randomDoubleEv>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7fb f868 	bl	8002e9c <__wrap___aeabi_dsub>
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	f7fb f834 	bl	8002e3c <__wrap___aeabi_dmul>
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	f7fb f848 	bl	8002e6c <__wrap___aeabi_dadd>
}
 8007ddc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind + randomDouble() * (maxd - mind));
 8007de0:	f7ff bb92 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
        if (maxi == mini)
 8007de4:	d103      	bne.n	8007dee <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xaa>
        return TAG_NUMBER(v);
 8007de6:	f044 0001 	orr.w	r0, r4, #1
}
 8007dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dee:	462b      	mov	r3, r5
 8007df0:	4605      	mov	r5, r0
 8007df2:	4618      	mov	r0, r3
 8007df4:	e7b1      	b.n	8007d5a <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x16>
 8007df6:	bf00      	nop

08007df8 <_ZN5Math_3logEPN3pxt12TValueStructE>:
TNumber log(TNumber x){SINGLE(log)}
 8007df8:	b508      	push	{r3, lr}
 8007dfa:	f7ff fdb7 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007dfe:	f7fb f93d 	bl	800307c <log>
 8007e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e06:	f7ff bb7f 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e0a:	bf00      	nop

08007e0c <_ZN5Math_5log10EPN3pxt12TValueStructE>:
TNumber log10(TNumber x){SINGLE(log10)}
 8007e0c:	b508      	push	{r3, lr}
 8007e0e:	f7ff fdad 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e12:	f7fb f963 	bl	80030dc <log10>
 8007e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e1a:	f7ff bb75 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e1e:	bf00      	nop

08007e20 <_ZN5Math_3tanEPN3pxt12TValueStructE>:
TNumber tan(TNumber x){SINGLE(tan)}
 8007e20:	b508      	push	{r3, lr}
 8007e22:	f7ff fda3 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e26:	f7fb f9db 	bl	80031e0 <tan>
 8007e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e2e:	f7ff bb6b 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e32:	bf00      	nop

08007e34 <_ZN5Math_3sinEPN3pxt12TValueStructE>:
TNumber sin(TNumber x){SINGLE(sin)}
 8007e34:	b508      	push	{r3, lr}
 8007e36:	f7ff fd99 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e3a:	f7fb f9a9 	bl	8003190 <sin>
 8007e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e42:	f7ff bb61 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e46:	bf00      	nop

08007e48 <_ZN5Math_3cosEPN3pxt12TValueStructE>:
TNumber cos(TNumber x){SINGLE(cos)}
 8007e48:	b508      	push	{r3, lr}
 8007e4a:	f7ff fd8f 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e4e:	f7fb f9ad 	bl	80031ac <cos>
 8007e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e56:	f7ff bb57 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e5a:	bf00      	nop

08007e5c <_ZN5Math_4atanEPN3pxt12TValueStructE>:
TNumber atan(TNumber x){SINGLE(atan)}
 8007e5c:	b508      	push	{r3, lr}
 8007e5e:	f7ff fd85 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e62:	f7fb f9f5 	bl	8003250 <atan>
 8007e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e6a:	f7ff bb4d 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e6e:	bf00      	nop

08007e70 <_ZN5Math_4asinEPN3pxt12TValueStructE>:
TNumber asin(TNumber x){SINGLE(asin)}
 8007e70:	b508      	push	{r3, lr}
 8007e72:	f7ff fd7b 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e76:	f7fb fa43 	bl	8003300 <asin>
 8007e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e7e:	f7ff bb43 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e82:	bf00      	nop

08007e84 <_ZN5Math_4acosEPN3pxt12TValueStructE>:
TNumber acos(TNumber x){SINGLE(acos)}
 8007e84:	b508      	push	{r3, lr}
 8007e86:	f7ff fd71 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e8a:	f7fa ff59 	bl	8002d40 <acos>
 8007e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e92:	f7ff bb39 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007e96:	bf00      	nop

08007e98 <_ZN5Math_4sqrtEPN3pxt12TValueStructE>:
TNumber sqrt(TNumber x){SINGLE(sqrt)}
 8007e98:	b508      	push	{r3, lr}
 8007e9a:	f7ff fd67 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007e9e:	f7fb f8df 	bl	8003060 <sqrt>
 8007ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ea6:	f7ff bb2f 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007eaa:	bf00      	nop

08007eac <_ZN5Math_5floorEPN3pxt12TValueStructE>:
TNumber floor(TNumber x){SINGLE(floor)}
 8007eac:	b508      	push	{r3, lr}
 8007eae:	f7ff fd5d 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007eb2:	f7fb fcc3 	bl	800383c <floor>
 8007eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007eba:	f7ff bb25 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007ebe:	bf00      	nop

08007ec0 <_ZN5Math_4ceilEPN3pxt12TValueStructE>:
TNumber ceil(TNumber x){SINGLE(ceil)}
 8007ec0:	b508      	push	{r3, lr}
 8007ec2:	f7ff fd53 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007ec6:	f7fb fcfd 	bl	80038c4 <ceil>
 8007eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ece:	f7ff bb1b 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007ed2:	bf00      	nop

08007ed4 <_ZN5Math_5truncEPN3pxt12TValueStructE>:
TNumber trunc(TNumber x){SINGLE(trunc)}
 8007ed4:	b508      	push	{r3, lr}
 8007ed6:	f7ff fd49 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007eda:	f7fb fc69 	bl	80037b0 <trunc>
 8007ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ee2:	f7ff bb11 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007ee6:	bf00      	nop

08007ee8 <_ZN5Math_5roundEPN3pxt12TValueStructE>:
TNumber round(TNumber x) {
 8007ee8:	b508      	push	{r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 8007eea:	f7ff fd3f 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <_ZN5Math_5roundEPN3pxt12TValueStructE+0x1c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f7fa ffbb 	bl	8002e6c <__wrap___aeabi_dadd>
 8007ef6:	f7fb fca1 	bl	800383c <floor>
}
 8007efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 8007efe:	f7ff bb03 	b.w	8007508 <_ZN3pxt10fromDoubleEd>
 8007f02:	bf00      	nop
 8007f04:	3fe00000 	.word	0x3fe00000

08007f08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8007f08:	280e      	cmp	r0, #14
 8007f0a:	d00b      	beq.n	8007f24 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
 8007f0c:	290e      	cmp	r1, #14
 8007f0e:	d009      	beq.n	8007f24 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
    if (a == b)
 8007f10:	4288      	cmp	r0, r1
bool eqq_bool(TValue a, TValue b) {
 8007f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f14:	4604      	mov	r4, r0
    if (a == b)
 8007f16:	d007      	beq.n	8007f28 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x20>
    return (intptr_t)a & (intptr_t)b & 1;
 8007f18:	f001 0201 	and.w	r2, r1, #1
    if (bothNumbers(a, b))
 8007f1c:	4210      	tst	r0, r2
 8007f1e:	d005      	beq.n	8007f2c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x24>
        return false;
 8007f20:	2000      	movs	r0, #0
}
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8007f24:	2000      	movs	r0, #0
}
 8007f26:	4770      	bx	lr
        return true;
 8007f28:	2001      	movs	r0, #1
}
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	460d      	mov	r5, r1
    ValType ta = valType(a);
 8007f2e:	f7ff fcf9 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8007f32:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7ff fcf5 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta != tb)
 8007f3a:	4286      	cmp	r6, r0
 8007f3c:	d1f0      	bne.n	8007f20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if ((aa | bb) & 3)
 8007f3e:	ea44 0305 	orr.w	r3, r4, r5
 8007f42:	079b      	lsls	r3, r3, #30
 8007f44:	d1ec      	bne.n	8007f20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if (ta == ValType::String)
 8007f46:	2e03      	cmp	r6, #3
 8007f48:	d015      	beq.n	8007f76 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6e>
    else if (ta == ValType::Number)
 8007f4a:	2e02      	cmp	r6, #2
 8007f4c:	d1e8      	bne.n	8007f20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
        return toDouble(a) == toDouble(b);
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff fd0c 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007f54:	4606      	mov	r6, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	460f      	mov	r7, r1
 8007f5a:	f7ff fd07 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4602      	mov	r2, r0
 8007f62:	4639      	mov	r1, r7
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7fa ffb1 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 8007f6a:	f04f 0301 	mov.w	r3, #1
 8007f6e:	b900      	cbnz	r0, 8007f72 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6a>
 8007f70:	4603      	mov	r3, r0
 8007f72:	b2d8      	uxtb	r0, r3
}
 8007f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int compareResult = strcmp(a->data, b->data);
 8007f76:	1da9      	adds	r1, r5, #6
 8007f78:	1da0      	adds	r0, r4, #6
 8007f7a:	f7fb fe17 	bl	8003bac <strcmp>
 8007f7e:	fab0 f080 	clz	r0, r0
 8007f82:	0940      	lsrs	r0, r0, #5
}
 8007f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f86:	bf00      	nop

08007f88 <_ZN6numops3eqqEPN3pxt12TValueStructES2_>:
TNumber eqq(TNumber a, TNumber b) {
 8007f88:	b508      	push	{r3, lr}
    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8007f8a:	f7ff ffbd 	bl	8007f08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 8007f8e:	2800      	cmp	r0, #0
}
 8007f90:	bf14      	ite	ne
 8007f92:	2042      	movne	r0, #66	; 0x42
 8007f94:	200a      	moveq	r0, #10
 8007f96:	bd08      	pop	{r3, pc}

08007f98 <_ZN6numops4neqqEPN3pxt12TValueStructES2_>:
TNumber neqq(TNumber a, TNumber b) {
 8007f98:	b508      	push	{r3, lr}
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8007f9a:	f7ff ffb5 	bl	8007f08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 8007f9e:	2800      	cmp	r0, #0
}
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2042      	moveq	r0, #66	; 0x42
 8007fa4:	200a      	movne	r0, #10
 8007fa6:	bd08      	pop	{r3, pc}

08007fa8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8007fa8:	280e      	cmp	r0, #14
 8007faa:	d01a      	beq.n	8007fe2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3a>
 8007fac:	290e      	cmp	r1, #14
bool eq_bool(TValue a, TValue b) {
 8007fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb0:	460c      	mov	r4, r1
    if (a == TAG_NAN || b == TAG_NAN)
 8007fb2:	d014      	beq.n	8007fde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 8007fb4:	2806      	cmp	r0, #6
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	d015      	beq.n	8007fe6 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3e>
    if (v == TAG_TRUE)
 8007fba:	2842      	cmp	r0, #66	; 0x42
 8007fbc:	d03f      	beq.n	800803e <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x96>
    if (v == TAG_FALSE)
 8007fbe:	280a      	cmp	r0, #10
 8007fc0:	d01c      	beq.n	8007ffc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x54>
    if (v == TAG_NULL)
 8007fc2:	2906      	cmp	r1, #6
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f000 8085 	beq.w	80080d4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x12c>
    if (v == TAG_TRUE)
 8007fca:	2c42      	cmp	r4, #66	; 0x42
 8007fcc:	d011      	beq.n	8007ff2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4a>
    if (v == TAG_FALSE)
 8007fce:	2c0a      	cmp	r4, #10
 8007fd0:	d037      	beq.n	8008042 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9a>
    if (eqFixup(a) == eqFixup(b))
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d010      	beq.n	8007ff8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
 8007fd6:	f004 0301 	and.w	r3, r4, #1
    if (bothNumbers(a, b))
 8007fda:	421d      	tst	r5, r3
 8007fdc:	d011      	beq.n	8008002 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return false;
 8007fde:	2000      	movs	r0, #0
}
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8007fe2:	2000      	movs	r0, #0
}
 8007fe4:	4770      	bx	lr
    if (v == TAG_NULL)
 8007fe6:	2906      	cmp	r1, #6
 8007fe8:	d006      	beq.n	8007ff8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    if (v == TAG_TRUE)
 8007fea:	2c42      	cmp	r4, #66	; 0x42
        return TAG_UNDEFINED;
 8007fec:	f04f 0300 	mov.w	r3, #0
    if (v == TAG_TRUE)
 8007ff0:	d1ed      	bne.n	8007fce <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x26>
        return TAG_NUMBER(1);
 8007ff2:	2203      	movs	r2, #3
    if (eqFixup(a) == eqFixup(b))
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d104      	bne.n	8008002 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return true;
 8007ff8:	2001      	movs	r0, #1
}
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(0);
 8007ffc:	2301      	movs	r3, #1
    if (v == TAG_NULL)
 8007ffe:	2c06      	cmp	r4, #6
 8008000:	d1e3      	bne.n	8007fca <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x22>
    ValType ta = valType(a);
 8008002:	4628      	mov	r0, r5
 8008004:	f7ff fc8e 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008008:	4606      	mov	r6, r0
    ValType tb = valType(b);
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff fc8a 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if ((ta == ValType::String && tb == ValType::Number) ||
 8008010:	2e03      	cmp	r6, #3
 8008012:	d022      	beq.n	800805a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb2>
 8008014:	2803      	cmp	r0, #3
 8008016:	d02f      	beq.n	8008078 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xd0>
    if (ta == ValType::Boolean) {
 8008018:	2e01      	cmp	r6, #1
 800801a:	d014      	beq.n	8008046 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9e>
    if (tb == ValType::Boolean) {
 800801c:	2801      	cmp	r0, #1
 800801e:	d021      	beq.n	8008064 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xbc>
    if (ta != tb)
 8008020:	4286      	cmp	r6, r0
 8008022:	d1dc      	bne.n	8007fde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if ((aa | bb) & 3)
 8008024:	ea45 0304 	orr.w	r3, r5, r4
 8008028:	079b      	lsls	r3, r3, #30
 800802a:	d1d8      	bne.n	8007fde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (ta == ValType::String)
 800802c:	2803      	cmp	r0, #3
 800802e:	d047      	beq.n	80080c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x118>
    else if (ta == ValType::Number)
 8008030:	2802      	cmp	r0, #2
 8008032:	d028      	beq.n	8008086 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
        return a == b;
 8008034:	1b60      	subs	r0, r4, r5
 8008036:	fab0 f080 	clz	r0, r0
 800803a:	0940      	lsrs	r0, r0, #5
}
 800803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(1);
 800803e:	2303      	movs	r3, #3
 8008040:	e7dd      	b.n	8007ffe <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>
        return TAG_NUMBER(0);
 8008042:	2201      	movs	r2, #1
 8008044:	e7d6      	b.n	8007ff4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>
    if (v == TAG_NULL)
 8008046:	2d06      	cmp	r5, #6
 8008048:	d033      	beq.n	80080b2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x10a>
    if (v == TAG_TRUE)
 800804a:	2d42      	cmp	r5, #66	; 0x42
        ta = ValType::Number;
 800804c:	f04f 0602 	mov.w	r6, #2
    if (v == TAG_TRUE)
 8008050:	d034      	beq.n	80080bc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x114>
    if (v == TAG_FALSE)
 8008052:	2d0a      	cmp	r5, #10
 8008054:	d1e2      	bne.n	800801c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(0);
 8008056:	2501      	movs	r5, #1
 8008058:	e7e0      	b.n	800801c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if ((ta == ValType::String && tb == ValType::Number) ||
 800805a:	2802      	cmp	r0, #2
 800805c:	d013      	beq.n	8008086 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
 800805e:	2803      	cmp	r0, #3
 8008060:	d1dc      	bne.n	800801c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
 8008062:	e7df      	b.n	8008024 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x7c>
    if (v == TAG_NULL)
 8008064:	2c06      	cmp	r4, #6
        tb = ValType::Number;
 8008066:	f04f 0002 	mov.w	r0, #2
    if (v == TAG_NULL)
 800806a:	d020      	beq.n	80080ae <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x106>
    if (v == TAG_TRUE)
 800806c:	2c42      	cmp	r4, #66	; 0x42
 800806e:	d023      	beq.n	80080b8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x110>
    if (v == TAG_FALSE)
 8008070:	2c0a      	cmp	r4, #10
 8008072:	d1d5      	bne.n	8008020 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        return TAG_NUMBER(0);
 8008074:	2401      	movs	r4, #1
 8008076:	e7d3      	b.n	8008020 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        (tb == ValType::String && ta == ValType::Number))
 8008078:	2e02      	cmp	r6, #2
 800807a:	d004      	beq.n	8008086 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
    if (ta == ValType::Boolean) {
 800807c:	2e01      	cmp	r6, #1
 800807e:	d1ae      	bne.n	8007fde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 8008080:	2d06      	cmp	r5, #6
 8008082:	d1e2      	bne.n	800804a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xa2>
 8008084:	e7ab      	b.n	8007fde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
        return toDouble(a) == toDouble(b);
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff fc70 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800808c:	4606      	mov	r6, r0
 800808e:	4620      	mov	r0, r4
 8008090:	460f      	mov	r7, r1
 8008092:	f7ff fc6b 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7fa ff15 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 80080a2:	f04f 0401 	mov.w	r4, #1
 80080a6:	b900      	cbnz	r0, 80080aa <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x102>
 80080a8:	4604      	mov	r4, r0
 80080aa:	b2e0      	uxtb	r0, r4
}
 80080ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 80080ae:	2400      	movs	r4, #0
 80080b0:	e7b6      	b.n	8008020 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        ta = ValType::Number;
 80080b2:	2602      	movs	r6, #2
        return TAG_UNDEFINED;
 80080b4:	2500      	movs	r5, #0
 80080b6:	e7b1      	b.n	800801c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(1);
 80080b8:	2403      	movs	r4, #3
 80080ba:	e7b1      	b.n	8008020 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
 80080bc:	2503      	movs	r5, #3
 80080be:	e7ad      	b.n	800801c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if (a == b)
 80080c0:	42ac      	cmp	r4, r5
 80080c2:	d099      	beq.n	8007ff8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    int compareResult = strcmp(a->data, b->data);
 80080c4:	1da1      	adds	r1, r4, #6
 80080c6:	1da8      	adds	r0, r5, #6
 80080c8:	f7fb fd70 	bl	8003bac <strcmp>
 80080cc:	fab0 f080 	clz	r0, r0
 80080d0:	0940      	lsrs	r0, r0, #5
}
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 80080d4:	2200      	movs	r2, #0
 80080d6:	e78d      	b.n	8007ff4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>

080080d8 <_ZN3pxt9switch_eqEPNS_12TValueStructES1_>:
    if (eq_bool(a, b)) {
 80080d8:	f7ff bf66 	b.w	8007fa8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>

080080dc <_ZN6numops2eqEPN3pxt12TValueStructES2_>:
TNumber eq(TNumber a, TNumber b) {
 80080dc:	b508      	push	{r3, lr}
    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80080de:	f7ff ff63 	bl	8007fa8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 80080e2:	2800      	cmp	r0, #0
}
 80080e4:	bf14      	ite	ne
 80080e6:	2042      	movne	r0, #66	; 0x42
 80080e8:	200a      	moveq	r0, #10
 80080ea:	bd08      	pop	{r3, pc}

080080ec <_ZN6numops3neqEPN3pxt12TValueStructES2_>:
TNumber neq(TNumber a, TNumber b) {
 80080ec:	b508      	push	{r3, lr}
    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80080ee:	f7ff ff5b 	bl	8007fa8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 80080f2:	2800      	cmp	r0, #0
}
 80080f4:	bf0c      	ite	eq
 80080f6:	2042      	moveq	r0, #66	; 0x42
 80080f8:	200a      	movne	r0, #10
 80080fa:	bd08      	pop	{r3, pc}

080080fc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>:
int indexOf(RefCollection *c, TValue x, int start) {
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned getLength() { return length; };
 80080fe:	8907      	ldrh	r7, [r0, #8]
    auto data = c->head.getData();
 8008100:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
 8008102:	b17f      	cbz	r7, 8008124 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
 8008104:	460e      	mov	r6, r1
 8008106:	2400      	movs	r4, #0
 8008108:	3d04      	subs	r5, #4
 800810a:	e002      	b.n	8008112 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x16>
 800810c:	3401      	adds	r4, #1
 800810e:	42a7      	cmp	r7, r4
 8008110:	d008      	beq.n	8008124 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
        if (pxt::eq_bool(data[i], x)) {
 8008112:	4631      	mov	r1, r6
 8008114:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8008118:	f7ff ff46 	bl	8007fa8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0f5      	beq.n	800810c <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x10>
            return (int)i;
 8008120:	4620      	mov	r0, r4
}
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return -1;
 8008124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812a:	bf00      	nop

0800812c <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
bool removeElement(RefCollection *c, TValue x) {
 800812c:	b510      	push	{r4, lr}
    int idx = indexOf(c, x, 0);
 800812e:	2200      	movs	r2, #0
bool removeElement(RefCollection *c, TValue x) {
 8008130:	4604      	mov	r4, r0
    int idx = indexOf(c, x, 0);
 8008132:	f7ff ffe3 	bl	80080fc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>
    if (idx >= 0) {
 8008136:	1e01      	subs	r1, r0, #0
 8008138:	db04      	blt.n	8008144 <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE+0x18>
    return c->head.remove(x);
 800813a:	1d20      	adds	r0, r4, #4
 800813c:	f001 f82a 	bl	8009194 <_ZN3pxt7Segment6removeEj>
        return 1;
 8008140:	2001      	movs	r0, #1
}
 8008142:	bd10      	pop	{r4, pc}
    return 0;
 8008144:	2000      	movs	r0, #0
}
 8008146:	bd10      	pop	{r4, pc}

08008148 <_ZN6numops6toBoolEPN3pxt12TValueStructE>:
int toBool(TValue v) {
 8008148:	b538      	push	{r3, r4, r5, lr}
    return ((intptr_t)v & 3) || !v;
 800814a:	0783      	lsls	r3, r0, #30
 800814c:	4604      	mov	r4, r0
 800814e:	d10d      	bne.n	800816c <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x24>
 8008150:	b150      	cbz	r0, 8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
    ValType t = valType(v);
 8008152:	f7ff fbe7 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008156:	2803      	cmp	r0, #3
 8008158:	d003      	beq.n	8008162 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x1a>
    } else if (t == ValType::Number) {
 800815a:	2802      	cmp	r0, #2
 800815c:	d013      	beq.n	8008186 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x3e>
    return 1;
 800815e:	2001      	movs	r0, #1
}
 8008160:	bd38      	pop	{r3, r4, r5, pc}
        if (s->length == 0)
 8008162:	88a3      	ldrh	r3, [r4, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1fa      	bne.n	800815e <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x16>
            return 0;
 8008168:	2000      	movs	r0, #0
}
 800816a:	bd38      	pop	{r3, r4, r5, pc}
        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||
 800816c:	280a      	cmp	r0, #10
 800816e:	d0fb      	beq.n	8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008170:	2800      	cmp	r0, #0
 8008172:	d0f9      	beq.n	8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008174:	280e      	cmp	r0, #14
 8008176:	d0f7      	beq.n	8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008178:	2806      	cmp	r0, #6
 800817a:	d0f5      	beq.n	8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 800817c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8008180:	bf18      	it	ne
 8008182:	2001      	movne	r0, #1
}
 8008184:	bd38      	pop	{r3, r4, r5, pc}
        auto x = toDouble(v);
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff fbf0 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isnan(__x); }
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	f7fa ff18 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e5      	bne.n	8008168 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
        if (isnan(x) || x == 0.0 || x == -0.0)
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	f7fa fe92 	bl	8002ecc <__wrap___aeabi_dcmpeq>
 80081a8:	fab0 f080 	clz	r0, r0
 80081ac:	0940      	lsrs	r0, r0, #5
}
 80081ae:	bd38      	pop	{r3, r4, r5, pc}

080081b0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE>:
    if (v == TAG_TRUE)
 80081b0:	2842      	cmp	r0, #66	; 0x42
 80081b2:	d005      	beq.n	80081c0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0x10>
    if (v == TAG_FALSE)
 80081b4:	280a      	cmp	r0, #10
 80081b6:	d001      	beq.n	80081bc <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0xc>
    int r = toBool(v);
 80081b8:	f7ff bfc6 	b.w	8008148 <_ZN6numops6toBoolEPN3pxt12TValueStructE>
        return 0;
 80081bc:	2000      	movs	r0, #0
}
 80081be:	4770      	bx	lr
        return 1;
 80081c0:	2001      	movs	r0, #1
 80081c2:	4770      	bx	lr

080081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>:
    if (a == TAG_NAN || b == TAG_NAN)
 80081c4:	280e      	cmp	r0, #14
 80081c6:	d04d      	beq.n	8008264 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
 80081c8:	290e      	cmp	r1, #14
 80081ca:	d04b      	beq.n	8008264 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
static int valCompare(TValue a, TValue b) {
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	460c      	mov	r4, r1
 80081d0:	4605      	mov	r5, r0
    ValType ta = valType(a);
 80081d2:	f7ff fba7 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 80081d6:	4606      	mov	r6, r0
    ValType tb = valType(b);
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff fba3 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta == ValType::String && tb == ValType::String)
 80081de:	2e03      	cmp	r6, #3
 80081e0:	d02c      	beq.n	800823c <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x78>
    if (a == b)
 80081e2:	42a5      	cmp	r5, r4
 80081e4:	d028      	beq.n	8008238 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    auto da = toDouble(a);
 80081e6:	4628      	mov	r0, r5
 80081e8:	f7ff fbc0 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80081ec:	4606      	mov	r6, r0
    auto db = toDouble(b);
 80081ee:	4620      	mov	r0, r4
    auto da = toDouble(a);
 80081f0:	460f      	mov	r7, r1
    auto db = toDouble(b);
 80081f2:	f7ff fbbb 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80081f6:	4632      	mov	r2, r6
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	463b      	mov	r3, r7
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	f7fa fee1 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8008206:	bb38      	cbnz	r0, 8008258 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
 8008208:	4622      	mov	r2, r4
 800820a:	462b      	mov	r3, r5
 800820c:	4620      	mov	r0, r4
 800820e:	4629      	mov	r1, r5
 8008210:	f7fa feda 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 8008214:	bb00      	cbnz	r0, 8008258 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
    if (da < db)
 8008216:	4622      	mov	r2, r4
 8008218:	462b      	mov	r3, r5
 800821a:	4630      	mov	r0, r6
 800821c:	4639      	mov	r1, r7
 800821e:	f7fa fe6f 	bl	8002f00 <__wrap___aeabi_dcmplt>
 8008222:	b9e0      	cbnz	r0, 800825e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (da > db)
 8008224:	4622      	mov	r2, r4
 8008226:	462b      	mov	r3, r5
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7fa feb2 	bl	8002f94 <__wrap___aeabi_dcmpgt>
 8008230:	3000      	adds	r0, #0
 8008232:	bf18      	it	ne
 8008234:	2001      	movne	r0, #1
}
 8008236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008238:	2000      	movs	r0, #0
}
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ta == ValType::String && tb == ValType::String)
 800823c:	2803      	cmp	r0, #3
 800823e:	d1d0      	bne.n	80081e2 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x1e>
    if (a == b)
 8008240:	42a5      	cmp	r5, r4
 8008242:	d0f9      	beq.n	8008238 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    int compareResult = strcmp(a->data, b->data);
 8008244:	1da1      	adds	r1, r4, #6
 8008246:	1da8      	adds	r0, r5, #6
 8008248:	f7fb fcb0 	bl	8003bac <strcmp>
    if (compareResult < 0)
 800824c:	2800      	cmp	r0, #0
 800824e:	db06      	blt.n	800825e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (compareResult > 0)
 8008250:	bf14      	ite	ne
 8008252:	2001      	movne	r0, #1
 8008254:	2000      	moveq	r0, #0
}
 8008256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008258:	f06f 0001 	mvn.w	r0, #1
}
 800825c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 800825e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008264:	f06f 0001 	mvn.w	r0, #1
}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_>:
bool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}
 800826c:	b538      	push	{r3, r4, r5, lr}
    return (intptr_t)a & (intptr_t)b & 1;
 800826e:	f001 0301 	and.w	r3, r1, #1
 8008272:	ea13 0400 	ands.w	r4, r3, r0
 8008276:	d004      	beq.n	8008282 <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_+0x16>
 8008278:	4288      	cmp	r0, r1
 800827a:	bfac      	ite	ge
 800827c:	2000      	movge	r0, #0
 800827e:	2001      	movlt	r0, #1
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	f7ff ff9f 	bl	80081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008286:	1c83      	adds	r3, r0, #2
 8008288:	bf14      	ite	ne
 800828a:	0fc0      	lsrne	r0, r0, #31
 800828c:	4620      	moveq	r0, r4
 800828e:	bd38      	pop	{r3, r4, r5, pc}

08008290 <_ZN6numops2leEPN3pxt12TValueStructES2_>:
TNumber le(TNumber a, TNumber b){CMPOP(<=)}
 8008290:	b510      	push	{r4, lr}
 8008292:	f001 0401 	and.w	r4, r1, #1
 8008296:	4220      	tst	r0, r4
 8008298:	d003      	beq.n	80082a2 <_ZN6numops2leEPN3pxt12TValueStructES2_+0x12>
 800829a:	4288      	cmp	r0, r1
 800829c:	dc07      	bgt.n	80082ae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 800829e:	2042      	movs	r0, #66	; 0x42
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	f7ff ff8f 	bl	80081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80082a6:	1c83      	adds	r3, r0, #2
 80082a8:	d001      	beq.n	80082ae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	ddf7      	ble.n	800829e <_ZN6numops2leEPN3pxt12TValueStructES2_+0xe>
 80082ae:	200a      	movs	r0, #10
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	bf00      	nop

080082b4 <_ZN6numops2ltEPN3pxt12TValueStructES2_>:
TNumber lt(TNumber a, TNumber b){CMPOP(<)}
 80082b4:	b510      	push	{r4, lr}
 80082b6:	f001 0401 	and.w	r4, r1, #1
 80082ba:	4220      	tst	r0, r4
 80082bc:	d003      	beq.n	80082c6 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x12>
 80082be:	4288      	cmp	r0, r1
 80082c0:	da07      	bge.n	80082d2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 80082c2:	2042      	movs	r0, #66	; 0x42
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	f7ff ff7d 	bl	80081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80082ca:	1c83      	adds	r3, r0, #2
 80082cc:	d001      	beq.n	80082d2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	dbf7      	blt.n	80082c2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0xe>
 80082d2:	200a      	movs	r0, #10
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop

080082d8 <_ZN6numops2geEPN3pxt12TValueStructES2_>:
TNumber ge(TNumber a, TNumber b){CMPOP(>=)}
 80082d8:	b510      	push	{r4, lr}
 80082da:	f001 0401 	and.w	r4, r1, #1
 80082de:	4220      	tst	r0, r4
 80082e0:	d003      	beq.n	80082ea <_ZN6numops2geEPN3pxt12TValueStructES2_+0x12>
 80082e2:	4288      	cmp	r0, r1
 80082e4:	db05      	blt.n	80082f2 <_ZN6numops2geEPN3pxt12TValueStructES2_+0x1a>
 80082e6:	2042      	movs	r0, #66	; 0x42
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	f7ff ff6b 	bl	80081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	daf9      	bge.n	80082e6 <_ZN6numops2geEPN3pxt12TValueStructES2_+0xe>
 80082f2:	200a      	movs	r0, #10
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop

080082f8 <_ZN6numops2gtEPN3pxt12TValueStructES2_>:
TNumber gt(TNumber a, TNumber b){CMPOP(>)}
 80082f8:	b510      	push	{r4, lr}
 80082fa:	f001 0401 	and.w	r4, r1, #1
 80082fe:	4220      	tst	r0, r4
 8008300:	d003      	beq.n	800830a <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x12>
 8008302:	4288      	cmp	r0, r1
 8008304:	dd05      	ble.n	8008312 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x1a>
 8008306:	2042      	movs	r0, #66	; 0x42
 8008308:	bd10      	pop	{r4, pc}
 800830a:	f7ff ff5b 	bl	80081c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 800830e:	2800      	cmp	r0, #0
 8008310:	dcf9      	bgt.n	8008306 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0xe>
 8008312:	200a      	movs	r0, #10
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop

08008318 <_ZN6numops8toStringEPN3pxt12TValueStructE>:
String toString(TValue v) {
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	b090      	sub	sp, #64	; 0x40
 800831c:	4604      	mov	r4, r0
    ValType t = valType(v);
 800831e:	f7ff fb01 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008322:	2803      	cmp	r0, #3
 8008324:	d03d      	beq.n	80083a2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8a>
    } else if (t == ValType::Number) {
 8008326:	2802      	cmp	r0, #2
 8008328:	d00f      	beq.n	800834a <_ZN6numops8toStringEPN3pxt12TValueStructE+0x32>
    } else if (t == ValType::Function) {
 800832a:	2805      	cmp	r0, #5
 800832c:	d048      	beq.n	80083c0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa8>
        if (v == TAG_UNDEFINED)
 800832e:	2c00      	cmp	r4, #0
 8008330:	d04c      	beq.n	80083cc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb4>
        else if (v == TAG_FALSE)
 8008332:	2c0a      	cmp	r4, #10
 8008334:	d042      	beq.n	80083bc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa4>
        else if (v == TAG_NAN)
 8008336:	2c0e      	cmp	r4, #14
 8008338:	d045      	beq.n	80083c6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        else if (v == TAG_TRUE)
 800833a:	2c42      	cmp	r4, #66	; 0x42
 800833c:	d055      	beq.n	80083ea <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd2>
        return (String)(void *)sObject;
 800833e:	4b2c      	ldr	r3, [pc, #176]	; (80083f0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd8>)
 8008340:	482c      	ldr	r0, [pc, #176]	; (80083f4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xdc>)
 8008342:	2c06      	cmp	r4, #6
 8008344:	bf08      	it	eq
 8008346:	4618      	moveq	r0, r3
 8008348:	e02c      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        if (isNumber(v)) {
 800834a:	07e3      	lsls	r3, r4, #31
 800834c:	d42c      	bmi.n	80083a8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x90>
        if (v == TAG_NAN)
 800834e:	2c0e      	cmp	r4, #14
 8008350:	d039      	beq.n	80083c6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        auto x = toDouble(v);
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff fb0a 	bl	800796c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isinf(__x); }
 8008358:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800835c:	460d      	mov	r5, r1
        if (isinf(x)) {
 800835e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008362:	4631      	mov	r1, r6
 8008364:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
        auto x = toDouble(v);
 8008366:	4604      	mov	r4, r0
        if (isinf(x)) {
 8008368:	f7fa fe2e 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800836c:	b938      	cbnz	r0, 800837e <_ZN6numops8toStringEPN3pxt12TValueStructE+0x66>
 800836e:	4620      	mov	r0, r4
 8008370:	4631      	mov	r1, r6
 8008372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008376:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
 8008378:	f7fa fdda 	bl	8002f30 <__wrap___aeabi_dcmple>
 800837c:	b340      	cbz	r0, 80083d0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb8>
  { return __builtin_isnan(__x); }
 800837e:	4622      	mov	r2, r4
 8008380:	4620      	mov	r0, r4
 8008382:	462b      	mov	r3, r5
 8008384:	4629      	mov	r1, r5
 8008386:	f7fa fe1f 	bl	8002fc8 <__wrap___aeabi_dcmpun>
 800838a:	b9e0      	cbnz	r0, 80083c6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        mycvt(x, buf);
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	466a      	mov	r2, sp
 8008392:	f7fe fac9 	bl	8006928 <_ZN6numops5mycvtEdPc>
        return mkString(buf);
 8008396:	4668      	mov	r0, sp
 8008398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800839c:	f7fe feda 	bl	8007154 <_ZN3pxt8mkStringEPKci>
 80083a0:	e000      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 80083a2:	4620      	mov	r0, r4
}
 80083a4:	b010      	add	sp, #64	; 0x40
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
            itoa(numValue(v), buf);
 80083a8:	4669      	mov	r1, sp
 80083aa:	1060      	asrs	r0, r4, #1
 80083ac:	f001 fd4c 	bl	8009e48 <_ZN5codal4itoaEiPc>
            return mkString(buf);
 80083b0:	4668      	mov	r0, sp
 80083b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083b6:	f7fe fecd 	bl	8007154 <_ZN3pxt8mkStringEPKci>
 80083ba:	e7f3      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sFalse;
 80083bc:	480f      	ldr	r0, [pc, #60]	; (80083fc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe4>)
 80083be:	e7f1      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        return (String)(void *)sFunction;
 80083c0:	480f      	ldr	r0, [pc, #60]	; (8008400 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe8>)
}
 80083c2:	b010      	add	sp, #64	; 0x40
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sNaN;
 80083c6:	480f      	ldr	r0, [pc, #60]	; (8008404 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xec>)
}
 80083c8:	b010      	add	sp, #64	; 0x40
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sUndefined;
 80083cc:	480e      	ldr	r0, [pc, #56]	; (8008408 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf0>)
 80083ce:	e7e9      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            if (x < 0)
 80083d0:	4620      	mov	r0, r4
 80083d2:	2300      	movs	r3, #0
 80083d4:	4629      	mov	r1, r5
 80083d6:	2200      	movs	r2, #0
 80083d8:	f7fa fd92 	bl	8002f00 <__wrap___aeabi_dcmplt>
                return (String)(void *)sInf;
 80083dc:	4c0b      	ldr	r4, [pc, #44]	; (800840c <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf4>)
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf8>)
 80083e0:	2800      	cmp	r0, #0
 80083e2:	bf14      	ite	ne
 80083e4:	4620      	movne	r0, r4
 80083e6:	4618      	moveq	r0, r3
 80083e8:	e7dc      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sTrue;
 80083ea:	480a      	ldr	r0, [pc, #40]	; (8008414 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xfc>)
 80083ec:	e7da      	b.n	80083a4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 80083ee:	bf00      	nop
 80083f0:	0800c4a0 	.word	0x0800c4a0
 80083f4:	0800c4c4 	.word	0x0800c4c4
 80083f8:	7fefffff 	.word	0x7fefffff
 80083fc:	0800c4b8 	.word	0x0800c4b8
 8008400:	0800c4d4 	.word	0x0800c4d4
 8008404:	0800c484 	.word	0x0800c484
 8008408:	0800c430 	.word	0x0800c430
 800840c:	0800c490 	.word	0x0800c490
 8008410:	0800c474 	.word	0x0800c474
 8008414:	0800c4ac 	.word	0x0800c4ac

08008418 <_ZN3pxt6typeOfEPNS_12TValueStructE>:
String typeOf(TValue v) {
 8008418:	b508      	push	{r3, lr}
    switch (valType(v)) {
 800841a:	f7ff fa83 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 800841e:	2805      	cmp	r0, #5
 8008420:	d810      	bhi.n	8008444 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x2c>
 8008422:	e8df f000 	tbb	[pc, r0]
 8008426:	0503      	.short	0x0503
 8008428:	0d0b0907 	.word	0x0d0b0907
        return (String)sUndefinedTp;
 800842c:	4808      	ldr	r0, [pc, #32]	; (8008450 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x38>)
}
 800842e:	bd08      	pop	{r3, pc}
        return (String)sBooleanTp;
 8008430:	4808      	ldr	r0, [pc, #32]	; (8008454 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x3c>)
}
 8008432:	bd08      	pop	{r3, pc}
        return (String)sNumberTp;
 8008434:	4808      	ldr	r0, [pc, #32]	; (8008458 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x40>)
}
 8008436:	bd08      	pop	{r3, pc}
        return (String)sStringTp;
 8008438:	4808      	ldr	r0, [pc, #32]	; (800845c <_ZN3pxt6typeOfEPNS_12TValueStructE+0x44>)
}
 800843a:	bd08      	pop	{r3, pc}
        return (String)sObjectTp;
 800843c:	4808      	ldr	r0, [pc, #32]	; (8008460 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x48>)
}
 800843e:	bd08      	pop	{r3, pc}
        return (String)sFunctionTp;
 8008440:	4808      	ldr	r0, [pc, #32]	; (8008464 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x4c>)
}
 8008442:	bd08      	pop	{r3, pc}
    target_panic(800 + subcode);
 8008444:	f240 3022 	movw	r0, #802	; 0x322
 8008448:	f7f8 f858 	bl	80004fc <target_panic>
        return 0;
 800844c:	2000      	movs	r0, #0
}
 800844e:	bd08      	pop	{r3, pc}
 8008450:	0800c464 	.word	0x0800c464
 8008454:	0800c420 	.word	0x0800c420
 8008458:	0800c4e8 	.word	0x0800c4e8
 800845c:	0800c508 	.word	0x0800c508
 8008460:	0800c4f8 	.word	0x0800c4f8
 8008464:	0800c454 	.word	0x0800c454

08008468 <_ZN3pxt8anyPrintEPNS_12TValueStructE>:
void anyPrint(TValue v) {
 8008468:	b530      	push	{r4, r5, lr}
 800846a:	b083      	sub	sp, #12
 800846c:	4604      	mov	r4, r0
    if (valType(v) == ValType::Object) {
 800846e:	f7ff fa59 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008472:	2804      	cmp	r0, #4
 8008474:	d116      	bne.n	80084a4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x3c>
    return ((intptr_t)v & 3) || !v;
 8008476:	f014 0103 	ands.w	r1, r4, #3
 800847a:	d10c      	bne.n	8008496 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
 800847c:	b15c      	cbz	r4, 8008496 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 800847e:	6822      	ldr	r2, [r4, #0]
            if ((void *)meth == (void *)&anyPrint)
 8008480:	4d14      	ldr	r5, [pc, #80]	; (80084d4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x6c>)
 8008482:	f022 0001 	bic.w	r0, r2, #1
            auto meth = ((RefObjectMethod)vt->methods[1]);
 8008486:	6943      	ldr	r3, [r0, #20]
            if ((void *)meth == (void *)&anyPrint)
 8008488:	42ab      	cmp	r3, r5
 800848a:	d01b      	beq.n	80084c4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x5c>
                meth(o);
 800848c:	4620      	mov	r0, r4
}
 800848e:	b003      	add	sp, #12
 8008490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                meth(o);
 8008494:	4718      	bx	r3
            DMESG("[Native %p]", v);
 8008496:	4621      	mov	r1, r4
 8008498:	480f      	ldr	r0, [pc, #60]	; (80084d8 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x70>)
}
 800849a:	b003      	add	sp, #12
 800849c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            DMESG("[Native %p]", v);
 80084a0:	f001 bece 	b.w	800a240 <codal_dmesg>
        String s = numops::toString(v);
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff ff37 	bl	8008318 <_ZN6numops8toStringEPN3pxt12TValueStructE>
 80084aa:	4605      	mov	r5, r0
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ffb3 	bl	8008418 <_ZN3pxt6typeOfEPNS_12TValueStructE>
 80084b2:	4622      	mov	r2, r4
 80084b4:	1d81      	adds	r1, r0, #6
 80084b6:	4809      	ldr	r0, [pc, #36]	; (80084dc <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x74>)
 80084b8:	1dab      	adds	r3, r5, #6
}
 80084ba:	b003      	add	sp, #12
 80084bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 80084c0:	f001 bebe 	b.w	800a240 <codal_dmesg>
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
 80084c4:	8903      	ldrh	r3, [r0, #8]
 80084c6:	8800      	ldrh	r0, [r0, #0]
 80084c8:	9000      	str	r0, [sp, #0]
 80084ca:	4805      	ldr	r0, [pc, #20]	; (80084e0 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x78>)
 80084cc:	f001 feb8 	bl	800a240 <codal_dmesg>
}
 80084d0:	b003      	add	sp, #12
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	08008469 	.word	0x08008469
 80084d8:	0800c404 	.word	0x0800c404
 80084dc:	0800c410 	.word	0x0800c410
 80084e0:	0800c3dc 	.word	0x0800c3dc

080084e4 <_ZN3pxt10failedCastEPNS_12TValueStructE>:
// PRIM_VTABLE(action, ValType::Function, RefAction, )

void failedCast(TValue v) {
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4604      	mov	r4, r0
    DMESG("failed type check for %p", v);
 80084e8:	4811      	ldr	r0, [pc, #68]	; (8008530 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x4c>)
 80084ea:	4621      	mov	r1, r4
 80084ec:	f001 fea8 	bl	800a240 <codal_dmesg>
    return ((intptr_t)v & 3) || !v;
 80084f0:	07a3      	lsls	r3, r4, #30
 80084f2:	d106      	bne.n	8008502 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 80084f4:	b16c      	cbz	r4, 8008512 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 80084f6:	6821      	ldr	r1, [r4, #0]
 80084f8:	f021 0101 	bic.w	r1, r1, #1
    if (vt->magic == VTABLE_MAGIC)
 80084fc:	78cb      	ldrb	r3, [r1, #3]
 80084fe:	2bf9      	cmp	r3, #249	; 0xf9
 8008500:	d010      	beq.n	8008524 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x40>
    if (vt) {
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
    }

    int code;
    if (v == TAG_NULL)
 8008502:	2c06      	cmp	r4, #6
 8008504:	d105      	bne.n	8008512 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
}
 8008506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FROM_NULL;
 800850a:	f240 30dd 	movw	r0, #989	; 0x3dd
    target_panic(code);
 800850e:	f7f7 bff5 	b.w	80004fc <target_panic>
        code = PANIC_CAST_FIRST + (int)valType(v);
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff fa06 	bl	8007924 <_ZN3pxt7valTypeEPNS_12TValueStructE>
}
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FIRST + (int)valType(v);
 800851c:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
    target_panic(code);
 8008520:	f7f7 bfec 	b.w	80004fc <target_panic>
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
 8008524:	890b      	ldrh	r3, [r1, #8]
 8008526:	788a      	ldrb	r2, [r1, #2]
 8008528:	4802      	ldr	r0, [pc, #8]	; (8008534 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x50>)
 800852a:	f001 fe89 	bl	800a240 <codal_dmesg>
 800852e:	e7e8      	b.n	8008502 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 8008530:	0800c388 	.word	0x0800c388
 8008534:	0800c3a4 	.word	0x0800c3a4

08008538 <_ZN3pxt15missingPropertyEPNS_12TValueStructE>:

void missingProperty(TValue v) {
 8008538:	b508      	push	{r3, lr}
    DMESG("missing property on %p", v);
 800853a:	4601      	mov	r1, r0
 800853c:	4804      	ldr	r0, [pc, #16]	; (8008550 <_ZN3pxt15missingPropertyEPNS_12TValueStructE+0x18>)
 800853e:	f001 fe7f 	bl	800a240 <codal_dmesg>
    target_panic(PANIC_MISSING_PROPERTY);
}
 8008542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    target_panic(PANIC_MISSING_PROPERTY);
 8008546:	f44f 7064 	mov.w	r0, #912	; 0x390
 800854a:	f7f7 bfd7 	b.w	80004fc <target_panic>
 800854e:	bf00      	nop
 8008550:	0800c3c4 	.word	0x0800c3c4

08008554 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>:
    for (unsigned i = 0; i < len; ++i) {
        gcProcess(*data++);
    }
}

static uint32_t getObjectSize(RefObject *o) {
 8008554:	b538      	push	{r3, r4, r5, lr}
    auto vt = o->vtable & ~ANY_MARKED_MASK;
 8008556:	6804      	ldr	r4, [r0, #0]
static uint32_t getObjectSize(RefObject *o) {
 8008558:	4605      	mov	r5, r0
    uint32_t r;
    GC_CHECK(vt != 0, 49);
 800855a:	f034 0403 	bics.w	r4, r4, #3
 800855e:	d011      	beq.n	8008584 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x30>
    if (IS_VAR_BLOCK(vt)) {
 8008560:	0fa3      	lsrs	r3, r4, #30
 8008562:	d114      	bne.n	800858e <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x3a>
        r = VAR_BLOCK_WORDS(vt);
    } else {
        auto sz = getSizeMethod(vt);
        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);
        r = sz(o);
 8008564:	4628      	mov	r0, r5
 8008566:	69e3      	ldr	r3, [r4, #28]
 8008568:	4798      	blx	r3
 800856a:	4605      	mov	r5, r0
    }
    GC_CHECK(1 <= r && (r <= (GC_MAX_ALLOC_SIZE >> 2) || IS_FREE(vt)), 48);
 800856c:	b125      	cbz	r5, 8008578 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x24>
 800856e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008572:	d905      	bls.n	8008580 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
 8008574:	2c00      	cmp	r4, #0
 8008576:	db03      	blt.n	8008580 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
    target_panic(800 + subcode);
 8008578:	f44f 7054 	mov.w	r0, #848	; 0x350
 800857c:	f7f7 ffbe 	bl	80004fc <target_panic>
    return r;
}
 8008580:	4628      	mov	r0, r5
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	f240 3051 	movw	r0, #849	; 0x351
 8008588:	f7f7 ffb8 	bl	80004fc <target_panic>
 800858c:	e7ea      	b.n	8008564 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x10>
        r = VAR_BLOCK_WORDS(vt);
 800858e:	f3c4 0591 	ubfx	r5, r4, #2, #18
 8008592:	e7eb      	b.n	800856c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x18>

08008594 <_ZN3pxtL9removePtrEPNS_12TValueStructE>:
        else
            oops(44);
    }
}

static void removePtr(TValue v) {
 8008594:	b538      	push	{r3, r4, r5, lr}
    auto len = gcRoots.getLength();
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
    unsigned getLength() { return length; };
 8008598:	889d      	ldrh	r5, [r3, #4]
    auto data = gcRoots.getData();
 800859a:	681c      	ldr	r4, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 800859c:	b175      	cbz	r5, 80085bc <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x28>
        if (data[i] == v) {
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	4298      	cmp	r0, r3
 80085a2:	d011      	beq.n	80085c8 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x34>
    for (unsigned i = 0; i < len; ++i) {
 80085a4:	2300      	movs	r3, #0
 80085a6:	1d22      	adds	r2, r4, #4
 80085a8:	e005      	b.n	80085b6 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x22>
        if (data[i] == v) {
 80085aa:	6811      	ldr	r1, [r2, #0]
 80085ac:	4614      	mov	r4, r2
 80085ae:	4281      	cmp	r1, r0
 80085b0:	f102 0204 	add.w	r2, r2, #4
 80085b4:	d009      	beq.n	80085ca <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x36>
    for (unsigned i = 0; i < len; ++i) {
 80085b6:	3301      	adds	r3, #1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	d1f6      	bne.n	80085aa <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x16>
    target_panic(800 + subcode);
 80085bc:	f44f 7052 	mov.w	r0, #840	; 0x348
            }
            return;
        }
    }
    oops(40);
}
 80085c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c4:	f7f7 bf9a 	b.w	80004fc <target_panic>
    for (unsigned i = 0; i < len; ++i) {
 80085c8:	2300      	movs	r3, #0
            if (i == len - 1) {
 80085ca:	3d01      	subs	r5, #1
 80085cc:	429d      	cmp	r5, r3
                gcRoots.pop();
 80085ce:	4805      	ldr	r0, [pc, #20]	; (80085e4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
            if (i == len - 1) {
 80085d0:	d003      	beq.n	80085da <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x46>
                data[i] = gcRoots.pop();
 80085d2:	f000 fd4b 	bl	800906c <_ZN3pxt9LLSegment3popEv>
 80085d6:	6020      	str	r0, [r4, #0]
}
 80085d8:	bd38      	pop	{r3, r4, r5, pc}
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                gcRoots.pop();
 80085de:	f000 bd45 	b.w	800906c <_ZN3pxt9LLSegment3popEv>
 80085e2:	bf00      	nop
 80085e4:	20001018 	.word	0x20001018

080085e8 <_ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 80085e8:	6803      	ldr	r3, [r0, #0]
 80085ea:	f023 0301 	bic.w	r3, r3, #1
    return tbl->numbytes >> 2;
 80085ee:	8818      	ldrh	r0, [r3, #0]
}
 80085f0:	0880      	lsrs	r0, r0, #2
 80085f2:	4770      	bx	lr

080085f4 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE>:
    if (!ctx)
 80085f4:	b330      	cbz	r0, 8008644 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x50>
void popThreadContext(ThreadContext *ctx) {
 80085f6:	b538      	push	{r3, r4, r5, lr}
    auto n = ctx->stack.next;
 80085f8:	68c5      	ldr	r5, [r0, #12]
 80085fa:	4604      	mov	r4, r0
    if (n) {
 80085fc:	b1a5      	cbz	r5, 8008628 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x34>
        ctx->stack.top = n->top;
 80085fe:	e955 3101 	ldrd	r3, r1, [r5, #-4]
        ctx->stack.bottom = n->bottom;
 8008602:	6868      	ldr	r0, [r5, #4]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008604:	0f5a      	lsrs	r2, r3, #29
        ctx->stack.top = n->top;
 8008606:	6061      	str	r1, [r4, #4]
        ctx->stack.next = n->next;
 8008608:	68a9      	ldr	r1, [r5, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 800860a:	2a03      	cmp	r2, #3
        ctx->stack.next = n->next;
 800860c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008610:	d005      	beq.n	800861e <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x2a>
    target_panic(800 + subcode);
 8008612:	f240 3049 	movw	r0, #841	; 0x349
 8008616:	f7f7 ff71 	bl	80004fc <target_panic>
 800861a:	f855 3c04 	ldr.w	r3, [r5, #-4]
    r[-1] |= FREE_MASK;
 800861e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008622:	f845 3c04 	str.w	r3, [r5, #-4]
}
 8008626:	bd38      	pop	{r3, r4, r5, pc}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008628:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800862c:	0f5a      	lsrs	r2, r3, #29
 800862e:	2a03      	cmp	r2, #3
 8008630:	d109      	bne.n	8008646 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x52>
    r[-1] |= FREE_MASK;
 8008632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008636:	f844 3c04 	str.w	r3, [r4, #-4]
        setThreadContext(NULL);
 800863a:	2000      	movs	r0, #0
}
 800863c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        setThreadContext(NULL);
 8008640:	f001 b8a4 	b.w	800978c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 8008644:	4770      	bx	lr
 8008646:	f240 3049 	movw	r0, #841	; 0x349
 800864a:	f7f7 ff57 	bl	80004fc <target_panic>
 800864e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008652:	e7ee      	b.n	8008632 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x3e>

08008654 <_ZN3pxt6gcScanEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008654:	0783      	lsls	r3, r0, #30
 8008656:	d109      	bne.n	800866c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8008658:	b140      	cbz	r0, 800866c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    return isTagged(v) || !((uint32_t)v >> 28);
 800865a:	0f03      	lsrs	r3, r0, #28
 800865c:	d006      	beq.n	800866c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    if (SKIP_PROCESSING(v))
 800865e:	6803      	ldr	r3, [r0, #0]
 8008660:	4a08      	ldr	r2, [pc, #32]	; (8008684 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x30>)
 8008662:	4213      	tst	r3, r2
 8008664:	d102      	bne.n	800866c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8008666:	78da      	ldrb	r2, [r3, #3]
 8008668:	2af9      	cmp	r2, #249	; 0xf9
 800866a:	d000      	beq.n	800866e <_ZN3pxt6gcScanEPNS_12TValueStructE+0x1a>
 800866c:	4770      	bx	lr
void gcScan(TValue v) {
 800866e:	b410      	push	{r4}
    void push(TValue value) { set(length, value); }
 8008670:	4c05      	ldr	r4, [pc, #20]	; (8008688 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x34>)
    MARK(v);
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	6003      	str	r3, [r0, #0]
 8008678:	4602      	mov	r2, r0
 800867a:	88a1      	ldrh	r1, [r4, #4]
 800867c:	4620      	mov	r0, r4
}
 800867e:	bc10      	pop	{r4}
 8008680:	f000 bcdc 	b.w	800903c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8008684:	40000003 	.word	0x40000003
 8008688:	20001028 	.word	0x20001028

0800868c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>:
    for (unsigned i = 0; i < len; ++i) {
 800868c:	b1e1      	cbz	r1, 80086c8 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x3c>
void gcScanMany(TValue *data, unsigned len) {
 800868e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008690:	1f04      	subs	r4, r0, #4
        if (SKIP_PROCESSING(v))
 8008692:	4e0e      	ldr	r6, [pc, #56]	; (80086cc <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x40>)
 8008694:	4f0e      	ldr	r7, [pc, #56]	; (80086d0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8008696:	eb04 0581 	add.w	r5, r4, r1, lsl #2
        auto v = data[i];
 800869a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    return ((intptr_t)v & 3) || !v;
 800869e:	0793      	lsls	r3, r2, #30
 80086a0:	d10f      	bne.n	80086c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 80086a2:	b172      	cbz	r2, 80086c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
    return isTagged(v) || !((uint32_t)v >> 28);
 80086a4:	0f13      	lsrs	r3, r2, #28
 80086a6:	d00c      	beq.n	80086c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        if (SKIP_PROCESSING(v))
 80086a8:	6813      	ldr	r3, [r2, #0]
 80086aa:	4233      	tst	r3, r6
 80086ac:	d109      	bne.n	80086c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 80086ae:	78d9      	ldrb	r1, [r3, #3]
 80086b0:	29f9      	cmp	r1, #249	; 0xf9
 80086b2:	d106      	bne.n	80086c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        MARK(v);
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	6013      	str	r3, [r2, #0]
    void push(TValue value) { set(length, value); }
 80086ba:	88b9      	ldrh	r1, [r7, #4]
 80086bc:	4804      	ldr	r0, [pc, #16]	; (80086d0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 80086be:	f000 fcbd 	bl	800903c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 80086c2:	42ac      	cmp	r4, r5
 80086c4:	d1e9      	bne.n	800869a <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0xe>
}
 80086c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40000003 	.word	0x40000003
 80086d0:	20001028 	.word	0x20001028

080086d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>:
void gcScanSegment(Segment &seg) {
 80086d4:	b538      	push	{r3, r4, r5, lr}
    auto data = seg.getData();
 80086d6:	6804      	ldr	r4, [r0, #0]
    if (!data)
 80086d8:	b1ac      	cbz	r4, 8008706 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x32>
    GC_CHECK(!IS_MARKED(VT(segBl)), 47);
 80086da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086de:	4605      	mov	r5, r0
 80086e0:	07da      	lsls	r2, r3, #31
 80086e2:	d409      	bmi.n	80086f8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x24>
    MARK(segBl);
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	f844 3c04 	str.w	r3, [r4, #-4]
    gcScanMany(data, seg.getLength());
 80086ec:	88a9      	ldrh	r1, [r5, #4]
 80086ee:	4620      	mov	r0, r4
}
 80086f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gcScanMany(data, seg.getLength());
 80086f4:	f7ff bfca 	b.w	800868c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
    target_panic(800 + subcode);
 80086f8:	f240 304f 	movw	r0, #847	; 0x34f
 80086fc:	f7f7 fefe 	bl	80004fc <target_panic>
 8008700:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008704:	e7ee      	b.n	80086e4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x10>
}
 8008706:	bd38      	pop	{r3, r4, r5, pc}

08008708 <_ZN3pxt9gcProcessEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008708:	0782      	lsls	r2, r0, #30
 800870a:	d10b      	bne.n	8008724 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1c>
void gcProcess(TValue v) {
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	b140      	cbz	r0, 8008722 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008710:	0f02      	lsrs	r2, r0, #28
 8008712:	d006      	beq.n	8008722 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    if (SKIP_PROCESSING(v))
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	4910      	ldr	r1, [pc, #64]	; (8008758 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x50>)
 8008718:	420a      	tst	r2, r1
 800871a:	d102      	bne.n	8008722 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
 800871c:	78d1      	ldrb	r1, [r2, #3]
 800871e:	29f9      	cmp	r1, #249	; 0xf9
 8008720:	d001      	beq.n	8008726 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1e>
}
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	4770      	bx	lr
    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);
 8008726:	f022 0103 	bic.w	r1, r2, #3
 800872a:	6989      	ldr	r1, [r1, #24]
    MARK(v);
 800872c:	f042 0201 	orr.w	r2, r2, #1
 8008730:	6002      	str	r2, [r0, #0]
    if (scan)
 8008732:	b101      	cbz	r1, 8008736 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x2e>
        scan((RefObject *)v);
 8008734:	4788      	blx	r1
 8008736:	4c09      	ldr	r4, [pc, #36]	; (800875c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x54>)
        auto curr = (RefObject *)workQueue.pop();
 8008738:	4625      	mov	r5, r4
 800873a:	e007      	b.n	800874c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 800873c:	4628      	mov	r0, r5
 800873e:	f000 fc95 	bl	800906c <_ZN3pxt9LLSegment3popEv>
        scan = getScanMethod(curr->vtable & ~ANY_MARKED_MASK);
 8008742:	6803      	ldr	r3, [r0, #0]
 8008744:	f023 0303 	bic.w	r3, r3, #3
 8008748:	699b      	ldr	r3, [r3, #24]
        if (scan)
 800874a:	b91b      	cbnz	r3, 8008754 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x4c>
    while (workQueue.getLength()) {
 800874c:	88a3      	ldrh	r3, [r4, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f4      	bne.n	800873c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x34>
}
 8008752:	bd38      	pop	{r3, r4, r5, pc}
            scan(curr);
 8008754:	4798      	blx	r3
 8008756:	e7f9      	b.n	800874c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 8008758:	40000003 	.word	0x40000003
 800875c:	20001028 	.word	0x20001028

08008760 <_ZN3pxt2gcEi>:
void gc(int flags) {
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8008764:	4b89      	ldr	r3, [pc, #548]	; (800898c <_ZN3pxt2gcEi+0x22c>)
void gc(int flags) {
 8008766:	b083      	sub	sp, #12
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8008768:	781b      	ldrb	r3, [r3, #0]
void gc(int flags) {
 800876a:	9001      	str	r0, [sp, #4]
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 800876c:	079a      	lsls	r2, r3, #30
 800876e:	d505      	bpl.n	800877c <_ZN3pxt2gcEi+0x1c>
    target_panic(800 + subcode);
 8008770:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008774:	f7f7 fec2 	bl	80004fc <target_panic>
 8008778:	4b84      	ldr	r3, [pc, #528]	; (800898c <_ZN3pxt2gcEi+0x22c>)
 800877a:	781b      	ldrb	r3, [r3, #0]
    inGC |= IN_GC_COLLECT;
 800877c:	4983      	ldr	r1, [pc, #524]	; (800898c <_ZN3pxt2gcEi+0x22c>)
 800877e:	f043 0302 	orr.w	r3, r3, #2
 8008782:	700b      	strb	r3, [r1, #0]
    if (flags & 2) {
 8008784:	9b01      	ldr	r3, [sp, #4]
    auto data = gcRoots.getData();
 8008786:	4a82      	ldr	r2, [pc, #520]	; (8008990 <_ZN3pxt2gcEi+0x230>)
    if (flags & 2) {
 8008788:	f013 0602 	ands.w	r6, r3, #2
    auto data = gcRoots.getData();
 800878c:	6814      	ldr	r4, [r2, #0]
    unsigned getLength() { return length; };
 800878e:	8895      	ldrh	r5, [r2, #4]
    if (flags & 2) {
 8008790:	f040 80e2 	bne.w	8008958 <_ZN3pxt2gcEi+0x1f8>
    for (unsigned i = 0; i < len; ++i) {
 8008794:	b165      	cbz	r5, 80087b0 <_ZN3pxt2gcEi+0x50>
 8008796:	eb04 0585 	add.w	r5, r4, r5, lsl #2
        auto d = data[i];
 800879a:	f854 0b04 	ldr.w	r0, [r4], #4
        if ((uint32_t)d & 1) {
 800879e:	07c7      	lsls	r7, r0, #31
            d = *(TValue *)((uint32_t)d & ~1);
 80087a0:	bf44      	itt	mi
 80087a2:	f020 0001 	bicmi.w	r0, r0, #1
 80087a6:	6800      	ldrmi	r0, [r0, #0]
        gcProcess(d);
 80087a8:	f7ff ffae 	bl	8008708 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 80087ac:	42a5      	cmp	r5, r4
 80087ae:	d1f4      	bne.n	800879a <_ZN3pxt2gcEi+0x3a>
    if (globals) {
 80087b0:	4c78      	ldr	r4, [pc, #480]	; (8008994 <_ZN3pxt2gcEi+0x234>)
    gcProcessStacks(flags);
 80087b2:	9801      	ldr	r0, [sp, #4]
 80087b4:	f000 fff0 	bl	8009798 <_ZN3pxt15gcProcessStacksEi>
    if (globals) {
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	b1b3      	cbz	r3, 80087ea <_ZN3pxt2gcEi+0x8a>
        auto nonPtrs = bytecode[21];
 80087bc:	4b76      	ldr	r3, [pc, #472]	; (8008998 <_ZN3pxt2gcEi+0x238>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
        len = getNumGlobals() - nonPtrs;
 80087c4:	f000 fdc0 	bl	8009348 <_ZN3pxt13getNumGlobalsEv>
        data = globals + nonPtrs;
 80087c8:	6825      	ldr	r5, [r4, #0]
        len = getNumGlobals() - nonPtrs;
 80087ca:	eba0 0708 	sub.w	r7, r0, r8
        data = globals + nonPtrs;
 80087ce:	eb05 0588 	add.w	r5, r5, r8, lsl #2
        if (flags & 2)
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	f040 80ce 	bne.w	8008974 <_ZN3pxt2gcEi+0x214>
        for (unsigned i = 0; i < len; ++i) {
 80087d8:	b13f      	cbz	r7, 80087ea <_ZN3pxt2gcEi+0x8a>
 80087da:	2400      	movs	r4, #0
 80087dc:	3401      	adds	r4, #1
            gcProcess(*data++);
 80087de:	f855 0b04 	ldr.w	r0, [r5], #4
 80087e2:	f7ff ff91 	bl	8008708 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
        for (unsigned i = 0; i < len; ++i) {
 80087e6:	42a7      	cmp	r7, r4
 80087e8:	d1f8      	bne.n	80087dc <_ZN3pxt2gcEi+0x7c>
    len = tempRootLen;
 80087ea:	4a6c      	ldr	r2, [pc, #432]	; (800899c <_ZN3pxt2gcEi+0x23c>)
    data = tempRoot;
 80087ec:	4b6c      	ldr	r3, [pc, #432]	; (80089a0 <_ZN3pxt2gcEi+0x240>)
    len = tempRootLen;
 80087ee:	7816      	ldrb	r6, [r2, #0]
    data = tempRoot;
 80087f0:	681d      	ldr	r5, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 80087f2:	b13e      	cbz	r6, 8008804 <_ZN3pxt2gcEi+0xa4>
 80087f4:	2400      	movs	r4, #0
 80087f6:	3401      	adds	r4, #1
        gcProcess(*data++);
 80087f8:	f855 0b04 	ldr.w	r0, [r5], #4
 80087fc:	f7ff ff84 	bl	8008708 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 8008800:	42a6      	cmp	r6, r4
 8008802:	d1f8      	bne.n	80087f6 <_ZN3pxt2gcEi+0x96>
    firstFree = NULL;
 8008804:	2700      	movs	r7, #0
    for (auto h = firstBlock; h; h = h->next) {
 8008806:	4b67      	ldr	r3, [pc, #412]	; (80089a4 <_ZN3pxt2gcEi+0x244>)
 8008808:	f8d3 8000 	ldr.w	r8, [r3]
    firstFree = NULL;
 800880c:	4b66      	ldr	r3, [pc, #408]	; (80089a8 <_ZN3pxt2gcEi+0x248>)
 800880e:	601f      	str	r7, [r3, #0]
    for (auto h = firstBlock; h; h = h->next) {
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	f000 80b7 	beq.w	8008986 <_ZN3pxt2gcEi+0x226>
    RefBlock *prevFreePtr = NULL;
 8008818:	46ba      	mov	sl, r7
    uint32_t totalSize = 0;
 800881a:	46bb      	mov	fp, r7
 800881c:	4647      	mov	r7, r8
 800881e:	46d0      	mov	r8, sl
        auto words = h->blockSize >> 2;
 8008820:	687b      	ldr	r3, [r7, #4]
        auto d = h->data;
 8008822:	f107 0508 	add.w	r5, r7, #8
        auto words = h->blockSize >> 2;
 8008826:	089b      	lsrs	r3, r3, #2
        auto end = d + words;
 8008828:	eb05 0683 	add.w	r6, r5, r3, lsl #2
        while (d < end) {
 800882c:	42b5      	cmp	r5, r6
        totalSize += words;
 800882e:	449b      	add	fp, r3
        while (d < end) {
 8008830:	d243      	bcs.n	80088ba <_ZN3pxt2gcEi+0x15a>
 8008832:	9700      	str	r7, [sp, #0]
            if (IS_LIVE(d->vtable)) {
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	07d8      	lsls	r0, r3, #31
 8008838:	d46a      	bmi.n	8008910 <_ZN3pxt2gcEi+0x1b0>
 800883a:	0f1a      	lsrs	r2, r3, #28
 800883c:	2a06      	cmp	r2, #6
 800883e:	d067      	beq.n	8008910 <_ZN3pxt2gcEi+0x1b0>
                while (d < end) {
 8008840:	42ae      	cmp	r6, r5
 8008842:	f240 8085 	bls.w	8008950 <_ZN3pxt2gcEi+0x1f0>
 8008846:	462c      	mov	r4, r5
 8008848:	e000      	b.n	800884c <_ZN3pxt2gcEi+0xec>
 800884a:	6823      	ldr	r3, [r4, #0]
                    if (IS_FREE(d->vtable)) {
 800884c:	2b00      	cmp	r3, #0
                    } else if (IS_LIVE(d->vtable)) {
 800884e:	ea4f 7213 	mov.w	r2, r3, lsr #28
                    if (IS_FREE(d->vtable)) {
 8008852:	db0f      	blt.n	8008874 <_ZN3pxt2gcEi+0x114>
                    } else if (IS_LIVE(d->vtable)) {
 8008854:	07d9      	lsls	r1, r3, #31
 8008856:	d464      	bmi.n	8008922 <_ZN3pxt2gcEi+0x1c2>
 8008858:	2a06      	cmp	r2, #6
 800885a:	d062      	beq.n	8008922 <_ZN3pxt2gcEi+0x1c2>
                    } else if (IS_ARRAY(d->vtable)) {
 800885c:	005a      	lsls	r2, r3, #1
 800885e:	d409      	bmi.n	8008874 <_ZN3pxt2gcEi+0x114>
                        GC_CHECK(((VTable *)d->vtable)->magic == VTABLE_MAGIC, 41);
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	2bf9      	cmp	r3, #249	; 0xf9
 8008864:	d003      	beq.n	800886e <_ZN3pxt2gcEi+0x10e>
    target_panic(800 + subcode);
 8008866:	f240 3049 	movw	r0, #841	; 0x349
 800886a:	f7f7 fe47 	bl	80004fc <target_panic>
                        d->destroyVT();
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fbcc 	bl	800900c <_ZN3pxt9RefObject9destroyVTEv>
                    d += getObjectSize(d);
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff fe6d 	bl	8008554 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800887a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                while (d < end) {
 800887e:	42a6      	cmp	r6, r4
 8008880:	d8e3      	bhi.n	800884a <_ZN3pxt2gcEi+0xea>
 8008882:	1b67      	subs	r7, r4, r5
 8008884:	ea4f 0ca7 	mov.w	ip, r7, asr #2
 8008888:	ea4f 098c 	mov.w	r9, ip, lsl #2
                memset(start, 0xff, sz << 2);
 800888c:	464a      	mov	r2, r9
 800888e:	21ff      	movs	r1, #255	; 0xff
 8008890:	4628      	mov	r0, r5
 8008892:	44e0      	add	r8, ip
 8008894:	f7fb f9c5 	bl	8003c22 <memset>
                start->vtable = (sz << 2) | FREE_MASK;
 8008898:	f049 4200 	orr.w	r2, r9, #2147483648	; 0x80000000
                if (sz > 1) {
 800889c:	2f04      	cmp	r7, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800889e:	602a      	str	r2, [r5, #0]
                if (sz > 1) {
 80088a0:	dd0a      	ble.n	80088b8 <_ZN3pxt2gcEi+0x158>
                    start->nextFree = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	606b      	str	r3, [r5, #4]
                    if (!prevFreePtr) {
 80088a6:	f1ba 0f00 	cmp.w	sl, #0
 80088aa:	d04c      	beq.n	8008946 <_ZN3pxt2gcEi+0x1e6>
                        prevFreePtr->nextFree = start;
 80088ac:	f8ca 5004 	str.w	r5, [sl, #4]
 80088b0:	46aa      	mov	sl, r5
 80088b2:	4625      	mov	r5, r4
        while (d < end) {
 80088b4:	42ae      	cmp	r6, r5
 80088b6:	d8bd      	bhi.n	8008834 <_ZN3pxt2gcEi+0xd4>
 80088b8:	9f00      	ldr	r7, [sp, #0]
    for (auto h = firstBlock; h; h = h->next) {
 80088ba:	683f      	ldr	r7, [r7, #0]
 80088bc:	2f00      	cmp	r7, #0
 80088be:	d1af      	bne.n	8008820 <_ZN3pxt2gcEi+0xc0>
 80088c0:	4647      	mov	r7, r8
    if (midPtr) {
 80088c2:	4d3a      	ldr	r5, [pc, #232]	; (80089ac <_ZN3pxt2gcEi+0x24c>)
 80088c4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	00b9      	lsls	r1, r7, #2
 80088cc:	b193      	cbz	r3, 80088f4 <_ZN3pxt2gcEi+0x194>
        for (auto p = firstFree; p; p = p->nextFree) {
 80088ce:	4b36      	ldr	r3, [pc, #216]	; (80089a8 <_ZN3pxt2gcEi+0x248>)
        auto limit = freeSize >> 1;
 80088d0:	087f      	lsrs	r7, r7, #1
        for (auto p = firstFree; p; p = p->nextFree) {
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b173      	cbz	r3, 80088f4 <_ZN3pxt2gcEi+0x194>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80088d6:	681c      	ldr	r4, [r3, #0]
 80088d8:	f3c4 0491 	ubfx	r4, r4, #2, #18
            if (currFree > limit) {
 80088dc:	42bc      	cmp	r4, r7
 80088de:	d906      	bls.n	80088ee <_ZN3pxt2gcEi+0x18e>
 80088e0:	e043      	b.n	800896a <_ZN3pxt2gcEi+0x20a>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	f3c0 0091 	ubfx	r0, r0, #2, #18
 80088e8:	4404      	add	r4, r0
            if (currFree > limit) {
 80088ea:	42a7      	cmp	r7, r4
 80088ec:	d33d      	bcc.n	800896a <_ZN3pxt2gcEi+0x20a>
        for (auto p = firstFree; p; p = p->nextFree) {
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f6      	bne.n	80088e2 <_ZN3pxt2gcEi+0x182>
    if (flags & 1)
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d502      	bpl.n	8008900 <_ZN3pxt2gcEi+0x1a0>
        DMESG("GC %d/%d free", freeSize, totalSize);
 80088fa:	482d      	ldr	r0, [pc, #180]	; (80089b0 <_ZN3pxt2gcEi+0x250>)
 80088fc:	f001 fca0 	bl	800a240 <codal_dmesg>
    inGC &= ~IN_GC_COLLECT;
 8008900:	4a22      	ldr	r2, [pc, #136]	; (800898c <_ZN3pxt2gcEi+0x22c>)
 8008902:	7813      	ldrb	r3, [r2, #0]
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	7013      	strb	r3, [r2, #0]
}
 800890a:	b003      	add	sp, #12
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                d->vtable &= ~MARKED_MASK;
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	602b      	str	r3, [r5, #0]
                d += getObjectSize(d);
 8008916:	4628      	mov	r0, r5
 8008918:	f7ff fe1c 	bl	8008554 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800891c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8008920:	e7c8      	b.n	80088b4 <_ZN3pxt2gcEi+0x154>
 8008922:	eba4 0905 	sub.w	r9, r4, r5
 8008926:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800892a:	009a      	lsls	r2, r3, #2
                memset(start, 0xff, sz << 2);
 800892c:	21ff      	movs	r1, #255	; 0xff
 800892e:	4628      	mov	r0, r5
 8008930:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
 8008934:	4498      	add	r8, r3
 8008936:	f7fb f974 	bl	8003c22 <memset>
                if (sz > 1) {
 800893a:	f1b9 0f04 	cmp.w	r9, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800893e:	602f      	str	r7, [r5, #0]
                if (sz > 1) {
 8008940:	dcaf      	bgt.n	80088a2 <_ZN3pxt2gcEi+0x142>
 8008942:	4625      	mov	r5, r4
 8008944:	e7b6      	b.n	80088b4 <_ZN3pxt2gcEi+0x154>
                        firstFree = start;
 8008946:	4b18      	ldr	r3, [pc, #96]	; (80089a8 <_ZN3pxt2gcEi+0x248>)
 8008948:	46aa      	mov	sl, r5
 800894a:	601d      	str	r5, [r3, #0]
 800894c:	4625      	mov	r5, r4
 800894e:	e7b1      	b.n	80088b4 <_ZN3pxt2gcEi+0x154>
                start->vtable = (sz << 2) | FREE_MASK;
 8008950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	e7ad      	b.n	80088b4 <_ZN3pxt2gcEi+0x154>
        DMESG("--MARK");
 8008958:	4816      	ldr	r0, [pc, #88]	; (80089b4 <_ZN3pxt2gcEi+0x254>)
 800895a:	f001 fc71 	bl	800a240 <codal_dmesg>
        DMESG("RP:%p/%d", data, len);
 800895e:	462a      	mov	r2, r5
 8008960:	4621      	mov	r1, r4
 8008962:	4815      	ldr	r0, [pc, #84]	; (80089b8 <_ZN3pxt2gcEi+0x258>)
 8008964:	f001 fc6c 	bl	800a240 <codal_dmesg>
 8008968:	e714      	b.n	8008794 <_ZN3pxt2gcEi+0x34>
                midPtr = (uint8_t *)p + ((currFree - limit) << 2);
 800896a:	1be7      	subs	r7, r4, r7
 800896c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	e7bf      	b.n	80088f4 <_ZN3pxt2gcEi+0x194>
            DMESG("RG:%p/%d", data, len);
 8008974:	463a      	mov	r2, r7
 8008976:	4629      	mov	r1, r5
 8008978:	4810      	ldr	r0, [pc, #64]	; (80089bc <_ZN3pxt2gcEi+0x25c>)
 800897a:	f001 fc61 	bl	800a240 <codal_dmesg>
        for (unsigned i = 0; i < len; ++i) {
 800897e:	2f00      	cmp	r7, #0
 8008980:	f47f af2b 	bne.w	80087da <_ZN3pxt2gcEi+0x7a>
 8008984:	e731      	b.n	80087ea <_ZN3pxt2gcEi+0x8a>
    for (auto h = firstBlock; h; h = h->next) {
 8008986:	4642      	mov	r2, r8
 8008988:	4641      	mov	r1, r8
 800898a:	e7b3      	b.n	80088f4 <_ZN3pxt2gcEi+0x194>
 800898c:	20001660 	.word	0x20001660
 8008990:	20001018 	.word	0x20001018
 8008994:	20001030 	.word	0x20001030
 8008998:	20001034 	.word	0x20001034
 800899c:	20001661 	.word	0x20001661
 80089a0:	20001020 	.word	0x20001020
 80089a4:	20001010 	.word	0x20001010
 80089a8:	20001024 	.word	0x20001024
 80089ac:	20001014 	.word	0x20001014
 80089b0:	0800c538 	.word	0x0800c538
 80089b4:	0800c518 	.word	0x0800c518
 80089b8:	0800c520 	.word	0x0800c520
 80089bc:	0800c52c 	.word	0x0800c52c

080089c0 <_ZN3pxtL13allocateBlockEv>:
__attribute__((noinline)) static void allocateBlock() {
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (firstBlock) {
 80089c2:	4e30      	ldr	r6, [pc, #192]	; (8008a84 <_ZN3pxtL13allocateBlockEv+0xc4>)
 80089c4:	6833      	ldr	r3, [r6, #0]
 80089c6:	b12b      	cbz	r3, 80089d4 <_ZN3pxtL13allocateBlockEv+0x14>
        gc(2); // dump roots
 80089c8:	2002      	movs	r0, #2
 80089ca:	f7ff fec9 	bl	8008760 <_ZN3pxt2gcEi>
        target_panic(PANIC_GC_OOM);
 80089ce:	2015      	movs	r0, #21
 80089d0:	f7f7 fd94 	bl	80004fc <target_panic>
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80089d4:	2100      	movs	r1, #0
 80089d6:	20cf      	movs	r0, #207	; 0xcf
 80089d8:	f7fe febe 	bl	8007758 <_ZN3pxt9getConfigEii>
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80089dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80089e0:	4607      	mov	r7, r0
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80089e2:	20ce      	movs	r0, #206	; 0xce
 80089e4:	f7fe feb8 	bl	8007758 <_ZN3pxt9getConfigEii>
 80089e8:	4604      	mov	r4, r0
    auto heapSize = GC_GET_HEAP_SIZE();
 80089ea:	2000      	movs	r0, #0
 80089ec:	f002 f8f0 	bl	800abd0 <_Z16device_heap_sizeh>
    sz = heapSize - sysHeapSize;
 80089f0:	1b04      	subs	r4, r0, r4
    if (lowMem) {
 80089f2:	b15f      	cbz	r7, 8008a0c <_ZN3pxtL13allocateBlockEv+0x4c>
        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;
 80089f4:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 80089f8:	307f      	adds	r0, #127	; 0x7f
 80089fa:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80089fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
        int fillerSize = memSize - lowMem * 1024;
 8008a02:	eba3 2787 	sub.w	r7, r3, r7, lsl #10
        if (fillerSize > 0) {
 8008a06:	2f00      	cmp	r7, #0
 8008a08:	dc24      	bgt.n	8008a54 <_ZN3pxtL13allocateBlockEv+0x94>
 8008a0a:	2700      	movs	r7, #0
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f002 f939 	bl	800ac84 <device_malloc>
    curr->blockSize = sz - sizeof(GCBlock);
 8008a12:	f1a4 0208 	sub.w	r2, r4, #8
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 8008a16:	0793      	lsls	r3, r2, #30
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 8008a18:	4605      	mov	r5, r0
    curr->blockSize = sz - sizeof(GCBlock);
 8008a1a:	6042      	str	r2, [r0, #4]
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 8008a1c:	d120      	bne.n	8008a60 <_ZN3pxtL13allocateBlockEv+0xa0>
    curr->next = NULL;
 8008a1e:	2000      	movs	r0, #0
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8008a20:	4b19      	ldr	r3, [pc, #100]	; (8008a88 <_ZN3pxtL13allocateBlockEv+0xc8>)
    curr->data[4].vtable = (uint32_t)dummy;
 8008a22:	61af      	str	r7, [r5, #24]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8008a24:	6819      	ldr	r1, [r3, #0]
    firstFree = (RefBlock *)curr->data;
 8008a26:	f105 0708 	add.w	r7, r5, #8
    if (!firstBlock) {
 8008a2a:	6834      	ldr	r4, [r6, #0]
    firstFree = (RefBlock *)curr->data;
 8008a2c:	601f      	str	r7, [r3, #0]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 8008a2e:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    curr->next = NULL;
 8008a32:	6028      	str	r0, [r5, #0]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8008a34:	60e9      	str	r1, [r5, #12]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 8008a36:	60ab      	str	r3, [r5, #8]
    if (!firstBlock) {
 8008a38:	b90c      	cbnz	r4, 8008a3e <_ZN3pxtL13allocateBlockEv+0x7e>
 8008a3a:	e017      	b.n	8008a6c <_ZN3pxtL13allocateBlockEv+0xac>
 8008a3c:	461c      	mov	r4, r3
            if (!p->next) {
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1fb      	bne.n	8008a3c <_ZN3pxtL13allocateBlockEv+0x7c>
                GC_CHECK(p < curr, 40); // required by midPtr stuff
 8008a44:	42a5      	cmp	r5, r4
 8008a46:	d917      	bls.n	8008a78 <_ZN3pxtL13allocateBlockEv+0xb8>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <_ZN3pxtL13allocateBlockEv+0xcc>)
 8008a4a:	eb07 0292 	add.w	r2, r7, r2, lsr #2
                p->next = curr;
 8008a4e:	6025      	str	r5, [r4, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8008a50:	601a      	str	r2, [r3, #0]
}
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            dummy = GC_ALLOC_BLOCK(fillerSize);
 8008a54:	4638      	mov	r0, r7
 8008a56:	f002 f915 	bl	800ac84 <device_malloc>
            sz -= fillerSize;
 8008a5a:	1be4      	subs	r4, r4, r7
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	e7d5      	b.n	8008a0c <_ZN3pxtL13allocateBlockEv+0x4c>
 8008a60:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008a64:	f7f7 fd4a 	bl	80004fc <target_panic>
 8008a68:	686a      	ldr	r2, [r5, #4]
 8008a6a:	e7d8      	b.n	8008a1e <_ZN3pxtL13allocateBlockEv+0x5e>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <_ZN3pxtL13allocateBlockEv+0xcc>)
 8008a6e:	eb07 0292 	add.w	r2, r7, r2, lsr #2
        firstBlock = curr;
 8008a72:	6035      	str	r5, [r6, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a78:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008a7c:	f7f7 fd3e 	bl	80004fc <target_panic>
 8008a80:	686a      	ldr	r2, [r5, #4]
 8008a82:	e7e1      	b.n	8008a48 <_ZN3pxtL13allocateBlockEv+0x88>
 8008a84:	20001010 	.word	0x20001010
 8008a88:	20001024 	.word	0x20001024
 8008a8c:	20001014 	.word	0x20001014

08008a90 <free>:
    if (!ptr)
 8008a90:	b1f0      	cbz	r0, 8008ad0 <free+0x40>
    for (auto block = firstBlock; block; block = block->next) {
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <free+0x44>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	b1cb      	cbz	r3, 8008acc <free+0x3c>
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8008a98:	f103 0208 	add.w	r2, r3, #8
 8008a9c:	4290      	cmp	r0, r2
 8008a9e:	d9f9      	bls.n	8008a94 <free+0x4>
 8008aa0:	6859      	ldr	r1, [r3, #4]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d2f5      	bcs.n	8008a94 <free+0x4>
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008aa8:	f850 3c04 	ldr.w	r3, [r0, #-4]
extern "C" void free(void *ptr) {
 8008aac:	b510      	push	{r4, lr}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008aae:	0f5a      	lsrs	r2, r3, #29
 8008ab0:	2a03      	cmp	r2, #3
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	d005      	beq.n	8008ac2 <free+0x32>
 8008ab6:	f240 3049 	movw	r0, #841	; 0x349
 8008aba:	f7f7 fd1f 	bl	80004fc <target_panic>
 8008abe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    r[-1] |= FREE_MASK;
 8008ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ac6:	f844 3c04 	str.w	r3, [r4, #-4]
}
 8008aca:	bd10      	pop	{r4, pc}
        xfree(ptr);
 8008acc:	f002 b900 	b.w	800acd0 <device_free>
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20001010 	.word	0x20001010

08008ad8 <_ZN3pxt10gcAllocateEi>:
void *gcAllocate(int numbytes) {
 8008ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (numbytes > GC_MAX_ALLOC_SIZE)
 8008adc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    size_t numwords = (numbytes + 3) >> 2;
 8008ae0:	f100 0703 	add.w	r7, r0, #3
 8008ae4:	ea4f 07a7 	mov.w	r7, r7, asr #2
    if (numbytes > GC_MAX_ALLOC_SIZE)
 8008ae8:	dc73      	bgt.n	8008bd2 <_ZN3pxt10gcAllocateEi+0xfa>
    if (PXT_IN_ISR() || (inGC & IN_GC_ALLOC))
 8008aea:	f7f7 fce7 	bl	80004bc <target_in_isr>
 8008aee:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008bf8 <_ZN3pxt10gcAllocateEi+0x120>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d13e      	bne.n	8008b74 <_ZN3pxt10gcAllocateEi+0x9c>
 8008af6:	f89a 3000 	ldrb.w	r3, [sl]
 8008afa:	07da      	lsls	r2, r3, #31
 8008afc:	d43a      	bmi.n	8008b74 <_ZN3pxt10gcAllocateEi+0x9c>
    inGC |= IN_GC_ALLOC;
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	f88a 3000 	strb.w	r3, [sl]
        auto curr = getThreadContext();
 8008b06:	f000 fe3b 	bl	8009780 <_ZN3pxt16getThreadContextEv>
        if (curr && !curr->stack.top)
 8008b0a:	b110      	cbz	r0, 8008b12 <_ZN3pxt10gcAllocateEi+0x3a>
 8008b0c:	6843      	ldr	r3, [r0, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d06c      	beq.n	8008bec <_ZN3pxt10gcAllocateEi+0x114>
void *gcAllocate(int numbytes) {
 8008b12:	2600      	movs	r6, #0
 8008b14:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8008bfc <_ZN3pxt10gcAllocateEi+0x124>
            if (i == 0 && (uint8_t *)p > midPtr)
 8008b18:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8008c00 <_ZN3pxt10gcAllocateEi+0x128>
        for (auto p = firstFree; p; p = p->nextFree) {
 8008b1c:	f8db 4000 	ldr.w	r4, [fp]
 8008b20:	b1fc      	cbz	r4, 8008b62 <_ZN3pxt10gcAllocateEi+0x8a>
        RefBlock *prev = NULL;
 8008b22:	f04f 0800 	mov.w	r8, #0
            if (i == 0 && (uint8_t *)p > midPtr)
 8008b26:	b91e      	cbnz	r6, 8008b30 <_ZN3pxt10gcAllocateEi+0x58>
 8008b28:	f8d9 3000 	ldr.w	r3, [r9]
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d349      	bcc.n	8008bc4 <_ZN3pxt10gcAllocateEi+0xec>
    return ((intptr_t)v & 3) || !v;
 8008b30:	07a3      	lsls	r3, r4, #30
 8008b32:	d101      	bne.n	8008b38 <_ZN3pxt10gcAllocateEi+0x60>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008b34:	0f23      	lsrs	r3, r4, #28
 8008b36:	d103      	bne.n	8008b40 <_ZN3pxt10gcAllocateEi+0x68>
    target_panic(800 + subcode);
 8008b38:	f240 3051 	movw	r0, #849	; 0x351
 8008b3c:	f7f7 fcde 	bl	80004fc <target_panic>
            auto vt = p->vtable;
 8008b40:	6825      	ldr	r5, [r4, #0]
            if (!IS_FREE(vt))
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	db03      	blt.n	8008b4e <_ZN3pxt10gcAllocateEi+0x76>
 8008b46:	f240 304b 	movw	r0, #843	; 0x34b
 8008b4a:	f7f7 fcd7 	bl	80004fc <target_panic>
            int left = VAR_BLOCK_WORDS(vt) - numwords;
 8008b4e:	f3c5 0591 	ubfx	r5, r5, #2, #18
 8008b52:	1bed      	subs	r5, r5, r7
            if (left >= 0) {
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	da13      	bge.n	8008b82 <_ZN3pxt10gcAllocateEi+0xaa>
 8008b5a:	46a0      	mov	r8, r4
        for (auto p = firstFree; p; p = p->nextFree) {
 8008b5c:	461c      	mov	r4, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e1      	bne.n	8008b26 <_ZN3pxt10gcAllocateEi+0x4e>
        if (i == 0)
 8008b62:	b37e      	cbz	r6, 8008bc4 <_ZN3pxt10gcAllocateEi+0xec>
        else if (i == 1)
 8008b64:	2e01      	cmp	r6, #1
 8008b66:	d031      	beq.n	8008bcc <_ZN3pxt10gcAllocateEi+0xf4>
 8008b68:	f44f 7053 	mov.w	r0, #844	; 0x34c
 8008b6c:	f7f7 fcc6 	bl	80004fc <target_panic>
    for (int i = 0;; ++i) {
 8008b70:	3601      	adds	r6, #1
    }
 8008b72:	e7d3      	b.n	8008b1c <_ZN3pxt10gcAllocateEi+0x44>
        target_panic(PANIC_CALLED_FROM_ISR);
 8008b74:	f240 3092 	movw	r0, #914	; 0x392
 8008b78:	f7f7 fcc0 	bl	80004fc <target_panic>
 8008b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b80:	e7bd      	b.n	8008afe <_ZN3pxt10gcAllocateEi+0x26>
                if (left)
 8008b82:	d00a      	beq.n	8008b9a <_ZN3pxt10gcAllocateEi+0xc2>
                    nf->vtable = (left << 2) | FREE_MASK;
 8008b84:	00aa      	lsls	r2, r5, #2
 8008b86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008b8a:	f844 2027 	str.w	r2, [r4, r7, lsl #2]
                if (left >= 2) {
 8008b8e:	2d01      	cmp	r5, #1
                auto nf = (RefBlock *)((void **)p + numwords);
 8008b90:	eb04 0787 	add.w	r7, r4, r7, lsl #2
                    nf->nextFree = nextFree;
 8008b94:	bf1c      	itt	ne
 8008b96:	607b      	strne	r3, [r7, #4]
 8008b98:	463b      	movne	r3, r7
                if (prev)
 8008b9a:	f1b8 0f00 	cmp.w	r8, #0
 8008b9e:	d01d      	beq.n	8008bdc <_ZN3pxt10gcAllocateEi+0x104>
                    prev->nextFree = nf;
 8008ba0:	f8c8 3004 	str.w	r3, [r8, #4]
                p->vtable = 0;
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	6022      	str	r2, [r4, #0]
                GC_CHECK(!nf || !nf->nextFree || ((uint32_t)nf->nextFree) >> 20, 48);
 8008ba8:	b11b      	cbz	r3, 8008bb2 <_ZN3pxt10gcAllocateEi+0xda>
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	b10b      	cbz	r3, 8008bb2 <_ZN3pxt10gcAllocateEi+0xda>
 8008bae:	0d1b      	lsrs	r3, r3, #20
 8008bb0:	d017      	beq.n	8008be2 <_ZN3pxt10gcAllocateEi+0x10a>
                inGC &= ~IN_GC_ALLOC;
 8008bb2:	f89a 3000 	ldrb.w	r3, [sl]
}
 8008bb6:	4620      	mov	r0, r4
                inGC &= ~IN_GC_ALLOC;
 8008bb8:	f023 0301 	bic.w	r3, r3, #1
 8008bbc:	f88a 3000 	strb.w	r3, [sl]
}
 8008bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gc(0);
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f7ff fdcb 	bl	8008760 <_ZN3pxt2gcEi>
 8008bca:	e7d1      	b.n	8008b70 <_ZN3pxt10gcAllocateEi+0x98>
            allocateBlock();
 8008bcc:	f7ff fef8 	bl	80089c0 <_ZN3pxtL13allocateBlockEv>
 8008bd0:	e7ce      	b.n	8008b70 <_ZN3pxt10gcAllocateEi+0x98>
 8008bd2:	f240 304d 	movw	r0, #845	; 0x34d
 8008bd6:	f7f7 fc91 	bl	80004fc <target_panic>
 8008bda:	e786      	b.n	8008aea <_ZN3pxt10gcAllocateEi+0x12>
                    firstFree = nf;
 8008bdc:	f8cb 3000 	str.w	r3, [fp]
 8008be0:	e7e0      	b.n	8008ba4 <_ZN3pxt10gcAllocateEi+0xcc>
 8008be2:	f44f 7054 	mov.w	r0, #848	; 0x350
 8008be6:	f7f7 fc89 	bl	80004fc <target_panic>
 8008bea:	e7e2      	b.n	8008bb2 <_ZN3pxt10gcAllocateEi+0xda>
 8008bec:	f240 304e 	movw	r0, #846	; 0x34e
 8008bf0:	f7f7 fc84 	bl	80004fc <target_panic>
 8008bf4:	e78d      	b.n	8008b12 <_ZN3pxt10gcAllocateEi+0x3a>
 8008bf6:	bf00      	nop
 8008bf8:	20001660 	.word	0x20001660
 8008bfc:	20001024 	.word	0x20001024
 8008c00:	20001014 	.word	0x20001014

08008c04 <_ZN3pxt15gcAllocateArrayEi>:
void *gcAllocateArray(int numbytes) {
 8008c04:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8008c06:	1cc4      	adds	r4, r0, #3
 8008c08:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 8008c0c:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff ff62 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
    *r = ARRAY_MASK | numbytes;
 8008c14:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8008c18:	f840 4b04 	str.w	r4, [r0], #4
}
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	bf00      	nop

08008c20 <app_alloc>:
    if (!numbytes)
 8008c20:	b160      	cbz	r0, 8008c3c <app_alloc+0x1c>
void *app_alloc(int numbytes) {
 8008c22:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8008c24:	1cc4      	adds	r4, r0, #3
 8008c26:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 8008c2a:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff ff53 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8008c32:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8008c36:	6004      	str	r4, [r0, #0]
    return r + 1;
 8008c38:	3004      	adds	r0, #4
}
 8008c3a:	bd10      	pop	{r4, pc}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <malloc>:
extern "C" void *malloc(size_t sz) {
 8008c40:	b510      	push	{r4, lr}
 8008c42:	4604      	mov	r4, r0
    if (PXT_IN_ISR() || inGC)
 8008c44:	f7f7 fc3a 	bl	80004bc <target_in_isr>
 8008c48:	b910      	cbnz	r0, 8008c50 <malloc+0x10>
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <malloc+0x24>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b123      	cbz	r3, 8008c5a <malloc+0x1a>
        return xmalloc(sz);
 8008c50:	4620      	mov	r0, r4
}
 8008c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return xmalloc(sz);
 8008c56:	f002 b815 	b.w	800ac84 <device_malloc>
        return app_alloc(sz);
 8008c5a:	4620      	mov	r0, r4
}
 8008c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return app_alloc(sz);
 8008c60:	f7ff bfde 	b.w	8008c20 <app_alloc>
 8008c64:	20001660 	.word	0x20001660

08008c68 <realloc>:
    for (auto block = firstBlock; block; block = block->next) {
 8008c68:	4b1b      	ldr	r3, [pc, #108]	; (8008cd8 <realloc+0x70>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	b393      	cbz	r3, 8008cd4 <realloc+0x6c>
extern "C" void *realloc(void *ptr, size_t size) {
 8008c6e:	b570      	push	{r4, r5, r6, lr}
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8008c70:	f103 0408 	add.w	r4, r3, #8
 8008c74:	42a0      	cmp	r0, r4
 8008c76:	d903      	bls.n	8008c80 <realloc+0x18>
 8008c78:	685d      	ldr	r5, [r3, #4]
 8008c7a:	442c      	add	r4, r5
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d306      	bcc.n	8008c8e <realloc+0x26>
    for (auto block = firstBlock; block; block = block->next) {
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f4      	bne.n	8008c70 <realloc+0x8>
}
 8008c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return device_realloc(ptr, size);
 8008c8a:	f002 b851 	b.w	800ad30 <device_realloc>
 8008c8e:	4604      	mov	r4, r0
        void *mem = malloc(size);
 8008c90:	4608      	mov	r0, r1
 8008c92:	460d      	mov	r5, r1
 8008c94:	f7ff ffd4 	bl	8008c40 <malloc>
 8008c98:	4606      	mov	r6, r0
        if (ptr != NULL && mem != NULL) {
 8008c9a:	b194      	cbz	r4, 8008cc2 <realloc+0x5a>
 8008c9c:	b18e      	cbz	r6, 8008cc2 <realloc+0x5a>
            GC_CHECK((r[-1] >> 29) == 3, 41);
 8008c9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008ca2:	0f5a      	lsrs	r2, r3, #29
 8008ca4:	2a03      	cmp	r2, #3
 8008ca6:	d10e      	bne.n	8008cc6 <realloc+0x5e>
            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);
 8008ca8:	f3c3 0391 	ubfx	r3, r3, #2, #18
            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));
 8008cac:	009a      	lsls	r2, r3, #2
 8008cae:	42aa      	cmp	r2, r5
 8008cb0:	bf28      	it	cs
 8008cb2:	462a      	movcs	r2, r5
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7fa ff6a 	bl	8003b90 <memcpy>
            free(ptr);
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7ff fee7 	bl	8008a90 <free>
}
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	f240 3049 	movw	r0, #841	; 0x349
 8008cca:	f7f7 fc17 	bl	80004fc <target_panic>
 8008cce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008cd2:	e7e9      	b.n	8008ca8 <realloc+0x40>
        return device_realloc(ptr, size);
 8008cd4:	f002 b82c 	b.w	800ad30 <device_realloc>
 8008cd8:	20001010 	.word	0x20001010

08008cdc <_ZN3pxt17pushThreadContextEPvS0_>:
ThreadContext *pushThreadContext(void *sp, void *endSP) {
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
    if (PXT_IN_ISR())
 8008ce2:	f7f7 fbeb 	bl	80004bc <target_in_isr>
 8008ce6:	bb58      	cbnz	r0, 8008d40 <_ZN3pxt17pushThreadContextEPvS0_+0x64>
    auto curr = getThreadContext();
 8008ce8:	f000 fd4a 	bl	8009780 <_ZN3pxt16getThreadContextEv>
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 8008cec:	4d17      	ldr	r5, [pc, #92]	; (8008d4c <_ZN3pxt17pushThreadContextEPvS0_+0x70>)
 8008cee:	1bf3      	subs	r3, r6, r7
    tempRoot = (TValue *)endSP;
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <_ZN3pxt17pushThreadContextEPvS0_+0x74>)
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 8008cf2:	109b      	asrs	r3, r3, #2
 8008cf4:	702b      	strb	r3, [r5, #0]
    if (curr) {
 8008cf6:	4604      	mov	r4, r0
    tempRoot = (TValue *)endSP;
 8008cf8:	6017      	str	r7, [r2, #0]
    if (curr) {
 8008cfa:	b190      	cbz	r0, 8008d22 <_ZN3pxt17pushThreadContextEPvS0_+0x46>
    auto r = (uint32_t *)gcAllocate(numbytes);
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f7ff feeb 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <_ZN3pxt17pushThreadContextEPvS0_+0x78>)
        seg->top = curr->stack.top;
 8008d04:	6862      	ldr	r2, [r4, #4]
    r[-1] |= PERMA_MASK;
 8008d06:	6003      	str	r3, [r0, #0]
        seg->bottom = curr->stack.bottom;
 8008d08:	68a3      	ldr	r3, [r4, #8]
        seg->top = curr->stack.top;
 8008d0a:	6042      	str	r2, [r0, #4]
        seg->next = curr->stack.next;
 8008d0c:	68e2      	ldr	r2, [r4, #12]
        seg->bottom = curr->stack.bottom;
 8008d0e:	6083      	str	r3, [r0, #8]
    return r + 1;
 8008d10:	1d03      	adds	r3, r0, #4
        seg->next = curr->stack.next;
 8008d12:	60c2      	str	r2, [r0, #12]
        curr->stack.next = seg;
 8008d14:	60e3      	str	r3, [r4, #12]
    tempRootLen = 0;
 8008d16:	2300      	movs	r3, #0
    curr->stack.bottom = sp;
 8008d18:	60a6      	str	r6, [r4, #8]
    tempRootLen = 0;
 8008d1a:	702b      	strb	r3, [r5, #0]
    curr->stack.top = NULL;
 8008d1c:	6063      	str	r3, [r4, #4]
}
 8008d1e:	4620      	mov	r0, r4
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    auto r = (uint32_t *)gcAllocate(numbytes);
 8008d22:	2014      	movs	r0, #20
 8008d24:	f7ff fed8 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
        curr->stack.next = NULL;
 8008d28:	2300      	movs	r3, #0
        curr->globals = globals;
 8008d2a:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <_ZN3pxt17pushThreadContextEPvS0_+0x7c>)
    r[-1] |= PERMA_MASK;
 8008d2c:	490b      	ldr	r1, [pc, #44]	; (8008d5c <_ZN3pxt17pushThreadContextEPvS0_+0x80>)
        curr->globals = globals;
 8008d2e:	6812      	ldr	r2, [r2, #0]
    return r + 1;
 8008d30:	1d04      	adds	r4, r0, #4
    r[-1] |= PERMA_MASK;
 8008d32:	6001      	str	r1, [r0, #0]
        curr->globals = globals;
 8008d34:	6042      	str	r2, [r0, #4]
        curr->stack.next = NULL;
 8008d36:	6103      	str	r3, [r0, #16]
        setThreadContext(curr);
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fd27 	bl	800978c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 8008d3e:	e7ea      	b.n	8008d16 <_ZN3pxt17pushThreadContextEPvS0_+0x3a>
        target_panic(PANIC_CALLED_FROM_ISR);
 8008d40:	f240 3092 	movw	r0, #914	; 0x392
 8008d44:	f7f7 fbda 	bl	80004fc <target_panic>
 8008d48:	e7ce      	b.n	8008ce8 <_ZN3pxt17pushThreadContextEPvS0_+0xc>
 8008d4a:	bf00      	nop
 8008d4c:	20001661 	.word	0x20001661
 8008d50:	20001020 	.word	0x20001020
 8008d54:	60000010 	.word	0x60000010
 8008d58:	20001030 	.word	0x20001030
 8008d5c:	60000014 	.word	0x60000014

08008d60 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>:

void registerGC(TValue *root, int numwords) {
    if (!numwords)
 8008d60:	b161      	cbz	r1, 8008d7c <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1c>
        return;

    if (numwords > 1) {
 8008d62:	2901      	cmp	r1, #1
void registerGC(TValue *root, int numwords) {
 8008d64:	b538      	push	{r3, r4, r5, lr}
    if (numwords > 1) {
 8008d66:	dd0a      	ble.n	8008d7e <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1e>
        while (numwords-- > 0) {
 8008d68:	1e4c      	subs	r4, r1, #1
 8008d6a:	3c01      	subs	r4, #1
            registerGC(root++, 1);
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	1d05      	adds	r5, r0, #4
 8008d70:	f7ff fff6 	bl	8008d60 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
        while (numwords-- > 0) {
 8008d74:	1c63      	adds	r3, r4, #1
            registerGC(root++, 1);
 8008d76:	4628      	mov	r0, r5
        while (numwords-- > 0) {
 8008d78:	d1f7      	bne.n	8008d6a <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0xa>
        }
        return;
    }

    gcRoots.push((TValue)((uint32_t)root | 1));
}
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 8008d7e:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x30>)
 8008d80:	f040 0201 	orr.w	r2, r0, #1
 8008d84:	8899      	ldrh	r1, [r3, #4]
 8008d86:	4618      	mov	r0, r3
 8008d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8c:	f000 b956 	b.w	800903c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8008d90:	20001018 	.word	0x20001018

08008d94 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008d94:	0783      	lsls	r3, r0, #30
 8008d96:	d102      	bne.n	8008d9e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
 8008d98:	b108      	cbz	r0, 8008d9e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008d9a:	0f03      	lsrs	r3, r0, #28
 8008d9c:	d100      	bne.n	8008da0 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xc>

void registerGCPtr(TValue ptr) {
    if (isReadOnly(ptr))
        return;
    gcRoots.push(ptr);
}
 8008d9e:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0x18>)
 8008da2:	4602      	mov	r2, r0
 8008da4:	8899      	ldrh	r1, [r3, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 b948 	b.w	800903c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8008dac:	20001018 	.word	0x20001018

08008db0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008db0:	0782      	lsls	r2, r0, #30

void unregisterGCPtr(TValue ptr) {
 8008db2:	4603      	mov	r3, r0
 8008db4:	d102      	bne.n	8008dbc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
 8008db6:	b108      	cbz	r0, 8008dbc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008db8:	0f1b      	lsrs	r3, r3, #28
 8008dba:	d100      	bne.n	8008dbe <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xe>
    if (isReadOnly(ptr))
        return;
    removePtr(ptr);
}
 8008dbc:	4770      	bx	lr
    removePtr(ptr);
 8008dbe:	f7ff bbe9 	b.w	8008594 <_ZN3pxtL9removePtrEPNS_12TValueStructE>
 8008dc2:	bf00      	nop

08008dc4 <_ZN3pxt13RefCollection4scanEPS0_>:
void RefImage::scan(RefImage *t) {
    gcScan((TValue)t->buffer());
}

void RefCollection::scan(RefCollection *t) {
    gcScanSegment(t->head);
 8008dc4:	3004      	adds	r0, #4
 8008dc6:	f7ff bc85 	b.w	80086d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 8008dca:	bf00      	nop

08008dcc <_ZN3pxt9RefAction4scanEPS0_>:
}

void RefAction::scan(RefAction *t) {
    gcScanMany(t->fields, t->len);
 8008dcc:	8881      	ldrh	r1, [r0, #4]
 8008dce:	300c      	adds	r0, #12
 8008dd0:	f7ff bc5c 	b.w	800868c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>

08008dd4 <_ZN3pxt11RefRefLocal4scanEPS0_>:
}

void RefRefLocal::scan(RefRefLocal *t) {
    gcScan(t->v);
 8008dd4:	6840      	ldr	r0, [r0, #4]
 8008dd6:	f7ff bc3d 	b.w	8008654 <_ZN3pxt6gcScanEPNS_12TValueStructE>
 8008dda:	bf00      	nop

08008ddc <_ZN3pxt6RefMap4scanEPS0_>:
}

void RefMap::scan(RefMap *t) {
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4604      	mov	r4, r0
    gcScanSegment(t->keys);
 8008de0:	3004      	adds	r0, #4
 8008de2:	f7ff fc77 	bl	80086d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
    gcScanSegment(t->values);
 8008de6:	f104 000c 	add.w	r0, r4, #12
}
 8008dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gcScanSegment(t->values);
 8008dee:	f7ff bc71 	b.w	80086d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 8008df2:	bf00      	nop

08008df4 <_ZN3pxt14RefRecord_scanEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 8008df4:	f850 3b04 	ldr.w	r3, [r0], #4
 8008df8:	f023 0301 	bic.w	r3, r3, #1

void RefRecord_scan(RefRecord *r) {
    VTable *tbl = getVTable(r);
    gcScanMany(r->fields, (tbl->numbytes - sizeof(RefRecord)) >> 2);
 8008dfc:	8819      	ldrh	r1, [r3, #0]
 8008dfe:	3904      	subs	r1, #4
 8008e00:	0889      	lsrs	r1, r1, #2
 8008e02:	f7ff bc43 	b.w	800868c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
 8008e06:	bf00      	nop

08008e08 <_ZN3pxt13RefCollection6gcsizeEPS0_>:
    return SIZE(t->length());
}

unsigned RefCollection::gcsize(RefCollection *t) {
    return SIZE(0);
}
 8008e08:	2003      	movs	r0, #3
 8008e0a:	4770      	bx	lr

08008e0c <_ZN3pxt9RefAction6gcsizeEPS0_>:

unsigned RefAction::gcsize(RefAction *t) {
    return SIZE(t->len << 2);
 8008e0c:	8880      	ldrh	r0, [r0, #4]
 8008e0e:	0080      	lsls	r0, r0, #2
 8008e10:	300f      	adds	r0, #15
}
 8008e12:	0880      	lsrs	r0, r0, #2
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop

08008e18 <_ZN3pxt11RefRefLocal6gcsizeEPS0_>:

unsigned RefRefLocal::gcsize(RefRefLocal *t) {
    return SIZE(0);
}
 8008e18:	2002      	movs	r0, #2
 8008e1a:	4770      	bx	lr

08008e1c <_ZN3pxt6RefMap6gcsizeEPS0_>:

unsigned RefMap::gcsize(RefMap *t) {
    return SIZE(0);
}
 8008e1c:	2005      	movs	r0, #5
 8008e1e:	4770      	bx	lr

08008e20 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    LLSegment() : data(nullptr), length(0), size(0) {}
 8008e20:	2300      	movs	r3, #0
 8008e22:	4903      	ldr	r1, [pc, #12]	; (8008e30 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x10>)
 8008e24:	4a03      	ldr	r2, [pc, #12]	; (8008e34 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x14>)
 8008e26:	e9c1 3300 	strd	r3, r3, [r1]
 8008e2a:	e9c2 3300 	strd	r3, r3, [r2]

#endif

} // namespace pxt
 8008e2e:	4770      	bx	lr
 8008e30:	20001018 	.word	0x20001018
 8008e34:	20001028 	.word	0x20001028

08008e38 <_ZN5loops7foreverEPN3pxt12TValueStructE>:
//
//
//
//
void forever(Action a) {
    runForever(a);
 8008e38:	f000 bbd0 	b.w	80095dc <_ZN3pxt10runForeverEPNS_12TValueStructE>

08008e3c <_ZN5loops5pauseEi>:
//
//
//
//
void pause(int ms) {
    if (ms < 0) return;
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	db01      	blt.n	8008e44 <_ZN5loops5pauseEi+0x8>
    sleep_ms(ms);
 8008e40:	f000 bbc8 	b.w	80095d4 <_ZN3pxt8sleep_msEj>
}
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <_ZN3pxt17RefRecord_destroyEPNS_9RefRecordE>:
    for (int i = 0; i < len; ++i) {
        decr(r->fields[i]);
        r->fields[i] = 0;
    }
#endif
}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <_ZN3pxt13RefCollection7destroyEPS0_>:
#ifdef DEBUG_BUILD
    DMESG("In Segment::destroy");
    this->print();
#endif
    length = size = 0;
    data = nullptr;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
        decr(data[i]);
    }
#endif
    t->head.destroy();
}
 8008e52:	4770      	bx	lr

08008e54 <_ZN3pxt6RefMap7destroyEPS0_>:
    data = nullptr;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8008e5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
        keys[i] = nullptr;
    }
#endif
    t->keys.destroy();
    t->values.destroy();
}
 8008e5e:	4770      	bx	lr

08008e60 <_ZN3pxt9RefAction5printEPS0_>:
void RefAction::print(RefAction *t) {
 8008e60:	4601      	mov	r1, r0
 8008e62:	b500      	push	{lr}
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <_ZN3pxt9RefAction5printEPS0_+0x20>)
 8008e66:	6880      	ldr	r0, [r0, #8]
 8008e68:	888a      	ldrh	r2, [r1, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
void RefAction::print(RefAction *t) {
 8008e6c:	b083      	sub	sp, #12
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 8008e6e:	1ac3      	subs	r3, r0, r3
 8008e70:	9200      	str	r2, [sp, #0]
 8008e72:	4804      	ldr	r0, [pc, #16]	; (8008e84 <_ZN3pxt9RefAction5printEPS0_+0x24>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	f001 f9e3 	bl	800a240 <codal_dmesg>
}
 8008e7a:	b003      	add	sp, #12
 8008e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e80:	20001034 	.word	0x20001034
 8008e84:	0800c704 	.word	0x0800c704

08008e88 <_ZN3pxt11RefRefLocal5printEPS0_>:
void RefRefLocal::print(RefRefLocal *t) {
 8008e88:	4601      	mov	r1, r0
    DMESG("RefRefLocal %p r=%d v=%p", t, REFCNT(t), (void *)t->v);
 8008e8a:	6843      	ldr	r3, [r0, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4801      	ldr	r0, [pc, #4]	; (8008e94 <_ZN3pxt11RefRefLocal5printEPS0_+0xc>)
 8008e90:	f001 b9d6 	b.w	800a240 <codal_dmesg>
 8008e94:	0800c548 	.word	0x0800c548

08008e98 <_ZN3pxt6RefMap5printEPS0_>:
    }

    return -1;
}

void RefMap::print(RefMap *t) {
 8008e98:	4601      	mov	r1, r0
    DMESG("RefMap %p r=%d size=%d", t, REFCNT(t), t->keys.getLength());
 8008e9a:	8903      	ldrh	r3, [r0, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <_ZN3pxt6RefMap5printEPS0_+0xc>)
 8008ea0:	f001 b9ce 	b.w	800a240 <codal_dmesg>
 8008ea4:	0800c698 	.word	0x0800c698

08008ea8 <_ZN3pxt9LLSegment9setLengthEj.part.5>:
void LLSegment::setLength(unsigned newLen) {
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (newLen > size) {
 8008eaa:	88c3      	ldrh	r3, [r0, #6]
void LLSegment::setLength(unsigned newLen) {
 8008eac:	4605      	mov	r5, r0
    if (newLen > size) {
 8008eae:	428b      	cmp	r3, r1
void LLSegment::setLength(unsigned newLen) {
 8008eb0:	460e      	mov	r6, r1
    if (newLen > size) {
 8008eb2:	d225      	bcs.n	8008f00 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x58>
    if (size == 0) {
 8008eb4:	b39b      	cbz	r3, 8008f1e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x76>
    if (size < 64) {
 8008eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8008eb8:	dd2f      	ble.n	8008f1a <_ZN3pxt9LLSegment9setLengthEj.part.5+0x72>
    if (size < 512) {
 8008eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebe:	db36      	blt.n	8008f2e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x86>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8008ec0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
        return size + 256;
 8008ec4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if ((unsigned)size + 256 < Segment::MaxSize)
 8008ec8:	f503 7380 	add.w	r3, r3, #256	; 0x100
        return size + 256;
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	bf98      	it	ls
 8008ed0:	461c      	movls	r4, r3
 8008ed2:	42b4      	cmp	r4, r6
 8008ed4:	bfb8      	it	lt
 8008ed6:	4634      	movlt	r4, r6
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 8008ed8:	00a0      	lsls	r0, r4, #2
 8008eda:	f001 fed3 	bl	800ac84 <device_malloc>
        if (size) {
 8008ede:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 8008ee0:	4607      	mov	r7, r0
        if (size) {
 8008ee2:	b9f3      	cbnz	r3, 8008f22 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x7a>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 8008ee4:	1ae2      	subs	r2, r4, r3
 8008ee6:	0092      	lsls	r2, r2, #2
 8008ee8:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8008eec:	2100      	movs	r1, #0
 8008eee:	f7fa fe98 	bl	8003c22 <memset>
        xfree(data);
 8008ef2:	6828      	ldr	r0, [r5, #0]
 8008ef4:	f001 feec 	bl	800acd0 <device_free>
        data = tmp;
 8008ef8:	602f      	str	r7, [r5, #0]
        size = newSize;
 8008efa:	80ec      	strh	r4, [r5, #6]
    length = newLen;
 8008efc:	80ae      	strh	r6, [r5, #4]
}
 8008efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (newLen < length) {
 8008f00:	8882      	ldrh	r2, [r0, #4]
 8008f02:	4291      	cmp	r1, r2
 8008f04:	d2fa      	bcs.n	8008efc <_ZN3pxt9LLSegment9setLengthEj.part.5+0x54>
        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));
 8008f06:	6800      	ldr	r0, [r0, #0]
 8008f08:	1a52      	subs	r2, r2, r1
 8008f0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	2100      	movs	r1, #0
 8008f12:	f7fa fe86 	bl	8003c22 <memset>
    length = newLen;
 8008f16:	80ae      	strh	r6, [r5, #4]
}
 8008f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return size * 2; // Double
 8008f1a:	005c      	lsls	r4, r3, #1
 8008f1c:	e7d9      	b.n	8008ed2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
        return 4;
 8008f1e:	2404      	movs	r4, #4
 8008f20:	e7d7      	b.n	8008ed2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
            memcpy(tmp, data, size * sizeof(TValue));
 8008f22:	009a      	lsls	r2, r3, #2
 8008f24:	6829      	ldr	r1, [r5, #0]
 8008f26:	f7fa fe33 	bl	8003b90 <memcpy>
 8008f2a:	88eb      	ldrh	r3, [r5, #6]
 8008f2c:	e7da      	b.n	8008ee4 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x3c>
        return size * 5 / 3; // Grow by 1.66 rate
 8008f2e:	4c03      	ldr	r4, [pc, #12]	; (8008f3c <_ZN3pxt9LLSegment9setLengthEj.part.5+0x94>)
 8008f30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f34:	fba4 3403 	umull	r3, r4, r4, r3
 8008f38:	0864      	lsrs	r4, r4, #1
 8008f3a:	e7ca      	b.n	8008ed2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
 8008f3c:	aaaaaaab 	.word	0xaaaaaaab

08008f40 <_ZN3pxt8checkStrEbPKc.part.6>:
}

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
 8008f40:	4604      	mov	r4, r0
 8008f42:	b508      	push	{r3, lr}
    if (!cond) {
        ////  Show a message when check fails.
        debug_print("***** Check Failed: "); debug_println(msg); debug_flush();  //// TODO
 8008f44:	4804      	ldr	r0, [pc, #16]	; (8008f58 <_ZN3pxt8checkStrEbPKc.part.6+0x18>)
 8008f46:	f7fa ffb9 	bl	8003ebc <debug_print>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f7fa ffbc 	bl	8003ec8 <debug_println>
 8008f50:	f7fa ff3a 	bl	8003dc8 <debug_flush>
 8008f54:	e7fe      	b.n	8008f54 <_ZN3pxt8checkStrEbPKc.part.6+0x14>
 8008f56:	bf00      	nop
 8008f58:	0800c6dc 	.word	0x0800c6dc

08008f5c <_ZN3pxt9RefAction7destroyEPS0_>:
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop

08008f60 <_ZN3pxt11RefRefLocal7destroyEPS0_>:
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop

08008f64 <_ZN3pxt8mkActionEiPNS_9RefActionE>:
    return (VTable *)(r->vtable & ~1);
 8008f64:	680b      	ldr	r3, [r1, #0]
Action mkAction(int totallen, RefAction *act) {
 8008f66:	b570      	push	{r4, r5, r6, lr}
 8008f68:	f023 0301 	bic.w	r3, r3, #1
    if (!cond)
 8008f6c:	891b      	ldrh	r3, [r3, #8]
 8008f6e:	460c      	mov	r4, r1
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	4605      	mov	r5, r0
 8008f74:	d102      	bne.n	8008f7c <_ZN3pxt8mkActionEiPNS_9RefActionE+0x18>
    if (totallen == 0) {
 8008f76:	b96d      	cbnz	r5, 8008f94 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x30>
}
 8008f78:	4620      	mov	r0, r4
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
    DMESG("Error: %d [%d]", code, subcode);
 8008f7c:	4810      	ldr	r0, [pc, #64]	; (8008fc0 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x5c>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f240 3185 	movw	r1, #901	; 0x385
 8008f84:	f001 f95c 	bl	800a240 <codal_dmesg>
    target_panic(code);
 8008f88:	f240 3085 	movw	r0, #901	; 0x385
 8008f8c:	f7f7 fab6 	bl	80004fc <target_panic>
    if (totallen == 0) {
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	d0f1      	beq.n	8008f78 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x14>
    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(unsigned));
 8008f94:	1ce8      	adds	r0, r5, #3
 8008f96:	0080      	lsls	r0, r0, #2
 8008f98:	f7ff fd9e 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
    RefAction *r = new (ptr) RefAction();
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	b108      	cbz	r0, 8008fa4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x40>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x60>)
 8008fa2:	6003      	str	r3, [r0, #0]
    r->func = act->func;
 8008fa4:	68a3      	ldr	r3, [r4, #8]
    return (Action)r;
 8008fa6:	4634      	mov	r4, r6
    memset(r->fields, 0, r->len * sizeof(unsigned));
 8008fa8:	b2aa      	uxth	r2, r5
    r->func = act->func;
 8008faa:	60b3      	str	r3, [r6, #8]
    r->len = totallen;
 8008fac:	80b5      	strh	r5, [r6, #4]
    memset(r->fields, 0, r->len * sizeof(unsigned));
 8008fae:	0092      	lsls	r2, r2, #2
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	f106 000c 	add.w	r0, r6, #12
 8008fb6:	f7fa fe34 	bl	8003c22 <memset>
}
 8008fba:	4620      	mov	r0, r4
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800c6f4 	.word	0x0800c6f4
 8008fc4:	0800c2c0 	.word	0x0800c2c0

08008fc8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE>:
RefRecord *mkClassInstance(VTable *vtable) {
 8008fc8:	b538      	push	{r3, r4, r5, lr}
    if (!cond)
 8008fca:	6902      	ldr	r2, [r0, #16]
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x3c>)
 8008fce:	4605      	mov	r5, r0
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d009      	beq.n	8008fe8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x20>
    DMESG("Error: %d [%d]", code, subcode);
 8008fd4:	480c      	ldr	r0, [pc, #48]	; (8009008 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x40>)
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	f44f 7162 	mov.w	r1, #904	; 0x388
 8008fdc:	f001 f930 	bl	800a240 <codal_dmesg>
    target_panic(code);
 8008fe0:	f44f 7062 	mov.w	r0, #904	; 0x388
 8008fe4:	f7f7 fa8a 	bl	80004fc <target_panic>
    void *ptr = gcAllocate(vtable->numbytes);
 8008fe8:	8828      	ldrh	r0, [r5, #0]
 8008fea:	f7ff fd75 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
    RefRecord *r = new (ptr) RefRecord(vtable);
 8008fee:	4604      	mov	r4, r0
 8008ff0:	b100      	cbz	r0, 8008ff4 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x2c>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8008ff2:	6005      	str	r5, [r0, #0]
    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));
 8008ff4:	882a      	ldrh	r2, [r5, #0]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	3a04      	subs	r2, #4
 8008ffa:	1d20      	adds	r0, r4, #4
 8008ffc:	f7fa fe11 	bl	8003c22 <memset>
}
 8009000:	4620      	mov	r0, r4
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	08008e49 	.word	0x08008e49
 8009008:	0800c6f4 	.word	0x0800c6f4

0800900c <_ZN3pxt9RefObject9destroyVTEv>:
    return (VTable *)(r->vtable & ~1);
 800900c:	6803      	ldr	r3, [r0, #0]
 800900e:	f023 0301 	bic.w	r3, r3, #1
    ((RefObjectMethod)getVTable(this)->methods[0])(this);
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	4718      	bx	r3
 8009016:	bf00      	nop

08009018 <_ZN3pxt15deleteRefObjectEPNS_9RefObjectE>:
 8009018:	6803      	ldr	r3, [r0, #0]
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	4718      	bx	r3
 8009022:	bf00      	nop

08009024 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE>:
 8009024:	6803      	ldr	r3, [r0, #0]
void RefRecord_print(RefRecord *r) {
 8009026:	4601      	mov	r1, r0
 8009028:	f023 0301 	bic.w	r3, r3, #1
    DMESG("RefRecord %p r=%d size=%d bytes", r, REFCNT(r), getVTable(r)->numbytes);
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	2200      	movs	r2, #0
 8009030:	4801      	ldr	r0, [pc, #4]	; (8009038 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE+0x14>)
 8009032:	f001 b905 	b.w	800a240 <codal_dmesg>
 8009036:	bf00      	nop
 8009038:	0800c678 	.word	0x0800c678

0800903c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>:
    if (idx >= Segment::MaxSize)
 800903c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009040:	4299      	cmp	r1, r3
 8009042:	d80a      	bhi.n	800905a <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x1e>
    if (idx >= length)
 8009044:	8883      	ldrh	r3, [r0, #4]
void LLSegment::set(unsigned idx, TValue v) {
 8009046:	b570      	push	{r4, r5, r6, lr}
    if (idx >= length)
 8009048:	428b      	cmp	r3, r1
 800904a:	4605      	mov	r5, r0
 800904c:	4616      	mov	r6, r2
 800904e:	460c      	mov	r4, r1
 8009050:	d904      	bls.n	800905c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x20>
    data[idx] = v;
 8009052:	682b      	ldr	r3, [r5, #0]
 8009054:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	4770      	bx	lr
 800905c:	3101      	adds	r1, #1
 800905e:	f7ff ff23 	bl	8008ea8 <_ZN3pxt9LLSegment9setLengthEj.part.5>
    data[idx] = v;
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	bf00      	nop

0800906c <_ZN3pxt9LLSegment3popEv>:
    if (length > 0) {
 800906c:	8883      	ldrh	r3, [r0, #4]
 800906e:	b14b      	cbz	r3, 8009084 <_ZN3pxt9LLSegment3popEv+0x18>
        data[length] = 0;
 8009070:	2100      	movs	r1, #0
        TValue value = data[length];
 8009072:	6802      	ldr	r2, [r0, #0]
        --length;
 8009074:	3b01      	subs	r3, #1
 8009076:	b29b      	uxth	r3, r3
 8009078:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 800907a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = 0;
 800907e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 8009082:	4770      	bx	lr
    return 0;
 8009084:	4618      	mov	r0, r3
}
 8009086:	4770      	bx	lr

08009088 <_ZN3pxt7Segment9growByMinEt>:
    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));
 8009088:	88c3      	ldrh	r3, [r0, #6]
void Segment::growByMin(ramint_t minSize) {
 800908a:	b570      	push	{r4, r5, r6, lr}
    if (size == 0) {
 800908c:	b34b      	cbz	r3, 80090e2 <_ZN3pxt7Segment9growByMinEt+0x5a>
    if (size < 64) {
 800908e:	2b3f      	cmp	r3, #63	; 0x3f
 8009090:	dd0f      	ble.n	80090b2 <_ZN3pxt7Segment9growByMinEt+0x2a>
    if (size < 512) {
 8009092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009096:	db2c      	blt.n	80090f2 <_ZN3pxt7Segment9growByMinEt+0x6a>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009098:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800909c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80090a0:	4294      	cmp	r4, r2
 80090a2:	d823      	bhi.n	80090ec <_ZN3pxt7Segment9growByMinEt+0x64>
 80090a4:	b2a4      	uxth	r4, r4
 80090a6:	428c      	cmp	r4, r1
 80090a8:	bf38      	it	cc
 80090aa:	460c      	movcc	r4, r1
    if (size < newSize) {
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d307      	bcc.n	80090c0 <_ZN3pxt7Segment9growByMinEt+0x38>
}
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
        return size * 2; // Double
 80090b2:	005c      	lsls	r4, r3, #1
 80090b4:	b2a4      	uxth	r4, r4
 80090b6:	428c      	cmp	r4, r1
 80090b8:	bf38      	it	cc
 80090ba:	460c      	movcc	r4, r1
    if (size < newSize) {
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d2f7      	bcs.n	80090b0 <_ZN3pxt7Segment9growByMinEt+0x28>
 80090c0:	4605      	mov	r5, r0
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 80090c2:	00a0      	lsls	r0, r4, #2
 80090c4:	f7ff fd9e 	bl	8008c04 <_ZN3pxt15gcAllocateArrayEi>
        if (size)
 80090c8:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 80090ca:	4606      	mov	r6, r0
        if (size)
 80090cc:	b9e3      	cbnz	r3, 8009108 <_ZN3pxt7Segment9growByMinEt+0x80>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 80090ce:	1ae2      	subs	r2, r4, r3
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80090d6:	2100      	movs	r1, #0
 80090d8:	f7fa fda3 	bl	8003c22 <memset>
        data = tmp;
 80090dc:	602e      	str	r6, [r5, #0]
        size = newSize;
 80090de:	80ec      	strh	r4, [r5, #6]
}
 80090e0:	bd70      	pop	{r4, r5, r6, pc}
 80090e2:	2904      	cmp	r1, #4
 80090e4:	bf38      	it	cc
 80090e6:	2104      	movcc	r1, #4
 80090e8:	460c      	mov	r4, r1
 80090ea:	e7e7      	b.n	80090bc <_ZN3pxt7Segment9growByMinEt+0x34>
    if ((unsigned)size + 256 < Segment::MaxSize)
 80090ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80090f0:	e7e4      	b.n	80090bc <_ZN3pxt7Segment9growByMinEt+0x34>
        return size * 5 / 3; // Grow by 1.66 rate
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <_ZN3pxt7Segment9growByMinEt+0x8c>)
 80090f4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80090f8:	fba2 2404 	umull	r2, r4, r2, r4
 80090fc:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8009100:	428c      	cmp	r4, r1
 8009102:	bf38      	it	cc
 8009104:	460c      	movcc	r4, r1
 8009106:	e7d9      	b.n	80090bc <_ZN3pxt7Segment9growByMinEt+0x34>
            memcpy(tmp, data, size * sizeof(TValue));
 8009108:	009a      	lsls	r2, r3, #2
 800910a:	6829      	ldr	r1, [r5, #0]
 800910c:	f7fa fd40 	bl	8003b90 <memcpy>
 8009110:	88eb      	ldrh	r3, [r5, #6]
 8009112:	e7dc      	b.n	80090ce <_ZN3pxt7Segment9growByMinEt+0x46>
 8009114:	aaaaaaab 	.word	0xaaaaaaab

08009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>:
void Segment::set(unsigned i, TValue value) {
 8009118:	b530      	push	{r4, r5, lr}
    if (i < size) {
 800911a:	88c3      	ldrh	r3, [r0, #6]
void Segment::set(unsigned i, TValue value) {
 800911c:	b083      	sub	sp, #12
    if (i < size) {
 800911e:	428b      	cmp	r3, r1
void Segment::set(unsigned i, TValue value) {
 8009120:	4605      	mov	r5, r0
 8009122:	460c      	mov	r4, r1
    if (i < size) {
 8009124:	d909      	bls.n	800913a <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x22>
        data[i] = value;
 8009126:	6803      	ldr	r3, [r0, #0]
 8009128:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (length <= i) {
 800912c:	88ab      	ldrh	r3, [r5, #4]
 800912e:	429c      	cmp	r4, r3
        length = i + 1;
 8009130:	bf24      	itt	cs
 8009132:	3401      	addcs	r4, #1
 8009134:	80ac      	strhcs	r4, [r5, #4]
}
 8009136:	b003      	add	sp, #12
 8009138:	bd30      	pop	{r4, r5, pc}
    } else if (i < Segment::MaxSize) {
 800913a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800913e:	4299      	cmp	r1, r3
 8009140:	d8f9      	bhi.n	8009136 <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x1e>
        growByMin(i + 1);
 8009142:	3101      	adds	r1, #1
 8009144:	b289      	uxth	r1, r1
 8009146:	9201      	str	r2, [sp, #4]
 8009148:	f7ff ff9e 	bl	8009088 <_ZN3pxt7Segment9growByMinEt>
        data[i] = value;
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	9a01      	ldr	r2, [sp, #4]
 8009150:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009154:	e7ea      	b.n	800912c <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x14>
 8009156:	bf00      	nop

08009158 <_ZN3pxt7Segment9setLengthEj>:
void Segment::setLength(unsigned newLength) {
 8009158:	b538      	push	{r3, r4, r5, lr}
    if (newLength > size) {
 800915a:	88c3      	ldrh	r3, [r0, #6]
void Segment::setLength(unsigned newLength) {
 800915c:	4604      	mov	r4, r0
    if (newLength > size) {
 800915e:	428b      	cmp	r3, r1
void Segment::setLength(unsigned newLength) {
 8009160:	460d      	mov	r5, r1
    if (newLength > size) {
 8009162:	d202      	bcs.n	800916a <_ZN3pxt7Segment9setLengthEj+0x12>
        ensure(length);
 8009164:	8881      	ldrh	r1, [r0, #4]
    if (newSize < size) {
 8009166:	428b      	cmp	r3, r1
 8009168:	d901      	bls.n	800916e <_ZN3pxt7Segment9setLengthEj+0x16>
    length = newLength;
 800916a:	80a5      	strh	r5, [r4, #4]
}
 800916c:	bd38      	pop	{r3, r4, r5, pc}
    growByMin(newSize);
 800916e:	f7ff ff8b 	bl	8009088 <_ZN3pxt7Segment9growByMinEt>
    length = newLength;
 8009172:	80a5      	strh	r5, [r4, #4]
}
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	bf00      	nop

08009178 <_ZN3pxt7Segment3popEv>:
    if (length > 0) {
 8009178:	8883      	ldrh	r3, [r0, #4]
 800917a:	b14b      	cbz	r3, 8009190 <_ZN3pxt7Segment3popEv+0x18>
        data[length] = Segment::DefaultValue;
 800917c:	2100      	movs	r1, #0
        TValue value = data[length];
 800917e:	6802      	ldr	r2, [r0, #0]
        --length;
 8009180:	3b01      	subs	r3, #1
 8009182:	b29b      	uxth	r3, r3
 8009184:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 8009186:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = Segment::DefaultValue;
 800918a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 800918e:	4770      	bx	lr
    return Segment::DefaultValue;
 8009190:	4618      	mov	r0, r3
}
 8009192:	4770      	bx	lr

08009194 <_ZN3pxt7Segment6removeEj>:
TValue Segment::remove(unsigned i) {
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (i < length) {
 8009196:	8883      	ldrh	r3, [r0, #4]
 8009198:	428b      	cmp	r3, r1
 800919a:	d91d      	bls.n	80091d8 <_ZN3pxt7Segment6removeEj+0x44>
        TValue ret = data[i];
 800919c:	6805      	ldr	r5, [r0, #0]
        if (i + 1 < length) {
 800919e:	1c4a      	adds	r2, r1, #1
        TValue ret = data[i];
 80091a0:	008f      	lsls	r7, r1, #2
        if (i + 1 < length) {
 80091a2:	4293      	cmp	r3, r2
 80091a4:	4604      	mov	r4, r0
        TValue ret = data[i];
 80091a6:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
 80091aa:	eb05 0007 	add.w	r0, r5, r7
        if (i + 1 < length) {
 80091ae:	d807      	bhi.n	80091c0 <_ZN3pxt7Segment6removeEj+0x2c>
        data[length] = Segment::DefaultValue;
 80091b0:	2200      	movs	r2, #0
        length--;
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	80a3      	strh	r3, [r4, #4]
        data[length] = Segment::DefaultValue;
 80091b8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
}
 80091bc:	4630      	mov	r0, r6
 80091be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(unsigned));
 80091c0:	1a5a      	subs	r2, r3, r1
 80091c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80091c6:	3a01      	subs	r2, #1
 80091c8:	1d39      	adds	r1, r7, #4
 80091ca:	4429      	add	r1, r5
 80091cc:	0092      	lsls	r2, r2, #2
 80091ce:	f7fa fd0e 	bl	8003bee <memmove>
 80091d2:	88a3      	ldrh	r3, [r4, #4]
 80091d4:	6825      	ldr	r5, [r4, #0]
 80091d6:	e7eb      	b.n	80091b0 <_ZN3pxt7Segment6removeEj+0x1c>
    return Segment::DefaultValue;
 80091d8:	2600      	movs	r6, #0
 80091da:	e7ef      	b.n	80091bc <_ZN3pxt7Segment6removeEj+0x28>

080091dc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>:
    if (i < length) {
 80091dc:	8883      	ldrh	r3, [r0, #4]
 80091de:	428b      	cmp	r3, r1
 80091e0:	d91c      	bls.n	800921c <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x40>
void Segment::insert(unsigned i, TValue value) {
 80091e2:	b570      	push	{r4, r5, r6, lr}
 80091e4:	460e      	mov	r6, r1
 80091e6:	4615      	mov	r5, r2
        ensure(length + 1);
 80091e8:	1c59      	adds	r1, r3, #1
    if (newSize < size) {
 80091ea:	88c2      	ldrh	r2, [r0, #6]
        ensure(length + 1);
 80091ec:	b289      	uxth	r1, r1
    if (newSize < size) {
 80091ee:	428a      	cmp	r2, r1
 80091f0:	4604      	mov	r4, r0
 80091f2:	d90f      	bls.n	8009214 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x38>
        memmove(data + i + 1, data + i, (length - i) * sizeof(unsigned));
 80091f4:	1c70      	adds	r0, r6, #1
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	0080      	lsls	r0, r0, #2
 80091fa:	1b9b      	subs	r3, r3, r6
 80091fc:	1f06      	subs	r6, r0, #4
 80091fe:	009a      	lsls	r2, r3, #2
 8009200:	4408      	add	r0, r1
 8009202:	4431      	add	r1, r6
 8009204:	f7fa fcf3 	bl	8003bee <memmove>
        length++;
 8009208:	88a3      	ldrh	r3, [r4, #4]
        data[i] = value;
 800920a:	6822      	ldr	r2, [r4, #0]
        length++;
 800920c:	3301      	adds	r3, #1
        data[i] = value;
 800920e:	5195      	str	r5, [r2, r6]
        length++;
 8009210:	80a3      	strh	r3, [r4, #4]
}
 8009212:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 8009214:	f7ff ff38 	bl	8009088 <_ZN3pxt7Segment9growByMinEt>
 8009218:	88a3      	ldrh	r3, [r4, #4]
 800921a:	e7eb      	b.n	80091f4 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x18>
        set(i, value);
 800921c:	f7ff bf7c 	b.w	8009118 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08009220 <_ZN3pxt7Segment5printEv>:
void Segment::print() {
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4605      	mov	r5, r0
    DMESG("Segment: %p, length: %d, size: %d", data, (unsigned)length, (unsigned)size);
 8009224:	480a      	ldr	r0, [pc, #40]	; (8009250 <_ZN3pxt7Segment5printEv+0x30>)
 8009226:	88eb      	ldrh	r3, [r5, #6]
 8009228:	88aa      	ldrh	r2, [r5, #4]
 800922a:	6829      	ldr	r1, [r5, #0]
 800922c:	f001 f808 	bl	800a240 <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009230:	88eb      	ldrh	r3, [r5, #6]
 8009232:	b15b      	cbz	r3, 800924c <_ZN3pxt7Segment5printEv+0x2c>
 8009234:	2400      	movs	r4, #0
        DMESG("-> %d", (unsigned)(uintptr_t)data[i]);
 8009236:	4e07      	ldr	r6, [pc, #28]	; (8009254 <_ZN3pxt7Segment5printEv+0x34>)
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	4630      	mov	r0, r6
 800923c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009240:	f000 fffe 	bl	800a240 <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009244:	88eb      	ldrh	r3, [r5, #6]
 8009246:	3401      	adds	r4, #1
 8009248:	42a3      	cmp	r3, r4
 800924a:	d8f5      	bhi.n	8009238 <_ZN3pxt7Segment5printEv+0x18>
}
 800924c:	bd70      	pop	{r4, r5, r6, pc}
 800924e:	bf00      	nop
 8009250:	0800c6b0 	.word	0x0800c6b0
 8009254:	0800c6d4 	.word	0x0800c6d4

08009258 <_ZN3pxt13RefCollection5printEPS0_>:
void RefCollection::print(RefCollection *t) {
 8009258:	b510      	push	{r4, lr}
 800925a:	4604      	mov	r4, r0
    DMESG("RefCollection %p r=%d size=%d", t, REFCNT(t), t->head.getLength());
 800925c:	8903      	ldrh	r3, [r0, #8]
 800925e:	4601      	mov	r1, r0
 8009260:	2200      	movs	r2, #0
 8009262:	4804      	ldr	r0, [pc, #16]	; (8009274 <_ZN3pxt13RefCollection5printEPS0_+0x1c>)
 8009264:	f000 ffec 	bl	800a240 <codal_dmesg>
    t->head.print();
 8009268:	1d20      	adds	r0, r4, #4
}
 800926a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    t->head.print();
 800926e:	f7ff bfd7 	b.w	8009220 <_ZN3pxt7Segment5printEv>
 8009272:	bf00      	nop
 8009274:	0800c658 	.word	0x0800c658

08009278 <_ZN3pxt13RefCollectionC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009278:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800927a:	4902      	ldr	r1, [pc, #8]	; (8009284 <_ZN3pxt13RefCollectionC1Ev+0xc>)
    Segment() : data(nullptr), length(0), size(0) {}
 800927c:	6082      	str	r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800927e:	e9c0 1200 	strd	r1, r2, [r0]
PXT_VTABLE_CTOR(RefCollection) {}
 8009282:	4770      	bx	lr
 8009284:	0800c350 	.word	0x0800c350

08009288 <_ZN3pxt11RefRefLocalC1Ev>:
    v = 0;
 8009288:	2100      	movs	r1, #0
 800928a:	4a02      	ldr	r2, [pc, #8]	; (8009294 <_ZN3pxt11RefRefLocalC1Ev+0xc>)
 800928c:	e9c0 2100 	strd	r2, r1, [r0]
}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	0800c320 	.word	0x0800c320

08009298 <_ZN3pxt6RefMapC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009298:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800929a:	4903      	ldr	r1, [pc, #12]	; (80092a8 <_ZN3pxt6RefMapC1Ev+0x10>)
    Segment() : data(nullptr), length(0), size(0) {}
 800929c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 80092a0:	e9c0 1200 	strd	r1, r2, [r0]
    Segment() : data(nullptr), length(0), size(0) {}
 80092a4:	6102      	str	r2, [r0, #16]
PXT_VTABLE_CTOR(RefMap) {}
 80092a6:	4770      	bx	lr
 80092a8:	0800c2f0 	.word	0x0800c2f0

080092ac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>:
int RefMap::findIdx(String key) {
 80092ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned getLength() { return length; };
 80092b0:	8906      	ldrh	r6, [r0, #8]
    auto data = (String *)keys.getData();
 80092b2:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; ++i) {
 80092b4:	b31e      	cbz	r6, 80092fe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
        if (data[i] == key)
 80092b6:	6828      	ldr	r0, [r5, #0]
 80092b8:	4281      	cmp	r1, r0
 80092ba:	d027      	beq.n	800930c <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x60>
    for (unsigned i = 0; i < len; ++i) {
 80092bc:	2300      	movs	r3, #0
        if (data[i] == key)
 80092be:	462a      	mov	r2, r5
 80092c0:	e003      	b.n	80092ca <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x1e>
 80092c2:	f852 4f04 	ldr.w	r4, [r2, #4]!
 80092c6:	428c      	cmp	r4, r1
 80092c8:	d01d      	beq.n	8009306 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x5a>
    for (unsigned i = 0; i < len; ++i) {
 80092ca:	3301      	adds	r3, #1
 80092cc:	42b3      	cmp	r3, r6
 80092ce:	d1f8      	bne.n	80092c2 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x16>
    auto keylen = key->length;
 80092d0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 80092d4:	1d8f      	adds	r7, r1, #6
    for (unsigned i = 0; i < len; ++i) {
 80092d6:	2400      	movs	r4, #0
 80092d8:	e004      	b.n	80092e4 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x38>
 80092da:	3401      	adds	r4, #1
 80092dc:	42b4      	cmp	r4, r6
 80092de:	d00e      	beq.n	80092fe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
 80092e0:	f855 0f04 	ldr.w	r0, [r5, #4]!
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 80092e4:	8883      	ldrh	r3, [r0, #4]
 80092e6:	4543      	cmp	r3, r8
 80092e8:	d1f7      	bne.n	80092da <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
 80092ea:	3006      	adds	r0, #6
 80092ec:	4642      	mov	r2, r8
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7fa fc6e 	bl	8003bd0 <memcmp>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d1f0      	bne.n	80092da <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
            return i;
 80092f8:	4620      	mov	r0, r4
}
 80092fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009306:	4618      	mov	r0, r3
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data[i] == key)
 800930c:	2000      	movs	r0, #0
            return i;
 800930e:	e7f8      	b.n	8009302 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x56>

08009310 <_ZN3pxt13debugMemLeaksEv>:
void debugMemLeaks() {}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop

08009314 <_ZN3pxt5errorENS_9PXT_PANICEi>:
void error(PXT_PANIC code, int subcode) {
 8009314:	b510      	push	{r4, lr}
 8009316:	4604      	mov	r4, r0
    DMESG("Error: %d [%d]", code, subcode);
 8009318:	460a      	mov	r2, r1
 800931a:	4804      	ldr	r0, [pc, #16]	; (800932c <_ZN3pxt5errorENS_9PXT_PANICEi+0x18>)
 800931c:	4621      	mov	r1, r4
 800931e:	f000 ff8f 	bl	800a240 <codal_dmesg>
    target_panic(code);
 8009322:	4620      	mov	r0, r4
}
 8009324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_panic(code);
 8009328:	f7f7 b8e8 	b.w	80004fc <target_panic>
 800932c:	0800c6f4 	.word	0x0800c6f4

08009330 <_ZN3pxt12templateHashEv>:
        }
    }
}

int templateHash() {
    return ((int *)bytecode)[4];
 8009330:	4b01      	ldr	r3, [pc, #4]	; (8009338 <_ZN3pxt12templateHashEv+0x8>)
 8009332:	681b      	ldr	r3, [r3, #0]
}
 8009334:	6918      	ldr	r0, [r3, #16]
 8009336:	4770      	bx	lr
 8009338:	20001034 	.word	0x20001034

0800933c <_ZN3pxt11programHashEv>:

int programHash() {
    return ((int *)bytecode)[6];
 800933c:	4b01      	ldr	r3, [pc, #4]	; (8009344 <_ZN3pxt11programHashEv+0x8>)
 800933e:	681b      	ldr	r3, [r3, #0]
}
 8009340:	6998      	ldr	r0, [r3, #24]
 8009342:	4770      	bx	lr
 8009344:	20001034 	.word	0x20001034

08009348 <_ZN3pxt13getNumGlobalsEv>:

int getNumGlobals() {
    return bytecode[16];
 8009348:	4b01      	ldr	r3, [pc, #4]	; (8009350 <_ZN3pxt13getNumGlobalsEv+0x8>)
 800934a:	681b      	ldr	r3, [r3, #0]
}
 800934c:	8c18      	ldrh	r0, [r3, #32]
 800934e:	4770      	bx	lr
 8009350:	20001034 	.word	0x20001034

08009354 <_ZN3pxt11exec_binaryEPj>:

#ifndef X86_64
void exec_binary(unsigned *pc) {
 8009354:	b570      	push	{r4, r5, r6, lr}

    ////  If the runtime version fails, then we are probably running an empty executable e.g.
    ////  pxt-maker/libs/stm32bluepill/built/dockercodal/build/STM32_BLUE_PILL.bin
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
 8009356:	4604      	mov	r4, r0
 8009358:	f854 6b03 	ldr.w	r6, [r4], #3
void exec_binary(unsigned *pc) {
 800935c:	4605      	mov	r5, r0
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
 800935e:	4831      	ldr	r0, [pc, #196]	; (8009424 <_ZN3pxt11exec_binaryEPj+0xd0>)
 8009360:	f7fa fdac 	bl	8003ebc <debug_print>
 8009364:	4620      	mov	r0, r4
 8009366:	f7fa fdef 	bl	8003f48 <debug_printhex_unsigned>
 800936a:	482f      	ldr	r0, [pc, #188]	; (8009428 <_ZN3pxt11exec_binaryEPj+0xd4>)
 800936c:	f7fa fda6 	bl	8003ebc <debug_print>
 8009370:	4630      	mov	r0, r6
 8009372:	f7fa fde9 	bl	8003f48 <debug_printhex_unsigned>
 8009376:	482d      	ldr	r0, [pc, #180]	; (800942c <_ZN3pxt11exec_binaryEPj+0xd8>)
 8009378:	f7fa fda6 	bl	8003ec8 <debug_println>
 800937c:	f7fa fd24 	bl	8003dc8 <debug_flush>
    if (!cond) {
 8009380:	f244 2310 	movw	r3, #16912	; 0x4210
 8009384:	429e      	cmp	r6, r3
 8009386:	d149      	bne.n	800941c <_ZN3pxt11exec_binaryEPj+0xc8>
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO
 8009388:	4829      	ldr	r0, [pc, #164]	; (8009430 <_ZN3pxt11exec_binaryEPj+0xdc>)
 800938a:	f7fa fd9d 	bl	8003ec8 <debug_println>
 800938e:	f7fa fd1b 	bl	8003dc8 <debug_flush>

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009392:	686b      	ldr	r3, [r5, #4]
 8009394:	4c27      	ldr	r4, [pc, #156]	; (8009434 <_ZN3pxt11exec_binaryEPj+0xe0>)
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009396:	8c18      	ldrh	r0, [r3, #32]
    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009398:	6023      	str	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 800939a:	0080      	lsls	r0, r0, #2
 800939c:	f7ff fc40 	bl	8008c20 <app_alloc>
    return bytecode[16];
 80093a0:	6823      	ldr	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 80093a2:	4e25      	ldr	r6, [pc, #148]	; (8009438 <_ZN3pxt11exec_binaryEPj+0xe4>)
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 80093a4:	8c1a      	ldrh	r2, [r3, #32]
 80093a6:	2100      	movs	r1, #0
 80093a8:	0092      	lsls	r2, r2, #2
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 80093aa:	6030      	str	r0, [r6, #0]
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 80093ac:	f7fa fc39 	bl	8003c22 <memset>
    debug_println("---exec_binary compare"); debug_flush();  //// TODO
 80093b0:	4822      	ldr	r0, [pc, #136]	; (800943c <_ZN3pxt11exec_binaryEPj+0xe8>)
 80093b2:	f7fa fd89 	bl	8003ec8 <debug_println>
 80093b6:	f7fa fd07 	bl	8003dc8 <debug_flush>
    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	4a20      	ldr	r2, [pc, #128]	; (8009440 <_ZN3pxt11exec_binaryEPj+0xec>)
 80093be:	6819      	ldr	r1, [r3, #0]
    globals[0] = (TValue)&globals;
 80093c0:	6830      	ldr	r0, [r6, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 80093c2:	4291      	cmp	r1, r2
    globals[0] = (TValue)&globals;
 80093c4:	6006      	str	r6, [r0, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 80093c6:	d126      	bne.n	8009416 <_ZN3pxt11exec_binaryEPj+0xc2>
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68ab      	ldr	r3, [r5, #8]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d122      	bne.n	8009416 <_ZN3pxt11exec_binaryEPj+0xc2>
             ":( Failed partial flash");
    debug_println("---exec_binary initPerfCounters"); debug_flush();  //// TODO
 80093d0:	481c      	ldr	r0, [pc, #112]	; (8009444 <_ZN3pxt11exec_binaryEPj+0xf0>)
 80093d2:	f7fa fd79 	bl	8003ec8 <debug_println>
 80093d6:	f7fa fcf7 	bl	8003dc8 <debug_flush>
    uintptr_t startptr = (uintptr_t)bytecode;

    startptr += 64; // header

    initPerfCounters();
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 80093da:	481b      	ldr	r0, [pc, #108]	; (8009448 <_ZN3pxt11exec_binaryEPj+0xf4>)
    uintptr_t startptr = (uintptr_t)bytecode;
 80093dc:	6825      	ldr	r5, [r4, #0]
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 80093de:	f7fa fd73 	bl	8003ec8 <debug_println>
 80093e2:	f7fa fcf1 	bl	8003dc8 <debug_flush>

    initRuntime();
 80093e6:	f000 f921 	bl	800962c <_ZN3pxt11initRuntimeEv>
    debug_println("---exec_binary runAction0"); debug_flush();  //// TODO
 80093ea:	4818      	ldr	r0, [pc, #96]	; (800944c <_ZN3pxt11exec_binaryEPj+0xf8>)
 80093ec:	f7fa fd6c 	bl	8003ec8 <debug_println>
 80093f0:	f7fa fcea 	bl	8003dc8 <debug_flush>
    return asmRunAction3(a, 0, 0, 0);
 80093f4:	2300      	movs	r3, #0
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	4619      	mov	r1, r3
 80093fa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80093fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8009400:	461a      	mov	r2, r3
 8009402:	47a0      	blx	r4

    runAction0((Action)startptr);
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO
 8009404:	4812      	ldr	r0, [pc, #72]	; (8009450 <_ZN3pxt11exec_binaryEPj+0xfc>)
 8009406:	f7fa fd5f 	bl	8003ec8 <debug_println>
 800940a:	f7fa fcdd 	bl	8003dc8 <debug_flush>

    pxt::releaseFiber();
}
 800940e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pxt::releaseFiber();
 8009412:	f000 b8dd 	b.w	80095d0 <_ZN3pxt12releaseFiberEv>
 8009416:	480f      	ldr	r0, [pc, #60]	; (8009454 <_ZN3pxt11exec_binaryEPj+0x100>)
 8009418:	f7ff fd92 	bl	8008f40 <_ZN3pxt8checkStrEbPKc.part.6>
 800941c:	480e      	ldr	r0, [pc, #56]	; (8009458 <_ZN3pxt11exec_binaryEPj+0x104>)
 800941e:	f7ff fd8f 	bl	8008f40 <_ZN3pxt8checkStrEbPKc.part.6>
 8009422:	bf00      	nop
 8009424:	0800c564 	.word	0x0800c564
 8009428:	0800c57c 	.word	0x0800c57c
 800942c:	0800c88c 	.word	0x0800c88c
 8009430:	0800c59c 	.word	0x0800c59c
 8009434:	20001034 	.word	0x20001034
 8009438:	20001030 	.word	0x20001030
 800943c:	0800c5b4 	.word	0x0800c5b4
 8009440:	923b8e70 	.word	0x923b8e70
 8009444:	0800c5cc 	.word	0x0800c5cc
 8009448:	0800c5ec 	.word	0x0800c5ec
 800944c:	0800c608 	.word	0x0800c608
 8009450:	0800c624 	.word	0x0800c624
 8009454:	0800c640 	.word	0x0800c640
 8009458:	0800c584 	.word	0x0800c584

0800945c <_ZN3pxt5startEv>:

void start() {
    exec_binary((unsigned *)functionsAndBytecode);
 800945c:	4801      	ldr	r0, [pc, #4]	; (8009464 <_ZN3pxt5startEv+0x8>)
 800945e:	f7ff bf79 	b.w	8009354 <_ZN3pxt11exec_binaryEPj>
 8009462:	bf00      	nop
 8009464:	0800bf00 	.word	0x0800bf00

08009468 <_ZN6Array_7isArrayEPN3pxt12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009468:	f010 0303 	ands.w	r3, r0, #3
 800946c:	d108      	bne.n	8009480 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x18>
 800946e:	b130      	cbz	r0, 800947e <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
    if (vt->magic == VTABLE_MAGIC)
 8009476:	78d1      	ldrb	r1, [r2, #3]
 8009478:	29f9      	cmp	r1, #249	; 0xf9
 800947a:	d003      	beq.n	8009484 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x1c>

namespace Array_ {
//
bool isArray(TValue arr) {
    auto vt = getAnyVTable(arr);
    return vt && vt->classNo == BuiltInType::RefCollection;
 800947c:	4618      	mov	r0, r3
}
 800947e:	4770      	bx	lr
    return vt && vt->classNo == BuiltInType::RefCollection;
 8009480:	2000      	movs	r0, #0
 8009482:	4770      	bx	lr
 8009484:	8910      	ldrh	r0, [r2, #8]
 8009486:	f1a0 0006 	sub.w	r0, r0, #6
 800948a:	fab0 f080 	clz	r0, r0
 800948e:	0940      	lsrs	r0, r0, #5
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop

08009494 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE>:
} // namespace Array_

namespace pxtrt {
//
RefCollection *keysOf(TValue v) {
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4605      	mov	r5, r0
    auto r = NEW_GC(RefCollection);
 8009498:	200c      	movs	r0, #12
 800949a:	f7ff fb1d 	bl	8008ad8 <_ZN3pxt10gcAllocateEi>
 800949e:	4604      	mov	r4, r0
 80094a0:	b120      	cbz	r0, 80094ac <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x18>
    Segment() : data(nullptr), length(0), size(0) {}
 80094a2:	2300      	movs	r3, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 80094a4:	4a13      	ldr	r2, [pc, #76]	; (80094f4 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x60>)
    Segment() : data(nullptr), length(0), size(0) {}
 80094a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 80094aa:	6002      	str	r2, [r0, #0]
    return ((intptr_t)v & 3) || !v;
 80094ac:	07ab      	lsls	r3, r5, #30
 80094ae:	d106      	bne.n	80094be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
 80094b0:	b12d      	cbz	r5, 80094be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    return (VTable *)(r->vtable & ~1);
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	f023 0301 	bic.w	r3, r3, #1
    if (vt->magic == VTABLE_MAGIC)
 80094b8:	78da      	ldrb	r2, [r3, #3]
 80094ba:	2af9      	cmp	r2, #249	; 0xf9
 80094bc:	d001      	beq.n	80094c2 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2e>
    auto dst = r->getData();
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
    for (unsigned i = 0; i < len; ++i)
        incr(dst[i]);
    return r;
}
 80094be:	4620      	mov	r0, r4
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
    if (getAnyVTable(v) != &RefMap_vtable)
 80094c2:	4a0d      	ldr	r2, [pc, #52]	; (80094f8 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x64>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d1fa      	bne.n	80094be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    auto len = rm->keys.getLength();
 80094c8:	892e      	ldrh	r6, [r5, #8]
    if (!len)
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	d0f7      	beq.n	80094be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    if (newLength > size) {
 80094ce:	8963      	ldrh	r3, [r4, #10]
 80094d0:	429e      	cmp	r6, r3
 80094d2:	d902      	bls.n	80094da <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
        ensure(length);
 80094d4:	8921      	ldrh	r1, [r4, #8]
    if (newSize < size) {
 80094d6:	428b      	cmp	r3, r1
 80094d8:	d907      	bls.n	80094ea <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x56>
    length = newLength;
 80094da:	8126      	strh	r6, [r4, #8]
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
 80094dc:	00b2      	lsls	r2, r6, #2
 80094de:	6869      	ldr	r1, [r5, #4]
 80094e0:	6860      	ldr	r0, [r4, #4]
 80094e2:	f7fa fb55 	bl	8003b90 <memcpy>
}
 80094e6:	4620      	mov	r0, r4
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 80094ea:	1d20      	adds	r0, r4, #4
 80094ec:	f7ff fdcc 	bl	8009088 <_ZN3pxt7Segment9growByMinEt>
 80094f0:	e7f3      	b.n	80094da <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
 80094f2:	bf00      	nop
 80094f4:	0800c350 	.word	0x0800c350
 80094f8:	0800c2f0 	.word	0x0800c2f0

080094fc <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 80094fc:	4800      	ldr	r0, [pc, #0]	; (8009500 <_ZN5codal14CodalComponent4initEv+0x4>)
 80094fe:	4770      	bx	lr
 8009500:	fffffc16 	.word	0xfffffc16

08009504 <_ZN3pxtL10runAction0EPNS_12TValueStructE>:
    return asmRunAction3(a, 0, 0, 0);
 8009504:	2300      	movs	r3, #0
 8009506:	4904      	ldr	r1, [pc, #16]	; (8009518 <_ZN3pxtL10runAction0EPNS_12TValueStructE+0x14>)
static inline TValue runAction0(Action a) {
 8009508:	b410      	push	{r4}
    return asmRunAction3(a, 0, 0, 0);
 800950a:	680c      	ldr	r4, [r1, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8009510:	4619      	mov	r1, r3
 8009512:	46a4      	mov	ip, r4
}
 8009514:	bc10      	pop	{r4}
    return asmRunAction3(a, 0, 0, 0);
 8009516:	4760      	bx	ip
 8009518:	20001034 	.word	0x20001034

0800951c <_ZN3pxt13dispatchEventEN5codal5EventE>:
// ---------------------------------------------------------------------------

// We have the invariant that if [dispatchEvent] is registered against the DAL
// for a given event, then [handlersMap] contains a valid entry for that
// event.
void dispatchEvent(Event e) {
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	466b      	mov	r3, sp
 8009522:	e883 0003 	stmia.w	r3, {r0, r1}
    lastEvent = e;
 8009526:	4a17      	ldr	r2, [pc, #92]	; (8009584 <_ZN3pxt13dispatchEventEN5codal5EventE+0x68>)
 8009528:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800952c:	f8bd 4000 	ldrh.w	r4, [sp]
 8009530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009534:	e882 0003 	stmia.w	r2, {r0, r1}

    auto curr = findBinding(e.source, e.value);
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
 800953c:	f7fd fdd6 	bl	80070ec <_ZN3pxt11findBindingEii>
 8009540:	4606      	mov	r6, r0
    auto value = fromInt(e.value);
 8009542:	4628      	mov	r0, r5
 8009544:	f7fe f8a4 	bl	8007690 <_ZN3pxt7fromIntEi>
 8009548:	4605      	mov	r5, r0
    if (curr)
 800954a:	b13e      	cbz	r6, 800955c <_ZN3pxt13dispatchEventEN5codal5EventE+0x40>
    return asmRunAction3(a, arg0, 0, 0);
 800954c:	2300      	movs	r3, #0
 800954e:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 8009550:	68f0      	ldr	r0, [r6, #12]
 8009552:	6811      	ldr	r1, [r2, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8009558:	4629      	mov	r1, r5
 800955a:	47b0      	blx	r6
        runAction1(curr->action, value);

    curr = findBinding(e.source, DEVICE_EVT_ANY);
 800955c:	4620      	mov	r0, r4
 800955e:	2100      	movs	r1, #0
 8009560:	f7fd fdc4 	bl	80070ec <_ZN3pxt11findBindingEii>
    if (curr)
 8009564:	b158      	cbz	r0, 800957e <_ZN3pxt13dispatchEventEN5codal5EventE+0x62>
 8009566:	2300      	movs	r3, #0
 8009568:	4a07      	ldr	r2, [pc, #28]	; (8009588 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 800956a:	4629      	mov	r1, r5
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	68c0      	ldr	r0, [r0, #12]
 8009570:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009572:	461a      	mov	r2, r3
 8009574:	46a4      	mov	ip, r4
        runAction1(curr->action, value);
}
 8009576:	b002      	add	sp, #8
 8009578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800957c:	4760      	bx	ip
 800957e:	b002      	add	sp, #8
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	bf00      	nop
 8009584:	20001084 	.word	0x20001084
 8009588:	20001034 	.word	0x20001034

0800958c <_ZN3pxt9fiberDoneEPv>:
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
}

void fiberDone(void *a) {
 800958c:	b508      	push	{r3, lr}
    decr((Action)a);
    unregisterGCPtr((Action)a);
 800958e:	f7ff fc0f 	bl	8008db0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>
    release_fiber();
}
 8009592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    release_fiber();
 8009596:	f001 ba69 	b.w	800aa6c <_ZN5codal13release_fiberEv>
 800959a:	bf00      	nop

0800959c <_ZN3pxt12forever_stubEPv>:

void sleep_us(uint64_t us) {
    target_wait_us(us);
}

void forever_stub(void *a) {
 800959c:	4606      	mov	r6, r0
 800959e:	b508      	push	{r3, lr}
 80095a0:	4d05      	ldr	r5, [pc, #20]	; (80095b8 <_ZN3pxt12forever_stubEPv+0x1c>)
    return asmRunAction3(a, 0, 0, 0);
 80095a2:	2300      	movs	r3, #0
 80095a4:	6828      	ldr	r0, [r5, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80095aa:	4619      	mov	r1, r3
 80095ac:	4630      	mov	r0, r6
 80095ae:	47a0      	blx	r4
    while (true) {
        runAction0((Action)a);
        fiber_sleep(20);
 80095b0:	2014      	movs	r0, #20
 80095b2:	f001 f9e1 	bl	800a978 <_ZN5codal11fiber_sleepEm>
 80095b6:	e7f4      	b.n	80095a2 <_ZN3pxt12forever_stubEPv+0x6>
 80095b8:	20001034 	.word	0x20001034

080095bc <_ZN5codal3_cm5TimerD1Ev>:

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 80095bc:	b510      	push	{r4, lr}
 80095be:	4604      	mov	r4, r0
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <_ZN5codal3_cm5TimerD1Ev+0x10>)
 80095c2:	6003      	str	r3, [r0, #0]
 80095c4:	f001 fd18 	bl	800aff8 <_ZN5codal5TimerD1Ev>
 80095c8:	4620      	mov	r0, r4
 80095ca:	bd10      	pop	{r4, pc}
 80095cc:	0800ca6c 	.word	0x0800ca6c

080095d0 <_ZN3pxt12releaseFiberEv>:
    release_fiber();
 80095d0:	f001 ba4c 	b.w	800aa6c <_ZN5codal13release_fiberEv>

080095d4 <_ZN3pxt8sleep_msEj>:
    fiber_sleep(ms);
 80095d4:	f001 b9d0 	b.w	800a978 <_ZN5codal11fiber_sleepEm>

080095d8 <_ZN3pxt8sleep_usEy>:
    target_wait_us(us);
 80095d8:	f7f6 bf56 	b.w	8000488 <target_wait_us>

080095dc <_ZN3pxt10runForeverEPNS_12TValueStructE>:
    }
}

void runForever(Action a) {
    if (a != 0) {
 80095dc:	b150      	cbz	r0, 80095f4 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x18>
void runForever(Action a) {
 80095de:	b510      	push	{r4, lr}
 80095e0:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 80095e2:	f7ff fbd7 	bl	8008d94 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber(forever_stub, (void *)a);
 80095e6:	4621      	mov	r1, r4
    }
}
 80095e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber(forever_stub, (void *)a);
 80095ec:	4a02      	ldr	r2, [pc, #8]	; (80095f8 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x1c>)
 80095ee:	4803      	ldr	r0, [pc, #12]	; (80095fc <_ZN3pxt10runForeverEPNS_12TValueStructE+0x20>)
 80095f0:	f001 b8b6 	b.w	800a760 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	0800aaa1 	.word	0x0800aaa1
 80095fc:	0800959d 	.word	0x0800959d

08009600 <_ZN3pxt13runInParallelEPNS_12TValueStructE>:

void runInParallel(Action a) {
    if (a != 0) {
 8009600:	b150      	cbz	r0, 8009618 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x18>
void runInParallel(Action a) {
 8009602:	b510      	push	{r4, lr}
 8009604:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 8009606:	f7ff fbc5 	bl	8008d94 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 800960a:	4621      	mov	r1, r4
    }
}
 800960c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 8009610:	4a02      	ldr	r2, [pc, #8]	; (800961c <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x1c>)
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x20>)
 8009614:	f001 b8a4 	b.w	800a760 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	0800958d 	.word	0x0800958d
 8009620:	08009505 	.word	0x08009505

08009624 <_ZN3pxt12waitForEventEii>:

void waitForEvent(int id, int event) {
    fiber_wait_for_event(id, event);
 8009624:	b289      	uxth	r1, r1
 8009626:	b280      	uxth	r0, r0
 8009628:	f001 b9cc 	b.w	800a9c4 <_ZN5codal20fiber_wait_for_eventEtt>

0800962c <_ZN3pxt11initRuntimeEv>:
}

void initRuntime() {
 800962c:	b5f0      	push	{r4, r5, r6, r7, lr}
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 800962e:	483f      	ldr	r0, [pc, #252]	; (800972c <_ZN3pxt11initRuntimeEv+0x100>)
void initRuntime() {
 8009630:	b083      	sub	sp, #12
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 8009632:	f7fa fc49 	bl	8003ec8 <debug_println>
 8009636:	f7fa fbc7 	bl	8003dc8 <debug_flush>
    cpu_clock_init();
 800963a:	f000 fb1f 	bl	8009c7c <_Z14cpu_clock_initv>
    debug_println("---initCodal commInit"); debug_flush();  //// TODO
 800963e:	483c      	ldr	r0, [pc, #240]	; (8009730 <_ZN3pxt11initRuntimeEv+0x104>)
 8009640:	f7fa fc42 	bl	8003ec8 <debug_println>
 8009644:	f7fa fbc0 	bl	8003dc8 <debug_flush>
    int commSize = bytecode[20];
 8009648:	4b3a      	ldr	r3, [pc, #232]	; (8009734 <_ZN3pxt11initRuntimeEv+0x108>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
    if (!commSize)
 800964e:	b35f      	cbz	r7, 80096a8 <_ZN3pxt11initRuntimeEv+0x7c>
    FreeList *head = NULL;
 8009650:	2400      	movs	r4, #0
        if (p == commBase) {
 8009652:	4e39      	ldr	r6, [pc, #228]	; (8009738 <_ZN3pxt11initRuntimeEv+0x10c>)
 8009654:	e004      	b.n	8009660 <_ZN3pxt11initRuntimeEv+0x34>
 8009656:	42b5      	cmp	r5, r6
 8009658:	d012      	beq.n	8009680 <_ZN3pxt11initRuntimeEv+0x54>
        if (p > commBase)
 800965a:	d862      	bhi.n	8009722 <_ZN3pxt11initRuntimeEv+0xf6>
        f->next = head;
 800965c:	602c      	str	r4, [r5, #0]
 800965e:	462c      	mov	r4, r5
        void *p = xmalloc(4);
 8009660:	2004      	movs	r0, #4
 8009662:	f001 fb0f 	bl	800ac84 <device_malloc>
        volatile unsigned hp = (unsigned)p;
 8009666:	9001      	str	r0, [sp, #4]
        if (hp & 4) {
 8009668:	9b01      	ldr	r3, [sp, #4]
        void *p = xmalloc(4);
 800966a:	4605      	mov	r5, r0
        if (hp & 4) {
 800966c:	075b      	lsls	r3, r3, #29
 800966e:	d5f2      	bpl.n	8009656 <_ZN3pxt11initRuntimeEv+0x2a>
            xfree(p);
 8009670:	f001 fb2e 	bl	800acd0 <device_free>
            p = xmalloc(8);
 8009674:	2008      	movs	r0, #8
 8009676:	f001 fb05 	bl	800ac84 <device_malloc>
 800967a:	4605      	mov	r5, r0
        if (p == commBase) {
 800967c:	42b5      	cmp	r5, r6
 800967e:	d1ec      	bne.n	800965a <_ZN3pxt11initRuntimeEv+0x2e>
            xfree(p);
 8009680:	4628      	mov	r0, r5
 8009682:	f001 fb25 	bl	800acd0 <device_free>
            p = xmalloc(commSize);
 8009686:	4638      	mov	r0, r7
 8009688:	f001 fafc 	bl	800ac84 <device_malloc>
            if (p != commBase)
 800968c:	4285      	cmp	r5, r0
 800968e:	d003      	beq.n	8009698 <_ZN3pxt11initRuntimeEv+0x6c>
    target_panic(800 + subcode);
 8009690:	f240 302a 	movw	r0, #810	; 0x32a
 8009694:	f7f6 ff32 	bl	80004fc <target_panic>
    while (head) {
 8009698:	b134      	cbz	r4, 80096a8 <_ZN3pxt11initRuntimeEv+0x7c>
        head = head->next;
 800969a:	6825      	ldr	r5, [r4, #0]
        xfree(p);
 800969c:	4620      	mov	r0, r4
    while (head) {
 800969e:	462c      	mov	r4, r5
        xfree(p);
 80096a0:	f001 fb16 	bl	800acd0 <device_free>
    while (head) {
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	d1f8      	bne.n	800969a <_ZN3pxt11initRuntimeEv+0x6e>
    debug_println("---initCodal scheduler_init"); debug_flush();  //// TODO
 80096a8:	4824      	ldr	r0, [pc, #144]	; (800973c <_ZN3pxt11initRuntimeEv+0x110>)
 80096aa:	f7fa fc0d 	bl	8003ec8 <debug_println>
 80096ae:	4c24      	ldr	r4, [pc, #144]	; (8009740 <_ZN3pxt11initRuntimeEv+0x114>)
 80096b0:	f7fa fb8a 	bl	8003dc8 <debug_flush>
    scheduler_init(devMessageBus);
 80096b4:	4823      	ldr	r0, [pc, #140]	; (8009744 <_ZN3pxt11initRuntimeEv+0x118>)
 80096b6:	f000 ff2b 	bl	800a510 <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("---initCodal components.init"); debug_flush();  //// TODO
 80096ba:	4823      	ldr	r0, [pc, #140]	; (8009748 <_ZN3pxt11initRuntimeEv+0x11c>)
 80096bc:	f7fa fc04 	bl	8003ec8 <debug_println>
 80096c0:	4e22      	ldr	r6, [pc, #136]	; (800974c <_ZN3pxt11initRuntimeEv+0x120>)
 80096c2:	f7fa fb81 	bl	8003dc8 <debug_flush>
 80096c6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80096ca:	e001      	b.n	80096d0 <_ZN3pxt11initRuntimeEv+0xa4>
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 80096cc:	42a5      	cmp	r5, r4
 80096ce:	d00a      	beq.n	80096e6 <_ZN3pxt11initRuntimeEv+0xba>
        if (CodalComponent::components[i])
 80096d0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0f9      	beq.n	80096cc <_ZN3pxt11initRuntimeEv+0xa0>
            CodalComponent::components[i]->init();
 80096d8:	6803      	ldr	r3, [r0, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	42b3      	cmp	r3, r6
 80096de:	d0f5      	beq.n	80096cc <_ZN3pxt11initRuntimeEv+0xa0>
 80096e0:	4798      	blx	r3
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 80096e2:	42a5      	cmp	r5, r4
 80096e4:	d1f4      	bne.n	80096d0 <_ZN3pxt11initRuntimeEv+0xa4>
    debug_println("---initCodal usb_init"); debug_flush();  //// TODO
 80096e6:	481a      	ldr	r0, [pc, #104]	; (8009750 <_ZN3pxt11initRuntimeEv+0x124>)
 80096e8:	f7fa fbee 	bl	8003ec8 <debug_println>
 80096ec:	f7fa fb6c 	bl	8003dc8 <debug_flush>
    usb_init();
 80096f0:	f000 fb5a 	bl	8009da8 <_ZN3pxt8usb_initEv>
    debug_println("---initCodal done"); debug_flush();  //// TODO
 80096f4:	4817      	ldr	r0, [pc, #92]	; (8009754 <_ZN3pxt11initRuntimeEv+0x128>)
 80096f6:	f7fa fbe7 	bl	8003ec8 <debug_println>
 80096fa:	f7fa fb65 	bl	8003dc8 <debug_flush>
    auto led = LOOKUP_PIN(LED);
 80096fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009702:	200d      	movs	r0, #13
 8009704:	f7fe f828 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009708:	b2c0      	uxtb	r0, r0
 800970a:	f000 f9fd 	bl	8009b08 <_ZN3pxt9lookupPinEi>
    if (led) {
 800970e:	b118      	cbz	r0, 8009718 <_ZN3pxt11initRuntimeEv+0xec>
        led->setDigitalValue(0);
 8009710:	6803      	ldr	r3, [r0, #0]
 8009712:	2100      	movs	r1, #0
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4798      	blx	r3
    initCodal();
    platform_init();
}
 8009718:	b003      	add	sp, #12
 800971a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    platform_init();
 800971e:	f000 ba9f 	b.w	8009c60 <_ZN3pxt13platform_initEv>
 8009722:	f240 302b 	movw	r0, #811	; 0x32b
 8009726:	f7f6 fee9 	bl	80004fc <target_panic>
 800972a:	e797      	b.n	800965c <_ZN3pxt11initRuntimeEv+0x30>
 800972c:	0800c724 	.word	0x0800c724
 8009730:	0800c740 	.word	0x0800c740
 8009734:	20001034 	.word	0x20001034
 8009738:	20001000 	.word	0x20001000
 800973c:	0800c758 	.word	0x0800c758
 8009740:	20001118 	.word	0x20001118
 8009744:	20001038 	.word	0x20001038
 8009748:	0800c774 	.word	0x0800c774
 800974c:	080094fd 	.word	0x080094fd
 8009750:	0800c794 	.word	0x0800c794
 8009754:	0800c7ac 	.word	0x0800c7ac

08009758 <_ZN3pxt16afterProgramPageEv>:

//
unsigned afterProgramPage() {
    unsigned ptr = (unsigned)&bytecode[0];
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <_ZN3pxt16afterProgramPageEv+0x1c>)
unsigned afterProgramPage() {
 800975a:	b510      	push	{r4, lr}
    unsigned ptr = (unsigned)&bytecode[0];
 800975c:	681c      	ldr	r4, [r3, #0]
    ptr += programSize();
 800975e:	f7fd fff3 	bl	8007748 <_ZN3pxt11programSizeEv>
    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
 8009762:	f204 34ff 	addw	r4, r4, #1023	; 0x3ff
 8009766:	4420      	add	r0, r4
    return ptr;
}
 8009768:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800976c:	f020 0003 	bic.w	r0, r0, #3
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	20001034 	.word	0x20001034

08009778 <_ZN3pxt15getSerialNumberEv>:
          * Determines a unique 32 bit ID for this device, if provided by the hardware.
          * @return A 32 bit unique identifier.
          */
        virtual uint32_t getSerialNumber()
        {
            return target_get_serial();
 8009778:	f7f6 beb4 	b.w	80004e4 <target_get_serial>

0800977c <_ZN3pxt15current_time_msEv>:
int getSerialNumber() {
    return device.getSerialNumber();
}

int current_time_ms() {
    return system_timer_current_time();
 800977c:	f001 bc3e 	b.w	800affc <_ZN5codal25system_timer_current_timeEv>

08009780 <_ZN3pxt16getThreadContextEv>:
}

#ifdef PXT_GC
ThreadContext *getThreadContext() {
    return (ThreadContext *)currentFiber->user_data;
 8009780:	4b01      	ldr	r3, [pc, #4]	; (8009788 <_ZN3pxt16getThreadContextEv+0x8>)
 8009782:	681b      	ldr	r3, [r3, #0]
}
 8009784:	6a18      	ldr	r0, [r3, #32]
 8009786:	4770      	bx	lr
 8009788:	20001620 	.word	0x20001620

0800978c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>:

void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
 800978c:	4b01      	ldr	r3, [pc, #4]	; (8009794 <_ZN3pxt16setThreadContextEPNS_13ThreadContextE+0x8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6218      	str	r0, [r3, #32]
}
 8009792:	4770      	bx	lr
 8009794:	20001620 	.word	0x20001620

08009798 <_ZN3pxt15gcProcessStacksEi>:
    if (fib == currentFiber)
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
}

void gcProcessStacks(int flags) {
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	4682      	mov	sl, r0
 800979e:	b085      	sub	sp, #20
    int numFibers = codal::list_fibers(NULL);
 80097a0:	2000      	movs	r0, #0
 80097a2:	f000 fd93 	bl	800a2cc <_ZN5codal11list_fibersEPPNS_5FiberE>
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 80097a6:	0085      	lsls	r5, r0, #2
    int numFibers = codal::list_fibers(NULL);
 80097a8:	4604      	mov	r4, r0
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 80097aa:	4628      	mov	r0, r5
 80097ac:	f001 fa6a 	bl	800ac84 <device_malloc>
 80097b0:	9003      	str	r0, [sp, #12]
    int num2 = codal::list_fibers(fibers);
 80097b2:	f000 fd8b 	bl	800a2cc <_ZN5codal11list_fibersEPPNS_5FiberE>
    if (numFibers != num2)
 80097b6:	4284      	cmp	r4, r0
 80097b8:	d003      	beq.n	80097c2 <_ZN3pxt15gcProcessStacksEi+0x2a>
 80097ba:	f44f 704b 	mov.w	r0, #812	; 0x32c
 80097be:	f7f6 fe9d 	bl	80004fc <target_panic>
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
 80097c2:	2c00      	cmp	r4, #0
 80097c4:	dd3a      	ble.n	800983c <_ZN3pxt15gcProcessStacksEi+0xa4>
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8009868 <_ZN3pxt15gcProcessStacksEi+0xd0>
 80097d0:	3b04      	subs	r3, #4
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	442b      	add	r3, r5
 80097d6:	f00a 0a02 	and.w	sl, sl, #2
 80097da:	9302      	str	r3, [sp, #8]
        auto fib = fibers[i];
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	f853 7f04 	ldr.w	r7, [r3, #4]!
        auto ctx = (ThreadContext *)fib->user_data;
 80097e2:	6a3e      	ldr	r6, [r7, #32]
        auto fib = fibers[i];
 80097e4:	9301      	str	r3, [sp, #4]
        if (!ctx)
 80097e6:	b32e      	cbz	r6, 8009834 <_ZN3pxt15gcProcessStacksEi+0x9c>
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 80097e8:	3604      	adds	r6, #4
    if (fib == currentFiber)
 80097ea:	f8d9 3000 	ldr.w	r3, [r9]
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
 80097ee:	6834      	ldr	r4, [r6, #0]
    if (fib == currentFiber)
 80097f0:	429f      	cmp	r7, r3
 80097f2:	d029      	beq.n	8009848 <_ZN3pxt15gcProcessStacksEi+0xb0>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 80097f4:	6838      	ldr	r0, [r7, #0]
 80097f6:	68bd      	ldr	r5, [r7, #8]
 80097f8:	f7f6 fe9e 	bl	8000538 <tcb_get_stack_base>
    if (fib == currentFiber)
 80097fc:	f8d9 3000 	ldr.w	r3, [r9]
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8009800:	1a28      	subs	r0, r5, r0
    if (fib == currentFiber)
 8009802:	429f      	cmp	r7, r3
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8009804:	4404      	add	r4, r0
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 8009806:	6875      	ldr	r5, [r6, #4]
    if (fib == currentFiber)
 8009808:	d007      	beq.n	800981a <_ZN3pxt15gcProcessStacksEi+0x82>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800980a:	6838      	ldr	r0, [r7, #0]
 800980c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8009810:	f7f6 fe92 	bl	8000538 <tcb_get_stack_base>
 8009814:	ebab 0000 	sub.w	r0, fp, r0
 8009818:	4405      	add	r5, r0
            if (flags & 2)
 800981a:	f1ba 0f00 	cmp.w	sl, #0
 800981e:	d004      	beq.n	800982a <_ZN3pxt15gcProcessStacksEi+0x92>
 8009820:	e016      	b.n	8009850 <_ZN3pxt15gcProcessStacksEi+0xb8>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
            // VLOG("mark: %p - %p", ptr, end);
            while (ptr < end) {
                gcProcess(*ptr++);
 8009822:	f854 0b04 	ldr.w	r0, [r4], #4
 8009826:	f7fe ff6f 	bl	8008708 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
            while (ptr < end) {
 800982a:	42ac      	cmp	r4, r5
 800982c:	d3f9      	bcc.n	8009822 <_ZN3pxt15gcProcessStacksEi+0x8a>
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 800982e:	68b6      	ldr	r6, [r6, #8]
 8009830:	2e00      	cmp	r6, #0
 8009832:	d1da      	bne.n	80097ea <_ZN3pxt15gcProcessStacksEi+0x52>
    for (int i = 0; i < numFibers; ++i) {
 8009834:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009838:	4293      	cmp	r3, r2
 800983a:	d1cf      	bne.n	80097dc <_ZN3pxt15gcProcessStacksEi+0x44>
            }
        }
    }
    xfree(fibers);
 800983c:	9803      	ldr	r0, [sp, #12]
}
 800983e:	b005      	add	sp, #20
 8009840:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    xfree(fibers);
 8009844:	f001 ba44 	b.w	800acd0 <device_free>
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 8009848:	6875      	ldr	r5, [r6, #4]
            if (flags & 2)
 800984a:	f1ba 0f00 	cmp.w	sl, #0
 800984e:	d0ec      	beq.n	800982a <_ZN3pxt15gcProcessStacksEi+0x92>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
 8009850:	1b2b      	subs	r3, r5, r4
 8009852:	4641      	mov	r1, r8
 8009854:	109b      	asrs	r3, r3, #2
 8009856:	4622      	mov	r2, r4
 8009858:	4802      	ldr	r0, [pc, #8]	; (8009864 <_ZN3pxt15gcProcessStacksEi+0xcc>)
 800985a:	f108 0801 	add.w	r8, r8, #1
 800985e:	f000 fcef 	bl	800a240 <codal_dmesg>
 8009862:	e7e2      	b.n	800982a <_ZN3pxt15gcProcessStacksEi+0x92>
 8009864:	0800c7c0 	.word	0x0800c7c0
 8009868:	20001620 	.word	0x20001620

0800986c <_GLOBAL__sub_I__ZN3pxt8devTimerE>:
#endif

} // namespace pxt
 800986c:	b570      	push	{r4, r5, r6, lr}
CODAL_TIMER devTimer;
 800986e:	4e0d      	ldr	r6, [pc, #52]	; (80098a4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x38>)
 8009870:	4d0d      	ldr	r5, [pc, #52]	; (80098a8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x3c>)
 8009872:	4630      	mov	r0, r6
 8009874:	f002 f994 	bl	800bba0 <_ZN5codal3_cm5TimerC1Ev>
MessageBus devMessageBus;
 8009878:	4c0c      	ldr	r4, [pc, #48]	; (80098ac <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x40>)
CODAL_TIMER devTimer;
 800987a:	462a      	mov	r2, r5
 800987c:	490c      	ldr	r1, [pc, #48]	; (80098b0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x44>)
 800987e:	4630      	mov	r0, r6
 8009880:	f7f6 fe9e 	bl	80005c0 <__aeabi_atexit>
Event lastEvent;
 8009884:	480b      	ldr	r0, [pc, #44]	; (80098b4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x48>)
 8009886:	f001 fef7 	bl	800b678 <_ZN5codal5EventC1Ev>
MessageBus devMessageBus;
 800988a:	4620      	mov	r0, r4
 800988c:	f001 fd7a 	bl	800b384 <_ZN5codal10MessageBusC1Ev>
 8009890:	462a      	mov	r2, r5
 8009892:	4620      	mov	r0, r4
 8009894:	4908      	ldr	r1, [pc, #32]	; (80098b8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x4c>)
 8009896:	f7f6 fe93 	bl	80005c0 <__aeabi_atexit>
        {
 800989a:	4b08      	ldr	r3, [pc, #32]	; (80098bc <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x50>)
 800989c:	4a08      	ldr	r2, [pc, #32]	; (80098c0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x54>)
 800989e:	601a      	str	r2, [r3, #0]
} // namespace pxt
 80098a0:	bd70      	pop	{r4, r5, r6, pc}
 80098a2:	bf00      	nop
 80098a4:	20001060 	.word	0x20001060
 80098a8:	20000558 	.word	0x20000558
 80098ac:	20001038 	.word	0x20001038
 80098b0:	080095bd 	.word	0x080095bd
 80098b4:	20001084 	.word	0x20001084
 80098b8:	0800b2dd 	.word	0x0800b2dd
 80098bc:	2000105c 	.word	0x2000105c
 80098c0:	0800c89c 	.word	0x0800c89c

080098c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>:
void registerWithDal(int id, int event, Action a, int flags) {
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	4616      	mov	r6, r2
 80098cc:	461f      	mov	r7, r3
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
    if (!findBinding(id, event))
 80098d2:	f7fd fc0b 	bl	80070ec <_ZN3pxt11findBindingEii>
 80098d6:	b138      	cbz	r0, 80098e8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x24>
    setBinding(id, event, a);
 80098d8:	4632      	mov	r2, r6
 80098da:	4629      	mov	r1, r5
 80098dc:	4620      	mov	r0, r4
}
 80098de:	b002      	add	sp, #8
 80098e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setBinding(id, event, a);
 80098e4:	f7fd bc10 	b.w	8007108 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>
        int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 80098e8:	2c0f      	cmp	r4, #15
        devMessageBus.listen(id, event, dispatchEvent, flags);
 80098ea:	b2bf      	uxth	r7, r7
 80098ec:	d101      	bne.n	80098f2 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x2e>
 80098ee:	2fc0      	cmp	r7, #192	; 0xc0
 80098f0:	d1f2      	bne.n	80098d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 80098f2:	2020      	movs	r0, #32
 80098f4:	f7fa fb6c 	bl	8003fd0 <_Znwj>
 80098f8:	4680      	mov	r8, r0
 80098fa:	b2a1      	uxth	r1, r4
 80098fc:	9700      	str	r7, [sp, #0]
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x5c>)
 8009900:	b2aa      	uxth	r2, r5
 8009902:	f001 fa2d 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009906:	4641      	mov	r1, r8
 8009908:	4806      	ldr	r0, [pc, #24]	; (8009924 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x60>)
 800990a:	f001 fc35 	bl	800b178 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800990e:	2800      	cmp	r0, #0
 8009910:	d0e2      	beq.n	80098d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_OK;

            delete newListener;
 8009912:	4640      	mov	r0, r8
 8009914:	f001 fa3c 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 8009918:	4640      	mov	r0, r8
 800991a:	f7fa fb5b 	bl	8003fd4 <_ZdlPv>
 800991e:	e7db      	b.n	80098d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
 8009920:	0800951d 	.word	0x0800951d
 8009924:	20001038 	.word	0x20001038

08009928 <_ZN7control10raiseEventEii>:
//
//
//
//
//
void raiseEvent(int src, int value) {
 8009928:	b500      	push	{lr}
 800992a:	b083      	sub	sp, #12
    Event evt(src, value);
 800992c:	b28a      	uxth	r2, r1
 800992e:	2301      	movs	r3, #1
 8009930:	b281      	uxth	r1, r0
 8009932:	4668      	mov	r0, sp
 8009934:	f001 fe86 	bl	800b644 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 8009938:	b003      	add	sp, #12
 800993a:	f85d fb04 	ldr.w	pc, [sp], #4
 800993e:	bf00      	nop

08009940 <_ZN7control16deviceDalVersionEv>:
//
//
//
//
String deviceDalVersion() {
    return mkString(device.getVersion());
 8009940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <_ZN7control16deviceDalVersionEv+0xc>)
 8009946:	f7fd bc05 	b.w	8007154 <_ZN3pxt8mkStringEPKci>
 800994a:	bf00      	nop
 800994c:	0800c7cc 	.word	0x0800c7cc

08009950 <_ZN7control19allocateNotifyEventEv>:

//
//
//
//
int allocateNotifyEvent() {
 8009950:	b508      	push	{r3, lr}
    return ::allocateNotifyEvent();
 8009952:	f001 fe59 	bl	800b608 <_ZN5codal19allocateNotifyEventEv>
}
 8009956:	bd08      	pop	{r3, pc}

08009958 <_ZN7control5dmesgEPN3pxt11BoxedStringE>:

//
//
void dmesg(String s) {
    DMESG("# %s", s->data);
 8009958:	1d81      	adds	r1, r0, #6
 800995a:	4801      	ldr	r0, [pc, #4]	; (8009960 <_ZN7control5dmesgEPN3pxt11BoxedStringE+0x8>)
 800995c:	f000 bc70 	b.w	800a240 <codal_dmesg>
 8009960:	0800c7d4 	.word	0x0800c7d4

08009964 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv>:
}

//
//
void dmesgPtr(String str, Object_ ptr) {
    DMESG("# %s: %p", str->data, ptr);
 8009964:	460a      	mov	r2, r1
 8009966:	1d81      	adds	r1, r0, #6
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv+0xc>)
 800996a:	f000 bc69 	b.w	800a240 <codal_dmesg>
 800996e:	bf00      	nop
 8009970:	0800c7dc 	.word	0x0800c7dc

08009974 <_ZN4pinsL7initI2CEv.part.0>:
#include "ErrorNo.h"

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
 8009974:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));
 8009976:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800997a:	2019      	movs	r0, #25
 800997c:	f7fd feec 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009980:	b2c0      	uxtb	r0, r0
 8009982:	f000 f8c1 	bl	8009b08 <_ZN3pxt9lookupPinEi>
 8009986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800998a:	4605      	mov	r5, r0
 800998c:	2018      	movs	r0, #24
 800998e:	f7fd fee3 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009992:	b2c0      	uxtb	r0, r0
 8009994:	f000 f8b8 	bl	8009b08 <_ZN3pxt9lookupPinEi>
 8009998:	4606      	mov	r6, r0
 800999a:	2010      	movs	r0, #16
 800999c:	f7fa fb18 	bl	8003fd0 <_Znwj>
 80099a0:	4604      	mov	r4, r0
 80099a2:	4632      	mov	r2, r6
 80099a4:	4629      	mov	r1, r5
 80099a6:	f001 fea7 	bl	800b6f8 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 80099aa:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <_ZN4pinsL7initI2CEv.part.0+0x3c>)
 80099ac:	601c      	str	r4, [r3, #0]
      }
    }
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	2000108c 	.word	0x2000108c

080099b4 <_ZN4pins13i2cReadBufferEiib>:
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if (NULL == i2c) {
 80099b8:	4f10      	ldr	r7, [pc, #64]	; (80099fc <_ZN4pins13i2cReadBufferEiib+0x48>)
    {
 80099ba:	b082      	sub	sp, #8
      if (NULL == i2c) {
 80099bc:	683b      	ldr	r3, [r7, #0]
    {
 80099be:	4604      	mov	r4, r0
 80099c0:	460e      	mov	r6, r1
 80099c2:	4690      	mov	r8, r2
      if (NULL == i2c) {
 80099c4:	b1b3      	cbz	r3, 80099f4 <_ZN4pins13i2cReadBufferEiib+0x40>
      initI2C();
      Buffer buf = mkBuffer(NULL, size);
 80099c6:	4631      	mov	r1, r6
 80099c8:	2000      	movs	r0, #0
 80099ca:	f7fd fbe9 	bl	80071a0 <_ZN3pxt8mkBufferEPKhi>
 80099ce:	4605      	mov	r5, r0
      int status = i2c->read(address << 1, buf->data, size, repeat);
 80099d0:	6838      	ldr	r0, [r7, #0]
 80099d2:	0061      	lsls	r1, r4, #1
 80099d4:	6804      	ldr	r4, [r0, #0]
 80099d6:	f8cd 8000 	str.w	r8, [sp]
 80099da:	b289      	uxth	r1, r1
 80099dc:	4633      	mov	r3, r6
 80099de:	69e4      	ldr	r4, [r4, #28]
 80099e0:	f105 0208 	add.w	r2, r5, #8
 80099e4:	47a0      	blx	r4
      if (status != ErrorCode::DEVICE_OK) {
 80099e6:	2800      	cmp	r0, #0
        decrRC(buf);
        buf = 0;
      }
      return buf;
    }
 80099e8:	bf0c      	ite	eq
 80099ea:	4628      	moveq	r0, r5
 80099ec:	2000      	movne	r0, #0
 80099ee:	b002      	add	sp, #8
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	f7ff ffbe 	bl	8009974 <_ZN4pinsL7initI2CEv.part.0>
 80099f8:	e7e5      	b.n	80099c6 <_ZN4pins13i2cReadBufferEiib+0x12>
 80099fa:	bf00      	nop
 80099fc:	2000108c 	.word	0x2000108c

08009a00 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb>:
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 8009a00:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
 8009a02:	4e0b      	ldr	r6, [pc, #44]	; (8009a30 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x30>)
    {
 8009a04:	4604      	mov	r4, r0
      if (NULL == i2c) {
 8009a06:	6830      	ldr	r0, [r6, #0]
    {
 8009a08:	b084      	sub	sp, #16
 8009a0a:	460d      	mov	r5, r1
      if (NULL == i2c) {
 8009a0c:	b150      	cbz	r0, 8009a24 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x24>
      initI2C();
      return i2c->write(address << 1, buf->data, buf->length, repeat);
 8009a0e:	0061      	lsls	r1, r4, #1
 8009a10:	6804      	ldr	r4, [r0, #0]
 8009a12:	686b      	ldr	r3, [r5, #4]
 8009a14:	9200      	str	r2, [sp, #0]
 8009a16:	b289      	uxth	r1, r1
 8009a18:	6964      	ldr	r4, [r4, #20]
 8009a1a:	f105 0208 	add.w	r2, r5, #8
 8009a1e:	47a0      	blx	r4
    }
 8009a20:	b004      	add	sp, #16
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	9203      	str	r2, [sp, #12]
 8009a26:	f7ff ffa5 	bl	8009974 <_ZN4pinsL7initI2CEv.part.0>
 8009a2a:	6830      	ldr	r0, [r6, #0]
 8009a2c:	9a03      	ldr	r2, [sp, #12]
 8009a2e:	e7ee      	b.n	8009a0e <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0xe>
 8009a30:	2000108c 	.word	0x2000108c

08009a34 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009a34:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop

08009a3c <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009a3c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop

08009a44 <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009a44:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop

08009a4c <_ZN3pxt6getPinEi>:
static uint8_t numPinPtrs;
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
    if (id < 0 || id >= DEV_NUM_PINS)
 8009a4c:	287f      	cmp	r0, #127	; 0x7f
DevicePin *getPin(int id) {
 8009a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a52:	4604      	mov	r4, r0
    if (id < 0 || id >= DEV_NUM_PINS)
 8009a54:	d83f      	bhi.n	8009ad6 <_ZN3pxt6getPinEi+0x8a>
        target_panic(PANIC_NO_SUCH_PIN);

    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
 8009a56:	4e22      	ldr	r6, [pc, #136]	; (8009ae0 <_ZN3pxt6getPinEi+0x94>)
 8009a58:	4d22      	ldr	r5, [pc, #136]	; (8009ae4 <_ZN3pxt6getPinEi+0x98>)
 8009a5a:	5d33      	ldrb	r3, [r6, r4]
 8009a5c:	6828      	ldr	r0, [r5, #0]
    if (ptr == 0) {
 8009a5e:	bb9b      	cbnz	r3, 8009ac8 <_ZN3pxt6getPinEi+0x7c>
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
 8009a60:	4f21      	ldr	r7, [pc, #132]	; (8009ae8 <_ZN3pxt6getPinEi+0x9c>)
 8009a62:	7839      	ldrb	r1, [r7, #0]
 8009a64:	3101      	adds	r1, #1
 8009a66:	0089      	lsls	r1, r1, #2
 8009a68:	f7ff f8fe 	bl	8008c68 <realloc>
 8009a6c:	6028      	str	r0, [r5, #0]
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 8009a6e:	2020      	movs	r0, #32
 8009a70:	f7fa faae 	bl	8003fd0 <_Znwj>
        bool isAnalog = IS_ANALOG_PIN(id);
 8009a74:	213f      	movs	r1, #63	; 0x3f
 8009a76:	2300      	movs	r3, #0
 8009a78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009af0 <_ZN3pxt6getPinEi+0xa4>
 8009a7c:	f1c4 0e20 	rsb	lr, r4, #32
 8009a80:	fa01 fe0e 	lsl.w	lr, r1, lr
 8009a84:	fa2c f904 	lsr.w	r9, ip, r4
 8009a88:	f1a4 0c20 	sub.w	ip, r4, #32
 8009a8c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8009a90:	ea49 090e 	orr.w	r9, r9, lr
 8009a94:	ea49 090c 	orr.w	r9, r9, ip
 8009a98:	f009 0201 	and.w	r2, r9, #1
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 8009a9c:	4313      	orrs	r3, r2
        //  Codal constructor.  Called by pxt-maker.
        STM32BluePillPin(
            int id,              //  e.g. DEVICE_ID_IO_P0 + CM_PIN_PC13
            PinName       name,  //  e.g. CM_PIN_PC13
            PinCapability capability  //  e.g. PIN_CAPABILITY_DIGITAL
        ): codal::_cm::Pin(id, name, capability) {}
 8009a9e:	bf0c      	ite	eq
 8009aa0:	2301      	moveq	r3, #1
 8009aa2:	2303      	movne	r3, #3
 8009aa4:	b2e2      	uxtb	r2, r4
 8009aa6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8009aaa:	4680      	mov	r8, r0
 8009aac:	f001 ff16 	bl	800b8dc <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>
        pinPtrs[numPinPtrs++] =
 8009ab0:	7839      	ldrb	r1, [r7, #0]
 8009ab2:	6828      	ldr	r0, [r5, #0]
 8009ab4:	1c4a      	adds	r2, r1, #1
 8009ab6:	b2d2      	uxtb	r2, r2
        ptr = numPinPtrs;
 8009ab8:	4613      	mov	r3, r2
 8009aba:	4d0c      	ldr	r5, [pc, #48]	; (8009aec <_ZN3pxt6getPinEi+0xa0>)
        pinPtrs[numPinPtrs++] =
 8009abc:	703a      	strb	r2, [r7, #0]
 8009abe:	f8c8 5000 	str.w	r5, [r8]
        pinPos[id] = ptr;
 8009ac2:	5532      	strb	r2, [r6, r4]
        pinPtrs[numPinPtrs++] =
 8009ac4:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
    }
    return pinPtrs[ptr - 1];
 8009ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009acc:	3b01      	subs	r3, #1
}
 8009ace:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        target_panic(PANIC_NO_SUCH_PIN);
 8009ad6:	f44f 7063 	mov.w	r0, #908	; 0x38c
 8009ada:	f7f6 fd0f 	bl	80004fc <target_panic>
 8009ade:	e7ba      	b.n	8009a56 <_ZN3pxt6getPinEi+0xa>
 8009ae0:	20001090 	.word	0x20001090
 8009ae4:	20001110 	.word	0x20001110
 8009ae8:	20001662 	.word	0x20001662
 8009aec:	0800c7f0 	.word	0x0800c7f0
 8009af0:	e0030fff 	.word	0xe0030fff

08009af4 <_ZN3pxt9getPinCfgEi>:

//
DevicePin *getPinCfg(int key) {
 8009af4:	b508      	push	{r3, lr}
    return getPin(getConfig(key));
 8009af6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009afa:	f7fd fe2d 	bl	8007758 <_ZN3pxt9getConfigEii>
}
 8009afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return getPin(getConfig(key));
 8009b02:	f7ff bfa3 	b.w	8009a4c <_ZN3pxt6getPinEi>
 8009b06:	bf00      	nop

08009b08 <_ZN3pxt9lookupPinEi>:
    pinPos[from] = pinPos[to];
}

//
DevicePin *lookupPin(int pinName) {
    if (pinName < 0 || pinName == 0xff)
 8009b08:	1e03      	subs	r3, r0, #0
 8009b0a:	db03      	blt.n	8009b14 <_ZN3pxt9lookupPinEi+0xc>
 8009b0c:	2bff      	cmp	r3, #255	; 0xff
 8009b0e:	d001      	beq.n	8009b14 <_ZN3pxt9lookupPinEi+0xc>
        return NULL;
    return getPin(pinName);
 8009b10:	f7ff bf9c 	b.w	8009a4c <_ZN3pxt6getPinEi>
}
 8009b14:	2000      	movs	r0, #0
 8009b16:	4770      	bx	lr

08009b18 <_ZN4pins12createBufferEi>:
//
//
//
//
Buffer createBuffer(int size) {
    return mkBuffer(NULL, size);
 8009b18:	4601      	mov	r1, r0
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7fd bb40 	b.w	80071a0 <_ZN3pxt8mkBufferEPKhi>

08009b20 <_ZN4pins13pulseDurationEv>:
//
//
//
//
int pulseDuration() {
    return pxt::lastEvent.timestamp;
 8009b20:	4b01      	ldr	r3, [pc, #4]	; (8009b28 <_ZN4pins13pulseDurationEv+0x8>)
}
 8009b22:	6858      	ldr	r0, [r3, #4]
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	20001084 	.word	0x20001084

08009b2c <_ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
int analogRead(AnalogInPin name) {
    return PINOP(getAnalogValue());
 8009b2c:	6803      	ldr	r3, [r0, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	4718      	bx	r3
 8009b32:	bf00      	nop

08009b34 <_ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogWrite(AnalogOutPin name, int value) {
    PINOP(setAnalogValue(value));
 8009b34:	6803      	ldr	r3, [r0, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	4718      	bx	r3
 8009b3a:	bf00      	nop

08009b3c <_ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
//
bool digitalRead(DigitalInOutPin name) {
 8009b3c:	b508      	push	{r3, lr}
    return PINOP(getDigitalValue()) != 0;
 8009b3e:	6803      	ldr	r3, [r0, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	4798      	blx	r3
}
 8009b44:	3000      	adds	r0, #0
 8009b46:	bf18      	it	ne
 8009b48:	2001      	movne	r0, #1
 8009b4a:	bd08      	pop	{r3, pc}

08009b4c <_ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb>:
//
//
//
//
void digitalWrite(DigitalInOutPin name, bool value) {
    PINOP(setDigitalValue(value));
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4718      	bx	r3
 8009b52:	bf00      	nop

08009b54 <_ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE>:
//
//
//
//
//
void onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	4616      	mov	r6, r2
    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 8009b5c:	6803      	ldr	r3, [r0, #0]
 8009b5e:	2102      	movs	r1, #2
 8009b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b62:	4798      	blx	r3
    registerWithDal(pin->id, (int)pulse, body);
 8009b64:	4632      	mov	r2, r6
 8009b66:	4629      	mov	r1, r5
 8009b68:	89e0      	ldrh	r0, [r4, #14]
 8009b6a:	2310      	movs	r3, #16
}
 8009b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    registerWithDal(pin->id, (int)pulse, body);
 8009b70:	f7ff bea8 	b.w	80098c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08009b74 <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE>:
//
//
//
//
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
    switch(event) {
 8009b74:	1e8b      	subs	r3, r1, #2
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
 8009b76:	b570      	push	{r4, r5, r6, lr}
 8009b78:	460d      	mov	r5, r1
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4616      	mov	r6, r2
    switch(event) {
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d813      	bhi.n	8009baa <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x36>
 8009b82:	e8df f003 	tbb	[pc, r3]
 8009b86:	0f0f      	.short	0x0f0f
 8009b88:	0202      	.short	0x0202
        case PinEvent::PulseHigh:
        case PinEvent::PulseLow:
            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	6803      	ldr	r3, [r0, #0]
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 8009b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b90:	4620      	mov	r0, r4
 8009b92:	4798      	blx	r3
            registerWithDal(pin->id, (int)event, body);
 8009b94:	4632      	mov	r2, r6
 8009b96:	4629      	mov	r1, r5
 8009b98:	89e0      	ldrh	r0, [r4, #14]
 8009b9a:	2310      	movs	r3, #16
            break;    
    }    
}
 8009b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            registerWithDal(pin->id, (int)event, body);
 8009ba0:	f7ff be90 	b.w	80098c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 8009ba4:	6803      	ldr	r3, [r0, #0]
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	e7f1      	b.n	8009b8e <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x1a>
}
 8009baa:	bd70      	pop	{r4, r5, r6, pc}

08009bac <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei>:
//
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pulse = PulseValue::High == value ? 1 : 0;
 8009bb0:	f1a1 0904 	sub.w	r9, r1, #4
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	4680      	mov	r8, r0
    int pulse = PulseValue::High == value ? 1 : 0;
 8009bb8:	fab9 f989 	clz	r9, r9
    uint64_t tick = system_timer_current_time_us();
 8009bbc:	f001 fa2c 	bl	800b018 <_ZN5codal28system_timer_current_time_usEv>
    int pulse = PulseValue::High == value ? 1 : 0;
 8009bc0:	ea4f 1959 	mov.w	r9, r9, lsr #5
    uint64_t maxd = (uint64_t)maxDuration;
 8009bc4:	17e5      	asrs	r5, r4, #31
    uint64_t tick = system_timer_current_time_us();
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	2700      	movs	r7, #0
 8009bca:	e009      	b.n	8009be0 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x34>
    while (pin->getDigitalValue() != pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 8009bcc:	f001 fa24 	bl	800b018 <_ZN5codal28system_timer_current_time_usEv>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	1b82      	subs	r2, r0, r6
 8009bd4:	eb63 0307 	sbc.w	r3, r3, r7
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	bf08      	it	eq
 8009bdc:	4294      	cmpeq	r4, r2
 8009bde:	d322      	bcc.n	8009c26 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() != pulse) {
 8009be0:	f8d8 3000 	ldr.w	r3, [r8]
 8009be4:	4640      	mov	r0, r8
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4798      	blx	r3
 8009bea:	4548      	cmp	r0, r9
 8009bec:	4682      	mov	sl, r0
 8009bee:	d1ed      	bne.n	8009bcc <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x20>
            return 0;
    }

    uint64_t start = system_timer_current_time_us();
 8009bf0:	f001 fa12 	bl	800b018 <_ZN5codal28system_timer_current_time_usEv>
 8009bf4:	4681      	mov	r9, r0
 8009bf6:	e009      	b.n	8009c0c <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x60>
    while (pin->getDigitalValue() == pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 8009bf8:	f001 fa0e 	bl	800b018 <_ZN5codal28system_timer_current_time_usEv>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	1b82      	subs	r2, r0, r6
 8009c00:	eb63 0307 	sbc.w	r3, r3, r7
 8009c04:	429d      	cmp	r5, r3
 8009c06:	bf08      	it	eq
 8009c08:	4294      	cmpeq	r4, r2
 8009c0a:	d30c      	bcc.n	8009c26 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() == pulse) {
 8009c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c10:	4640      	mov	r0, r8
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	4798      	blx	r3
 8009c16:	4582      	cmp	sl, r0
 8009c18:	d0ee      	beq.n	8009bf8 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x4c>
            return 0;
    }
    uint64_t end = system_timer_current_time_us();
 8009c1a:	f001 f9fd 	bl	800b018 <_ZN5codal28system_timer_current_time_usEv>
    return end - start;
 8009c1e:	eba0 0009 	sub.w	r0, r0, r9
}
 8009c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 8009c26:	2000      	movs	r0, #0
}
 8009c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009c2c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode>:
//
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 8009c2c:	b131      	cbz	r1, 8009c3c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode+0x10>
                                                                        ? PullMode::Up
                                                                        : PullMode::None;
    PINOP(setPull(m));
 8009c2e:	6803      	ldr	r3, [r0, #0]
                                                                        ? PullMode::Up
 8009c30:	2901      	cmp	r1, #1
 8009c32:	bf0c      	ite	eq
 8009c34:	2102      	moveq	r1, #2
 8009c36:	2100      	movne	r1, #0
    PINOP(setPull(m));
 8009c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3a:	4718      	bx	r3
 8009c3c:	6803      	ldr	r3, [r0, #0]
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 8009c3e:	2101      	movs	r1, #1
    PINOP(setPull(m));
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	4718      	bx	r3

08009c44 <_ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogSetPeriod(PwmOnlyPin name, int period) {
    PINOP(setAnalogPeriodUs(period));
 8009c44:	f001 be6c 	b.w	800b920 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>

08009c48 <_ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
    PINOP(setServoValue(value));
 8009c48:	6802      	ldr	r2, [r0, #0]
void servoWrite(PwmOnlyPin name, int value) {
 8009c4a:	b410      	push	{r4}
    PINOP(setServoValue(value));
 8009c4c:	6914      	ldr	r4, [r2, #16]
 8009c4e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009c52:	46a4      	mov	ip, r4
 8009c54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
}
 8009c58:	bc10      	pop	{r4}
    PINOP(setServoValue(value));
 8009c5a:	4760      	bx	ip

08009c5c <_ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoSetPulse(PwmOnlyPin name, int duration) {
    PINOP(setServoPulseUs(duration));
 8009c5c:	f001 be5e 	b.w	800b91c <_ZN5codal3_cm3Pin15setServoPulseUsEi>

08009c60 <_ZN3pxt13platform_initEv>:

    void platformSendSerial(const char *data, int len) {
        debug_println("---pxt::platformSendSerial"); //// 
    }

    void platform_init() {
 8009c60:	b508      	push	{r3, lr}
        debug_println("---pxt::platform_init"); //// 
 8009c62:	4804      	ldr	r0, [pc, #16]	; (8009c74 <_ZN3pxt13platform_initEv+0x14>)
 8009c64:	f7fa f930 	bl	8003ec8 <debug_println>
        initRandomSeed();
        //  setSendToUART(platformSendSerial);
    }
 8009c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        debug_println("---pxt::initRandomSeed"); //// 
 8009c6c:	4802      	ldr	r0, [pc, #8]	; (8009c78 <_ZN3pxt13platform_initEv+0x18>)
 8009c6e:	f7fa b92b 	b.w	8003ec8 <debug_println>
 8009c72:	bf00      	nop
 8009c74:	0800c854 	.word	0x0800c854
 8009c78:	0800c86c 	.word	0x0800c86c

08009c7c <_Z14cpu_clock_initv>:
}

void cpu_clock_init() {
 8009c7c:	b508      	push	{r3, lr}
    debug_println("---pxt::cpu_clock_init"); ////
 8009c7e:	4804      	ldr	r0, [pc, #16]	; (8009c90 <_Z14cpu_clock_initv+0x14>)
 8009c80:	f7fa f922 	bl	8003ec8 <debug_println>
    devTimer.init();
}
 8009c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    devTimer.init();
 8009c88:	4802      	ldr	r0, [pc, #8]	; (8009c94 <_Z14cpu_clock_initv+0x18>)
 8009c8a:	f001 bf9f 	b.w	800bbcc <_ZN5codal3_cm5Timer4initEv>
 8009c8e:	bf00      	nop
 8009c90:	0800c83c 	.word	0x0800c83c
 8009c94:	20001060 	.word	0x20001060

08009c98 <_ZN4pinsL7initSPIEv.part.0>:
#include "pxt.h"
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (NULL == spi)
            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));
 8009c9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c9e:	2013      	movs	r0, #19
 8009ca0:	f7fd fd5a 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009ca4:	b2c0      	uxtb	r0, r0
 8009ca6:	f7ff ff2f 	bl	8009b08 <_ZN3pxt9lookupPinEi>
 8009caa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cae:	4605      	mov	r5, r0
 8009cb0:	2012      	movs	r0, #18
 8009cb2:	f7fd fd51 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009cb6:	b2c0      	uxtb	r0, r0
 8009cb8:	f7ff ff26 	bl	8009b08 <_ZN3pxt9lookupPinEi>
 8009cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	2017      	movs	r0, #23
 8009cc4:	f7fd fd48 	bl	8007758 <_ZN3pxt9getConfigEii>
 8009cc8:	b2c0      	uxtb	r0, r0
 8009cca:	f7ff ff1d 	bl	8009b08 <_ZN3pxt9lookupPinEi>
 8009cce:	4607      	mov	r7, r0
 8009cd0:	2028      	movs	r0, #40	; 0x28
 8009cd2:	f7fa f97d 	bl	8003fd0 <_Znwj>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	463b      	mov	r3, r7
 8009cda:	4632      	mov	r2, r6
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f001 feb1 	bl	800ba44 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>
 8009ce2:	4b01      	ldr	r3, [pc, #4]	; (8009ce8 <_ZN4pinsL7initSPIEv.part.0+0x50>)
 8009ce4:	601c      	str	r4, [r3, #0]
    }
 8009ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce8:	20001114 	.word	0x20001114

08009cec <_ZN4pins8spiWriteEi>:
//
//
//
//
//
    int spiWrite(int value) {
 8009cec:	b510      	push	{r4, lr}
        if (NULL == spi)
 8009cee:	4c08      	ldr	r4, [pc, #32]	; (8009d10 <_ZN4pins8spiWriteEi+0x24>)
    int spiWrite(int value) {
 8009cf0:	4601      	mov	r1, r0
        if (NULL == spi)
 8009cf2:	6820      	ldr	r0, [r4, #0]
    int spiWrite(int value) {
 8009cf4:	b082      	sub	sp, #8
        if (NULL == spi)
 8009cf6:	b128      	cbz	r0, 8009d04 <_ZN4pins8spiWriteEi+0x18>
        initSPI();
        return spi->write(value);
 8009cf8:	6802      	ldr	r2, [r0, #0]
 8009cfa:	6892      	ldr	r2, [r2, #8]
    }
 8009cfc:	b002      	add	sp, #8
 8009cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return spi->write(value);
 8009d02:	4710      	bx	r2
 8009d04:	9101      	str	r1, [sp, #4]
 8009d06:	f7ff ffc7 	bl	8009c98 <_ZN4pinsL7initSPIEv.part.0>
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	9901      	ldr	r1, [sp, #4]
 8009d0e:	e7f3      	b.n	8009cf8 <_ZN4pins8spiWriteEi+0xc>
 8009d10:	20001114 	.word	0x20001114

08009d14 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_>:
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 8009d14:	b570      	push	{r4, r5, r6, lr}
        if (NULL == spi)
 8009d16:	4e0e      	ldr	r6, [pc, #56]	; (8009d50 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x3c>)
    void spiTransfer(Buffer command, Buffer response) {
 8009d18:	4605      	mov	r5, r0
        if (NULL == spi)
 8009d1a:	6830      	ldr	r0, [r6, #0]
    void spiTransfer(Buffer command, Buffer response) {
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	460c      	mov	r4, r1
        if (NULL == spi)
 8009d20:	b190      	cbz	r0, 8009d48 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x34>
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
 8009d22:	b175      	cbz	r5, 8009d42 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2e>
 8009d24:	686a      	ldr	r2, [r5, #4]
 8009d26:	f105 0108 	add.w	r1, r5, #8
        auto clength = NULL == command ? 0 : command->length;
        auto rdata = NULL == response ? NULL : response->data;
 8009d2a:	b144      	cbz	r4, 8009d3e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2a>
 8009d2c:	f104 0308 	add.w	r3, r4, #8
 8009d30:	6864      	ldr	r4, [r4, #4]
        auto rlength = NULL == response ? 0 : response->length;
        spi->transfer(cdata, clength, rdata, rlength);
 8009d32:	6805      	ldr	r5, [r0, #0]
 8009d34:	9400      	str	r4, [sp, #0]
 8009d36:	68ec      	ldr	r4, [r5, #12]
 8009d38:	47a0      	blx	r4
    }
 8009d3a:	b002      	add	sp, #8
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
        auto rdata = NULL == response ? NULL : response->data;
 8009d3e:	4623      	mov	r3, r4
 8009d40:	e7f7      	b.n	8009d32 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x1e>
 8009d42:	462a      	mov	r2, r5
        auto cdata = NULL == command ? NULL : command->data;
 8009d44:	4629      	mov	r1, r5
 8009d46:	e7f0      	b.n	8009d2a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x16>
 8009d48:	f7ff ffa6 	bl	8009c98 <_ZN4pinsL7initSPIEv.part.0>
 8009d4c:	6830      	ldr	r0, [r6, #0]
 8009d4e:	e7e8      	b.n	8009d22 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0xe>
 8009d50:	20001114 	.word	0x20001114

08009d54 <_ZN4pins12spiFrequencyEi>:
//
//
//
//
//
    void spiFrequency(int frequency) {
 8009d54:	b510      	push	{r4, lr}
        if (NULL == spi)
 8009d56:	4c08      	ldr	r4, [pc, #32]	; (8009d78 <_ZN4pins12spiFrequencyEi+0x24>)
    void spiFrequency(int frequency) {
 8009d58:	4601      	mov	r1, r0
        if (NULL == spi)
 8009d5a:	6820      	ldr	r0, [r4, #0]
    void spiFrequency(int frequency) {
 8009d5c:	b082      	sub	sp, #8
        if (NULL == spi)
 8009d5e:	b128      	cbz	r0, 8009d6c <_ZN4pins12spiFrequencyEi+0x18>
        initSPI();
        spi->setFrequency(frequency);
 8009d60:	6802      	ldr	r2, [r0, #0]
 8009d62:	6812      	ldr	r2, [r2, #0]
    }
 8009d64:	b002      	add	sp, #8
 8009d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setFrequency(frequency);
 8009d6a:	4710      	bx	r2
 8009d6c:	9101      	str	r1, [sp, #4]
 8009d6e:	f7ff ff93 	bl	8009c98 <_ZN4pinsL7initSPIEv.part.0>
 8009d72:	6820      	ldr	r0, [r4, #0]
 8009d74:	9901      	ldr	r1, [sp, #4]
 8009d76:	e7f3      	b.n	8009d60 <_ZN4pins12spiFrequencyEi+0xc>
 8009d78:	20001114 	.word	0x20001114

08009d7c <_ZN4pins7spiModeEi>:
//
//
//
//
//
    void spiMode(int mode) {
 8009d7c:	b510      	push	{r4, lr}
        if (NULL == spi)
 8009d7e:	4c09      	ldr	r4, [pc, #36]	; (8009da4 <_ZN4pins7spiModeEi+0x28>)
    void spiMode(int mode) {
 8009d80:	4601      	mov	r1, r0
        if (NULL == spi)
 8009d82:	6820      	ldr	r0, [r4, #0]
    void spiMode(int mode) {
 8009d84:	b082      	sub	sp, #8
        if (NULL == spi)
 8009d86:	b138      	cbz	r0, 8009d98 <_ZN4pins7spiModeEi+0x1c>
        initSPI();
        spi->setMode(mode);        
 8009d88:	6802      	ldr	r2, [r0, #0]
 8009d8a:	6854      	ldr	r4, [r2, #4]
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	4623      	mov	r3, r4
    }
 8009d90:	b002      	add	sp, #8
 8009d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setMode(mode);        
 8009d96:	4718      	bx	r3
 8009d98:	9101      	str	r1, [sp, #4]
 8009d9a:	f7ff ff7d 	bl	8009c98 <_ZN4pinsL7initSPIEv.part.0>
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	9901      	ldr	r1, [sp, #4]
 8009da2:	e7f1      	b.n	8009d88 <_ZN4pins7spiModeEi+0xc>
 8009da4:	20001114 	.word	0x20001114

08009da8 <_ZN3pxt8usb_initEv>:
    create_fiber(start_usb);
}


#else
void usb_init() {}
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop

08009dac <_ZN3pxt10sendSerialEPKci>:
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 8009dac:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <_ZN3pxt10sendSerialEPKci+0xc>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	b103      	cbz	r3, 8009db4 <_ZN3pxt10sendSerialEPKci+0x8>
        pSendToUART(data, len);
 8009db2:	4718      	bx	r3
}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20001118 	.word	0x20001118

08009dbc <_ZN3pxt9dumpDmesgEv>:

void dumpDmesg() {
 8009dbc:	b510      	push	{r4, lr}
    if (pSendToUART)
 8009dbe:	4c0a      	ldr	r4, [pc, #40]	; (8009de8 <_ZN3pxt9dumpDmesgEv+0x2c>)
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	b17b      	cbz	r3, 8009de4 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 8009dc4:	2108      	movs	r1, #8
 8009dc6:	4809      	ldr	r0, [pc, #36]	; (8009dec <_ZN3pxt9dumpDmesgEv+0x30>)
 8009dc8:	4798      	blx	r3
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 8009dca:	4809      	ldr	r0, [pc, #36]	; (8009df0 <_ZN3pxt9dumpDmesgEv+0x34>)
    if (pSendToUART)
 8009dcc:	6823      	ldr	r3, [r4, #0]
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 8009dce:	6801      	ldr	r1, [r0, #0]
    if (pSendToUART)
 8009dd0:	b143      	cbz	r3, 8009de4 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 8009dd2:	3004      	adds	r0, #4
 8009dd4:	4798      	blx	r3
 8009dd6:	6823      	ldr	r3, [r4, #0]
    if (pSendToUART)
 8009dd8:	b123      	cbz	r3, 8009de4 <_ZN3pxt9dumpDmesgEv+0x28>
    sendSerial("\n\n", 2);
}
 8009dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pSendToUART(data, len);
 8009dde:	2102      	movs	r1, #2
 8009de0:	4804      	ldr	r0, [pc, #16]	; (8009df4 <_ZN3pxt9dumpDmesgEv+0x38>)
 8009de2:	4718      	bx	r3
}
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop
 8009de8:	20001118 	.word	0x20001118
 8009dec:	0800c884 	.word	0x0800c884
 8009df0:	2000121c 	.word	0x2000121c
 8009df4:	0800c890 	.word	0x0800c890

08009df8 <_ZN3pxt4incrEPNS_12TValueStructE>:
}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <_ZN3pxt4decrEPNS_12TValueStructE>:
inline void decr(TValue e) {}
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop

08009e00 <_ZN3pxt12ptrOfLiteralEi>:
    return &bytecode[offset];
 8009e00:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <_ZN3pxt12ptrOfLiteralEi+0xc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
}
 8009e04:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20001034 	.word	0x20001034

08009e10 <_ZN3pxt16startPerfCounterENS_12PerfCountersE>:
//
void startPerfCounter(PerfCounters n);
//
void stopPerfCounter(PerfCounters n);
#else
inline void startPerfCounter(PerfCounters n) {}
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop

08009e14 <_ZN3pxt15stopPerfCounterENS_12PerfCountersE>:
inline void stopPerfCounter(PerfCounters n) {}
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop

08009e18 <_ZN3pxt16dumpPerfCountersEv>:
inline void initPerfCounters() {}
inline void dumpPerfCounters() {}
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop

08009e1c <_ZN5codal14string_reverseEPc>:
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
    //sanity check...
    if(s == NULL)
 8009e1c:	b188      	cbz	r0, 8009e42 <_ZN5codal14string_reverseEPc+0x26>
{
 8009e1e:	b510      	push	{r4, lr}
 8009e20:	4604      	mov	r4, r0
        return DEVICE_INVALID_PARAMETER;

    char *j;
    int c;

    j = s + strlen(s) - 1;
 8009e22:	f7f9 fecd 	bl	8003bc0 <strlen>
 8009e26:	3801      	subs	r0, #1
 8009e28:	4420      	add	r0, r4

    while(s < j)
 8009e2a:	4284      	cmp	r4, r0
 8009e2c:	d207      	bcs.n	8009e3e <_ZN5codal14string_reverseEPc+0x22>
    {
        c = *s;
 8009e2e:	7823      	ldrb	r3, [r4, #0]
        *s++ = *j;
 8009e30:	7802      	ldrb	r2, [r0, #0]
 8009e32:	f804 2b01 	strb.w	r2, [r4], #1
        *j-- = c;
 8009e36:	f800 3901 	strb.w	r3, [r0], #-1
    while(s < j)
 8009e3a:	4284      	cmp	r4, r0
 8009e3c:	d3f7      	bcc.n	8009e2e <_ZN5codal14string_reverseEPc+0x12>
    }

    return DEVICE_OK;
 8009e3e:	2000      	movs	r0, #0
}
 8009e40:	bd10      	pop	{r4, pc}
        return DEVICE_INVALID_PARAMETER;
 8009e42:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009e46:	4770      	bx	lr

08009e48 <_ZN5codal4itoaEiPc>:
  * @param s A pointer to the buffer where the resulting string will be stored.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::itoa(int n, char *s)
{
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 8009e4a:	b349      	cbz	r1, 8009ea0 <_ZN5codal4itoaEiPc+0x58>
 8009e4c:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8009e50:	ebc4 74e0 	rsb	r4, r4, r0, asr #31
 8009e54:	1e4f      	subs	r7, r1, #1
 8009e56:	2500      	movs	r5, #0
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8009e58:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8009ea8 <_ZN5codal4itoaEiPc+0x60>
 8009e5c:	e000      	b.n	8009e60 <_ZN5codal4itoaEiPc+0x18>
 8009e5e:	461d      	mov	r5, r3
 8009e60:	fb8c 2304 	smull	r2, r3, ip, r4
 8009e64:	17e2      	asrs	r2, r4, #31
 8009e66:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8009e6a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009e6e:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
 8009e72:	3330      	adds	r3, #48	; 0x30
    } while (abs(n /= 10) > 0);
 8009e74:	4256      	negs	r6, r2
         s[i++] = abs(n % 10) + '0';
 8009e76:	f807 3f01 	strb.w	r3, [r7, #1]!
    } while (abs(n /= 10) > 0);
 8009e7a:	4614      	mov	r4, r2
         s[i++] = abs(n % 10) + '0';
 8009e7c:	1c6b      	adds	r3, r5, #1
    } while (abs(n /= 10) > 0);
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	d1ed      	bne.n	8009e5e <_ZN5codal4itoaEiPc+0x16>

    // Add a negative sign as needed
    if (!positive)
 8009e82:	2800      	cmp	r0, #0
 8009e84:	eb01 0203 	add.w	r2, r1, r3
 8009e88:	da03      	bge.n	8009e92 <_ZN5codal4itoaEiPc+0x4a>
        s[i++] = '-';
 8009e8a:	202d      	movs	r0, #45	; 0x2d
 8009e8c:	3502      	adds	r5, #2
 8009e8e:	194a      	adds	r2, r1, r5
 8009e90:	54c8      	strb	r0, [r1, r3]

    // Terminate the string.
    s[i] = '\0';
 8009e92:	2300      	movs	r3, #0
 8009e94:	4608      	mov	r0, r1
 8009e96:	7013      	strb	r3, [r2, #0]

    // Flip the order.
    string_reverse(s);
 8009e98:	f7ff ffc0 	bl	8009e1c <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
}
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 8009ea0:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 8009ea4:	e7fa      	b.n	8009e9c <_ZN5codal4itoaEiPc+0x54>
 8009ea6:	bf00      	nop
 8009ea8:	66666667 	.word	0x66666667

08009eac <_ZN5codal14CodalComponent16periodicCallbackEv>:

        /**
          * Implement this function to receive a callback every SCHEDULER_TICK_PERIOD_MS.
          */
        virtual void periodicCallback() {}
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop

08009eb0 <_ZN5codal14CodalComponent12idleCallbackEv>:

        /**
          * Implement this function to receive a callback when the device is idling.
          */
        virtual void idleCallback() {}
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop

08009eb4 <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 8009eb4:	4800      	ldr	r0, [pc, #0]	; (8009eb8 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 8009eb6:	4770      	bx	lr
 8009eb8:	fffffc16 	.word	0xfffffc16

08009ebc <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	ab02      	add	r3, sp, #8
 8009ec2:	e903 0003 	stmdb	r3, {r0, r1}
 8009ec6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d018      	beq.n	8009f00 <_Z18component_callbackN5codal5EventE+0x44>

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d114      	bne.n	8009efc <_Z18component_callbackN5codal5EventE+0x40>
 8009ed2:	4c15      	ldr	r4, [pc, #84]	; (8009f28 <_Z18component_callbackN5codal5EventE+0x6c>)
 8009ed4:	4e15      	ldr	r6, [pc, #84]	; (8009f2c <_Z18component_callbackN5codal5EventE+0x70>)
 8009ed6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8009eda:	e001      	b.n	8009ee0 <_Z18component_callbackN5codal5EventE+0x24>
    {
        while(i < DEVICE_COMPONENT_COUNT)
 8009edc:	42ac      	cmp	r4, r5
 8009ede:	d00d      	beq.n	8009efc <_Z18component_callbackN5codal5EventE+0x40>
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 8009ee0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0f9      	beq.n	8009edc <_Z18component_callbackN5codal5EventE+0x20>
 8009ee8:	88c3      	ldrh	r3, [r0, #6]
 8009eea:	045b      	lsls	r3, r3, #17
 8009eec:	d5f6      	bpl.n	8009edc <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->idleCallback();
 8009eee:	6803      	ldr	r3, [r0, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	42b3      	cmp	r3, r6
 8009ef4:	d0f2      	beq.n	8009edc <_Z18component_callbackN5codal5EventE+0x20>
 8009ef6:	4798      	blx	r3
        while(i < DEVICE_COMPONENT_COUNT)
 8009ef8:	42ac      	cmp	r4, r5
 8009efa:	d1f1      	bne.n	8009ee0 <_Z18component_callbackN5codal5EventE+0x24>

            i++;
        }
    }
}
 8009efc:	b002      	add	sp, #8
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	4c09      	ldr	r4, [pc, #36]	; (8009f28 <_Z18component_callbackN5codal5EventE+0x6c>)
 8009f02:	4e0b      	ldr	r6, [pc, #44]	; (8009f30 <_Z18component_callbackN5codal5EventE+0x74>)
 8009f04:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8009f08:	e001      	b.n	8009f0e <_Z18component_callbackN5codal5EventE+0x52>
        while(i < DEVICE_COMPONENT_COUNT)
 8009f0a:	42a5      	cmp	r5, r4
 8009f0c:	d0f6      	beq.n	8009efc <_Z18component_callbackN5codal5EventE+0x40>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 8009f0e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0f9      	beq.n	8009f0a <_Z18component_callbackN5codal5EventE+0x4e>
 8009f16:	88c3      	ldrh	r3, [r0, #6]
 8009f18:	049a      	lsls	r2, r3, #18
 8009f1a:	d5f6      	bpl.n	8009f0a <_Z18component_callbackN5codal5EventE+0x4e>
                CodalComponent::components[i]->periodicCallback();
 8009f1c:	6803      	ldr	r3, [r0, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	42b3      	cmp	r3, r6
 8009f22:	d0f2      	beq.n	8009f0a <_Z18component_callbackN5codal5EventE+0x4e>
 8009f24:	4798      	blx	r3
 8009f26:	e7f0      	b.n	8009f0a <_Z18component_callbackN5codal5EventE+0x4e>
 8009f28:	20001118 	.word	0x20001118
 8009f2c:	08009eb1 	.word	0x08009eb1
 8009f30:	08009ead 	.word	0x08009ead

08009f34 <_ZN5codal14CodalComponent12addComponentEv>:

/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	4c30      	ldr	r4, [pc, #192]	; (8009ffc <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e002      	b.n	8009f48 <_ZN5codal14CodalComponent12addComponentEv+0x14>
 8009f42:	3301      	adds	r3, #1
    uint8_t i = 0;

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 8009f44:	2b40      	cmp	r3, #64	; 0x40
 8009f46:	d005      	beq.n	8009f54 <_ZN5codal14CodalComponent12addComponentEv+0x20>
    {
        if(components[i] == NULL)
 8009f48:	f852 1b04 	ldr.w	r1, [r2], #4
 8009f4c:	2900      	cmp	r1, #0
 8009f4e:	d1f8      	bne.n	8009f42 <_ZN5codal14CodalComponent12addComponentEv+0xe>
        {
            components[i] = this;
 8009f50:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        }

        i++;
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 8009f54:	4c2a      	ldr	r4, [pc, #168]	; (800a000 <_ZN5codal14CodalComponent12addComponentEv+0xcc>)
 8009f56:	7823      	ldrb	r3, [r4, #0]
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	d409      	bmi.n	8009f70 <_ZN5codal14CodalComponent12addComponentEv+0x3c>
 8009f5c:	4d29      	ldr	r5, [pc, #164]	; (800a004 <_ZN5codal14CodalComponent12addComponentEv+0xd0>)
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b133      	cbz	r3, 8009f70 <_ZN5codal14CodalComponent12addComponentEv+0x3c>
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 8009f62:	2201      	movs	r2, #1
 8009f64:	2110      	movs	r1, #16
 8009f66:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8009f6a:	f001 f863 	bl	800b034 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 8009f6e:	b110      	cbz	r0, 8009f76 <_ZN5codal14CodalComponent12addComponentEv+0x42>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 8009f70:	b002      	add	sp, #8
 8009f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            Listener *newListener = new Listener(id, value, handler, flags);
 8009f76:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009f78:	f8d5 8000 	ldr.w	r8, [r5]
 8009f7c:	f7fa f828 	bl	8003fd0 <_Znwj>
 8009f80:	22c0      	movs	r2, #192	; 0xc0
 8009f82:	4b21      	ldr	r3, [pc, #132]	; (800a008 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 8009f84:	9200      	str	r2, [sp, #0]
 8009f86:	2110      	movs	r1, #16
 8009f88:	2201      	movs	r2, #1
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	f000 fee8 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	4e1d      	ldr	r6, [pc, #116]	; (800a00c <_ZN5codal14CodalComponent12addComponentEv+0xd8>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	42b3      	cmp	r3, r6
 8009f9a:	d122      	bne.n	8009fe2 <_ZN5codal14CodalComponent12addComponentEv+0xae>
            delete newListener;
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f000 fef7 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	f7fa f816 	bl	8003fd4 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 8009fa8:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009faa:	682f      	ldr	r7, [r5, #0]
 8009fac:	f7fa f810 	bl	8003fd0 <_Znwj>
 8009fb0:	22c0      	movs	r2, #192	; 0xc0
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 8009fb4:	9200      	str	r2, [sp, #0]
 8009fb6:	210f      	movs	r1, #15
 8009fb8:	2202      	movs	r2, #2
 8009fba:	4605      	mov	r5, r0
 8009fbc:	f000 fed0 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	42b3      	cmp	r3, r6
 8009fc6:	d112      	bne.n	8009fee <_ZN5codal14CodalComponent12addComponentEv+0xba>
            delete newListener;
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 fee1 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f7fa f800 	bl	8003fd4 <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 8009fd4:	7823      	ldrb	r3, [r4, #0]
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	7023      	strb	r3, [r4, #0]
}
 8009fdc:	b002      	add	sp, #8
 8009fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	4798      	blx	r3
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0dd      	beq.n	8009fa8 <_ZN5codal14CodalComponent12addComponentEv+0x74>
 8009fec:	e7d6      	b.n	8009f9c <_ZN5codal14CodalComponent12addComponentEv+0x68>
 8009fee:	4638      	mov	r0, r7
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4798      	blx	r3
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d0ed      	beq.n	8009fd4 <_ZN5codal14CodalComponent12addComponentEv+0xa0>
 8009ff8:	e7e6      	b.n	8009fc8 <_ZN5codal14CodalComponent12addComponentEv+0x94>
 8009ffa:	bf00      	nop
 8009ffc:	2000111c 	.word	0x2000111c
 800a000:	20001663 	.word	0x20001663
 800a004:	2000164c 	.word	0x2000164c
 800a008:	08009ebd 	.word	0x08009ebd
 800a00c:	08009eb5 	.word	0x08009eb5

0800a010 <_ZN5codal14CodalComponent15removeComponentEv>:

/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
 800a010:	b410      	push	{r4}
 800a012:	4c08      	ldr	r4, [pc, #32]	; (800a034 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 800a014:	2300      	movs	r3, #0
 800a016:	4622      	mov	r2, r4
 800a018:	e002      	b.n	800a020 <_ZN5codal14CodalComponent15removeComponentEv+0x10>
 800a01a:	3301      	adds	r3, #1
    uint8_t i = 0;

    while(i < DEVICE_COMPONENT_COUNT)
 800a01c:	2b40      	cmp	r3, #64	; 0x40
 800a01e:	d006      	beq.n	800a02e <_ZN5codal14CodalComponent15removeComponentEv+0x1e>
    {
        if(components[i] == this)
 800a020:	f852 1b04 	ldr.w	r1, [r2], #4
 800a024:	4281      	cmp	r1, r0
 800a026:	d1f8      	bne.n	800a01a <_ZN5codal14CodalComponent15removeComponentEv+0xa>
        {
            components[i] = NULL;
 800a028:	2200      	movs	r2, #0
 800a02a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            return;
        }

        i++;
    }
}
 800a02e:	bc10      	pop	{r4}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	2000111c 	.word	0x2000111c

0800a038 <_ZN5codal11CodalDevice10getVersionEv>:
        }
 800a038:	4800      	ldr	r0, [pc, #0]	; (800a03c <_ZN5codal11CodalDevice10getVersionEv+0x4>)
 800a03a:	4770      	bx	lr
 800a03c:	0800c7cc 	.word	0x0800c7cc

0800a040 <_ZN5codal11CodalDevice5sleepEm>:

using namespace codal;

void CodalDevice::sleep(unsigned long milliseconds)
{
    fiber_sleep(milliseconds);
 800a040:	4608      	mov	r0, r1
 800a042:	f000 bc99 	b.w	800a978 <_ZN5codal11fiber_sleepEm>
 800a046:	bf00      	nop

0800a048 <_ZN5codal11CodalDevice10seedRandomEm>:
         * @param seed an unsigned 32 bit value used to seed codal's lightweight Galois LFSR.
         * @return DEVICE_OK on success
         */
        virtual int seedRandom(uint32_t seed)
        {
            return target_seed_random(seed);
 800a048:	4608      	mov	r0, r1
 800a04a:	f7f6 ba43 	b.w	80004d4 <target_seed_random>
 800a04e:	bf00      	nop

0800a050 <_ZN5codal11CodalDevice5panicEi>:
            target_panic(statusCode);
 800a050:	4608      	mov	r0, r1
 800a052:	f7f6 ba53 	b.w	80004fc <target_panic>
 800a056:	bf00      	nop

0800a058 <_ZN5codal11CodalDevice15getSerialNumberEv>:
            return target_get_serial();
 800a058:	f7f6 ba44 	b.w	80004e4 <target_get_serial>

0800a05c <_ZN5codal11CodalDevice4waitEm>:
            target_wait(milliseconds);
 800a05c:	4608      	mov	r0, r1
 800a05e:	f7f6 ba09 	b.w	8000474 <target_wait>
 800a062:	bf00      	nop

0800a064 <_ZN5codal11CodalDevice5resetEv>:
            target_reset();
 800a064:	f7f6 ba20 	b.w	80004a8 <target_reset>

0800a068 <_ZL9logwritenPKci>:
using namespace codal;

static void logwrite(const char *msg);

static void logwriten(const char *msg, int l)
{
 800a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06c:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a0e0 <_ZL9logwritenPKci+0x78>
 800a070:	4607      	mov	r7, r0
 800a072:	4656      	mov	r6, sl
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 800a074:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800a0e4 <_ZL9logwritenPKci+0x7c>
 800a078:	f856 4b04 	ldr.w	r4, [r6], #4
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a07c:	f50a 7982 	add.w	r9, sl, #260	; 0x104
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
 800a080:	190b      	adds	r3, r1, r4
 800a082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a086:	460d      	mov	r5, r1
 800a088:	d20f      	bcs.n	800a0aa <_ZL9logwritenPKci+0x42>
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
 800a08a:	462a      	mov	r2, r5
 800a08c:	4639      	mov	r1, r7
 800a08e:	1930      	adds	r0, r6, r4
 800a090:	f7f9 fd7e 	bl	8003b90 <memcpy>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800a094:	2200      	movs	r2, #0
    codalLogStore.ptr += l;
 800a096:	f8da 3000 	ldr.w	r3, [sl]
 800a09a:	441d      	add	r5, r3
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800a09c:	eb0a 0305 	add.w	r3, sl, r5
 800a0a0:	711a      	strb	r2, [r3, #4]
    codalLogStore.ptr += l;
 800a0a2:	f8ca 5000 	str.w	r5, [sl]
}
 800a0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        codalLogStore.ptr -= jump;
 800a0aa:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	480a      	ldr	r0, [pc, #40]	; (800a0dc <_ZL9logwritenPKci+0x74>)
        codalLogStore.ptr -= jump;
 800a0b4:	f8ca 4000 	str.w	r4, [sl]
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a0b8:	f7f9 fd99 	bl	8003bee <memmove>
        memset(codalLogStore.buffer + codalLogStore.ptr, 0, sizeof(codalLogStore.buffer) - codalLogStore.ptr);
 800a0bc:	f5c4 6280 	rsb	r2, r4, #1024	; 0x400
 800a0c0:	1930      	adds	r0, r6, r4
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	f7f9 fdad 	bl	8003c22 <memset>
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800a0c8:	f8da 4000 	ldr.w	r4, [sl]
    logwriten(msg, strlen(msg));
 800a0cc:	2115      	movs	r1, #21
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800a0ce:	192b      	adds	r3, r5, r4
 800a0d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d4:	d3d9      	bcc.n	800a08a <_ZL9logwritenPKci+0x22>
    logwriten(msg, strlen(msg));
 800a0d6:	4647      	mov	r7, r8
 800a0d8:	e7d2      	b.n	800a080 <_ZL9logwritenPKci+0x18>
 800a0da:	bf00      	nop
 800a0dc:	20001220 	.word	0x20001220
 800a0e0:	2000121c 	.word	0x2000121c
 800a0e4:	0800c8bc 	.word	0x0800c8bc

0800a0e8 <_ZL11logwritenummbb>:
    }
    buf[i] = 0;
}

static void logwritenum(uint32_t n, bool full, bool hex)
{
 800a0e8:	b530      	push	{r4, r5, lr}
 800a0ea:	b087      	sub	sp, #28
    char buff[20];

    if (hex)
 800a0ec:	b962      	cbnz	r2, 800a108 <_ZL11logwritenummbb+0x20>
        writeNum(buff, n, full);
        logwrite("0x");
    }
    else
    {
        itoa(n, buff);
 800a0ee:	ac01      	add	r4, sp, #4
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	f7ff fea9 	bl	8009e48 <_ZN5codal4itoaEiPc>
    logwriten(msg, strlen(msg));
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7f9 fd62 	bl	8003bc0 <strlen>
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff ffb2 	bl	800a068 <_ZL9logwritenPKci>
    }

    logwrite(buff);
}
 800a104:	b007      	add	sp, #28
 800a106:	bd30      	pop	{r4, r5, pc}
 800a108:	4605      	mov	r5, r0
    int i = 0;
 800a10a:	2400      	movs	r4, #0
    int sh = 28;
 800a10c:	221c      	movs	r2, #28
 800a10e:	e00d      	b.n	800a12c <_ZL11logwritenummbb+0x44>
        if (full || d || sh == 0 || i)
 800a110:	b993      	cbnz	r3, 800a138 <_ZL11logwritenummbb+0x50>
 800a112:	b312      	cbz	r2, 800a15a <_ZL11logwritenummbb+0x72>
 800a114:	b13c      	cbz	r4, 800a126 <_ZL11logwritenummbb+0x3e>
 800a116:	4608      	mov	r0, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800a118:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a11c:	a806      	add	r0, sp, #24
 800a11e:	4420      	add	r0, r4
 800a120:	f800 3c14 	strb.w	r3, [r0, #-20]
 800a124:	3401      	adds	r4, #1
        sh -= 4;
 800a126:	3a04      	subs	r2, #4
    while (sh >= 0)
 800a128:	1d13      	adds	r3, r2, #4
 800a12a:	d00b      	beq.n	800a144 <_ZL11logwritenummbb+0x5c>
        int d = (n >> sh) & 0xf;
 800a12c:	fa25 f302 	lsr.w	r3, r5, r2
 800a130:	f003 030f 	and.w	r3, r3, #15
        if (full || d || sh == 0 || i)
 800a134:	2900      	cmp	r1, #0
 800a136:	d0eb      	beq.n	800a110 <_ZL11logwritenummbb+0x28>
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800a138:	2b09      	cmp	r3, #9
 800a13a:	b258      	sxtb	r0, r3
 800a13c:	ddec      	ble.n	800a118 <_ZL11logwritenummbb+0x30>
 800a13e:	f100 0337 	add.w	r3, r0, #55	; 0x37
 800a142:	e7eb      	b.n	800a11c <_ZL11logwritenummbb+0x34>
    buf[i] = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	aa06      	add	r2, sp, #24
 800a148:	4414      	add	r4, r2
 800a14a:	f804 3c14 	strb.w	r3, [r4, #-20]
    logwriten(msg, strlen(msg));
 800a14e:	2102      	movs	r1, #2
 800a150:	4803      	ldr	r0, [pc, #12]	; (800a160 <_ZL11logwritenummbb+0x78>)
 800a152:	ac01      	add	r4, sp, #4
 800a154:	f7ff ff88 	bl	800a068 <_ZL9logwritenPKci>
 800a158:	e7cd      	b.n	800a0f6 <_ZL11logwritenummbb+0xe>
        if (full || d || sh == 0 || i)
 800a15a:	4610      	mov	r0, r2
 800a15c:	e7dc      	b.n	800a118 <_ZL11logwritenummbb+0x30>
 800a15e:	bf00      	nop
 800a160:	0800c8b8 	.word	0x0800c8b8

0800a164 <codal_vdmesg>:
    if (dmesg_flush_fn)
        dmesg_flush_fn();
}

void codal_vdmesg(const char *format, va_list ap)
{
 800a164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a168:	460e      	mov	r6, r1
 800a16a:	b083      	sub	sp, #12
 800a16c:	4605      	mov	r5, r0
    const char *end = format;

    target_disable_irq();
 800a16e:	f7f6 f9af 	bl	80004d0 <target_disable_irq>
    logwriten(msg, strlen(msg));
 800a172:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800a23c <codal_vdmesg+0xd8>
 800a176:	4f2f      	ldr	r7, [pc, #188]	; (800a234 <codal_vdmesg+0xd0>)
 800a178:	3e04      	subs	r6, #4
 800a17a:	4629      	mov	r1, r5
 800a17c:	e002      	b.n	800a184 <codal_vdmesg+0x20>
    while (*end)
    {
        if (*end++ == '%')
 800a17e:	2a25      	cmp	r2, #37	; 0x25
 800a180:	4619      	mov	r1, r3
 800a182:	d012      	beq.n	800a1aa <codal_vdmesg+0x46>
    while (*end)
 800a184:	460b      	mov	r3, r1
 800a186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18a:	460c      	mov	r4, r1
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d1f6      	bne.n	800a17e <codal_vdmesg+0x1a>
                break;
            }
            format = end;
        }
    }
    logwriten(format, end - format);
 800a190:	1b49      	subs	r1, r1, r5
 800a192:	4628      	mov	r0, r5
 800a194:	f7ff ff68 	bl	800a068 <_ZL9logwritenPKci>
    logwriten(msg, strlen(msg));
 800a198:	2102      	movs	r1, #2
 800a19a:	4827      	ldr	r0, [pc, #156]	; (800a238 <codal_vdmesg+0xd4>)
 800a19c:	f7ff ff64 	bl	800a068 <_ZL9logwritenPKci>
    logwrite("\r\n");
    target_enable_irq();
 800a1a0:	f7f6 f994 	bl	80004cc <target_enable_irq>
}
 800a1a4:	b003      	add	sp, #12
 800a1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            logwriten(format, end - format - 1);
 800a1aa:	43eb      	mvns	r3, r5
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	4419      	add	r1, r3
 800a1b0:	f7ff ff5a 	bl	800a068 <_ZL9logwritenPKci>
            switch (*end++)
 800a1b4:	7863      	ldrb	r3, [r4, #1]
            uint32_t val = va_arg(ap, uint32_t);
 800a1b6:	f856 9f04 	ldr.w	r9, [r6, #4]!
            switch (*end++)
 800a1ba:	2b64      	cmp	r3, #100	; 0x64
            uint32_t val = va_arg(ap, uint32_t);
 800a1bc:	f8cd 9004 	str.w	r9, [sp, #4]
            switch (*end++)
 800a1c0:	f104 0502 	add.w	r5, r4, #2
 800a1c4:	d027      	beq.n	800a216 <codal_vdmesg+0xb2>
 800a1c6:	d80a      	bhi.n	800a1de <codal_vdmesg+0x7a>
 800a1c8:	2b58      	cmp	r3, #88	; 0x58
 800a1ca:	d019      	beq.n	800a200 <codal_vdmesg+0x9c>
 800a1cc:	2b63      	cmp	r3, #99	; 0x63
 800a1ce:	d010      	beq.n	800a1f2 <codal_vdmesg+0x8e>
 800a1d0:	2b25      	cmp	r3, #37	; 0x25
 800a1d2:	d01b      	beq.n	800a20c <codal_vdmesg+0xa8>
    logwriten(msg, strlen(msg));
 800a1d4:	2103      	movs	r1, #3
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7ff ff46 	bl	800a068 <_ZL9logwritenPKci>
 800a1dc:	e7cd      	b.n	800a17a <codal_vdmesg+0x16>
            switch (*end++)
 800a1de:	2b73      	cmp	r3, #115	; 0x73
 800a1e0:	d01f      	beq.n	800a222 <codal_vdmesg+0xbe>
 800a1e2:	2b78      	cmp	r3, #120	; 0x78
 800a1e4:	d10a      	bne.n	800a1fc <codal_vdmesg+0x98>
                logwritenum(val, false, true);
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	f7ff ff7c 	bl	800a0e8 <_ZL11logwritenummbb>
                break;
 800a1f0:	e7c3      	b.n	800a17a <codal_vdmesg+0x16>
                logwriten((const char *)&val, 1);
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	a801      	add	r0, sp, #4
 800a1f6:	f7ff ff37 	bl	800a068 <_ZL9logwritenPKci>
                break;
 800a1fa:	e7be      	b.n	800a17a <codal_vdmesg+0x16>
            switch (*end++)
 800a1fc:	2b70      	cmp	r3, #112	; 0x70
 800a1fe:	d1e9      	bne.n	800a1d4 <codal_vdmesg+0x70>
                logwritenum(val, true, true);
 800a200:	2201      	movs	r2, #1
 800a202:	4648      	mov	r0, r9
 800a204:	4611      	mov	r1, r2
 800a206:	f7ff ff6f 	bl	800a0e8 <_ZL11logwritenummbb>
                break;
 800a20a:	e7b6      	b.n	800a17a <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800a20c:	2101      	movs	r1, #1
 800a20e:	4638      	mov	r0, r7
 800a210:	f7ff ff2a 	bl	800a068 <_ZL9logwritenPKci>
 800a214:	e7b1      	b.n	800a17a <codal_vdmesg+0x16>
                logwritenum(val, false, false);
 800a216:	2200      	movs	r2, #0
 800a218:	4648      	mov	r0, r9
 800a21a:	4611      	mov	r1, r2
 800a21c:	f7ff ff64 	bl	800a0e8 <_ZL11logwritenummbb>
                break;
 800a220:	e7ab      	b.n	800a17a <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800a222:	4648      	mov	r0, r9
 800a224:	f7f9 fccc 	bl	8003bc0 <strlen>
 800a228:	4601      	mov	r1, r0
 800a22a:	4648      	mov	r0, r9
 800a22c:	f7ff ff1c 	bl	800a068 <_ZL9logwritenPKci>
 800a230:	e7a3      	b.n	800a17a <codal_vdmesg+0x16>
 800a232:	bf00      	nop
 800a234:	0800c8d4 	.word	0x0800c8d4
 800a238:	0800c8dc 	.word	0x0800c8dc
 800a23c:	0800c8d8 	.word	0x0800c8d8

0800a240 <codal_dmesg>:
{
 800a240:	b40f      	push	{r0, r1, r2, r3}
 800a242:	b500      	push	{lr}
 800a244:	b083      	sub	sp, #12
 800a246:	ab04      	add	r3, sp, #16
 800a248:	f853 0b04 	ldr.w	r0, [r3], #4
    codal_vdmesg(format, arg);
 800a24c:	4619      	mov	r1, r3
    va_start(arg, format);
 800a24e:	9301      	str	r3, [sp, #4]
    codal_vdmesg(format, arg);
 800a250:	f7ff ff88 	bl	800a164 <codal_vdmesg>
}
 800a254:	b003      	add	sp, #12
 800a256:	f85d eb04 	ldr.w	lr, [sp], #4
 800a25a:	b004      	add	sp, #16
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop

0800a260 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 800a260:	4800      	ldr	r0, [pc, #0]	; (800a264 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 800a262:	4770      	bx	lr
 800a264:	fffffc16 	.word	0xfffffc16

0800a268 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>:

using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
 800a268:	b1b2      	cbz	r2, 800a298 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x30>
{
 800a26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (queue && queue->prev) target_panic(30);
 800a26c:	69d3      	ldr	r3, [r2, #28]
 800a26e:	4605      	mov	r5, r0
 800a270:	460f      	mov	r7, r1
 800a272:	4614      	mov	r4, r2
 800a274:	b113      	cbz	r3, 800a27c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x14>
 800a276:	201e      	movs	r0, #30
 800a278:	f7f6 f940 	bl	80004fc <target_panic>
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	3201      	adds	r2, #1
    while (queue) {
        if (*dest)
 800a280:	682b      	ldr	r3, [r5, #0]
            *(*dest)++ = queue;
        (*sum)++;
 800a282:	4616      	mov	r6, r2
        if (*dest)
 800a284:	b113      	cbz	r3, 800a28c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x24>
            *(*dest)++ = queue;
 800a286:	1d18      	adds	r0, r3, #4
 800a288:	6028      	str	r0, [r5, #0]
 800a28a:	601c      	str	r4, [r3, #0]
        queue = queue->next;
 800a28c:	69a4      	ldr	r4, [r4, #24]
 800a28e:	3201      	adds	r2, #1
    while (queue) {
 800a290:	2c00      	cmp	r4, #0
 800a292:	d1f5      	bne.n	800a280 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x18>
 800a294:	603e      	str	r6, [r7, #0]
    }
}
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop

0800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>:
/**
  * Utility function to the given fiber from whichever queue it is currently stored on.
  *
  * @param f the fiber to remove.
  */
void codal::dequeue_fiber(Fiber *f)
 800a29c:	b510      	push	{r4, lr}
 800a29e:	4604      	mov	r4, r0
    // If this fiber is already dequeued, nothing the there's nothing to do.
    if (f->queue == NULL)
        return;

    // Remove this fiber fromm whichever queue it is on.
    target_disable_irq();
 800a2a0:	f7f6 f916 	bl	80004d0 <target_disable_irq>

    if (f->prev != NULL)
        f->prev->next = f->next;
 800a2a4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    if (f->prev != NULL)
 800a2a8:	b163      	cbz	r3, 800a2c4 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x28>
        f->prev->next = f->next;
 800a2aa:	619a      	str	r2, [r3, #24]
    else
        *(f->queue) = f->next;

    if(f->next)
 800a2ac:	69a3      	ldr	r3, [r4, #24]
 800a2ae:	b10b      	cbz	r3, 800a2b4 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x18>
        f->next->prev = f->prev;
 800a2b0:	69e2      	ldr	r2, [r4, #28]
 800a2b2:	61da      	str	r2, [r3, #28]

    f->next = NULL;
 800a2b4:	2300      	movs	r3, #0
    f->prev = NULL;
 800a2b6:	e9c4 3306 	strd	r3, r3, [r4, #24]
    f->queue = NULL;
 800a2ba:	6163      	str	r3, [r4, #20]

    target_enable_irq();
}
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_enable_irq();
 800a2c0:	f7f6 b904 	b.w	80004cc <target_enable_irq>
        *(f->queue) = f->next;
 800a2c4:	6963      	ldr	r3, [r4, #20]
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	e7f0      	b.n	800a2ac <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x10>
 800a2ca:	bf00      	nop

0800a2cc <_ZN5codal11list_fibersEPPNS_5FiberE>:
    int sum = 0;
 800a2cc:	2300      	movs	r3, #0
{
 800a2ce:	b510      	push	{r4, lr}
 800a2d0:	b084      	sub	sp, #16
    int sum = 0;
 800a2d2:	ac04      	add	r4, sp, #16
 800a2d4:	f844 3d04 	str.w	r3, [r4, #-4]!
{
 800a2d8:	9001      	str	r0, [sp, #4]
    target_disable_irq();
 800a2da:	f7f6 f8f9 	bl	80004d0 <target_disable_irq>
    get_fibers_from(&dest, &sum, runQueue);
 800a2de:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <_ZN5codal11list_fibersEPPNS_5FiberE+0x4c>)
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	a801      	add	r0, sp, #4
 800a2e6:	f7ff ffbf 	bl	800a268 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, sleepQueue);
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <_ZN5codal11list_fibersEPPNS_5FiberE+0x50>)
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	a801      	add	r0, sp, #4
 800a2f2:	f7ff ffb9 	bl	800a268 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, waitQueue);
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <_ZN5codal11list_fibersEPPNS_5FiberE+0x54>)
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	a801      	add	r0, sp, #4
 800a2fe:	f7ff ffb3 	bl	800a268 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    target_enable_irq();
 800a302:	f7f6 f8e3 	bl	80004cc <target_enable_irq>
    if (dest)
 800a306:	9b01      	ldr	r3, [sp, #4]
 800a308:	b113      	cbz	r3, 800a310 <_ZN5codal11list_fibersEPPNS_5FiberE+0x44>
        *dest++ = idleFiber;
 800a30a:	4a06      	ldr	r2, [pc, #24]	; (800a324 <_ZN5codal11list_fibersEPPNS_5FiberE+0x58>)
 800a30c:	6812      	ldr	r2, [r2, #0]
 800a30e:	601a      	str	r2, [r3, #0]
    sum++;
 800a310:	9803      	ldr	r0, [sp, #12]
}
 800a312:	3001      	adds	r0, #1
 800a314:	b004      	add	sp, #16
 800a316:	bd10      	pop	{r4, pc}
 800a318:	20001630 	.word	0x20001630
 800a31c:	20001628 	.word	0x20001628
 800a320:	2000163c 	.word	0x2000163c
 800a324:	20001638 	.word	0x20001638

0800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	460d      	mov	r5, r1
 800a32c:	4604      	mov	r4, r0
    target_disable_irq();
 800a32e:	f7f6 f8cf 	bl	80004d0 <target_disable_irq>
    if (*queue == NULL)
 800a332:	682a      	ldr	r2, [r5, #0]
    f->queue = queue;
 800a334:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 800a336:	b90a      	cbnz	r2, 800a33c <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x14>
 800a338:	e00a      	b.n	800a350 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
 800a33a:	461a      	mov	r2, r3
        while (last->next != NULL)
 800a33c:	6993      	ldr	r3, [r2, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1fb      	bne.n	800a33a <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x12>
        last->next = f;
 800a342:	6194      	str	r4, [r2, #24]
        f->next = NULL;
 800a344:	e9c4 3206 	strd	r3, r2, [r4, #24]
}
 800a348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800a34c:	f7f6 b8be 	b.w	80004cc <target_enable_irq>
        f->prev = NULL;
 800a350:	e9c4 2206 	strd	r2, r2, [r4, #24]
        *queue = f;
 800a354:	602c      	str	r4, [r5, #0]
}
 800a356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800a35a:	f7f6 b8b7 	b.w	80004cc <target_enable_irq>
 800a35e:	bf00      	nop

0800a360 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 800a360:	b5f0      	push	{r4, r5, r6, r7, lr}
    Fiber *f = sleepQueue;
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
{
 800a364:	b083      	sub	sp, #12
    Fiber *f = sleepQueue;
 800a366:	681c      	ldr	r4, [r3, #0]
{
 800a368:	aa02      	add	r2, sp, #8
 800a36a:	e902 0003 	stmdb	r2, {r0, r1}
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 800a36e:	b18c      	cbz	r4, 800a394 <_ZN5codal14scheduler_tickENS_5EventE+0x34>
 800a370:	9e01      	ldr	r6, [sp, #4]

        if (evt.timestamp >= f->context)
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800a372:	4f0a      	ldr	r7, [pc, #40]	; (800a39c <_ZN5codal14scheduler_tickENS_5EventE+0x3c>)
        if (evt.timestamp >= f->context)
 800a374:	68e3      	ldr	r3, [r4, #12]
        t = f->next;
 800a376:	69a5      	ldr	r5, [r4, #24]
        if (evt.timestamp >= f->context)
 800a378:	42b3      	cmp	r3, r6
 800a37a:	d808      	bhi.n	800a38e <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    if (f->queue == NULL)
 800a37c:	6963      	ldr	r3, [r4, #20]
 800a37e:	b113      	cbz	r3, 800a386 <_ZN5codal14scheduler_tickENS_5EventE+0x26>
 800a380:	4620      	mov	r0, r4
 800a382:	f7ff ff8b 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
            queue_fiber(f,&runQueue);
 800a386:	4620      	mov	r0, r4
 800a388:	4639      	mov	r1, r7
 800a38a:	f7ff ffcd 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    while (f != NULL)
 800a38e:	462c      	mov	r4, r5
 800a390:	2d00      	cmp	r5, #0
 800a392:	d1ef      	bne.n	800a374 <_ZN5codal14scheduler_tickENS_5EventE+0x14>
        }

        f = t;
    }
}
 800a394:	b003      	add	sp, #12
 800a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a398:	20001628 	.word	0x20001628
 800a39c:	20001630 	.word	0x20001630

0800a3a0 <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 800a3a4:	4f33      	ldr	r7, [pc, #204]	; (800a474 <_ZN5codal15scheduler_eventENS_5EventE+0xd4>)
{
 800a3a6:	b08f      	sub	sp, #60	; 0x3c
    if (messageBus == NULL)
 800a3a8:	683a      	ldr	r2, [r7, #0]
{
 800a3aa:	ab04      	add	r3, sp, #16
 800a3ac:	e883 0003 	stmia.w	r3, {r0, r1}
    if (messageBus == NULL)
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	d032      	beq.n	800a41a <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
    Fiber *f = waitQueue;
 800a3b4:	4b30      	ldr	r3, [pc, #192]	; (800a478 <_ZN5codal15scheduler_eventENS_5EventE+0xd8>)
 800a3b6:	f8bd a010 	ldrh.w	sl, [sp, #16]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	f8bd 5012 	ldrh.w	r5, [sp, #18]
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
 800a3c0:	b1b2      	cbz	r2, 800a3f0 <_ZN5codal15scheduler_eventENS_5EventE+0x50>
    int notifyOneComplete = 0;
 800a3c2:	f04f 0900 	mov.w	r9, #0
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a3c6:	f240 34fe 	movw	r4, #1022	; 0x3fe
 800a3ca:	f240 38ff 	movw	r8, #1023	; 0x3ff
        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800a3ce:	4e2b      	ldr	r6, [pc, #172]	; (800a47c <_ZN5codal15scheduler_eventENS_5EventE+0xdc>)
        uint16_t id = f->context & 0xFFFF;
 800a3d0:	68d3      	ldr	r3, [r2, #12]
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a3d2:	45a2      	cmp	sl, r4
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800a3d4:	ea4f 4113 	mov.w	r1, r3, lsr #16
        t = f->next;
 800a3d8:	f8d2 b018 	ldr.w	fp, [r2, #24]
        uint16_t id = f->context & 0xFFFF;
 800a3dc:	b29b      	uxth	r3, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800a3de:	b288      	uxth	r0, r1
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a3e0:	d01e      	beq.n	800a420 <_ZN5codal15scheduler_eventENS_5EventE+0x80>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d032      	beq.n	800a44c <_ZN5codal15scheduler_eventENS_5EventE+0xac>
 800a3e6:	459a      	cmp	sl, r3
 800a3e8:	d030      	beq.n	800a44c <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    while (f != NULL)
 800a3ea:	465a      	mov	r2, fp
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	d1ef      	bne.n	800a3d0 <_ZN5codal15scheduler_eventENS_5EventE+0x30>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 800a3f0:	f2aa 33fe 	subw	r3, sl, #1022	; 0x3fe
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d910      	bls.n	800a41a <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 800a3f8:	2310      	movs	r3, #16
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 800a3fa:	683c      	ldr	r4, [r7, #0]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	4651      	mov	r1, sl
 800a402:	4b1f      	ldr	r3, [pc, #124]	; (800a480 <_ZN5codal15scheduler_eventENS_5EventE+0xe0>)
 800a404:	a806      	add	r0, sp, #24
 800a406:	f000 fcab 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <_ZN5codal15scheduler_eventENS_5EventE+0xe4>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	4293      	cmp	r3, r2
 800a412:	d12a      	bne.n	800a46a <_ZN5codal15scheduler_eventENS_5EventE+0xca>
            Listener listener(id, value, handler);
 800a414:	a806      	add	r0, sp, #24
 800a416:	f000 fcbb 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
}
 800a41a:	b00f      	add	sp, #60	; 0x3c
 800a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a420:	4543      	cmp	r3, r8
 800a422:	d1de      	bne.n	800a3e2 <_ZN5codal15scheduler_eventENS_5EventE+0x42>
 800a424:	b109      	cbz	r1, 800a42a <_ZN5codal15scheduler_eventENS_5EventE+0x8a>
 800a426:	42a8      	cmp	r0, r5
 800a428:	d1df      	bne.n	800a3ea <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            if (!notifyOneComplete)
 800a42a:	f1b9 0f00 	cmp.w	r9, #0
 800a42e:	d1dc      	bne.n	800a3ea <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800a430:	6953      	ldr	r3, [r2, #20]
 800a432:	b123      	cbz	r3, 800a43e <_ZN5codal15scheduler_eventENS_5EventE+0x9e>
 800a434:	4610      	mov	r0, r2
 800a436:	9203      	str	r2, [sp, #12]
 800a438:	f7ff ff30 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800a43c:	9a03      	ldr	r2, [sp, #12]
                queue_fiber(f,&runQueue);
 800a43e:	4610      	mov	r0, r2
 800a440:	4631      	mov	r1, r6
 800a442:	f7ff ff71 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800a446:	f04f 0901 	mov.w	r9, #1
 800a44a:	e7ce      	b.n	800a3ea <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800a44c:	b109      	cbz	r1, 800a452 <_ZN5codal15scheduler_eventENS_5EventE+0xb2>
 800a44e:	42a8      	cmp	r0, r5
 800a450:	d1cb      	bne.n	800a3ea <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800a452:	6953      	ldr	r3, [r2, #20]
 800a454:	b123      	cbz	r3, 800a460 <_ZN5codal15scheduler_eventENS_5EventE+0xc0>
 800a456:	4610      	mov	r0, r2
 800a458:	9203      	str	r2, [sp, #12]
 800a45a:	f7ff ff1f 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800a45e:	9a03      	ldr	r2, [sp, #12]
            queue_fiber(f,&runQueue);
 800a460:	4610      	mov	r0, r2
 800a462:	4631      	mov	r1, r6
 800a464:	f7ff ff60 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 800a468:	e7bf      	b.n	800a3ea <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            remove(&listener);
 800a46a:	4620      	mov	r0, r4
 800a46c:	a906      	add	r1, sp, #24
 800a46e:	4798      	blx	r3
 800a470:	e7d0      	b.n	800a414 <_ZN5codal15scheduler_eventENS_5EventE+0x74>
 800a472:	bf00      	nop
 800a474:	20001624 	.word	0x20001624
 800a478:	2000163c 	.word	0x2000163c
 800a47c:	20001630 	.word	0x20001630
 800a480:	0800a3a1 	.word	0x0800a3a1
 800a484:	0800a261 	.word	0x0800a261

0800a488 <_Z15getFiberContextv>:
{
 800a488:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 800a48a:	f7f6 f821 	bl	80004d0 <target_disable_irq>
    if (fiberPool != NULL)
 800a48e:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <_Z15getFiberContextv+0x50>)
 800a490:	681c      	ldr	r4, [r3, #0]
 800a492:	b194      	cbz	r4, 800a4ba <_Z15getFiberContextv+0x32>
    if (f->queue == NULL)
 800a494:	6963      	ldr	r3, [r4, #20]
 800a496:	b113      	cbz	r3, 800a49e <_Z15getFiberContextv+0x16>
 800a498:	4620      	mov	r0, r4
 800a49a:	f7ff feff 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    target_enable_irq();
 800a49e:	f7f6 f815 	bl	80004cc <target_enable_irq>
    f->flags = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 800a4a6:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 800a4a8:	6825      	ldr	r5, [r4, #0]
 800a4aa:	f7f6 f837 	bl	800051c <fiber_initial_stack_base>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7f6 f83f 	bl	8000534 <tcb_configure_stack_base>
}
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800a4ba:	2024      	movs	r0, #36	; 0x24
 800a4bc:	f7f9 fd88 	bl	8003fd0 <_Znwj>
 800a4c0:	2224      	movs	r2, #36	; 0x24
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	f7f9 fbac 	bl	8003c22 <memset>
        f->tcb = tcb_allocate();
 800a4ca:	f7f6 f82b 	bl	8000524 <tcb_allocate>
        f->stack_bottom = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e9c4 0300 	strd	r0, r3, [r4]
        f->stack_top = 0;
 800a4d4:	60a3      	str	r3, [r4, #8]
 800a4d6:	e7e2      	b.n	800a49e <_Z15getFiberContextv+0x16>
 800a4d8:	20001634 	.word	0x20001634

0800a4dc <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
    Fiber *f = currentFiber;
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <_ZL10handle_fobv+0x2c>)
{
 800a4de:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 800a4e0:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	07db      	lsls	r3, r3, #31
 800a4e6:	d401      	bmi.n	800a4ec <_ZL10handle_fobv+0x10>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 800a4ec:	f7ff ffcc 	bl	800a488 <_Z15getFiberContextv>
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <_ZL10handle_fobv+0x30>)
 800a4f2:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d0f7      	beq.n	800a4e8 <_ZL10handle_fobv+0xc>
            f->user_data = NULL;
 800a4f8:	2300      	movs	r3, #0
            forkedFiber->user_data = f->user_data;
 800a4fa:	6a22      	ldr	r2, [r4, #32]
 800a4fc:	6202      	str	r2, [r0, #32]
            f->user_data = NULL;
 800a4fe:	6223      	str	r3, [r4, #32]
 800a500:	4604      	mov	r4, r0
}
 800a502:	4620      	mov	r0, r4
 800a504:	bd10      	pop	{r4, pc}
 800a506:	bf00      	nop
 800a508:	20001620 	.word	0x20001620
 800a50c:	2000162c 	.word	0x2000162c

0800a510 <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a514:	4d45      	ldr	r5, [pc, #276]	; (800a62c <_ZN5codal14scheduler_initERNS_10EventModelE+0x11c>)
{
 800a516:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a518:	782a      	ldrb	r2, [r5, #0]
 800a51a:	f012 0401 	ands.w	r4, r2, #1
 800a51e:	d002      	beq.n	800a526 <_ZN5codal14scheduler_initERNS_10EventModelE+0x16>
}
 800a520:	b002      	add	sp, #8
 800a522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    messageBus = &_messageBus;
 800a526:	4e42      	ldr	r6, [pc, #264]	; (800a630 <_ZN5codal14scheduler_initERNS_10EventModelE+0x120>)
    idleFiber = getFiberContext();
 800a528:	4f42      	ldr	r7, [pc, #264]	; (800a634 <_ZN5codal14scheduler_initERNS_10EventModelE+0x124>)
    messageBus = &_messageBus;
 800a52a:	6030      	str	r0, [r6, #0]
    currentFiber = getFiberContext();
 800a52c:	f7ff ffac 	bl	800a488 <_Z15getFiberContextv>
 800a530:	4b41      	ldr	r3, [pc, #260]	; (800a638 <_ZN5codal14scheduler_initERNS_10EventModelE+0x128>)
    queue_fiber(currentFiber, &runQueue);
 800a532:	4942      	ldr	r1, [pc, #264]	; (800a63c <_ZN5codal14scheduler_initERNS_10EventModelE+0x12c>)
    currentFiber = getFiberContext();
 800a534:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 800a536:	f7ff fef7 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 800a53a:	f7ff ffa5 	bl	800a488 <_Z15getFiberContextv>
 800a53e:	6038      	str	r0, [r7, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800a540:	f8d0 8000 	ldr.w	r8, [r0]
 800a544:	f7f5 ffea 	bl	800051c <fiber_initial_stack_base>
 800a548:	1f01      	subs	r1, r0, #4
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7f5 fff0 	bl	8000530 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	493b      	ldr	r1, [pc, #236]	; (800a640 <_ZN5codal14scheduler_initERNS_10EventModelE+0x130>)
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f7f5 ffe9 	bl	800052c <tcb_configure_lr>
    if (messageBus)
 800a55a:	6837      	ldr	r7, [r6, #0]
 800a55c:	2f00      	cmp	r7, #0
 800a55e:	d04b      	beq.n	800a5f8 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
            Listener *newListener = new Listener(id, value, handler, flags);
 800a560:	2020      	movs	r0, #32
 800a562:	f7f9 fd35 	bl	8003fd0 <_Znwj>
 800a566:	23c0      	movs	r3, #192	; 0xc0
 800a568:	4622      	mov	r2, r4
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a570:	4b34      	ldr	r3, [pc, #208]	; (800a644 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800a572:	4680      	mov	r8, r0
 800a574:	f000 fbf4 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	4c33      	ldr	r4, [pc, #204]	; (800a648 <_ZN5codal14scheduler_initERNS_10EventModelE+0x138>)
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	42a3      	cmp	r3, r4
 800a580:	d141      	bne.n	800a606 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf6>
            delete newListener;
 800a582:	4640      	mov	r0, r8
 800a584:	f000 fc04 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800a588:	4640      	mov	r0, r8
 800a58a:	f7f9 fd23 	bl	8003fd4 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 800a58e:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800a590:	f8d6 8000 	ldr.w	r8, [r6]
 800a594:	f7f9 fd1c 	bl	8003fd0 <_Znwj>
 800a598:	22c0      	movs	r2, #192	; 0xc0
 800a59a:	4b2a      	ldr	r3, [pc, #168]	; (800a644 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800a59c:	9200      	str	r2, [sp, #0]
 800a59e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	f000 fbdb 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d134      	bne.n	800a61e <_ZN5codal14scheduler_initERNS_10EventModelE+0x10e>
            delete newListener;
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f000 fbeb 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f7f9 fd0a 	bl	8003fd4 <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	210f      	movs	r1, #15
 800a5c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800a5c8:	f000 fd34 	bl	800b034 <_ZN5codal27system_timer_event_every_usEmtt>
            Listener *newListener = new Listener(id, value, handler, flags);
 800a5cc:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800a5ce:	6837      	ldr	r7, [r6, #0]
 800a5d0:	f7f9 fcfe 	bl	8003fd0 <_Znwj>
 800a5d4:	22c0      	movs	r2, #192	; 0xc0
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <_ZN5codal14scheduler_initERNS_10EventModelE+0x13c>)
 800a5d8:	9200      	str	r2, [sp, #0]
 800a5da:	210f      	movs	r1, #15
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4606      	mov	r6, r0
 800a5e0:	f000 fbbe 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	d112      	bne.n	800a612 <_ZN5codal14scheduler_initERNS_10EventModelE+0x102>
            delete newListener;
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 fbcf 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7f9 fcee 	bl	8003fd4 <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 800a5f8:	782b      	ldrb	r3, [r5, #0]
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	702b      	strb	r3, [r5, #0]
}
 800a600:	b002      	add	sp, #8
 800a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 800a606:	4638      	mov	r0, r7
 800a608:	4641      	mov	r1, r8
 800a60a:	4798      	blx	r3
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0be      	beq.n	800a58e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7e>
 800a610:	e7b7      	b.n	800a582 <_ZN5codal14scheduler_initERNS_10EventModelE+0x72>
 800a612:	4638      	mov	r0, r7
 800a614:	4631      	mov	r1, r6
 800a616:	4798      	blx	r3
 800a618:	2800      	cmp	r0, #0
 800a61a:	d0ed      	beq.n	800a5f8 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
 800a61c:	e7e6      	b.n	800a5ec <_ZN5codal14scheduler_initERNS_10EventModelE+0xdc>
 800a61e:	4640      	mov	r0, r8
 800a620:	4639      	mov	r1, r7
 800a622:	4798      	blx	r3
 800a624:	2800      	cmp	r0, #0
 800a626:	d0cb      	beq.n	800a5c0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 800a628:	e7c4      	b.n	800a5b4 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa4>
 800a62a:	bf00      	nop
 800a62c:	20001664 	.word	0x20001664
 800a630:	20001624 	.word	0x20001624
 800a634:	20001638 	.word	0x20001638
 800a638:	20001620 	.word	0x20001620
 800a63c:	20001630 	.word	0x20001630
 800a640:	0800ab7d 	.word	0x0800ab7d
 800a644:	0800a3a1 	.word	0x0800a3a1
 800a648:	08009eb5 	.word	0x08009eb5
 800a64c:	0800a361 	.word	0x0800a361

0800a650 <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a650:	4b02      	ldr	r3, [pc, #8]	; (800a65c <_ZN5codal23fiber_scheduler_runningEv+0xc>)
 800a652:	7818      	ldrb	r0, [r3, #0]
}
 800a654:	f000 0001 	and.w	r0, r0, #1
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20001664 	.word	0x20001664

0800a660 <_ZN5codal19fiber_wake_on_eventEtt>:
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 800a660:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (messageBus == NULL || !fiber_scheduler_running())
 800a662:	4f1f      	ldr	r7, [pc, #124]	; (800a6e0 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
{
 800a664:	b083      	sub	sp, #12
    if (messageBus == NULL || !fiber_scheduler_running())
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d037      	beq.n	800a6dc <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	07db      	lsls	r3, r3, #31
 800a672:	d533      	bpl.n	800a6dc <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
 800a674:	460e      	mov	r6, r1
 800a676:	4604      	mov	r4, r0
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 800a678:	f7ff ff30 	bl	800a4dc <_ZL10handle_fobv>
    if (f->queue == NULL)
 800a67c:	6943      	ldr	r3, [r0, #20]

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 800a67e:	ea44 4206 	orr.w	r2, r4, r6, lsl #16
    Fiber *f = handle_fob();
 800a682:	4605      	mov	r5, r0
    f->context = (uint32_t)value << 16 | id;
 800a684:	60c2      	str	r2, [r0, #12]
    if (f->queue == NULL)
 800a686:	b10b      	cbz	r3, 800a68c <_ZN5codal19fiber_wake_on_eventEtt+0x2c>
 800a688:	f7ff fe08 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>

    // Remove ourselves from the run queue
    dequeue_fiber(f);

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 800a68c:	4628      	mov	r0, r5
 800a68e:	4916      	ldr	r1, [pc, #88]	; (800a6e8 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 800a690:	f7ff fe4a 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 800a694:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d916      	bls.n	800a6ca <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
            Listener *newListener = new Listener(id, value, handler, flags);
 800a69c:	2020      	movs	r0, #32
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800a69e:	683f      	ldr	r7, [r7, #0]
 800a6a0:	f7f9 fc96 	bl	8003fd0 <_Znwj>
 800a6a4:	23c0      	movs	r3, #192	; 0xc0
 800a6a6:	4632      	mov	r2, r6
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	f000 fb56 	bl	800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	4a0e      	ldr	r2, [pc, #56]	; (800a6f0 <_ZN5codal19fiber_wake_on_eventEtt+0x90>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d108      	bne.n	800a6d0 <_ZN5codal19fiber_wake_on_eventEtt+0x70>
            delete newListener;
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 fb66 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f7f9 fc85 	bl	8003fd4 <_ZdlPv>
 800a6ca:	2000      	movs	r0, #0

    return DEVICE_OK;
}
 800a6cc:	b003      	add	sp, #12
 800a6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(add(newListener) == DEVICE_OK)
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4798      	blx	r3
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0f7      	beq.n	800a6ca <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
 800a6da:	e7f0      	b.n	800a6be <_ZN5codal19fiber_wake_on_eventEtt+0x5e>
        return DEVICE_NOT_SUPPORTED;
 800a6dc:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <_ZN5codal19fiber_wake_on_eventEtt+0x94>)
 800a6de:	e7f5      	b.n	800a6cc <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 800a6e0:	20001624 	.word	0x20001624
 800a6e4:	20001664 	.word	0x20001664
 800a6e8:	2000163c 	.word	0x2000163c
 800a6ec:	0800a3a1 	.word	0x0800a3a1
 800a6f0:	08009eb5 	.word	0x08009eb5
 800a6f4:	fffffc16 	.word	0xfffffc16

0800a6f8 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 800a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 800a6fc:	b328      	cbz	r0, 800a74a <_Z14__create_fibermmmi+0x52>
 800a6fe:	b321      	cbz	r1, 800a74a <_Z14__create_fibermmmi+0x52>
 800a700:	4605      	mov	r5, r0
 800a702:	4698      	mov	r8, r3
 800a704:	4617      	mov	r7, r2
 800a706:	460e      	mov	r6, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 800a708:	f7ff febe 	bl	800a488 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 800a70c:	4604      	mov	r4, r0
 800a70e:	b1e0      	cbz	r0, 800a74a <_Z14__create_fibermmmi+0x52>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 800a710:	4632      	mov	r2, r6
 800a712:	463b      	mov	r3, r7
 800a714:	4629      	mov	r1, r5
 800a716:	6800      	ldr	r0, [r0, #0]
 800a718:	f7f5 ff14 	bl	8000544 <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 800a71c:	6825      	ldr	r5, [r4, #0]
 800a71e:	f7f5 fefd 	bl	800051c <fiber_initial_stack_base>
 800a722:	1f01      	subs	r1, r0, #4
 800a724:	4628      	mov	r0, r5
 800a726:	f7f5 ff03 	bl	8000530 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 800a72a:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <_Z14__create_fibermmmi+0x5c>)
 800a72c:	490a      	ldr	r1, [pc, #40]	; (800a758 <_Z14__create_fibermmmi+0x60>)
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	bf18      	it	ne
 800a736:	4619      	movne	r1, r3
 800a738:	f7f5 fef8 	bl	800052c <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 800a73c:	4620      	mov	r0, r4
 800a73e:	4907      	ldr	r1, [pc, #28]	; (800a75c <_Z14__create_fibermmmi+0x64>)
 800a740:	f7ff fdf2 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 800a744:	4620      	mov	r0, r4
 800a746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NULL;
 800a74a:	2400      	movs	r4, #0
}
 800a74c:	4620      	mov	r0, r4
 800a74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a752:	bf00      	nop
 800a754:	0800ab55 	.word	0x0800ab55
 800a758:	0800aa81 	.word	0x0800aa81
 800a75c:	20001630 	.word	0x20001630

0800a760 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x20>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f013 0301 	ands.w	r3, r3, #1
 800a768:	d007      	beq.n	800a77a <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>
  *                      Defaults to release_fiber.
  *
  * @return The new Fiber, or NULL if the operation could not be completed.
  */
Fiber *codal::create_fiber(void (*entry_fn)(void *), void *param, void (*completion_fn)(void *))
{
 800a76a:	b410      	push	{r4}
 800a76c:	4614      	mov	r4, r2
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800a76e:	2301      	movs	r3, #1
 800a770:	460a      	mov	r2, r1
 800a772:	4621      	mov	r1, r4
}
 800a774:	bc10      	pop	{r4}
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800a776:	f7ff bfbf 	b.w	800a6f8 <_Z14__create_fibermmmi>
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20001664 	.word	0x20001664

0800a784 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 800a786:	6818      	ldr	r0, [r3, #0]
}
 800a788:	fab0 f080 	clz	r0, r0
 800a78c:	0940      	lsrs	r0, r0, #5
 800a78e:	4770      	bx	lr
 800a790:	20001630 	.word	0x20001630

0800a794 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 800a794:	b530      	push	{r4, r5, lr}
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800a796:	4d0f      	ldr	r5, [pc, #60]	; (800a7d4 <_ZN5codal4idleEv+0x40>)
{
 800a798:	b083      	sub	sp, #12
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800a79a:	782b      	ldrb	r3, [r5, #0]
 800a79c:	079a      	lsls	r2, r3, #30
 800a79e:	d504      	bpl.n	800a7aa <_ZN5codal4idleEv+0x16>
    return (runQueue == NULL);
 800a7a0:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <_ZN5codal4idleEv+0x44>)
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	b173      	cbz	r3, 800a7c4 <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 800a7a6:	b003      	add	sp, #12
 800a7a8:	bd30      	pop	{r4, r5, pc}
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800a7aa:	f043 0402 	orr.w	r4, r3, #2
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	210f      	movs	r1, #15
 800a7b4:	4668      	mov	r0, sp
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800a7b6:	702c      	strb	r4, [r5, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800a7b8:	f000 ff44 	bl	800b644 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return (runQueue == NULL);
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <_ZN5codal4idleEv+0x44>)
    if(scheduler_runqueue_empty())
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1f0      	bne.n	800a7a6 <_ZN5codal4idleEv+0x12>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 800a7c4:	782b      	ldrb	r3, [r5, #0]
 800a7c6:	f023 0302 	bic.w	r3, r3, #2
 800a7ca:	702b      	strb	r3, [r5, #0]
        target_wait_for_event();
 800a7cc:	f7f5 fe1a 	bl	8000404 <target_wait_for_event>
}
 800a7d0:	b003      	add	sp, #12
 800a7d2:	bd30      	pop	{r4, r5, pc}
 800a7d4:	20001664 	.word	0x20001664
 800a7d8:	20001630 	.word	0x20001630

0800a7dc <_ZN5codal8scheduleEv.part.3>:
void codal::schedule()
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Fiber *oldFiber = currentFiber;
 800a7e0:	4d5a      	ldr	r5, [pc, #360]	; (800a94c <_ZN5codal8scheduleEv.part.3+0x170>)
 800a7e2:	682c      	ldr	r4, [r5, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	07d9      	lsls	r1, r3, #31
 800a7e8:	d447      	bmi.n	800a87a <_ZN5codal8scheduleEv.part.3+0x9e>
    if (runQueue == NULL)
 800a7ea:	4e59      	ldr	r6, [pc, #356]	; (800a950 <_ZN5codal8scheduleEv.part.3+0x174>)
 800a7ec:	4f59      	ldr	r7, [pc, #356]	; (800a954 <_ZN5codal8scheduleEv.part.3+0x178>)
 800a7ee:	6832      	ldr	r2, [r6, #0]
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	d031      	beq.n	800a85a <_ZN5codal8scheduleEv.part.3+0x7e>
    else if (currentFiber->queue == &runQueue)
 800a7f6:	6960      	ldr	r0, [r4, #20]
 800a7f8:	42b0      	cmp	r0, r6
 800a7fa:	f000 8098 	beq.w	800a92e <_ZN5codal8scheduleEv.part.3+0x152>
        currentFiber = runQueue;
 800a7fe:	602a      	str	r2, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800a800:	428a      	cmp	r2, r1
 800a802:	d02b      	beq.n	800a85c <_ZN5codal8scheduleEv.part.3+0x80>
    if (currentFiber != oldFiber)
 800a804:	4294      	cmp	r4, r2
 800a806:	d06f      	beq.n	800a8e8 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 800a808:	428c      	cmp	r4, r1
 800a80a:	d06f      	beq.n	800a8ec <_ZN5codal8scheduleEv.part.3+0x110>
 800a80c:	4b52      	ldr	r3, [pc, #328]	; (800a958 <_ZN5codal8scheduleEv.part.3+0x17c>)
 800a80e:	6962      	ldr	r2, [r4, #20]
 800a810:	429a      	cmp	r2, r3
 800a812:	d06b      	beq.n	800a8ec <_ZN5codal8scheduleEv.part.3+0x110>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	f7f5 fe8f 	bl	8000538 <tcb_get_stack_base>
 800a81a:	4606      	mov	r6, r0
 800a81c:	f7f5 fe8e 	bl	800053c <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800a820:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800a824:	1a30      	subs	r0, r6, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800a826:	1aca      	subs	r2, r1, r3
    if (bufferSize < stackDepth)
 800a828:	4290      	cmp	r0, r2
 800a82a:	d968      	bls.n	800a8fe <_ZN5codal8scheduleEv.part.3+0x122>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800a82c:	f100 0120 	add.w	r1, r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800a830:	682f      	ldr	r7, [r5, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800a832:	f021 061f 	bic.w	r6, r1, #31
        currentFiber = f;
 800a836:	602c      	str	r4, [r5, #0]
        if (f->stack_bottom != 0)
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f040 8082 	bne.w	800a942 <_ZN5codal8scheduleEv.part.3+0x166>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800a83e:	4630      	mov	r0, r6
 800a840:	f7fe f9fe 	bl	8008c40 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800a844:	1831      	adds	r1, r6, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800a846:	e9c4 0101 	strd	r0, r1, [r4, #4]
        currentFiber = prevCurrFiber;
 800a84a:	602f      	str	r7, [r5, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	683a      	ldr	r2, [r7, #0]
}
 800a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800a856:	f7f5 bec9 	b.w	80005ec <swap_context>
        currentFiber = idleFiber;
 800a85a:	6029      	str	r1, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800a85c:	071b      	lsls	r3, r3, #28
 800a85e:	d555      	bpl.n	800a90c <_ZN5codal8scheduleEv.part.3+0x130>
        currentFiber = oldFiber;
 800a860:	602c      	str	r4, [r5, #0]
            idle();
 800a862:	f7ff ff97 	bl	800a794 <_ZN5codal4idleEv>
        while (runQueue == NULL);
 800a866:	6833      	ldr	r3, [r6, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0fa      	beq.n	800a862 <_ZN5codal8scheduleEv.part.3+0x86>
    if (currentFiber != oldFiber)
 800a86c:	429c      	cmp	r4, r3
        currentFiber = runQueue;
 800a86e:	602b      	str	r3, [r5, #0]
    if (currentFiber != oldFiber)
 800a870:	d03a      	beq.n	800a8e8 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (currentFiber == idleFiber)
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	428b      	cmp	r3, r1
 800a876:	d1c7      	bne.n	800a808 <_ZN5codal8scheduleEv.part.3+0x2c>
 800a878:	e04b      	b.n	800a912 <_ZN5codal8scheduleEv.part.3+0x136>
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800a87a:	4e38      	ldr	r6, [pc, #224]	; (800a95c <_ZN5codal8scheduleEv.part.3+0x180>)
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800a87c:	f043 0302 	orr.w	r3, r3, #2
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800a880:	6832      	ldr	r2, [r6, #0]
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800a882:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800a884:	6913      	ldr	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800a886:	6820      	ldr	r0, [r4, #0]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800a888:	f043 0304 	orr.w	r3, r3, #4
 800a88c:	6113      	str	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800a88e:	6814      	ldr	r4, [r2, #0]
 800a890:	f7f5 fe56 	bl	8000540 <tcb_get_sp>
 800a894:	4601      	mov	r1, r0
 800a896:	4620      	mov	r0, r4
 800a898:	f7f5 fe4c 	bl	8000534 <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 800a89c:	6837      	ldr	r7, [r6, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800a89e:	6838      	ldr	r0, [r7, #0]
 800a8a0:	f7f5 fe4a 	bl	8000538 <tcb_get_stack_base>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	f7f5 fe49 	bl	800053c <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800a8aa:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800a8ae:	1a20      	subs	r0, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800a8b0:	1a9b      	subs	r3, r3, r2
    if (bufferSize < stackDepth)
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	d90f      	bls.n	800a8d6 <_ZN5codal8scheduleEv.part.3+0xfa>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800a8b6:	3020      	adds	r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800a8b8:	f8d5 8000 	ldr.w	r8, [r5]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800a8bc:	f020 041f 	bic.w	r4, r0, #31
        currentFiber = f;
 800a8c0:	602f      	str	r7, [r5, #0]
        if (f->stack_bottom != 0)
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	d139      	bne.n	800a93a <_ZN5codal8scheduleEv.part.3+0x15e>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7fe f9ba 	bl	8008c40 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800a8cc:	4404      	add	r4, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800a8ce:	e9c7 0401 	strd	r0, r4, [r7, #4]
        currentFiber = prevCurrFiber;
 800a8d2:	f8c5 8000 	str.w	r8, [r5]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 800a8d6:	6833      	ldr	r3, [r6, #0]
 800a8d8:	6899      	ldr	r1, [r3, #8]
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	f7f5 fec7 	bl	800066e <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	0792      	lsls	r2, r2, #30
 800a8e6:	d40c      	bmi.n	800a902 <_ZN5codal8scheduleEv.part.3+0x126>
}
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	682a      	ldr	r2, [r5, #0]
 800a8f0:	4608      	mov	r0, r1
}
 800a8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800a8f6:	6893      	ldr	r3, [r2, #8]
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	f7f5 be77 	b.w	80005ec <swap_context>
 800a8fe:	682f      	ldr	r7, [r5, #0]
 800a900:	e7a4      	b.n	800a84c <_ZN5codal8scheduleEv.part.3+0x70>
            restore_register_context(currentFiber->tcb);
 800a902:	6818      	ldr	r0, [r3, #0]
}
 800a904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            restore_register_context(currentFiber->tcb);
 800a908:	f7f5 beeb 	b.w	80006e2 <restore_register_context>
    if (currentFiber != oldFiber)
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	429c      	cmp	r4, r3
 800a910:	d0ea      	beq.n	800a8e8 <_ZN5codal8scheduleEv.part.3+0x10c>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800a912:	681e      	ldr	r6, [r3, #0]
 800a914:	f7f5 fe02 	bl	800051c <fiber_initial_stack_base>
 800a918:	1f01      	subs	r1, r0, #4
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7f5 fe08 	bl	8000530 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	490f      	ldr	r1, [pc, #60]	; (800a960 <_ZN5codal8scheduleEv.part.3+0x184>)
 800a924:	6818      	ldr	r0, [r3, #0]
 800a926:	f7f5 fe01 	bl	800052c <tcb_configure_lr>
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	e76c      	b.n	800a808 <_ZN5codal8scheduleEv.part.3+0x2c>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 800a92e:	69a0      	ldr	r0, [r4, #24]
 800a930:	2800      	cmp	r0, #0
 800a932:	bf18      	it	ne
 800a934:	4602      	movne	r2, r0
 800a936:	602a      	str	r2, [r5, #0]
 800a938:	e762      	b.n	800a800 <_ZN5codal8scheduleEv.part.3+0x24>
            free((void *)f->stack_bottom);
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe f8a8 	bl	8008a90 <free>
 800a940:	e7c1      	b.n	800a8c6 <_ZN5codal8scheduleEv.part.3+0xea>
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe f8a4 	bl	8008a90 <free>
 800a948:	e779      	b.n	800a83e <_ZN5codal8scheduleEv.part.3+0x62>
 800a94a:	bf00      	nop
 800a94c:	20001620 	.word	0x20001620
 800a950:	20001630 	.word	0x20001630
 800a954:	20001638 	.word	0x20001638
 800a958:	20001634 	.word	0x20001634
 800a95c:	2000162c 	.word	0x2000162c
 800a960:	0800ab7d 	.word	0x0800ab7d

0800a964 <_ZN5codal8scheduleEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a964:	4b03      	ldr	r3, [pc, #12]	; (800a974 <_ZN5codal8scheduleEv+0x10>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	07db      	lsls	r3, r3, #31
 800a96a:	d501      	bpl.n	800a970 <_ZN5codal8scheduleEv+0xc>
 800a96c:	f7ff bf36 	b.w	800a7dc <_ZN5codal8scheduleEv.part.3>
}
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20001664 	.word	0x20001664

0800a978 <_ZN5codal11fiber_sleepEm>:
{
 800a978:	b570      	push	{r4, r5, r6, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a97a:	4d10      	ldr	r5, [pc, #64]	; (800a9bc <_ZN5codal11fiber_sleepEm+0x44>)
 800a97c:	782a      	ldrb	r2, [r5, #0]
 800a97e:	07d2      	lsls	r2, r2, #31
 800a980:	d514      	bpl.n	800a9ac <_ZN5codal11fiber_sleepEm+0x34>
 800a982:	4604      	mov	r4, r0
    Fiber *f = handle_fob();
 800a984:	f7ff fdaa 	bl	800a4dc <_ZL10handle_fobv>
 800a988:	4606      	mov	r6, r0
    f->context = system_timer_current_time() + t;
 800a98a:	f000 fb37 	bl	800affc <_ZN5codal25system_timer_current_timeEv>
    if (f->queue == NULL)
 800a98e:	6973      	ldr	r3, [r6, #20]
    f->context = system_timer_current_time() + t;
 800a990:	4420      	add	r0, r4
 800a992:	60f0      	str	r0, [r6, #12]
    if (f->queue == NULL)
 800a994:	b113      	cbz	r3, 800a99c <_ZN5codal11fiber_sleepEm+0x24>
 800a996:	4630      	mov	r0, r6
 800a998:	f7ff fc80 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    queue_fiber(f, &sleepQueue);
 800a99c:	4630      	mov	r0, r6
 800a99e:	4908      	ldr	r1, [pc, #32]	; (800a9c0 <_ZN5codal11fiber_sleepEm+0x48>)
 800a9a0:	f7ff fcc2 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a9a4:	782b      	ldrb	r3, [r5, #0]
 800a9a6:	07db      	lsls	r3, r3, #31
 800a9a8:	d404      	bmi.n	800a9b4 <_ZN5codal11fiber_sleepEm+0x3c>
}
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        target_wait(t);
 800a9b0:	f7f5 bd60 	b.w	8000474 <target_wait>
}
 800a9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b8:	f7ff bf10 	b.w	800a7dc <_ZN5codal8scheduleEv.part.3>
 800a9bc:	20001664 	.word	0x20001664
 800a9c0:	20001628 	.word	0x20001628

0800a9c4 <_ZN5codal20fiber_wait_for_eventEtt>:
{
 800a9c4:	b500      	push	{lr}
 800a9c6:	b083      	sub	sp, #12
    int ret = fiber_wake_on_event(id, value);
 800a9c8:	f7ff fe4a 	bl	800a660 <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 800a9cc:	b918      	cbnz	r0, 800a9d6 <_ZN5codal20fiber_wait_for_eventEtt+0x12>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a9ce:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <_ZN5codal20fiber_wait_for_eventEtt+0x28>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	07db      	lsls	r3, r3, #31
 800a9d4:	d402      	bmi.n	800a9dc <_ZN5codal20fiber_wait_for_eventEtt+0x18>
}
 800a9d6:	b003      	add	sp, #12
 800a9d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9dc:	9001      	str	r0, [sp, #4]
 800a9de:	f7ff fefd 	bl	800a7dc <_ZN5codal8scheduleEv.part.3>
 800a9e2:	9801      	ldr	r0, [sp, #4]
 800a9e4:	b003      	add	sp, #12
 800a9e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9ea:	bf00      	nop
 800a9ec:	20001664 	.word	0x20001664

0800a9f0 <_ZN5codal13release_fiberEv.part.4>:
void codal::release_fiber(void)
 800a9f0:	b538      	push	{r3, r4, r5, lr}
    dequeue_fiber(currentFiber);
 800a9f2:	4d1b      	ldr	r5, [pc, #108]	; (800aa60 <_ZN5codal13release_fiberEv.part.4+0x70>)
 800a9f4:	6828      	ldr	r0, [r5, #0]
    if (f->queue == NULL)
 800a9f6:	6943      	ldr	r3, [r0, #20]
 800a9f8:	b113      	cbz	r3, 800aa00 <_ZN5codal13release_fiberEv.part.4+0x10>
 800a9fa:	f7ff fc4f 	bl	800a29c <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800a9fe:	6828      	ldr	r0, [r5, #0]
    queue_fiber(currentFiber, &fiberPool);
 800aa00:	4c18      	ldr	r4, [pc, #96]	; (800aa64 <_ZN5codal13release_fiberEv.part.4+0x74>)
 800aa02:	4621      	mov	r1, r4
 800aa04:	f7ff fc90 	bl	800a328 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 800aa08:	6824      	ldr	r4, [r4, #0]
 800aa0a:	b14c      	cbz	r4, 800aa20 <_ZN5codal13release_fiberEv.part.4+0x30>
        if (!p->next && numFree > 3) {
 800aa0c:	69a3      	ldr	r3, [r4, #24]
    int numFree = 0;
 800aa0e:	2200      	movs	r2, #0
        if (!p->next && numFree > 3) {
 800aa10:	b123      	cbz	r3, 800aa1c <_ZN5codal13release_fiberEv.part.4+0x2c>
 800aa12:	461c      	mov	r4, r3
 800aa14:	69a3      	ldr	r3, [r4, #24]
        numFree++;
 800aa16:	3201      	adds	r2, #1
        if (!p->next && numFree > 3) {
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1fa      	bne.n	800aa12 <_ZN5codal13release_fiberEv.part.4+0x22>
 800aa1c:	2a03      	cmp	r2, #3
 800aa1e:	dc0e      	bgt.n	800aa3e <_ZN5codal13release_fiberEv.part.4+0x4e>
    currentFiber->flags = 0;
 800aa20:	2200      	movs	r2, #0
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800aa26:	681c      	ldr	r4, [r3, #0]
 800aa28:	f7f5 fd78 	bl	800051c <fiber_initial_stack_base>
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7f5 fd80 	bl	8000534 <tcb_configure_stack_base>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <_ZN5codal13release_fiberEv.part.4+0x78>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	07db      	lsls	r3, r3, #31
 800aa3a:	d40c      	bmi.n	800aa56 <_ZN5codal13release_fiberEv.part.4+0x66>
}
 800aa3c:	bd38      	pop	{r3, r4, r5, pc}
            p->prev->next = NULL;
 800aa3e:	69e2      	ldr	r2, [r4, #28]
            free(p->tcb);
 800aa40:	6820      	ldr	r0, [r4, #0]
            p->prev->next = NULL;
 800aa42:	6193      	str	r3, [r2, #24]
            free(p->tcb);
 800aa44:	f7fe f824 	bl	8008a90 <free>
            free((void *)p->stack_bottom);
 800aa48:	6860      	ldr	r0, [r4, #4]
 800aa4a:	f7fe f821 	bl	8008a90 <free>
            free(p);
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7fe f81e 	bl	8008a90 <free>
 800aa54:	e7e4      	b.n	800aa20 <_ZN5codal13release_fiberEv.part.4+0x30>
}
 800aa56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa5a:	f7ff bebf 	b.w	800a7dc <_ZN5codal8scheduleEv.part.3>
 800aa5e:	bf00      	nop
 800aa60:	20001620 	.word	0x20001620
 800aa64:	20001634 	.word	0x20001634
 800aa68:	20001664 	.word	0x20001664

0800aa6c <_ZN5codal13release_fiberEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aa6c:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <_ZN5codal13release_fiberEv+0x10>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	07db      	lsls	r3, r3, #31
 800aa72:	d501      	bpl.n	800aa78 <_ZN5codal13release_fiberEv+0xc>
 800aa74:	f7ff bfbc 	b.w	800a9f0 <_ZN5codal13release_fiberEv.part.4>
}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20001664 	.word	0x20001664

0800aa80 <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 800aa80:	b510      	push	{r4, lr}
 800aa82:	460c      	mov	r4, r1
    ep();
 800aa84:	4780      	blx	r0
    cp();
 800aa86:	47a0      	blx	r4
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <_ZN5codal16launch_new_fiberEPFvvES1_+0x1c>)
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	07db      	lsls	r3, r3, #31
 800aa8e:	d400      	bmi.n	800aa92 <_ZN5codal16launch_new_fiberEPFvvES1_+0x12>
}
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa96:	f7ff bfab 	b.w	800a9f0 <_ZN5codal13release_fiberEv.part.4>
 800aa9a:	bf00      	nop
 800aa9c:	20001664 	.word	0x20001664

0800aaa0 <_ZN5codal13release_fiberEPv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aaa0:	4b03      	ldr	r3, [pc, #12]	; (800aab0 <_ZN5codal13release_fiberEPv+0x10>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	07db      	lsls	r3, r3, #31
 800aaa6:	d400      	bmi.n	800aaaa <_ZN5codal13release_fiberEPv+0xa>
}
 800aaa8:	4770      	bx	lr
 800aaaa:	f7ff bfa1 	b.w	800a9f0 <_ZN5codal13release_fiberEv.part.4>
 800aaae:	bf00      	nop
 800aab0:	20001664 	.word	0x20001664

0800aab4 <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d042      	beq.n	800ab3e <_ZN5codal6invokeEPFvPvES0_+0x8a>
{
 800aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aabc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800ab50 <_ZN5codal6invokeEPFvPvES0_+0x9c>
{
 800aac0:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800aac2:	f898 3000 	ldrb.w	r3, [r8]
 800aac6:	07dc      	lsls	r4, r3, #31
 800aac8:	d532      	bpl.n	800ab30 <_ZN5codal6invokeEPFvPvES0_+0x7c>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800aaca:	4f1e      	ldr	r7, [pc, #120]	; (800ab44 <_ZN5codal6invokeEPFvPvES0_+0x90>)
 800aacc:	460a      	mov	r2, r1
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	4605      	mov	r5, r0
 800aad2:	6919      	ldr	r1, [r3, #16]
 800aad4:	0749      	lsls	r1, r1, #29
 800aad6:	d101      	bne.n	800aadc <_ZN5codal6invokeEPFvPvES0_+0x28>
 800aad8:	6a1c      	ldr	r4, [r3, #32]
 800aada:	b144      	cbz	r4, 800aaee <_ZN5codal6invokeEPFvPvES0_+0x3a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800aadc:	4628      	mov	r0, r5
 800aade:	2301      	movs	r3, #1
 800aae0:	4919      	ldr	r1, [pc, #100]	; (800ab48 <_ZN5codal6invokeEPFvPvES0_+0x94>)
 800aae2:	f7ff fe09 	bl	800a6f8 <_Z14__create_fibermmmi>
        return DEVICE_OK;
 800aae6:	2000      	movs	r0, #0
}
 800aae8:	b002      	add	sp, #8
 800aaea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    save_register_context(currentFiber->tcb);
 800aaee:	6818      	ldr	r0, [r3, #0]
 800aaf0:	9201      	str	r2, [sp, #4]
 800aaf2:	f7f5 fdde 	bl	80006b2 <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	690b      	ldr	r3, [r1, #16]
 800aafc:	f013 0602 	ands.w	r6, r3, #2
 800ab00:	d118      	bne.n	800ab34 <_ZN5codal6invokeEPFvPvES0_+0x80>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800ab02:	f043 0301 	orr.w	r3, r3, #1
    entry_fn(param);
 800ab06:	4610      	mov	r0, r2
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800ab08:	610b      	str	r3, [r1, #16]
    entry_fn(param);
 800ab0a:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 800ab0c:	683b      	ldr	r3, [r7, #0]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800ab0e:	6918      	ldr	r0, [r3, #16]
    currentFiber->user_data = NULL;
 800ab10:	621e      	str	r6, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800ab12:	f020 0201 	bic.w	r2, r0, #1
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800ab16:	f010 0004 	ands.w	r0, r0, #4
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800ab1a:	611a      	str	r2, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800ab1c:	d0e4      	beq.n	800aae8 <_ZN5codal6invokeEPFvPvES0_+0x34>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ab1e:	f898 0000 	ldrb.w	r0, [r8]
 800ab22:	f010 0001 	ands.w	r0, r0, #1
 800ab26:	d0df      	beq.n	800aae8 <_ZN5codal6invokeEPFvPvES0_+0x34>
 800ab28:	f7ff ff62 	bl	800a9f0 <_ZN5codal13release_fiberEv.part.4>
    return DEVICE_OK;
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	e7db      	b.n	800aae8 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_NOT_SUPPORTED;
 800ab30:	4806      	ldr	r0, [pc, #24]	; (800ab4c <_ZN5codal6invokeEPFvPvES0_+0x98>)
 800ab32:	e7d9      	b.n	800aae8 <_ZN5codal6invokeEPFvPvES0_+0x34>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 800ab34:	f023 0303 	bic.w	r3, r3, #3
 800ab38:	610b      	str	r3, [r1, #16]
        return DEVICE_OK;
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	e7d4      	b.n	800aae8 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_INVALID_PARAMETER;
 800ab3e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800ab42:	4770      	bx	lr
 800ab44:	20001620 	.word	0x20001620
 800ab48:	0800aaa1 	.word	0x0800aaa1
 800ab4c:	fffffc16 	.word	0xfffffc16
 800ab50:	20001664 	.word	0x20001664

0800ab54 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4614      	mov	r4, r2
 800ab58:	4603      	mov	r3, r0
    ep(pm);
 800ab5a:	4610      	mov	r0, r2
{
 800ab5c:	460d      	mov	r5, r1
    ep(pm);
 800ab5e:	4798      	blx	r3
    cp(pm);
 800ab60:	4620      	mov	r0, r4
 800ab62:	47a8      	blx	r5
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ab64:	4b04      	ldr	r3, [pc, #16]	; (800ab78 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x24>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	07db      	lsls	r3, r3, #31
 800ab6a:	d400      	bmi.n	800ab6e <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x1a>
}
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab72:	f7ff bf3d 	b.w	800a9f0 <_ZN5codal13release_fiberEv.part.4>
 800ab76:	bf00      	nop
 800ab78:	20001664 	.word	0x20001664

0800ab7c <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 800ab7c:	b508      	push	{r3, lr}
 800ab7e:	4c04      	ldr	r4, [pc, #16]	; (800ab90 <_ZN5codal9idle_taskEv+0x14>)
    while(1)
    {
        idle();
 800ab80:	f7ff fe08 	bl	800a794 <_ZN5codal4idleEv>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ab84:	7823      	ldrb	r3, [r4, #0]
 800ab86:	07db      	lsls	r3, r3, #31
 800ab88:	d5fa      	bpl.n	800ab80 <_ZN5codal9idle_taskEv+0x4>
 800ab8a:	f7ff fe27 	bl	800a7dc <_ZN5codal8scheduleEv.part.3>
 800ab8e:	e7f7      	b.n	800ab80 <_ZN5codal9idle_taskEv+0x4>
 800ab90:	20001664 	.word	0x20001664

0800ab94 <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	4605      	mov	r5, r0
 800ab98:	460e      	mov	r6, r1
    HeapDefinition *h = &heap[heap_count];
 800ab9a:	4c0b      	ldr	r4, [pc, #44]	; (800abc8 <_Z18device_create_heapmm+0x34>)
 800ab9c:	7827      	ldrb	r7, [r4, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800ab9e:	f7f5 fc97 	bl	80004d0 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800aba2:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <_Z18device_create_heapmm+0x38>)
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800aba4:	1b73      	subs	r3, r6, r5
 800aba6:	089b      	lsrs	r3, r3, #2
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800aba8:	f842 5037 	str.w	r5, [r2, r7, lsl #3]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800abac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 800abb0:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800abb4:	6056      	str	r6, [r2, #4]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800abb6:	602b      	str	r3, [r5, #0]

    heap_count++;
 800abb8:	7823      	ldrb	r3, [r4, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	7023      	strb	r3, [r4, #0]

    // Enable Interrupts
    target_enable_irq();
 800abbe:	f7f5 fc85 	bl	80004cc <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 800abc2:	2000      	movs	r0, #0
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20001666 	.word	0x20001666
 800abcc:	20001640 	.word	0x20001640

0800abd0 <_Z16device_heap_sizeh>:

uint32_t device_heap_size(uint8_t heap_index)
{
    if (heap_index >= heap_count)
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <_Z16device_heap_sizeh+0x1c>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	4283      	cmp	r3, r0
 800abd6:	d907      	bls.n	800abe8 <_Z16device_heap_sizeh+0x18>
        return 0;    
    HeapDefinition *h = &heap[heap_index];
    return (uint8_t*)h->heap_end - (uint8_t*)h->heap_start;
 800abd8:	4a05      	ldr	r2, [pc, #20]	; (800abf0 <_Z16device_heap_sizeh+0x20>)
 800abda:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 800abe4:	1a18      	subs	r0, r3, r0
 800abe6:	4770      	bx	lr
        return 0;    
 800abe8:	2000      	movs	r0, #0
}
 800abea:	4770      	bx	lr
 800abec:	20001666 	.word	0x20001666
 800abf0:	20001640 	.word	0x20001640

0800abf4 <_Z16device_malloc_injR14HeapDefinition>:
  * @param heap The heap to allocate memory from.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void *device_malloc_in(size_t size, HeapDefinition &heap)
{
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blockSize = 0;
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800abf6:	0783      	lsls	r3, r0, #30
 800abf8:	ea4f 0690 	mov.w	r6, r0, lsr #2
 800abfc:	d134      	bne.n	800ac68 <_Z16device_malloc_injR14HeapDefinition+0x74>
    PROCESSOR_WORD_TYPE	*block;
    PROCESSOR_WORD_TYPE	*next;

    if (size <= 0)
 800abfe:	b188      	cbz	r0, 800ac24 <_Z16device_malloc_injR14HeapDefinition+0x30>
 800ac00:	460d      	mov	r5, r1
        return NULL;

    // Account for the index block;
    blocksNeeded++;
 800ac02:	1c77      	adds	r7, r6, #1

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800ac04:	f7f5 fc64 	bl	80004d0 <target_disable_irq>

    // We implement a first fit algorithm with cache to handle rapid churn...
    // We also defragment free blocks as we search, to optimise this and future searches.
    block = heap.heap_start;
    while (block < heap.heap_end)
 800ac08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac0c:	42a5      	cmp	r5, r4
 800ac0e:	d906      	bls.n	800ac1e <_Z16device_malloc_injR14HeapDefinition+0x2a>
    {
        // If the block is used, then keep looking.
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	db07      	blt.n	800ac26 <_Z16device_malloc_injR14HeapDefinition+0x32>
        {
            block += *block;
 800ac16:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    while (block < heap.heap_end)
 800ac1a:	42a5      	cmp	r5, r4
 800ac1c:	d8f8      	bhi.n	800ac10 <_Z16device_malloc_injR14HeapDefinition+0x1c>
    }

    // We're full!
    if (block >= heap.heap_end)
    {
        target_enable_irq();
 800ac1e:	f7f5 fc55 	bl	80004cc <target_enable_irq>
        return NULL;
 800ac22:	2000      	movs	r0, #0

    // Enable Interrupts
    target_enable_irq();

    return block+1;
}
 800ac24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 800ac26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac2a:	e007      	b.n	800ac3c <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 800ac2c:	4285      	cmp	r5, r0
 800ac2e:	d90c      	bls.n	800ac4a <_Z16device_malloc_injR14HeapDefinition+0x56>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 800ac30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ac34:	4413      	add	r3, r2
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 800ac36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ac3a:	6022      	str	r2, [r4, #0]
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800ac3c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
            next = block + blockSize;
 800ac40:	0099      	lsls	r1, r3, #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800ac42:	2a00      	cmp	r2, #0
            next = block + blockSize;
 800ac44:	eb04 0001 	add.w	r0, r4, r1
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800ac48:	dbf0      	blt.n	800ac2c <_Z16device_malloc_injR14HeapDefinition+0x38>
        if (blockSize >= blocksNeeded)
 800ac4a:	429f      	cmp	r7, r3
 800ac4c:	d901      	bls.n	800ac52 <_Z16device_malloc_injR14HeapDefinition+0x5e>
        block += blockSize;
 800ac4e:	440c      	add	r4, r1
 800ac50:	e7dc      	b.n	800ac0c <_Z16device_malloc_injR14HeapDefinition+0x18>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800ac52:	3602      	adds	r6, #2
 800ac54:	429e      	cmp	r6, r3
 800ac56:	d309      	bcc.n	800ac6c <_Z16device_malloc_injR14HeapDefinition+0x78>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac5e:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 800ac60:	f7f5 fc34 	bl	80004cc <target_enable_irq>
    return block+1;
 800ac64:	1d20      	adds	r0, r4, #4
}
 800ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800ac68:	3601      	adds	r6, #1
 800ac6a:	e7c9      	b.n	800ac00 <_Z16device_malloc_injR14HeapDefinition+0xc>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800ac6c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ac70:	42b5      	cmp	r5, r6
 800ac72:	d9f1      	bls.n	800ac58 <_Z16device_malloc_injR14HeapDefinition+0x64>
        *splitBlock = blockSize - blocksNeeded;
 800ac74:	1bdb      	subs	r3, r3, r7
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 800ac76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac7a:	f846 3c04 	str.w	r3, [r6, #-4]
        *block = blocksNeeded;
 800ac7e:	6027      	str	r7, [r4, #0]
 800ac80:	e7ee      	b.n	800ac60 <_Z16device_malloc_injR14HeapDefinition+0x6c>
 800ac82:	bf00      	nop

0800ac84 <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 800ac84:	b538      	push	{r3, r4, r5, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
        return NULL;
 800ac86:	4604      	mov	r4, r0
    if (size <= 0)
 800ac88:	b140      	cbz	r0, 800ac9c <device_malloc+0x18>

    if (!initialised)
 800ac8a:	4d0c      	ldr	r5, [pc, #48]	; (800acbc <device_malloc+0x38>)
 800ac8c:	782b      	ldrb	r3, [r5, #0]
 800ac8e:	b13b      	cbz	r3, 800aca0 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 800ac90:	4620      	mov	r0, r4
 800ac92:	490b      	ldr	r1, [pc, #44]	; (800acc0 <device_malloc+0x3c>)
 800ac94:	f7ff ffae 	bl	800abf4 <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 800ac98:	4604      	mov	r4, r0
 800ac9a:	b158      	cbz	r0, 800acb4 <device_malloc+0x30>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800aca0:	4908      	ldr	r1, [pc, #32]	; (800acc4 <device_malloc+0x40>)
        heap_count = 0;
 800aca2:	4a09      	ldr	r2, [pc, #36]	; (800acc8 <device_malloc+0x44>)
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800aca4:	6808      	ldr	r0, [r1, #0]
 800aca6:	4909      	ldr	r1, [pc, #36]	; (800accc <device_malloc+0x48>)
        heap_count = 0;
 800aca8:	7013      	strb	r3, [r2, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800acaa:	f7ff ff73 	bl	800ab94 <_Z18device_create_heapmm>
        initialised = 1;
 800acae:	2301      	movs	r3, #1
 800acb0:	702b      	strb	r3, [r5, #0]
 800acb2:	e7ed      	b.n	800ac90 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 800acb4:	2014      	movs	r0, #20
 800acb6:	f7f5 fc21 	bl	80004fc <target_panic>
    return NULL;
 800acba:	e7ef      	b.n	800ac9c <device_malloc+0x18>
 800acbc:	20001665 	.word	0x20001665
 800acc0:	20001640 	.word	0x20001640
 800acc4:	20000004 	.word	0x20000004
 800acc8:	20001666 	.word	0x20001666
 800accc:	20004800 	.word	0x20004800

0800acd0 <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 800acd0:	b1a0      	cbz	r0, 800acfc <device_free+0x2c>

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 800acd2:	4b0e      	ldr	r3, [pc, #56]	; (800ad0c <device_free+0x3c>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	4282      	cmp	r2, r0
 800acd8:	d20d      	bcs.n	800acf6 <device_free+0x26>
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	4283      	cmp	r3, r0
 800acde:	d90a      	bls.n	800acf6 <device_free+0x26>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800ace0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
 800ace4:	b510      	push	{r4, lr}
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	4604      	mov	r4, r0
 800acea:	dd08      	ble.n	800acfe <device_free+0x2e>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 800acec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acf0:	f844 3c04 	str.w	r3, [r4, #-4]
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
}
 800acf4:	bd10      	pop	{r4, pc}
    target_panic(DEVICE_HEAP_ERROR);
 800acf6:	201e      	movs	r0, #30
 800acf8:	f7f5 bc00 	b.w	80004fc <target_panic>
 800acfc:	4770      	bx	lr
                target_panic(DEVICE_HEAP_ERROR);
 800acfe:	201e      	movs	r0, #30
 800ad00:	f7f5 fbfc 	bl	80004fc <target_panic>
 800ad04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad08:	e7f0      	b.n	800acec <device_free+0x1c>
 800ad0a:	bf00      	nop
 800ad0c:	20001640 	.word	0x20001640

0800ad10 <calloc>:

void* calloc (size_t num, size_t size)
{
 800ad10:	b538      	push	{r3, r4, r5, lr}
    void *mem = malloc(num*size);
 800ad12:	fb01 f500 	mul.w	r5, r1, r0
 800ad16:	4628      	mov	r0, r5
 800ad18:	f7fd ff92 	bl	8008c40 <malloc>

    if (mem) {
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	b128      	cbz	r0, 800ad2c <calloc+0x1c>
        // without this write, GCC will happily optimize malloc() above into calloc()
        // and remove the memset
        ((uint32_t*)mem)[0] = 1;
 800ad20:	2301      	movs	r3, #1
        memset(mem, 0, num*size);
 800ad22:	462a      	mov	r2, r5
        ((uint32_t*)mem)[0] = 1;
 800ad24:	6003      	str	r3, [r0, #0]
        memset(mem, 0, num*size);
 800ad26:	2100      	movs	r1, #0
 800ad28:	f7f8 ff7b 	bl	8003c22 <memset>
    }

    return mem;
}
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}

0800ad30 <device_realloc>:

extern "C" void* device_realloc (void* ptr, size_t size)
{
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4604      	mov	r4, r0
    void *mem = malloc(size);
 800ad34:	4608      	mov	r0, r1
{
 800ad36:	460e      	mov	r6, r1
    void *mem = malloc(size);
 800ad38:	f7fd ff82 	bl	8008c40 <malloc>
 800ad3c:	4605      	mov	r5, r0

    // handle the simplest case - no previous memory allocted.
    if (ptr != NULL && mem != NULL)
 800ad3e:	b164      	cbz	r4, 800ad5a <device_realloc+0x2a>
 800ad40:	b158      	cbz	r0, 800ad5a <device_realloc+0x2a>
    {

        // Otherwise we need to copy and free up the old data.
        PROCESSOR_WORD_TYPE *cb = ((PROCESSOR_WORD_TYPE *)ptr) - 1;
        PROCESSOR_WORD_TYPE blockSize = *cb & ~DEVICE_HEAP_BLOCK_FREE;
 800ad42:	f854 2c04 	ldr.w	r2, [r4, #-4]

        memcpy(mem, ptr, min(blockSize * sizeof(PROCESSOR_WORD_TYPE), size));
 800ad46:	4621      	mov	r1, r4
 800ad48:	0092      	lsls	r2, r2, #2
 800ad4a:	42b2      	cmp	r2, r6
 800ad4c:	bfa8      	it	ge
 800ad4e:	4632      	movge	r2, r6
 800ad50:	f7f8 ff1e 	bl	8003b90 <memcpy>
        free(ptr);
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7fd fe9b 	bl	8008a90 <free>
    }

    return mem;
}
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	bf00      	nop

0800ad60 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 800ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad64:	4604      	mov	r4, r0
 800ad66:	3010      	adds	r0, #16
 800ad68:	4688      	mov	r8, r1
 800ad6a:	4617      	mov	r7, r2
 800ad6c:	461e      	mov	r6, r3
 800ad6e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800ad72:	f000 fc81 	bl	800b678 <_ZN5codal5EventC1Ev>
{
	this->id = id;
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 800ad76:	2000      	movs	r0, #0
	this->id = id;
 800ad78:	f8a4 8000 	strh.w	r8, [r4]
	this->cb_arg = NULL;
 800ad7c:	60e0      	str	r0, [r4, #12]
    this->flags = flags;
	this->next = NULL;
    this->evt_queue = NULL;
 800ad7e:	e9c4 0006 	strd	r0, r0, [r4, #24]
	this->value = value;
 800ad82:	8067      	strh	r7, [r4, #2]
	this->cb = handler;
 800ad84:	60a6      	str	r6, [r4, #8]
    this->flags = flags;
 800ad86:	80a5      	strh	r5, [r4, #4]
}
 800ad88:	4620      	mov	r0, r4
 800ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8e:	bf00      	nop

0800ad90 <_ZN5codal8ListenerD1Ev>:
/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800ad90:	8883      	ldrh	r3, [r0, #4]
Listener::~Listener()
 800ad92:	b510      	push	{r4, lr}
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800ad94:	079b      	lsls	r3, r3, #30
Listener::~Listener()
 800ad96:	4604      	mov	r4, r0
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800ad98:	d502      	bpl.n	800ada0 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
 800ad9a:	6880      	ldr	r0, [r0, #8]
 800ad9c:	f7f9 f91a 	bl	8003fd4 <_ZdlPv>
}
 800ada0:	4620      	mov	r0, r4
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	4604      	mov	r4, r0
    int queueDepth;

    EventQueueItem *p = evt_queue;
 800adaa:	6983      	ldr	r3, [r0, #24]
{
 800adac:	4668      	mov	r0, sp
 800adae:	e880 0006 	stmia.w	r0, {r1, r2}

    if (evt_queue == NULL)
 800adb2:	b1e3      	cbz	r3, 800adee <_ZN5codal8Listener5queueENS_5EventE+0x4a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800adb4:	689c      	ldr	r4, [r3, #8]
 800adb6:	b154      	cbz	r4, 800adce <_ZN5codal8Listener5queueENS_5EventE+0x2a>
        queueDepth = 1;
 800adb8:	2201      	movs	r2, #1
 800adba:	e000      	b.n	800adbe <_ZN5codal8Listener5queueENS_5EventE+0x1a>
 800adbc:	461c      	mov	r4, r3
        while (p->next != NULL)
 800adbe:	68a3      	ldr	r3, [r4, #8]
        {
            p = p->next;
            queueDepth++;
 800adc0:	3201      	adds	r2, #1
        while (p->next != NULL)
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1fa      	bne.n	800adbc <_ZN5codal8Listener5queueENS_5EventE+0x18>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800adc6:	2a09      	cmp	r2, #9
 800adc8:	dd02      	ble.n	800add0 <_ZN5codal8Listener5queueENS_5EventE+0x2c>
            p->next = new EventQueueItem(e);
    }
}
 800adca:	b004      	add	sp, #16
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
        while (p->next != NULL)
 800adce:	461c      	mov	r4, r3
            p->next = new EventQueueItem(e);
 800add0:	c803      	ldmia	r0, {r0, r1}
 800add2:	ad02      	add	r5, sp, #8
 800add4:	e885 0003 	stmia.w	r5, {r0, r1}
 800add8:	200c      	movs	r0, #12
 800adda:	f7f9 f8f9 	bl	8003fd0 <_Znwj>
 800adde:	e895 0006 	ldmia.w	r5, {r1, r2}
 800ade2:	4606      	mov	r6, r0
 800ade4:	f000 fc52 	bl	800b68c <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800ade8:	60a6      	str	r6, [r4, #8]
}
 800adea:	b004      	add	sp, #16
 800adec:	bd70      	pop	{r4, r5, r6, pc}
        evt_queue = new EventQueueItem(e);
 800adee:	ad02      	add	r5, sp, #8
 800adf0:	c803      	ldmia	r0, {r0, r1}
 800adf2:	e885 0005 	stmia.w	r5, {r0, r2}
 800adf6:	200c      	movs	r0, #12
 800adf8:	f7f9 f8ea 	bl	8003fd0 <_Znwj>
 800adfc:	e895 0006 	ldmia.w	r5, {r1, r2}
 800ae00:	4606      	mov	r6, r0
 800ae02:	f000 fc43 	bl	800b68c <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800ae06:	61a6      	str	r6, [r4, #24]
}
 800ae08:	b004      	add	sp, #16
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}

0800ae0c <_ZN5codal5Timer17disableInterruptsEv>:
    syncRequest();
    return currentTimeUs;
}

int Timer::disableInterrupts()
{
 800ae0c:	b508      	push	{r3, lr}
    target_disable_irq();
 800ae0e:	f7f5 fb5f 	bl	80004d0 <target_disable_irq>
    return DEVICE_OK;
}
 800ae12:	2000      	movs	r0, #0
 800ae14:	bd08      	pop	{r3, pc}
 800ae16:	bf00      	nop

0800ae18 <_ZN5codal5Timer16enableInterruptsEv>:

int Timer::enableInterrupts()
{
 800ae18:	b508      	push	{r3, lr}
    target_enable_irq();
 800ae1a:	f7f5 fb57 	bl	80004cc <target_enable_irq>
    return DEVICE_OK;
}
 800ae1e:	2000      	movs	r0, #0
 800ae20:	bd08      	pop	{r3, pc}
 800ae22:	bf00      	nop

0800ae24 <_ZN5codal5TimerC1Ev>:
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800ae24:	220a      	movs	r2, #10
Timer::Timer()
 800ae26:	b510      	push	{r4, lr}
 800ae28:	4604      	mov	r4, r0
 800ae2a:	4908      	ldr	r1, [pc, #32]	; (800ae4c <_ZN5codal5TimerC1Ev+0x28>)
    system_timer = this;
 800ae2c:	4b08      	ldr	r3, [pc, #32]	; (800ae50 <_ZN5codal5TimerC1Ev+0x2c>)
Timer::Timer()
 800ae2e:	6001      	str	r1, [r0, #0]
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800ae30:	6182      	str	r2, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800ae32:	2101      	movs	r1, #1
 800ae34:	2078      	movs	r0, #120	; 0x78
    system_timer = this;
 800ae36:	601c      	str	r4, [r3, #0]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800ae38:	f7ff ff6a 	bl	800ad10 <calloc>
    nextTimerEvent = NULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e9c4 0304 	strd	r0, r3, [r4, #16]
    currentTimeUs = 0;
 800ae42:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 800ae46:	4620      	mov	r0, r4
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	bf00      	nop
 800ae4c:	0800c8e8 	.word	0x0800c8e8
 800ae50:	20001648 	.word	0x20001648

0800ae54 <_ZN5codal5Timer8setEventEmttb>:

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
 800ae54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i=0; i<eventListSize; i++)
 800ae58:	f8d0 c018 	ldr.w	ip, [r0, #24]
{
 800ae5c:	f89d 8020 	ldrb.w	r8, [sp, #32]
    for (int i=0; i<eventListSize; i++)
 800ae60:	f1bc 0f00 	cmp.w	ip, #0
 800ae64:	dd0d      	ble.n	800ae82 <_ZN5codal5Timer8setEventEmttb+0x2e>
        if (timerEventList[i].id == 0)
 800ae66:	6906      	ldr	r6, [r0, #16]
 800ae68:	8834      	ldrh	r4, [r6, #0]
 800ae6a:	b174      	cbz	r4, 800ae8a <_ZN5codal5Timer8setEventEmttb+0x36>
 800ae6c:	4634      	mov	r4, r6
    for (int i=0; i<eventListSize; i++)
 800ae6e:	2500      	movs	r5, #0
 800ae70:	e002      	b.n	800ae78 <_ZN5codal5Timer8setEventEmttb+0x24>
        if (timerEventList[i].id == 0)
 800ae72:	8827      	ldrh	r7, [r4, #0]
 800ae74:	4626      	mov	r6, r4
 800ae76:	b147      	cbz	r7, 800ae8a <_ZN5codal5Timer8setEventEmttb+0x36>
    for (int i=0; i<eventListSize; i++)
 800ae78:	3501      	adds	r5, #1
 800ae7a:	4565      	cmp	r5, ip
 800ae7c:	f104 040c 	add.w	r4, r4, #12
 800ae80:	d1f7      	bne.n	800ae72 <_ZN5codal5Timer8setEventEmttb+0x1e>
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;
 800ae82:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
    }

    enableInterrupts();

    return DEVICE_OK;
}
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	461f      	mov	r7, r3
    syncRequest();
 800ae90:	6803      	ldr	r3, [r0, #0]
 800ae92:	4691      	mov	r9, r2
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	4798      	blx	r3
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800ae98:	f1b8 0f00 	cmp.w	r8, #0
 800ae9c:	bf14      	ite	ne
 800ae9e:	4628      	movne	r0, r5
 800aea0:	2000      	moveq	r0, #0
    disableInterrupts();
 800aea2:	6822      	ldr	r2, [r4, #0]
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800aea4:	68a3      	ldr	r3, [r4, #8]
    disableInterrupts();
 800aea6:	68d1      	ldr	r1, [r2, #12]
 800aea8:	4a16      	ldr	r2, [pc, #88]	; (800af04 <_ZN5codal5Timer8setEventEmttb+0xb0>)
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800aeaa:	442b      	add	r3, r5
 800aeac:	4291      	cmp	r1, r2
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 800aeae:	e9c6 0301 	strd	r0, r3, [r6, #4]
            this->period = period;
            this->id = id;
 800aeb2:	f8a6 9000 	strh.w	r9, [r6]
            this->value = value;
 800aeb6:	8077      	strh	r7, [r6, #2]
 800aeb8:	d121      	bne.n	800aefe <_ZN5codal5Timer8setEventEmttb+0xaa>
    target_disable_irq();
 800aeba:	f7f5 fb09 	bl	80004d0 <target_disable_irq>
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800aebe:	6963      	ldr	r3, [r4, #20]
 800aec0:	b16b      	cbz	r3, 800aede <_ZN5codal5Timer8setEventEmttb+0x8a>
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	68b2      	ldr	r2, [r6, #8]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d309      	bcc.n	800aede <_ZN5codal5Timer8setEventEmttb+0x8a>
    enableInterrupts();
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	4a0e      	ldr	r2, [pc, #56]	; (800af08 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d10f      	bne.n	800aef4 <_ZN5codal5Timer8setEventEmttb+0xa0>
    target_enable_irq();
 800aed4:	f7f5 fafa 	bl	80004cc <target_enable_irq>
    return DEVICE_OK;
 800aed8:	2000      	movs	r0, #0
}
 800aeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        triggerIn(period);
 800aede:	6823      	ldr	r3, [r4, #0]
        nextTimerEvent = evt;
 800aee0:	6166      	str	r6, [r4, #20]
        triggerIn(period);
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4629      	mov	r1, r5
 800aee6:	4620      	mov	r0, r4
 800aee8:	4798      	blx	r3
    enableInterrupts();
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	4a06      	ldr	r2, [pc, #24]	; (800af08 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d0ef      	beq.n	800aed4 <_ZN5codal5Timer8setEventEmttb+0x80>
 800aef4:	4620      	mov	r0, r4
 800aef6:	4798      	blx	r3
    return DEVICE_OK;
 800aef8:	2000      	movs	r0, #0
}
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    disableInterrupts();
 800aefe:	4620      	mov	r0, r4
 800af00:	4788      	blx	r1
 800af02:	e7dc      	b.n	800aebe <_ZN5codal5Timer8setEventEmttb+0x6a>
 800af04:	0800ae0d 	.word	0x0800ae0d
 800af08:	0800ae19 	.word	0x0800ae19

0800af0c <_ZN5codal5Timer4syncEm>:
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;
 800af0c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
    currentTimeUs += t;
 800af10:	440b      	add	r3, r1
    overflow += t;
 800af12:	4411      	add	r1, r2

    while(overflow >= 1000)
 800af14:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    overflow += t;
 800af18:	e9c0 3102 	strd	r3, r1, [r0, #8]
    while(overflow >= 1000)
 800af1c:	d309      	bcc.n	800af32 <_ZN5codal5Timer4syncEm+0x26>
 800af1e:	6843      	ldr	r3, [r0, #4]
    {
        overflow -= 1000;
 800af20:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    while(overflow >= 1000)
 800af24:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        currentTime += 1;
 800af28:	f103 0301 	add.w	r3, r3, #1
    while(overflow >= 1000)
 800af2c:	d2f8      	bcs.n	800af20 <_ZN5codal5Timer4syncEm+0x14>
 800af2e:	60c1      	str	r1, [r0, #12]
 800af30:	6043      	str	r3, [r0, #4]
    }
}
 800af32:	4770      	bx	lr

0800af34 <_ZN5codal5Timer7triggerEv>:

/**
 * Callback from physical timer implementation code.
 */
void Timer::trigger()
{
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af38:	4606      	mov	r6, r0
        {
            if (e->id != 0 && currentTimeUs >= e->timestamp)
            {
                // We need to trigger this event.
#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
                Event evt(e->id, e->value, currentTime);
 800af3a:	f04f 0801 	mov.w	r8, #1
    syncRequest();
 800af3e:	6803      	ldr	r3, [r0, #0]
{
 800af40:	b084      	sub	sp, #16
    syncRequest();
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	4798      	blx	r3
 800af46:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800af48:	2b00      	cmp	r3, #0
        TimerEvent *e = timerEventList;
 800af4a:	6934      	ldr	r4, [r6, #16]
        for (int i=0; i<eventListSize; i++)
 800af4c:	dd4c      	ble.n	800afe8 <_ZN5codal5Timer7triggerEv+0xb4>
 800af4e:	2500      	movs	r5, #0
        eventsFired = 0;
 800af50:	462f      	mov	r7, r5
 800af52:	e004      	b.n	800af5e <_ZN5codal5Timer7triggerEv+0x2a>
        for (int i=0; i<eventListSize; i++)
 800af54:	3501      	adds	r5, #1
 800af56:	42ab      	cmp	r3, r5
                    e->timestamp += e->period;

                // TODO: Handle rollover case above...
                eventsFired++;
            }
            e++;
 800af58:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800af5c:	dd1c      	ble.n	800af98 <_ZN5codal5Timer7triggerEv+0x64>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 800af5e:	8821      	ldrh	r1, [r4, #0]
 800af60:	2900      	cmp	r1, #0
 800af62:	d0f7      	beq.n	800af54 <_ZN5codal5Timer7triggerEv+0x20>
 800af64:	68b0      	ldr	r0, [r6, #8]
 800af66:	68a2      	ldr	r2, [r4, #8]
 800af68:	4290      	cmp	r0, r2
 800af6a:	d3f3      	bcc.n	800af54 <_ZN5codal5Timer7triggerEv+0x20>
                Event evt(e->id, e->value, currentTime);
 800af6c:	6873      	ldr	r3, [r6, #4]
 800af6e:	8862      	ldrh	r2, [r4, #2]
 800af70:	a802      	add	r0, sp, #8
 800af72:	f8cd 8000 	str.w	r8, [sp]
 800af76:	f000 fb73 	bl	800b660 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d12f      	bne.n	800afe0 <_ZN5codal5Timer7triggerEv+0xac>
    if (nextTimerEvent == event)
 800af80:	6972      	ldr	r2, [r6, #20]
    event->id = 0;
 800af82:	8023      	strh	r3, [r4, #0]
    if (nextTimerEvent == event)
 800af84:	42a2      	cmp	r2, r4
 800af86:	d034      	beq.n	800aff2 <_ZN5codal5Timer7triggerEv+0xbe>
 800af88:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800af8a:	3501      	adds	r5, #1
 800af8c:	42ab      	cmp	r3, r5
                eventsFired++;
 800af8e:	f107 0701 	add.w	r7, r7, #1
            e++;
 800af92:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800af96:	dce2      	bgt.n	800af5e <_ZN5codal5Timer7triggerEv+0x2a>
        }

    } while (eventsFired);
 800af98:	2f00      	cmp	r7, #0
 800af9a:	d1d5      	bne.n	800af48 <_ZN5codal5Timer7triggerEv+0x14>
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800af9c:	2b00      	cmp	r3, #0
    nextTimerEvent = NULL;
 800af9e:	6177      	str	r7, [r6, #20]
    TimerEvent *e = timerEventList;
 800afa0:	6932      	ldr	r2, [r6, #16]
    for (int i=0; i<eventListSize; i++)
 800afa2:	dd23      	ble.n	800afec <_ZN5codal5Timer7triggerEv+0xb8>
 800afa4:	4638      	mov	r0, r7
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800afa6:	8811      	ldrh	r1, [r2, #0]
    for (int i=0; i<eventListSize; i++)
 800afa8:	3701      	adds	r7, #1
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800afaa:	b131      	cbz	r1, 800afba <_ZN5codal5Timer7triggerEv+0x86>
 800afac:	b118      	cbz	r0, 800afb6 <_ZN5codal5Timer7triggerEv+0x82>
 800afae:	6894      	ldr	r4, [r2, #8]
 800afb0:	6881      	ldr	r1, [r0, #8]
 800afb2:	428c      	cmp	r4, r1
 800afb4:	d201      	bcs.n	800afba <_ZN5codal5Timer7triggerEv+0x86>
            nextTimerEvent = e;
 800afb6:	4610      	mov	r0, r2
 800afb8:	6172      	str	r2, [r6, #20]
    for (int i=0; i<eventListSize; i++)
 800afba:	42bb      	cmp	r3, r7
        e++;
 800afbc:	f102 020c 	add.w	r2, r2, #12
    for (int i=0; i<eventListSize; i++)
 800afc0:	d1f1      	bne.n	800afa6 <_ZN5codal5Timer7triggerEv+0x72>
    }

    if (nextTimerEvent) {
 800afc2:	b198      	cbz	r0, 800afec <_ZN5codal5Timer7triggerEv+0xb8>
        // this may possibly happen if a new timer event was added to the queue while
        // we were running - it might be already in the past
        if (currentTimeUs < nextTimerEvent->timestamp)
 800afc4:	6881      	ldr	r1, [r0, #8]
 800afc6:	68b3      	ldr	r3, [r6, #8]
 800afc8:	6832      	ldr	r2, [r6, #0]
 800afca:	428b      	cmp	r3, r1
 800afcc:	6812      	ldr	r2, [r2, #0]
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 800afce:	bf39      	ittee	cc
 800afd0:	1ac9      	subcc	r1, r1, r3
 800afd2:	4630      	movcc	r0, r6
        else
            triggerIn(1);
 800afd4:	4630      	movcs	r0, r6
 800afd6:	2101      	movcs	r1, #1
 800afd8:	4790      	blx	r2
    }
}
 800afda:	b004      	add	sp, #16
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    e->timestamp += e->period;
 800afe0:	68a2      	ldr	r2, [r4, #8]
 800afe2:	4413      	add	r3, r2
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	e7cf      	b.n	800af88 <_ZN5codal5Timer7triggerEv+0x54>
    nextTimerEvent = NULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	6173      	str	r3, [r6, #20]
}
 800afec:	b004      	add	sp, #16
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nextTimerEvent = NULL;
 800aff2:	6173      	str	r3, [r6, #20]
 800aff4:	e7c8      	b.n	800af88 <_ZN5codal5Timer7triggerEv+0x54>
 800aff6:	bf00      	nop

0800aff8 <_ZN5codal5TimerD1Ev>:
/**
 * Destructor for this Timer instance
 */
Timer::~Timer()
{
}
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop

0800affc <_ZN5codal25system_timer_current_timeEv>:
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
 800affc:	4b05      	ldr	r3, [pc, #20]	; (800b014 <_ZN5codal25system_timer_current_timeEv+0x18>)
{
 800affe:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800b000:	681c      	ldr	r4, [r3, #0]
 800b002:	b12c      	cbz	r4, 800b010 <_ZN5codal25system_timer_current_timeEv+0x14>
    syncRequest();
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	4620      	mov	r0, r4
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	4798      	blx	r3
    return currentTime;
 800b00c:	6860      	ldr	r0, [r4, #4]
        return 0;

    return system_timer->getTime();
}
 800b00e:	bd10      	pop	{r4, pc}
        return 0;
 800b010:	4620      	mov	r0, r4
}
 800b012:	bd10      	pop	{r4, pc}
 800b014:	20001648 	.word	0x20001648

0800b018 <_ZN5codal28system_timer_current_time_usEv>:
  *
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
    if(system_timer == NULL)
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <_ZN5codal28system_timer_current_time_usEv+0x18>)
{
 800b01a:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800b01c:	681c      	ldr	r4, [r3, #0]
 800b01e:	b12c      	cbz	r4, 800b02c <_ZN5codal28system_timer_current_time_usEv+0x14>
    syncRequest();
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	4620      	mov	r0, r4
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4798      	blx	r3
    return currentTimeUs;
 800b028:	68a0      	ldr	r0, [r4, #8]
        return 0;

    return system_timer->getTimeUs();
}
 800b02a:	bd10      	pop	{r4, pc}
        return 0;
 800b02c:	4620      	mov	r0, r4
}
 800b02e:	bd10      	pop	{r4, pc}
 800b030:	20001648 	.word	0x20001648

0800b034 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 800b034:	b530      	push	{r4, r5, lr}
    if(system_timer == NULL)
 800b036:	4b08      	ldr	r3, [pc, #32]	; (800b058 <_ZN5codal27system_timer_event_every_usEmtt+0x24>)
{
 800b038:	b083      	sub	sp, #12
    if(system_timer == NULL)
 800b03a:	681c      	ldr	r4, [r3, #0]
 800b03c:	b14c      	cbz	r4, 800b052 <_ZN5codal27system_timer_event_every_usEmtt+0x1e>
    return setEvent(period, id, value, true);
 800b03e:	2501      	movs	r5, #1
 800b040:	4613      	mov	r3, r2
 800b042:	9500      	str	r5, [sp, #0]
 800b044:	460a      	mov	r2, r1
 800b046:	4601      	mov	r1, r0
 800b048:	4620      	mov	r0, r4
 800b04a:	f7ff ff03 	bl	800ae54 <_ZN5codal5Timer8setEventEmttb>
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
}
 800b04e:	b003      	add	sp, #12
 800b050:	bd30      	pop	{r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 800b052:	4802      	ldr	r0, [pc, #8]	; (800b05c <_ZN5codal27system_timer_event_every_usEmtt+0x28>)
 800b054:	e7fb      	b.n	800b04e <_ZN5codal27system_timer_event_every_usEmtt+0x1a>
 800b056:	bf00      	nop
 800b058:	20001648 	.word	0x20001648
 800b05c:	fffffc16 	.word	0xfffffc16

0800b060 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 800b060:	b082      	sub	sp, #8
        }
 800b062:	4803      	ldr	r0, [pc, #12]	; (800b070 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
        virtual int send(Event)
 800b064:	ab02      	add	r3, sp, #8
 800b066:	e903 0006 	stmdb	r3, {r1, r2}
        }
 800b06a:	b002      	add	sp, #8
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	fffffc16 	.word	0xfffffc16

0800b074 <_ZN5codal10MessageBus9elementAtEi>:
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800b074:	2900      	cmp	r1, #0
    Listener *l = listeners;
 800b076:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 800b078:	dd05      	ble.n	800b086 <_ZN5codal10MessageBus9elementAtEi+0x12>
    {
        if (l == NULL)
 800b07a:	b908      	cbnz	r0, 800b080 <_ZN5codal10MessageBus9elementAtEi+0xc>
 800b07c:	e004      	b.n	800b088 <_ZN5codal10MessageBus9elementAtEi+0x14>
 800b07e:	b110      	cbz	r0, 800b086 <_ZN5codal10MessageBus9elementAtEi+0x12>
    while (n > 0)
 800b080:	3901      	subs	r1, #1
            return NULL;

        n--;
        l = l->next;
 800b082:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 800b084:	d1fb      	bne.n	800b07e <_ZN5codal10MessageBus9elementAtEi+0xa>
    }

    return l;
}
 800b086:	4770      	bx	lr
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop

0800b08c <_ZN5codal14CodalComponentD1Ev>:
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800b08c:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800b08e:	b510      	push	{r4, lr}
 800b090:	4604      	mov	r4, r0
        {
 800b092:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <_ZN5codal14CodalComponentD1Ev+0x14>)
            status = 0;
 800b094:	80c2      	strh	r2, [r0, #6]
        {
 800b096:	6003      	str	r3, [r0, #0]
            removeComponent();
 800b098:	f7fe ffba 	bl	800a010 <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800b09c:	4620      	mov	r0, r4
 800b09e:	bd10      	pop	{r4, pc}
 800b0a0:	0800c900 	.word	0x0800c900

0800b0a4 <_ZN5codal14CodalComponentD0Ev>:
            status = 0;
 800b0a4:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800b0a6:	b510      	push	{r4, lr}
 800b0a8:	4604      	mov	r4, r0
        {
 800b0aa:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <_ZN5codal14CodalComponentD0Ev+0x1c>)
            status = 0;
 800b0ac:	80c2      	strh	r2, [r0, #6]
        {
 800b0ae:	6003      	str	r3, [r0, #0]
            removeComponent();
 800b0b0:	f7fe ffae 	bl	800a010 <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7f8 ff8d 	bl	8003fd4 <_ZdlPv>
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	bf00      	nop
 800b0c0:	0800c900 	.word	0x0800c900

0800b0c4 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b0c4:	b470      	push	{r4, r5, r6}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	4606      	mov	r6, r0
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 800b0cc:	6849      	ldr	r1, [r1, #4]
 800b0ce:	6820      	ldr	r0, [r4, #0]
 800b0d0:	ac02      	add	r4, sp, #8
 800b0d2:	c403      	stmia	r4!, {r0, r1}
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b0d4:	4669      	mov	r1, sp

        (o->*m)(e);
 800b0d6:	9c03      	ldr	r4, [sp, #12]
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b0d8:	e881 000c 	stmia.w	r1, {r2, r3}
        (o->*m)(e);
 800b0dc:	1065      	asrs	r5, r4, #1
 800b0de:	07e3      	lsls	r3, r4, #31
 800b0e0:	bf45      	ittet	mi
 800b0e2:	5972      	ldrmi	r2, [r6, r5]
 800b0e4:	9b02      	ldrmi	r3, [sp, #8]
 800b0e6:	9b02      	ldrpl	r3, [sp, #8]
 800b0e8:	58d3      	ldrmi	r3, [r2, r3]
 800b0ea:	1970      	adds	r0, r6, r5
 800b0ec:	c906      	ldmia	r1, {r1, r2}
    }
 800b0ee:	b005      	add	sp, #20
 800b0f0:	bc70      	pop	{r4, r5, r6}
        (o->*m)(e);
 800b0f2:	4718      	bx	r3

0800b0f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 800b0f4:	2900      	cmp	r1, #0
 800b0f6:	d03a      	beq.n	800b16e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x7a>
{
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    l = listeners;
 800b0fa:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d033      	beq.n	800b168 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
 800b100:	460d      	mov	r5, r1
    int removed = 0;
 800b102:	2700      	movs	r7, #0
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b104:	4e1b      	ldr	r6, [pc, #108]	; (800b174 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x80>)
 800b106:	e005      	b.n	800b114 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800b108:	68a2      	ldr	r2, [r4, #8]
 800b10a:	68ab      	ldr	r3, [r5, #8]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d00d      	beq.n	800b12c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x38>
        l = l->next;
 800b110:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b112:	b1b4      	cbz	r4, 800b142 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x4e>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 800b114:	88aa      	ldrh	r2, [r5, #4]
 800b116:	88a3      	ldrh	r3, [r4, #4]
 800b118:	4053      	eors	r3, r2
 800b11a:	0799      	lsls	r1, r3, #30
 800b11c:	d4f8      	bmi.n	800b110 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800b11e:	0792      	lsls	r2, r2, #30
 800b120:	d5f2      	bpl.n	800b108 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
 800b122:	68a9      	ldr	r1, [r5, #8]
 800b124:	68a0      	ldr	r0, [r4, #8]
 800b126:	f000 fad1 	bl	800b6cc <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800b12a:	b178      	cbz	r0, 800b14c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x58>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800b12c:	882b      	ldrh	r3, [r5, #0]
 800b12e:	b98b      	cbnz	r3, 800b154 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x60>
 800b130:	886b      	ldrh	r3, [r5, #2]
 800b132:	b9ab      	cbnz	r3, 800b160 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6c>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b134:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 800b136:	3701      	adds	r7, #1
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b138:	4333      	orrs	r3, r6
 800b13a:	80a3      	strh	r3, [r4, #4]
        l = l->next;
 800b13c:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d1e8      	bne.n	800b114 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
    if (removed > 0)
 800b142:	2f00      	cmp	r7, #0
        return DEVICE_OK;
 800b144:	bfc8      	it	gt
 800b146:	4620      	movgt	r0, r4
    if (removed > 0)
 800b148:	dd0e      	ble.n	800b168 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
}
 800b14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800b14c:	88ab      	ldrh	r3, [r5, #4]
 800b14e:	079b      	lsls	r3, r3, #30
 800b150:	d4de      	bmi.n	800b110 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b152:	e7d9      	b.n	800b108 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800b154:	8822      	ldrh	r2, [r4, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d1da      	bne.n	800b110 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b15a:	886b      	ldrh	r3, [r5, #2]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0e9      	beq.n	800b134 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
 800b160:	8862      	ldrh	r2, [r4, #2]
 800b162:	429a      	cmp	r2, r3
 800b164:	d1d4      	bne.n	800b110 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b166:	e7e5      	b.n	800b134 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
        return DEVICE_INVALID_PARAMETER;
 800b168:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 800b16e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b172:	4770      	bx	lr
 800b174:	ffff8000 	.word	0xffff8000

0800b178 <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
    if (newListener == NULL)
 800b178:	2900      	cmp	r1, #0
 800b17a:	d06b      	beq.n	800b254 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xdc>
{
 800b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    l = listeners;
 800b17e:	6944      	ldr	r4, [r0, #20]
{
 800b180:	b083      	sub	sp, #12
 800b182:	460d      	mov	r5, r1
 800b184:	4606      	mov	r6, r0
    while (l != NULL)
 800b186:	b93c      	cbnz	r4, 800b198 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
 800b188:	e060      	b.n	800b24c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd4>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800b18a:	88a3      	ldrh	r3, [r4, #4]
 800b18c:	0798      	lsls	r0, r3, #30
 800b18e:	d508      	bpl.n	800b1a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x2a>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b190:	4291      	cmp	r1, r2
 800b192:	d012      	beq.n	800b1ba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
        l = l->next;
 800b194:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b196:	b1cc      	cbz	r4, 800b1cc <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x54>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800b198:	88ab      	ldrh	r3, [r5, #4]
 800b19a:	6821      	ldr	r1, [r4, #0]
 800b19c:	079f      	lsls	r7, r3, #30
 800b19e:	682a      	ldr	r2, [r5, #0]
 800b1a0:	d4f3      	bmi.n	800b18a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	d1f6      	bne.n	800b194 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
 800b1a6:	68a2      	ldr	r2, [r4, #8]
 800b1a8:	68ab      	ldr	r3, [r5, #8]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d1f2      	bne.n	800b194 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800b1ae:	88a3      	ldrh	r3, [r4, #4]
 800b1b0:	041a      	lsls	r2, r3, #16
 800b1b2:	d447      	bmi.n	800b244 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xcc>
            return DEVICE_NOT_SUPPORTED;
 800b1b4:	4829      	ldr	r0, [pc, #164]	; (800b25c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
}
 800b1b6:	b003      	add	sp, #12
 800b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b1ba:	68a9      	ldr	r1, [r5, #8]
 800b1bc:	68a0      	ldr	r0, [r4, #8]
 800b1be:	f000 fa85 	bl	800b6cc <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d1f3      	bne.n	800b1ae <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
        l = l->next;
 800b1c6:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b1c8:	2c00      	cmp	r4, #0
 800b1ca:	d1e5      	bne.n	800b198 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
    if (listeners == NULL)
 800b1cc:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800b1d0:	882a      	ldrh	r2, [r5, #0]
 800b1d2:	f1bc 0f00 	cmp.w	ip, #0
 800b1d6:	d033      	beq.n	800b240 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
 800b1d8:	4664      	mov	r4, ip
 800b1da:	4663      	mov	r3, ip
 800b1dc:	e000      	b.n	800b1e0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x68>
 800b1de:	460b      	mov	r3, r1
    while (l != NULL && l->id < newListener->id)
 800b1e0:	8818      	ldrh	r0, [r3, #0]
 800b1e2:	4290      	cmp	r0, r2
 800b1e4:	d211      	bcs.n	800b20a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
        l = l->next;
 800b1e6:	69d9      	ldr	r1, [r3, #28]
 800b1e8:	461c      	mov	r4, r3
    while (l != NULL && l->id < newListener->id)
 800b1ea:	2900      	cmp	r1, #0
 800b1ec:	d1f7      	bne.n	800b1de <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x66>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800b1ee:	4563      	cmp	r3, ip
 800b1f0:	d01d      	beq.n	800b22e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb6>
        newListener->next = p->next;
 800b1f2:	69d9      	ldr	r1, [r3, #28]
 800b1f4:	61e9      	str	r1, [r5, #28]
        p->next = newListener;
 800b1f6:	61dd      	str	r5, [r3, #28]
    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800b1fe:	4668      	mov	r0, sp
 800b200:	f000 fa20 	bl	800b644 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800b204:	2000      	movs	r0, #0
}
 800b206:	b003      	add	sp, #12
 800b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800b20a:	d121      	bne.n	800b250 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800b20c:	886f      	ldrh	r7, [r5, #2]
 800b20e:	8859      	ldrh	r1, [r3, #2]
 800b210:	42b9      	cmp	r1, r7
 800b212:	d304      	bcc.n	800b21e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa6>
 800b214:	e01c      	b.n	800b250 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800b216:	884c      	ldrh	r4, [r1, #2]
 800b218:	42bc      	cmp	r4, r7
 800b21a:	d2e8      	bcs.n	800b1ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800b21c:	460b      	mov	r3, r1
        l = l->next;
 800b21e:	69d9      	ldr	r1, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800b220:	2900      	cmp	r1, #0
 800b222:	d0e4      	beq.n	800b1ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800b224:	880c      	ldrh	r4, [r1, #0]
 800b226:	4284      	cmp	r4, r0
 800b228:	d0f5      	beq.n	800b216 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x9e>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800b22a:	4563      	cmp	r3, ip
 800b22c:	d1e1      	bne.n	800b1f2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800b22e:	8819      	ldrh	r1, [r3, #0]
 800b230:	428a      	cmp	r2, r1
 800b232:	d304      	bcc.n	800b23e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
 800b234:	d1dd      	bne.n	800b1f2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800b236:	8858      	ldrh	r0, [r3, #2]
 800b238:	8869      	ldrh	r1, [r5, #2]
 800b23a:	4288      	cmp	r0, r1
 800b23c:	d9d9      	bls.n	800b1f2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
        newListener->next = p;
 800b23e:	61eb      	str	r3, [r5, #28]
        listeners = newListener;
 800b240:	6175      	str	r5, [r6, #20]
 800b242:	e7d9      	b.n	800b1f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x80>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 800b244:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b248:	80a3      	strh	r3, [r4, #4]
 800b24a:	e7b3      	b.n	800b1b4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3c>
 800b24c:	880a      	ldrh	r2, [r1, #0]
 800b24e:	e7f7      	b.n	800b240 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800b250:	4623      	mov	r3, r4
 800b252:	e7cc      	b.n	800b1ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
        return DEVICE_INVALID_PARAMETER;
 800b254:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	fffffc16 	.word	0xfffffc16

0800b260 <_Z14async_callbackPv>:
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800b260:	8883      	ldrh	r3, [r0, #4]
{
 800b262:	b570      	push	{r4, r5, r6, lr}
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800b264:	075a      	lsls	r2, r3, #29
{
 800b266:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800b268:	d503      	bpl.n	800b272 <_Z14async_callbackPv+0x12>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 800b26a:	069e      	lsls	r6, r3, #26
 800b26c:	d428      	bmi.n	800b2c0 <_Z14async_callbackPv+0x60>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 800b26e:	06dd      	lsls	r5, r3, #27
 800b270:	d42d      	bmi.n	800b2ce <_Z14async_callbackPv+0x6e>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 800b272:	f043 0304 	orr.w	r3, r3, #4
 800b276:	80a3      	strh	r3, [r4, #4]
 800b278:	f104 0510 	add.w	r5, r4, #16
 800b27c:	e012      	b.n	800b2a4 <_Z14async_callbackPv+0x44>
            listener->cb_param(listener->evt, listener->cb_arg);
 800b27e:	68e2      	ldr	r2, [r4, #12]
 800b280:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800b282:	88a2      	ldrh	r2, [r4, #4]
 800b284:	06d3      	lsls	r3, r2, #27
 800b286:	d518      	bpl.n	800b2ba <_Z14async_callbackPv+0x5a>
 800b288:	69a3      	ldr	r3, [r4, #24]
 800b28a:	b1b3      	cbz	r3, 800b2ba <_Z14async_callbackPv+0x5a>
            listener->evt = item->evt;
 800b28c:	e893 0003 	ldmia.w	r3, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800b290:	689a      	ldr	r2, [r3, #8]
            listener->evt = item->evt;
 800b292:	e885 0003 	stmia.w	r5, {r0, r1}
            delete item;
 800b296:	4618      	mov	r0, r3
            listener->evt_queue = listener->evt_queue->next;
 800b298:	61a2      	str	r2, [r4, #24]
            delete item;
 800b29a:	f7f8 fe9b 	bl	8003fd4 <_ZdlPv>
            schedule();
 800b29e:	f7ff fb61 	bl	800a964 <_ZN5codal8scheduleEv>
 800b2a2:	88a3      	ldrh	r3, [r4, #4]
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b2a4:	0799      	lsls	r1, r3, #30
 800b2a6:	68a6      	ldr	r6, [r4, #8]
 800b2a8:	d40b      	bmi.n	800b2c2 <_Z14async_callbackPv+0x62>
            listener->cb_param(listener->evt, listener->cb_arg);
 800b2aa:	e895 0003 	ldmia.w	r5, {r0, r1}
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 800b2ae:	07da      	lsls	r2, r3, #31
 800b2b0:	d4e5      	bmi.n	800b27e <_Z14async_callbackPv+0x1e>
            listener->cb(listener->evt);
 800b2b2:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800b2b4:	88a2      	ldrh	r2, [r4, #4]
 800b2b6:	06d3      	lsls	r3, r2, #27
 800b2b8:	d4e6      	bmi.n	800b288 <_Z14async_callbackPv+0x28>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 800b2ba:	f022 0204 	bic.w	r2, r2, #4
 800b2be:	80a2      	strh	r2, [r4, #4]
}
 800b2c0:	bd70      	pop	{r4, r5, r6, pc}
            listener->cb_method->fire(listener->evt);
 800b2c2:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f000 f9f2 	bl	800b6b0 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 800b2cc:	e7d9      	b.n	800b282 <_Z14async_callbackPv+0x22>
            listener->queue(listener->evt);
 800b2ce:	3410      	adds	r4, #16
 800b2d0:	e894 0006 	ldmia.w	r4, {r1, r2}
}
 800b2d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            listener->queue(listener->evt);
 800b2d8:	f7ff bd64 	b.w	800ada4 <_ZN5codal8Listener5queueENS_5EventE>

0800b2dc <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <_ZN5codal10MessageBusD1Ev+0x74>)
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	f103 0208 	add.w	r2, r3, #8
 800b2e8:	3328      	adds	r3, #40	; 0x28
 800b2ea:	6022      	str	r2, [r4, #0]
 800b2ec:	60a3      	str	r3, [r4, #8]
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800b2ee:	a806      	add	r0, sp, #24
 800b2f0:	f000 f9c2 	bl	800b678 <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800b2f4:	230f      	movs	r3, #15
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
 800b2f6:	2018      	movs	r0, #24
        this->id = id;
 800b2f8:	9302      	str	r3, [sp, #8]
        this->cb_method = new MemberFunctionCallback(object, method);
 800b2fa:	f7f8 fe69 	bl	8003fd0 <_Znwj>
 800b2fe:	2500      	movs	r5, #0
 800b300:	4a14      	ldr	r2, [pc, #80]	; (800b354 <_ZN5codal10MessageBusD1Ev+0x78>)
        this->object = object;
 800b302:	4601      	mov	r1, r0
 800b304:	e9cd 2500 	strd	r2, r5, [sp]
        memcpy(this->method, &method, sizeof(method));
 800b308:	466a      	mov	r2, sp
 800b30a:	4603      	mov	r3, r0
        this->cb_arg = NULL;
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800b30c:	2612      	movs	r6, #18
        this->object = object;
 800b30e:	f841 4b0c 	str.w	r4, [r1], #12
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 800b312:	60c5      	str	r5, [r0, #12]
 800b314:	604d      	str	r5, [r1, #4]
        memcpy(this->method, &method, sizeof(method));
 800b316:	ca03      	ldmia	r2!, {r0, r1}
        invoke = &MemberFunctionCallback::methodCall<T>;
 800b318:	4a0f      	ldr	r2, [pc, #60]	; (800b358 <_ZN5codal10MessageBusD1Ev+0x7c>)
        memcpy(this->method, &method, sizeof(method));
 800b31a:	6058      	str	r0, [r3, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800b31c:	615a      	str	r2, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800b31e:	6099      	str	r1, [r3, #8]
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
        remove(&listener);
 800b320:	4620      	mov	r0, r4
 800b322:	a902      	add	r1, sp, #8
        this->cb_arg = NULL;
 800b324:	e9cd 3504 	strd	r3, r5, [sp, #16]
        this->evt_queue = NULL;
        this->next = NULL;
 800b328:	e9cd 5508 	strd	r5, r5, [sp, #32]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800b32c:	f8ad 600c 	strh.w	r6, [sp, #12]
 800b330:	f7ff fee0 	bl	800b0f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>
        Listener listener(id, value, object, handler);
 800b334:	a802      	add	r0, sp, #8
 800b336:	f7ff fd2b 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
        {
 800b33a:	4b08      	ldr	r3, [pc, #32]	; (800b35c <_ZN5codal10MessageBusD1Ev+0x80>)
            removeComponent();
 800b33c:	f104 0008 	add.w	r0, r4, #8
            status = 0;
 800b340:	81e5      	strh	r5, [r4, #14]
        {
 800b342:	60a3      	str	r3, [r4, #8]
            removeComponent();
 800b344:	f7fe fe64 	bl	800a010 <_ZN5codal14CodalComponent15removeComponentEv>
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800b348:	4620      	mov	r0, r4
 800b34a:	b00a      	add	sp, #40	; 0x28
 800b34c:	bd70      	pop	{r4, r5, r6, pc}
 800b34e:	bf00      	nop
 800b350:	0800c928 	.word	0x0800c928
 800b354:	0800b5c5 	.word	0x0800b5c5
 800b358:	0800b0c5 	.word	0x0800b0c5
 800b35c:	0800c900 	.word	0x0800c900

0800b360 <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800b360:	f1a0 0008 	sub.w	r0, r0, #8
 800b364:	f7ff bfba 	b.w	800b2dc <_ZN5codal10MessageBusD1Ev>

0800b368 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 800b368:	b510      	push	{r4, lr}
 800b36a:	4604      	mov	r4, r0
}
 800b36c:	f7ff ffb6 	bl	800b2dc <_ZN5codal10MessageBusD1Ev>
 800b370:	4620      	mov	r0, r4
 800b372:	f7f8 fe2f 	bl	8003fd4 <_ZdlPv>
 800b376:	4620      	mov	r0, r4
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	bf00      	nop

0800b37c <_ZThn8_N5codal10MessageBusD0Ev>:
 800b37c:	f1a0 0008 	sub.w	r0, r0, #8
 800b380:	f7ff bff2 	b.w	800b368 <_ZN5codal10MessageBusD0Ev>

0800b384 <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 800b384:	b570      	push	{r4, r5, r6, lr}
            this->id = 0;
 800b386:	2500      	movs	r5, #0
 800b388:	4604      	mov	r4, r0
    class EventModel
 800b38a:	4a23      	ldr	r2, [pc, #140]	; (800b418 <_ZN5codal10MessageBusC1Ev+0x94>)
        {
 800b38c:	4b23      	ldr	r3, [pc, #140]	; (800b41c <_ZN5codal10MessageBusC1Ev+0x98>)
 800b38e:	b082      	sub	sp, #8
 800b390:	6002      	str	r2, [r0, #0]
            this->id = 0;
 800b392:	e9c0 3502 	strd	r3, r5, [r0, #8]
            addComponent();
 800b396:	3008      	adds	r0, #8
 800b398:	f7fe fdcc 	bl	8009f34 <_ZN5codal14CodalComponent12addComponentEv>
 800b39c:	4b20      	ldr	r3, [pc, #128]	; (800b420 <_ZN5codal10MessageBusC1Ev+0x9c>)
    this->listeners = NULL;
 800b39e:	6165      	str	r5, [r4, #20]
MessageBus::MessageBus()
 800b3a0:	f103 0220 	add.w	r2, r3, #32
 800b3a4:	60a2      	str	r2, [r4, #8]
 800b3a6:	6023      	str	r3, [r4, #0]
    this->evt_queue_tail = NULL;
 800b3a8:	e9c4 5506 	strd	r5, r5, [r4, #24]
    this->queueLength = 0;
 800b3ac:	8465      	strh	r5, [r4, #34]	; 0x22
        Listener *newListener = new Listener(id, value, object, handler, flags);
 800b3ae:	2020      	movs	r0, #32
 800b3b0:	f7f8 fe0e 	bl	8003fd0 <_Znwj>
 800b3b4:	4606      	mov	r6, r0
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800b3b6:	3010      	adds	r0, #16
 800b3b8:	f000 f95e 	bl	800b678 <_ZN5codal5EventC1Ev>
        this->id = id;
 800b3bc:	4b19      	ldr	r3, [pc, #100]	; (800b424 <_ZN5codal10MessageBusC1Ev+0xa0>)
        this->cb_method = new MemberFunctionCallback(object, method);
 800b3be:	2018      	movs	r0, #24
        this->id = id;
 800b3c0:	6033      	str	r3, [r6, #0]
        this->cb_method = new MemberFunctionCallback(object, method);
 800b3c2:	f7f8 fe05 	bl	8003fd0 <_Znwj>
        this->object = object;
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f842 4b0c 	str.w	r4, [r2], #12
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800b3ce:	21c2      	movs	r1, #194	; 0xc2
 800b3d0:	60dd      	str	r5, [r3, #12]
 800b3d2:	6055      	str	r5, [r2, #4]
        memcpy(this->method, &method, sizeof(method));
 800b3d4:	466a      	mov	r2, sp
 800b3d6:	4814      	ldr	r0, [pc, #80]	; (800b428 <_ZN5codal10MessageBusC1Ev+0xa4>)
 800b3d8:	9501      	str	r5, [sp, #4]
        this->cb_arg = NULL;
 800b3da:	e9c6 3502 	strd	r3, r5, [r6, #8]
        this->next = NULL;
 800b3de:	e9c6 5506 	strd	r5, r5, [r6, #24]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800b3e2:	4d12      	ldr	r5, [pc, #72]	; (800b42c <_ZN5codal10MessageBusC1Ev+0xa8>)
 800b3e4:	9000      	str	r0, [sp, #0]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800b3e6:	80b1      	strh	r1, [r6, #4]
 800b3e8:	615d      	str	r5, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800b3ea:	ca03      	ldmia	r2!, {r0, r1}
 800b3ec:	6058      	str	r0, [r3, #4]
 800b3ee:	6099      	str	r1, [r3, #8]
        if(add(newListener) == DEVICE_OK)
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	f7ff fec0 	bl	800b178 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800b3f8:	b930      	cbnz	r0, 800b408 <_ZN5codal10MessageBusC1Ev+0x84>
    if(EventModel::defaultEventBus == NULL)
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <_ZN5codal10MessageBusC1Ev+0xac>)
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	b902      	cbnz	r2, 800b402 <_ZN5codal10MessageBusC1Ev+0x7e>
        EventModel::defaultEventBus = this;
 800b400:	601c      	str	r4, [r3, #0]
}
 800b402:	4620      	mov	r0, r4
 800b404:	b002      	add	sp, #8
 800b406:	bd70      	pop	{r4, r5, r6, pc}
        delete newListener;
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff fcc1 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800b40e:	4630      	mov	r0, r6
 800b410:	f7f8 fde0 	bl	8003fd4 <_ZdlPv>
 800b414:	e7f1      	b.n	800b3fa <_ZN5codal10MessageBusC1Ev+0x76>
 800b416:	bf00      	nop
 800b418:	0800c91c 	.word	0x0800c91c
 800b41c:	0800c900 	.word	0x0800c900
 800b420:	0800c930 	.word	0x0800c930
 800b424:	0002000f 	.word	0x0002000f
 800b428:	0800b5c5 	.word	0x0800b5c5
 800b42c:	0800b0c5 	.word	0x0800b0c5
 800b430:	2000164c 	.word	0x2000164c

0800b434 <_ZN5codal10MessageBus12dequeueEventEv>:
{
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4604      	mov	r4, r0
    target_disable_irq();
 800b438:	f7f5 f84a 	bl	80004d0 <target_disable_irq>
    if (evt_queue_head != NULL)
 800b43c:	69a5      	ldr	r5, [r4, #24]
 800b43e:	b12d      	cbz	r5, 800b44c <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 800b440:	68ab      	ldr	r3, [r5, #8]
 800b442:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 800b444:	b133      	cbz	r3, 800b454 <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 800b446:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b448:	3b01      	subs	r3, #1
 800b44a:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800b44c:	f7f5 f83e 	bl	80004cc <target_enable_irq>
}
 800b450:	4628      	mov	r0, r5
 800b452:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 800b454:	61e3      	str	r3, [r4, #28]
 800b456:	e7f6      	b.n	800b446 <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800b458 <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800b45c:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800b45e:	b30c      	cbz	r4, 800b4a4 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x4c>
    int removed = 0;
 800b460:	2700      	movs	r7, #0
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800b462:	88a3      	ldrh	r3, [r4, #4]
 800b464:	4680      	mov	r8, r0
 800b466:	041a      	lsls	r2, r3, #16
    p = NULL;
 800b468:	463e      	mov	r6, r7
 800b46a:	69e5      	ldr	r5, [r4, #28]
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800b46c:	d406      	bmi.n	800b47c <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x24>
 800b46e:	4626      	mov	r6, r4
    while (l != NULL)
 800b470:	b195      	cbz	r5, 800b498 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x40>
 800b472:	462c      	mov	r4, r5
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800b474:	88a3      	ldrh	r3, [r4, #4]
 800b476:	69e5      	ldr	r5, [r4, #28]
 800b478:	041a      	lsls	r2, r3, #16
 800b47a:	d5f8      	bpl.n	800b46e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
 800b47c:	075b      	lsls	r3, r3, #29
 800b47e:	d4f6      	bmi.n	800b46e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
            if (p == NULL)
 800b480:	b16e      	cbz	r6, 800b49e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
                p->next = l->next;
 800b482:	61f5      	str	r5, [r6, #28]
 800b484:	69e5      	ldr	r5, [r4, #28]
            delete t;
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff fc82 	bl	800ad90 <_ZN5codal8ListenerD1Ev>
 800b48c:	4620      	mov	r0, r4
            removed++;
 800b48e:	3701      	adds	r7, #1
            delete t;
 800b490:	f7f8 fda0 	bl	8003fd4 <_ZdlPv>
    while (l != NULL)
 800b494:	2d00      	cmp	r5, #0
 800b496:	d1ec      	bne.n	800b472 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x1a>
}
 800b498:	4638      	mov	r0, r7
 800b49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                listeners = l->next;
 800b49e:	f8c8 5014 	str.w	r5, [r8, #20]
 800b4a2:	e7f0      	b.n	800b486 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x2e>
    int removed = 0;
 800b4a4:	4627      	mov	r7, r4
}
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4ac <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 800b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800b4b0:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d041      	beq.n	800b53a <_ZN5codal10MessageBus7processERNS_5EventEb+0x8e>
 800b4b6:	4616      	mov	r6, r2
 800b4b8:	460d      	mov	r5, r1
    int complete = 1;
 800b4ba:	2701      	movs	r7, #1
                    invoke(async_callback, l);
 800b4bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800b544 <_ZN5codal10MessageBus7processERNS_5EventEb+0x98>
 800b4c0:	e00c      	b.n	800b4dc <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 800b4c2:	88a3      	ldrh	r3, [r4, #4]
 800b4c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4c8:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 800b4cc:	fab3 f383 	clz	r3, r3
 800b4d0:	095b      	lsrs	r3, r3, #5
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800b4d2:	42b3      	cmp	r3, r6
 800b4d4:	d015      	beq.n	800b502 <_ZN5codal10MessageBus7processERNS_5EventEb+0x56>
                complete = 0;
 800b4d6:	2700      	movs	r7, #0
        l = l->next;
 800b4d8:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b4da:	b334      	cbz	r4, 800b52a <_ZN5codal10MessageBus7processERNS_5EventEb+0x7e>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 800b4dc:	8823      	ldrh	r3, [r4, #0]
 800b4de:	8829      	ldrh	r1, [r5, #0]
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d001      	beq.n	800b4e8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x3c>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f7      	bne.n	800b4d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
 800b4e8:	8863      	ldrh	r3, [r4, #2]
 800b4ea:	886a      	ldrh	r2, [r5, #2]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d001      	beq.n	800b4f4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x48>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1f1      	bne.n	800b4d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
            if (fiber_scheduler_running())
 800b4f4:	f7ff f8ac 	bl	800a650 <_ZN5codal23fiber_scheduler_runningEv>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d1e2      	bne.n	800b4c2 <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 800b4fc:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800b4fe:	42b3      	cmp	r3, r6
 800b500:	d1e9      	bne.n	800b4d6 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
 800b502:	88a3      	ldrh	r3, [r4, #4]
 800b504:	041a      	lsls	r2, r3, #16
 800b506:	d4e6      	bmi.n	800b4d6 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
                l->evt = evt;
 800b508:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b50c:	f104 0210 	add.w	r2, r4, #16
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800b510:	065b      	lsls	r3, r3, #25
                l->evt = evt;
 800b512:	e882 0003 	stmia.w	r2, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800b516:	d402      	bmi.n	800b51e <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
 800b518:	f7ff f89a 	bl	800a650 <_ZN5codal23fiber_scheduler_runningEv>
 800b51c:	b940      	cbnz	r0, 800b530 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>
                    async_callback(l);
 800b51e:	4620      	mov	r0, r4
 800b520:	f7ff fe9e 	bl	800b260 <_Z14async_callbackPv>
        l = l->next;
 800b524:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b526:	2c00      	cmp	r4, #0
 800b528:	d1d8      	bne.n	800b4dc <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
}
 800b52a:	4638      	mov	r0, r7
 800b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    invoke(async_callback, l);
 800b530:	4621      	mov	r1, r4
 800b532:	4640      	mov	r0, r8
 800b534:	f7ff fabe 	bl	800aab4 <_ZN5codal6invokeEPFvPvES0_>
 800b538:	e7ce      	b.n	800b4d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
    int complete = 1;
 800b53a:	2701      	movs	r7, #1
}
 800b53c:	4638      	mov	r0, r7
 800b53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b542:	bf00      	nop
 800b544:	0800b261 	.word	0x0800b261

0800b548 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 800b548:	b5f0      	push	{r4, r5, r6, r7, lr}
    processingComplete = this->process(evt, true);
 800b54a:	2201      	movs	r2, #1
{
 800b54c:	b083      	sub	sp, #12
 800b54e:	4604      	mov	r4, r0
    EventQueueItem *prev = evt_queue_tail;
 800b550:	69c5      	ldr	r5, [r0, #28]
{
 800b552:	460e      	mov	r6, r1
    processingComplete = this->process(evt, true);
 800b554:	f7ff ffaa 	bl	800b4ac <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 800b558:	b910      	cbnz	r0, 800b560 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800b55a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b55c:	2b09      	cmp	r3, #9
 800b55e:	d901      	bls.n	800b564 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800b560:	b003      	add	sp, #12
 800b562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 800b564:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b568:	466e      	mov	r6, sp
 800b56a:	e886 0003 	stmia.w	r6, {r0, r1}
 800b56e:	200c      	movs	r0, #12
 800b570:	f7f8 fd2e 	bl	8003fd0 <_Znwj>
 800b574:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b578:	4607      	mov	r7, r0
 800b57a:	f000 f887 	bl	800b68c <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800b57e:	f7f4 ffa7 	bl	80004d0 <target_disable_irq>
    if (prev == NULL)
 800b582:	b165      	cbz	r5, 800b59e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x56>
        item->next = prev->next;
 800b584:	68ab      	ldr	r3, [r5, #8]
 800b586:	60bb      	str	r3, [r7, #8]
        prev->next = item;
 800b588:	60af      	str	r7, [r5, #8]
 800b58a:	68bb      	ldr	r3, [r7, #8]
    if (item->next == NULL)
 800b58c:	b15b      	cbz	r3, 800b5a6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5e>
    queueLength++;
 800b58e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b590:	3301      	adds	r3, #1
 800b592:	8463      	strh	r3, [r4, #34]	; 0x22
}
 800b594:	b003      	add	sp, #12
 800b596:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    target_enable_irq();
 800b59a:	f7f4 bf97 	b.w	80004cc <target_enable_irq>
        item->next = evt_queue_head;
 800b59e:	69a3      	ldr	r3, [r4, #24]
        evt_queue_head = item;
 800b5a0:	61a7      	str	r7, [r4, #24]
        item->next = evt_queue_head;
 800b5a2:	60bb      	str	r3, [r7, #8]
 800b5a4:	e7f2      	b.n	800b58c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x44>
        evt_queue_tail = item;
 800b5a6:	61e7      	str	r7, [r4, #28]
 800b5a8:	e7f1      	b.n	800b58e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>
 800b5aa:	bf00      	nop

0800b5ac <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 800b5ac:	b500      	push	{lr}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	466b      	mov	r3, sp
 800b5b2:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	f7ff ffc6 	bl	800b548 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 800b5bc:	2000      	movs	r0, #0
 800b5be:	b003      	add	sp, #12
 800b5c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5c4 <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 800b5c4:	b530      	push	{r4, r5, lr}
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	ab02      	add	r3, sp, #8
 800b5cc:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 800b5d0:	f7ff ff42 	bl	800b458 <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff ff2d 	bl	800b434 <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800b5da:	b190      	cbz	r0, 800b602 <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
 800b5dc:	4604      	mov	r4, r0
 800b5de:	e004      	b.n	800b5ea <_ZN5codal10MessageBus4idleENS_5EventE+0x26>
        item = this->dequeueEvent();
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f7ff ff27 	bl	800b434 <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b158      	cbz	r0, 800b602 <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
        this->process(item->evt);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7ff ff5c 	bl	800b4ac <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f7f8 fced 	bl	8003fd4 <_ZdlPv>
        if(!scheduler_runqueue_empty())
 800b5fa:	f7ff f8c3 	bl	800a784 <_ZN5codal24scheduler_runqueue_emptyEv>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d1ee      	bne.n	800b5e0 <_ZN5codal10MessageBus4idleENS_5EventE+0x1c>
}
 800b602:	b003      	add	sp, #12
 800b604:	bd30      	pop	{r4, r5, pc}
 800b606:	bf00      	nop

0800b608 <_ZN5codal19allocateNotifyEventEv>:
    return userNotifyId++;
 800b608:	4b02      	ldr	r3, [pc, #8]	; (800b614 <_ZN5codal19allocateNotifyEventEv+0xc>)
 800b60a:	8818      	ldrh	r0, [r3, #0]
 800b60c:	1c42      	adds	r2, r0, #1
 800b60e:	801a      	strh	r2, [r3, #0]
}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20001008 	.word	0x20001008

0800b618 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>:
/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
    if(EventModel::defaultEventBus)
 800b618:	4b08      	ldr	r3, [pc, #32]	; (800b63c <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x24>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	b13b      	cbz	r3, 800b62e <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x16>
        EventModel::defaultEventBus->send(*this);
 800b61e:	6819      	ldr	r1, [r3, #0]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800b620:	b410      	push	{r4}
 800b622:	4a07      	ldr	r2, [pc, #28]	; (800b640 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x28>)
        EventModel::defaultEventBus->send(*this);
 800b624:	680c      	ldr	r4, [r1, #0]
 800b626:	4294      	cmp	r4, r2
 800b628:	d102      	bne.n	800b630 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x18>
}
 800b62a:	bc10      	pop	{r4}
 800b62c:	4770      	bx	lr
 800b62e:	4770      	bx	lr
        EventModel::defaultEventBus->send(*this);
 800b630:	e890 0006 	ldmia.w	r0, {r1, r2}
 800b634:	4618      	mov	r0, r3
 800b636:	4623      	mov	r3, r4
}
 800b638:	bc10      	pop	{r4}
        EventModel::defaultEventBus->send(*this);
 800b63a:	4718      	bx	r3
 800b63c:	2000164c 	.word	0x2000164c
 800b640:	0800b061 	.word	0x0800b061

0800b644 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800b644:	b538      	push	{r3, r4, r5, lr}
    this->source = source;
 800b646:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800b648:	8042      	strh	r2, [r0, #2]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800b64a:	4604      	mov	r4, r0
 800b64c:	461d      	mov	r5, r3
    this->timestamp = system_timer_current_time();
 800b64e:	f7ff fcd5 	bl	800affc <_ZN5codal25system_timer_current_timeEv>
 800b652:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 800b654:	b115      	cbz	r5, 800b65c <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x18>
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff ffde 	bl	800b618 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
}
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd38      	pop	{r3, r4, r5, pc}

0800b660 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800b666:	4604      	mov	r4, r0
      this->source = source;
 800b668:	8001      	strh	r1, [r0, #0]
      this->value = value;
 800b66a:	8042      	strh	r2, [r0, #2]
      this->timestamp = currentTimeUs;
 800b66c:	6043      	str	r3, [r0, #4]
      if(mode != CREATE_ONLY)
 800b66e:	b10d      	cbz	r5, 800b674 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
 800b670:	f7ff ffd2 	bl	800b618 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
  }
 800b674:	4620      	mov	r0, r4
 800b676:	bd38      	pop	{r3, r4, r5, pc}

0800b678 <_ZN5codal5EventC1Ev>:
    this->source = 0;
 800b678:	2300      	movs	r3, #0
Event::Event()
 800b67a:	b510      	push	{r4, lr}
    this->source = 0;
 800b67c:	6003      	str	r3, [r0, #0]
Event::Event()
 800b67e:	4604      	mov	r4, r0
    this->timestamp = system_timer_current_time();
 800b680:	f7ff fcbc 	bl	800affc <_ZN5codal25system_timer_current_timeEv>
 800b684:	6060      	str	r0, [r4, #4]
}
 800b686:	4620      	mov	r0, r4
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	bf00      	nop

0800b68c <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800b68c:	b570      	push	{r4, r5, r6, lr}
    this->source = 0;
 800b68e:	2600      	movs	r6, #0
EventQueueItem::EventQueueItem(Event evt)
 800b690:	b082      	sub	sp, #8
 800b692:	4604      	mov	r4, r0
 800b694:	466d      	mov	r5, sp
    this->source = 0;
 800b696:	6006      	str	r6, [r0, #0]
EventQueueItem::EventQueueItem(Event evt)
 800b698:	e885 0006 	stmia.w	r5, {r1, r2}
    this->timestamp = system_timer_current_time();
 800b69c:	f7ff fcae 	bl	800affc <_ZN5codal25system_timer_current_timeEv>
{
    this->evt = evt;
 800b6a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b6a4:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
}
 800b6a8:	4620      	mov	r0, r4
    this->next = NULL;
 800b6aa:	60a6      	str	r6, [r4, #8]
}
 800b6ac:	b002      	add	sp, #8
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}

0800b6b0 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800b6b0:	b410      	push	{r4}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	466b      	mov	r3, sp
    invoke(object, method, e);
 800b6b6:	6944      	ldr	r4, [r0, #20]
{
 800b6b8:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800b6bc:	46a4      	mov	ip, r4
 800b6be:	cb0c      	ldmia	r3, {r2, r3}
 800b6c0:	1d01      	adds	r1, r0, #4
 800b6c2:	6800      	ldr	r0, [r0, #0]
}
 800b6c4:	b003      	add	sp, #12
 800b6c6:	bc10      	pop	{r4}
    invoke(object, method, e);
 800b6c8:	4760      	bx	ip
 800b6ca:	bf00      	nop

0800b6cc <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800b6cc:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800b6ce:	6802      	ldr	r2, [r0, #0]
 800b6d0:	680b      	ldr	r3, [r1, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d001      	beq.n	800b6da <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800b6d6:	2000      	movs	r0, #0
}
 800b6d8:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800b6da:	3104      	adds	r1, #4
 800b6dc:	2210      	movs	r2, #16
 800b6de:	3004      	adds	r0, #4
 800b6e0:	f7f8 fa76 	bl	8003bd0 <memcmp>
 800b6e4:	fab0 f080 	clz	r0, r0
 800b6e8:	0940      	lsrs	r0, r0, #5
}
 800b6ea:	bd08      	pop	{r3, pc}

0800b6ec <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	4770      	bx	lr

0800b6f4 <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	4770      	bx	lr

0800b6f8 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	4615      	mov	r5, r2
 800b700:	f000 fbf0 	bl	800bee4 <_ZN5codal3I2CC1ERNS_3PinES2_>
 800b704:	4b02      	ldr	r3, [pc, #8]	; (800b710 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800b706:	e9c4 6501 	strd	r6, r5, [r4, #4]
 800b70a:	6023      	str	r3, [r4, #0]
        }
 800b70c:	4620      	mov	r0, r4
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	0800c96c 	.word	0x0800c96c

0800b714 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
    if(status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE))
        return ((TimedInterruptIn *)pin)->read();

    return ((DigitalIn *)pin)->read();
#endif  //  TODO
}
 800b714:	2001      	movs	r0, #1
 800b716:	4770      	bx	lr

0800b718 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800b718:	7903      	ldrb	r3, [r0, #4]
 800b71a:	07db      	lsls	r3, r3, #31
 800b71c:	d506      	bpl.n	800b72c <_ZN5codal3_cm3Pin14setAnalogValueEi+0x14>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 800b71e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 800b722:	bf2c      	ite	cs
 800b724:	f46f 707a 	mvncs.w	r0, #1000	; 0x3e8
 800b728:	2000      	movcc	r0, #0
 800b72a:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800b72c:	4800      	ldr	r0, [pc, #0]	; (800b730 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>)
}
 800b72e:	4770      	bx	lr
 800b730:	fffffc16 	.word	0xfffffc16

0800b734 <_ZN5codal3_cm3Pin13setServoValueEiii>:
  *         if the given pin does not have analog capability.
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
 800b734:	7900      	ldrb	r0, [r0, #4]
 800b736:	f010 0f02 	tst.w	r0, #2
 800b73a:	d00c      	beq.n	800b756 <_ZN5codal3_cm3Pin13setServoValueEiii+0x22>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
 800b73c:	2900      	cmp	r1, #0
 800b73e:	db07      	blt.n	800b750 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800b740:	2a00      	cmp	r2, #0
 800b742:	dd05      	ble.n	800b750 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800b744:	2b00      	cmp	r3, #0
    value = value * 1000;

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
 800b746:	bfd4      	ite	le
 800b748:	f46f 707a 	mvnle.w	r0, #1000	; 0x3e8
 800b74c:	2000      	movgt	r0, #0
 800b74e:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 800b750:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b754:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800b756:	4801      	ldr	r0, [pc, #4]	; (800b75c <_ZN5codal3_cm3Pin13setServoValueEiii+0x28>)
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	fffffc16 	.word	0xfffffc16

0800b760 <_ZN5codal3_cm3Pin14getAnalogValueEv>:
    }

    //perform a read!
    return (((AnalogIn *)pin)->read_u16() >> 6);
#endif  //  TODO
}
 800b760:	20e1      	movs	r0, #225	; 0xe1
 800b762:	4770      	bx	lr

0800b764 <_ZN5codal3_cm3Pin7isInputEv>:
  *
  * @return 1 if pin is an analog or digital input, 0 otherwise.
  */
int Pin::isInput()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800b764:	8980      	ldrh	r0, [r0, #12]
 800b766:	f000 0005 	and.w	r0, r0, #5
}
 800b76a:	3000      	adds	r0, #0
 800b76c:	bf18      	it	ne
 800b76e:	2001      	movne	r0, #1
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop

0800b774 <_ZN5codal3_cm3Pin8isOutputEv>:
  *
  * @return 1 if pin is an analog or digital output, 0 otherwise.
  */
int Pin::isOutput()
{
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800b774:	8980      	ldrh	r0, [r0, #12]
 800b776:	f000 000a 	and.w	r0, r0, #10
}
 800b77a:	3000      	adds	r0, #0
 800b77c:	bf18      	it	ne
 800b77e:	2001      	movne	r0, #1
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop

0800b784 <_ZN5codal3_cm3Pin9isDigitalEv>:
  *
  * @return 1 if pin is digital, 0 otherwise.
  */
int Pin::isDigital()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800b784:	8980      	ldrh	r0, [r0, #12]
}
 800b786:	f010 0003 	ands.w	r0, r0, #3
 800b78a:	bf18      	it	ne
 800b78c:	2001      	movne	r0, #1
 800b78e:	4770      	bx	lr

0800b790 <_ZN5codal3_cm3Pin8isAnalogEv>:
  *
  * @return 1 if pin is analog, 0 otherwise.
  */
int Pin::isAnalog()
{
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800b790:	8980      	ldrh	r0, [r0, #12]
 800b792:	f000 000c 	and.w	r0, r0, #12
}
 800b796:	3000      	adds	r0, #0
 800b798:	bf18      	it	ne
 800b79a:	2001      	movne	r0, #1
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop

0800b7a0 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 800b7a0:	4800      	ldr	r0, [pc, #0]	; (800b7a4 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 800b7a2:	4770      	bx	lr
 800b7a4:	fffffc16 	.word	0xfffffc16

0800b7a8 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 800b7a8:	4800      	ldr	r0, [pc, #0]	; (800b7ac <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 800b7aa:	4770      	bx	lr
 800b7ac:	fffffc16 	.word	0xfffffc16

0800b7b0 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800b7b0:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop

0800b7b8 <_ZN5codal3_cm3Pin15setDigitalValueEi>:
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800b7b8:	7903      	ldrb	r3, [r0, #4]
 800b7ba:	07db      	lsls	r3, r3, #31
 800b7bc:	d51d      	bpl.n	800b7fa <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
    if (value < 0 || value > 1)
 800b7be:	2901      	cmp	r1, #1
 800b7c0:	d818      	bhi.n	800b7f4 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x3c>
{
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	460c      	mov	r4, r1
	rcc_periph_clock_enable(RCC_GPIOC);
 800b7c6:	f44f 7041 	mov.w	r0, #772	; 0x304
 800b7ca:	f7f4 ffd7 	bl	800077c <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	480b      	ldr	r0, [pc, #44]	; (800b800 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x48>)
 800b7d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f7f5 f8e6 	bl	80009a8 <gpio_set_mode>
        gpio_set(GPIOC, GPIO13);
 800b7dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7e0:	4807      	ldr	r0, [pc, #28]	; (800b800 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x48>)
    if (value) {
 800b7e2:	b91c      	cbnz	r4, 800b7ec <_ZN5codal3_cm3Pin15setDigitalValueEi+0x34>
	    gpio_clear(GPIOC, GPIO13);
 800b7e4:	f7f4 ffb6 	bl	8000754 <gpio_clear>
    return DEVICE_OK;
 800b7e8:	4620      	mov	r0, r4
}
 800b7ea:	bd10      	pop	{r4, pc}
        gpio_set(GPIOC, GPIO13);
 800b7ec:	f7f4 ffb0 	bl	8000750 <gpio_set>
 800b7f0:	2000      	movs	r0, #0
}
 800b7f2:	bd10      	pop	{r4, pc}
        return DEVICE_INVALID_PARAMETER;
 800b7f4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b7f8:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800b7fa:	4802      	ldr	r0, [pc, #8]	; (800b804 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4c>)
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	40011000 	.word	0x40011000
 800b804:	fffffc16 	.word	0xfffffc16

0800b808 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
{
 800b808:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 800b80a:	6803      	ldr	r3, [r0, #0]
 800b80c:	4a05      	ldr	r2, [pc, #20]	; (800b824 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x1c>)
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	4293      	cmp	r3, r2
 800b812:	d101      	bne.n	800b818 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x10>
 800b814:	4804      	ldr	r0, [pc, #16]	; (800b828 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x20>)
}
 800b816:	bd08      	pop	{r3, pc}
    return getAnalogPeriodUs()/1000;
 800b818:	4798      	blx	r3
 800b81a:	4b04      	ldr	r3, [pc, #16]	; (800b82c <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x24>)
 800b81c:	fba3 3000 	umull	r3, r0, r3, r0
 800b820:	0980      	lsrs	r0, r0, #6
}
 800b822:	bd08      	pop	{r3, pc}
 800b824:	0800b7a9 	.word	0x0800b7a9
 800b828:	00418936 	.word	0x00418936
 800b82c:	10624dd3 	.word	0x10624dd3

0800b830 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
    setPull(pull);
 800b830:	6803      	ldr	r3, [r0, #0]
{
 800b832:	b570      	push	{r4, r5, r6, lr}
    setPull(pull);
 800b834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b836:	4d0a      	ldr	r5, [pc, #40]	; (800b860 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x30>)
{
 800b838:	4604      	mov	r4, r0
 800b83a:	42aa      	cmp	r2, r5
 800b83c:	d106      	bne.n	800b84c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x1c>
    return getDigitalValue();
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4a08      	ldr	r2, [pc, #32]	; (800b864 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    pullMode = pull;
 800b842:	60a1      	str	r1, [r4, #8]
 800b844:	4293      	cmp	r3, r2
 800b846:	d107      	bne.n	800b858 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x28>
}
 800b848:	2001      	movs	r0, #1
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
    setPull(pull);
 800b84c:	4790      	blx	r2
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	4a04      	ldr	r2, [pc, #16]	; (800b864 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    return getDigitalValue();
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4293      	cmp	r3, r2
 800b856:	d0f7      	beq.n	800b848 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x18>
 800b858:	4620      	mov	r0, r4
}
 800b85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return getDigitalValue();
 800b85e:	4718      	bx	r3
 800b860:	0800b7b1 	.word	0x0800b7b1
 800b864:	0800b715 	.word	0x0800b715

0800b868 <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800b868:	b508      	push	{r3, lr}
    switch(eventType)
 800b86a:	2903      	cmp	r1, #3
 800b86c:	d817      	bhi.n	800b89e <_ZN5codal3_cm3Pin7eventOnEi+0x36>
 800b86e:	e8df f001 	tbb	[pc, r1]
 800b872:	070a      	.short	0x070a
 800b874:	0207      	.short	0x0207
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 800b876:	6803      	ldr	r3, [r0, #0]
 800b878:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <_ZN5codal3_cm3Pin7eventOnEi+0x3c>)
 800b87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d10b      	bne.n	800b898 <_ZN5codal3_cm3Pin7eventOnEi+0x30>
 800b880:	2100      	movs	r1, #0
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 800b882:	4608      	mov	r0, r1
 800b884:	bd08      	pop	{r3, pc}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800b886:	8983      	ldrh	r3, [r0, #12]
 800b888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f8      	beq.n	800b882 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
    this->status = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	8183      	strh	r3, [r0, #12]
}
 800b894:	4608      	mov	r0, r1
 800b896:	bd08      	pop	{r3, pc}
            isTouched();
 800b898:	4798      	blx	r3
 800b89a:	2100      	movs	r1, #0
 800b89c:	e7f1      	b.n	800b882 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
            return DEVICE_INVALID_PARAMETER;
 800b89e:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 800b8a2:	e7ee      	b.n	800b882 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
 800b8a4:	0800b7a1 	.word	0x0800b7a1

0800b8a8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>:
        ret = setAnalogValue(0);
 800b8a8:	6802      	ldr	r2, [r0, #0]
 800b8aa:	4906      	ldr	r1, [pc, #24]	; (800b8c4 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x1c>)
 800b8ac:	68d2      	ldr	r2, [r2, #12]
 800b8ae:	428a      	cmp	r2, r1
 800b8b0:	d106      	bne.n	800b8c0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x18>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800b8b2:	7903      	ldrb	r3, [r0, #4]
    return 0;
 800b8b4:	4804      	ldr	r0, [pc, #16]	; (800b8c8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x20>)
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800b8b6:	f013 0f01 	tst.w	r3, #1
    return 0;
 800b8ba:	bf18      	it	ne
 800b8bc:	2000      	movne	r0, #0
}
 800b8be:	4770      	bx	lr
        ret = setAnalogValue(0);
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4710      	bx	r2
 800b8c4:	0800b719 	.word	0x0800b719
 800b8c8:	fffffc16 	.word	0xfffffc16

0800b8cc <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800b8cc:	8983      	ldrh	r3, [r0, #12]
 800b8ce:	071b      	lsls	r3, r3, #28
 800b8d0:	d501      	bpl.n	800b8d6 <_ZN5codal3_cm3Pin15setAnalogPeriodEi+0xa>
}
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	4770      	bx	lr
 800b8d6:	f7ff bfe7 	b.w	800b8a8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800b8da:	bf00      	nop

0800b8dc <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>:
Pin::Pin(
 800b8dc:	b430      	push	{r4, r5}
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800b8de:	2500      	movs	r5, #0
            this->id = id;
 800b8e0:	81c1      	strh	r1, [r0, #14]
    rcc(0), port(0), pin() {
 800b8e2:	4905      	ldr	r1, [pc, #20]	; (800b8f8 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x1c>)
            this->status = 0;
 800b8e4:	8185      	strh	r5, [r0, #12]
 800b8e6:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800b8ea:	8385      	strh	r5, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 800b8ec:	6085      	str	r5, [r0, #8]
            this->name = name;
 800b8ee:	7402      	strb	r2, [r0, #16]
            this->capability = capability;
 800b8f0:	7103      	strb	r3, [r0, #4]
    rcc(0), port(0), pin() {
 800b8f2:	6001      	str	r1, [r0, #0]
}
 800b8f4:	bc30      	pop	{r4, r5}
 800b8f6:	4770      	bx	lr
 800b8f8:	0800c998 	.word	0x0800c998

0800b8fc <_ZN5codal3_cm3Pin5setupEhh>:
) {
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	460d      	mov	r5, r1
 800b902:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800b904:	8a80      	ldrh	r0, [r0, #20]
 800b906:	f7f4 ff39 	bl	800077c <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800b90a:	4632      	mov	r2, r6
 800b90c:	4629      	mov	r1, r5
 800b90e:	8ba3      	ldrh	r3, [r4, #28]
 800b910:	69a0      	ldr	r0, [r4, #24]
}
 800b912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800b916:	f7f5 b847 	b.w	80009a8 <gpio_set_mode>
 800b91a:	bf00      	nop

0800b91c <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
 800b91c:	2000      	movs	r0, #0
 800b91e:	4770      	bx	lr

0800b920 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800b920:	8983      	ldrh	r3, [r0, #12]
 800b922:	071b      	lsls	r3, r3, #28
 800b924:	d501      	bpl.n	800b92a <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xa>
}
 800b926:	2000      	movs	r0, #0
 800b928:	4770      	bx	lr
 800b92a:	f7ff bfbd 	b.w	800b8a8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800b92e:	bf00      	nop

0800b930 <_ZN5codal3_cm3SPI12setFrequencyEm>:
            debug_println(""); debug_flush();
        }

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
            needsInit = true;
 800b930:	2301      	movs	r3, #1
            freq = frequency;
 800b932:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800b934:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800b938:	2000      	movs	r0, #0
 800b93a:	4770      	bx	lr

0800b93c <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800b93c:	2300      	movs	r3, #0
            txCh = data;
 800b93e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            rxCh = 0;
 800b942:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800b946:	4618      	mov	r0, r3
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop

0800b94c <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800b94c:	2000      	movs	r0, #0
 800b94e:	4770      	bx	lr

0800b950 <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800b950:	b508      	push	{r3, lr}
            needsInit = true;
 800b952:	2301      	movs	r3, #1
            CODAL_ASSERT(bits == 8);
 800b954:	2a08      	cmp	r2, #8
            needsInit = true;
 800b956:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800b95a:	d003      	beq.n	800b964 <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800b95c:	f240 308d 	movw	r0, #909	; 0x38d
 800b960:	f7f4 fdcc 	bl	80004fc <target_panic>
        }
 800b964:	2000      	movs	r0, #0
 800b966:	bd08      	pop	{r3, pc}

0800b968 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800b968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            auto pin = p->name;
 800b96c:	7c05      	ldrb	r5, [r0, #16]
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800b96e:	4607      	mov	r7, r0
 800b970:	4688      	mov	r8, r1
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800b972:	4628      	mov	r0, r5
 800b974:	4611      	mov	r1, r2
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800b976:	4616      	mov	r6, r2
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800b978:	f000 f966 	bl	800bc48 <pinmap_peripheral>
 800b97c:	4604      	mov	r4, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800b97e:	3001      	adds	r0, #1
 800b980:	d016      	beq.n	800b9b0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
            auto mode = pinmap_mode(pin, map);
 800b982:	4631      	mov	r1, r6
 800b984:	4628      	mov	r0, r5
 800b986:	f000 f97d 	bl	800bc84 <pinmap_mode>
            auto cnf = pinmap_cnf(pin, map);
 800b98a:	4631      	mov	r1, r6
            auto mode = pinmap_mode(pin, map);
 800b98c:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800b98e:	4628      	mov	r0, r5
 800b990:	f000 f994 	bl	800bcbc <pinmap_cnf>
            p->setup(mode, cnf);
 800b994:	4649      	mov	r1, r9
 800b996:	4602      	mov	r2, r0
 800b998:	4638      	mov	r0, r7
 800b99a:	f7ff ffaf 	bl	800b8fc <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800b99e:	f1b8 0f00 	cmp.w	r8, #0
 800b9a2:	d005      	beq.n	800b9b0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800b9a4:	4544      	cmp	r4, r8
 800b9a6:	d003      	beq.n	800b9b0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800b9a8:	f240 308d 	movw	r0, #909	; 0x38d
 800b9ac:	f7f4 fda6 	bl	80004fc <target_panic>
        }
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b6:	bf00      	nop

0800b9b8 <_ZN5codal3_cm3SPI4initEv.part.1>:
        void SPI::init() {
 800b9b8:	b510      	push	{r4, lr}
            needsInit = false;
 800b9ba:	2100      	movs	r1, #0
        void SPI::init() {
 800b9bc:	4604      	mov	r4, r0
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 800b9be:	68c0      	ldr	r0, [r0, #12]
            needsInit = false;
 800b9c0:	f884 1020 	strb.w	r1, [r4, #32]
            if (!p) { return 0; }
 800b9c4:	b110      	cbz	r0, 800b9cc <_ZN5codal3_cm3SPI4initEv.part.1+0x14>
 800b9c6:	4a0e      	ldr	r2, [pc, #56]	; (800ba00 <_ZN5codal3_cm3SPI4initEv.part.1+0x48>)
 800b9c8:	f7ff ffce 	bl	800b968 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 800b9cc:	68a0      	ldr	r0, [r4, #8]
            if (!p) { return 0; }
 800b9ce:	b118      	cbz	r0, 800b9d8 <_ZN5codal3_cm3SPI4initEv.part.1+0x20>
 800b9d0:	4a0c      	ldr	r2, [pc, #48]	; (800ba04 <_ZN5codal3_cm3SPI4initEv.part.1+0x4c>)
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	f7ff ffc8 	bl	800b968 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 800b9d8:	6860      	ldr	r0, [r4, #4]
            if (!p) { return 0; }
 800b9da:	b118      	cbz	r0, 800b9e4 <_ZN5codal3_cm3SPI4initEv.part.1+0x2c>
 800b9dc:	4a0a      	ldr	r2, [pc, #40]	; (800ba08 <_ZN5codal3_cm3SPI4initEv.part.1+0x50>)
 800b9de:	2100      	movs	r1, #0
 800b9e0:	f7ff ffc2 	bl	800b968 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 800b9e4:	6920      	ldr	r0, [r4, #16]
            if (!p) { return 0; }
 800b9e6:	b118      	cbz	r0, 800b9f0 <_ZN5codal3_cm3SPI4initEv.part.1+0x38>
 800b9e8:	4a08      	ldr	r2, [pc, #32]	; (800ba0c <_ZN5codal3_cm3SPI4initEv.part.1+0x54>)
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f7ff ffbc 	bl	800b968 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            LOG("SPI instance %p", instance);
 800b9f0:	4807      	ldr	r0, [pc, #28]	; (800ba10 <_ZN5codal3_cm3SPI4initEv.part.1+0x58>)
 800b9f2:	f7f8 fa69 	bl	8003ec8 <debug_println>
        }
 800b9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG("SPI instance %p", instance);
 800b9fa:	f7f8 b9e5 	b.w	8003dc8 <debug_flush>
 800b9fe:	bf00      	nop
 800ba00:	0800cbe4 	.word	0x0800cbe4
 800ba04:	0800cb0c 	.word	0x0800cb0c
 800ba08:	0800cb54 	.word	0x0800cb54
 800ba0c:	0800cb9c 	.word	0x0800cb9c
 800ba10:	0800c9e4 	.word	0x0800c9e4

0800ba14 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if (!needsInit) { return; }
 800ba16:	f890 3020 	ldrb.w	r3, [r0, #32]
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800ba20:	4615      	mov	r5, r2
            if (!needsInit) { return; }
 800ba22:	b963      	cbnz	r3, 800ba3e <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x2a>
            int res = HAL_OK;
            init();
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
            this->doneHandlerArg = arg;
 800ba24:	e9c4 7606 	strd	r7, r6, [r4, #24]
            if (txSize && rxSize) {
 800ba28:	b13d      	cbz	r5, 800ba3a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	b12b      	cbz	r3, 800ba3a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800ba2e:	429d      	cmp	r5, r3
 800ba30:	d003      	beq.n	800ba3a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800ba32:	f240 308d 	movw	r0, #909	; 0x38d
 800ba36:	f7f4 fd61 	bl	80004fc <target_panic>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba3e:	f7ff ffbb 	bl	800b9b8 <_ZN5codal3_cm3SPI4initEv.part.1>
 800ba42:	e7ef      	b.n	800ba24 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x10>

0800ba44 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>:
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	4616      	mov	r6, r2
 800ba48:	461d      	mov	r5, r3
            this->nss = NULL;
 800ba4a:	2300      	movs	r3, #0
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4a0f      	ldr	r2, [pc, #60]	; (800ba90 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x4c>)
            this->miso = &miso;
 800ba52:	e9c0 1601 	strd	r1, r6, [r0, #4]
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800ba56:	6002      	str	r2, [r0, #0]
            this->nss = NULL;
 800ba58:	6103      	str	r3, [r0, #16]
            this->sclk = &sclk;
 800ba5a:	60c5      	str	r5, [r0, #12]
            debug_print("*** codal spi mosi "); debug_print(mosi.name); 
 800ba5c:	480d      	ldr	r0, [pc, #52]	; (800ba94 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x50>)
 800ba5e:	f7f8 fa2d 	bl	8003ebc <debug_print>
 800ba62:	7c38      	ldrb	r0, [r7, #16]
 800ba64:	f7f8 fa12 	bl	8003e8c <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 800ba68:	480b      	ldr	r0, [pc, #44]	; (800ba98 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x54>)
 800ba6a:	f7f8 fa27 	bl	8003ebc <debug_print>
 800ba6e:	7c30      	ldrb	r0, [r6, #16]
 800ba70:	f7f8 fa0c 	bl	8003e8c <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 800ba74:	4809      	ldr	r0, [pc, #36]	; (800ba9c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x58>)
 800ba76:	f7f8 fa21 	bl	8003ebc <debug_print>
 800ba7a:	7c28      	ldrb	r0, [r5, #16]
 800ba7c:	f7f8 fa06 	bl	8003e8c <_Z11debug_printi>
            debug_println(""); debug_flush();
 800ba80:	4807      	ldr	r0, [pc, #28]	; (800baa0 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x5c>)
 800ba82:	f7f8 fa21 	bl	8003ec8 <debug_println>
 800ba86:	f7f8 f99f 	bl	8003dc8 <debug_flush>
        }
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	0800ca20 	.word	0x0800ca20
 800ba94:	0800c9f4 	.word	0x0800c9f4
 800ba98:	0800ca08 	.word	0x0800ca08
 800ba9c:	0800ca10 	.word	0x0800ca10
 800baa0:	0800c88c 	.word	0x0800c88c

0800baa4 <_ZN5codal3_cm5Timer9triggerInEm>:
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 800baa4:	f890 3020 	ldrb.w	r3, [r0, #32]
 800baa8:	b113      	cbz	r3, 800bab0 <_ZN5codal3_cm5Timer9triggerInEm+0xc>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 800baaa:	4608      	mov	r0, r1
 800baac:	f7f8 bb4a 	b.w	8004144 <platform_set_alarm>
                trigger_period = t;
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <_ZN5codal3_cm5Timer9triggerInEm+0x18>)
                debug_println("triggerIn b4 init!");
 800bab2:	4803      	ldr	r0, [pc, #12]	; (800bac0 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
                trigger_period = t;
 800bab4:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 800bab6:	f7f8 ba07 	b.w	8003ec8 <debug_println>
 800baba:	bf00      	nop
 800babc:	20001654 	.word	0x20001654
 800bac0:	0800ca48 	.word	0x0800ca48

0800bac4 <_ZN5codal3_cm14alarm_callbackEv>:
        void alarm_callback() {
 800bac4:	b510      	push	{r4, lr}
            sem_ISR_signal(timer_semaphore); 
 800bac6:	4c07      	ldr	r4, [pc, #28]	; (800bae4 <_ZN5codal3_cm14alarm_callbackEv+0x20>)
 800bac8:	7820      	ldrb	r0, [r4, #0]
 800baca:	f7f6 fb55 	bl	8002178 <os_task_waiting_this_semaphore>
 800bace:	b120      	cbz	r0, 800bada <_ZN5codal3_cm14alarm_callbackEv+0x16>
 800bad0:	7820      	ldrb	r0, [r4, #0]
        }
 800bad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            sem_ISR_signal(timer_semaphore); 
 800bad6:	f7f6 bb1f 	b.w	8002118 <os_task_release_waiting_task>
 800bada:	7820      	ldrb	r0, [r4, #0]
        }
 800badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            sem_ISR_signal(timer_semaphore); 
 800bae0:	f7f6 ba50 	b.w	8001f84 <os_sem_increment>
 800bae4:	20001667 	.word	0x20001667

0800bae8 <_ZN5codal3_cmL10timer_taskEv>:

        extern "C" void wait_us(uint32_t us) {
            target_wait_us(us);
        }

        static void timer_task(void) {
 800bae8:	b570      	push	{r4, r5, r6, lr}
            //  cocoOS task that runs forever waiting for the timer semaphore to be signalled by the alarm and tick interrupts.
            task_open();  //  Start of the task. Must be matched with task_close().  
 800baea:	4c16      	ldr	r4, [pc, #88]	; (800bb44 <_ZN5codal3_cmL10timer_taskEv+0x5c>)
 800baec:	7820      	ldrb	r0, [r4, #0]
 800baee:	f7f6 fc29 	bl	8002344 <os_task_internal_state_get>
 800baf2:	b1e8      	cbz	r0, 800bb30 <_ZN5codal3_cmL10timer_taskEv+0x48>
 800baf4:	f644 63b8 	movw	r3, #20152	; 0x4eb8
 800baf8:	4298      	cmp	r0, r3
 800bafa:	d118      	bne.n	800bb2e <_ZN5codal3_cmL10timer_taskEv+0x46>
 800bafc:	4d12      	ldr	r5, [pc, #72]	; (800bb48 <_ZN5codal3_cmL10timer_taskEv+0x60>)
            for (;;) {
                sem_wait(timer_semaphore);           //  Wait for the semaphore to be signalled.
                if (!Timer::instance) { continue; }  //  No timer to trigger, quit.
 800bafe:	4e13      	ldr	r6, [pc, #76]	; (800bb4c <_ZN5codal3_cmL10timer_taskEv+0x64>)
 800bb00:	6833      	ldr	r3, [r6, #0]
 800bb02:	b12b      	cbz	r3, 800bb10 <_ZN5codal3_cmL10timer_taskEv+0x28>
                debug_print("A>> "); ////
 800bb04:	4812      	ldr	r0, [pc, #72]	; (800bb50 <_ZN5codal3_cmL10timer_taskEv+0x68>)
 800bb06:	f7f8 f9d9 	bl	8003ebc <debug_print>
                Timer::instance->trigger();          //  Trigger the CODAL Scheduler.
 800bb0a:	6830      	ldr	r0, [r6, #0]
 800bb0c:	f7ff fa12 	bl	800af34 <_ZN5codal5Timer7triggerEv>
                sem_wait(timer_semaphore);           //  Wait for the semaphore to be signalled.
 800bb10:	7828      	ldrb	r0, [r5, #0]
 800bb12:	f7f6 fa23 	bl	8001f5c <os_sem_larger_than_zero>
 800bb16:	b988      	cbnz	r0, 800bb3c <_ZN5codal3_cmL10timer_taskEv+0x54>
 800bb18:	7829      	ldrb	r1, [r5, #0]
 800bb1a:	7820      	ldrb	r0, [r4, #0]
 800bb1c:	f7f6 fb58 	bl	80021d0 <os_task_wait_sem_set>
 800bb20:	f644 61b8 	movw	r1, #20152	; 0x4eb8
 800bb24:	7820      	ldrb	r0, [r4, #0]
 800bb26:	f7f6 fc17 	bl	8002358 <os_task_internal_state_set>
 800bb2a:	23ff      	movs	r3, #255	; 0xff
 800bb2c:	7023      	strb	r3, [r4, #0]
            }
            task_close();  //  End of the task. Should not come here.
        }
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	4d05      	ldr	r5, [pc, #20]	; (800bb48 <_ZN5codal3_cmL10timer_taskEv+0x60>)
                sem_wait(timer_semaphore);           //  Wait for the semaphore to be signalled.
 800bb32:	7828      	ldrb	r0, [r5, #0]
 800bb34:	f7f6 fa12 	bl	8001f5c <os_sem_larger_than_zero>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d0ed      	beq.n	800bb18 <_ZN5codal3_cmL10timer_taskEv+0x30>
 800bb3c:	7828      	ldrb	r0, [r5, #0]
 800bb3e:	f7f6 fa17 	bl	8001f70 <os_sem_decrement>
 800bb42:	e7dc      	b.n	800bafe <_ZN5codal3_cmL10timer_taskEv+0x16>
 800bb44:	20000c54 	.word	0x20000c54
 800bb48:	20001667 	.word	0x20001667
 800bb4c:	20001650 	.word	0x20001650
 800bb50:	0800ca5c 	.word	0x0800ca5c

0800bb54 <_ZN5codal3_cm5Timer11syncRequestEv>:
            if (!initialised) {
 800bb54:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bb58:	b1d3      	cbz	r3, 800bb90 <_ZN5codal3_cm5Timer11syncRequestEv+0x3c>
        void Timer::syncRequest() {
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	4604      	mov	r4, r0
            target_disable_irq();
 800bb60:	f7f4 fcb6 	bl	80004d0 <target_disable_irq>
            volatile uint32_t curr = millis();
 800bb64:	f7f8 fb38 	bl	80041d8 <millis>
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800bb68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
            volatile uint32_t curr = millis();
 800bb6c:	9000      	str	r0, [sp, #0]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	69e2      	ldr	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800bb72:	4620      	mov	r0, r4
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800bb74:	1a9b      	subs	r3, r3, r2
 800bb76:	9301      	str	r3, [sp, #4]
            this->prev = curr;
 800bb78:	9a00      	ldr	r2, [sp, #0]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800bb7a:	9b01      	ldr	r3, [sp, #4]
            this->prev = curr;
 800bb7c:	61e2      	str	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800bb7e:	fb01 f103 	mul.w	r1, r1, r3
 800bb82:	f7ff f9c3 	bl	800af0c <_ZN5codal5Timer4syncEm>
        }
 800bb86:	b002      	add	sp, #8
 800bb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            target_enable_irq();            
 800bb8c:	f7f4 bc9e 	b.w	80004cc <target_enable_irq>
                debug_print("sync! ");  //  Warning: syncRequest called before init
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 800bb92:	f7f8 b993 	b.w	8003ebc <debug_print>
 800bb96:	bf00      	nop
 800bb98:	0800ca34 	.word	0x0800ca34

0800bb9c <_ZN5codal3_cm13tick_callbackEv>:
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop

0800bba0 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 800bba0:	b510      	push	{r4, lr}
 800bba2:	4604      	mov	r4, r0
 800bba4:	f7ff f93e 	bl	800ae24 <_ZN5codal5TimerC1Ev>
            initialised = false;
 800bba8:	2300      	movs	r3, #0
        Timer::Timer() : codal::Timer() {
 800bbaa:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <_ZN5codal3_cm5TimerC1Ev+0x20>)
            instance = this;
 800bbac:	4905      	ldr	r1, [pc, #20]	; (800bbc4 <_ZN5codal3_cm5TimerC1Ev+0x24>)
            trigger_period = 0;
 800bbae:	4a06      	ldr	r2, [pc, #24]	; (800bbc8 <_ZN5codal3_cm5TimerC1Ev+0x28>)
        Timer::Timer() : codal::Timer() {
 800bbb0:	6020      	str	r0, [r4, #0]
            initialised = false;
 800bbb2:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 800bbb6:	600c      	str	r4, [r1, #0]
            prev = 0;
 800bbb8:	61e3      	str	r3, [r4, #28]
        }
 800bbba:	4620      	mov	r0, r4
            trigger_period = 0;
 800bbbc:	6013      	str	r3, [r2, #0]
        }
 800bbbe:	bd10      	pop	{r4, pc}
 800bbc0:	0800ca6c 	.word	0x0800ca6c
 800bbc4:	20001650 	.word	0x20001650
 800bbc8:	20001654 	.word	0x20001654

0800bbcc <_ZN5codal3_cm5Timer4initEv>:
        void Timer::init() {
 800bbcc:	b570      	push	{r4, r5, r6, lr}
            if (initialised) { return; }  //  If already initialised, quit.
 800bbce:	f890 5020 	ldrb.w	r5, [r0, #32]
        void Timer::init() {
 800bbd2:	b082      	sub	sp, #8
            if (initialised) { return; }  //  If already initialised, quit.
 800bbd4:	b10d      	cbz	r5, 800bbda <_ZN5codal3_cm5Timer4initEv+0xe>
        }
 800bbd6:	b002      	add	sp, #8
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
 800bbda:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 800bbdc:	4813      	ldr	r0, [pc, #76]	; (800bc2c <_ZN5codal3_cm5Timer4initEv+0x60>)
 800bbde:	f7f8 f973 	bl	8003ec8 <debug_println>
            initialised = true;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 800bbe8:	f7f8 faf6 	bl	80041d8 <millis>
 800bbec:	61e0      	str	r0, [r4, #28]
            timer_semaphore = sem_bin_create(0);  //  Binary Semaphore: Will wait until signalled.
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7f6 f99a 	bl	8001f28 <sem_bin_create>
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <_ZN5codal3_cm5Timer4initEv+0x64>)
            task_create(
 800bbf6:	490f      	ldr	r1, [pc, #60]	; (800bc34 <_ZN5codal3_cm5Timer4initEv+0x68>)
 800bbf8:	2214      	movs	r2, #20
 800bbfa:	e9cd 5500 	strd	r5, r5, [sp]
            timer_semaphore = sem_bin_create(0);  //  Binary Semaphore: Will wait until signalled.
 800bbfe:	7018      	strb	r0, [r3, #0]
            task_create(
 800bc00:	462b      	mov	r3, r5
 800bc02:	480d      	ldr	r0, [pc, #52]	; (800bc38 <_ZN5codal3_cm5Timer4initEv+0x6c>)
 800bc04:	f7f6 f9ee 	bl	8001fe4 <task_create>
            if (trigger_period > 0) {
 800bc08:	4e0c      	ldr	r6, [pc, #48]	; (800bc3c <_ZN5codal3_cm5Timer4initEv+0x70>)
            target_set_tick_callback(tick_callback);
 800bc0a:	480d      	ldr	r0, [pc, #52]	; (800bc40 <_ZN5codal3_cm5Timer4initEv+0x74>)
 800bc0c:	f7f4 fcda 	bl	80005c4 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 800bc10:	480c      	ldr	r0, [pc, #48]	; (800bc44 <_ZN5codal3_cm5Timer4initEv+0x78>)
 800bc12:	f7f4 fcdd 	bl	80005d0 <target_set_alarm_callback>
            if (trigger_period > 0) {
 800bc16:	6831      	ldr	r1, [r6, #0]
 800bc18:	2900      	cmp	r1, #0
 800bc1a:	d0dc      	beq.n	800bbd6 <_ZN5codal3_cm5Timer4initEv+0xa>
                triggerIn(trigger_period);
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4798      	blx	r3
                trigger_period = 0;
 800bc24:	6035      	str	r5, [r6, #0]
        }
 800bc26:	b002      	add	sp, #8
 800bc28:	bd70      	pop	{r4, r5, r6, pc}
 800bc2a:	bf00      	nop
 800bc2c:	0800ca3c 	.word	0x0800ca3c
 800bc30:	20001667 	.word	0x20001667
 800bc34:	20001658 	.word	0x20001658
 800bc38:	0800bae9 	.word	0x0800bae9
 800bc3c:	20001654 	.word	0x20001654
 800bc40:	0800bb9d 	.word	0x0800bb9d
 800bc44:	0800bac5 	.word	0x0800bac5

0800bc48 <pinmap_peripheral>:
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800bc48:	28ff      	cmp	r0, #255	; 0xff
 800bc4a:	d00e      	beq.n	800bc6a <pinmap_peripheral+0x22>
CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 800bc4c:	b508      	push	{r3, lr}
    return cnf;
}

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800bc4e:	780b      	ldrb	r3, [r1, #0]
 800bc50:	2bff      	cmp	r3, #255	; 0xff
 800bc52:	d104      	bne.n	800bc5e <pinmap_peripheral+0x16>
 800bc54:	e00c      	b.n	800bc70 <pinmap_peripheral+0x28>
 800bc56:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800bc5a:	2bff      	cmp	r3, #255	; 0xff
 800bc5c:	d008      	beq.n	800bc70 <pinmap_peripheral+0x28>
        if (map->pin == pin) { return map->peripheral; }
 800bc5e:	4298      	cmp	r0, r3
 800bc60:	d1f9      	bne.n	800bc56 <pinmap_peripheral+0xe>
 800bc62:	6848      	ldr	r0, [r1, #4]
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d003      	beq.n	800bc70 <pinmap_peripheral+0x28>
}
 800bc68:	bd08      	pop	{r3, pc}
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bc6e:	4770      	bx	lr
        { error("pinmap not found for peripheral"); }
 800bc70:	4803      	ldr	r0, [pc, #12]	; (800bc80 <pinmap_peripheral+0x38>)
 800bc72:	f7f8 f929 	bl	8003ec8 <debug_println>
 800bc76:	f7f8 f8a7 	bl	8003dc8 <debug_flush>
 800bc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bc7e:	bd08      	pop	{r3, pc}
 800bc80:	0800caec 	.word	0x0800caec

0800bc84 <pinmap_mode>:
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 800bc84:	28ff      	cmp	r0, #255	; 0xff
 800bc86:	d00e      	beq.n	800bca6 <pinmap_mode+0x22>
CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 800bc88:	b508      	push	{r3, lr}
    return CM_PERIPHERAL_NC;
}

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800bc8a:	780b      	ldrb	r3, [r1, #0]
 800bc8c:	2bff      	cmp	r3, #255	; 0xff
 800bc8e:	d104      	bne.n	800bc9a <pinmap_mode+0x16>
 800bc90:	e00a      	b.n	800bca8 <pinmap_mode+0x24>
 800bc92:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800bc96:	2bff      	cmp	r3, #255	; 0xff
 800bc98:	d006      	beq.n	800bca8 <pinmap_mode+0x24>
        if (map->pin == pin) { return map->mode; }
 800bc9a:	4298      	cmp	r0, r3
 800bc9c:	d1f9      	bne.n	800bc92 <pinmap_mode+0xe>
 800bc9e:	7a48      	ldrb	r0, [r1, #9]
    if (mode == CM_PINMODE_NC) // no mapping available
 800bca0:	28ff      	cmp	r0, #255	; 0xff
 800bca2:	d001      	beq.n	800bca8 <pinmap_mode+0x24>
}
 800bca4:	bd08      	pop	{r3, pc}
 800bca6:	4770      	bx	lr
        { error("pinmap not found for mode"); }
 800bca8:	4803      	ldr	r0, [pc, #12]	; (800bcb8 <pinmap_mode+0x34>)
 800bcaa:	f7f8 f90d 	bl	8003ec8 <debug_println>
 800bcae:	f7f8 f88b 	bl	8003dc8 <debug_flush>
 800bcb2:	20ff      	movs	r0, #255	; 0xff
}
 800bcb4:	bd08      	pop	{r3, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800cad0 	.word	0x0800cad0

0800bcbc <pinmap_cnf>:
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 800bcbc:	28ff      	cmp	r0, #255	; 0xff
 800bcbe:	d00e      	beq.n	800bcde <pinmap_cnf+0x22>
CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 800bcc0:	b508      	push	{r3, lr}
    return CM_PINMODE_NC;
}

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800bcc2:	780b      	ldrb	r3, [r1, #0]
 800bcc4:	2bff      	cmp	r3, #255	; 0xff
 800bcc6:	d104      	bne.n	800bcd2 <pinmap_cnf+0x16>
 800bcc8:	e00a      	b.n	800bce0 <pinmap_cnf+0x24>
 800bcca:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800bcce:	2bff      	cmp	r3, #255	; 0xff
 800bcd0:	d006      	beq.n	800bce0 <pinmap_cnf+0x24>
        if (map->pin == pin) { return map->cnf; }
 800bcd2:	4298      	cmp	r0, r3
 800bcd4:	d1f9      	bne.n	800bcca <pinmap_cnf+0xe>
 800bcd6:	7a88      	ldrb	r0, [r1, #10]
    if (cnf == CM_PINCNF_NC) // no mapping available
 800bcd8:	28ff      	cmp	r0, #255	; 0xff
 800bcda:	d001      	beq.n	800bce0 <pinmap_cnf+0x24>
}
 800bcdc:	bd08      	pop	{r3, pc}
 800bcde:	4770      	bx	lr
        { error("pinmap not found for cnf"); }
 800bce0:	4803      	ldr	r0, [pc, #12]	; (800bcf0 <pinmap_cnf+0x34>)
 800bce2:	f7f8 f8f1 	bl	8003ec8 <debug_println>
 800bce6:	f7f8 f86f 	bl	8003dc8 <debug_flush>
 800bcea:	20ff      	movs	r0, #255	; 0xff
}
 800bcec:	bd08      	pop	{r3, pc}
 800bcee:	bf00      	nop
 800bcf0:	0800cab4 	.word	0x0800cab4

0800bcf4 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800bcf4:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <_ZN5codal3I2C4stopEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800bcfc:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop

0800bd04 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800bd04:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop

0800bd0c <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800bd0c:	b530      	push	{r4, r5, lr}
      uint8_t command[2];
      command[0] = reg;
      command[1] = value;

      return write(address, command, 2);
 800bd0e:	2500      	movs	r5, #0
  {
 800bd10:	b085      	sub	sp, #20
      return write(address, command, 2);
 800bd12:	6804      	ldr	r4, [r0, #0]
 800bd14:	9500      	str	r5, [sp, #0]
      command[0] = reg;
 800bd16:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800bd1a:	f88d 300d 	strb.w	r3, [sp, #13]
      return write(address, command, 2);
 800bd1e:	6964      	ldr	r4, [r4, #20]
 800bd20:	2302      	movs	r3, #2
 800bd22:	aa03      	add	r2, sp, #12
 800bd24:	47a0      	blx	r4
}
 800bd26:	b005      	add	sp, #20
 800bd28:	bd30      	pop	{r4, r5, pc}
 800bd2a:	bf00      	nop

0800bd2c <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	6806      	ldr	r6, [r0, #0]
 800bd34:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800bd38:	4604      	mov	r4, r0
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	f88d 200f 	strb.w	r2, [sp, #15]
 800bd40:	6976      	ldr	r6, [r6, #20]
 800bd42:	4688      	mov	r8, r1
    int result;

    if (repeated)
 800bd44:	b185      	cbz	r5, 800bd68 <_ZN5codal3I2C12readRegisterEthPhib+0x3c>
        result = write(address, &reg, 1, true);
 800bd46:	2301      	movs	r3, #1
 800bd48:	f10d 020f 	add.w	r2, sp, #15
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	47b0      	blx	r6
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800bd50:	b938      	cbnz	r0, 800bd62 <_ZN5codal3I2C12readRegisterEthPhib+0x36>
        return result;

    result = read(address, data, length);
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	9000      	str	r0, [sp, #0]
 800bd56:	69dd      	ldr	r5, [r3, #28]
 800bd58:	463a      	mov	r2, r7
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd60:	47a8      	blx	r5
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800bd62:	b006      	add	sp, #24
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800bd6c:	aa06      	add	r2, sp, #24
      return write(address, &data, 1);
 800bd6e:	9500      	str	r5, [sp, #0]
 800bd70:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800bd74:	2301      	movs	r3, #1
 800bd76:	47b0      	blx	r6
 800bd78:	e7ea      	b.n	800bd50 <_ZN5codal3I2C12readRegisterEthPhib+0x24>
 800bd7a:	bf00      	nop

0800bd7c <_ZN5codal3I2C5writeEtPhib>:
  {
 800bd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
      if (data == NULL || len <= 0)
 800bd84:	2a00      	cmp	r2, #0
 800bd86:	d03c      	beq.n	800be02 <_ZN5codal3I2C5writeEtPhib+0x86>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dd3a      	ble.n	800be02 <_ZN5codal3I2C5writeEtPhib+0x86>
 800bd8c:	4688      	mov	r8, r1
      start();
 800bd8e:	6801      	ldr	r1, [r0, #0]
 800bd90:	461e      	mov	r6, r3
 800bd92:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800be08 <_ZN5codal3I2C5writeEtPhib+0x8c>
 800bd96:	684b      	ldr	r3, [r1, #4]
 800bd98:	4682      	mov	sl, r0
 800bd9a:	454b      	cmp	r3, r9
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	d128      	bne.n	800bdf2 <_ZN5codal3I2C5writeEtPhib+0x76>
      write((uint8_t)address);
 800bda0:	68cd      	ldr	r5, [r1, #12]
 800bda2:	f8df b068 	ldr.w	fp, [pc, #104]	; 800be0c <_ZN5codal3I2C5writeEtPhib+0x90>
 800bda6:	455d      	cmp	r5, fp
 800bda8:	d11b      	bne.n	800bde2 <_ZN5codal3I2C5writeEtPhib+0x66>
 800bdaa:	4426      	add	r6, r4
 800bdac:	e005      	b.n	800bdba <_ZN5codal3I2C5writeEtPhib+0x3e>
 800bdae:	3401      	adds	r4, #1
      for (int i = 0; i < len; i++)
 800bdb0:	42a6      	cmp	r6, r4
 800bdb2:	d00a      	beq.n	800bdca <_ZN5codal3I2C5writeEtPhib+0x4e>
 800bdb4:	f8da 3000 	ldr.w	r3, [sl]
 800bdb8:	68dd      	ldr	r5, [r3, #12]
 800bdba:	455d      	cmp	r5, fp
 800bdbc:	d0f7      	beq.n	800bdae <_ZN5codal3I2C5writeEtPhib+0x32>
          write(data[i]);
 800bdbe:	7821      	ldrb	r1, [r4, #0]
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	3401      	adds	r4, #1
 800bdc4:	47a8      	blx	r5
      for (int i = 0; i < len; i++)
 800bdc6:	42a6      	cmp	r6, r4
 800bdc8:	d1f4      	bne.n	800bdb4 <_ZN5codal3I2C5writeEtPhib+0x38>
      if (!repeated)
 800bdca:	b117      	cbz	r7, 800bdd2 <_ZN5codal3I2C5writeEtPhib+0x56>
      return DEVICE_OK;
 800bdcc:	2000      	movs	r0, #0
  }
 800bdce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          stop();
 800bdd2:	f8da 3000 	ldr.w	r3, [sl]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	454b      	cmp	r3, r9
 800bdda:	d10e      	bne.n	800bdfa <_ZN5codal3I2C5writeEtPhib+0x7e>
      return DEVICE_OK;
 800bddc:	4638      	mov	r0, r7
  }
 800bdde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      write((uint8_t)address);
 800bde2:	fa5f f188 	uxtb.w	r1, r8
 800bde6:	4650      	mov	r0, sl
 800bde8:	47a8      	blx	r5
 800bdea:	f8da 3000 	ldr.w	r3, [sl]
 800bdee:	68dd      	ldr	r5, [r3, #12]
 800bdf0:	e7db      	b.n	800bdaa <_ZN5codal3I2C5writeEtPhib+0x2e>
      start();
 800bdf2:	4798      	blx	r3
 800bdf4:	f8da 1000 	ldr.w	r1, [sl]
 800bdf8:	e7d2      	b.n	800bda0 <_ZN5codal3I2C5writeEtPhib+0x24>
          stop();
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	4798      	blx	r3
 800bdfe:	4638      	mov	r0, r7
 800be00:	e7e5      	b.n	800bdce <_ZN5codal3I2C5writeEtPhib+0x52>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800be02:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800be06:	e7e2      	b.n	800bdce <_ZN5codal3I2C5writeEtPhib+0x52>
 800be08:	0800bcfd 	.word	0x0800bcfd
 800be0c:	0800bd05 	.word	0x0800bd05

0800be10 <_ZN5codal3I2C4readEtPhib>:
{
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	b083      	sub	sp, #12
 800be16:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (data == NULL || len <= 0)
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	d05a      	beq.n	800bed4 <_ZN5codal3I2C4readEtPhib+0xc4>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	4698      	mov	r8, r3
 800be22:	dd57      	ble.n	800bed4 <_ZN5codal3I2C4readEtPhib+0xc4>
    start();
 800be24:	6805      	ldr	r5, [r0, #0]
 800be26:	4692      	mov	sl, r2
 800be28:	686b      	ldr	r3, [r5, #4]
 800be2a:	4a2c      	ldr	r2, [pc, #176]	; (800bedc <_ZN5codal3I2C4readEtPhib+0xcc>)
 800be2c:	4606      	mov	r6, r0
 800be2e:	4293      	cmp	r3, r2
 800be30:	d13d      	bne.n	800beae <_ZN5codal3I2C4readEtPhib+0x9e>
    write((uint8_t)(address | 0x01));
 800be32:	68eb      	ldr	r3, [r5, #12]
 800be34:	4f2a      	ldr	r7, [pc, #168]	; (800bee0 <_ZN5codal3I2C4readEtPhib+0xd0>)
 800be36:	42bb      	cmp	r3, r7
 800be38:	d141      	bne.n	800bebe <_ZN5codal3I2C4readEtPhib+0xae>
    for (i = 0; i < len-1; i++)
 800be3a:	f1b8 0f01 	cmp.w	r8, #1
 800be3e:	d01b      	beq.n	800be78 <_ZN5codal3I2C4readEtPhib+0x68>
 800be40:	f1a8 0802 	sub.w	r8, r8, #2
 800be44:	eb0a 0b08 	add.w	fp, sl, r8
 800be48:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800be4c:	e005      	b.n	800be5a <_ZN5codal3I2C4readEtPhib+0x4a>
        data[i] = read();
 800be4e:	200b      	movs	r0, #11
 800be50:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800be54:	45a3      	cmp	fp, r4
 800be56:	d00b      	beq.n	800be70 <_ZN5codal3I2C4readEtPhib+0x60>
 800be58:	6835      	ldr	r5, [r6, #0]
        data[i] = read();
 800be5a:	692d      	ldr	r5, [r5, #16]
 800be5c:	42bd      	cmp	r5, r7
 800be5e:	d0f6      	beq.n	800be4e <_ZN5codal3I2C4readEtPhib+0x3e>
 800be60:	2100      	movs	r1, #0
 800be62:	4630      	mov	r0, r6
 800be64:	47a8      	blx	r5
 800be66:	b2c0      	uxtb	r0, r0
 800be68:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800be6c:	45a3      	cmp	fp, r4
 800be6e:	d1f3      	bne.n	800be58 <_ZN5codal3I2C4readEtPhib+0x48>
 800be70:	f108 0801 	add.w	r8, r8, #1
 800be74:	6835      	ldr	r5, [r6, #0]
 800be76:	44c2      	add	sl, r8
    data[i] = read(NACK);
 800be78:	692b      	ldr	r3, [r5, #16]
 800be7a:	42bb      	cmp	r3, r7
 800be7c:	d112      	bne.n	800bea4 <_ZN5codal3I2C4readEtPhib+0x94>
 800be7e:	200b      	movs	r0, #11
 800be80:	f88a 0000 	strb.w	r0, [sl]
    if (!repeated)
 800be84:	f1b9 0f00 	cmp.w	r9, #0
 800be88:	d003      	beq.n	800be92 <_ZN5codal3I2C4readEtPhib+0x82>
 800be8a:	2000      	movs	r0, #0
}
 800be8c:	b003      	add	sp, #12
 800be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        stop();
 800be92:	6833      	ldr	r3, [r6, #0]
 800be94:	4a11      	ldr	r2, [pc, #68]	; (800bedc <_ZN5codal3I2C4readEtPhib+0xcc>)
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	4293      	cmp	r3, r2
 800be9a:	d117      	bne.n	800becc <_ZN5codal3I2C4readEtPhib+0xbc>
 800be9c:	4648      	mov	r0, r9
}
 800be9e:	b003      	add	sp, #12
 800bea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data[i] = read(NACK);
 800bea4:	2101      	movs	r1, #1
 800bea6:	4630      	mov	r0, r6
 800bea8:	4798      	blx	r3
 800beaa:	b2c0      	uxtb	r0, r0
 800beac:	e7e8      	b.n	800be80 <_ZN5codal3I2C4readEtPhib+0x70>
 800beae:	9101      	str	r1, [sp, #4]
    start();
 800beb0:	4798      	blx	r3
 800beb2:	6835      	ldr	r5, [r6, #0]
 800beb4:	4f0a      	ldr	r7, [pc, #40]	; (800bee0 <_ZN5codal3I2C4readEtPhib+0xd0>)
    write((uint8_t)(address | 0x01));
 800beb6:	68eb      	ldr	r3, [r5, #12]
 800beb8:	9901      	ldr	r1, [sp, #4]
 800beba:	42bb      	cmp	r3, r7
 800bebc:	d0bd      	beq.n	800be3a <_ZN5codal3I2C4readEtPhib+0x2a>
 800bebe:	f041 0101 	orr.w	r1, r1, #1
 800bec2:	b2c9      	uxtb	r1, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	4798      	blx	r3
 800bec8:	6835      	ldr	r5, [r6, #0]
 800beca:	e7b6      	b.n	800be3a <_ZN5codal3I2C4readEtPhib+0x2a>
        stop();
 800becc:	4630      	mov	r0, r6
 800bece:	4798      	blx	r3
 800bed0:	4648      	mov	r0, r9
 800bed2:	e7db      	b.n	800be8c <_ZN5codal3I2C4readEtPhib+0x7c>
        return DEVICE_INVALID_PARAMETER;
 800bed4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800bed8:	e7d8      	b.n	800be8c <_ZN5codal3I2C4readEtPhib+0x7c>
 800beda:	bf00      	nop
 800bedc:	0800bcfd 	.word	0x0800bcfd
 800bee0:	0800bd05 	.word	0x0800bd05

0800bee4 <_ZN5codal3I2CC1ERNS_3PinES2_>:
I2C::I2C(Pin &sda, Pin &scl)
 800bee4:	4b01      	ldr	r3, [pc, #4]	; (800beec <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 800bee6:	6003      	str	r3, [r0, #0]
}
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	0800cc34 	.word	0x0800cc34
	...

0800bf00 <_ZN3pxt20functionsAndBytecodeE>:
 800bf00:	08010801 42424242 08010801 8de9d83e     ....BBBB....>...
 800bf10:	08009019 08009469 08009495 080085f5     ....i...........
 800bf20:	08008cdd 08009759 08009dbd 08008f65     ....Y.......e...
 800bf30:	08009331 0800933d 08007749 08009349     1...=...Iw..I...
 800bf40:	08008fc9 08009311 08008469 08007a95     ........i....z..
 800bf50:	080079cd 0800796d 08007bb9 08007509     .y..my...{...u..
 800bf60:	08007681 08007691 080076a5 080076c1     .v...v...v...v..
 800bf70:	08007fa9 08007f09 080084e5 08008539     ............9...
 800bf80:	08009df9 08009dfd 0800c290 0800c230     ............0...
 800bf90:	0800c260 0800c2c0 08008e49 08009025     `.......I...%...
 800bfa0:	08008df5 080085e9 08009e19 08009e11     ................
 800bfb0:	08009e15 08008319 08008149 080081b1     ........I.......
 800bfc0:	080072f9 080076ed 08007701 08007705     .r...v...w...w..
 800bfd0:	0800770d 08007719 08007721 08007731     .w...w..!w..1w..
 800bfe0:	08007739 08007741 080080fd 0800812d     9w..Aw......-...
 800bff0:	08007225 08007231 08007251 08007665     %r..1r..Qr..ev..
 800c000:	0800728d 0800731d 080075b5 0800748d     .r...s...u...t..
 800c010:	080074c1 080074f1 08007501 080080d9     .t...t...u......
 800c020:	08007bc5 08007bed 08007c15 08007c6d     .{...{...|..m|..
 800c030:	08007c95 08007a99 08007b89 08007ac5     .|...z...{...z..
 800c040:	08007af1 08007b19 08007b41 08007b61     .z...{..A{..a{..
 800c050:	0800826d 08008291 080082b5 080082d9     m...............
 800c060:	080082f9 080080dd 080080ed 08007f89     ................
 800c070:	08007f99 08007cf5 08007d1d 080076cd     .....|...}...v..
 800c080:	08007d45 08007df9 08007e0d 08007e21     E}...}...~..!~..
 800c090:	08007e35 08007e49 08007e5d 08007e71     5~..I~..]~..q~..
 800c0a0:	08007e85 08007e99 08007ead 08007ec1     .~...~...~...~..
 800c0b0:	08007ed5 08007ee9 080076dd 080076e5     .~...~...v...v..
 800c0c0:	08009e01 08007749 08007759 08007791     ....Iw..Yw...w..
 800c0d0:	08007795 08007799 080077ad 080077e1     .w...w...w...w..
 800c0e0:	080077e5 080077f1 080077f9 0800780d     .w...w...w...x..
 800c0f0:	0800782d 080078b5 080078c9 08007901     -x...x...x...y..
 800c100:	08007915 08007921 08007925 08008419     .y..!y..%y......
 800c110:	08006af5 08006b09 08006b1d 08006b31     .j...k...k..1k..
 800c120:	08006b45 08006b59 08006b6d 08006b81     Ek..Yk..mk...k..
 800c130:	08006bf9 08006bfd 08006c15 08006f29     .k...k...l..)o..
 800c140:	08007065 08006c79 08006c7d 08006ca9     ep..yl..}l...l..
 800c150:	08006cd1 08006d51 08006d91 08006e05     .l..Qm...m...n..
 800c160:	08006e19 08008e39 08008e3d 08007081     .n..9...=....p..
 800c170:	08007085 08007089 0800708d 08007095     .p...p...p...p..
 800c180:	08007099 0800709d 080070a1 080070b1     .p...p...p...p..
 800c190:	080070b5 080070bd 080070d1 08002e6d     .p...p...p..m...
 800c1a0:	08002f01 08002f95 08002e9d 08002e0d     ./.../..........
 800c1b0:	08002e3d 08009759 08009a4d 08009af5     =...Y...M.......
 800c1c0:	08009b09 08009b19 08009b21 08009b2d     ........!...-...
 800c1d0:	08009b35 08009b3d 08009b4d 08009b55     5...=...M...U...
 800c1e0:	08009b75 08009bad 08009c2d 08009c45     u.......-...E...
 800c1f0:	08009c49 08009c5d 08009929 08009941     I...]...)...A...
 800c200:	08009951 08009959 08009965 080099b5     Q...Y...e.......
 800c210:	08009a01 08009ced 08009d15 08009d55     ............U...
 800c220:	08009d7d 00000000 00000000 00000000     }...............

0800c230 <_ZN3pxt9buffer_vtE>:
 800c230:	f9040008 00000000 00000003 00000000     ................
 800c240:	080070d5 08008469 00000000 080070e5     .p..i........p..
	...

0800c260 <_ZN3pxt9number_vtE>:
 800c260:	f902000c 00000000 00000002 00000000     ................
 800c270:	080070d5 08008469 00000000 080070e1     .p..i........p..
	...

0800c290 <_ZN3pxt9string_vtE>:
 800c290:	f9030008 00000000 00000001 00000000     ................
 800c2a0:	080070d5 08008469 00000000 080070d9     .p..i........p..
	...

0800c2c0 <_ZN3pxt16RefAction_vtableE>:
 800c2c0:	f904000c 00000000 00000004 00000000     ................
 800c2d0:	08008f5d 08008e61 08008dcd 08008e0d     ]...a...........
	...

0800c2f0 <_ZN3pxtL13RefMap_vtableE>:
 800c2f0:	f9040014 00000000 00000008 00000000     ................
 800c300:	08008e55 08008e99 08008ddd 08008e1d     U...............
	...

0800c320 <_ZN3pxtL18RefRefLocal_vtableE>:
 800c320:	f9040008 00000000 00000007 00000000     ................
 800c330:	08008f61 08008e89 08008dd5 08008e19     a...............
	...

0800c350 <_ZN3pxtL20RefCollection_vtableE>:
 800c350:	f904000c 00000000 00000006 00000000     ................
 800c360:	08008e4d 08009259 08008dc5 08008e09     M...Y...........
 800c370:	00000000 33323130 37363534 62613938     ....0123456789ab
 800c380:	66656463 00000000 6c696166 74206465     cdef....failed t
 800c390:	20657079 63656863 6f66206b 70252072     ype check for %p
 800c3a0:	00000000 25205456 202d2070 746a626f     ....VT %p - objt
 800c3b0:	20657079 63206425 7373616c 25206f4e     ype %d classNo %
 800c3c0:	00000064 7373696d 20676e69 706f7270     d...missing prop
 800c3d0:	79747265 206e6f20 00007025 6665525b     erty on %p..[Ref
 800c3e0:	656a624f 72207463 3d736665 76206425     Object refs=%d v
 800c3f0:	70253d74 3d6c6320 73206425 64253d7a     t=%p cl=%d sz=%d
 800c400:	0000005d 74614e5b 20657669 005d7025     ]...[Native %p].
 800c410:	2073255b 3d207025 5d732520 00000000     [%s %p = %s]....

0800c420 <_ZN3pxtL10sBooleanTpE>:
 800c420:	54585040 6f623a40 61656c6f 0000006e     @PXT@:boolean...

0800c430 <_ZN3pxtL10sUndefinedE>:
 800c430:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800c440 <_ZN3pxtL11emptyBufferE>:
 800c440:	54585040 00003a23 00000000              @PXT#:......

0800c44c <_ZN3pxtL11emptyStringE>:
 800c44c:	54585040 00003a40                       @PXT@:..

0800c454 <_ZN3pxtL11sFunctionTpE>:
 800c454:	54585040 75663a40 6974636e 00006e6f     @PXT@:function..

0800c464 <_ZN3pxtL12sUndefinedTpE>:
 800c464:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800c474 <_ZN3pxtL4sInfE>:
 800c474:	54585040 6e493a40 696e6966 00007974     @PXT@:Infinity..

0800c484 <_ZN3pxtL4sNaNE>:
 800c484:	54585040 614e3a40 0000004e              @PXT@:NaN...

0800c490 <_ZN3pxtL5sMInfE>:
 800c490:	54585040 492d3a40 6e69666e 00797469     @PXT@:-Infinity.

0800c4a0 <_ZN3pxtL5sNullE>:
 800c4a0:	54585040 756e3a40 00006c6c              @PXT@:null..

0800c4ac <_ZN3pxtL5sTrueE>:
 800c4ac:	54585040 72743a40 00006575              @PXT@:true..

0800c4b8 <_ZN3pxtL6sFalseE>:
 800c4b8:	54585040 61663a40 0065736c              @PXT@:false.

0800c4c4 <_ZN3pxtL7sObjectE>:
 800c4c4:	54585040 4f5b3a40 63656a62 00005d74     @PXT@:[Object]..

0800c4d4 <_ZN3pxtL9sFunctionE>:
 800c4d4:	54585040 465b3a40 74636e75 5d6e6f69     @PXT@:[Function]
 800c4e4:	00000000                                ....

0800c4e8 <_ZN3pxtL9sNumberTpE>:
 800c4e8:	54585040 756e3a40 7265626d 00000000     @PXT@:number....

0800c4f8 <_ZN3pxtL9sObjectTpE>:
 800c4f8:	54585040 626f3a40 7463656a 00000000     @PXT@:object....

0800c508 <_ZN3pxtL9sStringTpE>:
 800c508:	54585040 74733a40 676e6972 00000000     @PXT@:string....
 800c518:	414d2d2d 00004b52 253a5052 64252f70     --MARK..RP:%p/%d
 800c528:	00000000 253a4752 64252f70 00000000     ....RG:%p/%d....
 800c538:	25204347 64252f64 65726620 00000065     GC %d/%d free...
 800c548:	52666552 6f4c6665 206c6163 72207025     RefRefLocal %p r
 800c558:	2064253d 70253d76 00000000 652d2d2d     =%d v=%p....---e
 800c568:	5f636578 616e6962 61207972 20726464     xec_binary addr 
 800c578:	00000000 6576202c 00002072 4220283a     ...., ver ..:( B
 800c588:	72206461 69746e75 7620656d 69737265     ad runtime versi
 800c598:	00006e6f 652d2d2d 5f636578 616e6962     on..---exec_bina
 800c5a8:	61207972 636f6c6c 00657461 652d2d2d     ry allocate.---e
 800c5b8:	5f636578 616e6962 63207972 61706d6f     xec_binary compa
 800c5c8:	00006572 652d2d2d 5f636578 616e6962     re..---exec_bina
 800c5d8:	69207972 5074696e 43667265 746e756f     ry initPerfCount
 800c5e8:	00737265 652d2d2d 5f636578 616e6962     ers.---exec_bina
 800c5f8:	69207972 5274696e 69746e75 0000656d     ry initRuntime..
 800c608:	652d2d2d 5f636578 616e6962 72207972     ---exec_binary r
 800c618:	63416e75 6e6f6974 00000030 652d2d2d     unAction0...---e
 800c628:	5f636578 616e6962 72207972 61656c65     xec_binary relea
 800c638:	69466573 00726562 4620283a 656c6961     seFiber.:( Faile
 800c648:	61702064 61697472 6c66206c 00687361     d partial flash.
 800c658:	43666552 656c6c6f 6f697463 7025206e     RefCollection %p
 800c668:	253d7220 69732064 253d657a 00000064      r=%d size=%d...
 800c678:	52666552 726f6365 70252064 253d7220     RefRecord %p r=%
 800c688:	69732064 253d657a 79622064 00736574     d size=%d bytes.
 800c698:	4d666552 25207061 3d722070 73206425     RefMap %p r=%d s
 800c6a8:	3d657a69 00006425 6d676553 3a746e65     ize=%d..Segment:
 800c6b8:	2c702520 6e656c20 3a687467 2c642520      %p, length: %d,
 800c6c8:	7a697320 25203a65 00000064 25203e2d      size: %d...-> %
 800c6d8:	00000064 2a2a2a2a 6843202a 206b6365     d...***** Check 
 800c6e8:	6c696146 203a6465 00000000 6f727245     Failed: ....Erro
 800c6f8:	25203a72 255b2064 00005d64 41666552     r: %d [%d]..RefA
 800c708:	6f697463 7025206e 253d7220 63702064     ction %p r=%d pc
 800c718:	2058253d 657a6973 0064253d 692d2d2d     =%X size=%d.---i
 800c728:	4374696e 6c61646f 75706320 6f6c635f     nitCodal cpu_clo
 800c738:	695f6b63 0074696e 692d2d2d 4374696e     ck_init.---initC
 800c748:	6c61646f 6d6f6320 696e496d 00000074     odal commInit...
 800c758:	692d2d2d 4374696e 6c61646f 68637320     ---initCodal sch
 800c768:	6c756465 695f7265 0074696e 692d2d2d     eduler_init.---i
 800c778:	4374696e 6c61646f 6d6f6320 656e6f70     nitCodal compone
 800c788:	2e73746e 74696e69 00000000 692d2d2d     nts.init....---i
 800c798:	4374696e 6c61646f 62737520 696e695f     nitCodal usb_ini
 800c7a8:	00000074 692d2d2d 4374696e 6c61646f     t...---initCodal
 800c7b8:	6e6f6420 00000065 64255352 2f70253a      done...RS%d:%p/
 800c7c8:	00006425 6e6b6e75 006e776f 73252023     %d..unknown.# %s
 800c7d8:	00000000 73252023 7025203a 00000000     ....# %s: %p....

0800c7e8 <_ZTVN5codal16STM32BluePillPinE>:
	...
 800c7f0:	0800b7b9 0800b715 0800b831 0800b719     ........1.......
 800c800:	0800b735 0800b761 0800b765 0800b775     5...a...e...u...
 800c810:	0800b785 0800b791 0800b7a1 08009a35     ............5...
 800c820:	0800b8cd 08009a3d 0800b7a9 0800b809     ....=...........
 800c830:	0800b7b1 08009a45 0800b869 702d2d2d     ....E...i...---p
 800c840:	3a3a7478 5f757063 636f6c63 6e695f6b     xt::cpu_clock_in
 800c850:	00007469 702d2d2d 3a3a7478 74616c70     it..---pxt::plat
 800c860:	6d726f66 696e695f 00000074 702d2d2d     form_init...---p
 800c870:	3a3a7478 74696e69 646e6152 65536d6f     xt::initRandomSe
 800c880:	00006465 454d440a 0a3a4753 00000000     ed...DMESG:.....
 800c890:	00000a0a                                ....

0800c894 <_ZTVN5codal11CodalDeviceE>:
	...
 800c89c:	0800a065 0800a041 0800a05d 0800a039     e...A...]...9...
 800c8ac:	0800a059 0800a051 0800a049 00007830     Y...Q...I...0x..
 800c8bc:	53454d44 696c2047 7420656e 6c206f6f     DMESG line too l
 800c8cc:	21676e6f 0000000a 00000025 003f3f3f     ong!....%...???.
 800c8dc:	00000a0d                                ....

0800c8e0 <_ZTVN5codal5TimerE>:
	...
 800c8e8:	08003fc9 08003fc9 0800ae19 0800ae0d     .?...?..........

0800c8f8 <_ZTVN5codal14CodalComponentE>:
	...
 800c900:	080094fd 08009ead 08009eb1 0800b08d     ................
 800c910:	0800b0a5                                ....

0800c914 <_ZTVN5codal10EventModelE>:
	...
 800c91c:	0800b061 08009eb5 0800a261              a.......a...

0800c928 <_ZTVN5codal10MessageBusE>:
	...
 800c930:	0800b5ad 0800b179 0800b0f5 0800b075     ....y.......u...
 800c940:	0800b2dd 0800b369 fffffff8 00000000     ....i...........
 800c950:	080094fd 08009ead 08009eb1 0800b361     ............a...
 800c960:	0800b37d                                }...

0800c964 <_ZTVN5codal3_cm3I2CE>:
	...
 800c96c:	0800b6ed 0800bcfd 0800bcfd 0800bd05     ................
 800c97c:	0800bd05 0800b6f1 0800bd0d 0800b6f1     ................
 800c98c:	0800b6f5                                ....

0800c990 <_ZTVN5codal3_cm3PinE>:
	...
 800c998:	0800b7b9 0800b715 0800b831 0800b719     ........1.......
 800c9a8:	0800b735 0800b761 0800b765 0800b775     5...a...e...u...
 800c9b8:	0800b785 0800b791 0800b7a1 08009a35     ............5...
 800c9c8:	0800b8cd 08009a3d 0800b7a9 0800b809     ....=...........
 800c9d8:	0800b7b1 08009a45 0800b869 20495053     ....E...i...SPI 
 800c9e8:	74736e69 65636e61 00702520 202a2a2a     instance %p.*** 
 800c9f8:	61646f63 7073206c 6f6d2069 00206973     codal spi mosi .
 800ca08:	73696d20 0000206f 6c637320 0000206b      miso .. sclk ..

0800ca18 <_ZTVN5codal3_cm3SPIE>:
	...
 800ca20:	0800b931 0800b951 0800b93d 0800b94d     1...Q...=...M...
 800ca30:	0800ba15 636e7973 00002021 656d6974     ....sync! ..time
 800ca40:	6e692072 00007469 67697274 49726567     r init..triggerI
 800ca50:	3462206e 696e6920 00002174 203e3e41     n b4 init!..A>> 
 800ca60:	00000000                                ....

0800ca64 <_ZTVN5codal3_cm5TimerE>:
	...
 800ca6c:	0800baa5 0800bb55 0800ae19 0800ae0d     ....U...........
 800ca7c:	202a2a2a 20707061 2f737362 61746164     *** app bss/data
 800ca8c:	69616620 2c64656c 73736220 7365745f      failed, bss_tes
 800ca9c:	203d2074 00000000 6164202c 745f6174     t = ...., data_t
 800caac:	20747365 0000203d 6d6e6970 6e207061     est = ..pinmap n
 800cabc:	6620746f 646e756f 726f6620 666e6320     ot found for cnf
 800cacc:	00000000 6d6e6970 6e207061 6620746f     ....pinmap not f
 800cadc:	646e756f 726f6620 646f6d20 00000065     ound for mode...
 800caec:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 800cafc:	726f6620 72657020 65687069 006c6172      for peripheral.

0800cb0c <PinMap_SPI_MISO>:
 800cb0c:	00000068 40013000 00010000 00000070     h....0.@....p...
 800cb1c:	40003800 00010000 00000074 40003c00     .8.@....t....<.@
 800cb2c:	00010000 0000006c 40013000 00010001     ....l....0.@....
 800cb3c:	00000078 40003c00 00010001 000000ff     x....<.@........
 800cb4c:	ffffffff 00ffff00                       ........

0800cb54 <PinMap_SPI_MOSI>:
 800cb54:	00000069 40013000 00020300 00000071     i....0.@....q...
 800cb64:	40003800 00020300 00000075 40003c00     .8.@....u....<.@
 800cb74:	00020300 0000006d 40013000 00020301     ....m....0.@....
 800cb84:	00000079 40003c00 00020301 000000ff     y....<.@........
 800cb94:	ffffffff 00ffff00                       ........

0800cb9c <PinMap_SPI_NSS>:
 800cb9c:	00000066 40013000 00020300 0000006e     f....0.@....n...
 800cbac:	40003800 00020300 00000072 40003c00     .8.@....r....<.@
 800cbbc:	00020300 0000006a 40013000 00020301     ....j....0.@....
 800cbcc:	00000076 40003c00 00020301 000000ff     v....<.@........
 800cbdc:	ffffffff 00ffff00                       ........

0800cbe4 <PinMap_SPI_SCK>:
 800cbe4:	00000067 40013000 00020300 0000006f     g....0.@....o...
 800cbf4:	40003800 00020300 00000073 40003c00     .8.@....s....<.@
 800cc04:	00020300 0000006b 40013000 00020301     ....k....0.@....
 800cc14:	00000077 40003c00 00020301 000000ff     w....<.@........
 800cc24:	ffffffff 00ffff00                       ........

0800cc2c <_ZTVN5codal3I2CE>:
	...
 800cc34:	0800bcf5 0800bcfd 0800bcfd 0800bd05     ................
 800cc44:	0800bd05 0800bd7d 0800bd0d 0800be11     ....}...........
 800cc54:	0800bd2d                                -...
