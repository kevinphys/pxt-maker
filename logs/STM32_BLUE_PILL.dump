
libs/stm32bluepill/built/codal/build/STM32_BLUE_PILL:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08007000 l    d  .text	00000000 .text
08006728 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800d6d8 l    d  .preinit_array	00000000 .preinit_array
08006728 l    d  .boot_init_array	00000000 .boot_init_array
0800d6d8 l    d  .init_array	00000000 .init_array
08006728 l    d  .boot_fini_array	00000000 .boot_fini_array
0800d6e4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
20000540 l    d  .boot_bss	00000000 .boot_bss
2000100c l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
20000544 l     O .boot_bss	00000004 bytes_flashed.5212
20000548 l     O .boot_bss	00000004 dest.5209
2000054c l     O .boot_bss	00000004 erase_end.5216
20000550 l     O .boot_bss	00000004 erase_start.5215
20000554 l     O .boot_bss	00000004 flash_end.5217
20000558 l     O .boot_bss	00000004 half_word_count.5211
20000560 l     O .boot_bss	00000001 should_disable_interrupts.5214
2000055c l     O .boot_bss	00000004 src.5210
20000561 l     O .boot_bss	00000001 verified.5213
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
08000780 l     F .boot_text	00000080 _ZL10timer_tickv
08000800 l     F .boot_text	00000028 _ZL11timer_alarmv
08000828 l     F .boot_text	00000070 target_wait.part.1
2000057c l     O .boot_bss	00000001 _ZL11initialised
20000564 l     O .boot_bss	00000004 _ZL11poll_status
20000568 l     O .boot_bss	00000004 _ZL13tick_callback
2000056c l     O .boot_bss	00000004 _ZL14alarm_callback
20000570 l     O .boot_bss	00000004 _ZL16prev_poll_status
20000574 l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 timer.cpp
20000888 l     O .boot_bss	00000004 _ZL10alarmCount
2000088c l     O .boot_bss	00000004 _ZL8tickFunc
20000890 l     O .boot_bss	00000004 _ZL9alarmFunc
20000894 l     O .boot_bss	00000004 _ZL9tickCount
20000899 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 reset_handler.c
00000000 l    df *ABS*	00000000 CortexContextSwitch.s.o
08000a70 l       .boot_text	00000000 store_context_complete
08000a82 l       .boot_text	00000000 store_stack_complete
08000a76 l       .boot_text	00000000 store_stack
08000a9c l       .boot_text	00000000 restore_stack_complete
08000a90 l       .boot_text	00000000 restore_stack
08000af0 l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 pwr_common_v1.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 desig.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 rcc.c
08000ccc l     F .boot_text	00000010 rcc_is_osc_ready.part.0
08000cdc l     F .boot_text	00000010 rcc_osc_on.part.1
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08000e60 l     F .boot_text	00000034 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_control.c
08000fc8 l     F .boot_text	00000052 usb_control_send_chunk
0800101c l     F .boot_text	00000060 usb_control_request_dispatch
0800107c l     F .boot_text	0000007a usb_control_setup_read
080010f8 l     F .boot_text	00000046 usb_control_recv_chunk
00000000 l    df *ABS*	00000000 usb_standard.c
080012e4 l     F .boot_text	000000a4 usb_standard_set_configuration
08001388 l     F .boot_text	0000002c usb_standard_get_configuration
080013b4 l     F .boot_text	0000003c usb_standard_get_interface
080013f0 l     F .boot_text	00000018 usb_standard_device_get_status
08001408 l     F .boot_text	0000002a usb_standard_endpoint_get_status
08001434 l     F .boot_text	00000010 usb_standard_endpoint_stall
08001444 l     F .boot_text	00000010 usb_standard_endpoint_unstall
08001454 l     F .boot_text	00000030 usb_standard_set_address
08001484 l     F .boot_text	00000052 usb_standard_set_interface
080014d8 l     F .boot_text	00000292 usb_standard_get_descriptor
0800176c l     F .boot_text	00000018 usb_standard_interface_get_status
00000000 l    df *ABS*	00000000 flash_common_all.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000580 l     O .boot_bss	00000020 msgQList
2000063c l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
2000063d l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
2000063e l     O .boot_bss	00000001 nTasks
200005a0 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
2000063a l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_event.c
2000062c l     O .boot_bss	0000000e eventList
2000063f l     O .boot_bss	00000001 nEvents
20000014 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 qfplib.S.o
00000001 l       *ABS*	00000000 include_faster
00000001 l       *ABS*	00000000 include_conversions
00000001 l       *ABS*	00000000 include_scientific
08002810 l       .boot_text	00000000 xchxy
08002818 l       .boot_text	00000000 unpackxy
08002826 l       .boot_text	00000000 unpackx
08002854 l       .boot_text	00000000 packx
08002862 l       .boot_text	00000000 packx0
080028a6 l       .boot_text	00000000 unpackxyalign
080028f0 l       .boot_text	00000000 packret
080028f6 l       .boot_text	00000000 mul0
08002946 l       .boot_text	00000000 fmul0
0800294e l       .boot_text	00000000 fdiv_n
08002986 l       .boot_text	00000000 infret
08002990 l       .boot_text	00000000 fdiv_fast_n
08002a40 l       .boot_text	00000000 rcpapp
080029d8 l       .boot_text	00000000 div0
08002a48 l       .boot_text	00000000 rsqrtapp
08002aa2 l       .boot_text	00000000 packretns
08002ab8 l       .boot_text	00000000 cordic_start
08002ac2 l       .boot_text	00000000 cordic_vstep
08002ac8 l       .boot_text	00000000 cordic_rstep
08002af4 l       .boot_text	00000000 cordic_rot
08002b16 l       .boot_text	00000000 cordic_exit
08002b1c l       .boot_text	00000000 cordic_vec
08002c68 l       .boot_text	00000000 pi_q29
08002c68 l       .boot_text	00000000 tab_cc
08002c9c l       .boot_text	00000000 tab_ch
08002cd8 l       .boot_text	00000000 qfp_lib_end
00000000 l    df *ABS*	00000000 functions.c
20000640 l     O .boot_bss	0000002e float_usage
00000000 l    df *ABS*	00000000 strtol.c
08003a20 l     F .boot_text	000000ec _strtol_l.isra.0
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 strcmp.S.o
00000000 l    df *ABS*	00000000 strlen.S.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
08003c18 l     F .boot_text	00000058 _ZL12debug_appendPKcj
08003c70 l     F .boot_text	00000070 _Z20debug_flush_internalb.part.2
08003ce0 l     F .boot_text	00000014 debug_print.part.3
20000670 l     O .boot_bss	00000201 _ZL11debugBuffer
20000874 l     O .boot_bss	00000010 _ZL12output_funcs
20000884 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000898 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 bootloader.c
2000089c l     O .boot_bss	00000004 baseloader_addr
200008a0 l     O .boot_bss	00000004 baseloader_status
200008a4 l     O .boot_bss	00000004 byte_count
200008a8 l     O .boot_bss	00000004 cycleCount
200008ac l     O .boot_bss	00000004 dest
200008b0 l     O .boot_bss	00000004 last_status
200008b4 l     O .boot_bss	00000004 msTimer
20000b6c l     O .boot_bss	00000001 poll_restart_requested
200008b8 l     O .boot_bss	00000004 src
200008bc l     O .boot_bss	00000004 status
200008c0 l     O .boot_bss	00000004 usbd_dev
2000042c l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 usb_conf.c
08004418 l     F .boot_text	00000010 hf2_connected
08004428 l     F .boot_text	00000030 usb_cdc_transmit
08004458 l     F .boot_text	00000010 sof_callback
08004468 l     F .boot_text	0000001c cdc_connected
08004484 l     F .boot_text	00000050 set_aggregate_callback
0800481c l     F .boot_text	000000c0 aggregate_callback
20000b6d l     O .boot_bss	00000001 cdc_is_connected
200008c4 l     O .boot_bss	00000028 config_callback
200008ec l     O .boot_bss	00000050 control_callback
20000b6e l     O .boot_bss	00000001 hf2_is_connected
2000093c l     O .boot_bss	00000004 last_busy_time
20000940 l     O .boot_bss	00000004 last_frame_time
20000944 l     O .boot_bss	00000019 serial_number
20000a6c l     O .boot_bss	00000100 usbd_control_buffer
20000430 l     O .boot_data	00000008 capabilities
20000438 l     O .boot_data	00000024 usb_strings
08005ea8 l     O .boot_text	00000009 bos_descriptor
08005eb4 l     O .boot_text	00000008 cdc_iface_assoc
08005ebc l     O .boot_text	00000013 cdcacm_functional_descriptors
08005ed0 l     O .boot_text	0000000f comm_endp
08005ee0 l     O .boot_text	00000015 comm_iface
08005ef8 l     O .boot_text	0000000d config
08006018 l     O .boot_text	00000030 interfaces
08005f08 l     O .boot_text	0000001e data_endp
08005f28 l     O .boot_text	00000015 data_iface
08005f40 l     O .boot_text	00000012 dev
08005fe0 l     O .boot_text	0000001e hf2_endp
08006000 l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
080048dc l     F .boot_text	00000028 webusb_set_config
08004904 l     F .boot_text	000000a4 webusb_control_vendor_request
20000964 l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
080049f8 l     F .boot_text	0000009c winusb_control_vendor_request
08004a94 l     F .boot_text	00000028 winusb_set_config
08004abc l     F .boot_text	00000048 winusb_descriptor_request
2000045c l     O .boot_data	000000b2 msos20_descriptor_set
20000510 l     O .boot_data	00000028 winusb_wcid
080061c0 l     O .boot_text	00000092 guid
080062c8 l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 target_stm32f103.c
08004b60 l     F .boot_text	000000f0 boot_target_get_startup_mode.part.0
20000b6f l     O .boot_bss	00000001 forced_startup_mode
20000b70 l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 cdc.c
08004d80 l     F .boot_text	0000000c cdcacm_comm_cb
08004d8c l     F .boot_text	00000068 cdcacm_set_config
08004eac l     F .boot_text	0000004c cdcacm_data_rx_cb
08004df4 l     F .boot_text	00000064 cdcacm_control_request
20000b71 l     O .boot_bss	00000001 connected
20000968 l     O .boot_bss	00000004 connected_func
2000096c l     O .boot_bss	00000041 rx_buf
080063fc l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08004f24 l     F .boot_text	00000040 hf2_set_config
08005694 l     F .boot_text	00000050 hf2_data_tx_cb
0800505c l     F .boot_text	00000638 hf2_data_rx_cb
08004f64 l     F .boot_text	000000dc pokeSend
08005040 l     F .boot_text	0000001c assert.part.0
200009b0 l     O .boot_bss	00000004 _usbd_dev
200009b4 l     O .boot_bss	00000004 cmdId.6005
20000b72 l     O .boot_bss	00000001 connected
200009b8 l     O .boot_bss	00000004 connected_func
20000b73 l     O .boot_bss	00000001 flush_count.6007
200009bc l     O .boot_bss	00000004 new_app_start.6009
200009c0 l     O .boot_bss	00000004 new_base_vector.6008
200009c4 l     O .boot_bss	00000004 new_baseloader_size.6011
200009c8 l     O .boot_bss	00000004 new_bootloader_size.6010
200009cc l     O .boot_bss	00000004 pkt.6040
200009d0 l     O .boot_bss	00000004 prevCmdId.6006
200009d4 l     O .boot_bss	00000004 remDataToSend
20000b74 l     O .boot_bss	00000001 remDataToSendFlag
200009d8 l     O .boot_bss	00000004 remDataToSendLength
20000b75 l     O .boot_bss	00000001 restart_request
200009dc l     O .boot_bss	00000040 rx_buf
20000a1c l     O .boot_bss	00000004 rx_time
20000a20 l     O .boot_bss	00000040 tx_buf
08006410 l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 usb21_standard.c
08005768 l     F .boot_text	00000028 usb21_set_config
08005790 l     F .boot_text	000000e0 usb21_standard_get_descriptor
20000a60 l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 ghostfat.c
20000a64 l     O .boot_bss	00000004 lastFlush
20000a68 l     O .boot_bss	00000004 ms
2000053c l     O .boot_data	00000001 firstFlush
20000538 l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 application.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 core.cpp
080078d4 l     F .text	00000002 _ZN3pxtL13dtorDoNothingEv
080078d8 l     F .text	00000008 _ZN3pxtL11string_sizeEPNS_11BoxedStringE
080078e0 l     F .text	00000004 _ZN3pxtL11number_sizeEPNS_11BoxedNumberE
080078e4 l     F .text	00000008 _ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE
08007e54 l     F .text	0000000e _ZN3pxt7fromIntEi.part.7
080089c4 l     F .text	000000a6 _ZN6numopsL10valCompareEPN3pxt12TValueStructES2_
2000100c l     O .bss	00000004 _ZN3pxtL15handlerBindingsE
20001000 l     O .data	00000004 _ZN3pxtL12random_valueE
0800cda0 l     O .text	0000000e _ZN3pxtL10sBooleanTpE
0800cdb0 l     O .text	00000010 _ZN3pxtL10sUndefinedE
0800cdc0 l     O .text	0000000a _ZN3pxtL11emptyBufferE
0800cdcc l     O .text	00000007 _ZN3pxtL11emptyStringE
0800cdd4 l     O .text	0000000f _ZN3pxtL11sFunctionTpE
0800cde4 l     O .text	00000010 _ZN3pxtL12sUndefinedTpE
0800cdf4 l     O .text	0000000f _ZN3pxtL4sInfE
0800ce04 l     O .text	0000000a _ZN3pxtL4sNaNE
0800ce10 l     O .text	00000010 _ZN3pxtL5sMInfE
0800ce20 l     O .text	0000000b _ZN3pxtL5sNullE
0800ce2c l     O .text	0000000b _ZN3pxtL5sTrueE
0800ce38 l     O .text	0000000c _ZN3pxtL6sFalseE
0800ce44 l     O .text	0000000f _ZN3pxtL7sObjectE
0800ce54 l     O .text	00000011 _ZN3pxtL9sFunctionE
0800ce68 l     O .text	0000000d _ZN3pxtL9sNumberTpE
0800ce78 l     O .text	0000000d _ZN3pxtL9sObjectTpE
0800ce88 l     O .text	0000000d _ZN3pxtL9sStringTpE
00000000 l    df *ABS*	00000000 advmath.cpp
00000000 l    df *ABS*	00000000 buffer.cpp
08007394 l     F .text	00000062 _ZN3pxtL9readBytesEPhS0_ibi
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 gc.cpp
08008d54 l     F .text	00000040 _ZN3pxtL13getObjectSizeEPNS_9RefObjectE
08008d94 l     F .text	00000054 _ZN3pxtL9removePtrEPNS_12TValueStructE
080091c0 l     F .text	000000d0 _ZN3pxtL13allocateBlockEv
08009620 l     F .text	00000018 _GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
20001010 l     O .bss	00000004 _ZN3pxtL10firstBlockE
2000166d l     O .bss	00000001 _ZN3pxtL11tempRootLenE
20001014 l     O .bss	00000004 _ZN3pxtL6midPtrE
20001018 l     O .bss	00000008 _ZN3pxtL7gcRootsE
20001020 l     O .bss	00000004 _ZN3pxtL8tempRootE
20001024 l     O .bss	00000004 _ZN3pxtL9firstFreeE
20001028 l     O .bss	00000008 _ZN3pxtL9workQueueE
00000000 l    df *ABS*	00000000 loops.cpp
00000000 l    df *ABS*	00000000 pxt.cpp
080096a8 l     F .text	00000098 _ZN3pxt9LLSegment9setLengthEj.part.5
08009740 l     F .text	0000001c _ZN3pxt8checkStrEbPKc.part.6
0800cc70 l     O .text	00000024 _ZN3pxtL13RefMap_vtableE
0800cca0 l     O .text	00000024 _ZN3pxtL18RefRefLocal_vtableE
0800ccd0 l     O .text	00000024 _ZN3pxtL20RefCollection_vtableE
00000000 l    df *ABS*	00000000 codal.cpp
08009d04 l     F .text	00000018 _ZN3pxtL10runAction0EPNS_12TValueStructE
0800a06c l     F .text	00000058 _GLOBAL__sub_I__ZN3pxt8devTimerE
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 i2c.cpp
0800a174 l     F .text	00000040 _ZN4pinsL7initI2CEv.part.0
2000108c l     O .bss	00000004 _ZN4pinsL3i2cE
00000000 l    df *ABS*	00000000 pins.cpp
2000166e l     O .bss	00000001 _ZN3pxtL10numPinPtrsE
20001090 l     O .bss	00000080 _ZN3pxtL6pinPosE
20001110 l     O .bss	00000004 _ZN3pxtL7pinPtrsE
00000000 l    df *ABS*	00000000 pinsAnalog.cpp
00000000 l    df *ABS*	00000000 pinsDigital.cpp
00000000 l    df *ABS*	00000000 pinsPWM.cpp
00000000 l    df *ABS*	00000000 platform.cpp
00000000 l    df *ABS*	00000000 spi.cpp
0800a494 l     F .text	00000054 _ZN4pinsL7initSPIEv.part.0
20001114 l     O .bss	00000004 _ZN4pinsL3spiE
00000000 l    df *ABS*	00000000 usb.cpp
20001118 l     O .bss	00000004 _ZN3pxtL11pSendToUARTE
00000000 l    df *ABS*	00000000 pointers.cpp
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDevice.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
0800a864 l     F .text	00000080 _ZL9logwritenPKci
0800a8e4 l     F .text	0000007c _ZL11logwritenummbb
00000000 l    df *ABS*	00000000 CodalFiber.cpp
0800aa64 l     F .text	00000032 _ZL15get_fibers_fromPPPN5codal5FiberEPiS1_
0800aa98 l     F .text	0000002e _ZN5codal13dequeue_fiberEPNS_5FiberE.part.0
0800acd8 l     F .text	00000034 _ZL10handle_fobv
0800aff4 l     F .text	00000188 _ZN5codal8scheduleEv.part.3
0800b208 l     F .text	0000007c _ZN5codal13release_fiberEv.part.4
20001624 l     O .bss	00000004 _ZN5codalL10messageBusE
20001628 l     O .bss	00000004 _ZN5codalL10sleepQueueE
20001670 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
2000162c l     O .bss	00000004 _ZN5codalL11forkedFiberE
20001630 l     O .bss	00000004 _ZN5codalL8runQueueE
20001634 l     O .bss	00000004 _ZN5codalL9fiberPoolE
20001638 l     O .bss	00000004 _ZN5codalL9idleFiberE
2000163c l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20001671 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001008 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
0800be30 l     F .text	0000002c _ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0
0800be30 l     F .text	0000002c _ZN5codal5EventC2EttmNS_15EventLaunchModeE.part.1
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
0800c0d0 l     F .text	00000024 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1
00000000 l    df *ABS*	00000000 CmSPI.cpp
0800c190 l     F .text	0000004e _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0
0800c1e0 l     F .text	0000005c _ZN5codal3_cm3SPI4initEv.part.1
00000000 l    df *ABS*	00000000 CmTimer.cpp
20001654 l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
20001658 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
0800c404 l     F .text	00000018 _ZL10flush_taskv
0800c41c l     F .text	00000050 _ZL15restart_handlerN5codal5EventE
0800c5bc l     F .text	00000014 _GLOBAL__sub_I_restart_callback
20001660 l     O .bss	00000008 _ZL13restart_event
20001668 l     O .bss	00000004 _ZL16flush_task_fibre
20001673 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 CmPinMap.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .boot_data	00000410 impure_data
08002f60 g     F .boot_text	00000034 __wrap___aeabi_dcmpun
0800c60c g     F .text	00000038 pinmap_mode
08007cc0 g     F .text	00000030 _ZN7String_7indexOfEPN3pxt11BoxedStringES2_i
0800b63c g     F .text	00000030 _ZN5codal5TimerC1Ev
08007428 g     F .text	0000004e _ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii
08005994 g     F .boot_text	000000e4 flash_write
080086e8 g     F .text	00000020 _ZN5Math_5roundEPN3pxt12TValueStructE
0800c144 g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800bb80 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08002da4 g     F .boot_text	00000030 __wrap___aeabi_ddiv
08009f58 g     F .text	00000020 _ZN3pxt16afterProgramPageEv
0800a6a8  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
08008ed4 g     F .text	00000034 _ZN3pxt13gcScanSegmentERNS_7SegmentE
08001b3c g     F .boot_text	00000040 st_usbfs_ep_stall_get
0800ab5c g     F .text	00000040 _ZN5codal14scheduler_tickENS_5EventE
0800298e g     F .boot_text	00000000 qfp_fdiv_fast
08003014 g     F .boot_text	0000001c log
080078b4 g     F .text	00000006 _ZN7control2gcEv
08006728 g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08007620 g     F .text	00000106 _ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE
08002ff8 g     F .boot_text	0000001c sqrt
080011d4 g     F .boot_text	0000009e _usbd_control_out
0800a5f8  w    F .text	00000002 _ZN3pxt4decrEPNS_12TValueStructE
080033d4 g     F .boot_text	000000a4 cosh
08000988 g     F .boot_text	00000004 tcb_configure_stack_base
08003530 g     F .boot_text	000000a4 asinh
0800c158 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08007894 g     F .text	00000004 _ZN7control13runInParallelEPN3pxt12TValueStructE
080079a0 g     F .text	00000044 _ZN3pxt8mkBufferEPKhi
0800064c g     F .boot_text	00000134 reset_handler
00007000 g       *ABS*	00000000 _bootrom_size
08000970 g     F .boot_text	00000008 fiber_initial_stack_base
20001672 g     O .bss	00000001 heap_count
08004150 g     F .boot_text	000002bc bootloader_start
0800c104 g     F .text	00000020 _ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE
08009a88 g     F .text	00000010 _ZN3pxt11RefRefLocalC1Ev
08000f90 g     F .boot_text	0000000e usbd_ep_write_packet
080026a4 g     F .boot_text	0000005a .hidden __floatdidf
08004d14 g     F .boot_text	00000024 boot_target_set_restart_callback
08000fb0 g     F .boot_text	00000008 usbd_ep_stall_set
0800bf8c g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800d5d4 g     O .text	00000048 PinMap_SPI_MOSI
080074d0 g     F .text	00000080 _ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii
0800b5a8 g     F .text	00000014 _ZN5codal8ListenerD2Ev
08009b54 g     F .text	00000108 _ZN3pxt11exec_binaryEPj
08000984 g     F .boot_text	00000004 tcb_configure_sp
080005d4  w    F .boot_text	00000002 usart3_isr
08009f78 g     F .text	00000004 _ZN3pxt15getSerialNumberEv
080005ec g     F .boot_text	00000030 rtc_isr
080005d4 g       .boot_text	00000000 _base_etext
08004d38 g     F .boot_text	00000020 boot_target_manifest_app
0800d3cc g     O .text	00000018 _ZTVN5codal3_cm5TimerE
080087a8 g     F .text	00000130 _ZN3pxt7eq_boolEPNS_12TValueStructES1_
08003e08 g     F .boot_text	00000030 _Z11debug_printi
0800bb9c g     F .text	000000b0 _ZN5codal10MessageBusC2Ev
08003e60 g     F .boot_text	00000018 _Z13debug_printlni
080005d4  w    F .boot_text	00000002 tim7_isr
08001e68 g     F .boot_text	0000000c exti_reset_request
20000c80 g     O .boot_bss	00000001 running_tid
2000105c g     O .bss	00000004 _ZN3pxt6deviceE
080005d4  w    F .boot_text	00000002 adc1_2_isr
0800bea4 g     F .text	00000024 _ZN5codal14EventQueueItemC2ENS_5EventE
0800c26c g     F .text	00000060 _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_
080073fc g     F .text	00000016 _ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi
08008114 g     F .text	0000000c _ZN5pxtrt13getGlobalsPtrEv
08000990 g     F .boot_text	00000004 get_current_sp
08002f94 g     F .boot_text	0000002c __wrap___aeabi_d2iz
080005d4  w    F .boot_text	00000002 tim1_trg_com_isr
08007f20 g     F .text	00000010 _ZN6Array_5getAtEPN3pxt13RefCollectionEi
080088ec g     F .text	00000010 _ZN6numops3neqEPN3pxt12TValueStructES2_
08007c8c g     F .text	00000034 _ZN7String_6substrEPN3pxt11BoxedStringEii
0800a308 g     F .text	00000010 _ZN3pxt9lookupPinEi
08007e90 g     F .text	00000012 _ZN3pxt7fromIntEi
08007ec0 g     F .text	0000000a _ZN3pxt8fromBoolEb
0800bf0c g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
08003b7e g     F .boot_text	00000032 memmove
080086ac g     F .text	00000012 _ZN5Math_5floorEPN3pxt12TValueStructE
08007ff0 g     F .text	00000008 _ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE
08007f30 g     F .text	00000006 _ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
080078d0 g     F .text	00000004 _ZN7control16profilingEnabledEv
0800a618 g     F .text	0000002c _ZN5codal14string_reverseEPc
0800c6b4 g     F .text	0000004e _ZN5codal3I2C12readRegisterEthPhib
0800a80c g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
08009dd8 g     F .text	00000004 _ZN3pxt8sleep_usEy
08009660 g     F .text	00000028 _ZN3pxt9RefAction5printEPS0_
08007604 g     F .text	00000014 _ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_
080028de g     F .boot_text	00000000 qfp_fadd
080027a0 g     F .boot_text	00000070 .hidden __powidf2
08001850 g     F .boot_text	00000064 _usbd_standard_request
08009918 g     F .text	0000003e _ZN3pxt7Segment3setEjPNS_12TValueStructE
0800a5fc  w    F .text	00000010 _ZN3pxt12ptrOfLiteralEi
080020d0 g     F .boot_text	00000008 os_tick
08000fc0 g     F .boot_text	00000008 usbd_ep_nak_set
08007908 g     F .text	0000004c _ZN3pxt10setBindingEiiPNS_12TValueStructE
08002dd4 g     F .boot_text	00000030 __wrap___aeabi_dmul
080005d4  w    F .boot_text	00000002 usb_hp_can_tx_isr
08007f90 g     F .text	00000004 _ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE
08009a20 g     F .text	00000038 _ZN3pxt7Segment5printEv
0800a5a4 g     F .text	00000002 _ZN3pxt8usb_initEv
080095c4 g     F .text	00000006 _ZN3pxt13RefCollection4scanEPS0_
08008e54 g     F .text	00000038 _ZN3pxt6gcScanEPNS_12TValueStructE
0800b8a4  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800a960 g     F .text	000000dc codal_vdmesg
080028d8 g     F .boot_text	00000000 qfp_fsub
0800865c g     F .text	00000012 _ZN5Math_4atanEPN3pxt12TValueStructE
0800c694 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
0800385c g     F .boot_text	00000088 ceil
0800c798 g     F .text	000000d4 _ZN5codal3I2C4readEtPhib
08000928 g     F .boot_text	00000010 target_seed_random
08007728 g     F .text	0000001a _ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE
20000540 g     O .boot_bss	00000004 baseloader_fail
08009b30 g     F .text	0000000c _ZN3pxt12templateHashEv
080005d4  w    F .boot_text	00000002 tim6_isr
08006728 g       *ABS*	00000000 _boot_data_loadaddr
080037d4 g     F .boot_text	00000088 floor
0800cbe0 g     O .text	00000024 _ZN3pxt9number_vtE
0800d6e4 g       .init_array	00000000 _etext
08009a78 g     F .text	00000010 _ZN3pxt13RefCollectionC1Ev
08000c50 g     F .boot_text	0000007c gpio_set_mode
080080b4 g     F .text	00000014 _ZN5pxtrt6mapGetEPN3pxt6RefMapEj
08006728 g     O .boot_fini_array	00000004 __boot_fini_array_start
0800ab24 g     F .text	00000036 _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800c104 g     F .text	00000020 _ZN5codal3_cm3PinC2Ei7PinNameNS_13PinCapabilityE
080005d4  w    F .boot_text	00000002 usb_wakeup_isr
080088dc g     F .text	00000010 _ZN6numops2eqEPN3pxt12TValueStructES2_
080005d4 g     F .boot_text	00000002 blocking_handler
0800a83c g     F .text	00000006 _ZN5codal11CodalDevice5sleepEm
20000c81 g     O .boot_bss	00000001 running
00000800 g       *ABS*	00000000 _baseram_size
08003f58 g     F .boot_text	00000020 led_setup
080005d4  w    F .boot_text	00000002 tim5_isr
080082c4 g     F .text	0000002a _ZN6numops4asrsEPN3pxt12TValueStructES2_
08003e44 g     F .boot_text	0000001c debug_println
200047bc g     O .boot_buf	00000442 hf2_buffer
08008ab4 g     F .text	00000022 _ZN6numops2ltEPN3pxt12TValueStructES2_
080005d4  w    F .boot_text	00000002 otg_fs_isr
080009a0 g     F .boot_text	00000070 test_codal
0800bf78 g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
0800c5d0 g     F .text	0000003c pinmap_peripheral
080005d4  w    F .boot_text	00000002 spi1_isr
080008ec g     F .boot_text	00000020 target_wait_us
0800090c g     F .boot_text	00000014 target_reset
08003cf8 g     F .boot_text	0000004c logger_add_output
080083ec g     F .text	00000026 _ZN6numops4subsEPN3pxt12TValueStructES2_
0800b3ac g     F .text	0000003c _Z18device_create_heapmm
0800816c g     F .text	00000060 _ZN3pxt8toDoubleEPNS_12TValueStructE
08000f3c g     F .boot_text	00000004 usbd_register_sof_callback
08008124 g     F .text	00000048 _ZN3pxt7valTypeEPNS_12TValueStructE
0800b40c g     F .text	0000008e _Z16device_malloc_injR14HeapDefinition
08004b04 g     F .boot_text	0000005c winusb_setup
0800c090 g     F .text	00000040 _ZN5codal3_cm3Pin7eventOnEi
08003b20 g     F .boot_text	0000001c memcpy
08009dbc  w    F .text	00000014 _ZN5codal3_cm5TimerD2Ev
080005d4  w    F .boot_text	00000002 exti2_isr
080005d4  w    F .boot_text	00000002 dma1_channel6_isr
08007f04 g     F .text	00000006 _ZN6Array_9setLengthEPN3pxt13RefCollectionEi
08007884 g     F .text	00000004 _ZN7control15internalOnEventEiiPN3pxt12TValueStructEi
0800a4e8 g     F .text	00000028 _ZN4pins8spiWriteEi
0800a33c g     F .text	00000010 _ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE
20001004 g     O .data	00000004 app_data_test
080005d8 g     F .boot_text	00000002 null_handler
08007fe4 g     F .text	0000000c _ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE
08009aac g     F .text	00000064 _ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE
20000008 g     O .boot_data	00000004 rcc_ahb_frequency
0800262c g     F .boot_text	00000022 .hidden __floatsidf
0800bec8 g     F .text	0000001a _ZN5codal22MemberFunctionCallback4fireENS_5EventE
0800cc10 g     O .text	00000024 _ZN3pxt9string_vtE
0800c26c g     F .text	00000060 _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_
08009d8c g     F .text	0000000e _ZN3pxt9fiberDoneEPv
08007128 g     F .text	00000174 _ZN6numops5mycvtEdPc
080040fc g     F .boot_text	00000020 poll_restart_callback
08000998 g     F .boot_text	00000008 tcb_configure_args
2000165c g     O .bss	00000004 app_bss_test
080056e4 g     F .boot_text	00000084 hf2_setup
0800cc40 g     O .text	00000024 _ZN3pxt16RefAction_vtableE
08009dd4 g     F .text	00000004 _ZN3pxt8sleep_msEj
080005d4  w    F .boot_text	00000002 can_rx1_isr
0800d6e4 g       .fini_array	00000000 __fini_array_end
080005d4  w    F .boot_text	00000002 dma1_channel5_isr
08000504 g     F .boot_text	000000d0 baseloader_fetch
0800a42c g     F .text	00000018 _ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode
080088fc g     F .text	0000002e _ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi
0800c23c g     F .text	00000030 _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08007330 g     F .text	00000012 _ZN5Math_4sinhEPN3pxt12TValueStructE
0800a32c g     F .text	00000006 _ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE
08009440 g     F .text	00000028 malloc
0800d1fc g     O .text	00000024 _ZTVN5codal11CodalDeviceE
08007f00 g     F .text	00000004 _ZN6Array_6lengthEPN3pxt13RefCollectionE
080005d4  w    F .boot_text	00000002 dma2_channel5_isr
0800b5a8 g     F .text	00000014 _ZN5codal8ListenerD1Ev
08009638 g     F .text	00000004 _ZN5loops7foreverEPN3pxt12TValueStructE
08005b70 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
0800440c g     F .boot_text	0000000a bootloader_set_restart_callback
08002034 g     F .boot_text	00000034 rtc_clear_flag
0800b66c g     F .text	000000b8 _ZN5codal5Timer8setEventEmttb
08008620 g     F .text	00000012 _ZN5Math_3tanEPN3pxt12TValueStructE
08008948 g     F .text	00000068 _ZN6numops6toBoolEPN3pxt12TValueStructE
0800aef4 g     F .text	00000068 _Z14__create_fibermmmi
08000a30 g     F .boot_text	0000000c target_set_bootloader_callback
08009a58 g     F .text	00000020 _ZN3pxt13RefCollection5printEPS0_
080005d4  w    F .boot_text	00000002 usart1_isr
080078bc g     F .text	00000014 _ZN7control8heapDumpEv
0800aac8 g     F .text	0000005c _ZN5codal11list_fibersEPPNS_5FiberE
0800a478 g     F .text	0000001c _Z14cpu_clock_initv
00000844 g       *ABS*	00000000 _bootbuf_size
0800afac g     F .text	00000048 _ZN5codal4idleEv
08008670 g     F .text	00000012 _ZN5Math_4asinEPN3pxt12TValueStructE
20000578 g     O .boot_bss	00000004 .hidden __dso_handle
0800260c g     F .boot_text	0000001e .hidden __aeabi_ui2d
0800c644 g     F .text	00000038 pinmap_cnf
0800983c g     F .text	0000002e _ZN3pxt9LLSegment3setEjPNS_12TValueStructE
08000994 g     F .boot_text	00000004 tcb_get_sp
08001784 g     F .boot_text	00000032 usbd_register_set_config_callback
0800191c g     F .boot_text	00000118 st_usbfs_ep_setup
0800a200 g     F .text	00000034 _ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb
08000938 g     F .boot_text	00000018 target_get_serial
0800bfc0 g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
08008f60 g     F .text	00000260 _ZN3pxt2gcEi
08002388 g     F .boot_text	00000000 .hidden __aeabi_drsub
0800bf08 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
0800a460 g     F .text	00000018 _ZN3pxt13platform_initEv
0800b2b8 g     F .text	00000014 _ZN5codal13release_fiberEPv
0800b4e8 g     F .text	00000040 device_free
08009818 g     F .text	0000000a _ZN3pxt15deleteRefObjectEPNS_9RefObjectE
08007344 g     F .text	00000012 _ZN5Math_4coshEPN3pxt12TValueStructE
0800a244  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
08008100 g     F .text	00000014 _ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE
08009608 g     F .text	00000004 _ZN3pxt13RefCollection6gcsizeEPS0_
080005d4  w    F .boot_text	00000002 usage_fault_handler
080005d4  w    F .boot_text	00000002 tim8_trg_com_isr
0800c374 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
0800a448 g     F .text	00000014 _ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi
08003e80 g     F .boot_text	00000048 debug_printhex
080005d4  w    F .boot_text	00000002 can2_rx0_isr
08007a50 g     F .text	0000003c _ZN7String_6charAtEPN3pxt11BoxedStringEi
0800a0c4 g     F .text	00000064 _ZN3pxt15registerWithDalEiiPNS_12TValueStructEi
0800c68c g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
080021b8 g     F .boot_text	00000040 os_task_highest_prio_ready_task
080005d4  w    F .boot_text	00000002 tim1_brk_isr
08009f8c g     F .text	0000000c _ZN3pxt16setThreadContextEPNS_13ThreadContextE
0800c4dc g     F .text	000000e0 start_background_tasks
08002a80 g     F .boot_text	00000000 qfp_float2ufix
0800bcc4 g     F .text	0000009c _ZN5codal10MessageBus7processERNS_5EventEb
08009e24 g     F .text	00000008 _ZN3pxt12waitForEventEii
20001034 g     O .bss	00000004 _ZN3pxt8bytecodeE
0800b8a4  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
08007fac g     F .text	00000034 _ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE
080095d4 g     F .text	00000006 _ZN3pxt11RefRefLocal4scanEPS0_
080029de g     F .boot_text	00000000 qfp_fsqrt_fast
08003d44 g     F .boot_text	00000014 debug_flush
08002650 g     F .boot_text	00000042 .hidden __extendsfdf2
080049a8 g     F .boot_text	00000050 webusb_setup
08002394 g     F .boot_text	00000276 .hidden __adddf3
0800a140 g     F .text	00000010 _ZN7control16deviceDalVersionEv
0800a550 g     F .text	00000028 _ZN4pins12spiFrequencyEi
0800c67c g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
0800b190 g     F .text	0000004c _ZN5codal11fiber_sleepEm
0800bdc4 g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08001e8c g     F .boot_text	00000018 rtc_exit_config_mode
0800a60c  w    F .text	00000002 _ZN3pxt16startPerfCounterENS_12PerfCountersE
0800d2cc g     O .text	0000002c _ZTVN5codal3_cm3I2CE
080005d4  w    F .boot_text	00000002 can2_rx1_isr
08003f54 g     F .boot_text	00000004 _ZdlPv
080081cc g     F .text	000000c8 _ZN3pxt6toUIntEPNS_12TValueStructE
08000b80 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
080095cc g     F .text	00000008 _ZN3pxt9RefAction4scanEPS0_
080086c0 g     F .text	00000012 _ZN5Math_4ceilEPN3pxt12TValueStructE
08000000 g       .boot_text	00000000 _boot_text
0800c2cc g     F .text	00000010 _ZN5codal3_cm14alarm_callbackEv
080005d4  w    F .boot_text	00000002 tim1_cc_isr
0800b84c g     F .text	0000002c _ZN5codal27system_timer_event_every_usEmtt
0800c030 g     F .text	00000028 _ZN5codal3_cm3Pin15getAnalogPeriodEv
080058f8 g     F .boot_text	0000009c flash_flush
08000ba0 g     F .boot_text	0000001c rcc_periph_clock_enable
08000f40 g     F .boot_text	00000038 _usbd_reset
0800260c g     F .boot_text	0000001e .hidden __floatunsidf
0800411c g     F .boot_text	00000034 bootloader_poll
08008698 g     F .text	00000012 _ZN5Math_4sqrtEPN3pxt12TValueStructE
08004654 g     F .boot_text	00000050 dump_buffer
0800c2dc g     F .text	00000020 _ZN5codal3_cm5Timer9triggerInEm
080005d4  w    F .boot_text	00000002 sdio_isr
08007590 g     F .text	00000072 _ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii
080086d4 g     F .text	00000012 _ZN5Math_5truncEPN3pxt12TValueStructE
08007a30 g     F .text	0000001e _ZN7String_12fromCharCodeEi
08001274 g     F .boot_text	0000006e _usbd_control_in
080058a8 g     F .boot_text	00000038 backup_write
080005d4  w    F .boot_text	00000002 eth_isr
080099dc g     F .text	00000044 _ZN3pxt7Segment6insertEjPNS_12TValueStructE
08007898 g     F .text	00000004 _ZN7control12waitForEventEii
0800961c g     F .text	00000004 _ZN3pxt6RefMap6gcsizeEPS0_
0800c68c g     F .text	00000006 _ZN5codal3I2C5writeEh
2000000c g     O .boot_data	00000004 rcc_apb1_frequency
08002aa8 g     F .boot_text	00000000 qfp_ufix2float
080058e0 g     F .boot_text	00000018 backup_read
0800a374 g     F .text	00000038 _ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE
2000166f g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
08004c50 g     F .boot_text	00000010 boot_target_get_startup_mode
08003b0c g     F .boot_text	00000014 strtol
08002e98 g     F .boot_text	00000030 __wrap___aeabi_dcmplt
080005d4  w    F .boot_text	00000002 dma1_channel4_isr
08007af8 g     F .text	00000024 _ZN7String_7compareEPN3pxt11BoxedStringES2_
080005d4  w    F .boot_text	00000002 tim8_brk_isr
0800b814 g     F .text	0000001c _ZN5codal25system_timer_current_timeEv
08009b14 g     F .text	0000001c _ZN3pxt5errorENS_9PXT_PANICEi
08002f2c g     F .boot_text	00000034 __wrap___aeabi_dcmpgt
080005d4  w    F .boot_text	00000002 dma2_channel4_5_isr
0800a45c g     F .text	00000004 _ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi
0800bea4 g     F .text	00000024 _ZN5codal14EventQueueItemC1ENS_5EventE
080083b8 g     F .text	0000000c _ZN3pxt7toFloatEPNS_12TValueStructE
08004d58 g     F .boot_text	00000020 boot_target_manifest_bootloader
20001620 g     O .bss	00000004 _ZN5codal12currentFiberE
08002700 g     F .boot_text	0000009e .hidden __aeabi_d2f
0800b810 g     F .text	00000002 _ZN5codal5TimerD2Ev
08000a24 g     F .boot_text	0000000c target_set_alarm_callback
08004d78 g     F .boot_text	00000006 boot_target_get_serial_number
2000164c g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
0800af9c g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
0800a6b8 g     F .text	00000078 _Z18component_callbackN5codal5EventE
08004580 g     F .boot_text	0000002c get_usb_status
20001674 g       .bss	00000000 _ebss
08007550 g     F .text	00000040 _ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE
0800be5c g     F .text	0000001c _ZN5codal5EventC1EttNS_15EventLaunchModeE
0800209c g     F .boot_text	00000034 os_init
08000f80 g     F .boot_text	0000000e usbd_ep_setup
08007d00 g     F .text	00000008 _ZN8Boolean_4bangEi
08008298 g     F .text	0000002a _ZN6numops4lslsEPN3pxt12TValueStructES2_
08000b36 g       .boot_text	00000000 restore_register_context
08009cfc  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08001140 g     F .boot_text	00000030 usbd_register_control_callback
0800b724 g     F .text	00000028 _ZN5codal5Timer4syncEm
20000000 g     O .boot_data	00000004 hal_data_test
080005d4  w    F .boot_text	00000002 pvd_isr
08000fa0 g     F .boot_text	0000000e usbd_ep_read_packet
080095f4 g     F .text	00000012 _ZN3pxt14RefRecord_scanEPNS_9RefRecordE
0800c86c g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800be78 g     F .text	00000018 _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08009698 g     F .text	00000010 _ZN3pxt6RefMap5printEPS0_
0800b528 g     F .text	00000020 calloc
08003eec g     F .boot_text	0000004c platform_setup
08008788 g     F .text	00000010 _ZN6numops3eqqEPN3pxt12TValueStructES2_
08007f18 g     F .text	00000006 _ZN6Array_3popEPN3pxt13RefCollectionE
08009b48 g     F .text	0000000c _ZN3pxt13getNumGlobalsEv
08009618 g     F .text	00000004 _ZN3pxt11RefRefLocal6gcsizeEPS0_
08002a7e g     F .boot_text	00000000 qfp_float2uint
0800aa5c  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08002360 g     F .boot_text	0000000c os_event_init
08009ddc g     F .text	00000024 _ZN3pxt10runForeverEPNS_12TValueStructE
0800af5c g     F .text	0000001c _ZN5codal12create_fiberEPFvvES1_
080097c8 g     F .text	00000044 _ZN3pxt15mkClassInstanceEPNS_6VTableE
08007b1c g     F .text	00000004 _ZN7String_6lengthEPN3pxt11BoxedStringE
20000960 g     O .boot_bss	00000004 usbd_dev
0800788c g     F .text	00000006 _ZN7control10waitMicrosEi
08000924 g     F .boot_text	00000004 target_disable_irq
08003f78 g     F .boot_text	00000010 led_on
08002394 g     F .boot_text	00000276 .hidden __aeabi_dadd
0800b298 g     F .text	00000020 _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000168 g     F .boot_text	0000039c baseloader_start
080020d8 g     F .boot_text	0000000c os_running
20000c82 g     O .boot_bss	00000001 last_running_task
0800a614  w    F .text	00000002 _ZN3pxt16dumpPerfCountersEv
0800baf4 g     F .text	00000084 _ZN5codal10MessageBusD2Ev
080005d8  w    F .boot_text	00000002 sv_call_handler
0800cbb0 g     O .text	00000024 _ZN3pxt9buffer_vtE
08007864 g     F .text	0000001c _ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi
080005d4  w    F .boot_text	00000002 rcc_isr
08002e34 g     F .boot_text	00000030 __wrap___aeabi_dsub
08000000 g     O .boot_text	00000150 vector_table
08000be0 g     F .boot_text	00000070 desig_get_unique_id_as_string
08002694 g     F .boot_text	0000006a .hidden __aeabi_ul2d
08000b06 g       .boot_text	00000000 save_register_context
08002b92 g     F .boot_text	00000000 qfp_fexp
08008340 g     F .text	0000001e _ZN6numops4bnotEPN3pxt12TValueStructE
080045e8 g     F .boot_text	00000050 aggregate_register_callback
08002b80 g     F .boot_text	00000000 qfp_fcos
08009688 g     F .text	00000010 _ZN3pxt11RefRefLocal5printEPS0_
08007000 g     F .text	00000118 application_start
08009a78 g     F .text	00000010 _ZN3pxt13RefCollectionC2Ev
0800a24c g     F .text	000000a8 _ZN3pxt6getPinEi
08007380 g     F .text	00000012 _ZN5Math_5acoshEPN3pxt12TValueStructE
08007f48 g     F .text	00000010 _ZN3pxt11programSizeEv
080005d4  w    F .boot_text	00000002 flash_isr
0800d6e4 g       *ABS*	00000000 _data_loadaddr
0800ae5c g     F .text	00000098 _ZN5codal19fiber_wake_on_eventEtt
0800a150 g     F .text	00000008 _ZN7control19allocateNotifyEventEv
20005000 g       .boot_buf	00000000 end
080005d4  w    F .boot_text	00000002 uart4_isr
08008414 g     F .text	00000058 _ZN6numops4mulsEPN3pxt12TValueStructES2_
08001f7c g     F .boot_text	0000005c rtc_interrupt_enable
0800bfd0 g     F .text	00000060 _ZN5codal3_cm3Pin15setDigitalValueEi
0800061c g     F .boot_text	00000030 rtc_alarm_isr
0800789c g     F .text	00000004 _ZN7control18deviceSerialNumberEv
080005d4  w    F .boot_text	00000002 exti15_10_isr
08006728 g     O .boot_init_array	00000004 __boot_init_array_end
0800ae4c g     F .text	00000010 _ZN5codal23fiber_scheduler_runningEv
0800a858  w    F .text	00000006 _ZN5codal11CodalDevice4waitEm
0800b74c g     F .text	000000c2 _ZN5codal5Timer7triggerEv
0800b548 g     F .text	0000002e device_realloc
0800bf2c g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
0800098c g     F .boot_text	00000004 tcb_get_stack_base
0800be90 g     F .text	00000012 _ZN5codal5EventC2Ev
08004e58 g     F .boot_text	00000054 cdcadm_transmit
08002108 g     F .boot_text	00000060 os_msgQ_tick
08000978 g     F .boot_text	00000006 tcb_allocate
080082f0 g     F .text	00000028 _ZN6numops4eorsEPN3pxt12TValueStructES2_
0800d248 g     O .text	00000018 _ZTVN5codal5TimerE
080038e4 g     F .boot_text	0000013c fmod
0800b3e8 g     F .text	00000024 _Z16device_heap_sizeh
08003144 g     F .boot_text	00000034 cos
0800d388 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
08009c5c g     F .text	0000000c _ZN3pxt5startEv
0800d61c g     O .text	00000048 PinMap_SPI_NSS
08003478 g     F .boot_text	000000b8 tanh
080005d4  w    F .boot_text	00000002 hard_fault_handler
0800c704 g     F .text	00000094 _ZN5codal3I2C5writeEtPhib
080005d4  w    F .boot_text	00000002 exti1_isr
08007ea4 g     F .text	0000001c _ZN3pxt8fromUIntEj
0800bfc8 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
0800a164 g     F .text	00000010 _ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv
08002efc g     F .boot_text	00000030 __wrap___aeabi_dcmpge
080021f8 g     F .boot_text	00000098 os_task_tick
0800c3a8 g     F .text	0000005c _ZN5codal3_cm5Timer4initEv
08004638 g     F .boot_text	0000001c usb_set_serial_number
08008de8 g     F .text	0000000c _ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
080005d4  w    F .boot_text	00000002 i2c1_ev_isr
20001084 g     O .bss	00000008 _ZN3pxt9lastEventE
0800b284 g     F .text	00000014 _ZN5codal13release_fiberEv
08000bbc g     F .boot_text	00000024 rcc_periph_reset_pulse
0800293c g     F .boot_text	00000000 qfp_fmul
0800d664 g     O .text	00000048 PinMap_SPI_SCK
08001bc0 g     F .boot_text	00000088 st_usbfs_ep_write_packet
08009594 g     F .text	0000001c _ZN3pxt13registerGCPtrEPNS_12TValueStructE
08001a34 g     F .boot_text	00000048 st_usbfs_endpoints_reset
0800aa3c g     F .text	0000001e codal_dmesg
08002390 g     F .boot_text	0000027a .hidden __aeabi_dsub
080005d4  w    F .boot_text	00000002 dma2_channel1_isr
0800b8dc  w    F .text	00000030 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
0800a6b0  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
0800b49c g     F .text	0000004c device_malloc
08002bfc g     F .boot_text	00000000 qfp_fln
080084f4 g     F .text	00000026 _ZN5Math_3powEPN3pxt12TValueStructES2_
08003cf4 g     F .boot_text	00000002 enable_log
08009404 g     F .text	0000001a _ZN3pxt15gcAllocateArrayEi
08003bc0 g     F .boot_text	0000002e strstr
080005d8  w    F .boot_text	00000002 pend_sv_handler
08007f94 g     F .text	00000004 _ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE
08003128 g     F .boot_text	0000001c sin
08002694 g     F .boot_text	0000006a .hidden __floatundidf
08003f48 g     F .boot_text	00000008 __cxa_pure_virtual
0800ab9c g     F .text	000000e8 _ZN5codal15scheduler_eventENS_5EventE
08002068 g     F .boot_text	00000030 rtc_check_flag
0800d58c g     O .text	00000048 PinMap_SPI_MISO
0800a5b8 g     F .text	0000003c _ZN3pxt9dumpDmesgEv
080005d4  w    F .boot_text	00000002 spi2_isr
08003194 g     F .boot_text	00000054 atan2
08009654 g     F .text	0000000c _ZN3pxt6RefMap7destroyEPS0_
0800a84c  w    F .text	00000006 _ZN5codal11CodalDevice5panicEi
0800bf30 g     F .text	0000001c _ZN5codal3_cm3Pin14setAnalogValueEi
2000166c g     O .bss	00000001 _ZN3pxt4inGCE
08002e04 g     F .boot_text	00000030 __wrap___aeabi_dadd
08000898 g     F .boot_text	00000030 target_init
20000ce0 g       .boot_bss	00000000 boot_end
0800ad0c g     F .text	00000140 _ZN5codal14scheduler_initERNS_10EventModelE
08002304 g     F .boot_text	00000034 os_task_run
08008df4 g     F .text	00000060 _ZN3pxt16popThreadContextEPNS_13ThreadContextE
0800bf08 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
0800a5f4  w    F .text	00000002 _ZN3pxt4incrEPNS_12TValueStructE
08000fb8 g     F .boot_text	00000008 usbd_ep_stall_get
08002e64 g     F .boot_text	00000034 __wrap___aeabi_dcmpeq
08002a54 g     F .boot_text	00000000 qfp_float2int
080005d4  w    F .boot_text	00000002 tim8_up_isr
08009c68 g     F .text	0000002a _ZN6Array_7isArrayEPN3pxt12TValueStructE
08002c20 g     F .boot_text	00000000 qfp_fatan2
0800309c g     F .boot_text	0000008c pow
08003bee g     F .boot_text	0000002a strncpy
0800332c g     F .boot_text	000000a8 sinh
08003680 g     F .boot_text	000000c8 atanh
08003074 g     F .boot_text	00000028 log10
08002168 g     F .boot_text	0000000c os_sem_init
0800be20 g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800a320 g     F .text	0000000c _ZN4pins13pulseDurationEv
08009468 g     F .text	00000074 realloc
08009420 g     F .text	0000001e app_alloc
08008388 g     F .text	0000002e _ZN6numops4lsrsEPN3pxt12TValueStructES2_
0800986c g     F .text	0000001c _ZN3pxt9LLSegment3popEv
0800a610  w    F .text	00000002 _ZN3pxt15stopPerfCounterENS_12PerfCountersE
0800800c g     F .text	0000001e _ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE
0800262c g     F .boot_text	00000022 .hidden __aeabi_i2d
080005d4  w    F .boot_text	00000002 dma2_channel2_isr
08009b10 g     F .text	00000002 _ZN3pxt13debugMemLeaksEv
080018b4 g     F .boot_text	00000014 flash_set_ws
08006728 g     O .boot_fini_array	00000004 __boot_fini_array_end
08000cfc g     F .boot_text	00000098 rcc_set_rtc_clock_source
080018d8 g     F .boot_text	00000044 st_usbfs_set_ep_rx_bufsize
080046a4 g     F .boot_text	00000178 dump_usb_request
08006728 g       .boot_init_array	00000000 _boot_etext
0800d260  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08003b60 g     F .boot_text	0000001e memcmp
08002a9c g     F .boot_text	00000000 qfp_fix2float
08001170 g     F .boot_text	00000064 _usbd_control_setup
08008ce4 g     F .text	00000054 _ZN3pxt10failedCastEPNS_12TValueStructE
0800bfa8 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
080005d8  w    F .boot_text	00000002 debug_monitor_handler
080005d4  w    F .boot_text	00000002 exti3_isr
080005d4  w    F .boot_text	00000002 adc3_isr
080088d8 g     F .text	00000004 _ZN3pxt9switch_eqEPNS_12TValueStructES1_
0800b8bc  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
08000ac2 g       .boot_text	00000000 save_context
080005d4  w    F .boot_text	00000002 tim3_isr
08000b64 g     F .boot_text	00000010 scb_reset_system
08002b8a g     F .boot_text	00000000 qfp_ftan
080005d4  w    F .boot_text	00000002 usart2_isr
08002ec8 g     F .boot_text	00000034 __wrap___aeabi_dcmple
08000950 g     F .boot_text	00000020 target_panic
0800a34c g     F .text	00000006 _ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb
08003e38 g     F .boot_text	0000000a debug_print
080005d4  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08007000 g       .text	00000000 _text
08009994 g     F .text	00000048 _ZN3pxt7Segment6removeEj
0800964c g     F .text	00000008 _ZN3pxt13RefCollection7destroyEPS0_
08000a40 g       .boot_text	00000000 swap_context
20004c00 g     O .boot_buf	00000400 flashBuf
08008a90 g     F .text	00000022 _ZN6numops2leEPN3pxt12TValueStructES2_
0800236c g     F .boot_text	0000000c os_signal_event
0800d6e4 g       .fini_array	00000000 __fini_array_start
080005d4  w    F .boot_text	00000002 i2c2_er_isr
080078ec g     F .text	0000001c _ZN3pxt11findBindingEii
08009824 g     F .text	00000018 _ZN3pxt15RefRecord_printEPNS_9RefRecordE
08008f08 g     F .text	00000058 _ZN3pxt9gcProcessEPNS_12TValueStructE
080072f4 g     F .text	00000012 _ZN5Math_4log2EPN3pxt12TValueStructE
08002098 g     F .boot_text	00000002 os_cbkSleep
08008c68 g     F .text	0000007c _ZN3pxt8anyPrintEPNS_12TValueStructE
08001b7c g     F .boot_text	00000044 st_usbfs_ep_nak_set
080085f8 g     F .text	00000012 _ZN5Math_3logEPN3pxt12TValueStructE
080092d8 g     F .text	0000012c _ZN3pxt10gcAllocateEi
08003bb0 g     F .boot_text	00000010 memset
20001648 g     O .bss	00000004 _ZN5codal12system_timerE
08007118 g     F .text	0000000a main
0800af78 g     F .text	00000024 _ZN5codal12create_fiberEPFvPvES0_S2_
08002b3e g     F .boot_text	00000000 qfp_fsin
08000ee8 g     F .boot_text	00000054 usbd_init
0800851c g     F .text	00000026 _ZN5Math_5atan2EPN3pxt12TValueStructES2_
2000111c g     O .bss	00000100 _ZN5codal14CodalComponent10componentsE
0800c86c g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
080005d4  w    F .boot_text	00000002 i2c2_ev_isr
08002378 g     F .boot_text	00000010 os_event_set_signaling_tid
0800a3ac g     F .text	00000080 _ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei
080005d4  w    F .boot_text	00000002 uart5_isr
080074a8 g     F .text	00000026 _ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii
080040c4 g     F .boot_text	00000034 platform_set_alarm
20001640 g     O .bss	00000008 heap
20001060 g     O .bss	00000024 _ZN3pxt8devTimerE
20000c84 g     O .boot_bss	0000005b hf2_buffer_mini
0800c178 g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
08007f98 g     F .text	00000014 _ZN5pxtrt8mklocRefEv
080005d8  w    F .boot_text	00000002 sys_tick_handler
0800d27c  w    O .text	00000014 _ZTVN5codal10EventModelE
08002338 g     F .boot_text	00000028 os_on_assert
08002700 g     F .boot_text	0000009e .hidden __truncdfsf2
0800baf4 g     F .text	00000084 _ZN5codal10MessageBusD1Ev
08008120 g     F .text	00000002 _ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE
0800d6e4 g       .init_array	00000000 __init_array_end
080005d4  w    F .boot_text	00000002 fsmc_isr
080005d4  w    F .boot_text	00000002 dma1_channel1_isr
080005d4  w    F .boot_text	00000002 exti4_isr
08007e80 g     F .text	0000000e _ZN3pxt9fromFloatEf
0800a510 g     F .text	00000040 _ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_
0800c374 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
08008544 g     F .text	000000b2 _ZN5Math_11randomRangeEPN3pxt12TValueStructES2_
0800d300 g     O .text	00000054 _ZTVN5codal3_cm3PinE
080026a4 g     F .boot_text	0000005a .hidden __aeabi_l2d
08002bc2 g     F .boot_text	00000000 qfp_fsqrt
20000004 g     O .boot_data	00000004 codal_heap_start
080080c8 g     F .text	00000038 _ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE
08007edc g     F .text	00000006 _ZN5Math_4imulEii
0800c164 g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
0800b63c g     F .text	00000030 _ZN5codal5TimerC2Ev
080008c8 g     F .boot_text	00000010 target_wait_for_event
0800b1dc g     F .text	0000002c _ZN5codal20fiber_wait_for_eventEtt
08005870 g     F .boot_text	00000038 usb21_setup
0800b578 g     F .text	0000002e _ZN5codal8ListenerC2EttPFvNS_5EventEEt
08003d58 g     F .boot_text	00000028 debug_force_flush
08009dd0 g     F .text	00000004 _ZN3pxt12releaseFiberEv
0800c148 g     F .text	0000000e _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
08009a98 g     F .text	00000014 _ZN3pxt6RefMapC1Ev
08003d80 g     F .boot_text	00000088 _Z11debug_printj
08008708 g     F .text	0000007e _ZN3pxt8eqq_boolEPNS_12TValueStructES1_
08003030 g     F .boot_text	0000001c exp
0800a860  w    F .text	00000004 _ZN5codal11CodalDevice5resetEv
0800bf04 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08009760 g     F .text	00000002 _ZN3pxt11RefRefLocal7destroyEPS0_
08007cf0 g     F .text	0000000e _ZN7String_8includesEPN3pxt11BoxedStringES2_i
08007a8c g     F .text	0000006c _ZN7String_6concatEPN3pxt11BoxedStringES2_
08009f7c g     F .text	00000004 _ZN3pxt15current_time_msEv
0800bb9c g     F .text	000000b0 _ZN5codal10MessageBusC1Ev
08003b3c g     F .boot_text	00000014 strcmp
08002a9a g     F .boot_text	00000000 qfp_int2float
08009888 g     F .text	00000090 _ZN3pxt7Segment9growByMinEt
0800b90c g     F .text	00000084 _ZN5codal10MessageBus6removeEPNS_8ListenerE
08007478 g     F .text	00000004 _ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE
08001e4c g     F .boot_text	0000001c exti_enable_request
08003178 g     F .boot_text	0000001c tan
08008634 g     F .text	00000012 _ZN5Math_3sinEPN3pxt12TValueStructE
08001dfc g     F .boot_text	00000050 exti_set_trigger
080005d4  w    F .boot_text	00000002 mem_manage_handler
0800c46c g     F .text	00000070 restart_callback
0800963c g     F .text	0000000a _ZN5loops5pauseEi
0800bf7c g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800bf9c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
08007b20 g     F .text	0000016c _ZN7String_8mystrtodEPKcPPc
20000010 g     O .boot_data	00000004 rcc_apb2_frequency
08001ea4 g     F .boot_text	00000040 rtc_set_alarm_time
0800be90 g     F .text	00000012 _ZN5codal5EventC1Ev
08007618 g     F .text	00000008 _ZN7control12createBufferEi
08000f78 g     F .boot_text	00000008 usbd_poll
0800c684 g     F .text	00000006 _ZN5codal3I2C4stopEv
08000a10 g     F .boot_text	00000002 _fini
0800b830 g     F .text	0000001c _ZN5codal28system_timer_current_time_usEv
080008d8 g     F .boot_text	00000014 target_wait
08009b3c g     F .text	0000000c _ZN3pxt11programHashEv
080005d4  w    F .boot_text	00000002 can2_tx_isr
080031e8 g     F .boot_text	000000b0 atan
0800bf10 g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
0800860c g     F .text	00000012 _ZN5Math_5log10EPN3pxt12TValueStructE
0800b2cc g     F .text	000000a0 _ZN5codal6invokeEPFvPvES0_
080083c4 g     F .text	00000026 _ZN6numops4addsEPN3pxt12TValueStructES2_
2000121c g     O .bss	00000404 codalLogStore
080078b0 g     F .text	00000004 _ZN7control10dmesgValueEPN3pxt12TValueStructE
080005d4  w    F .boot_text	00000002 exti9_5_isr
080073f8 g     F .text	00000004 _ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE
08007f58 g     F .text	00000038 _ZN3pxt9getConfigEii
08003f88 g     F .boot_text	00000010 led_off
0800a234  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
08003298 g     F .boot_text	00000094 asin
080005d4  w    F .boot_text	00000002 dma2_channel3_isr
08002a56 g     F .boot_text	00000000 qfp_float2fix
08000cec g     F .boot_text	00000010 rcc_enable_rtc_clock
0800ba78 g     F .text	0000007c _Z14async_callbackPv
20000428 g     O .boot_data	00000004 _impure_ptr
08001810 g     F .boot_text	00000040 _usbd_standard_request_endpoint
0800a6ac  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
08002290 g     F .boot_text	00000074 os_task_signal_event
080095b0 g     F .text	00000012 _ZN3pxt15unregisterGCPtrEPNS_12TValueStructE
080005dc g     F .boot_text	00000010 target_in_isr
0800d6d8 g       .preinit_array	00000000 __preinit_array_end
08001de0 g     F .boot_text	0000001a nvic_enable_irq
08003f98 g     F .boot_text	00000010 led_wait
08000a3c g     F .boot_text	00000004 target_enable_debug
0800846c g     F .text	00000026 _ZN6numops3divEPN3pxt12TValueStructES2_
080005d4  w    F .boot_text	00000002 dma1_channel7_isr
08004ce8 g     F .boot_text	0000002c boot_target_usb_init
08003fa8 g     F .boot_text	0000011c platform_start_timer
08009e2c g     F .text	0000012c _ZN3pxt11initRuntimeEv
0800b578 g     F .text	0000002e _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08004ef8 g     F .boot_text	0000002c cdc_setup
20001000 g       .data	00000000 _data
080005d4  w    F .boot_text	00000002 tim1_up_isr
08008360 g     F .text	00000028 _ZN6numops4andsEPN3pxt12TValueStructES2_
08007ee4 g     F .text	00000006 _ZN5Math_4idivEii
08001ee4 g     F .boot_text	00000040 rtc_set_prescale_val
0800a578 g     F .text	0000002c _ZN4pins7spiModeEi
08007744 g     F .text	00000120 _ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE
0800c32c g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
08007e64 g     F .text	0000001c _ZN7String_10charCodeAtEPN3pxt11BoxedStringEi
0800c058 g     F .text	00000038 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
080035d4 g     F .boot_text	000000ac acosh
08007414 g     F .text	00000012 _ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii
20001650 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
0800bf10 g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000d94 g     F .boot_text	000000cc rcc_clock_setup_in_hse_8mhz_out_72mhz
0800c2fc g     F .text	00000030 _ZN5codal3_cm13tick_callbackEv
08002fc0 g     F .boot_text	00000038 __wrap___aeabi_d2uiz
0800c880 g     O .text	00000324 _ZN3pxt20functionsAndBytecodeE
08002aa6 g     F .boot_text	00000000 qfp_uint2float
08007f0c g     F .text	0000000c _ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE
08007f40 g     F .text	00000006 _ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
08008e8c g     F .text	00000048 _ZN3pxt10gcScanManyEPPNS_12TValueStructEj
0800bee4 g     F .text	00000020 _ZN5codal22MemberFunctionCallbackeqERKS0_
0800a128 g     F .text	00000016 _ZN7control10raiseEventEii
08001f24 g     F .boot_text	00000018 rtc_get_counter_val
0800a23c  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800c0f4 g     F .text	0000000e _ZN5codal3_cm3Pin15setAnalogPeriodEi
08009f80 g     F .text	0000000c _ZN3pxt16getThreadContextEv
08000b90 g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
080005d4  w    F .boot_text	00000002 can2_sce_isr
08008ad8 g     F .text	0000001e _ZN6numops2geEPN3pxt12TValueStructES2_
080005d4  w    F .boot_text	00000002 tim4_isr
0800980c g     F .text	0000000a _ZN3pxt9RefObject9destroyVTEv
0800d6ac g     O .text	0000002c _ZTVN5codal3I2CE
0800bc4c g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
08008af8 g     F .text	0000001e _ZN6numops2gtEPN3pxt12TValueStructES2_
08001a7c g     F .boot_text	000000c0 st_usbfs_ep_stall_set
0800bc70 g     F .text	00000054 _ZN5codal10MessageBus21deleteMarkedListenersEv
08007a24 g     F .text	0000000c _ZN7String_7mkEmptyEv
0800a1b4 g     F .text	0000004c _ZN4pins13i2cReadBufferEiib
080044d4 g     F .boot_text	000000ac usb_setup
20000ce0 g       .boot_bss	00000000 _boot_ebss
2000100c g       .data	00000000 _edata
0800b36c g     F .text	00000028 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
0800b990 g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
080005d4  w    F .boot_text	00000002 dma1_channel2_isr
0800d168  w    O .text	00000054 _ZTVN5codal16STM32BluePillPinE
080005d4  w    F .boot_text	00000002 i2c1_er_isr
0800be78 g     F .text	00000018 _ZN5codal5EventC2EttmNS_15EventLaunchModeE
0800a854  w    F .text	00000004 _ZN5codal11CodalDevice15getSerialNumberEv
080017b8 g     F .boot_text	00000058 _usbd_standard_request_device
0800ac84 g     F .text	00000054 _Z15getFiberContextv
08000920 g     F .boot_text	00000004 target_enable_irq
08009560 g     F .text	00000034 _ZN3pxt10registerGCEPPNS_12TValueStructEi
0800b624 g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
080005d4  w    F .boot_text	00000002 can_sce_isr
0800c174 g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
0800a318 g     F .text	00000008 _ZN4pins12createBufferEi
0800294c g     F .boot_text	00000000 qfp_fdiv
080005d8  w    F .boot_text	00000002 nmi_handler
08001fd8 g     F .boot_text	0000005c rtc_interrupt_disable
08002920 g     F .boot_text	00000000 qfp_fcmp
08006728 g     O .boot_preinit_array	00000004 __boot_preinit_array_end
08003f50 g     F .boot_text	00000004 _Znwj
20000b7c g     O .boot_bss	00000008 st_usbfs_force_nak
08008648 g     F .text	00000012 _ZN5Math_3cosEPN3pxt12TValueStructE
0800d290 g     O .text	0000003c _ZTVN5codal10MessageBusE
080079e4 g     F .text	00000040 _ZN3pxt9getRandomEj
20000000 g       .boot_data	00000000 _boot_data
0800b394 g     F .text	00000018 _ZN5codal9idle_taskEv
0800a354 g     F .text	00000020 _ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE
0800304c g     F .boot_text	00000028 log2
080078a0 g     F .text	0000000e _ZN7control5__logEiPN3pxt11BoxedStringE
0800bb94 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
08008318 g     F .text	00000028 _ZN6numops4orrsEPN3pxt12TValueStructES2_
080005d4  w    F .boot_text	00000002 tim8_cc_isr
0800975c g     F .text	00000002 _ZN3pxt9RefAction7destroyEPS0_
08007954 g     F .text	0000004c _ZN3pxt8mkStringEPKci
080089b0 g     F .text	00000014 _ZN6numops10toBoolDecrEPN3pxt12TValueStructE
0800a5a8 g     F .text	00000010 _ZN3pxt10sendSerialEPKci
08007db4 g     F .text	000000a0 _ZN7String_8toNumberEPN3pxt11BoxedStringE
200047bc g       .boot_buf	00000000 _boot_stack
0800b88c g     F .text	00000016 _ZN5codal10MessageBus9elementAtEi
0800a334  w    F .text	00000006 _ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi
0800a834  w    F .text	00000008 _ZN5codal11CodalDevice10getVersionEv
08001cfc g     F .boot_text	000000e4 st_usbfs_poll
08006170 g     O .boot_text	00000018 webusb_platform_capability_descriptor
0800bb78 g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
08007fe0 g     F .text	00000004 _ZN5pxtrt5panicEi
0800960c g     F .text	0000000a _ZN3pxt9RefAction6gcsizeEPS0_
0800b17c g     F .text	00000014 _ZN5codal8scheduleEv
08006728 g     O .boot_init_array	00000004 __boot_init_array_start
08009978 g     F .text	0000001c _ZN3pxt7Segment3popEv
08004c78 g     F .boot_text	00000070 boot_target_gpio_setup
0800bf4c g     F .text	0000002c _ZN5codal3_cm3Pin13setServoValueEiii
20000b78 g     O .boot_bss	00000004 hal_bss_test
080005d4  w    F .boot_text	00000002 tamper_isr
08008b18 g     F .text	00000100 _ZN6numops8toStringEPN3pxt12TValueStructE
08005bbe g     O .boot_text	00000101 _ctype_
0800a844  w    F .text	00000006 _ZN5codal11CodalDevice10seedRandomEm
0800d6d8 g       .init_array	00000000 __init_array_start
08000b78 g     F .boot_text	00000006 gpio_clear
080045ac g     F .boot_text	0000003c aggregate_register_config_callback
0800a730 g     F .text	000000dc _ZN5codal14CodalComponent12addComponentEv
0800731c g     F .text	00000012 _ZN5Math_4tanhEPN3pxt12TValueStructE
08009764 g     F .text	00000064 _ZN3pxt8mkActionEiPNS_9RefActionE
0800a444 g     F .text	00000004 _ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi
080005d4  w    F .boot_text	00000002 eth_wkup_isr
08007d08 g     F .text	000000ac _ZN3pxt10fromDoubleEd
08003f38 g     F .boot_text	00000010 enable_debug
08000e94 g     F .boot_text	00000022 st_usbfs_copy_to_pm
0800802c g     F .text	00000088 _ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE
080094dc g     F .text	00000084 _ZN3pxt17pushThreadContextEPvS0_
0800bddc g     F .text	00000042 _ZN5codal10MessageBus4idleENS_5EventE
0800be5c g     F .text	0000001c _ZN5codal5EventC2EttNS_15EventLaunchModeE
0800747c g     F .text	0000002a _ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii
0800b878  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08009648 g     F .text	00000002 _ZN3pxt17RefRecord_destroyEPNS_9RefRecordE
08002174 g     F .boot_text	00000044 os_task_init
08007ff8 g     F .text	00000014 _ZN5pxtrt5mkMapEv
08007880 g     F .text	00000004 _ZN7control6millisEv
0800bd60 g     F .text	00000062 _ZN5codal10MessageBus10queueEventERNS_5EventE
08008a6c g     F .text	00000024 _ZN6numops7lt_boolEPN3pxt12TValueStructES2_
08000eb8 g     F .boot_text	00000030 st_usbfs_copy_from_pm
08004c60 g     F .boot_text	00000018 boot_target_set_led
08003b50 g     F .boot_text	00000010 strlen
08000980 g     F .boot_text	00000004 tcb_configure_lr
08003ec8 g     F .boot_text	00000024 debug_printhex_unsigned
20000540 g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
20005000 g       .boot_buf	00000000 _eboot_buf
08008798 g     F .text	00000010 _ZN6numops4neqqEPN3pxt12TValueStructES2_
08000b74 g     F .boot_text	00000004 gpio_set
0800c124 g     F .text	0000001e _ZN5codal3_cm3Pin5setupEhh
08007ecc g     F .text	0000000e _ZN5Math_6randomEv
08009d9c g     F .text	00000020 _ZN3pxt12forever_stubEPv
08007358 g     F .text	00000012 _ZN5Math_5atanhEPN3pxt12TValueStructE
0800736c g     F .text	00000012 _ZN5Math_5asinhEPN3pxt12TValueStructE
0800b5bc g     F .text	00000068 _ZN5codal8Listener5queueENS_5EventE
08009c94 g     F .text	00000068 _ZN5pxtrt6keysOfEPN3pxt12TValueStructE
08002650 g     F .boot_text	00000042 .hidden __aeabi_f2d
080005d4  w    F .boot_text	00000002 bus_fault_handler
080005d4  w    F .boot_text	00000002 wwdg_isr
20001030 g     O .bss	00000004 _ZN3pxt7globalsE
08007eec g     F .text	00000014 _ZN6Array_2mkEv
08008c18 g     F .text	00000050 _ZN3pxt6typeOfEPNS_12TValueStructE
080005d4  w    F .boot_text	00000002 dma1_channel3_isr
0800b630 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
080072a0 g     F .text	00000054 _ZN5Math_12randomDoubleEv
08009dbc  w    F .text	00000014 _ZN5codal3_cm5TimerD1Ev
0800a644 g     F .text	00000064 _ZN5codal4itoaEiPc
20001038 g     O .bss	00000024 _ZN3pxt13devMessageBusE
08009958 g     F .text	0000001e _ZN3pxt7Segment9setLengthEj
08009f98 g     F .text	000000d4 _ZN3pxt15gcProcessStacksEi
08002cd8 g     F .boot_text	000000cc acos
08001f3c g     F .boot_text	00000040 rtc_set_counter_val
20000b84 g     O .boot_bss	000000fc st_usbfs_dev
0800b810 g     F .text	00000002 _ZN5codal5TimerD1Ev
08007f38 g     F .text	00000006 _ZN6Array_8removeAtEPN3pxt13RefCollectionEi
08007308 g     F .text	00000012 _ZN5Math_3expEPN3pxt12TValueStructE
08008d38 g     F .text	0000001c _ZN3pxt15missingPropertyEPNS_12TValueStructE
08009d1c g     F .text	00000070 _ZN3pxt13dispatchEventEN5codal5EventE
08002390 g     F .boot_text	0000027a .hidden __subdf3
080020e4 g     F .boot_text	00000024 os_msgQ_init
0800d6d8 g       .preinit_array	00000000 __preinit_array_start
08003748 g     F .boot_text	0000008c trunc
08007888 g     F .text	00000004 _ZN7control5resetEv
08001c48 g     F .boot_text	000000b4 st_usbfs_ep_read_packet
08009a98 g     F .text	00000014 _ZN3pxt6RefMapC2Ev
080005d4  w    F .boot_text	00000002 spi3_isr
0800a158 g     F .text	0000000c _ZN7control5dmesgEPN3pxt11BoxedStringE
0800892c g     F .text	0000001c _ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE
08009a88 g     F .text	00000010 _ZN3pxt11RefRefLocalC2Ev
0800a2f4 g     F .text	00000012 _ZN3pxt9getPinCfgEi
08008294 g     F .text	00000004 _ZN3pxt5toIntEPNS_12TValueStructE
08000a14 g     F .boot_text	00000004 __aeabi_atexit
08003e78 g     F .boot_text	00000004 debug_print_int
080066d0 g     O .boot_text	00000055 infoUf2File
08000150 g     O .boot_text	00000018 base_vector_table
08008494 g     F .text	00000060 _ZN6numops3modEPN3pxt12TValueStructES2_
080040f8 g     F .boot_text	00000004 millis
0800bfb8 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000a18 g     F .boot_text	0000000c target_set_tick_callback
080005d4  w    F .boot_text	00000002 tim2_isr
08008684 g     F .text	00000012 _ZN5Math_4acosEPN3pxt12TValueStructE
08003e7c g     F .boot_text	00000004 debug_print_unsigned
08006254 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08009290 g     F .text	00000048 free
08009e00 g     F .text	00000024 _ZN3pxt13runInParallelEPNS_12TValueStructE
08001e74 g     F .boot_text	00000018 rtc_enter_config_mode
080018c8 g     F .boot_text	00000010 st_usbfs_set_address
080005d4  w    F .boot_text	00000002 exti0_isr
080095dc g     F .text	00000016 _ZN3pxt6RefMap4scanEPS0_
0800c684 g     F .text	00000006 _ZN5codal3I2C5startEv



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 4d 06 00 08 d9 05 00 08 d5 05 00 08     .P. M...........
 8000010:	d5 05 00 08 d5 05 00 08 d5 05 00 08 00 00 00 00     ................
	...
 800002c:	d9 05 00 08 d9 05 00 08 00 00 00 00 d9 05 00 08     ................
 800003c:	d9 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800004c:	ed 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800005c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800006c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800007c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800008c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800009c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 80000ac:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 80000bc:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 80000cc:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 80000dc:	d5 05 00 08 d5 05 00 08 1d 06 00 08 d5 05 00 08     ................
 80000ec:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 80000fc:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800010c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800011c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800012c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800013c:	d5 05 00 08 d5 05 00 08 d5 05 00 08 d5 05 00 08     ................
 800014c:	d5 05 00 08                                         ....

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 69 01 00 08 d4 05 00 08     i.."....i.......
 8000160:	01 70 00 08 22 05 69 19                             .p..".i.

08000168 <baseloader_start>:

//  To perform flashing, jump to the New Baseloader Address in the End Base Vector Table,
//  adjusted to the End Base Vector Table Address.

//  This must be the first function in the file.  Macros appearing before the function are OK.
int baseloader_start(uint32_t *dest0, const uint32_t *src0, size_t byte_count) {
 8000168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	half_word_count = byte_count / 2;
	bytes_flashed = 0;
	should_disable_interrupts = false;

    static uint16_t *erase_start, *erase_end, *flash_end;
    verified = true; erase_start = NULL; erase_end = NULL;
 800016c:	2501      	movs	r5, #1
	bytes_flashed = 0;
 800016e:	2300      	movs	r3, #0
	half_word_count = byte_count / 2;
 8000170:	fa22 fc05 	lsr.w	ip, r2, r5
	dest = (uint16_t *) dest0;
 8000174:	4aa9      	ldr	r2, [pc, #676]	; (800041c <baseloader_start+0x2b4>)
    flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 8000176:	4caa      	ldr	r4, [pc, #680]	; (8000420 <baseloader_start+0x2b8>)
	dest = (uint16_t *) dest0;
 8000178:	6010      	str	r0, [r2, #0]
	half_word_count = byte_count / 2;
 800017a:	4aaa      	ldr	r2, [pc, #680]	; (8000424 <baseloader_start+0x2bc>)
    flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 800017c:	4eaa      	ldr	r6, [pc, #680]	; (8000428 <baseloader_start+0x2c0>)
	half_word_count = byte_count / 2;
 800017e:	f8c2 c000 	str.w	ip, [r2]
	bytes_flashed = 0;
 8000182:	4aaa      	ldr	r2, [pc, #680]	; (800042c <baseloader_start+0x2c4>)

	//  Disable interrupts when overwriting the vector table.
	if ((uint32_t) dest == FLASH_BASE) { should_disable_interrupts = true; }
 8000184:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
	bytes_flashed = 0;
 8000188:	6013      	str	r3, [r2, #0]
	should_disable_interrupts = false;
 800018a:	4aa9      	ldr	r2, [pc, #676]	; (8000430 <baseloader_start+0x2c8>)
int baseloader_start(uint32_t *dest0, const uint32_t *src0, size_t byte_count) {
 800018c:	b083      	sub	sp, #12
	should_disable_interrupts = false;
 800018e:	7013      	strb	r3, [r2, #0]
    verified = true; erase_start = NULL; erase_end = NULL;
 8000190:	4aa8      	ldr	r2, [pc, #672]	; (8000434 <baseloader_start+0x2cc>)
    flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 8000192:	6026      	str	r6, [r4, #0]
    verified = true; erase_start = NULL; erase_end = NULL;
 8000194:	6013      	str	r3, [r2, #0]
 8000196:	4aa8      	ldr	r2, [pc, #672]	; (8000438 <baseloader_start+0x2d0>)
 8000198:	6013      	str	r3, [r2, #0]
 800019a:	4aa8      	ldr	r2, [pc, #672]	; (800043c <baseloader_start+0x2d4>)
 800019c:	7015      	strb	r5, [r2, #0]
	src =  (uint16_t *) src0;
 800019e:	4aa8      	ldr	r2, [pc, #672]	; (8000440 <baseloader_start+0x2d8>)
 80001a0:	6011      	str	r1, [r2, #0]
	if ((uint32_t) dest == FLASH_BASE) { should_disable_interrupts = true; }
 80001a2:	d109      	bne.n	80001b8 <baseloader_start+0x50>
 80001a4:	4aa2      	ldr	r2, [pc, #648]	; (8000430 <baseloader_start+0x2c8>)
 80001a6:	7015      	strb	r5, [r2, #0]
	if (should_disable_interrupts) { disable_interrupts(); } // Only for baseloader.
 80001a8:	b672      	cpsid	i
 80001aa:	49a6      	ldr	r1, [pc, #664]	; (8000444 <baseloader_start+0x2dc>)
 80001ac:	4aa6      	ldr	r2, [pc, #664]	; (8000448 <baseloader_start+0x2e0>)
 80001ae:	600b      	str	r3, [r1, #0]
 80001b0:	6013      	str	r3, [r2, #0]
 80001b2:	4b9c      	ldr	r3, [pc, #624]	; (8000424 <baseloader_start+0x2bc>)
 80001b4:	f8d3 c000 	ldr.w	ip, [r3]

	base_flash_unlock();  //  TODO: Check MakeCode flashing.
 80001b8:	4ba4      	ldr	r3, [pc, #656]	; (800044c <baseloader_start+0x2e4>)
 80001ba:	49a5      	ldr	r1, [pc, #660]	; (8000450 <baseloader_start+0x2e8>)
 80001bc:	4aa5      	ldr	r2, [pc, #660]	; (8000454 <baseloader_start+0x2ec>)
 80001be:	6019      	str	r1, [r3, #0]
 80001c0:	601a      	str	r2, [r3, #0]
    while (half_word_count > 0) {
 80001c2:	f1bc 0f00 	cmp.w	ip, #0
 80001c6:	f000 8161 	beq.w	800048c <baseloader_start+0x324>
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {  //  debug_println("dest >= flash_end"); debug_flush();
 80001ca:	4a94      	ldr	r2, [pc, #592]	; (800041c <baseloader_start+0x2b4>)
 80001cc:	6823      	ldr	r3, [r4, #0]
 80001ce:	6815      	ldr	r5, [r2, #0]
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	429d      	cmp	r5, r3
 80001d4:	f080 810c 	bcs.w	80003f0 <baseloader_start+0x288>
 80001d8:	f04f 0b00 	mov.w	fp, #0
 80001dc:	4b96      	ldr	r3, [pc, #600]	; (8000438 <baseloader_start+0x2d0>)
 80001de:	f8cd b000 	str.w	fp, [sp]
 80001e2:	f8d3 a000 	ldr.w	sl, [r3]
 80001e6:	4b93      	ldr	r3, [pc, #588]	; (8000434 <baseloader_start+0x2cc>)
            verified = false;
            break;
        }
        if (dest >= erase_end || dest < erase_start) {
 80001e8:	4555      	cmp	r5, sl
 80001ea:	6818      	ldr	r0, [r3, #0]
 80001ec:	4b8f      	ldr	r3, [pc, #572]	; (800042c <baseloader_start+0x2c4>)
            erase_start = base_get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
            base_flash_erase_page((uint32_t)erase_start);
 80001ee:	499a      	ldr	r1, [pc, #616]	; (8000458 <baseloader_start+0x2f0>)
 80001f0:	f8d3 8000 	ldr.w	r8, [r3]
 80001f4:	4b92      	ldr	r3, [pc, #584]	; (8000440 <baseloader_start+0x2d8>)
 80001f6:	4f99      	ldr	r7, [pc, #612]	; (800045c <baseloader_start+0x2f4>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4e99      	ldr	r6, [pc, #612]	; (8000460 <baseloader_start+0x2f8>)
 80001fc:	4b99      	ldr	r3, [pc, #612]	; (8000464 <baseloader_start+0x2fc>)
 80001fe:	4691      	mov	r9, r2
        if (dest >= erase_end || dest < erase_start) {
 8000200:	d260      	bcs.n	80002c4 <baseloader_start+0x15c>
 8000202:	4285      	cmp	r5, r0
 8000204:	d35e      	bcc.n	80002c4 <baseloader_start+0x15c>
        }
        base_flash_program_half_word((uint32_t)dest, *src);
 8000206:	6808      	ldr	r0, [r1, #0]
 8000208:	881c      	ldrh	r4, [r3, #0]
 800020a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800020e:	bf84      	itt	hi
 8000210:	683c      	ldrhi	r4, [r7, #0]
 8000212:	4320      	orrhi	r0, r4
 8000214:	f000 0035 	and.w	r0, r0, #53	; 0x35
 8000218:	e008      	b.n	800022c <baseloader_start+0xc4>
 800021a:	680c      	ldr	r4, [r1, #0]
 800021c:	f8b3 e000 	ldrh.w	lr, [r3]
 8000220:	f004 0035 	and.w	r0, r4, #53	; 0x35
 8000224:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8000228:	f200 809e 	bhi.w	8000368 <baseloader_start+0x200>
 800022c:	07c4      	lsls	r4, r0, #31
 800022e:	d4f4      	bmi.n	800021a <baseloader_start+0xb2>
 8000230:	8818      	ldrh	r0, [r3, #0]
 8000232:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000236:	f240 80a1 	bls.w	800037c <baseloader_start+0x214>
 800023a:	488b      	ldr	r0, [pc, #556]	; (8000468 <baseloader_start+0x300>)
 800023c:	4285      	cmp	r5, r0
 800023e:	f240 809d 	bls.w	800037c <baseloader_start+0x214>
 8000242:	4c8a      	ldr	r4, [pc, #552]	; (800046c <baseloader_start+0x304>)
 8000244:	6820      	ldr	r0, [r4, #0]
 8000246:	f040 0001 	orr.w	r0, r0, #1
 800024a:	6020      	str	r0, [r4, #0]
 800024c:	8810      	ldrh	r0, [r2, #0]
 800024e:	8028      	strh	r0, [r5, #0]
 8000250:	6808      	ldr	r0, [r1, #0]
 8000252:	881c      	ldrh	r4, [r3, #0]
 8000254:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8000258:	bf84      	itt	hi
 800025a:	683c      	ldrhi	r4, [r7, #0]
 800025c:	4320      	orrhi	r0, r4
 800025e:	f000 0035 	and.w	r0, r0, #53	; 0x35
 8000262:	e007      	b.n	8000274 <baseloader_start+0x10c>
 8000264:	680c      	ldr	r4, [r1, #0]
 8000266:	f8b3 e000 	ldrh.w	lr, [r3]
 800026a:	f004 0035 	and.w	r0, r4, #53	; 0x35
 800026e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8000272:	d87e      	bhi.n	8000372 <baseloader_start+0x20a>
 8000274:	07c0      	lsls	r0, r0, #31
 8000276:	d4f5      	bmi.n	8000264 <baseloader_start+0xfc>
 8000278:	8818      	ldrh	r0, [r3, #0]
 800027a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800027e:	f240 8082 	bls.w	8000386 <baseloader_start+0x21e>
 8000282:	4879      	ldr	r0, [pc, #484]	; (8000468 <baseloader_start+0x300>)
 8000284:	4285      	cmp	r5, r0
 8000286:	d97e      	bls.n	8000386 <baseloader_start+0x21e>
 8000288:	4c78      	ldr	r4, [pc, #480]	; (800046c <baseloader_start+0x304>)
 800028a:	6820      	ldr	r0, [r4, #0]
 800028c:	f020 0001 	bic.w	r0, r0, #1
 8000290:	6020      	str	r0, [r4, #0]
        erase_start = dest + 1;
 8000292:	4628      	mov	r0, r5
        if (*dest != *src) {  //  debug_println("*dest != *src"); debug_flush();
 8000294:	f8b9 4000 	ldrh.w	r4, [r9]
 8000298:	f830 eb02 	ldrh.w	lr, [r0], #2
 800029c:	3202      	adds	r2, #2
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f040 80ee 	bne.w	8000480 <baseloader_start+0x318>
    while (half_word_count > 0) {
 80002a4:	f1bc 0c01 	subs.w	ip, ip, #1
            break;
        }
        dest++;
        src++;
        half_word_count--;
		bytes_flashed += 2;
 80002a8:	f108 0802 	add.w	r8, r8, #2
    while (half_word_count > 0) {
 80002ac:	f000 80fd 	beq.w	80004aa <baseloader_start+0x342>
 80002b0:	2401      	movs	r4, #1
 80002b2:	9400      	str	r4, [sp, #0]
        if (dest >= flash_end) {  //  debug_println("dest >= flash_end"); debug_flush();
 80002b4:	9c01      	ldr	r4, [sp, #4]
 80002b6:	4284      	cmp	r4, r0
 80002b8:	f240 810c 	bls.w	80004d4 <baseloader_start+0x36c>
 80002bc:	4605      	mov	r5, r0
        if (dest >= erase_end || dest < erase_start) {
 80002be:	4555      	cmp	r5, sl
 80002c0:	4691      	mov	r9, r2
 80002c2:	d39e      	bcc.n	8000202 <baseloader_start+0x9a>
            base_flash_erase_page((uint32_t)erase_start);
 80002c4:	6808      	ldr	r0, [r1, #0]
 80002c6:	881c      	ldrh	r4, [r3, #0]
            erase_start = base_get_flash_page_address(dest);
 80002c8:	f425 7e7f 	bic.w	lr, r5, #1020	; 0x3fc
            base_flash_erase_page((uint32_t)erase_start);
 80002cc:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80002d0:	bf88      	it	hi
 80002d2:	683c      	ldrhi	r4, [r7, #0]
            erase_start = base_get_flash_page_address(dest);
 80002d4:	f02e 0e03 	bic.w	lr, lr, #3
            base_flash_erase_page((uint32_t)erase_start);
 80002d8:	bf88      	it	hi
 80002da:	4320      	orrhi	r0, r4
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 80002dc:	f50e 6a80 	add.w	sl, lr, #1024	; 0x400
            base_flash_erase_page((uint32_t)erase_start);
 80002e0:	f000 0035 	and.w	r0, r0, #53	; 0x35
 80002e4:	e007      	b.n	80002f6 <baseloader_start+0x18e>
 80002e6:	680c      	ldr	r4, [r1, #0]
 80002e8:	f8b3 b000 	ldrh.w	fp, [r3]
 80002ec:	f004 0035 	and.w	r0, r4, #53	; 0x35
 80002f0:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 80002f4:	d851      	bhi.n	800039a <baseloader_start+0x232>
 80002f6:	07c4      	lsls	r4, r0, #31
 80002f8:	d4f5      	bmi.n	80002e6 <baseloader_start+0x17e>
 80002fa:	8818      	ldrh	r0, [r3, #0]
 80002fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000300:	d950      	bls.n	80003a4 <baseloader_start+0x23c>
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <baseloader_start+0x300>)
 8000304:	4586      	cmp	lr, r0
 8000306:	d94d      	bls.n	80003a4 <baseloader_start+0x23c>
 8000308:	4858      	ldr	r0, [pc, #352]	; (800046c <baseloader_start+0x304>)
 800030a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800047c <baseloader_start+0x314>
 800030e:	6804      	ldr	r4, [r0, #0]
 8000310:	f044 0402 	orr.w	r4, r4, #2
 8000314:	6004      	str	r4, [r0, #0]
 8000316:	f8cb e000 	str.w	lr, [fp]
 800031a:	6804      	ldr	r4, [r0, #0]
 800031c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000320:	6004      	str	r4, [r0, #0]
 8000322:	6808      	ldr	r0, [r1, #0]
 8000324:	881c      	ldrh	r4, [r3, #0]
 8000326:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800032a:	bf84      	itt	hi
 800032c:	683c      	ldrhi	r4, [r7, #0]
 800032e:	4320      	orrhi	r0, r4
 8000330:	f000 0035 	and.w	r0, r0, #53	; 0x35
 8000334:	e007      	b.n	8000346 <baseloader_start+0x1de>
 8000336:	680c      	ldr	r4, [r1, #0]
 8000338:	f8b3 b000 	ldrh.w	fp, [r3]
 800033c:	f004 0035 	and.w	r0, r4, #53	; 0x35
 8000340:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8000344:	d824      	bhi.n	8000390 <baseloader_start+0x228>
 8000346:	07c0      	lsls	r0, r0, #31
 8000348:	d4f5      	bmi.n	8000336 <baseloader_start+0x1ce>
 800034a:	8818      	ldrh	r0, [r3, #0]
 800034c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000350:	d934      	bls.n	80003bc <baseloader_start+0x254>
 8000352:	4845      	ldr	r0, [pc, #276]	; (8000468 <baseloader_start+0x300>)
 8000354:	4586      	cmp	lr, r0
 8000356:	d931      	bls.n	80003bc <baseloader_start+0x254>
 8000358:	4c44      	ldr	r4, [pc, #272]	; (800046c <baseloader_start+0x304>)
 800035a:	f04f 0b01 	mov.w	fp, #1
 800035e:	6820      	ldr	r0, [r4, #0]
 8000360:	f020 0002 	bic.w	r0, r0, #2
 8000364:	6020      	str	r0, [r4, #0]
 8000366:	e74e      	b.n	8000206 <baseloader_start+0x9e>
        base_flash_program_half_word((uint32_t)dest, *src);
 8000368:	6838      	ldr	r0, [r7, #0]
 800036a:	4304      	orrs	r4, r0
 800036c:	f004 0035 	and.w	r0, r4, #53	; 0x35
 8000370:	e75c      	b.n	800022c <baseloader_start+0xc4>
 8000372:	6838      	ldr	r0, [r7, #0]
 8000374:	4304      	orrs	r4, r0
 8000376:	f004 0035 	and.w	r0, r4, #53	; 0x35
 800037a:	e77b      	b.n	8000274 <baseloader_start+0x10c>
 800037c:	6830      	ldr	r0, [r6, #0]
 800037e:	f040 0001 	orr.w	r0, r0, #1
 8000382:	6030      	str	r0, [r6, #0]
 8000384:	e762      	b.n	800024c <baseloader_start+0xe4>
 8000386:	6830      	ldr	r0, [r6, #0]
 8000388:	f020 0001 	bic.w	r0, r0, #1
 800038c:	6030      	str	r0, [r6, #0]
 800038e:	e780      	b.n	8000292 <baseloader_start+0x12a>
            base_flash_erase_page((uint32_t)erase_start);
 8000390:	6838      	ldr	r0, [r7, #0]
 8000392:	4304      	orrs	r4, r0
 8000394:	f004 0035 	and.w	r0, r4, #53	; 0x35
 8000398:	e7d5      	b.n	8000346 <baseloader_start+0x1de>
 800039a:	6838      	ldr	r0, [r7, #0]
 800039c:	4304      	orrs	r4, r0
 800039e:	f004 0035 	and.w	r0, r4, #53	; 0x35
 80003a2:	e7a8      	b.n	80002f6 <baseloader_start+0x18e>
 80003a4:	6830      	ldr	r0, [r6, #0]
 80003a6:	4c32      	ldr	r4, [pc, #200]	; (8000470 <baseloader_start+0x308>)
 80003a8:	f040 0002 	orr.w	r0, r0, #2
 80003ac:	6030      	str	r0, [r6, #0]
 80003ae:	f8c4 e000 	str.w	lr, [r4]
 80003b2:	6830      	ldr	r0, [r6, #0]
 80003b4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80003b8:	6030      	str	r0, [r6, #0]
 80003ba:	e7b2      	b.n	8000322 <baseloader_start+0x1ba>
 80003bc:	6830      	ldr	r0, [r6, #0]
 80003be:	f04f 0b01 	mov.w	fp, #1
 80003c2:	f020 0002 	bic.w	r0, r0, #2
 80003c6:	6030      	str	r0, [r6, #0]
 80003c8:	e71d      	b.n	8000206 <baseloader_start+0x9e>
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <baseloader_start+0x2b4>)
 80003cc:	601d      	str	r5, [r3, #0]
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <baseloader_start+0x2d8>)
 80003d0:	f8c3 9000 	str.w	r9, [r3]
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <baseloader_start+0x2cc>)
 80003d6:	6018      	str	r0, [r3, #0]
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <baseloader_start+0x2bc>)
 80003da:	f8c3 c000 	str.w	ip, [r3]
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <baseloader_start+0x2c4>)
 80003e0:	f8c3 8000 	str.w	r8, [r3]
 80003e4:	f1bb 0f00 	cmp.w	fp, #0
 80003e8:	d002      	beq.n	80003f0 <baseloader_start+0x288>
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <baseloader_start+0x2d0>)
 80003ec:	f8c3 a000 	str.w	sl, [r3]
            verified = false;
 80003f0:	2300      	movs	r3, #0
    }
	base_flash_lock();  //  TODO: Check MakeCode flashing.
 80003f2:	491b      	ldr	r1, [pc, #108]	; (8000460 <baseloader_start+0x2f8>)
            verified = false;
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <baseloader_start+0x2d4>)
 80003f6:	7013      	strb	r3, [r2, #0]
	base_flash_lock();  //  TODO: Check MakeCode flashing.
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003fe:	600a      	str	r2, [r1, #0]

	//  TODO: Erase the second vector table.

	//  Vector table may have been overwritten. Restart to use the new vector table.
    if (should_disable_interrupts) { 
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <baseloader_start+0x2c8>)
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	2a00      	cmp	r2, #0
 8000406:	d04d      	beq.n	80004a4 <baseloader_start+0x33c>
		SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;  //  From scb_reset_system(); 
 8000408:	4a1a      	ldr	r2, [pc, #104]	; (8000474 <baseloader_start+0x30c>)
 800040a:	491b      	ldr	r1, [pc, #108]	; (8000478 <baseloader_start+0x310>)
 800040c:	6011      	str	r1, [r2, #0]
	}	
	return verified ? bytes_flashed : -1;
 800040e:	2b00      	cmp	r3, #0
 8000410:	d048      	beq.n	80004a4 <baseloader_start+0x33c>
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <baseloader_start+0x2c4>)
 8000414:	6818      	ldr	r0, [r3, #0]
}
 8000416:	b003      	add	sp, #12
 8000418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800041c:	20000548 	.word	0x20000548
 8000420:	20000554 	.word	0x20000554
 8000424:	20000558 	.word	0x20000558
 8000428:	08010000 	.word	0x08010000
 800042c:	20000544 	.word	0x20000544
 8000430:	20000560 	.word	0x20000560
 8000434:	20000550 	.word	0x20000550
 8000438:	2000054c 	.word	0x2000054c
 800043c:	20000561 	.word	0x20000561
 8000440:	2000055c 	.word	0x2000055c
 8000444:	e000e010 	.word	0xe000e010
 8000448:	40021008 	.word	0x40021008
 800044c:	40022004 	.word	0x40022004
 8000450:	45670123 	.word	0x45670123
 8000454:	cdef89ab 	.word	0xcdef89ab
 8000458:	4002200c 	.word	0x4002200c
 800045c:	4002204c 	.word	0x4002204c
 8000460:	40022010 	.word	0x40022010
 8000464:	1ffff7e0 	.word	0x1ffff7e0
 8000468:	0807ffff 	.word	0x0807ffff
 800046c:	40022050 	.word	0x40022050
 8000470:	40022014 	.word	0x40022014
 8000474:	e000ed0c 	.word	0xe000ed0c
 8000478:	05fa0004 	.word	0x05fa0004
 800047c:	40022054 	.word	0x40022054
 8000480:	9b00      	ldr	r3, [sp, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1a1      	bne.n	80003ca <baseloader_start+0x262>
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <baseloader_start+0x378>)
 8000488:	6018      	str	r0, [r3, #0]
 800048a:	e7ab      	b.n	80003e4 <baseloader_start+0x27c>
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <baseloader_start+0x37c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
	base_flash_lock();  //  TODO: Check MakeCode flashing.
 8000490:	4915      	ldr	r1, [pc, #84]	; (80004e8 <baseloader_start+0x380>)
 8000492:	680a      	ldr	r2, [r1, #0]
 8000494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000498:	600a      	str	r2, [r1, #0]
    if (should_disable_interrupts) { 
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <baseloader_start+0x384>)
 800049c:	7812      	ldrb	r2, [r2, #0]
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d0b5      	beq.n	800040e <baseloader_start+0x2a6>
 80004a2:	e7b1      	b.n	8000408 <baseloader_start+0x2a0>
	return verified ? bytes_flashed : -1;
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004a8:	e7b5      	b.n	8000416 <baseloader_start+0x2ae>
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <baseloader_start+0x388>)
 80004ac:	6018      	str	r0, [r3, #0]
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <baseloader_start+0x38c>)
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <baseloader_start+0x378>)
 80004b4:	6018      	str	r0, [r3, #0]
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <baseloader_start+0x390>)
 80004b8:	f8c3 c000 	str.w	ip, [r3]
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <baseloader_start+0x394>)
 80004be:	f8c3 8000 	str.w	r8, [r3]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <baseloader_start+0x37c>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	f1bb 0f00 	cmp.w	fp, #0
 80004ca:	d0e1      	beq.n	8000490 <baseloader_start+0x328>
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <baseloader_start+0x398>)
 80004ce:	f8c2 a000 	str.w	sl, [r2]
 80004d2:	e7dd      	b.n	8000490 <baseloader_start+0x328>
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <baseloader_start+0x388>)
 80004d6:	6018      	str	r0, [r3, #0]
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <baseloader_start+0x38c>)
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e77a      	b.n	80003d4 <baseloader_start+0x26c>
 80004de:	bf00      	nop
 80004e0:	20000550 	.word	0x20000550
 80004e4:	20000561 	.word	0x20000561
 80004e8:	40022010 	.word	0x40022010
 80004ec:	20000560 	.word	0x20000560
 80004f0:	20000548 	.word	0x20000548
 80004f4:	2000055c 	.word	0x2000055c
 80004f8:	20000558 	.word	0x20000558
 80004fc:	20000544 	.word	0x20000544
 8000500:	2000054c 	.word	0x2000054c

08000504 <baseloader_fetch>:

int baseloader_fetch(baseloader_func *baseloader_addr, uint32_t **dest, const uint32_t **src, size_t *byte_count) {
 8000504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//  Return the address of the baseloader function, located in the Second Base Vector Table.
	//  Also return the parameters to be passed to the baseloader function: dest, src, byte_count.
	if (!baseloader_addr || !dest || !src || !byte_count) { 
 8000508:	2800      	cmp	r0, #0
 800050a:	d04b      	beq.n	80005a4 <baseloader_fetch+0xa0>
 800050c:	2900      	cmp	r1, #0
 800050e:	d049      	beq.n	80005a4 <baseloader_fetch+0xa0>
 8000510:	2a00      	cmp	r2, #0
 8000512:	d047      	beq.n	80005a4 <baseloader_fetch+0xa0>
 8000514:	2b00      	cmp	r3, #0
 8000516:	d045      	beq.n	80005a4 <baseloader_fetch+0xa0>
		baseloader_fail = (uint32_t) baseloader_addr;
		return -1; 
	}
	//  Search for the First and Second Base Vector Tables and find the bootloader range.
	//  First Base Vector Table is in the start of the application ROM.
	if (!IS_VALID_BASE_VECTOR_TABLE(application_start)) {  //  Quit if First Base Vector Table is not found.
 8000518:	4c27      	ldr	r4, [pc, #156]	; (80005b8 <baseloader_fetch+0xb4>)
 800051a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80005cc <baseloader_fetch+0xc8>
 800051e:	4d27      	ldr	r5, [pc, #156]	; (80005bc <baseloader_fetch+0xb8>)
 8000520:	ea04 0709 	and.w	r7, r4, r9
 8000524:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8000528:	ea47 0805 	orr.w	r8, r7, r5
 800052c:	f8d8 e000 	ldr.w	lr, [r8]
 8000530:	4e23      	ldr	r6, [pc, #140]	; (80005c0 <baseloader_fetch+0xbc>)
 8000532:	45b6      	cmp	lr, r6
 8000534:	d12a      	bne.n	800058c <baseloader_fetch+0x88>
 8000536:	4e23      	ldr	r6, [pc, #140]	; (80005c4 <baseloader_fetch+0xc0>)
 8000538:	f8d8 c014 	ldr.w	ip, [r8, #20]
 800053c:	45b4      	cmp	ip, r6
 800053e:	d125      	bne.n	800058c <baseloader_fetch+0x88>
		return -2; 
	}
	base_vector_table_t *begin_base_vector = BASE_VECTOR_TABLE(application_start);

	//  Get size of new bootloader from the First Base Vector Table (same as the Application ROM start address).
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 8000540:	f8d8 6010 	ldr.w	r6, [r8, #16]
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000544:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 8000548:	ea06 0609 	and.w	r6, r6, r9
 800054c:	f106 4678 	add.w	r6, r6, #4160749568	; 0xf8000000
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000550:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80005d0 <baseloader_fetch+0xcc>
 8000554:	4434      	add	r4, r6
 8000556:	4544      	cmp	r4, r8
 8000558:	d829      	bhi.n	80005ae <baseloader_fetch+0xaa>
		baseloader_fail = bootloader_size;
		return -3; 
	} 

	//  Second Base Vector Table is at start of application ROM + bootloader size.  TODO: Round up to the next flash page?
	uint32_t flash_page_addr = (uint32_t) FLASH_ADDRESS(application_start) + bootloader_size;
 800055a:	eb07 0806 	add.w	r8, r7, r6
	if (!IS_VALID_BASE_VECTOR_TABLE(flash_page_addr)) {  //  Quit if Second Base Vector Table is not found.
 800055e:	ea45 0408 	orr.w	r4, r5, r8
 8000562:	6825      	ldr	r5, [r4, #0]
 8000564:	4575      	cmp	r5, lr
 8000566:	d116      	bne.n	8000596 <baseloader_fetch+0x92>
 8000568:	6965      	ldr	r5, [r4, #20]
 800056a:	4565      	cmp	r5, ip
 800056c:	d113      	bne.n	8000596 <baseloader_fetch+0x92>
	}
	base_vector_table_t *end_base_vector = BASE_VECTOR_TABLE(flash_page_addr);

	//  Tell caller to jump to the baseloader in the Second Base Vector Table.
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 800056e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
	*byte_count = bootloader_size;			 //  For this number of bytes.
	return 0;
 8000572:	2500      	movs	r5, #0
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
 8000574:	68a4      	ldr	r4, [r4, #8]
 8000576:	f108 4878 	add.w	r8, r8, #4160749568	; 0xf8000000
 800057a:	4444      	add	r4, r8
 800057c:	6004      	str	r4, [r0, #0]
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 800057e:	f8c1 c000 	str.w	ip, [r1]
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
 8000582:	6017      	str	r7, [r2, #0]
	*byte_count = bootloader_size;			 //  For this number of bytes.
 8000584:	601e      	str	r6, [r3, #0]
}
 8000586:	4628      	mov	r0, r5
 8000588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		baseloader_fail = (uint32_t) FLASH_ADDRESS(application_start);
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <baseloader_fetch+0xc4>)
		return -2; 
 800058e:	f06f 0501 	mvn.w	r5, #1
		baseloader_fail = (uint32_t) FLASH_ADDRESS(application_start);
 8000592:	601f      	str	r7, [r3, #0]
		return -2; 
 8000594:	e7f7      	b.n	8000586 <baseloader_fetch+0x82>
		baseloader_fail = flash_page_addr;
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <baseloader_fetch+0xc4>)
		return -4;
 8000598:	f06f 0503 	mvn.w	r5, #3
		baseloader_fail = flash_page_addr;
 800059c:	f8c2 8000 	str.w	r8, [r2]
		*byte_count = bootloader_size;
 80005a0:	601e      	str	r6, [r3, #0]
		return -4;
 80005a2:	e7f0      	b.n	8000586 <baseloader_fetch+0x82>
		baseloader_fail = (uint32_t) baseloader_addr;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <baseloader_fetch+0xc4>)
		return -1; 
 80005a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		baseloader_fail = (uint32_t) baseloader_addr;
 80005aa:	6018      	str	r0, [r3, #0]
		return -1; 
 80005ac:	e7eb      	b.n	8000586 <baseloader_fetch+0x82>
		baseloader_fail = bootloader_size;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <baseloader_fetch+0xc4>)
		return -3; 
 80005b0:	f06f 0502 	mvn.w	r5, #2
		baseloader_fail = bootloader_size;
 80005b4:	601e      	str	r6, [r3, #0]
		return -3; 
 80005b6:	e7e6      	b.n	8000586 <baseloader_fetch+0x82>
 80005b8:	08007001 	.word	0x08007001
 80005bc:	08000150 	.word	0x08000150
 80005c0:	22051969 	.word	0x22051969
 80005c4:	19690522 	.word	0x19690522
 80005c8:	20000540 	.word	0x20000540
 80005cc:	fffffc00 	.word	0xfffffc00
 80005d0:	0800ffff 	.word	0x0800ffff

080005d4 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 80005d4:	e7fe      	b.n	80005d4 <blocking_handler>
 80005d6:	bf00      	nop

080005d8 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <target_in_isr>:
// From pxt-common-packages/libs/base/pxtbase.h:
// #define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)

uint32_t target_in_isr(void) {
    //  Return true if CPU is in ISR now.
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <target_in_isr+0xc>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed04 	.word	0xe000ed04

080005ec <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 80005ec:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 fd3a 	bl	8002068 <rtc_check_flag>
 80005f4:	b900      	cbnz	r0, 80005f8 <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 80005f6:	bd10      	pop	{r4, pc}
		rtc_clear_flag(RTC_SEC);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f001 fd1b 	bl	8002034 <rtc_clear_flag>
		tickCount++;
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <rtc_isr+0x28>)
		if (tickFunc != NULL) { tickFunc(); }
 8000600:	4905      	ldr	r1, [pc, #20]	; (8000618 <rtc_isr+0x2c>)
		tickCount++;
 8000602:	6813      	ldr	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 8000604:	6809      	ldr	r1, [r1, #0]
		tickCount++;
 8000606:	3301      	adds	r3, #1
 8000608:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 800060a:	2900      	cmp	r1, #0
 800060c:	d0f3      	beq.n	80005f6 <rtc_isr+0xa>
}
 800060e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (tickFunc != NULL) { tickFunc(); }
 8000612:	4708      	bx	r1
 8000614:	20000894 	.word	0x20000894
 8000618:	2000088c 	.word	0x2000088c

0800061c <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 800061c:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 800061e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000622:	f001 fc21 	bl	8001e68 <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 8000626:	2001      	movs	r0, #1
 8000628:	f001 fd04 	bl	8002034 <rtc_clear_flag>
	alarmCount++;
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <rtc_alarm_isr+0x28>)
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 800062e:	4906      	ldr	r1, [pc, #24]	; (8000648 <rtc_alarm_isr+0x2c>)
	alarmCount++;
 8000630:	6813      	ldr	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 8000632:	6809      	ldr	r1, [r1, #0]
	alarmCount++;
 8000634:	3301      	adds	r3, #1
 8000636:	6013      	str	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 8000638:	b111      	cbz	r1, 8000640 <rtc_alarm_isr+0x24>
}
 800063a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (alarmFunc != NULL) { alarmFunc(); }
 800063e:	4708      	bx	r1
}
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	20000888 	.word	0x20000888
 8000648:	20000890 	.word	0x20000890

0800064c <reset_handler>:
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}

void reset_handler(void) {
 800064c:	b538      	push	{r3, r4, r5, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 800064e:	4a3c      	ldr	r2, [pc, #240]	; (8000740 <reset_handler+0xf4>)
 8000650:	4c3c      	ldr	r4, [pc, #240]	; (8000744 <reset_handler+0xf8>)
 8000652:	42a2      	cmp	r2, r4
 8000654:	d20f      	bcs.n	8000676 <reset_handler+0x2a>
 8000656:	43d3      	mvns	r3, r2
 8000658:	4615      	mov	r5, r2
 800065a:	4423      	add	r3, r4
 800065c:	493a      	ldr	r1, [pc, #232]	; (8000748 <reset_handler+0xfc>)
 800065e:	f023 0303 	bic.w	r3, r3, #3
 8000662:	3304      	adds	r3, #4
 8000664:	4608      	mov	r0, r1
 8000666:	4419      	add	r1, r3
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 8000668:	f850 4b04 	ldr.w	r4, [r0], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 800066c:	4288      	cmp	r0, r1
		*boot_dest = *src;
 800066e:	f845 4b04 	str.w	r4, [r5], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000672:	d1f9      	bne.n	8000668 <reset_handler+0x1c>
 8000674:	441a      	add	r2, r3
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <reset_handler+0x100>)
 8000678:	429a      	cmp	r2, r3
 800067a:	d20d      	bcs.n	8000698 <reset_handler+0x4c>
 800067c:	3303      	adds	r3, #3
 800067e:	1d11      	adds	r1, r2, #4
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	f023 0303 	bic.w	r3, r3, #3
 8000686:	3304      	adds	r3, #4
 8000688:	2000      	movs	r0, #0
 800068a:	4413      	add	r3, r2
 800068c:	e000      	b.n	8000690 <reset_handler+0x44>
 800068e:	3104      	adds	r1, #4
 8000690:	4299      	cmp	r1, r3
 8000692:	6010      	str	r0, [r2, #0]
 8000694:	460a      	mov	r2, r1
 8000696:	d1fa      	bne.n	800068e <reset_handler+0x42>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <reset_handler+0x104>)
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 800069a:	4d2e      	ldr	r5, [pc, #184]	; (8000754 <reset_handler+0x108>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800069c:	6813      	ldr	r3, [r2, #0]
 800069e:	4c2e      	ldr	r4, [pc, #184]	; (8000758 <reset_handler+0x10c>)
 80006a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a4:	6013      	str	r3, [r2, #0]
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 80006a6:	f000 f9c9 	bl	8000a3c <target_enable_debug>
    target_init();               //  Init the STM32 platform.
 80006aa:	f000 f8f5 	bl	8000898 <target_init>
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 80006ae:	682b      	ldr	r3, [r5, #0]
 80006b0:	b91b      	cbnz	r3, 80006ba <reset_handler+0x6e>
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <reset_handler+0x110>)
 80006b4:	6822      	ldr	r2, [r4, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d00c      	beq.n	80006d4 <reset_handler+0x88>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 80006ba:	4829      	ldr	r0, [pc, #164]	; (8000760 <reset_handler+0x114>)
 80006bc:	f003 fbbc 	bl	8003e38 <debug_print>
 80006c0:	6828      	ldr	r0, [r5, #0]
 80006c2:	f003 fc01 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 80006c6:	4827      	ldr	r0, [pc, #156]	; (8000764 <reset_handler+0x118>)
 80006c8:	f003 fbb6 	bl	8003e38 <debug_print>
 80006cc:	6820      	ldr	r0, [r4, #0]
 80006ce:	f003 fbfb 	bl	8003ec8 <debug_printhex_unsigned>
 80006d2:	e7fe      	b.n	80006d2 <reset_handler+0x86>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 80006d4:	4c24      	ldr	r4, [pc, #144]	; (8000768 <reset_handler+0x11c>)
 80006d6:	4925      	ldr	r1, [pc, #148]	; (800076c <reset_handler+0x120>)
 80006d8:	428c      	cmp	r4, r1
 80006da:	d20b      	bcs.n	80006f4 <reset_handler+0xa8>
 80006dc:	43e3      	mvns	r3, r4
 80006de:	440b      	add	r3, r1
 80006e0:	f023 0303 	bic.w	r3, r3, #3
 80006e4:	3304      	adds	r3, #4
 80006e6:	4625      	mov	r5, r4
 80006e8:	441c      	add	r4, r3
		(*fp)();
 80006ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ee:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 80006f0:	42a5      	cmp	r5, r4
 80006f2:	d1fa      	bne.n	80006ea <reset_handler+0x9e>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 80006f4:	4c1e      	ldr	r4, [pc, #120]	; (8000770 <reset_handler+0x124>)
 80006f6:	491f      	ldr	r1, [pc, #124]	; (8000774 <reset_handler+0x128>)
 80006f8:	428c      	cmp	r4, r1
 80006fa:	d20b      	bcs.n	8000714 <reset_handler+0xc8>
 80006fc:	43e3      	mvns	r3, r4
 80006fe:	440b      	add	r3, r1
 8000700:	f023 0303 	bic.w	r3, r3, #3
 8000704:	3304      	adds	r3, #4
 8000706:	4625      	mov	r5, r4
 8000708:	441c      	add	r4, r3
		(*fp)();
 800070a:	f855 3b04 	ldr.w	r3, [r5], #4
 800070e:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000710:	42a5      	cmp	r5, r4
 8000712:	d1fa      	bne.n	800070a <reset_handler+0xbe>
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 8000714:	f003 fd1c 	bl	8004150 <bootloader_start>
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000718:	4c17      	ldr	r4, [pc, #92]	; (8000778 <reset_handler+0x12c>)
	application_start();
 800071a:	f006 fc71 	bl	8007000 <application_start>
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800071e:	4917      	ldr	r1, [pc, #92]	; (800077c <reset_handler+0x130>)
 8000720:	428c      	cmp	r4, r1
 8000722:	d20b      	bcs.n	800073c <reset_handler+0xf0>
 8000724:	43e3      	mvns	r3, r4
 8000726:	440b      	add	r3, r1
 8000728:	f023 0303 	bic.w	r3, r3, #3
 800072c:	3304      	adds	r3, #4
 800072e:	4625      	mov	r5, r4
 8000730:	441c      	add	r4, r3
		(*fp)();
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000738:	42ac      	cmp	r4, r5
 800073a:	d1fa      	bne.n	8000732 <reset_handler+0xe6>
	}

}
 800073c:	bd38      	pop	{r3, r4, r5, pc}
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000
 8000744:	20000540 	.word	0x20000540
 8000748:	08006728 	.word	0x08006728
 800074c:	20000ce0 	.word	0x20000ce0
 8000750:	e000ed14 	.word	0xe000ed14
 8000754:	20000b78 	.word	0x20000b78
 8000758:	20000000 	.word	0x20000000
 800075c:	87654321 	.word	0x87654321
 8000760:	08005a78 	.word	0x08005a78
 8000764:	08005aa0 	.word	0x08005aa0
 8000768:	08006728 	.word	0x08006728
 800076c:	08006728 	.word	0x08006728
 8000770:	08006728 	.word	0x08006728
 8000774:	08006728 	.word	0x08006728
 8000778:	08006728 	.word	0x08006728
 800077c:	08006728 	.word	0x08006728

08000780 <_ZL10timer_tickv>:
static void timer_tick() {
 8000780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!bootloader_callback) { return; }
 8000784:	4e18      	ldr	r6, [pc, #96]	; (80007e8 <_ZL10timer_tickv+0x68>)
 8000786:	6833      	ldr	r3, [r6, #0]
 8000788:	b333      	cbz	r3, 80007d8 <_ZL10timer_tickv+0x58>
    poll_status = bootloader_callback();
 800078a:	4798      	blx	r3
 800078c:	4d17      	ldr	r5, [pc, #92]	; (80007ec <_ZL10timer_tickv+0x6c>)
    prev_poll_status = poll_status;
 800078e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80007fc <_ZL10timer_tickv+0x7c>
    poll_status = bootloader_callback();
 8000792:	6028      	str	r0, [r5, #0]
    prev_poll_status = poll_status;
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	f8c8 3000 	str.w	r3, [r8]
    if (poll_status > 0) { debug_print("u{ "); }
 800079a:	682b      	ldr	r3, [r5, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd02      	ble.n	80007a6 <_ZL10timer_tickv+0x26>
 80007a0:	4813      	ldr	r0, [pc, #76]	; (80007f0 <_ZL10timer_tickv+0x70>)
 80007a2:	f003 fb49 	bl	8003e38 <debug_print>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80007a6:	682b      	ldr	r3, [r5, #0]
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80007a8:	2700      	movs	r7, #0
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dd0d      	ble.n	80007ca <_ZL10timer_tickv+0x4a>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80007ae:	240a      	movs	r4, #10
 80007b0:	602f      	str	r7, [r5, #0]
            poll_status = poll_status | bootloader_callback();
 80007b2:	6833      	ldr	r3, [r6, #0]
 80007b4:	4798      	blx	r3
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	3c01      	subs	r4, #1
 80007ba:	4318      	orrs	r0, r3
 80007bc:	b2a4      	uxth	r4, r4
 80007be:	6028      	str	r0, [r5, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d1f6      	bne.n	80007b2 <_ZL10timer_tickv+0x32>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dcf1      	bgt.n	80007ae <_ZL10timer_tickv+0x2e>
    if (prev_poll_status > 0) { debug_print("} "); }
 80007ca:	f8d8 3000 	ldr.w	r3, [r8]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd02      	ble.n	80007d8 <_ZL10timer_tickv+0x58>
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <_ZL10timer_tickv+0x74>)
 80007d4:	f003 fb30 	bl	8003e38 <debug_print>
    if (tick_callback) { tick_callback(); }
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_ZL10timer_tickv+0x78>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b103      	cbz	r3, 80007e0 <_ZL10timer_tickv+0x60>
 80007de:	4798      	blx	r3
}
 80007e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    os_tick();
 80007e4:	f001 bc74 	b.w	80020d0 <os_tick>
 80007e8:	20000574 	.word	0x20000574
 80007ec:	20000564 	.word	0x20000564
 80007f0:	08005ab0 	.word	0x08005ab0
 80007f4:	08005ab4 	.word	0x08005ab4
 80007f8:	20000568 	.word	0x20000568
 80007fc:	20000570 	.word	0x20000570

08000800 <_ZL11timer_alarmv>:
    if (alarm_callback) { alarm_callback(); }
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZL11timer_alarmv+0x20>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	b103      	cbz	r3, 8000808 <_ZL11timer_alarmv+0x8>
 8000806:	4718      	bx	r3
static void timer_alarm() {
 8000808:	b510      	push	{r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 800080a:	f003 fc75 	bl	80040f8 <millis>
 800080e:	28c7      	cmp	r0, #199	; 0xc7
 8000810:	d900      	bls.n	8000814 <_ZL11timer_alarmv+0x14>
}
 8000812:	bd10      	pop	{r4, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <_ZL11timer_alarmv+0x24>)
}
 8000816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 800081a:	f003 bb0d 	b.w	8003e38 <debug_print>
 800081e:	bf00      	nop
 8000820:	2000056c 	.word	0x2000056c
 8000824:	08005ab8 	.word	0x08005ab8

08000828 <target_wait.part.1>:
void target_wait(uint32_t milliseconds) {
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4604      	mov	r4, r0
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <target_wait.part.1+0x60>)
 800082e:	f003 fb03 	bl	8003e38 <debug_print>
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <target_wait.part.1+0x64>)
}

static void os_schedule( void ) {
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
    running_tid = NO_TID;
 8000834:	26ff      	movs	r6, #255	; 0xff
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000836:	fba0 3004 	umull	r3, r0, r0, r4
 800083a:	0980      	lsrs	r0, r0, #6
 800083c:	f003 fb1e 	bl	8003e7c <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8000840:	f003 fc5a 	bl	80040f8 <millis>
    running_tid = NO_TID;
 8000844:	4d12      	ldr	r5, [pc, #72]	; (8000890 <target_wait.part.1+0x68>)
    uint32_t end = millis() + milliseconds;
 8000846:	4404      	add	r4, r0
 8000848:	e000      	b.n	800084c <target_wait.part.1+0x24>
        __asm("wfe");  //  Allow CPU to go to sleep.
 800084a:	bf20      	wfe
        if (millis() >= end) { break; }
 800084c:	f003 fc54 	bl	80040f8 <millis>
 8000850:	4284      	cmp	r4, r0
 8000852:	d910      	bls.n	8000876 <target_wait.part.1+0x4e>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 8000854:	f001 fc40 	bl	80020d8 <os_running>
 8000858:	2800      	cmp	r0, #0
 800085a:	d0f6      	beq.n	800084a <target_wait.part.1+0x22>
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 800085c:	f001 fc3c 	bl	80020d8 <os_running>
 8000860:	2800      	cmp	r0, #0
 8000862:	d0f2      	beq.n	800084a <target_wait.part.1+0x22>
    running_tid = NO_TID;
 8000864:	702e      	strb	r6, [r5, #0]
#ifdef ROUND_ROBIN
    /* Find next ready task */
    running_tid = os_task_next_ready_task();
#else
    /* Find the highest prio task ready to run */
    running_tid = os_task_highest_prio_ready_task();   
 8000866:	f001 fca7 	bl	80021b8 <os_task_highest_prio_ready_task>
#endif    
    if ( running_tid != NO_TID ) {
 800086a:	28ff      	cmp	r0, #255	; 0xff
    running_tid = os_task_highest_prio_ready_task();   
 800086c:	7028      	strb	r0, [r5, #0]
    if ( running_tid != NO_TID ) {
 800086e:	d007      	beq.n	8000880 <target_wait.part.1+0x58>
        os_task_run();
 8000870:	f001 fd48 	bl	8002304 <os_task_run>
 8000874:	e7e9      	b.n	800084a <target_wait.part.1+0x22>
    debug_print("> ");
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <target_wait.part.1+0x6c>)
}
 8000878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_print("> ");
 800087c:	f003 badc 	b.w	8003e38 <debug_print>
    }
    else {
        os_cbkSleep();
 8000880:	f001 fc0a 	bl	8002098 <os_cbkSleep>
 8000884:	e7e1      	b.n	800084a <target_wait.part.1+0x22>
 8000886:	bf00      	nop
 8000888:	08005b14 	.word	0x08005b14
 800088c:	10624dd3 	.word	0x10624dd3
 8000890:	20000c80 	.word	0x20000c80
 8000894:	08005b1c 	.word	0x08005b1c

08000898 <target_init>:
void target_init(void) {
 8000898:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <target_init+0x24>)
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	b102      	cbz	r2, 80008a2 <target_init+0xa>
}
 80008a0:	bd08      	pop	{r3, pc}
    initialised = true;
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 80008a6:	f003 fb21 	bl	8003eec <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 80008aa:	f001 fbf7 	bl	800209c <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 80008ae:	4904      	ldr	r1, [pc, #16]	; (80008c0 <target_init+0x28>)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <target_init+0x2c>)
}
 80008b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    platform_start_timer(timer_tick, timer_alarm);
 80008b6:	f003 bb77 	b.w	8003fa8 <platform_start_timer>
 80008ba:	bf00      	nop
 80008bc:	2000057c 	.word	0x2000057c
 80008c0:	08000801 	.word	0x08000801
 80008c4:	08000781 	.word	0x08000781

080008c8 <target_wait_for_event>:
    if (!initialised) { return; }  //  If not initialised, quit.
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <target_wait_for_event+0xc>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b103      	cbz	r3, 80008d0 <target_wait_for_event+0x8>
    __asm("wfe");  //  Allow CPU to go to sleep.
 80008ce:	bf20      	wfe
}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000057c 	.word	0x2000057c

080008d8 <target_wait>:
    if (milliseconds <= 0) { return; }
 80008d8:	b110      	cbz	r0, 80008e0 <target_wait+0x8>
    if (!initialised) { return; }  //  If not initialised, quit.
 80008da:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <target_wait+0x10>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b903      	cbnz	r3, 80008e2 <target_wait+0xa>
}
 80008e0:	4770      	bx	lr
 80008e2:	f7ff bfa1 	b.w	8000828 <target_wait.part.1>
 80008e6:	bf00      	nop
 80008e8:	2000057c 	.word	0x2000057c

080008ec <target_wait_us>:
    return target_wait(microseconds / 1000);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <target_wait_us+0x18>)
 80008ee:	fba3 3000 	umull	r3, r0, r3, r0
    if (milliseconds <= 0) { return; }
 80008f2:	0980      	lsrs	r0, r0, #6
 80008f4:	d002      	beq.n	80008fc <target_wait_us+0x10>
    if (!initialised) { return; }  //  If not initialised, quit.
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <target_wait_us+0x1c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b903      	cbnz	r3, 80008fe <target_wait_us+0x12>
}
 80008fc:	4770      	bx	lr
 80008fe:	f7ff bf93 	b.w	8000828 <target_wait.part.1>
 8000902:	bf00      	nop
 8000904:	10624dd3 	.word	0x10624dd3
 8000908:	2000057c 	.word	0x2000057c

0800090c <target_reset>:
void target_reset() {
 800090c:	b508      	push	{r3, lr}
  	debug_println("----target_reset"); debug_flush();
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <target_reset+0x10>)
 8000910:	f003 fa98 	bl	8003e44 <debug_println>
 8000914:	f003 fa16 	bl	8003d44 <debug_flush>
    scb_reset_system();
 8000918:	f000 f924 	bl	8000b64 <scb_reset_system>
 800091c:	08005ae8 	.word	0x08005ae8

08000920 <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 8000920:	b662      	cpsie	i
}
 8000922:	4770      	bx	lr

08000924 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__ volatile ("CPSID I\n");
 8000924:	b672      	cpsid	i
}
 8000926:	4770      	bx	lr

08000928 <target_seed_random>:
int target_seed_random(uint32_t rand) {
 8000928:	b508      	push	{r3, lr}
    debug_println("----target_seed_random");
 800092a:	4802      	ldr	r0, [pc, #8]	; (8000934 <target_seed_random+0xc>)
 800092c:	f003 fa8a 	bl	8003e44 <debug_println>
}
 8000930:	2000      	movs	r0, #0
 8000932:	bd08      	pop	{r3, pc}
 8000934:	08005afc 	.word	0x08005afc

08000938 <target_get_serial>:
uint32_t target_get_serial() {
 8000938:	b508      	push	{r3, lr}
    debug_println("----target_get_serial");
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <target_get_serial+0x10>)
 800093c:	f003 fa82 	bl	8003e44 <debug_println>
    return (uint32_t)STM32_UUID[1];
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <target_get_serial+0x14>)
}
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	bd08      	pop	{r3, pc}
 8000946:	bf00      	nop
 8000948:	08005abc 	.word	0x08005abc
 800094c:	1fff7a14 	.word	0x1fff7a14

08000950 <target_panic>:
void target_panic(int statusCode) {
 8000950:	b508      	push	{r3, lr}
 8000952:	4604      	mov	r4, r0
 8000954:	b672      	cpsid	i
	debug_print("*****target_panic ");
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <target_panic+0x1c>)
 8000958:	f003 fa6e 	bl	8003e38 <debug_print>
	debug_println((int) statusCode);
 800095c:	4620      	mov	r0, r4
 800095e:	f003 fa7f 	bl	8003e60 <_Z13debug_printlni>
	debug_flush();
 8000962:	f003 f9ef 	bl	8003d44 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000966:	bf20      	wfe
 8000968:	e7fd      	b.n	8000966 <target_panic+0x16>
 800096a:	bf00      	nop
 800096c:	08005ad4 	.word	0x08005ad4

08000970 <fiber_initial_stack_base>:
}
 8000970:	4800      	ldr	r0, [pc, #0]	; (8000974 <fiber_initial_stack_base+0x4>)
 8000972:	4770      	bx	lr
 8000974:	20005000 	.word	0x20005000

08000978 <tcb_allocate>:
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8000978:	2040      	movs	r0, #64	; 0x40
 800097a:	f008 bd61 	b.w	8009440 <malloc>
 800097e:	bf00      	nop

08000980 <tcb_configure_lr>:
    tcbPointer->LR = function;
 8000980:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000982:	4770      	bx	lr

08000984 <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8000984:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000986:	4770      	bx	lr

08000988 <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8000988:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800098a:	4770      	bx	lr

0800098c <tcb_get_stack_base>:
}
 800098c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800098e:	4770      	bx	lr

08000990 <get_current_sp>:
}
 8000990:	4668      	mov	r0, sp
 8000992:	4770      	bx	lr

08000994 <tcb_get_sp>:
}
 8000994:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000996:	4770      	bx	lr

08000998 <tcb_configure_args>:
    tcbPointer->R1 = (uint32_t)cp;
 8000998:	e9c0 1200 	strd	r1, r2, [r0]
    tcbPointer->R2 = (uint32_t)pm;
 800099c:	6083      	str	r3, [r0, #8]
}
 800099e:	4770      	bx	lr

080009a0 <test_codal>:
void test_codal() {
 80009a0:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <test_codal+0x54>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <test_codal+0x58>)
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 80009a6:	681d      	ldr	r5, [r3, #0]
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 80009a8:	4c14      	ldr	r4, [pc, #80]	; (80009fc <test_codal+0x5c>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 80009aa:	f003 fa45 	bl	8003e38 <debug_print>
 80009ae:	4628      	mov	r0, r5
 80009b0:	f003 fa8a 	bl	8003ec8 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <test_codal+0x60>)
 80009b6:	f003 fa3f 	bl	8003e38 <debug_print>
 80009ba:	4620      	mov	r0, r4
 80009bc:	f003 fa84 	bl	8003ec8 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <test_codal+0x64>)
 80009c2:	f003 fa39 	bl	8003e38 <debug_print>
	PROCESSOR_WORD_TYPE size = end - start;
 80009c6:	1b60      	subs	r0, r4, r5
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 80009c8:	0a80      	lsrs	r0, r0, #10
 80009ca:	f003 f9d9 	bl	8003d80 <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <test_codal+0x68>)
 80009d0:	f003 fa32 	bl	8003e38 <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 80009d4:	466b      	mov	r3, sp
 80009d6:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 80009da:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 80009de:	0a80      	lsrs	r0, r0, #10
 80009e0:	f003 f9ce 	bl	8003d80 <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <test_codal+0x6c>)
 80009e6:	f003 fa2d 	bl	8003e44 <debug_println>
}
 80009ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    debug_println(" KB"); debug_flush();
 80009ee:	f003 b9a9 	b.w	8003d44 <debug_flush>
 80009f2:	bf00      	nop
 80009f4:	20000004 	.word	0x20000004
 80009f8:	08005b20 	.word	0x08005b20
 80009fc:	20004800 	.word	0x20004800
 8000a00:	08005b30 	.word	0x08005b30
 8000a04:	08005b38 	.word	0x08005b38
 8000a08:	08005b44 	.word	0x08005b44
 8000a0c:	08005b58 	.word	0x08005b58

08000a10 <_fini>:
    void _fini(void) { }
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_atexit>:
    }
 8000a14:	2000      	movs	r0, #0
 8000a16:	4770      	bx	lr

08000a18 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <target_set_tick_callback+0x8>)
 8000a1a:	6018      	str	r0, [r3, #0]
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000568 	.word	0x20000568

08000a24 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <target_set_alarm_callback+0x8>)
 8000a26:	6018      	str	r0, [r3, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000056c 	.word	0x2000056c

08000a30 <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <target_set_bootloader_callback+0x8>)
 8000a32:	6018      	str	r0, [r3, #0]
}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000574 	.word	0x20000574

08000a3c <target_enable_debug>:
    enable_debug();   
 8000a3c:	f003 ba7c 	b.w	8003f38 <enable_debug>

08000a40 <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 8000a40:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 8000a42:	d015      	beq.n	8000a70 <store_context_complete>

    STR     R0, [R0,#0]
 8000a44:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000a46:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000a48:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000a4a:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000a4c:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000a4e:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000a50:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000a52:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000a54:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000a56:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000a58:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000a5a:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000a5c:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000a5e:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000a60:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000a62:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000a64:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000a66:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000a68:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000a6a:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000a6c:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000a6e:	6384      	str	r4, [r0, #56]	; 0x38

08000a70 <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 8000a70:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 8000a72:	d006      	beq.n	8000a82 <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000a74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000a76 <store_stack>:
store_stack:
    SUBS    R4, #4
 8000a76:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000a78:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000a7a:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000a7c:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000a7e:	42b4      	cmp	r4, r6
    BNE     store_stack
 8000a80:	d1f9      	bne.n	8000a76 <store_stack>

08000a82 <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 8000a82:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000a84:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000a86:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000a88:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000a8a:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000a8c:	d006      	beq.n	8000a9c <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 8000a8e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

08000a90 <restore_stack>:

restore_stack:
    SUBS    R4, #4
 8000a90:	3c04      	subs	r4, #4
    SUBS    R3, #4
 8000a92:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000a94:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000a96:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000a98:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000a9a:	d1f9      	bne.n	8000a90 <restore_stack>

08000a9c <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000a9c:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 8000a9e:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 8000aa0:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 8000aa2:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000aa4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000aa6:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000aa8:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000aaa:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000aac:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 8000aae:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 8000ab0:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 8000ab2:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000ab4:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000ab6:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000ab8:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000aba:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000abc:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 8000abe:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 8000ac0:	4770      	bx	lr

08000ac2 <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000ac2:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000ac4:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000ac6:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000ac8:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000aca:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000acc:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000ace:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000ad0:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000ad2:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000ad4:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000ad6:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000ad8:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000ada:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000adc:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000ade:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000ae0:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000ae2:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000ae4:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000ae6:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000ae8:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000aea:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000aec:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000aee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000af0 <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000af0:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000af2:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000af4:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000af6:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000af8:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000afa:	d1f9      	bne.n	8000af0 <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000afc:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000afe:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000b00:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000b02:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000b04:	4770      	bx	lr

08000b06 <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000b06:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000b08:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000b0a:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000b0c:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000b0e:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000b10:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000b12:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000b14:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000b16:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000b18:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000b1a:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000b1c:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000b1e:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000b20:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000b22:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000b24:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000b26:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000b28:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000b2a:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000b2c:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000b2e:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000b30:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 8000b32:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000b34:	4770      	bx	lr

08000b36 <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8000b36:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000b38:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000b3a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000b3c:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000b3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000b40:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 8000b42:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8000b44:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8000b46:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000b48:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000b4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000b4c:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000b4e:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000b50:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 8000b52:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000b54:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000b56:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000b58:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000b5a:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000b5c:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000b5e:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000b60:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 8000b62:	4770      	bx	lr

08000b64 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 8000b64:	4b01      	ldr	r3, [pc, #4]	; (8000b6c <scb_reset_system+0x8>)
 8000b66:	4a02      	ldr	r2, [pc, #8]	; (8000b70 <scb_reset_system+0xc>)
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e7fe      	b.n	8000b6a <scb_reset_system+0x6>
 8000b6c:	e000ed0c 	.word	0xe000ed0c
 8000b70:	05fa0004 	.word	0x05fa0004

08000b74 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000b74:	6101      	str	r1, [r0, #16]
}
 8000b76:	4770      	bx	lr

08000b78 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000b78:	0409      	lsls	r1, r1, #16
 8000b7a:	6101      	str	r1, [r0, #16]
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <pwr_disable_backup_domain_write_protect+0xc>)
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	4770      	bx	lr
 8000b8c:	40007000 	.word	0x40007000

08000b90 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000b90:	4a02      	ldr	r2, [pc, #8]	; (8000b9c <pwr_enable_backup_domain_write_protect+0xc>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	4770      	bx	lr
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	0943      	lsrs	r3, r0, #5
 8000ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ba8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	f000 001f 	and.w	r0, r0, #31
 8000bb2:	fa02 f000 	lsl.w	r0, r2, r0
 8000bb6:	4308      	orrs	r0, r1
 8000bb8:	6018      	str	r0, [r3, #0]
}
 8000bba:	4770      	bx	lr

08000bbc <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	0943      	lsrs	r3, r0, #5
 8000bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bc4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	f000 001f 	and.w	r0, r0, #31
 8000bce:	fa02 f000 	lsl.w	r0, r2, r0
 8000bd2:	4301      	orrs	r1, r0
 8000bd4:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	ea22 0000 	bic.w	r0, r2, r0
 8000bdc:	6018      	str	r0, [r3, #0]
}
 8000bde:	4770      	bx	lr

08000be0 <desig_get_unique_id_as_string>:

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000be0:	2919      	cmp	r1, #25
 8000be2:	bf28      	it	cs
 8000be4:	2119      	movcs	r1, #25
{
 8000be6:	b4f0      	push	{r4, r5, r6, r7}
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000be8:	460d      	mov	r5, r1
{
 8000bea:	b088      	sub	sp, #32
	const char chars[] = "0123456789ABCDEF";
 8000bec:	4f16      	ldr	r7, [pc, #88]	; (8000c48 <desig_get_unique_id_as_string+0x68>)
 8000bee:	ae03      	add	r6, sp, #12
{
 8000bf0:	4604      	mov	r4, r0
	const char chars[] = "0123456789ABCDEF";
 8000bf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000bf4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000bf6:	683a      	ldr	r2, [r7, #0]
	*result++ = DESIG_UNIQUE_ID2;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <desig_get_unique_id_as_string+0x6c>)
	const char chars[] = "0123456789ABCDEF";
 8000bfa:	7032      	strb	r2, [r6, #0]
	*result++ = DESIG_UNIQUE_ID2;
 8000bfc:	681a      	ldr	r2, [r3, #0]
	*result = DESIG_UNIQUE_ID0;
 8000bfe:	3b08      	subs	r3, #8
	*result++ = DESIG_UNIQUE_ID2;
 8000c00:	9200      	str	r2, [sp, #0]
	*result++ = DESIG_UNIQUE_ID1;
 8000c02:	685a      	ldr	r2, [r3, #4]
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000c04:	3d01      	subs	r5, #1
	*result++ = DESIG_UNIQUE_ID1;
 8000c06:	9201      	str	r2, [sp, #4]
	*result = DESIG_UNIQUE_ID0;
 8000c08:	681b      	ldr	r3, [r3, #0]

	for (i = 0; i < len; i += 2) {
 8000c0a:	2d00      	cmp	r5, #0
	*result = DESIG_UNIQUE_ID0;
 8000c0c:	9302      	str	r3, [sp, #8]
	for (i = 0; i < len; i += 2) {
 8000c0e:	dd16      	ble.n	8000c3e <desig_get_unique_id_as_string+0x5e>
 8000c10:	2200      	movs	r2, #0
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000c12:	ab08      	add	r3, sp, #32
 8000c14:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8000c18:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000c1c:	a808      	add	r0, sp, #32
 8000c1e:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 8000c22:	f810 0c14 	ldrb.w	r0, [r0, #-20]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	ae08      	add	r6, sp, #32
 8000c2c:	4433      	add	r3, r6
 8000c2e:	18a1      	adds	r1, r4, r2
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000c30:	54a0      	strb	r0, [r4, r2]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000c32:	f813 3c14 	ldrb.w	r3, [r3, #-20]
	for (i = 0; i < len; i += 2) {
 8000c36:	3202      	adds	r2, #2
 8000c38:	4295      	cmp	r5, r2
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000c3a:	704b      	strb	r3, [r1, #1]
	for (i = 0; i < len; i += 2) {
 8000c3c:	dce9      	bgt.n	8000c12 <desig_get_unique_id_as_string+0x32>
	}

	string[len] = '\0';
 8000c3e:	2300      	movs	r3, #0
 8000c40:	5563      	strb	r3, [r4, r5]
}
 8000c42:	b008      	add	sp, #32
 8000c44:	bcf0      	pop	{r4, r5, r6, r7}
 8000c46:	4770      	bx	lr
 8000c48:	08005b5c 	.word	0x08005b5c
 8000c4c:	1ffff7f0 	.word	0x1ffff7f0

08000c50 <gpio_set_mode>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000c54:	f643 7cf8 	movw	ip, #16376	; 0x3ff8
	crl = GPIO_CRL(gpioport);
 8000c58:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8000c5a:	2400      	movs	r4, #0
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000c5c:	270f      	movs	r7, #15
	crh = GPIO_CRH(gpioport);
 8000c5e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000c62:	e004      	b.n	8000c6e <gpio_set_mode+0x1e>
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000c64:	ea48 060a 	orr.w	r6, r8, sl
 8000c68:	3401      	adds	r4, #1
	for (i = 0; i < 16; i++) {
 8000c6a:	2c10      	cmp	r4, #16
 8000c6c:	d029      	beq.n	8000cc2 <gpio_set_mode+0x72>
		if (!((1 << i) & gpios)) {
 8000c6e:	fa43 f504 	asr.w	r5, r3, r4
 8000c72:	f015 0f01 	tst.w	r5, #1
 8000c76:	b2a5      	uxth	r5, r4
 8000c78:	d0f6      	beq.n	8000c68 <gpio_set_mode+0x18>
 8000c7a:	ea4f 0884 	mov.w	r8, r4, lsl #2
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000c7e:	f108 0902 	add.w	r9, r8, #2
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000c82:	fa07 fa08 	lsl.w	sl, r7, r8
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000c86:	fa02 f909 	lsl.w	r9, r2, r9
 8000c8a:	fa01 f808 	lsl.w	r8, r1, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000c8e:	2c07      	cmp	r4, #7
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000c90:	ea26 0a0a 	bic.w	sl, r6, sl
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000c94:	ea49 0808 	orr.w	r8, r9, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000c98:	d9e4      	bls.n	8000c64 <gpio_set_mode+0x14>
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000c9a:	4465      	add	r5, ip
 8000c9c:	00ad      	lsls	r5, r5, #2
 8000c9e:	b2ad      	uxth	r5, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000ca0:	f105 0802 	add.w	r8, r5, #2
 8000ca4:	fa01 f905 	lsl.w	r9, r1, r5
 8000ca8:	fa02 f808 	lsl.w	r8, r2, r8
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000cac:	fa07 f505 	lsl.w	r5, r7, r5
 8000cb0:	3401      	adds	r4, #1
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000cb2:	ea48 0809 	orr.w	r8, r8, r9
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000cb6:	ea2e 0505 	bic.w	r5, lr, r5
	for (i = 0; i < 16; i++) {
 8000cba:	2c10      	cmp	r4, #16
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000cbc:	ea48 0e05 	orr.w	lr, r8, r5
	for (i = 0; i < 16; i++) {
 8000cc0:	d1d5      	bne.n	8000c6e <gpio_set_mode+0x1e>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000cc2:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000cc4:	f8c0 e004 	str.w	lr, [r0, #4]
}
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000ccc <rcc_is_osc_ready.part.0>:

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <rcc_is_osc_ready.part.0+0xc>)
 8000cce:	6818      	ldr	r0, [r3, #0]
		return RCC_BDCR & RCC_BDCR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
	}
	return false;
}
 8000cd0:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <rcc_osc_on.part.1>:

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000cdc:	4a02      	ldr	r2, [pc, #8]	; (8000ce8 <rcc_osc_on.part.1+0xc>)
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ce4:	6013      	str	r3, [r2, #0]
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
		break;
	}
}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000cec:	4a02      	ldr	r2, [pc, #8]	; (8000cf8 <rcc_enable_rtc_clock+0xc>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021020 	.word	0x40021020

08000cfc <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8000cfc:	2806      	cmp	r0, #6
 8000cfe:	d80a      	bhi.n	8000d16 <rcc_set_rtc_clock_source+0x1a>
 8000d00:	e8df f000 	tbb	[pc, r0]
 8000d04:	2f040404 	.word	0x2f040404
 8000d08:	1d04      	.short	0x1d04
 8000d0a:	0a          	.byte	0x0a
 8000d0b:	00          	.byte	0x00
	case RCC_PLL2:
	case RCC_PLL3:
	case RCC_HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <rcc_set_rtc_clock_source+0x8c>)
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d14:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000d16:	4770      	bx	lr
		RCC_CSR |= RCC_CSR_LSION;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <rcc_set_rtc_clock_source+0x90>)
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000d1a:	461a      	mov	r2, r3
		RCC_CSR |= RCC_CSR_LSION;
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	f041 0101 	orr.w	r1, r1, #1
 8000d22:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	0799      	lsls	r1, r3, #30
 8000d28:	d5fc      	bpl.n	8000d24 <rcc_set_rtc_clock_source+0x28>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <rcc_set_rtc_clock_source+0x8c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d32:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d3a:	601a      	str	r2, [r3, #0]
		break;
 8000d3c:	4770      	bx	lr
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <rcc_set_rtc_clock_source+0x8c>)
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000d40:	461a      	mov	r2, r3
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	f041 0101 	orr.w	r1, r1, #1
 8000d48:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	0798      	lsls	r0, r3, #30
 8000d4e:	d5fc      	bpl.n	8000d4a <rcc_set_rtc_clock_source+0x4e>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d50:	6813      	ldr	r3, [r2, #0]
 8000d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d56:	6013      	str	r3, [r2, #0]
		RCC_BDCR |= (1 << 8);
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
		break;
 8000d60:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <rcc_set_rtc_clock_source+0x94>)
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000d64:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSEON;
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000d6c:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	039b      	lsls	r3, r3, #14
 8000d72:	d5fc      	bpl.n	8000d6e <rcc_set_rtc_clock_source+0x72>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <rcc_set_rtc_clock_source+0x8c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d7c:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000d84:	601a      	str	r2, [r3, #0]
		break;
 8000d86:	4770      	bx	lr
 8000d88:	40021020 	.word	0x40021020
 8000d8c:	40021024 	.word	0x40021024
 8000d90:	40021000 	.word	0x40021000

08000d94 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000d94:	b538      	push	{r3, r4, r5, lr}
		RCC_CR |= RCC_CR_HSION;
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
		return RCC_CR & RCC_CR_HSIRDY;
 8000d98:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSION;
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	f041 0101 	orr.w	r1, r1, #1
 8000da0:	6019      	str	r1, [r3, #0]
		return RCC_CR & RCC_CR_HSIRDY;
 8000da2:	6813      	ldr	r3, [r2, #0]
	while (!rcc_is_osc_ready(osc));
 8000da4:	0799      	lsls	r1, r3, #30
 8000da6:	d5fc      	bpl.n	8000da2 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xe>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000da8:	4827      	ldr	r0, [pc, #156]	; (8000e48 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
		return RCC_CR & RCC_CR_HSERDY;
 8000daa:	4926      	ldr	r1, [pc, #152]	; (8000e44 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000dac:	6803      	ldr	r3, [r0, #0]
 8000dae:	f023 0303 	bic.w	r3, r3, #3
 8000db2:	6003      	str	r3, [r0, #0]
		RCC_CR |= RCC_CR_HSEON;
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
		return RCC_CR & RCC_CR_HSERDY;
 8000dbc:	680b      	ldr	r3, [r1, #0]
	while (!rcc_is_osc_ready(osc));
 8000dbe:	039b      	lsls	r3, r3, #14
 8000dc0:	d5fc      	bpl.n	8000dbc <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x28>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000dc2:	4c21      	ldr	r4, [pc, #132]	; (8000e48 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000dc4:	2002      	movs	r0, #2
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	f023 0303 	bic.w	r3, r3, #3
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dd8:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de0:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dec:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000df4:	6023      	str	r3, [r4, #0]
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000df6:	f000 fd5d 	bl	80018b4 <flash_set_ws>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000e00:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000e04:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	f7ff ff61 	bl	8000cdc <rcc_osc_on.part.1>
 8000e1a:	f7ff ff57 	bl	8000ccc <rcc_is_osc_ready.part.0>
	while (!rcc_is_osc_ready(osc));
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d0fb      	beq.n	8000e1a <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x86>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000e22:	4909      	ldr	r1, [pc, #36]	; (8000e48 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb8>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000e26:	680b      	ldr	r3, [r1, #0]
	rcc_ahb_frequency = 72000000;
 8000e28:	4d09      	ldr	r5, [pc, #36]	; (8000e50 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xbc>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	600b      	str	r3, [r1, #0]
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
 8000e34:	4c07      	ldr	r4, [pc, #28]	; (8000e54 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc0>)
	rcc_apb1_frequency = 36000000;
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc4>)
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc8>)
	rcc_ahb_frequency = 72000000;
 8000e3a:	602a      	str	r2, [r5, #0]
	rcc_apb2_frequency = 72000000;
 8000e3c:	6022      	str	r2, [r4, #0]
	rcc_apb1_frequency = 36000000;
 8000e3e:	6003      	str	r3, [r0, #0]
}
 8000e40:	bd38      	pop	{r3, r4, r5, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40021004 	.word	0x40021004
 8000e4c:	044aa200 	.word	0x044aa200
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000010 	.word	0x20000010
 8000e58:	2000000c 	.word	0x2000000c
 8000e5c:	02255100 	.word	0x02255100

08000e60 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8000e60:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8000e62:	f240 3097 	movw	r0, #919	; 0x397
 8000e66:	f7ff fe9b 	bl	8000ba0 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8000e6a:	2300      	movs	r3, #0
	SET_REG(USB_BTABLE_REG, 0);
	SET_REG(USB_ISTR_REG, 0);

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000e6c:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
	SET_REG(USB_CNTR_REG, 0);
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <st_usbfs_v1_usbd_init+0x24>)
	SET_REG(USB_BTABLE_REG, 0);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <st_usbfs_v1_usbd_init+0x28>)
	SET_REG(USB_ISTR_REG, 0);
 8000e74:	4c05      	ldr	r4, [pc, #20]	; (8000e8c <st_usbfs_v1_usbd_init+0x2c>)
	SET_REG(USB_CNTR_REG, 0);
 8000e76:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 8000e78:	6003      	str	r3, [r0, #0]
	SET_REG(USB_ISTR_REG, 0);
 8000e7a:	6023      	str	r3, [r4, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <st_usbfs_v1_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000e7e:	6011      	str	r1, [r2, #0]
}
 8000e80:	bd10      	pop	{r4, pc}
 8000e82:	bf00      	nop
 8000e84:	40005c40 	.word	0x40005c40
 8000e88:	40005c50 	.word	0x40005c50
 8000e8c:	40005c44 	.word	0x40005c44
 8000e90:	20000b84 	.word	0x20000b84

08000e94 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8000e94:	3201      	adds	r2, #1
 8000e96:	1052      	asrs	r2, r2, #1
 8000e98:	b293      	uxth	r3, r2
 8000e9a:	b15a      	cbz	r2, 8000eb4 <st_usbfs_copy_to_pm+0x20>
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		*PM++ = *lbuf++;
 8000ea6:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000eaa:	3004      	adds	r0, #4
	for (len = (len + 1) >> 1; len; len--) {
 8000eac:	4299      	cmp	r1, r3
		*PM++ = *lbuf++;
 8000eae:	f840 2c04 	str.w	r2, [r0, #-4]
	for (len = (len + 1) >> 1; len; len--) {
 8000eb2:	d1f8      	bne.n	8000ea6 <st_usbfs_copy_to_pm+0x12>
	}
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 8000eb8:	b470      	push	{r4, r5, r6}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 8000eba:	f002 0601 	and.w	r6, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000ebe:	0852      	lsrs	r2, r2, #1
 8000ec0:	d00d      	beq.n	8000ede <st_usbfs_copy_from_pm+0x26>
	const volatile uint16_t *PM = vPM;
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	3201      	adds	r2, #1
 8000eca:	eb00 0542 	add.w	r5, r0, r2, lsl #1
		*lbuf = *PM;
 8000ece:	f833 4b04 	ldrh.w	r4, [r3], #4
 8000ed2:	f820 4b02 	strh.w	r4, [r0], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d1f9      	bne.n	8000ece <st_usbfs_copy_from_pm+0x16>
 8000eda:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	}

	if (odd) {
 8000ede:	b10e      	cbz	r6, 8000ee4 <st_usbfs_copy_from_pm+0x2c>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 8000ee0:	780b      	ldrb	r3, [r1, #0]
 8000ee2:	7003      	strb	r3, [r0, #0]
	}
}
 8000ee4:	bc70      	pop	{r4, r5, r6}
 8000ee6:	4770      	bx	lr

08000ee8 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8000ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eec:	4680      	mov	r8, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8000eee:	6800      	ldr	r0, [r0, #0]
{
 8000ef0:	468a      	mov	sl, r1
 8000ef2:	4617      	mov	r7, r2
 8000ef4:	461e      	mov	r6, r3
 8000ef6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	usbd_dev = driver->init();
 8000efa:	4780      	blx	r0
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 8000efc:	2500      	movs	r5, #0
	usbd_dev->strings = strings;
 8000efe:	6086      	str	r6, [r0, #8]
	usbd_dev->num_strings = num_strings;
 8000f00:	9e08      	ldr	r6, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <usbd_init+0x48>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8000f04:	490b      	ldr	r1, [pc, #44]	; (8000f34 <usbd_init+0x4c>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <usbd_init+0x50>)
	usbd_dev->num_strings = num_strings;
 8000f08:	60c6      	str	r6, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 8000f0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
	usbd_dev->desc = dev;
 8000f0c:	f8c0 a000 	str.w	sl, [r0]
	usbd_dev->driver = driver;
 8000f10:	f8c0 80dc 	str.w	r8, [r0, #220]	; 0xdc
	usbd_dev->config = conf;
 8000f14:	6047      	str	r7, [r0, #4]
	usbd_dev->ctrl_buf = control_buffer;
 8000f16:	6106      	str	r6, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8000f18:	f8a0 9014 	strh.w	r9, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8000f1c:	e9c0 131b 	strd	r1, r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8000f20:	6682      	str	r2, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8000f22:	e9c0 5532 	strd	r5, r5, [r0, #200]	; 0xc8
 8000f26:	e9c0 5534 	strd	r5, r5, [r0, #208]	; 0xd0
	}

	return usbd_dev;
}
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	bf00      	nop
 8000f30:	08001171 	.word	0x08001171
 8000f34:	080011d5 	.word	0x080011d5
 8000f38:	08001275 	.word	0x08001275

08000f3c <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 8000f3c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000f3e:	4770      	bx	lr

08000f40 <_usbd_reset>:

void _usbd_reset(usbd_device *usbd_dev)
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->current_address = 0;
 8000f42:	2500      	movs	r5, #0
{
 8000f44:	4604      	mov	r4, r0
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8000f46:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8000f48:	82c5      	strh	r5, [r0, #22]
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000f4a:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
 8000f4e:	b082      	sub	sp, #8
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000f50:	79db      	ldrb	r3, [r3, #7]
 8000f52:	9500      	str	r5, [sp, #0]
 8000f54:	6896      	ldr	r6, [r2, #8]
 8000f56:	4629      	mov	r1, r5
 8000f58:	462a      	mov	r2, r5
 8000f5a:	47b0      	blx	r6
	usbd_dev->driver->set_address(usbd_dev, 0);
 8000f5c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000f60:	4629      	mov	r1, r5
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4620      	mov	r0, r4
 8000f66:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8000f68:	69e3      	ldr	r3, [r4, #28]
 8000f6a:	b11b      	cbz	r3, 8000f74 <_usbd_reset+0x34>
}
 8000f6c:	b002      	add	sp, #8
 8000f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbd_dev->user_callback_reset();
 8000f72:	4718      	bx	r3
}
 8000f74:	b002      	add	sp, #8
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <usbd_poll>:
	usbd_dev->driver->poll(usbd_dev);
 8000f78:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	4718      	bx	r3

08000f80 <usbd_ep_setup>:
{
 8000f80:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000f82:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000f86:	68a4      	ldr	r4, [r4, #8]
 8000f88:	46a4      	mov	ip, r4
}
 8000f8a:	bc10      	pop	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000f8c:	4760      	bx	ip
 8000f8e:	bf00      	nop

08000f90 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8000f90:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000f92:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000f96:	69e4      	ldr	r4, [r4, #28]
 8000f98:	46a4      	mov	ip, r4
}
 8000f9a:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000f9c:	4760      	bx	ip
 8000f9e:	bf00      	nop

08000fa0 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8000fa0:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000fa2:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000fa6:	6a24      	ldr	r4, [r4, #32]
 8000fa8:	46a4      	mov	ip, r4
}
 8000faa:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000fac:	4760      	bx	ip
 8000fae:	bf00      	nop

08000fb0 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8000fb0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4718      	bx	r3

08000fb8 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8000fb8:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4718      	bx	r3

08000fc0 <usbd_ep_nak_set>:
}

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8000fc0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4718      	bx	r3

08000fc8 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8000fc8:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000fca:	6802      	ldr	r2, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
 8000fcc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000fce:	79d1      	ldrb	r1, [r2, #7]
{
 8000fd0:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000fd6:	d310      	bcc.n	8000ffa <usb_control_send_chunk+0x32>
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f7ff ffd9 	bl	8000f90 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
 8000fde:	2300      	movs	r3, #0
			DATA_IN : LAST_DATA_IN;
 8000fe0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 8000fe4:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	bf0c      	ite	eq
 8000fea:	2203      	moveq	r2, #3
 8000fec:	2202      	movne	r2, #2
		usbd_dev->control_state.needs_zlp = false;
 8000fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.state =
 8000ff2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf = NULL;
 8000ff6:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8000ff8:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f7ff ffc7 	bl	8000f90 <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001002:	2202      	movs	r2, #2
			usbd_dev->desc->bMaxPacketSize0;
 8001004:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.state = DATA_IN;
 8001006:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 800100a:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 800100c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 800100e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8001010:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8001012:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8001014:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8001016:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8001018:	bd10      	pop	{r4, pc}
 800101a:	bf00      	nop

0800101c <usb_control_request_dispatch>:
}

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	4605      	mov	r5, r0
 8001022:	460f      	mov	r7, r1
 8001024:	b083      	sub	sp, #12
 8001026:	f100 0838 	add.w	r8, r0, #56	; 0x38
 800102a:	f100 093c 	add.w	r9, r0, #60	; 0x3c
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 800102e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001032:	f100 0a68 	add.w	sl, r0, #104	; 0x68
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001036:	f100 0b40 	add.w	fp, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 800103a:	6826      	ldr	r6, [r4, #0]
 800103c:	b196      	cbz	r6, 8001064 <usb_control_request_dispatch+0x48>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 800103e:	7961      	ldrb	r1, [r4, #5]
 8001040:	783b      	ldrb	r3, [r7, #0]
 8001042:	7922      	ldrb	r2, [r4, #4]
 8001044:	400b      	ands	r3, r1
 8001046:	429a      	cmp	r2, r3
 8001048:	f104 0408 	add.w	r4, r4, #8
 800104c:	d108      	bne.n	8001060 <usb_control_request_dispatch+0x44>
			result = cb[i].cb(usbd_dev, req,
 800104e:	f8cd b000 	str.w	fp, [sp]
 8001052:	464b      	mov	r3, r9
 8001054:	4642      	mov	r2, r8
 8001056:	4639      	mov	r1, r7
 8001058:	4628      	mov	r0, r5
 800105a:	47b0      	blx	r6
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 800105c:	2801      	cmp	r0, #1
 800105e:	d90a      	bls.n	8001076 <usb_control_request_dispatch+0x5a>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001060:	4554      	cmp	r4, sl
 8001062:	d1ea      	bne.n	800103a <usb_control_request_dispatch+0x1e>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001064:	464b      	mov	r3, r9
 8001066:	4642      	mov	r2, r8
 8001068:	4639      	mov	r1, r7
 800106a:	4628      	mov	r0, r5
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 800106c:	b003      	add	sp, #12
 800106e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 8001072:	f000 bbed 	b.w	8001850 <_usbd_standard_request>
}
 8001076:	b003      	add	sp, #12
 8001078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800107c <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800107e:	6903      	ldr	r3, [r0, #16]
{
 8001080:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001082:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001084:	798b      	ldrb	r3, [r1, #6]
 8001086:	79ca      	ldrb	r2, [r1, #7]
{
 8001088:	460d      	mov	r5, r1
	usbd_dev->control_state.ctrl_len = req->wLength;
 800108a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800108e:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001090:	f7ff ffc4 	bl	800101c <usb_control_request_dispatch>
 8001094:	b1a8      	cbz	r0, 80010c2 <usb_control_setup_read+0x46>
		if (req->wLength) {
 8001096:	88eb      	ldrh	r3, [r5, #6]
 8001098:	b323      	cbz	r3, 80010e4 <usb_control_setup_read+0x68>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 800109a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800109c:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 800109e:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 80010a0:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 80010a2:	d917      	bls.n	80010d4 <usb_control_setup_read+0x58>
		if (len && (len % ep_size == 0)) {
 80010a4:	b132      	cbz	r2, 80010b4 <usb_control_setup_read+0x38>
 80010a6:	fb92 f3f1 	sdiv	r3, r2, r1
 80010aa:	fb01 2213 	mls	r2, r1, r3, r2
 80010ae:	fab2 f282 	clz	r2, r2
 80010b2:	0952      	lsrs	r2, r2, #5
			usbd_dev->control_state.needs_zlp =
 80010b4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 80010b8:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 80010ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 80010be:	f7ff bf83 	b.w	8000fc8 <usb_control_send_chunk>
 80010c2:	4606      	mov	r6, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80010c4:	4601      	mov	r1, r0
 80010c6:	2201      	movs	r2, #1
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ff71 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80010ce:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 80010d4:	2200      	movs	r2, #0
			usb_control_send_chunk(usbd_dev);
 80010d6:	4620      	mov	r0, r4
			usbd_dev->control_state.needs_zlp =
 80010d8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 80010dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 80010e0:	f7ff bf72 	b.w	8000fc8 <usb_control_send_chunk>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80010e4:	461a      	mov	r2, r3
 80010e6:	4619      	mov	r1, r3
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff ff51 	bl	8000f90 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 80010ee:	2304      	movs	r3, #4
 80010f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
 80010f6:	bf00      	nop

080010f8 <usb_control_recv_chunk>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 80010fa:	6802      	ldr	r2, [r0, #0]
 80010fc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80010fe:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001100:	79d2      	ldrb	r2, [r2, #7]
 8001102:	1ae4      	subs	r4, r4, r3
 8001104:	4294      	cmp	r4, r2
 8001106:	bfa8      	it	ge
 8001108:	4614      	movge	r4, r2
				       usbd_dev->control_state.ctrl_buf +
 800110a:	6b82      	ldr	r2, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800110c:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800110e:	441a      	add	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	4633      	mov	r3, r6
{
 8001114:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001116:	f7ff ff43 	bl	8000fa0 <usbd_ep_read_packet>
	if (size != packetsize) {
 800111a:	4286      	cmp	r6, r0
 800111c:	d104      	bne.n	8001128 <usb_control_recv_chunk+0x30>
	usbd_dev->control_state.ctrl_len += size;
 800111e:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001120:	b2a0      	uxth	r0, r4
 8001122:	441e      	add	r6, r3
 8001124:	87ae      	strh	r6, [r5, #60]	; 0x3c
}
 8001126:	bd70      	pop	{r4, r5, r6, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001128:	4628      	mov	r0, r5
 800112a:	2201      	movs	r2, #1
 800112c:	2100      	movs	r1, #0
 800112e:	f7ff ff3f 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001132:	2300      	movs	r3, #0
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	bf00      	nop

08001140 <usbd_register_control_callback>:
{
 8001140:	b470      	push	{r4, r5, r6}
 8001142:	4605      	mov	r5, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001144:	2600      	movs	r6, #0
		if (usbd_dev->user_control_callback[i].cb) {
 8001146:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8001148:	3508      	adds	r5, #8
 800114a:	b13c      	cbz	r4, 800115c <usbd_register_control_callback+0x1c>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 800114c:	3601      	adds	r6, #1
 800114e:	2e04      	cmp	r6, #4
 8001150:	d1f9      	bne.n	8001146 <usbd_register_control_callback+0x6>
	return -1;
 8001152:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8001156:	4620      	mov	r0, r4
 8001158:	bc70      	pop	{r4, r5, r6}
 800115a:	4770      	bx	lr
 800115c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
		usbd_dev->user_control_callback[i].type = type;
 8001160:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001164:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 8001168:	6483      	str	r3, [r0, #72]	; 0x48
}
 800116a:	4620      	mov	r0, r4
 800116c:	bc70      	pop	{r4, r5, r6}
 800116e:	4770      	bx	lr

08001170 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001170:	b538      	push	{r3, r4, r5, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001172:	2500      	movs	r5, #0
{
 8001174:	4604      	mov	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8001176:	4629      	mov	r1, r5
 8001178:	2201      	movs	r2, #1
	usbd_dev->control_state.complete = NULL;
 800117a:	6405      	str	r5, [r0, #64]	; 0x40
	usbd_ep_nak_set(usbd_dev, 0, 1);
 800117c:	f7ff ff20 	bl	8000fc0 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 8001180:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001182:	f104 0130 	add.w	r1, r4, #48	; 0x30
	if (req->wLength == 0) {
 8001186:	b1c3      	cbz	r3, 80011ba <_usbd_control_setup+0x4a>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001188:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800118c:	2a00      	cmp	r2, #0
 800118e:	db14      	blt.n	80011ba <_usbd_control_setup+0x4a>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001190:	8aa2      	ldrh	r2, [r4, #20]
 8001192:	429a      	cmp	r2, r3
 8001194:	d316      	bcc.n	80011c4 <_usbd_control_setup+0x54>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001196:	6921      	ldr	r1, [r4, #16]
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001198:	6822      	ldr	r2, [r4, #0]
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800119a:	63a1      	str	r1, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 800119c:	87a5      	strh	r5, [r4, #60]	; 0x3c
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 800119e:	79d2      	ldrb	r2, [r2, #7]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80011a0:	4620      	mov	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80011a2:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 80011a4:	bf34      	ite	cc
 80011a6:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80011a8:	2306      	movcs	r3, #6
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80011aa:	2200      	movs	r2, #0
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80011ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80011b0:	4611      	mov	r1, r2
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 80011b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80011b6:	f7ff bf03 	b.w	8000fc0 <usbd_ep_nak_set>
		usb_control_setup_read(usbd_dev, req);
 80011ba:	4620      	mov	r0, r4
}
 80011bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_control_setup_read(usbd_dev, req);
 80011c0:	f7ff bf5c 	b.w	800107c <usb_control_setup_read>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	4629      	mov	r1, r5
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff fef1 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80011ce:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80011d2:	bd38      	pop	{r3, r4, r5, pc}

080011d4 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 80011d4:	b538      	push	{r3, r4, r5, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 80011d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80011da:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d02b      	beq.n	8001238 <_usbd_control_out+0x64>
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d018      	beq.n	8001216 <_usbd_control_out+0x42>
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d007      	beq.n	80011f8 <_usbd_control_out+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2100      	movs	r1, #0
 80011ec:	f7ff fee0 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80011f8:	f7ff ff7e 	bl	80010f8 <usb_control_recv_chunk>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	dbfa      	blt.n	80011f6 <_usbd_control_out+0x22>
					usbd_dev->desc->bMaxPacketSize0) {
 8001200:	6822      	ldr	r2, [r4, #0]
		if ((usbd_dev->control_state.req.wLength -
 8001202:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 8001204:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
					usbd_dev->desc->bMaxPacketSize0) {
 8001206:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8001208:	1a5b      	subs	r3, r3, r1
 800120a:	4293      	cmp	r3, r2
 800120c:	dcf3      	bgt.n	80011f6 <_usbd_control_out+0x22>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 800120e:	2306      	movs	r3, #6
 8001210:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001214:	bd38      	pop	{r3, r4, r5, pc}
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001216:	2300      	movs	r3, #0
 8001218:	461a      	mov	r2, r3
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fec0 	bl	8000fa0 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001220:	2200      	movs	r2, #0
		if (usbd_dev->control_state.complete) {
 8001222:	6c23      	ldr	r3, [r4, #64]	; 0x40
		usbd_dev->control_state.state = IDLE;
 8001224:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001228:	b11b      	cbz	r3, 8001232 <_usbd_control_out+0x5e>
			usbd_dev->control_state.complete(usbd_dev,
 800122a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800122e:	4620      	mov	r0, r4
 8001230:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001232:	2300      	movs	r3, #0
 8001234:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001236:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001238:	f7ff ff5e 	bl	80010f8 <usb_control_recv_chunk>
 800123c:	2800      	cmp	r0, #0
 800123e:	dbda      	blt.n	80011f6 <_usbd_control_out+0x22>
		if (usb_control_request_dispatch(usbd_dev,
 8001240:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fee9 	bl	800101c <usb_control_request_dispatch>
 800124a:	4605      	mov	r5, r0
 800124c:	b148      	cbz	r0, 8001262 <_usbd_control_out+0x8e>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 800124e:	2300      	movs	r3, #0
 8001250:	4620      	mov	r0, r4
 8001252:	461a      	mov	r2, r3
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fe9b 	bl	8000f90 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 800125a:	2304      	movs	r3, #4
 800125c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001260:	bd38      	pop	{r3, r4, r5, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001262:	4601      	mov	r1, r0
 8001264:	2201      	movs	r2, #1
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fea2 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 800126c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop

08001274 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001274:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8001278:	b510      	push	{r4, lr}
	switch (usbd_dev->control_state.state) {
 800127a:	2b03      	cmp	r3, #3
{
 800127c:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 800127e:	d027      	beq.n	80012d0 <_usbd_control_in+0x5c>
 8001280:	2b04      	cmp	r3, #4
 8001282:	d00d      	beq.n	80012a0 <_usbd_control_in+0x2c>
 8001284:	2b02      	cmp	r3, #2
 8001286:	d007      	beq.n	8001298 <_usbd_control_in+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2100      	movs	r1, #0
 800128c:	f7ff fe90 	bl	8000fb0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001290:	2300      	movs	r3, #0
 8001292:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001296:	bd10      	pop	{r4, pc}
 8001298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 800129c:	f7ff be94 	b.w	8000fc8 <usb_control_send_chunk>
		if (usbd_dev->control_state.complete) {
 80012a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012a2:	b113      	cbz	r3, 80012aa <_usbd_control_in+0x36>
			usbd_dev->control_state.complete(usbd_dev,
 80012a4:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80012a8:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 80012aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <_usbd_control_in+0x1c>
 80012b2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d1ea      	bne.n	8001290 <_usbd_control_in+0x1c>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80012ba:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80012bc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4620      	mov	r0, r4
 80012c6:	4798      	blx	r3
	usbd_dev->control_state.state = IDLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80012ce:	bd10      	pop	{r4, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 80012d0:	2307      	movs	r3, #7
}
 80012d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_ep_nak_set(usbd_dev, 0, 0);
 80012d6:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 80012d8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		usbd_ep_nak_set(usbd_dev, 0, 0);
 80012dc:	4611      	mov	r1, r2
 80012de:	f7ff be6f 	b.w	8000fc0 <usbd_ep_nak_set>
 80012e2:	bf00      	nop

080012e4 <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 80012e6:	884e      	ldrh	r6, [r1, #2]
 80012e8:	b196      	cbz	r6, 8001310 <usb_standard_set_configuration+0x2c>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80012ea:	6803      	ldr	r3, [r0, #0]
 80012ec:	7c5d      	ldrb	r5, [r3, #17]
 80012ee:	b16d      	cbz	r5, 800130c <usb_standard_set_configuration+0x28>
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 80012f0:	6844      	ldr	r4, [r0, #4]
			if (req->wValue
 80012f2:	7963      	ldrb	r3, [r4, #5]
 80012f4:	42b3      	cmp	r3, r6
 80012f6:	d044      	beq.n	8001382 <usb_standard_set_configuration+0x9e>
 80012f8:	4622      	mov	r2, r4
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	e003      	b.n	8001306 <usb_standard_set_configuration+0x22>
			    == usbd_dev->config[i].bConfigurationValue) {
 80012fe:	7c97      	ldrb	r7, [r2, #18]
 8001300:	320d      	adds	r2, #13
			if (req->wValue
 8001302:	42be      	cmp	r6, r7
 8001304:	d022      	beq.n	800134c <usb_standard_set_configuration+0x68>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001306:	3301      	adds	r3, #1
 8001308:	42ab      	cmp	r3, r5
 800130a:	d1f8      	bne.n	80012fe <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 800130c:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 8001310:	75c6      	strb	r6, [r0, #23]
 8001312:	4604      	mov	r4, r0
	usbd_dev->driver->ep_reset(usbd_dev);
 8001314:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8001318:	460e      	mov	r6, r1
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 800131e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001322:	b18b      	cbz	r3, 8001348 <usb_standard_set_configuration+0x64>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001324:	2200      	movs	r2, #0
 8001326:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
 800132a:	64a2      	str	r2, [r4, #72]	; 0x48
 800132c:	6522      	str	r2, [r4, #80]	; 0x50
 800132e:	65a2      	str	r2, [r4, #88]	; 0x58
 8001330:	6622      	str	r2, [r4, #96]	; 0x60
 8001332:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8001336:	b113      	cbz	r3, 800133e <usb_standard_set_configuration+0x5a>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001338:	8871      	ldrh	r1, [r6, #2]
 800133a:	4620      	mov	r0, r4
 800133c:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800133e:	42af      	cmp	r7, r5
 8001340:	d002      	beq.n	8001348 <usb_standard_set_configuration+0x64>
 8001342:	f855 3b04 	ldr.w	r3, [r5], #4
 8001346:	e7f6      	b.n	8001336 <usb_standard_set_configuration+0x52>
	return USBD_REQ_HANDLED;
 8001348:	2001      	movs	r0, #1
}
 800134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	75c3      	strb	r3, [r0, #23]
	if (usbd_dev->current_config > 0) {
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0dd      	beq.n	8001312 <usb_standard_set_configuration+0x2e>
 8001356:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800135a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800135e:	3b0d      	subs	r3, #13
 8001360:	441c      	add	r4, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001362:	7925      	ldrb	r5, [r4, #4]
 8001364:	2d00      	cmp	r5, #0
 8001366:	d0d4      	beq.n	8001312 <usb_standard_set_configuration+0x2e>
 8001368:	2300      	movs	r3, #0
				*cfg->interface[i].cur_altsetting = 0;
 800136a:	461f      	mov	r7, r3
			if (cfg->interface[i].cur_altsetting) {
 800136c:	f8d4 2009 	ldr.w	r2, [r4, #9]
 8001370:	011e      	lsls	r6, r3, #4
 8001372:	58b2      	ldr	r2, [r6, r2]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001374:	3301      	adds	r3, #1
			if (cfg->interface[i].cur_altsetting) {
 8001376:	b10a      	cbz	r2, 800137c <usb_standard_set_configuration+0x98>
				*cfg->interface[i].cur_altsetting = 0;
 8001378:	7017      	strb	r7, [r2, #0]
 800137a:	7925      	ldrb	r5, [r4, #4]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800137c:	429d      	cmp	r5, r3
 800137e:	d8f5      	bhi.n	800136c <usb_standard_set_configuration+0x88>
 8001380:	e7c7      	b.n	8001312 <usb_standard_set_configuration+0x2e>
	usbd_dev->current_config = found_index + 1;
 8001382:	2301      	movs	r3, #1
 8001384:	75c3      	strb	r3, [r0, #23]
 8001386:	e7ec      	b.n	8001362 <usb_standard_set_configuration+0x7e>

08001388 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8001388:	8819      	ldrh	r1, [r3, #0]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	2901      	cmp	r1, #1
		*len = 1;
 800138e:	bf84      	itt	hi
 8001390:	2101      	movhi	r1, #1
 8001392:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8001394:	7dc3      	ldrb	r3, [r0, #23]
 8001396:	b913      	cbnz	r3, 800139e <usb_standard_get_configuration+0x16>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
	} else {
		(*buf)[0] = 0;
 8001398:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 800139a:	2001      	movs	r0, #1
 800139c:	4770      	bx	lr
		(*buf)[0] = cfg->bConfigurationValue;
 800139e:	6841      	ldr	r1, [r0, #4]
 80013a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80013a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80013a8:	440b      	add	r3, r1
 80013aa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80013ae:	2001      	movs	r0, #1
		(*buf)[0] = cfg->bConfigurationValue;
 80013b0:	7013      	strb	r3, [r2, #0]
}
 80013b2:	4770      	bx	lr

080013b4 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 80013b4:	b430      	push	{r4, r5}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 80013b6:	7dc4      	ldrb	r4, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80013b8:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80013ba:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80013be:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80013c2:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 80013c4:	4404      	add	r4, r0

	if (req->wIndex >= cfx->bNumInterfaces) {
 80013c6:	7920      	ldrb	r0, [r4, #4]
 80013c8:	888d      	ldrh	r5, [r1, #4]
 80013ca:	4285      	cmp	r5, r0
 80013cc:	d20d      	bcs.n	80013ea <usb_standard_get_interface+0x36>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 80013ce:	2001      	movs	r0, #1
 80013d0:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 80013d2:	888b      	ldrh	r3, [r1, #4]
 80013d4:	f8d4 1009 	ldr.w	r1, [r4, #9]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	585b      	ldr	r3, [r3, r1]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80013dc:	b103      	cbz	r3, 80013e0 <usb_standard_get_interface+0x2c>
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 80013e2:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80013e4:	7013      	strb	r3, [r2, #0]
}
 80013e6:	bc30      	pop	{r4, r5}
 80013e8:	4770      	bx	lr
		return USBD_REQ_NOTSUPP;
 80013ea:	2000      	movs	r0, #0
}
 80013ec:	bc30      	pop	{r4, r5}
 80013ee:	4770      	bx	lr

080013f0 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80013f0:	8819      	ldrh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 80013f2:	2001      	movs	r0, #1
	if (*len > 2) {
 80013f4:	2902      	cmp	r1, #2
		*len = 2;
 80013f6:	bf84      	itt	hi
 80013f8:	2102      	movhi	r1, #2
 80013fa:	8019      	strhhi	r1, [r3, #0]
	(*buf)[0] = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	6811      	ldr	r1, [r2, #0]
 8001400:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	7053      	strb	r3, [r2, #1]
}
 8001406:	4770      	bx	lr

08001408 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8001408:	b538      	push	{r3, r4, r5, lr}
	(void)req;

	if (*len > 2) {
 800140a:	881d      	ldrh	r5, [r3, #0]
{
 800140c:	4614      	mov	r4, r2
	if (*len > 2) {
 800140e:	2d02      	cmp	r5, #2
		*len = 2;
 8001410:	bf84      	itt	hi
 8001412:	2202      	movhi	r2, #2
 8001414:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001416:	8889      	ldrh	r1, [r1, #4]
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	f7ff fdcd 	bl	8000fb8 <usbd_ep_stall_get>
 800141e:	1c01      	adds	r1, r0, #0
 8001420:	bf18      	it	ne
 8001422:	2101      	movne	r1, #1
	(*buf)[1] = 0;
 8001424:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001426:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8001428:	2001      	movs	r0, #1
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800142a:	7019      	strb	r1, [r3, #0]
	(*buf)[1] = 0;
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	705a      	strb	r2, [r3, #1]
}
 8001430:	bd38      	pop	{r3, r4, r5, pc}
 8001432:	bf00      	nop

08001434 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8001434:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001436:	8889      	ldrh	r1, [r1, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	b2c9      	uxtb	r1, r1
 800143c:	f7ff fdb8 	bl	8000fb0 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001440:	2001      	movs	r0, #1
 8001442:	bd08      	pop	{r3, pc}

08001444 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8001444:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001446:	8889      	ldrh	r1, [r1, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	b2c9      	uxtb	r1, r1
 800144c:	f7ff fdb0 	bl	8000fb0 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001450:	2001      	movs	r0, #1
 8001452:	bd08      	pop	{r3, pc}

08001454 <usb_standard_set_address>:
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001454:	780b      	ldrb	r3, [r1, #0]
 8001456:	b98b      	cbnz	r3, 800147c <usb_standard_set_address+0x28>
{
 8001458:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 800145a:	884c      	ldrh	r4, [r1, #2]
 800145c:	2c7f      	cmp	r4, #127	; 0x7f
 800145e:	d80b      	bhi.n	8001478 <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 8001460:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 8001464:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001466:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800146a:	b14a      	cbz	r2, 8001480 <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 800146c:	8849      	ldrh	r1, [r1, #2]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	b2c9      	uxtb	r1, r1
 8001472:	4798      	blx	r3
	return USBD_REQ_HANDLED;
 8001474:	2001      	movs	r0, #1
}
 8001476:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 8001478:	4618      	mov	r0, r3
}
 800147a:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 800147c:	2000      	movs	r0, #0
}
 800147e:	4770      	bx	lr
	return USBD_REQ_HANDLED;
 8001480:	2001      	movs	r0, #1
}
 8001482:	bd10      	pop	{r4, pc}

08001484 <usb_standard_set_interface>:
{
 8001484:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001486:	7dc2      	ldrb	r2, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8001488:	6844      	ldr	r4, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 800148a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800148e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001492:	3a0d      	subs	r2, #13
	const struct usb_config_descriptor *cfx =
 8001494:	4422      	add	r2, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001496:	7915      	ldrb	r5, [r2, #4]
 8001498:	888c      	ldrh	r4, [r1, #4]
 800149a:	42a5      	cmp	r5, r4
 800149c:	d915      	bls.n	80014ca <usb_standard_set_interface+0x46>
	iface = &cfx->interface[req->wIndex];
 800149e:	f8d2 2009 	ldr.w	r2, [r2, #9]
 80014a2:	0124      	lsls	r4, r4, #4
 80014a4:	1915      	adds	r5, r2, r4
	if (req->wValue >= iface->num_altsetting) {
 80014a6:	792e      	ldrb	r6, [r5, #4]
 80014a8:	884d      	ldrh	r5, [r1, #2]
 80014aa:	42ae      	cmp	r6, r5
 80014ac:	d90d      	bls.n	80014ca <usb_standard_set_interface+0x46>
	if (iface->cur_altsetting) {
 80014ae:	5912      	ldr	r2, [r2, r4]
 80014b0:	b16a      	cbz	r2, 80014ce <usb_standard_set_interface+0x4a>
		*iface->cur_altsetting = req->wValue;
 80014b2:	7015      	strb	r5, [r2, #0]
 80014b4:	461c      	mov	r4, r3
	if (usbd_dev->user_callback_set_altsetting) {
 80014b6:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80014ba:	b113      	cbz	r3, 80014c2 <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 80014bc:	884a      	ldrh	r2, [r1, #2]
 80014be:	8889      	ldrh	r1, [r1, #4]
 80014c0:	4798      	blx	r3
	*len = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	2001      	movs	r0, #1
 80014c6:	8023      	strh	r3, [r4, #0]
}
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 80014ca:	2000      	movs	r0, #0
}
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 80014ce:	2d00      	cmp	r5, #0
 80014d0:	d0f0      	beq.n	80014b4 <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 80014d2:	4610      	mov	r0, r2
}
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
 80014d6:	bf00      	nop

080014d8 <usb_standard_get_descriptor>:
{
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 80014dc:	884d      	ldrh	r5, [r1, #2]
{
 80014de:	b089      	sub	sp, #36	; 0x24
	switch (usb_descriptor_type(req->wValue)) {
 80014e0:	0a2c      	lsrs	r4, r5, #8
 80014e2:	2c02      	cmp	r4, #2
{
 80014e4:	9306      	str	r3, [sp, #24]
	switch (usb_descriptor_type(req->wValue)) {
 80014e6:	d048      	beq.n	800157a <usb_standard_get_descriptor+0xa2>
 80014e8:	2c03      	cmp	r4, #3
 80014ea:	d012      	beq.n	8001512 <usb_standard_get_descriptor+0x3a>
 80014ec:	2c01      	cmp	r4, #1
 80014ee:	d003      	beq.n	80014f8 <usb_standard_get_descriptor+0x20>
				return USBD_REQ_NOTSUPP;
 80014f0:	2000      	movs	r0, #0
}
 80014f2:	b009      	add	sp, #36	; 0x24
 80014f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = (uint8_t *) usbd_dev->desc;
 80014f8:	6801      	ldr	r1, [r0, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 80014fa:	881d      	ldrh	r5, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 80014fc:	6011      	str	r1, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 80014fe:	461e      	mov	r6, r3
 8001500:	780b      	ldrb	r3, [r1, #0]
		return USBD_REQ_HANDLED;
 8001502:	4620      	mov	r0, r4
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001504:	42ab      	cmp	r3, r5
 8001506:	bf28      	it	cs
 8001508:	462b      	movcs	r3, r5
 800150a:	8033      	strh	r3, [r6, #0]
}
 800150c:	b009      	add	sp, #36	; 0x24
 800150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (descr_idx == 0) {
 8001512:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001516:	6906      	ldr	r6, [r0, #16]
		if (descr_idx == 0) {
 8001518:	f000 8115 	beq.w	8001746 <usb_standard_get_descriptor+0x26e>
			if (!usbd_dev->strings) {
 800151c:	6884      	ldr	r4, [r0, #8]
 800151e:	2c00      	cmp	r4, #0
 8001520:	d0e6      	beq.n	80014f0 <usb_standard_get_descriptor+0x18>
			if (array_idx >= usbd_dev->num_strings) {
 8001522:	68c3      	ldr	r3, [r0, #12]
			array_idx = descr_idx - 1;
 8001524:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 8001526:	42ab      	cmp	r3, r5
 8001528:	dde2      	ble.n	80014f0 <usb_standard_get_descriptor+0x18>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 800152a:	f240 4309 	movw	r3, #1033	; 0x409
 800152e:	8889      	ldrh	r1, [r1, #4]
 8001530:	4299      	cmp	r1, r3
 8001532:	d1dd      	bne.n	80014f0 <usb_standard_get_descriptor+0x18>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001534:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	4620      	mov	r0, r4
 800153c:	f002 fb08 	bl	8003b50 <strlen>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
			*len = MIN(*len, sd->bLength);
 8001546:	9a06      	ldr	r2, [sp, #24]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001548:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 800154a:	8811      	ldrh	r1, [r2, #0]
 800154c:	4615      	mov	r5, r2
 800154e:	428b      	cmp	r3, r1
 8001550:	bf28      	it	cs
 8001552:	460b      	movcs	r3, r1
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001554:	2b03      	cmp	r3, #3
			*len = MIN(*len, sd->bLength);
 8001556:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001558:	9a00      	ldr	r2, [sp, #0]
 800155a:	f240 80ff 	bls.w	800175c <usb_standard_get_descriptor+0x284>
 800155e:	2100      	movs	r1, #0
 8001560:	1e60      	subs	r0, r4, #1
					usbd_dev->strings[array_idx][i];
 8001562:	f810 4f01 	ldrb.w	r4, [r0, #1]!
				sd->wData[i] =
 8001566:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 800156a:	805c      	strh	r4, [r3, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800156c:	882b      	ldrh	r3, [r5, #0]
 800156e:	3101      	adds	r1, #1
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	3b01      	subs	r3, #1
 8001574:	428b      	cmp	r3, r1
 8001576:	dcf4      	bgt.n	8001562 <usb_standard_get_descriptor+0x8a>
 8001578:	e0f0      	b.n	800175c <usb_standard_get_descriptor+0x284>
		*buf = usbd_dev->ctrl_buf;
 800157a:	6901      	ldr	r1, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800157c:	b2ed      	uxtb	r5, r5
 800157e:	6846      	ldr	r6, [r0, #4]
 8001580:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		*buf = usbd_dev->ctrl_buf;
 8001584:	6011      	str	r1, [r2, #0]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001586:	9a06      	ldr	r2, [sp, #24]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001588:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800158c:	5d73      	ldrb	r3, [r6, r5]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800158e:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001590:	1972      	adds	r2, r6, r5
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001592:	42a3      	cmp	r3, r4
 8001594:	bf28      	it	cs
 8001596:	4623      	movcs	r3, r4
 8001598:	4690      	mov	r8, r2
 800159a:	469b      	mov	fp, r3
		*buf = usbd_dev->ctrl_buf;
 800159c:	460f      	mov	r7, r1
 800159e:	9107      	str	r1, [sp, #28]
 80015a0:	4608      	mov	r0, r1
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80015a2:	9203      	str	r2, [sp, #12]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80015a4:	4611      	mov	r1, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	f002 faba 	bl	8003b20 <memcpy>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80015ac:	f898 3004 	ldrb.w	r3, [r8, #4]
	len -= count;
 80015b0:	eba4 040b 	sub.w	r4, r4, fp
 80015b4:	b2a4      	uxth	r4, r4
	totallen += cfg->bLength;
 80015b6:	f816 a005 	ldrb.w	sl, [r6, r5]
	buf += count;
 80015ba:	eb07 090b 	add.w	r9, r7, fp
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80b7 	beq.w	8001732 <usb_standard_get_descriptor+0x25a>
 80015c4:	2300      	movs	r3, #0
 80015c6:	9305      	str	r3, [sp, #20]
 80015c8:	f8d8 2009 	ldr.w	r2, [r8, #9]
 80015cc:	9b05      	ldr	r3, [sp, #20]
 80015ce:	011f      	lsls	r7, r3, #4
		if (cfg->interface[i].iface_assoc) {
 80015d0:	19d3      	adds	r3, r2, r7
 80015d2:	689d      	ldr	r5, [r3, #8]
 80015d4:	9704      	str	r7, [sp, #16]
 80015d6:	b1bd      	cbz	r5, 8001608 <usb_standard_get_descriptor+0x130>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 80015d8:	782e      	ldrb	r6, [r5, #0]
 80015da:	4629      	mov	r1, r5
 80015dc:	42a6      	cmp	r6, r4
 80015de:	bf28      	it	cs
 80015e0:	4626      	movcs	r6, r4
 80015e2:	4648      	mov	r0, r9
 80015e4:	4632      	mov	r2, r6
 80015e6:	f002 fa9b 	bl	8003b20 <memcpy>
 80015ea:	9a03      	ldr	r2, [sp, #12]
			totallen += assoc->bLength;
 80015ec:	782b      	ldrb	r3, [r5, #0]
 80015ee:	f8d2 2009 	ldr.w	r2, [r2, #9]
 80015f2:	449a      	add	sl, r3
			len -= count;
 80015f4:	1ba4      	subs	r4, r4, r6
			total += count;
 80015f6:	eb06 010b 	add.w	r1, r6, fp
			len -= count;
 80015fa:	b2a4      	uxth	r4, r4
			total += count;
 80015fc:	fa1f fb81 	uxth.w	fp, r1
			buf += count;
 8001600:	44b1      	add	r9, r6
			totallen += assoc->bLength;
 8001602:	fa1f fa8a 	uxth.w	sl, sl
 8001606:	19d3      	adds	r3, r2, r7
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001608:	7919      	ldrb	r1, [r3, #4]
 800160a:	2900      	cmp	r1, #0
 800160c:	f000 8088 	beq.w	8001720 <usb_standard_get_descriptor+0x248>
 8001610:	2200      	movs	r2, #0
 8001612:	9202      	str	r2, [sp, #8]
			const struct usb_interface_descriptor *iface =
 8001614:	68df      	ldr	r7, [r3, #12]
 8001616:	9b02      	ldr	r3, [sp, #8]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001618:	4648      	mov	r0, r9
			const struct usb_interface_descriptor *iface =
 800161a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800161e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001622:	5dbd      	ldrb	r5, [r7, r6]
			const struct usb_interface_descriptor *iface =
 8001624:	19ba      	adds	r2, r7, r6
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001626:	42a5      	cmp	r5, r4
 8001628:	bf28      	it	cs
 800162a:	4625      	movcs	r5, r4
 800162c:	4690      	mov	r8, r2
 800162e:	4611      	mov	r1, r2
			const struct usb_interface_descriptor *iface =
 8001630:	9200      	str	r2, [sp, #0]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001632:	462a      	mov	r2, r5
 8001634:	f002 fa74 	bl	8003b20 <memcpy>
			totallen += iface->bLength;
 8001638:	5dbb      	ldrb	r3, [r7, r6]
			if (iface->extra) {
 800163a:	f8d8 100d 	ldr.w	r1, [r8, #13]
			len -= count;
 800163e:	1b64      	subs	r4, r4, r5
			total += count;
 8001640:	44ab      	add	fp, r5
			totallen += iface->bLength;
 8001642:	449a      	add	sl, r3
			len -= count;
 8001644:	b2a4      	uxth	r4, r4
			total += count;
 8001646:	fa1f fb8b 	uxth.w	fp, fp
			buf += count;
 800164a:	44a9      	add	r9, r5
			totallen += iface->bLength;
 800164c:	fa1f fa8a 	uxth.w	sl, sl
			if (iface->extra) {
 8001650:	b1a1      	cbz	r1, 800167c <usb_standard_get_descriptor+0x1a4>
				       count = MIN(len, iface->extralen));
 8001652:	f8d8 5011 	ldr.w	r5, [r8, #17]
				memcpy(buf, iface->extra,
 8001656:	4648      	mov	r0, r9
				       count = MIN(len, iface->extralen));
 8001658:	42a5      	cmp	r5, r4
 800165a:	bfa8      	it	ge
 800165c:	4625      	movge	r5, r4
				memcpy(buf, iface->extra,
 800165e:	b2ae      	uxth	r6, r5
 8001660:	4632      	mov	r2, r6
 8001662:	f002 fa5d 	bl	8003b20 <memcpy>
				totallen += iface->extralen;
 8001666:	f8d8 3011 	ldr.w	r3, [r8, #17]
				len -= count;
 800166a:	1ba4      	subs	r4, r4, r6
				total += count;
 800166c:	44b3      	add	fp, r6
				totallen += iface->extralen;
 800166e:	449a      	add	sl, r3
				len -= count;
 8001670:	b2a4      	uxth	r4, r4
				total += count;
 8001672:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 8001676:	44b1      	add	r9, r6
				totallen += iface->extralen;
 8001678:	fa1f fa8a 	uxth.w	sl, sl
			for (k = 0; k < iface->bNumEndpoints; k++) {
 800167c:	9b00      	ldr	r3, [sp, #0]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d040      	beq.n	8001706 <usb_standard_get_descriptor+0x22e>
 8001684:	2500      	movs	r5, #0
 8001686:	4653      	mov	r3, sl
 8001688:	9301      	str	r3, [sp, #4]
				    &iface->endpoint[k];
 800168a:	9b00      	ldr	r3, [sp, #0]
				const struct usb_endpoint_descriptor *ep =
 800168c:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
				    &iface->endpoint[k];
 8001690:	f8d3 a009 	ldr.w	sl, [r3, #9]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001694:	4648      	mov	r0, r9
 8001696:	f81a 6008 	ldrb.w	r6, [sl, r8]
				const struct usb_endpoint_descriptor *ep =
 800169a:	eb0a 0708 	add.w	r7, sl, r8
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 800169e:	42a6      	cmp	r6, r4
 80016a0:	bf28      	it	cs
 80016a2:	4626      	movcs	r6, r4
 80016a4:	4639      	mov	r1, r7
 80016a6:	4632      	mov	r2, r6
 80016a8:	f002 fa3a 	bl	8003b20 <memcpy>
				totallen += ep->bLength;
 80016ac:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80016b0:	9b01      	ldr	r3, [sp, #4]
				if (ep->extra) {
 80016b2:	f8d7 1007 	ldr.w	r1, [r7, #7]
				len -= count;
 80016b6:	1ba4      	subs	r4, r4, r6
				total += count;
 80016b8:	44b3      	add	fp, r6
				totallen += ep->bLength;
 80016ba:	4413      	add	r3, r2
				len -= count;
 80016bc:	b2a4      	uxth	r4, r4
				total += count;
 80016be:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 80016c2:	44b1      	add	r9, r6
				totallen += ep->bLength;
 80016c4:	b29b      	uxth	r3, r3
				if (ep->extra) {
 80016c6:	b1b9      	cbz	r1, 80016f8 <usb_standard_get_descriptor+0x220>
 80016c8:	9301      	str	r3, [sp, #4]
					       count = MIN(len, ep->extralen));
 80016ca:	f8d7 600b 	ldr.w	r6, [r7, #11]
					memcpy(buf, ep->extra,
 80016ce:	4648      	mov	r0, r9
					       count = MIN(len, ep->extralen));
 80016d0:	42a6      	cmp	r6, r4
 80016d2:	bfa8      	it	ge
 80016d4:	4626      	movge	r6, r4
					memcpy(buf, ep->extra,
 80016d6:	fa1f f886 	uxth.w	r8, r6
					       count = MIN(len, ep->extralen));
 80016da:	4646      	mov	r6, r8
					memcpy(buf, ep->extra,
 80016dc:	4642      	mov	r2, r8
 80016de:	f002 fa1f 	bl	8003b20 <memcpy>
					totallen += ep->extralen;
 80016e2:	f8d7 200b 	ldr.w	r2, [r7, #11]
 80016e6:	9b01      	ldr	r3, [sp, #4]
					len -= count;
 80016e8:	1ba4      	subs	r4, r4, r6
					total += count;
 80016ea:	44c3      	add	fp, r8
					totallen += ep->extralen;
 80016ec:	4413      	add	r3, r2
					len -= count;
 80016ee:	b2a4      	uxth	r4, r4
					total += count;
 80016f0:	fa1f fb8b 	uxth.w	fp, fp
					buf += count;
 80016f4:	44c1      	add	r9, r8
					totallen += ep->extralen;
 80016f6:	b29b      	uxth	r3, r3
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80016f8:	9a00      	ldr	r2, [sp, #0]
 80016fa:	3501      	adds	r5, #1
 80016fc:	7911      	ldrb	r1, [r2, #4]
 80016fe:	b2aa      	uxth	r2, r5
 8001700:	4291      	cmp	r1, r2
 8001702:	d8c1      	bhi.n	8001688 <usb_standard_get_descriptor+0x1b0>
 8001704:	469a      	mov	sl, r3
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	9902      	ldr	r1, [sp, #8]
 800170a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800170e:	9b04      	ldr	r3, [sp, #16]
 8001710:	3101      	adds	r1, #1
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	791d      	ldrb	r5, [r3, #4]
 8001716:	b288      	uxth	r0, r1
 8001718:	4285      	cmp	r5, r0
 800171a:	9102      	str	r1, [sp, #8]
 800171c:	f63f af7a 	bhi.w	8001614 <usb_standard_get_descriptor+0x13c>
 8001720:	9b05      	ldr	r3, [sp, #20]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001722:	9903      	ldr	r1, [sp, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	7908      	ldrb	r0, [r1, #4]
 8001728:	b299      	uxth	r1, r3
 800172a:	4288      	cmp	r0, r1
 800172c:	9305      	str	r3, [sp, #20]
 800172e:	f63f af4d 	bhi.w	80015cc <usb_standard_get_descriptor+0xf4>
		return USBD_REQ_HANDLED;
 8001732:	2001      	movs	r0, #1
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8001734:	9b07      	ldr	r3, [sp, #28]
 8001736:	f8a3 a002 	strh.w	sl, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800173a:	9b06      	ldr	r3, [sp, #24]
 800173c:	f8a3 b000 	strh.w	fp, [r3]
}
 8001740:	b009      	add	sp, #36	; 0x24
 8001742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001746:	2109      	movs	r1, #9
 8001748:	2304      	movs	r3, #4
 800174a:	70b1      	strb	r1, [r6, #2]
			*len = MIN(*len, sd->bLength);
 800174c:	9906      	ldr	r1, [sp, #24]
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 800174e:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 8001750:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 8001752:	880b      	ldrh	r3, [r1, #0]
 8001754:	2b04      	cmp	r3, #4
 8001756:	bf28      	it	cs
 8001758:	2304      	movcs	r3, #4
 800175a:	800b      	strh	r3, [r1, #0]
		sd->bDescriptorType = USB_DT_STRING;
 800175c:	2303      	movs	r3, #3
		return USBD_REQ_HANDLED;
 800175e:	2001      	movs	r0, #1
		sd->bDescriptorType = USB_DT_STRING;
 8001760:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 8001762:	6016      	str	r6, [r2, #0]
}
 8001764:	b009      	add	sp, #36	; 0x24
 8001766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176a:	bf00      	nop

0800176c <usb_standard_interface_get_status>:
 800176c:	8819      	ldrh	r1, [r3, #0]
 800176e:	2001      	movs	r0, #1
 8001770:	2902      	cmp	r1, #2
 8001772:	bf84      	itt	hi
 8001774:	2102      	movhi	r1, #2
 8001776:	8019      	strhhi	r1, [r3, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	6811      	ldr	r1, [r2, #0]
 800177c:	700b      	strb	r3, [r1, #0]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	7053      	strb	r3, [r2, #1]
 8001782:	4770      	bx	lr

08001784 <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001784:	2200      	movs	r2, #0
{
 8001786:	b410      	push	{r4}
 8001788:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 800178c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001790:	b163      	cbz	r3, 80017ac <usbd_register_set_config_callback+0x28>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8001792:	428b      	cmp	r3, r1
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001794:	f102 0201 	add.w	r2, r2, #1
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8001798:	d005      	beq.n	80017a6 <usbd_register_set_config_callback+0x22>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800179a:	2a04      	cmp	r2, #4
 800179c:	d1f6      	bne.n	800178c <usbd_register_set_config_callback+0x8>
	return -1;
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80017a2:	bc10      	pop	{r4}
 80017a4:	4770      	bx	lr
				return 0;
 80017a6:	2000      	movs	r0, #0
}
 80017a8:	bc10      	pop	{r4}
 80017aa:	4770      	bx	lr
		usbd_dev->user_callback_set_config[i] = callback;
 80017ac:	3232      	adds	r2, #50	; 0x32
 80017ae:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		return 0;
 80017b2:	4618      	mov	r0, r3
 80017b4:	e7f8      	b.n	80017a8 <usbd_register_set_config_callback+0x24>
 80017b6:	bf00      	nop

080017b8 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 80017b8:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80017ba:	784c      	ldrb	r4, [r1, #1]
 80017bc:	2c09      	cmp	r4, #9
 80017be:	d81a      	bhi.n	80017f6 <_usbd_standard_request_device+0x3e>
 80017c0:	e8df f004 	tbb	[pc, r4]
 80017c4:	19191911 	.word	0x19191911
 80017c8:	19090519 	.word	0x19090519
 80017cc:	0d15      	.short	0x0d15
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 80017ce:	4c0b      	ldr	r4, [pc, #44]	; (80017fc <_usbd_standard_request_device+0x44>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80017d0:	46a4      	mov	ip, r4
}
 80017d2:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80017d4:	4760      	bx	ip
		command = usb_standard_get_descriptor;
 80017d6:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <_usbd_standard_request_device+0x48>)
	return command(usbd_dev, req, buf, len);
 80017d8:	46a4      	mov	ip, r4
}
 80017da:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80017dc:	4760      	bx	ip
		command = usb_standard_set_configuration;
 80017de:	4c09      	ldr	r4, [pc, #36]	; (8001804 <_usbd_standard_request_device+0x4c>)
	return command(usbd_dev, req, buf, len);
 80017e0:	46a4      	mov	ip, r4
}
 80017e2:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80017e4:	4760      	bx	ip
		command = usb_standard_device_get_status;
 80017e6:	4c08      	ldr	r4, [pc, #32]	; (8001808 <_usbd_standard_request_device+0x50>)
	return command(usbd_dev, req, buf, len);
 80017e8:	46a4      	mov	ip, r4
}
 80017ea:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80017ec:	4760      	bx	ip
		command = usb_standard_get_configuration;
 80017ee:	4c07      	ldr	r4, [pc, #28]	; (800180c <_usbd_standard_request_device+0x54>)
	return command(usbd_dev, req, buf, len);
 80017f0:	46a4      	mov	ip, r4
}
 80017f2:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80017f4:	4760      	bx	ip
}
 80017f6:	2000      	movs	r0, #0
 80017f8:	bc10      	pop	{r4}
 80017fa:	4770      	bx	lr
 80017fc:	08001455 	.word	0x08001455
 8001800:	080014d9 	.word	0x080014d9
 8001804:	080012e5 	.word	0x080012e5
 8001808:	080013f1 	.word	0x080013f1
 800180c:	08001389 	.word	0x08001389

08001810 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8001810:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001812:	784c      	ldrb	r4, [r1, #1]
 8001814:	2c01      	cmp	r4, #1
 8001816:	d008      	beq.n	800182a <_usbd_standard_request_endpoint+0x1a>
 8001818:	d30c      	bcc.n	8001834 <_usbd_standard_request_endpoint+0x24>
 800181a:	2c03      	cmp	r4, #3
 800181c:	d107      	bne.n	800182e <_usbd_standard_request_endpoint+0x1e>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800181e:	884c      	ldrh	r4, [r1, #2]
 8001820:	b92c      	cbnz	r4, 800182e <_usbd_standard_request_endpoint+0x1e>
			command = usb_standard_endpoint_stall;
 8001822:	4c08      	ldr	r4, [pc, #32]	; (8001844 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001824:	46a4      	mov	ip, r4
}
 8001826:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001828:	4760      	bx	ip
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800182a:	884c      	ldrh	r4, [r1, #2]
 800182c:	b134      	cbz	r4, 800183c <_usbd_standard_request_endpoint+0x2c>
}
 800182e:	2000      	movs	r0, #0
 8001830:	bc10      	pop	{r4}
 8001832:	4770      	bx	lr
		command = usb_standard_endpoint_get_status;
 8001834:	4c04      	ldr	r4, [pc, #16]	; (8001848 <_usbd_standard_request_endpoint+0x38>)
	return command(usbd_dev, req, buf, len);
 8001836:	46a4      	mov	ip, r4
}
 8001838:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 800183a:	4760      	bx	ip
			command = usb_standard_endpoint_unstall;
 800183c:	4c03      	ldr	r4, [pc, #12]	; (800184c <_usbd_standard_request_endpoint+0x3c>)
	return command(usbd_dev, req, buf, len);
 800183e:	46a4      	mov	ip, r4
}
 8001840:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001842:	4760      	bx	ip
 8001844:	08001435 	.word	0x08001435
 8001848:	08001409 	.word	0x08001409
 800184c:	08001445 	.word	0x08001445

08001850 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8001850:	b4f0      	push	{r4, r5, r6, r7}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001852:	780c      	ldrb	r4, [r1, #0]
 8001854:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001858:	d113      	bne.n	8001882 <_usbd_standard_request+0x32>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 800185a:	f004 041f 	and.w	r4, r4, #31
 800185e:	2c01      	cmp	r4, #1
 8001860:	d005      	beq.n	800186e <_usbd_standard_request+0x1e>
 8001862:	d311      	bcc.n	8001888 <_usbd_standard_request+0x38>
 8001864:	2c02      	cmp	r4, #2
 8001866:	d10c      	bne.n	8001882 <_usbd_standard_request+0x32>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001868:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 800186a:	f7ff bfd1 	b.w	8001810 <_usbd_standard_request_endpoint>
 800186e:	469c      	mov	ip, r3
	switch (req->bRequest) {
 8001870:	784b      	ldrb	r3, [r1, #1]
 8001872:	460d      	mov	r5, r1
 8001874:	2b0a      	cmp	r3, #10
 8001876:	4606      	mov	r6, r0
 8001878:	4617      	mov	r7, r2
 800187a:	d012      	beq.n	80018a2 <_usbd_standard_request+0x52>
 800187c:	2b0b      	cmp	r3, #11
 800187e:	d00e      	beq.n	800189e <_usbd_standard_request+0x4e>
 8001880:	b12b      	cbz	r3, 800188e <_usbd_standard_request+0x3e>
}
 8001882:	bcf0      	pop	{r4, r5, r6, r7}
 8001884:	2000      	movs	r0, #0
 8001886:	4770      	bx	lr
 8001888:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 800188a:	f7ff bf95 	b.w	80017b8 <_usbd_standard_request_device>
		command = usb_standard_interface_get_status;
 800188e:	4c06      	ldr	r4, [pc, #24]	; (80018a8 <_usbd_standard_request+0x58>)
	return command(usbd_dev, req, buf, len);
 8001890:	4663      	mov	r3, ip
 8001892:	463a      	mov	r2, r7
 8001894:	4629      	mov	r1, r5
 8001896:	4630      	mov	r0, r6
 8001898:	46a4      	mov	ip, r4
}
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
	return command(usbd_dev, req, buf, len);
 800189c:	4760      	bx	ip
		command = usb_standard_set_interface;
 800189e:	4c03      	ldr	r4, [pc, #12]	; (80018ac <_usbd_standard_request+0x5c>)
 80018a0:	e7f6      	b.n	8001890 <_usbd_standard_request+0x40>
		command = usb_standard_get_interface;
 80018a2:	4c03      	ldr	r4, [pc, #12]	; (80018b0 <_usbd_standard_request+0x60>)
 80018a4:	e7f4      	b.n	8001890 <_usbd_standard_request+0x40>
 80018a6:	bf00      	nop
 80018a8:	0800176d 	.word	0x0800176d
 80018ac:	08001485 	.word	0x08001485
 80018b0:	080013b5 	.word	0x080013b5

080018b4 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <flash_set_ws+0x10>)
 80018b6:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80018b8:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 80018bc:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 80018be:	6010      	str	r0, [r2, #0]
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000

080018c8 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <st_usbfs_set_address+0xc>)
 80018ca:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80018ce:	6019      	str	r1, [r3, #0]
}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40005c4c 	.word	0x40005c4c

080018d8 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 80018d8:	2a3e      	cmp	r2, #62	; 0x3e
{
 80018da:	b410      	push	{r4}
	if (size > 62) {
 80018dc:	d811      	bhi.n	8001902 <st_usbfs_set_ep_rx_bufsize+0x2a>
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
	} else {
		/* round up and div by 2 */
		size = (size + 1) >> 1;
 80018de:	3201      	adds	r2, #1
		realsize = size << 1;
 80018e0:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80018e4:	0050      	lsls	r0, r2, #1
 80018e6:	b280      	uxth	r0, r0
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <st_usbfs_set_ep_rx_bufsize+0x3c>)
 80018ea:	4c0b      	ldr	r4, [pc, #44]	; (8001918 <st_usbfs_set_ep_rx_bufsize+0x40>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0292      	lsls	r2, r2, #10
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80018f6:	0049      	lsls	r1, r1, #1
 80018f8:	440c      	add	r4, r1
 80018fa:	b292      	uxth	r2, r2
 80018fc:	6022      	str	r2, [r4, #0]
	return realsize;
}
 80018fe:	bc10      	pop	{r4}
 8001900:	4770      	bx	lr
		size = ((size - 1) >> 5) & 0x1F;
 8001902:	3a01      	subs	r2, #1
 8001904:	f3c2 1244 	ubfx	r2, r2, #5, #5
		realsize = (size + 1) << 5;
 8001908:	1c50      	adds	r0, r2, #1
 800190a:	0140      	lsls	r0, r0, #5
 800190c:	f042 0220 	orr.w	r2, r2, #32
 8001910:	e7ea      	b.n	80018e8 <st_usbfs_set_ep_rx_bufsize+0x10>
 8001912:	bf00      	nop
 8001914:	40005c50 	.word	0x40005c50
 8001918:	4000600c 	.word	0x4000600c

0800191c <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 800191e:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001922:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001926:	00b4      	lsls	r4, r6, #2
 8001928:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800192c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001930:	6825      	ldr	r5, [r4, #0]
{
 8001932:	b083      	sub	sp, #12
	USB_SET_EP_ADDR(addr, addr);
 8001934:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001938:	f10d 0c08 	add.w	ip, sp, #8
	USB_SET_EP_ADDR(addr, addr);
 800193c:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001940:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
	USB_SET_EP_ADDR(addr, addr);
 8001944:	4335      	orrs	r5, r6
	const uint16_t typelookup[] = {
 8001946:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001a30 <st_usbfs_ep_setup+0x114>
	USB_SET_EP_ADDR(addr, addr);
 800194a:	b2ad      	uxth	r5, r5
	const uint16_t typelookup[] = {
 800194c:	e9cd c700 	strd	ip, r7, [sp]
	USB_SET_EP_ADDR(addr, addr);
 8001950:	6025      	str	r5, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001952:	6825      	ldr	r5, [r4, #0]
 8001954:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001958:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 800195c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8001960:	4315      	orrs	r5, r2
 8001962:	b249      	sxtb	r1, r1
 8001964:	b2ad      	uxth	r5, r5

	if (dir || (addr == 0)) {
 8001966:	2900      	cmp	r1, #0
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001968:	6025      	str	r5, [r4, #0]
 800196a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800196e:	f8b0 c018 	ldrh.w	ip, [r0, #24]
{
 8001972:	9f08      	ldr	r7, [sp, #32]
	if (dir || (addr == 0)) {
 8001974:	db00      	blt.n	8001978 <st_usbfs_ep_setup+0x5c>
 8001976:	bb5e      	cbnz	r6, 80019d0 <st_usbfs_ep_setup+0xb4>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <st_usbfs_ep_setup+0x110>)
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	b292      	uxth	r2, r2
 800197e:	4472      	add	r2, lr
 8001980:	0052      	lsls	r2, r2, #1
 8001982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001986:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 800198a:	f8c2 c000 	str.w	ip, [r2]
		if (callback) {
 800198e:	b127      	cbz	r7, 800199a <st_usbfs_ep_setup+0x7e>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001990:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001994:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001998:	6697      	str	r7, [r2, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 800199a:	f648 75cf 	movw	r5, #36815	; 0x8fcf
 800199e:	6822      	ldr	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
		dev->pm_top += max_size;
 80019a0:	449c      	add	ip, r3
		USB_CLR_EP_TX_DTOG(addr);
 80019a2:	402a      	ands	r2, r5
 80019a4:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80019a6:	6825      	ldr	r5, [r4, #0]
		dev->pm_top += max_size;
 80019a8:	fa1f fc8c 	uxth.w	ip, ip
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80019ac:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 80019b0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80019b4:	b2ad      	uxth	r5, r5
 80019b6:	f085 0520 	eor.w	r5, r5, #32
 80019ba:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80019be:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	}

	if (!dir) {
 80019c2:	2900      	cmp	r1, #0
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80019c4:	6025      	str	r5, [r4, #0]
		dev->pm_top += max_size;
 80019c6:	f8a0 c018 	strh.w	ip, [r0, #24]
	if (!dir) {
 80019ca:	da01      	bge.n	80019d0 <st_usbfs_ep_setup+0xb4>
		}
		USB_CLR_EP_RX_DTOG(addr);
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
		dev->pm_top += realsize;
	}
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d0:	461a      	mov	r2, r3
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <st_usbfs_ep_setup+0x110>)
 80019d4:	4605      	mov	r5, r0
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80019dc:	b289      	uxth	r1, r1
 80019de:	448e      	add	lr, r1
 80019e0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80019e4:	4473      	add	r3, lr
 80019e6:	f8c3 c000 	str.w	ip, [r3]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 80019ea:	4631      	mov	r1, r6
 80019ec:	f7ff ff74 	bl	80018d8 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 80019f0:	b127      	cbz	r7, 80019fc <st_usbfs_ep_setup+0xe0>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 80019f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80019f6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80019fa:	66f7      	str	r7, [r6, #108]	; 0x6c
		USB_CLR_EP_RX_DTOG(addr);
 80019fc:	f64c 718f 	movw	r1, #53135	; 0xcf8f
 8001a00:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 8001a02:	8b2a      	ldrh	r2, [r5, #24]
		USB_CLR_EP_RX_DTOG(addr);
 8001a04:	400b      	ands	r3, r1
 8001a06:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001a08:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 8001a0a:	4410      	add	r0, r2
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a22:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8001a24:	8328      	strh	r0, [r5, #24]
}
 8001a26:	b003      	add	sp, #12
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40005c50 	.word	0x40005c50
 8001a30:	04000200 	.word	0x04000200

08001a34 <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001a34:	f248 0180 	movw	r1, #32896	; 0x8080
{
 8001a38:	b470      	push	{r4, r5, r6}
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001a3c:	4e0c      	ldr	r6, [pc, #48]	; (8001a70 <st_usbfs_endpoints_reset+0x3c>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001a3e:	4d0d      	ldr	r5, [pc, #52]	; (8001a74 <st_usbfs_endpoints_reset+0x40>)
	for (i = 1; i < 8; i++) {
 8001a40:	4c0d      	ldr	r4, [pc, #52]	; (8001a78 <st_usbfs_endpoints_reset+0x44>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	4033      	ands	r3, r6
 8001a46:	430b      	orrs	r3, r1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	402b      	ands	r3, r5
 8001a50:	430b      	orrs	r3, r1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 1; i < 8; i++) {
 8001a58:	42a2      	cmp	r2, r4
 8001a5a:	d1f2      	bne.n	8001a42 <st_usbfs_endpoints_reset+0xe>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
}
 8001a5c:	bc70      	pop	{r4, r5, r6}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8001a5e:	6803      	ldr	r3, [r0, #0]
 8001a60:	79db      	ldrb	r3, [r3, #7]
 8001a62:	3320      	adds	r3, #32
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	8303      	strh	r3, [r0, #24]
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40005c04 	.word	0x40005c04
 8001a70:	ffff8fbf 	.word	0xffff8fbf
 8001a74:	ffffbf8f 	.word	0xffffbf8f
 8001a78:	40005c20 	.word	0x40005c20

08001a7c <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8001a7c:	b410      	push	{r4}
	(void)dev;
	if (addr == 0) {
 8001a7e:	bb49      	cbnz	r1, 8001ad4 <st_usbfs_ep_stall_set+0x58>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2420      	moveq	r4, #32
 8001a86:	2410      	movne	r4, #16
 8001a88:	482b      	ldr	r0, [pc, #172]	; (8001b38 <st_usbfs_ep_stall_set+0xbc>)
 8001a8a:	6803      	ldr	r3, [r0, #0]
 8001a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a94:	4063      	eors	r3, r4
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	6003      	str	r3, [r0, #0]
 8001aa4:	0089      	lsls	r1, r1, #2
 8001aa6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001aaa:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 8001aae:	b322      	cbz	r2, 8001afa <st_usbfs_ep_stall_set+0x7e>
			USB_CLR_EP_RX_DTOG(addr);
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	680a      	ldr	r2, [r1, #0]
 8001ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	4053      	eors	r3, r2
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 8001ad0:	bc10      	pop	{r4}
 8001ad2:	4770      	bx	lr
	if (addr & 0x80) {
 8001ad4:	060b      	lsls	r3, r1, #24
 8001ad6:	d5e5      	bpl.n	8001aa4 <st_usbfs_ep_stall_set+0x28>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001ad8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001adc:	0089      	lsls	r1, r1, #2
 8001ade:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001ae2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001ae6:	680b      	ldr	r3, [r1, #0]
 8001ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b182      	cbz	r2, 8001b16 <st_usbfs_ep_stall_set+0x9a>
 8001af4:	f083 0310 	eor.w	r3, r3, #16
 8001af8:	e7e3      	b.n	8001ac2 <st_usbfs_ep_stall_set+0x46>
			USB_CLR_EP_RX_DTOG(addr);
 8001afa:	f64c 708f 	movw	r0, #53135	; 0xcf8f
 8001afe:	680a      	ldr	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001b00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
			USB_CLR_EP_RX_DTOG(addr);
 8001b04:	4002      	ands	r2, r0
 8001b06:	600a      	str	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001b08:	680a      	ldr	r2, [r1, #0]
 8001b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b12:	b292      	uxth	r2, r2
 8001b14:	e7d4      	b.n	8001ac0 <st_usbfs_ep_stall_set+0x44>
			USB_CLR_EP_TX_DTOG(addr);
 8001b16:	f648 72cf 	movw	r2, #36815	; 0x8fcf
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001b1a:	f083 0320 	eor.w	r3, r3, #32
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	600b      	str	r3, [r1, #0]
			USB_CLR_EP_TX_DTOG(addr);
 8001b2c:	680b      	ldr	r3, [r1, #0]
}
 8001b2e:	bc10      	pop	{r4}
			USB_CLR_EP_TX_DTOG(addr);
 8001b30:	4013      	ands	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40005c00 	.word	0x40005c00

08001b3c <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 8001b3c:	060b      	lsls	r3, r1, #24
 8001b3e:	d40d      	bmi.n	8001b5c <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8001b40:	0089      	lsls	r1, r1, #2
 8001b42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001b46:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001b4a:	6808      	ldr	r0, [r1, #0]
 8001b4c:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
			return 1;
 8001b50:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8001b54:	fab0 f080 	clz	r0, r0
 8001b58:	0940      	lsrs	r0, r0, #5
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 8001b5a:	4770      	bx	lr
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 8001b5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001b60:	0089      	lsls	r1, r1, #2
 8001b62:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001b66:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001b6a:	6808      	ldr	r0, [r1, #0]
 8001b6c:	f000 0030 	and.w	r0, r0, #48	; 0x30
			return 1;
 8001b70:	f1a0 0010 	sub.w	r0, r0, #16
 8001b74:	fab0 f080 	clz	r0, r0
 8001b78:	0940      	lsrs	r0, r0, #5
 8001b7a:	4770      	bx	lr

08001b7c <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001b7c:	060b      	lsls	r3, r1, #24
 8001b7e:	d414      	bmi.n	8001baa <st_usbfs_ep_nak_set+0x2e>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <st_usbfs_ep_nak_set+0x40>)
 8001b82:	0088      	lsls	r0, r1, #2
 8001b84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b88:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001b8c:	545a      	strb	r2, [r3, r1]

	if (nak) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001b8e:	6803      	ldr	r3, [r0, #0]
 8001b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b98:	b29b      	uxth	r3, r3
	if (nak) {
 8001b9a:	b93a      	cbnz	r2, 8001bac <st_usbfs_ep_nak_set+0x30>
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001b9c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	6003      	str	r3, [r0, #0]
	}
}
 8001baa:	4770      	bx	lr
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6003      	str	r3, [r0, #0]
 8001bba:	4770      	bx	lr
 8001bbc:	20000b7c 	.word	0x20000b7c

08001bc0 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)dev;
	addr &= 0x7F;
 8001bc4:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001bc8:	00b4      	lsls	r4, r6, #2
 8001bca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001bce:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001bd2:	6825      	ldr	r5, [r4, #0]
 8001bd4:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8001bd8:	2d30      	cmp	r5, #48	; 0x30
 8001bda:	d02e      	beq.n	8001c3a <st_usbfs_ep_write_packet+0x7a>
 8001bdc:	461f      	mov	r7, r3
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8001bde:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001c44 <st_usbfs_ep_write_packet+0x84>
 8001be2:	4611      	mov	r1, r2
 8001be4:	f8d8 2000 	ldr.w	r2, [r8]
 8001be8:	00f6      	lsls	r6, r6, #3
 8001bea:	b292      	uxth	r2, r2
 8001bec:	4432      	add	r2, r6
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001bf4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8001bf8:	8810      	ldrh	r0, [r2, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	0040      	lsls	r0, r0, #1
 8001bfe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c02:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001c06:	f7ff f945 	bl	8000e94 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 8001c0a:	f8d8 1000 	ldr.w	r1, [r8]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <st_usbfs_ep_write_packet+0x80>)
 8001c10:	b289      	uxth	r1, r1
 8001c12:	440e      	add	r6, r1
 8001c14:	0076      	lsls	r6, r6, #1
 8001c16:	4433      	add	r3, r6
 8001c18:	601f      	str	r7, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001c1a:	6821      	ldr	r1, [r4, #0]

	return len;
 8001c1c:	4638      	mov	r0, r7
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001c1e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001c22:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001c26:	b289      	uxth	r1, r1
 8001c28:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8001c2c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001c30:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001c34:	6021      	str	r1, [r4, #0]
}
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8001c3a:	2000      	movs	r0, #0
}
 8001c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c40:	40006004 	.word	0x40006004
 8001c44:	40005c50 	.word	0x40005c50

08001c48 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8001c4a:	008c      	lsls	r4, r1, #2
 8001c4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001c50:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001c54:	6826      	ldr	r6, [r4, #0]
 8001c56:	f406 5640 	and.w	r6, r6, #12288	; 0x3000
 8001c5a:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 8001c5e:	d043      	beq.n	8001ce8 <st_usbfs_ep_read_packet+0xa0>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001c60:	4f23      	ldr	r7, [pc, #140]	; (8001cf0 <st_usbfs_ep_read_packet+0xa8>)
 8001c62:	00ce      	lsls	r6, r1, #3
 8001c64:	683d      	ldr	r5, [r7, #0]
 8001c66:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <st_usbfs_ep_read_packet+0xac>)
 8001c68:	b2ad      	uxth	r5, r5
 8001c6a:	4435      	add	r5, r6
 8001c6c:	006d      	lsls	r5, r5, #1
 8001c6e:	4428      	add	r0, r5
 8001c70:	6800      	ldr	r0, [r0, #0]
 8001c72:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001c76:	4298      	cmp	r0, r3
 8001c78:	db2c      	blt.n	8001cd4 <st_usbfs_ep_read_packet+0x8c>
 8001c7a:	461d      	mov	r5, r3
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <st_usbfs_ep_read_packet+0xa8>)
 8001c7e:	4610      	mov	r0, r2
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001c86:	b292      	uxth	r2, r2
 8001c88:	4416      	add	r6, r2
 8001c8a:	0076      	lsls	r6, r6, #1
 8001c8c:	4433      	add	r3, r6
 8001c8e:	460f      	mov	r7, r1
 8001c90:	8819      	ldrh	r1, [r3, #0]
 8001c92:	462a      	mov	r2, r5
 8001c94:	0049      	lsls	r1, r1, #1
 8001c96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001c9a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001c9e:	f7ff f90b 	bl	8000eb8 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8001ca2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ca6:	6821      	ldr	r1, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <st_usbfs_ep_read_packet+0xb0>)
	USB_CLR_EP_RX_CTR(addr);
 8001caa:	400b      	ands	r3, r1
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	6023      	str	r3, [r4, #0]
	if (!st_usbfs_force_nak[addr]) {
 8001cb2:	5dd3      	ldrb	r3, [r2, r7]
 8001cb4:	b963      	cbnz	r3, 8001cd0 <st_usbfs_ep_read_packet+0x88>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cce:	6023      	str	r3, [r4, #0]
	}

	return len;
}
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <st_usbfs_ep_read_packet+0xac>)
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4433      	add	r3, r6
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4418      	add	r0, r3
 8001ce0:	6805      	ldr	r5, [r0, #0]
 8001ce2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001ce6:	e7c9      	b.n	8001c7c <st_usbfs_ep_read_packet+0x34>
		return 0;
 8001ce8:	2500      	movs	r5, #0
}
 8001cea:	4628      	mov	r0, r5
 8001cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005c50 	.word	0x40005c50
 8001cf4:	4000600c 	.word	0x4000600c
 8001cf8:	20000b7c 	.word	0x20000b7c

08001cfc <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 8001cfc:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <st_usbfs_poll+0xdc>)
{
 8001cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8001d00:	6813      	ldr	r3, [r2, #0]
{
 8001d02:	4604      	mov	r4, r0

	if (istr & USB_ISTR_RESET) {
 8001d04:	0559      	lsls	r1, r3, #21
 8001d06:	d449      	bmi.n	8001d9c <st_usbfs_poll+0xa0>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	b29d      	uxth	r5, r3
 8001d0c:	d422      	bmi.n	8001d54 <st_usbfs_poll+0x58>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 8001d0e:	0528      	lsls	r0, r5, #20
 8001d10:	d506      	bpl.n	8001d20 <st_usbfs_poll+0x24>
		USB_CLR_ISTR_SUSP();
 8001d12:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001d16:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <st_usbfs_poll+0xdc>)
		if (dev->user_callback_suspend) {
 8001d18:	6a23      	ldr	r3, [r4, #32]
		USB_CLR_ISTR_SUSP();
 8001d1a:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_suspend) {
 8001d1c:	b103      	cbz	r3, 8001d20 <st_usbfs_poll+0x24>
			dev->user_callback_suspend();
 8001d1e:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 8001d20:	04e9      	lsls	r1, r5, #19
 8001d22:	d506      	bpl.n	8001d32 <st_usbfs_poll+0x36>
		USB_CLR_ISTR_WKUP();
 8001d24:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <st_usbfs_poll+0xdc>)
		if (dev->user_callback_resume) {
 8001d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		USB_CLR_ISTR_WKUP();
 8001d2c:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_resume) {
 8001d2e:	b103      	cbz	r3, 8001d32 <st_usbfs_poll+0x36>
			dev->user_callback_resume();
 8001d30:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 8001d32:	05aa      	lsls	r2, r5, #22
 8001d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d36:	d506      	bpl.n	8001d46 <st_usbfs_poll+0x4a>
		USB_CLR_ISTR_SOF();
 8001d38:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <st_usbfs_poll+0xdc>)
 8001d3e:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_sof) {
 8001d40:	b333      	cbz	r3, 8001d90 <st_usbfs_poll+0x94>
			dev->user_callback_sof();
 8001d42:	4798      	blx	r3
 8001d44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}

	if (dev->user_callback_sof) {
 8001d46:	b31b      	cbz	r3, 8001d90 <st_usbfs_poll+0x94>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <st_usbfs_poll+0xe0>)
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d50:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001d54:	f003 070f 	and.w	r7, r3, #15
 8001d58:	00be      	lsls	r6, r7, #2
 8001d5a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
		if (istr & USB_ISTR_DIR) {
 8001d5e:	f013 0310 	ands.w	r3, r3, #16
 8001d62:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8001d66:	d122      	bne.n	8001dae <st_usbfs_poll+0xb2>
			USB_CLR_EP_TX_CTR(ep);
 8001d68:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001d6c:	6831      	ldr	r1, [r6, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d74:	6032      	str	r2, [r6, #0]
		if (dev->user_callback_ctr[ep][type]) {
 8001d76:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	331a      	adds	r3, #26
 8001d7e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001d82:	b30b      	cbz	r3, 8001dc8 <st_usbfs_poll+0xcc>
			dev->user_callback_ctr[ep][type] (dev, ep);
 8001d84:	4620      	mov	r0, r4
 8001d86:	4639      	mov	r1, r7
 8001d88:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 8001d8a:	0528      	lsls	r0, r5, #20
 8001d8c:	d5c8      	bpl.n	8001d20 <st_usbfs_poll+0x24>
 8001d8e:	e7c0      	b.n	8001d12 <st_usbfs_poll+0x16>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <st_usbfs_poll+0xe0>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d98:	6013      	str	r3, [r2, #0]
}
 8001d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dev->pm_top = USBD_PM_TOP;
 8001d9c:	2340      	movs	r3, #64	; 0x40
		USB_CLR_ISTR_RESET();
 8001d9e:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8001da2:	6011      	str	r1, [r2, #0]
		dev->pm_top = USBD_PM_TOP;
 8001da4:	8303      	strh	r3, [r0, #24]
}
 8001da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_usbd_reset(dev);
 8001daa:	f7ff b8c9 	b.w	8000f40 <_usbd_reset>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001dae:	6833      	ldr	r3, [r6, #0]
 8001db0:	051b      	lsls	r3, r3, #20
 8001db2:	d401      	bmi.n	8001db8 <st_usbfs_poll+0xbc>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e7de      	b.n	8001d76 <st_usbfs_poll+0x7a>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 8001db8:	2308      	movs	r3, #8
 8001dba:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8001dbe:	4639      	mov	r1, r7
 8001dc0:	f7ff ff42 	bl	8001c48 <st_usbfs_ep_read_packet>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e7d6      	b.n	8001d76 <st_usbfs_poll+0x7a>
			USB_CLR_EP_RX_CTR(ep);
 8001dc8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001dcc:	6832      	ldr	r2, [r6, #0]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	6033      	str	r3, [r6, #0]
 8001dd6:	e79a      	b.n	8001d0e <st_usbfs_poll+0x12>
 8001dd8:	40005c44 	.word	0x40005c44
 8001ddc:	40005c40 	.word	0x40005c40

08001de0 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001de0:	2201      	movs	r2, #1
 8001de2:	0943      	lsrs	r3, r0, #5
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001dea:	f000 001f 	and.w	r0, r0, #31
 8001dee:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001df2:	fa02 f000 	lsl.w	r0, r2, r0
 8001df6:	6018      	str	r0, [r3, #0]
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8001dfc:	2901      	cmp	r1, #1
 8001dfe:	d016      	beq.n	8001e2e <exti_set_trigger+0x32>
 8001e00:	d30b      	bcc.n	8001e1a <exti_set_trigger+0x1e>
 8001e02:	2902      	cmp	r1, #2
 8001e04:	d108      	bne.n	8001e18 <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 8001e06:	490f      	ldr	r1, [pc, #60]	; (8001e44 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 8001e0a:	680b      	ldr	r3, [r1, #0]
 8001e0c:	4303      	orrs	r3, r0
 8001e0e:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8001e10:	6813      	ldr	r3, [r2, #0]
 8001e12:	4318      	orrs	r0, r3
 8001e14:	6010      	str	r0, [r2, #0]
		break;
	}
}
 8001e16:	4770      	bx	lr
 8001e18:	4770      	bx	lr
		EXTI_RTSR |= extis;
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <exti_set_trigger+0x48>)
		EXTI_FTSR &= ~extis;
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 8001e1e:	680b      	ldr	r3, [r1, #0]
 8001e20:	4303      	orrs	r3, r0
 8001e22:	600b      	str	r3, [r1, #0]
		EXTI_FTSR &= ~extis;
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	ea23 0000 	bic.w	r0, r3, r0
 8001e2a:	6010      	str	r0, [r2, #0]
		break;
 8001e2c:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8001e2e:	4905      	ldr	r1, [pc, #20]	; (8001e44 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <exti_set_trigger+0x4c>)
		EXTI_RTSR &= ~extis;
 8001e32:	680b      	ldr	r3, [r1, #0]
 8001e34:	ea23 0300 	bic.w	r3, r3, r0
 8001e38:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	4318      	orrs	r0, r3
 8001e3e:	6010      	str	r0, [r2, #0]
		break;
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010408 	.word	0x40010408
 8001e48:	4001040c 	.word	0x4001040c

08001e4c <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <exti_enable_request+0x14>)

	/* Enable events. */
	EXTI_EMR |= extis;
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <exti_enable_request+0x18>)
	EXTI_IMR |= extis;
 8001e50:	680b      	ldr	r3, [r1, #0]
 8001e52:	4303      	orrs	r3, r0
 8001e54:	600b      	str	r3, [r1, #0]
	EXTI_EMR |= extis;
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	4318      	orrs	r0, r3
 8001e5a:	6010      	str	r0, [r2, #0]
}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400
 8001e64:	40010404 	.word	0x40010404

08001e68 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8001e68:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <exti_reset_request+0x8>)
 8001e6a:	6018      	str	r0, [r3, #0]
}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010414 	.word	0x40010414

08001e74 <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <rtc_enter_config_mode+0x14>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	069b      	lsls	r3, r3, #26
 8001e7a:	d5fc      	bpl.n	8001e76 <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40002804 	.word	0x40002804

08001e8c <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <rtc_exit_config_mode+0x14>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001e8e:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	f021 0110 	bic.w	r1, r1, #16
 8001e96:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	069b      	lsls	r3, r3, #26
 8001e9c:	d5fc      	bpl.n	8001e98 <rtc_exit_config_mode+0xc>
}
 8001e9e:	4770      	bx	lr
 8001ea0:	40002804 	.word	0x40002804

08001ea4 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8001ea4:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <rtc_set_alarm_time+0x34>)
 8001ea8:	6813      	ldr	r3, [r2, #0]
 8001eaa:	0699      	lsls	r1, r3, #26
 8001eac:	d5fc      	bpl.n	8001ea8 <rtc_set_alarm_time+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001eae:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001eb0:	490a      	ldr	r1, [pc, #40]	; (8001edc <rtc_set_alarm_time+0x38>)
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001eb2:	4c0b      	ldr	r4, [pc, #44]	; (8001ee0 <rtc_set_alarm_time+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001eb8:	b285      	uxth	r5, r0
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001eba:	0c00      	lsrs	r0, r0, #16
	RTC_CRL |= RTC_CRL_CNF;
 8001ebc:	6013      	str	r3, [r2, #0]
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001ebe:	6025      	str	r5, [r4, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001ec0:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001ec2:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ec4:	391c      	subs	r1, #28
	RTC_CRL &= ~RTC_CRL_CNF;
 8001ec6:	f023 0310 	bic.w	r3, r3, #16
 8001eca:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ecc:	680b      	ldr	r3, [r1, #0]
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	d5fc      	bpl.n	8001ecc <rtc_set_alarm_time+0x28>
	rtc_exit_config_mode();
}
 8001ed2:	bc30      	pop	{r4, r5}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40002804 	.word	0x40002804
 8001edc:	40002820 	.word	0x40002820
 8001ee0:	40002824 	.word	0x40002824

08001ee4 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8001ee4:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <rtc_set_prescale_val+0x34>)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	0699      	lsls	r1, r3, #26
 8001eec:	d5fc      	bpl.n	8001ee8 <rtc_set_prescale_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001eee:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001ef0:	490a      	ldr	r1, [pc, #40]	; (8001f1c <rtc_set_prescale_val+0x38>)
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001ef2:	4c0b      	ldr	r4, [pc, #44]	; (8001f20 <rtc_set_prescale_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001ef8:	b285      	uxth	r5, r0
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001efa:	f3c0 4003 	ubfx	r0, r0, #16, #4
	RTC_CRL |= RTC_CRL_CNF;
 8001efe:	6013      	str	r3, [r2, #0]
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001f00:	6025      	str	r5, [r4, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001f02:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f04:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f06:	3904      	subs	r1, #4
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f08:	f023 0310 	bic.w	r3, r3, #16
 8001f0c:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f0e:	680b      	ldr	r3, [r1, #0]
 8001f10:	069b      	lsls	r3, r3, #26
 8001f12:	d5fc      	bpl.n	8001f0e <rtc_set_prescale_val+0x2a>
	rtc_exit_config_mode();
}
 8001f14:	bc30      	pop	{r4, r5}
 8001f16:	4770      	bx	lr
 8001f18:	40002804 	.word	0x40002804
 8001f1c:	40002808 	.word	0x40002808
 8001f20:	4000280c 	.word	0x4000280c

08001f24 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <rtc_get_counter_val+0x10>)
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <rtc_get_counter_val+0x14>)
 8001f28:	6810      	ldr	r0, [r2, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40002818 	.word	0x40002818
 8001f38:	4000281c 	.word	0x4000281c

08001f3c <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8001f3c:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <rtc_set_counter_val+0x34>)
 8001f40:	6813      	ldr	r3, [r2, #0]
 8001f42:	0699      	lsls	r1, r3, #26
 8001f44:	d5fc      	bpl.n	8001f40 <rtc_set_counter_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8001f46:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001f48:	490a      	ldr	r1, [pc, #40]	; (8001f74 <rtc_set_counter_val+0x38>)
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001f4a:	4c0b      	ldr	r4, [pc, #44]	; (8001f78 <rtc_set_counter_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001f50:	0c05      	lsrs	r5, r0, #16
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001f52:	b280      	uxth	r0, r0
	RTC_CRL |= RTC_CRL_CNF;
 8001f54:	6013      	str	r3, [r2, #0]
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001f56:	6025      	str	r5, [r4, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001f58:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f5a:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f5c:	3918      	subs	r1, #24
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f5e:	f023 0310 	bic.w	r3, r3, #16
 8001f62:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	069b      	lsls	r3, r3, #26
 8001f68:	d5fc      	bpl.n	8001f64 <rtc_set_counter_val+0x28>
	rtc_exit_config_mode();
}
 8001f6a:	bc30      	pop	{r4, r5}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40002804 	.word	0x40002804
 8001f74:	4000281c 	.word	0x4000281c
 8001f78:	40002818 	.word	0x40002818

08001f7c <rtc_interrupt_enable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <rtc_interrupt_enable+0x54>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	0699      	lsls	r1, r3, #26
 8001f82:	d5fc      	bpl.n	8001f7e <rtc_interrupt_enable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 8001f84:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_enable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001f86:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 8001f8e:	d018      	beq.n	8001fc2 <rtc_interrupt_enable+0x46>
 8001f90:	d311      	bcc.n	8001fb6 <rtc_interrupt_enable+0x3a>
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d009      	beq.n	8001faa <rtc_interrupt_enable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <rtc_interrupt_enable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001f98:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001f9a:	6819      	ldr	r1, [r3, #0]
 8001f9c:	f021 0110 	bic.w	r1, r1, #16
 8001fa0:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	069b      	lsls	r3, r3, #26
 8001fa6:	d5fc      	bpl.n	8001fa2 <rtc_interrupt_enable+0x26>
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8001fa8:	4770      	bx	lr
		RTC_CRH |= RTC_CRH_OWIE;
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <rtc_interrupt_enable+0x58>)
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6013      	str	r3, [r2, #0]
		break;
 8001fb4:	e7ef      	b.n	8001f96 <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_SECIE;
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <rtc_interrupt_enable+0x58>)
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
		break;
 8001fc0:	e7e9      	b.n	8001f96 <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_ALRIE;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <rtc_interrupt_enable+0x58>)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	6013      	str	r3, [r2, #0]
		break;
 8001fcc:	e7e3      	b.n	8001f96 <rtc_interrupt_enable+0x1a>
 8001fce:	bf00      	nop
 8001fd0:	40002804 	.word	0x40002804
 8001fd4:	40002800 	.word	0x40002800

08001fd8 <rtc_interrupt_disable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <rtc_interrupt_disable+0x54>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	0699      	lsls	r1, r3, #26
 8001fde:	d5fc      	bpl.n	8001fda <rtc_interrupt_disable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 8001fe0:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_disable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8001fe2:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 8001fea:	d018      	beq.n	800201e <rtc_interrupt_disable+0x46>
 8001fec:	d311      	bcc.n	8002012 <rtc_interrupt_disable+0x3a>
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d009      	beq.n	8002006 <rtc_interrupt_disable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <rtc_interrupt_disable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ff4:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	f021 0110 	bic.w	r1, r1, #16
 8001ffc:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	069b      	lsls	r3, r3, #26
 8002002:	d5fc      	bpl.n	8001ffe <rtc_interrupt_disable+0x26>
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8002004:	4770      	bx	lr
		RTC_CRH &= ~RTC_CRH_OWIE;
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <rtc_interrupt_disable+0x58>)
 8002008:	6813      	ldr	r3, [r2, #0]
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6013      	str	r3, [r2, #0]
		break;
 8002010:	e7ef      	b.n	8001ff2 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_SECIE;
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <rtc_interrupt_disable+0x58>)
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]
		break;
 800201c:	e7e9      	b.n	8001ff2 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <rtc_interrupt_disable+0x58>)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f023 0302 	bic.w	r3, r3, #2
 8002026:	6013      	str	r3, [r2, #0]
		break;
 8002028:	e7e3      	b.n	8001ff2 <rtc_interrupt_disable+0x1a>
 800202a:	bf00      	nop
 800202c:	40002804 	.word	0x40002804
 8002030:	40002800 	.word	0x40002800

08002034 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8002034:	2801      	cmp	r0, #1
 8002036:	d00f      	beq.n	8002058 <rtc_clear_flag+0x24>
 8002038:	d308      	bcc.n	800204c <rtc_clear_flag+0x18>
 800203a:	2802      	cmp	r0, #2
 800203c:	d105      	bne.n	800204a <rtc_clear_flag+0x16>
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
		break;
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <rtc_clear_flag+0x30>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8002048:	4770      	bx	lr
 800204a:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_SECF;
 800204c:	4a05      	ldr	r2, [pc, #20]	; (8002064 <rtc_clear_flag+0x30>)
 800204e:	6813      	ldr	r3, [r2, #0]
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6013      	str	r3, [r2, #0]
		break;
 8002056:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_ALRF;
 8002058:	4a02      	ldr	r2, [pc, #8]	; (8002064 <rtc_clear_flag+0x30>)
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	6013      	str	r3, [r2, #0]
		break;
 8002062:	4770      	bx	lr
 8002064:	40002804 	.word	0x40002804

08002068 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 8002068:	2801      	cmp	r0, #1
 800206a:	d00e      	beq.n	800208a <rtc_check_flag+0x22>
 800206c:	d308      	bcc.n	8002080 <rtc_check_flag+0x18>
 800206e:	2802      	cmp	r0, #2
 8002070:	d104      	bne.n	800207c <rtc_check_flag+0x14>
		break;
	case RTC_ALR:
		reg32 = RTC_CRL & RTC_CRL_ALRF;
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <rtc_check_flag+0x2c>)
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	f000 0004 	and.w	r0, r0, #4
		break;
 800207a:	4770      	bx	lr
	default:
		reg32 = 0;
 800207c:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 800207e:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <rtc_check_flag+0x2c>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	f000 0001 	and.w	r0, r0, #1
		break;
 8002088:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 800208a:	4b02      	ldr	r3, [pc, #8]	; (8002094 <rtc_check_flag+0x2c>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f000 0002 	and.w	r0, r0, #2
		break;
 8002092:	4770      	bx	lr
 8002094:	40002804 	.word	0x40002804

08002098 <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <os_init>:
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 800209c:	23ff      	movs	r3, #255	; 0xff
    last_running_task = NO_TID;
    running = 0;
 800209e:	2100      	movs	r1, #0
void os_init( void ) {
 80020a0:	b510      	push	{r4, lr}
    last_running_task = NO_TID;
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <os_init+0x28>)
    running = 0;
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <os_init+0x2c>)
	running_tid = NO_TID;
 80020a6:	4c09      	ldr	r4, [pc, #36]	; (80020cc <os_init+0x30>)
    last_running_task = NO_TID;
 80020a8:	7003      	strb	r3, [r0, #0]
	running_tid = NO_TID;
 80020aa:	7023      	strb	r3, [r4, #0]
    running = 0;
 80020ac:	7011      	strb	r1, [r2, #0]
    os_sem_init();
 80020ae:	f000 f85b 	bl	8002168 <os_sem_init>
    os_event_init();
 80020b2:	f000 f955 	bl	8002360 <os_event_init>
    os_msgQ_init();
 80020b6:	f000 f815 	bl	80020e4 <os_msgQ_init>
    os_task_init();
}
 80020ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_task_init();
 80020be:	f000 b859 	b.w	8002174 <os_task_init>
 80020c2:	bf00      	nop
 80020c4:	20000c82 	.word	0x20000c82
 80020c8:	20000c81 	.word	0x20000c81
 80020cc:	20000c80 	.word	0x20000c80

080020d0 <os_tick>:
*       
*/
/*********************************************************************************/
void os_tick( void ) {
    /* Master clock tick */
    os_task_tick( 0, 1 );
 80020d0:	2101      	movs	r1, #1
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 b890 	b.w	80021f8 <os_task_tick>

080020d8 <os_running>:
    }
}


uint8_t os_running( void ) {
    return running;
 80020d8:	4b01      	ldr	r3, [pc, #4]	; (80020e0 <os_running+0x8>)
}
 80020da:	7818      	ldrb	r0, [r3, #0]
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000c81 	.word	0x20000c81

080020e4 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 80020e4:	2300      	movs	r3, #0
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
 80020e6:	4a06      	ldr	r2, [pc, #24]	; (8002100 <os_msgQ_init+0x1c>)
    nQueues = 0;
 80020e8:	4906      	ldr	r1, [pc, #24]	; (8002104 <os_msgQ_init+0x20>)
        msgQList[ i ].q.list = 0;
 80020ea:	e9c2 3300 	strd	r3, r3, [r2]
    nQueues = 0;
 80020ee:	700b      	strb	r3, [r1, #0]
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
 80020f0:	7213      	strb	r3, [r2, #8]
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 80020f2:	8193      	strh	r3, [r2, #12]
        msgQList[ i ].q.list = 0;
 80020f4:	e9c2 3304 	strd	r3, r3, [r2, #16]
        msgQList[ i ].q.tail = 0;
 80020f8:	7613      	strb	r3, [r2, #24]
        msgQList[ i ].taskId = 0;
 80020fa:	8393      	strh	r3, [r2, #28]
        msgQList[ i ].change = 0;
    }
#endif
}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000580 	.word	0x20000580
 8002104:	2000063c 	.word	0x2000063c

08002108 <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 800210a:	4d16      	ldr	r5, [pc, #88]	; (8002164 <os_msgQ_tick+0x5c>)
 800210c:	eb05 1500 	add.w	r5, r5, r0, lsl #4
 8002110:	79ec      	ldrb	r4, [r5, #7]
 8002112:	7a2a      	ldrb	r2, [r5, #8]
 8002114:	1c63      	adds	r3, r4, #1
 8002116:	fb93 f4f2 	sdiv	r4, r3, r2
 800211a:	fb02 3414 	mls	r4, r2, r4, r3

    uint8_t head = q->head;
 800211e:	79ae      	ldrb	r6, [r5, #6]
    nextMessage = (q->tail+1) % q->size;
 8002120:	b2e4      	uxtb	r4, r4
    uint16_t msgSz = q->messageSize;

    while ( nextMessage != head ) {
 8002122:	42b4      	cmp	r4, r6
    uint16_t msgSz = q->messageSize;
 8002124:	88af      	ldrh	r7, [r5, #4]
    while ( nextMessage != head ) {
 8002126:	d109      	bne.n	800213c <os_msgQ_tick+0x34>
 8002128:	e01a      	b.n	8002160 <os_msgQ_tick+0x58>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 800212a:	7a2a      	ldrb	r2, [r5, #8]
 800212c:	3401      	adds	r4, #1
 800212e:	fb94 f3f2 	sdiv	r3, r4, r2
 8002132:	fb02 4413 	mls	r4, r2, r3, r4
 8002136:	b2e4      	uxtb	r4, r4
    while ( nextMessage != head ) {
 8002138:	42a6      	cmp	r6, r4
 800213a:	d011      	beq.n	8002160 <os_msgQ_tick+0x58>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	fb07 3304 	mla	r3, r7, r4, r3
        if ( pMsg->delay > 0 ) {
 8002142:	685a      	ldr	r2, [r3, #4]
            --(pMsg->delay);
 8002144:	1e51      	subs	r1, r2, #1
        if ( pMsg->delay > 0 ) {
 8002146:	2a00      	cmp	r2, #0
 8002148:	d0ef      	beq.n	800212a <os_msgQ_tick+0x22>
            --(pMsg->delay);
 800214a:	6059      	str	r1, [r3, #4]
            if ( pMsg->delay == 0 ) {
 800214c:	2900      	cmp	r1, #0
 800214e:	d1ec      	bne.n	800212a <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 8002150:	7b68      	ldrb	r0, [r5, #13]
 8002152:	f000 f90b 	bl	800236c <os_signal_event>
 8002156:	21fe      	movs	r1, #254	; 0xfe
 8002158:	7b68      	ldrb	r0, [r5, #13]
 800215a:	f000 f90d 	bl	8002378 <os_event_set_signaling_tid>
 800215e:	e7e4      	b.n	800212a <os_msgQ_tick+0x22>

    }
#endif    
}
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002162:	bf00      	nop
 8002164:	20000580 	.word	0x20000580

08002168 <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8002168:	2200      	movs	r2, #0
 800216a:	4b01      	ldr	r3, [pc, #4]	; (8002170 <os_sem_init+0x8>)
 800216c:	701a      	strb	r2, [r3, #0]
#endif
}
 800216e:	4770      	bx	lr
 8002170:	2000063d 	.word	0x2000063d

08002174 <os_task_init>:
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8002174:	2100      	movs	r1, #0
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
 8002176:	20ff      	movs	r0, #255	; 0xff
void os_task_init( void ) {
 8002178:	b410      	push	{r4}
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <os_task_init+0x3c>)
    nTasks = 0;
 800217c:	4c0d      	ldr	r4, [pc, #52]	; (80021b4 <os_task_init+0x40>)
        task->internal_state = 0xff;
        task->msgQ = 0;
 800217e:	460a      	mov	r2, r1
    nTasks = 0;
 8002180:	7021      	strb	r1, [r4, #0]
 8002182:	f103 018c 	add.w	r1, r3, #140	; 0x8c
        task->clockId = 0xff;
 8002186:	7518      	strb	r0, [r3, #20]
        task->internal_state = 0xff;
 8002188:	80d8      	strh	r0, [r3, #6]
        task->msgQ = 0;
 800218a:	73da      	strb	r2, [r3, #15]
        task->waitQ = 0;
 800218c:	741a      	strb	r2, [r3, #16]
        task->msgChangeEvent = 0;
 800218e:	745a      	strb	r2, [r3, #17]
        task->msgResult = 0;
 8002190:	749a      	strb	r2, [r3, #18]
        task->prio = 0;
 8002192:	735a      	strb	r2, [r3, #13]
        task->savedState = SUSPENDED;
 8002194:	715a      	strb	r2, [r3, #5]
        task->semaphore = NO_SEM;
 8002196:	7398      	strb	r0, [r3, #14]
        task->state = SUSPENDED;
 8002198:	711a      	strb	r2, [r3, #4]
        task->taskproc = 0;
 800219a:	601a      	str	r2, [r3, #0]
        task->tid = NO_TID;
 800219c:	7318      	strb	r0, [r3, #12]
        task->time = 0;
 800219e:	609a      	str	r2, [r3, #8]
        task->waitSingleEvent = 0;
 80021a0:	74da      	strb	r2, [r3, #19]

        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
 80021a2:	7558      	strb	r0, [r3, #21]
        }
        task->data = 0;
 80021a4:	619a      	str	r2, [r3, #24]
 80021a6:	331c      	adds	r3, #28
    for ( i = 0; i < N_TASKS; ++i ) {
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d1ec      	bne.n	8002186 <os_task_init+0x12>
    }
}
 80021ac:	bc10      	pop	{r4}
 80021ae:	4770      	bx	lr
 80021b0:	200005a0 	.word	0x200005a0
 80021b4:	2000063e 	.word	0x2000063e

080021b8 <os_task_highest_prio_ready_task>:
void *task_get_data() {
  return task_list[ running_tid ].data;
}

/* Finds the task with highest prio that are ready to run - used for prio based scheduling */
uint8_t os_task_highest_prio_ready_task( void ) {
 80021b8:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t highest_prio_task = NO_TID;
    uint8_t highest_prio = 255;
    TaskState_t state;
    uint8_t prio;
    
    for ( index = 0; index != nTasks; ++index ) {
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <os_task_highest_prio_ready_task+0x38>)
 80021bc:	781e      	ldrb	r6, [r3, #0]
 80021be:	b1a6      	cbz	r6, 80021ea <os_task_highest_prio_ready_task+0x32>
    uint8_t highest_prio = 255;
 80021c0:	27ff      	movs	r7, #255	; 0xff
    for ( index = 0; index != nTasks; ++index ) {
 80021c2:	2200      	movs	r2, #0
    uint8_t highest_prio_task = NO_TID;
 80021c4:	4638      	mov	r0, r7
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <os_task_highest_prio_ready_task+0x3c>)
        task = &task_list[ index ];
        prio = task->prio;
        state = task->state;

        if ( READY == state ) {
 80021c8:	791c      	ldrb	r4, [r3, #4]
        prio = task->prio;
 80021ca:	7b5d      	ldrb	r5, [r3, #13]
        if ( READY == state ) {
 80021cc:	2c05      	cmp	r4, #5
    for ( index = 0; index != nTasks; ++index ) {
 80021ce:	f102 0101 	add.w	r1, r2, #1
 80021d2:	f103 031c 	add.w	r3, r3, #28
        if ( READY == state ) {
 80021d6:	d103      	bne.n	80021e0 <os_task_highest_prio_ready_task+0x28>
            if ( prio < highest_prio ) {
 80021d8:	42bd      	cmp	r5, r7
                highest_prio = prio;
                highest_prio_task = index;
 80021da:	bf3c      	itt	cc
 80021dc:	462f      	movcc	r7, r5
 80021de:	b2d0      	uxtbcc	r0, r2
    for ( index = 0; index != nTasks; ++index ) {
 80021e0:	b28a      	uxth	r2, r1
 80021e2:	42b2      	cmp	r2, r6
 80021e4:	d1f0      	bne.n	80021c8 <os_task_highest_prio_ready_task+0x10>
            }
        }
    }

    return highest_prio_task;
}
 80021e6:	bcf0      	pop	{r4, r5, r6, r7}
 80021e8:	4770      	bx	lr
    uint8_t highest_prio_task = NO_TID;
 80021ea:	20ff      	movs	r0, #255	; 0xff
}
 80021ec:	bcf0      	pop	{r4, r5, r6, r7}
 80021ee:	4770      	bx	lr
 80021f0:	2000063e 	.word	0x2000063e
 80021f4:	200005a0 	.word	0x200005a0

080021f8 <os_task_tick>:
		task_waiting_event_set( task );
	}	
}


void os_task_tick( uint8_t id, uint32_t tickSize ) {
 80021f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t index;
    
    /* Search all tasks and decrement time for waiting tasks */
    for ( index = 0; index != nTasks; ++index ) {
 80021fc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800228c <os_task_tick+0x94>
 8002200:	f899 3000 	ldrb.w	r3, [r9]
 8002204:	b313      	cbz	r3, 800224c <os_task_tick+0x54>
 8002206:	2400      	movs	r4, #0
 8002208:	460e      	mov	r6, r1
 800220a:	4682      	mov	sl, r0
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 800220c:	f04f 0805 	mov.w	r8, #5
            task_list[ index ].time = 0;
 8002210:	4627      	mov	r7, r4
 8002212:	4d1d      	ldr	r5, [pc, #116]	; (8002288 <os_task_tick+0x90>)
		state = task_list[ index ].state;
 8002214:	00e3      	lsls	r3, r4, #3
 8002216:	1b19      	subs	r1, r3, r4
 8002218:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800221c:	790a      	ldrb	r2, [r1, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 800221e:	2a02      	cmp	r2, #2
 8002220:	d01a      	beq.n	8002258 <os_task_tick+0x60>
 8002222:	2a04      	cmp	r2, #4
 8002224:	d018      	beq.n	8002258 <os_task_tick+0x60>
		else if ( state ==  WAITING_SEM ) {
 8002226:	2a01      	cmp	r2, #1
 8002228:	d012      	beq.n	8002250 <os_task_tick+0x58>
        if ( id == 0 ) {
 800222a:	f1ba 0f00 	cmp.w	sl, #0
 800222e:	d107      	bne.n	8002240 <os_task_tick+0x48>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 8002230:	1b1b      	subs	r3, r3, r4
 8002232:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002236:	7bd8      	ldrb	r0, [r3, #15]
 8002238:	28ff      	cmp	r0, #255	; 0xff
 800223a:	d001      	beq.n	8002240 <os_task_tick+0x48>
                os_msgQ_tick( task_list[ index ].msgQ );
 800223c:	f7ff ff64 	bl	8002108 <os_msgQ_tick>
    for ( index = 0; index != nTasks; ++index ) {
 8002240:	3401      	adds	r4, #1
 8002242:	f899 3000 	ldrb.w	r3, [r9]
 8002246:	b2e4      	uxtb	r4, r4
 8002248:	42a3      	cmp	r3, r4
 800224a:	d1e3      	bne.n	8002214 <os_task_tick+0x1c>
}
 800224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			task_list[ index ].time++;
 8002250:	688a      	ldr	r2, [r1, #8]
 8002252:	3201      	adds	r2, #1
 8002254:	608a      	str	r2, [r1, #8]
 8002256:	e7e8      	b.n	800222a <os_task_tick+0x32>
        if ( task_list[ index ].clockId == id ) {
 8002258:	1b19      	subs	r1, r3, r4
 800225a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800225e:	7d08      	ldrb	r0, [r1, #20]
 8002260:	4550      	cmp	r0, sl
 8002262:	d1e2      	bne.n	800222a <os_task_tick+0x32>
          if ( task_list[ index ].time <= tickSize ) {
 8002264:	6888      	ldr	r0, [r1, #8]
 8002266:	42b0      	cmp	r0, r6
 8002268:	d80b      	bhi.n	8002282 <os_task_tick+0x8a>
            if ( state == WAITING_EVENT_TIMEOUT ) {
 800226a:	2a04      	cmp	r2, #4
    task_list[ tid ].state = READY;
 800226c:	eba3 0204 	sub.w	r2, r3, r4
 8002270:	eb05 0282 	add.w	r2, r5, r2, lsl #2
            task_list[ index ].time = 0;
 8002274:	608f      	str	r7, [r1, #8]
    task->waitSingleEvent = 0;
 8002276:	bf04      	itt	eq
 8002278:	74cf      	strbeq	r7, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 800227a:	754f      	strbeq	r7, [r1, #21]
    task_list[ tid ].state = READY;
 800227c:	f882 8004 	strb.w	r8, [r2, #4]
 8002280:	e7d3      	b.n	800222a <os_task_tick+0x32>
            task_list[ index ].time -= tickSize;
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	6088      	str	r0, [r1, #8]
 8002286:	e7d0      	b.n	800222a <os_task_tick+0x32>
 8002288:	200005a0 	.word	0x200005a0
 800228c:	2000063e 	.word	0x2000063e

08002290 <os_task_signal_event>:
    for ( index = 0; index != nTasks; index++ ) {
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <os_task_signal_event+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b38b      	cbz	r3, 80022fa <os_task_signal_event+0x6a>
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8002296:	2201      	movs	r2, #1
void os_task_signal_event( Evt_t eventId ) {
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	08c4      	lsrs	r4, r0, #3
 800229c:	f000 0007 	and.w	r0, r0, #7
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80022a0:	fa02 f000 	lsl.w	r0, r2, r0
 80022a4:	1e5a      	subs	r2, r3, #1
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <os_task_signal_event+0x70>)
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	b240      	sxtb	r0, r0
 80022ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80022b0:	f103 011c 	add.w	r1, r3, #28
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022b4:	43c6      	mvns	r6, r0
    task->waitSingleEvent = 0;
 80022b6:	2500      	movs	r5, #0
    task_list[ tid ].state = READY;
 80022b8:	2705      	movs	r7, #5
 80022ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80022be:	e002      	b.n	80022c6 <os_task_signal_event+0x36>
 80022c0:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d018      	beq.n	80022f8 <os_task_signal_event+0x68>
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 80022c6:	791a      	ldrb	r2, [r3, #4]
 80022c8:	3a03      	subs	r2, #3
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	d8f8      	bhi.n	80022c0 <os_task_signal_event+0x30>
 80022ce:	eb03 0c04 	add.w	ip, r3, r4
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80022d2:	f99c 2015 	ldrsb.w	r2, [ip, #21]
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 80022d6:	4202      	tst	r2, r0
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022d8:	ea06 0e02 	and.w	lr, r6, r2
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 80022dc:	d0f0      	beq.n	80022c0 <os_task_signal_event+0x30>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80022de:	f88c e015 	strb.w	lr, [ip, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 80022e2:	7cda      	ldrb	r2, [r3, #19]
 80022e4:	b912      	cbnz	r2, 80022ec <os_task_signal_event+0x5c>
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 80022e6:	7d5a      	ldrb	r2, [r3, #21]
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d1e9      	bne.n	80022c0 <os_task_signal_event+0x30>
    task->waitSingleEvent = 0;
 80022ec:	74dd      	strb	r5, [r3, #19]
        task->eventQueue.eventList[ event ] = 0;
 80022ee:	755d      	strb	r5, [r3, #21]
    task_list[ tid ].state = READY;
 80022f0:	711f      	strb	r7, [r3, #4]
 80022f2:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 80022f4:	4299      	cmp	r1, r3
 80022f6:	d1e6      	bne.n	80022c6 <os_task_signal_event+0x36>
}
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fa:	4770      	bx	lr
 80022fc:	2000063e 	.word	0x2000063e
 8002300:	200005a0 	.word	0x200005a0

08002304 <os_task_run>:
void os_task_run( void ) {
 8002304:	b510      	push	{r4, lr}
    os_assert( running_tid < nTasks );
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <os_task_run+0x28>)
 8002308:	4c09      	ldr	r4, [pc, #36]	; (8002330 <os_task_run+0x2c>)
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	7823      	ldrb	r3, [r4, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d804      	bhi.n	800231c <os_task_run+0x18>
 8002312:	f44f 701c 	mov.w	r0, #624	; 0x270
 8002316:	f000 f80f 	bl	8002338 <os_on_assert>
 800231a:	7823      	ldrb	r3, [r4, #0]
    task_list[ running_tid ].taskproc();
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <os_task_run+0x30>)
 800231e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    task_list[ running_tid ].taskproc();
 800232a:	4718      	bx	r3
 800232c:	2000063e 	.word	0x2000063e
 8002330:	20000c80 	.word	0x20000c80
 8002334:	200005a0 	.word	0x200005a0

08002338 <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 8002338:	4604      	mov	r4, r0
 800233a:	b508      	push	{r3, lr}
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <os_on_assert+0x20>)
 800233e:	f001 fd7b 	bl	8003e38 <debug_print>
 8002342:	4620      	mov	r0, r4
 8002344:	f001 fd9a 	bl	8003e7c <debug_print_unsigned>
 8002348:	f001 fcfc 	bl	8003d44 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <os_on_assert+0x24>)
 800234e:	801c      	strh	r4, [r3, #0]
    l = l;
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	b292      	uxth	r2, r2
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	e7fe      	b.n	8002356 <os_on_assert+0x1e>
 8002358:	08005ba4 	.word	0x08005ba4
 800235c:	2000063a 	.word	0x2000063a

08002360 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8002360:	2200      	movs	r2, #0
 8002362:	4b01      	ldr	r3, [pc, #4]	; (8002368 <os_event_init+0x8>)
 8002364:	701a      	strb	r2, [r3, #0]
#endif
}
 8002366:	4770      	bx	lr
 8002368:	2000063f 	.word	0x2000063f

0800236c <os_signal_event>:
#endif
}


void os_signal_event( Evt_t ev ) {
	lastSignaledEvent = ev;
 800236c:	4b01      	ldr	r3, [pc, #4]	; (8002374 <os_signal_event+0x8>)
 800236e:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 8002370:	f7ff bf8e 	b.w	8002290 <os_task_signal_event>
 8002374:	20000014 	.word	0x20000014

08002378 <os_event_set_signaling_tid>:
}


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <os_event_set_signaling_tid+0xc>)
 800237a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800237e:	7041      	strb	r1, [r0, #1]
#endif
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000062c 	.word	0x2000062c

08002388 <__aeabi_drsub>:
 8002388:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800238c:	e002      	b.n	8002394 <__adddf3>
 800238e:	bf00      	nop

08002390 <__aeabi_dsub>:
 8002390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002394 <__adddf3>:
 8002394:	b530      	push	{r4, r5, lr}
 8002396:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800239a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800239e:	ea94 0f05 	teq	r4, r5
 80023a2:	bf08      	it	eq
 80023a4:	ea90 0f02 	teqeq	r0, r2
 80023a8:	bf1f      	itttt	ne
 80023aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80023ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80023b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80023b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80023ba:	f000 80e2 	beq.w	8002582 <__adddf3+0x1ee>
 80023be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80023c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80023c6:	bfb8      	it	lt
 80023c8:	426d      	neglt	r5, r5
 80023ca:	dd0c      	ble.n	80023e6 <__adddf3+0x52>
 80023cc:	442c      	add	r4, r5
 80023ce:	ea80 0202 	eor.w	r2, r0, r2
 80023d2:	ea81 0303 	eor.w	r3, r1, r3
 80023d6:	ea82 0000 	eor.w	r0, r2, r0
 80023da:	ea83 0101 	eor.w	r1, r3, r1
 80023de:	ea80 0202 	eor.w	r2, r0, r2
 80023e2:	ea81 0303 	eor.w	r3, r1, r3
 80023e6:	2d36      	cmp	r5, #54	; 0x36
 80023e8:	bf88      	it	hi
 80023ea:	bd30      	pophi	{r4, r5, pc}
 80023ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80023f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80023f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80023f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80023fc:	d002      	beq.n	8002404 <__adddf3+0x70>
 80023fe:	4240      	negs	r0, r0
 8002400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002404:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002408:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800240c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002410:	d002      	beq.n	8002418 <__adddf3+0x84>
 8002412:	4252      	negs	r2, r2
 8002414:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002418:	ea94 0f05 	teq	r4, r5
 800241c:	f000 80a7 	beq.w	800256e <__adddf3+0x1da>
 8002420:	f1a4 0401 	sub.w	r4, r4, #1
 8002424:	f1d5 0e20 	rsbs	lr, r5, #32
 8002428:	db0d      	blt.n	8002446 <__adddf3+0xb2>
 800242a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800242e:	fa22 f205 	lsr.w	r2, r2, r5
 8002432:	1880      	adds	r0, r0, r2
 8002434:	f141 0100 	adc.w	r1, r1, #0
 8002438:	fa03 f20e 	lsl.w	r2, r3, lr
 800243c:	1880      	adds	r0, r0, r2
 800243e:	fa43 f305 	asr.w	r3, r3, r5
 8002442:	4159      	adcs	r1, r3
 8002444:	e00e      	b.n	8002464 <__adddf3+0xd0>
 8002446:	f1a5 0520 	sub.w	r5, r5, #32
 800244a:	f10e 0e20 	add.w	lr, lr, #32
 800244e:	2a01      	cmp	r2, #1
 8002450:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002454:	bf28      	it	cs
 8002456:	f04c 0c02 	orrcs.w	ip, ip, #2
 800245a:	fa43 f305 	asr.w	r3, r3, r5
 800245e:	18c0      	adds	r0, r0, r3
 8002460:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002468:	d507      	bpl.n	800247a <__adddf3+0xe6>
 800246a:	f04f 0e00 	mov.w	lr, #0
 800246e:	f1dc 0c00 	rsbs	ip, ip, #0
 8002472:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002476:	eb6e 0101 	sbc.w	r1, lr, r1
 800247a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800247e:	d31b      	bcc.n	80024b8 <__adddf3+0x124>
 8002480:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002484:	d30c      	bcc.n	80024a0 <__adddf3+0x10c>
 8002486:	0849      	lsrs	r1, r1, #1
 8002488:	ea5f 0030 	movs.w	r0, r0, rrx
 800248c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002490:	f104 0401 	add.w	r4, r4, #1
 8002494:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002498:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800249c:	f080 809a 	bcs.w	80025d4 <__adddf3+0x240>
 80024a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80024a4:	bf08      	it	eq
 80024a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80024aa:	f150 0000 	adcs.w	r0, r0, #0
 80024ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80024b2:	ea41 0105 	orr.w	r1, r1, r5
 80024b6:	bd30      	pop	{r4, r5, pc}
 80024b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80024bc:	4140      	adcs	r0, r0
 80024be:	eb41 0101 	adc.w	r1, r1, r1
 80024c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80024c6:	f1a4 0401 	sub.w	r4, r4, #1
 80024ca:	d1e9      	bne.n	80024a0 <__adddf3+0x10c>
 80024cc:	f091 0f00 	teq	r1, #0
 80024d0:	bf04      	itt	eq
 80024d2:	4601      	moveq	r1, r0
 80024d4:	2000      	moveq	r0, #0
 80024d6:	fab1 f381 	clz	r3, r1
 80024da:	bf08      	it	eq
 80024dc:	3320      	addeq	r3, #32
 80024de:	f1a3 030b 	sub.w	r3, r3, #11
 80024e2:	f1b3 0220 	subs.w	r2, r3, #32
 80024e6:	da0c      	bge.n	8002502 <__adddf3+0x16e>
 80024e8:	320c      	adds	r2, #12
 80024ea:	dd08      	ble.n	80024fe <__adddf3+0x16a>
 80024ec:	f102 0c14 	add.w	ip, r2, #20
 80024f0:	f1c2 020c 	rsb	r2, r2, #12
 80024f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80024f8:	fa21 f102 	lsr.w	r1, r1, r2
 80024fc:	e00c      	b.n	8002518 <__adddf3+0x184>
 80024fe:	f102 0214 	add.w	r2, r2, #20
 8002502:	bfd8      	it	le
 8002504:	f1c2 0c20 	rsble	ip, r2, #32
 8002508:	fa01 f102 	lsl.w	r1, r1, r2
 800250c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002510:	bfdc      	itt	le
 8002512:	ea41 010c 	orrle.w	r1, r1, ip
 8002516:	4090      	lslle	r0, r2
 8002518:	1ae4      	subs	r4, r4, r3
 800251a:	bfa2      	ittt	ge
 800251c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002520:	4329      	orrge	r1, r5
 8002522:	bd30      	popge	{r4, r5, pc}
 8002524:	ea6f 0404 	mvn.w	r4, r4
 8002528:	3c1f      	subs	r4, #31
 800252a:	da1c      	bge.n	8002566 <__adddf3+0x1d2>
 800252c:	340c      	adds	r4, #12
 800252e:	dc0e      	bgt.n	800254e <__adddf3+0x1ba>
 8002530:	f104 0414 	add.w	r4, r4, #20
 8002534:	f1c4 0220 	rsb	r2, r4, #32
 8002538:	fa20 f004 	lsr.w	r0, r0, r4
 800253c:	fa01 f302 	lsl.w	r3, r1, r2
 8002540:	ea40 0003 	orr.w	r0, r0, r3
 8002544:	fa21 f304 	lsr.w	r3, r1, r4
 8002548:	ea45 0103 	orr.w	r1, r5, r3
 800254c:	bd30      	pop	{r4, r5, pc}
 800254e:	f1c4 040c 	rsb	r4, r4, #12
 8002552:	f1c4 0220 	rsb	r2, r4, #32
 8002556:	fa20 f002 	lsr.w	r0, r0, r2
 800255a:	fa01 f304 	lsl.w	r3, r1, r4
 800255e:	ea40 0003 	orr.w	r0, r0, r3
 8002562:	4629      	mov	r1, r5
 8002564:	bd30      	pop	{r4, r5, pc}
 8002566:	fa21 f004 	lsr.w	r0, r1, r4
 800256a:	4629      	mov	r1, r5
 800256c:	bd30      	pop	{r4, r5, pc}
 800256e:	f094 0f00 	teq	r4, #0
 8002572:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002576:	bf06      	itte	eq
 8002578:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800257c:	3401      	addeq	r4, #1
 800257e:	3d01      	subne	r5, #1
 8002580:	e74e      	b.n	8002420 <__adddf3+0x8c>
 8002582:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002586:	bf18      	it	ne
 8002588:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800258c:	d029      	beq.n	80025e2 <__adddf3+0x24e>
 800258e:	ea94 0f05 	teq	r4, r5
 8002592:	bf08      	it	eq
 8002594:	ea90 0f02 	teqeq	r0, r2
 8002598:	d005      	beq.n	80025a6 <__adddf3+0x212>
 800259a:	ea54 0c00 	orrs.w	ip, r4, r0
 800259e:	bf04      	itt	eq
 80025a0:	4619      	moveq	r1, r3
 80025a2:	4610      	moveq	r0, r2
 80025a4:	bd30      	pop	{r4, r5, pc}
 80025a6:	ea91 0f03 	teq	r1, r3
 80025aa:	bf1e      	ittt	ne
 80025ac:	2100      	movne	r1, #0
 80025ae:	2000      	movne	r0, #0
 80025b0:	bd30      	popne	{r4, r5, pc}
 80025b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80025b6:	d105      	bne.n	80025c4 <__adddf3+0x230>
 80025b8:	0040      	lsls	r0, r0, #1
 80025ba:	4149      	adcs	r1, r1
 80025bc:	bf28      	it	cs
 80025be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80025c2:	bd30      	pop	{r4, r5, pc}
 80025c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80025c8:	bf3c      	itt	cc
 80025ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80025ce:	bd30      	popcc	{r4, r5, pc}
 80025d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80025d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80025d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	bd30      	pop	{r4, r5, pc}
 80025e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80025e6:	bf1a      	itte	ne
 80025e8:	4619      	movne	r1, r3
 80025ea:	4610      	movne	r0, r2
 80025ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80025f0:	bf1c      	itt	ne
 80025f2:	460b      	movne	r3, r1
 80025f4:	4602      	movne	r2, r0
 80025f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80025fa:	bf06      	itte	eq
 80025fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002600:	ea91 0f03 	teqeq	r1, r3
 8002604:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002608:	bd30      	pop	{r4, r5, pc}
 800260a:	bf00      	nop

0800260c <__aeabi_ui2d>:
 800260c:	f090 0f00 	teq	r0, #0
 8002610:	bf04      	itt	eq
 8002612:	2100      	moveq	r1, #0
 8002614:	4770      	bxeq	lr
 8002616:	b530      	push	{r4, r5, lr}
 8002618:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800261c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002620:	f04f 0500 	mov.w	r5, #0
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	e750      	b.n	80024cc <__adddf3+0x138>
 800262a:	bf00      	nop

0800262c <__aeabi_i2d>:
 800262c:	f090 0f00 	teq	r0, #0
 8002630:	bf04      	itt	eq
 8002632:	2100      	moveq	r1, #0
 8002634:	4770      	bxeq	lr
 8002636:	b530      	push	{r4, r5, lr}
 8002638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800263c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002640:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002644:	bf48      	it	mi
 8002646:	4240      	negmi	r0, r0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	e73e      	b.n	80024cc <__adddf3+0x138>
 800264e:	bf00      	nop

08002650 <__aeabi_f2d>:
 8002650:	0042      	lsls	r2, r0, #1
 8002652:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002656:	ea4f 0131 	mov.w	r1, r1, rrx
 800265a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800265e:	bf1f      	itttt	ne
 8002660:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002664:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002668:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800266c:	4770      	bxne	lr
 800266e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002672:	bf08      	it	eq
 8002674:	4770      	bxeq	lr
 8002676:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800267a:	bf04      	itt	eq
 800267c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002680:	4770      	bxeq	lr
 8002682:	b530      	push	{r4, r5, lr}
 8002684:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800268c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002690:	e71c      	b.n	80024cc <__adddf3+0x138>
 8002692:	bf00      	nop

08002694 <__aeabi_ul2d>:
 8002694:	ea50 0201 	orrs.w	r2, r0, r1
 8002698:	bf08      	it	eq
 800269a:	4770      	bxeq	lr
 800269c:	b530      	push	{r4, r5, lr}
 800269e:	f04f 0500 	mov.w	r5, #0
 80026a2:	e00a      	b.n	80026ba <__aeabi_l2d+0x16>

080026a4 <__aeabi_l2d>:
 80026a4:	ea50 0201 	orrs.w	r2, r0, r1
 80026a8:	bf08      	it	eq
 80026aa:	4770      	bxeq	lr
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80026b2:	d502      	bpl.n	80026ba <__aeabi_l2d+0x16>
 80026b4:	4240      	negs	r0, r0
 80026b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80026ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80026be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80026c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80026c6:	f43f aed8 	beq.w	800247a <__adddf3+0xe6>
 80026ca:	f04f 0203 	mov.w	r2, #3
 80026ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80026d2:	bf18      	it	ne
 80026d4:	3203      	addne	r2, #3
 80026d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80026da:	bf18      	it	ne
 80026dc:	3203      	addne	r2, #3
 80026de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80026e2:	f1c2 0320 	rsb	r3, r2, #32
 80026e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80026ea:	fa20 f002 	lsr.w	r0, r0, r2
 80026ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80026f2:	ea40 000e 	orr.w	r0, r0, lr
 80026f6:	fa21 f102 	lsr.w	r1, r1, r2
 80026fa:	4414      	add	r4, r2
 80026fc:	e6bd      	b.n	800247a <__adddf3+0xe6>
 80026fe:	bf00      	nop

08002700 <__aeabi_d2f>:
 8002700:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002704:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8002708:	bf24      	itt	cs
 800270a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800270e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002712:	d90d      	bls.n	8002730 <__aeabi_d2f+0x30>
 8002714:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002718:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800271c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002720:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002724:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002728:	bf08      	it	eq
 800272a:	f020 0001 	biceq.w	r0, r0, #1
 800272e:	4770      	bx	lr
 8002730:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002734:	d121      	bne.n	800277a <__aeabi_d2f+0x7a>
 8002736:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800273a:	bfbc      	itt	lt
 800273c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002740:	4770      	bxlt	lr
 8002742:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002746:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800274a:	f1c2 0218 	rsb	r2, r2, #24
 800274e:	f1c2 0c20 	rsb	ip, r2, #32
 8002752:	fa10 f30c 	lsls.w	r3, r0, ip
 8002756:	fa20 f002 	lsr.w	r0, r0, r2
 800275a:	bf18      	it	ne
 800275c:	f040 0001 	orrne.w	r0, r0, #1
 8002760:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002764:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002768:	fa03 fc0c 	lsl.w	ip, r3, ip
 800276c:	ea40 000c 	orr.w	r0, r0, ip
 8002770:	fa23 f302 	lsr.w	r3, r3, r2
 8002774:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002778:	e7cc      	b.n	8002714 <__aeabi_d2f+0x14>
 800277a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800277e:	d107      	bne.n	8002790 <__aeabi_d2f+0x90>
 8002780:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002784:	bf1e      	ittt	ne
 8002786:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800278a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800278e:	4770      	bxne	lr
 8002790:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8002794:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002798:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <__powidf2>:
 80027a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a4:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 80027a8:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
 80027ac:	4615      	mov	r5, r2
 80027ae:	07e2      	lsls	r2, r4, #31
 80027b0:	4606      	mov	r6, r0
 80027b2:	460f      	mov	r7, r1
 80027b4:	bf53      	iteet	pl
 80027b6:	f04f 0800 	movpl.w	r8, #0
 80027ba:	4680      	movmi	r8, r0
 80027bc:	4689      	movmi	r9, r1
 80027be:	f8df 904c 	ldrpl.w	r9, [pc, #76]	; 800280c <__powidf2+0x6c>
 80027c2:	0864      	lsrs	r4, r4, #1
 80027c4:	d013      	beq.n	80027ee <__powidf2+0x4e>
 80027c6:	463b      	mov	r3, r7
 80027c8:	4632      	mov	r2, r6
 80027ca:	4630      	mov	r0, r6
 80027cc:	4639      	mov	r1, r7
 80027ce:	f000 fb01 	bl	8002dd4 <__wrap___aeabi_dmul>
 80027d2:	07e3      	lsls	r3, r4, #31
 80027d4:	4606      	mov	r6, r0
 80027d6:	460f      	mov	r7, r1
 80027d8:	d5f3      	bpl.n	80027c2 <__powidf2+0x22>
 80027da:	4640      	mov	r0, r8
 80027dc:	4649      	mov	r1, r9
 80027de:	4632      	mov	r2, r6
 80027e0:	463b      	mov	r3, r7
 80027e2:	f000 faf7 	bl	8002dd4 <__wrap___aeabi_dmul>
 80027e6:	0864      	lsrs	r4, r4, #1
 80027e8:	4680      	mov	r8, r0
 80027ea:	4689      	mov	r9, r1
 80027ec:	d1eb      	bne.n	80027c6 <__powidf2+0x26>
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	da07      	bge.n	8002802 <__powidf2+0x62>
 80027f2:	4642      	mov	r2, r8
 80027f4:	464b      	mov	r3, r9
 80027f6:	2000      	movs	r0, #0
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <__powidf2+0x6c>)
 80027fa:	f000 fad3 	bl	8002da4 <__wrap___aeabi_ddiv>
 80027fe:	4680      	mov	r8, r0
 8002800:	4689      	mov	r9, r1
 8002802:	4640      	mov	r0, r8
 8002804:	4649      	mov	r1, r9
 8002806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280a:	bf00      	nop
 800280c:	3ff00000 	.word	0x3ff00000

08002810 <xchxy>:
.global qfp_fsqrt_fast
.endif

@ exchange r0<->r1, r2<->r3
xchxy:
 push {r0,r2,r14}
 8002810:	b505      	push	{r0, r2, lr}
 mov r0,r1
 8002812:	4608      	mov	r0, r1
 mov r2,r3
 8002814:	461a      	mov	r2, r3
 pop {r1,r3,r15}
 8002816:	bd0a      	pop	{r1, r3, pc}

08002818 <unpackxy>:

@ IEEE single precision floats in r0,r1-> mantissae in r1,r0 exponents in r3,r2 *respectively*
@ trashes r4
unpackxy:
 push {r14}
 8002818:	b500      	push	{lr}
 bl unpackx
 800281a:	f000 f804 	bl	8002826 <unpackx>
 bl xchxy
 800281e:	f7ff fff7 	bl	8002810 <xchxy>
 pop {r4}
 8002822:	bc10      	pop	{r4}
 mov r14,r4
 8002824:	46a6      	mov	lr, r4

08002826 <unpackx>:

@ IEEE single in r0-> signed (two's complemennt) mantissa in r0 9Q23 (24 significant bits), signed exponent (bias removed) in r2
@ trashes r4; zero, denormal -> mantissa=+/-1, exponent=-380; Inf, NaN -> mantissa=+/-1, exponent=+640
unpackx:
 lsrs r2,r0,#23 @ save exponent and sign
 8002826:	0dc2      	lsrs	r2, r0, #23
 lsls r0,#9     @ extract mantissa
 8002828:	0240      	lsls	r0, r0, #9
 lsrs r0,#9
 800282a:	0a40      	lsrs	r0, r0, #9
 movs r4,#1
 800282c:	2401      	movs	r4, #1
 lsls r4,#23
 800282e:	05e4      	lsls	r4, r4, #23
 orrs r0,r4     @ reinstate implied leading 1
 8002830:	4320      	orrs	r0, r4
 cmp r2,#255    @ test sign bit
 8002832:	2aff      	cmp	r2, #255	; 0xff
 uxtb r2,r2     @ clear it
 8002834:	b2d2      	uxtb	r2, r2
 bls 1f         @ branch on positive
 8002836:	d900      	bls.n	800283a <unpackx+0x14>
 rsbs r0,#0     @ negate mantissa
 8002838:	4240      	negs	r0, r0
1:
 subs r2,#1
 800283a:	3a01      	subs	r2, #1
 cmp r2,#254    @ zero/denormal/Inf/NaN?
 800283c:	2afe      	cmp	r2, #254	; 0xfe
 bhs 2f
 800283e:	d201      	bcs.n	8002844 <unpackx+0x1e>
 subs r2,#126   @ remove exponent bias: can now be -126..+127
 8002840:	3a7e      	subs	r2, #126	; 0x7e
 bx r14
 8002842:	4770      	bx	lr

2:              @ here with special-case values
 cmp r0,#0
 8002844:	2800      	cmp	r0, #0
 mov r0,r4      @ set mantissa to +1
 8002846:	4620      	mov	r0, r4
 bpl 3f
 8002848:	d500      	bpl.n	800284c <unpackx+0x26>
 rsbs r0,#0     @ zero/denormal/Inf/NaN: mantissa=+/-1
 800284a:	4240      	negs	r0, r0
3:
 subs r2,#126   @ zero/denormal: exponent -> -127; Inf, NaN: exponent -> 128
 800284c:	3a7e      	subs	r2, #126	; 0x7e
 lsls r2,#2     @ zero/denormal: exponent -> -508; Inf, NaN: exponent -> 512
 800284e:	0092      	lsls	r2, r2, #2
 adds r2,#128   @ zero/denormal: exponent -> -380; Inf, NaN: exponent -> 640
 8002850:	3280      	adds	r2, #128	; 0x80
 bx r14
 8002852:	4770      	bx	lr

08002854 <packx>:

@ normalise and pack signed mantissa in r0 nominally 3Q29, signed exponent in r2-> IEEE single in r0
@ trashes r4, preserves r1,r3
@ r5: "sticky bits", must be zero iff all result bits below r0 are zero for correct rounding
packx:
 lsrs r4,r0,#31 @ save sign bit
 8002854:	0fc4      	lsrs	r4, r0, #31
 lsls r4,r4,#31 @ sign now in b31
 8002856:	07e4      	lsls	r4, r4, #31
 bpl 2f         @ skip if positive
 8002858:	d504      	bpl.n	8002864 <packx0+0x2>
 cmp r5,#0
 800285a:	2d00      	cmp	r5, #0
 beq 11f
 800285c:	d000      	beq.n	8002860 <packx+0xc>
 adds r0,#1     @ fiddle carry in to following rsb if sticky bits are non-zero
 800285e:	3001      	adds	r0, #1
11:
 rsbs r0,#0     @ can now treat r0 as unsigned
 8002860:	4240      	negs	r0, r0

08002862 <packx0>:
packx0:
 bmi 3f         @ catch r0=0x80000000 case
 8002862:	d403      	bmi.n	800286c <packx0+0xa>
2:
 subs r2,#1     @ normalisation loop
 8002864:	3a01      	subs	r2, #1
 adds r0,r0
 8002866:	1800      	adds	r0, r0, r0
 beq 1f         @ zero? special case
 8002868:	d012      	beq.n	8002890 <packx0+0x2e>
 bpl 2b         @ normalise so leading "1" in bit 31
 800286a:	d5fb      	bpl.n	8002864 <packx0+0x2>
3:
 adds r2,#129   @ (mis-)offset exponent
 800286c:	3281      	adds	r2, #129	; 0x81
 bne 12f        @ special case: highest denormal can round to lowest normal
 800286e:	d101      	bne.n	8002874 <packx0+0x12>
 adds r0,#0x80  @ in special case, need to add 256 to r0 for rounding
 8002870:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required
 8002872:	d205      	bcs.n	8002880 <packx0+0x1e>
12:
 adds r0,#0x80  @ rounding
 8002874:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required (and result is even so can ignore sticky bits)
 8002876:	d203      	bcs.n	8002880 <packx0+0x1e>
 cmp r5,#0
 8002878:	2d00      	cmp	r5, #0
 beq 7f         @ sticky bits zero?
 800287a:	d00f      	beq.n	800289c <packx0+0x3a>
8:
 lsls r0,#1     @ remove leading 1
 800287c:	0040      	lsls	r0, r0, #1
9:
 subs r2,#1     @ compensate exponent on this path
 800287e:	3a01      	subs	r2, #1
4:
 cmp r2,#254
 8002880:	2afe      	cmp	r2, #254	; 0xfe
 bge 5f         @ overflow?
 8002882:	da06      	bge.n	8002892 <packx0+0x30>
 adds r2,#1     @ correct exponent offset
 8002884:	3201      	adds	r2, #1
 ble 10f        @ denormal/underflow?
 8002886:	dd07      	ble.n	8002898 <packx0+0x36>
 lsrs r0,#9     @ align mantissa
 8002888:	0a40      	lsrs	r0, r0, #9
 lsls r2,#23    @ align exponent
 800288a:	05d2      	lsls	r2, r2, #23
 orrs r0,r2     @ assemble exponent and mantissa
 800288c:	4310      	orrs	r0, r2
6:
 orrs r0,r4     @ apply sign
 800288e:	4320      	orrs	r0, r4
1:
 bx r14
 8002890:	4770      	bx	lr

5:
 movs r0,#0xff  @ create infinity
 8002892:	20ff      	movs	r0, #255	; 0xff
 lsls r0,#23
 8002894:	05c0      	lsls	r0, r0, #23
 b 6b
 8002896:	e7fa      	b.n	800288e <packx0+0x2c>

10:
 movs r0,#0     @ create zero
 8002898:	2000      	movs	r0, #0
 bx r14
 800289a:	4770      	bx	lr

7:              @ sticky bit rounding case
 lsls r5,r0,#24 @ check bottom 8 bits of r0
 800289c:	0605      	lsls	r5, r0, #24
 bne 8b         @ in rounding-tie case?
 800289e:	d1ed      	bne.n	800287c <packx0+0x1a>
 lsrs r0,#9     @ ensure even result
 80028a0:	0a40      	lsrs	r0, r0, #9
 lsls r0,#10
 80028a2:	0280      	lsls	r0, r0, #10
 b 9b
 80028a4:	e7eb      	b.n	800287e <packx0+0x1c>

080028a6 <unpackxyalign>:

@ unpack two arguments (r0,r1) and shift one down to have common exponent, returned in r2; note that arguments are exchanged
@ sticky bits shifted off bottom of smaller argument in r5
@ following code is unnecessarily general for fadd, but is shared with atan2
unpackxyalign:
 push {r14}
 80028a6:	b500      	push	{lr}
 bl unpackxy
 80028a8:	f7ff ffb6 	bl	8002818 <unpackxy>
 lsls r0,r0,#6  @ Q29
 80028ac:	0180      	lsls	r0, r0, #6
 lsls r1,r1,#6  @ Q29
 80028ae:	0189      	lsls	r1, r1, #6
 subs r4,r2,r3  @ calculate shift
 80028b0:	1ad4      	subs	r4, r2, r3
 bge 1f         @ x>=y?
 80028b2:	da07      	bge.n	80028c4 <unpackxyalign+0x1e>
 mov r2,r3      @ no: take common exponent from y
 80028b4:	461a      	mov	r2, r3
 mov r5,r0      @ potential sticky bits from x
 80028b6:	4605      	mov	r5, r0
 rsbs r4,#0     @ make shift positive
 80028b8:	4264      	negs	r4, r4
 asrs r0,r4
 80028ba:	4120      	asrs	r0, r4
 cmp r4,#32
 80028bc:	2c20      	cmp	r4, #32
 blo 2f
 80028be:	d307      	bcc.n	80028d0 <unpackxyalign+0x2a>
 movs r0,#0    @ large shift, so all bits are sticky and result is zero
 80028c0:	2000      	movs	r0, #0
 pop {r15}
 80028c2:	bd00      	pop	{pc}
1:
 mov r5,r1     @ common exponent from x; potential sticky bits from y
 80028c4:	460d      	mov	r5, r1
 asrs r1,r4
 80028c6:	4121      	asrs	r1, r4
 cmp r4,#32
 80028c8:	2c20      	cmp	r4, #32
 blo 2f
 80028ca:	d301      	bcc.n	80028d0 <unpackxyalign+0x2a>
 movs r1,#0    @ large shift, so all bits are sticky and result is zero
 80028cc:	2100      	movs	r1, #0
 pop {r15}
 80028ce:	bd00      	pop	{pc}
2:
 rsbs r4,#0
 80028d0:	4264      	negs	r4, r4
 adds r4,#32
 80028d2:	3420      	adds	r4, #32
 lsls r5,r4    @ extract sticky bits
 80028d4:	40a5      	lsls	r5, r4
 pop {r15}
 80028d6:	bd00      	pop	{pc}

080028d8 <qfp_fsub>:

.thumb_func
qfp_fsub:
 movs r2,#1    @ subtract: flip sign bit of second argument and fall through to fadd
 80028d8:	2201      	movs	r2, #1
 lsls r2,#31
 80028da:	07d2      	lsls	r2, r2, #31
 eors r1,r2
 80028dc:	4051      	eors	r1, r2

080028de <qfp_fadd>:
.thumb_func
qfp_fadd:
 push {r4,r5,r14}
 80028de:	b530      	push	{r4, r5, lr}
 bl unpackxyalign
 80028e0:	f7ff ffe1 	bl	80028a6 <unpackxyalign>
 adds r0,r1    @ do addition
 80028e4:	1840      	adds	r0, r0, r1
 bne 2f        @ not in Inf-Inf case?
 80028e6:	d103      	bne.n	80028f0 <packret>
 cmp r2,#200
 80028e8:	2ac8      	cmp	r2, #200	; 0xc8
 blt 2f
 80028ea:	db01      	blt.n	80028f0 <packret>
 movs r0,#1
 80028ec:	2001      	movs	r0, #1
 lsls r0,#29   @ for Inf-Inf, set mantissa to +1 to prevent zero result
 80028ee:	0740      	lsls	r0, r0, #29

080028f0 <packret>:
2:
packret:       @ common return point: "pack and return"
 bl packx
 80028f0:	f7ff ffb0 	bl	8002854 <packx>
 pop {r4,r5,r15}
 80028f4:	bd30      	pop	{r4, r5, pc}

080028f6 <mul0>:

@ signed multiply r0 1Q23 by r1 4Q23, result in r0 7Q25, sticky bits in r5
@ trashes r3,r4
mul0:
 uxth r3,r0      @ Q23
 80028f6:	b283      	uxth	r3, r0
 asrs r4,r1,#16  @ Q7
 80028f8:	140c      	asrs	r4, r1, #16
 muls r3,r4      @ L*H, Q30 signed
 80028fa:	4363      	muls	r3, r4
 asrs r4,r0,#16  @ Q7
 80028fc:	1404      	asrs	r4, r0, #16
 uxth r5,r1      @ Q23
 80028fe:	b28d      	uxth	r5, r1
 muls r4,r5      @ H*L, Q30 signed
 8002900:	436c      	muls	r4, r5
 adds r3,r4      @ sum of middle partial products
 8002902:	191b      	adds	r3, r3, r4
 uxth r4,r0
 8002904:	b284      	uxth	r4, r0
 muls r4,r5      @ L*L, Q46 unsigned
 8002906:	436c      	muls	r4, r5
 lsls r5,r4,#16  @ initialise sticky bits from low half of low partial product
 8002908:	0425      	lsls	r5, r4, #16
 lsrs r4,#16     @ Q25
 800290a:	0c24      	lsrs	r4, r4, #16
 adds r3,r4      @ add high half of low partial product to sum of middle partial products
 800290c:	191b      	adds	r3, r3, r4
                 @ (cannot generate carry by limits on input arguments)
 asrs r0,#16     @ Q7
 800290e:	1400      	asrs	r0, r0, #16
 asrs r1,#16     @ Q7
 8002910:	1409      	asrs	r1, r1, #16
 muls r0,r1      @ H*H, Q14 signed
 8002912:	4348      	muls	r0, r1
 lsls r0,#11     @ high partial product Q25
 8002914:	02c0      	lsls	r0, r0, #11
 lsls r1,r3,#27  @ sticky
 8002916:	06d9      	lsls	r1, r3, #27
 orrs r5,r1      @ collect further sticky bits
 8002918:	430d      	orrs	r5, r1
 asrs r1,r3,#5   @ middle partial products Q25
 800291a:	1159      	asrs	r1, r3, #5
 adds r0,r1      @ final result
 800291c:	1840      	adds	r0, r0, r1
 bx r14
 800291e:	4770      	bx	lr

08002920 <qfp_fcmp>:

.thumb_func
qfp_fcmp:
 movs r2,#1      @ initialise result
 8002920:	2201      	movs	r2, #1
 lsls r3,r2,#31  @ r3=0x80000000
 8002922:	07d3      	lsls	r3, r2, #31
 tst r0,r3       @ check sign of first argument
 8002924:	4218      	tst	r0, r3
 beq 1f
 8002926:	d000      	beq.n	800292a <qfp_fcmp+0xa>
 subs r0,r3,r0   @ convert to 2's complement form for direct comparison
 8002928:	1a18      	subs	r0, r3, r0
1:
 tst r1,r3       @ repeat for second argument
 800292a:	4219      	tst	r1, r3
 beq 2f
 800292c:	d000      	beq.n	8002930 <qfp_fcmp+0x10>
 subs r1,r3,r1
 800292e:	1a59      	subs	r1, r3, r1
2:
 subs r0,r1     @ perform comparison
 8002930:	1a40      	subs	r0, r0, r1
 beq 4f         @ equal? return 0
 8002932:	d002      	beq.n	800293a <qfp_fcmp+0x1a>
 bgt 3f         @ r0>r1? return +1
 8002934:	dc00      	bgt.n	8002938 <qfp_fcmp+0x18>
 rsbs r2,#0     @ r0<r1: return -1
 8002936:	4252      	negs	r2, r2
3:
 mov r0,r2
 8002938:	4610      	mov	r0, r2
4:
 bx r14
 800293a:	4770      	bx	lr

0800293c <qfp_fmul>:

.thumb_func
qfp_fmul:
 push {r4,r5,r14}
 800293c:	b530      	push	{r4, r5, lr}
 bl unpackxy
 800293e:	f7ff ff6b 	bl	8002818 <unpackxy>
 add r2,r3      @ sum exponents
 8002942:	441a      	add	r2, r3
 adds r2,#4     @ adjust exponent for pack which expects Q29
 8002944:	3204      	adds	r2, #4

08002946 <fmul0>:
fmul0:
 bl mul0
 8002946:	f7ff ffd6 	bl	80028f6 <mul0>
 b packret
 800294a:	e7d1      	b.n	80028f0 <packret>

0800294c <qfp_fdiv>:

.thumb_func
qfp_fdiv:
 push {r4,r5,r14}
 800294c:	b530      	push	{r4, r5, lr}

0800294e <fdiv_n>:
fdiv_n:
 bl unpackxy
 800294e:	f7ff ff63 	bl	8002818 <unpackxy>
 movs r5,#1      @ result cannot fall exactly half-way between two representable numbers (exercise for reader - note that
 8002952:	2501      	movs	r5, #1
                 @ we do not handle denormals) so there will always be sticky bits
 cmp r0,#0       @ check divisor sign
 8002954:	2800      	cmp	r0, #0
 bpl 1f
 8002956:	d501      	bpl.n	800295c <fdiv_n+0xe>
 rsbs r0,#0      @ ensure divisor positive
 8002958:	4240      	negs	r0, r0
 rsbs r1,#0      @ preserve sign of result
 800295a:	4249      	negs	r1, r1
1:
 movs r4,#0
 800295c:	2400      	movs	r4, #0
 cmp r1,#0       @ check sign of dividend
 800295e:	2900      	cmp	r1, #0
 bpl 2f
 8002960:	d501      	bpl.n	8002966 <fdiv_n+0x18>
 rsbs r1,#0      @ result will be negative
 8002962:	4249      	negs	r1, r1
 mvns r4,r4      @ save sign as 0x00000000 or 0xffffffff
 8002964:	43e4      	mvns	r4, r4
2:               @ now do unsigned division on unpacked values {r1,r3}/{r0,r2}
 cmp r3,#200     @ dividend is an infinity? return it
 8002966:	2bc8      	cmp	r3, #200	; 0xc8
 bge 3f
 8002968:	da0e      	bge.n	8002988 <infret+0x2>
 rsbs r2,#0
 800296a:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero? return infinity
 800296c:	2ac8      	cmp	r2, #200	; 0xc8
 bge 3f
 800296e:	da0b      	bge.n	8002988 <infret+0x2>
 adds r2,r3      @ difference of exponents
 8002970:	18d2      	adds	r2, r2, r3
 movs r3,#0x40   @ termination marker (calculate enough bits to do rounding correctly)
 8002972:	2340      	movs	r3, #64	; 0x40
2:               @ division loop
 subs r1,r0      @ trial subtraction
 8002974:	1a09      	subs	r1, r1, r0
 bcs 1f
 8002976:	d200      	bcs.n	800297a <fdiv_n+0x2c>
 add r1,r0       @ restore if failed
 8002978:	4401      	add	r1, r0
1:
 adcs r3,r3      @ shift in result bit
 800297a:	415b      	adcs	r3, r3
 add r1,r1       @ shift up dividend
 800297c:	4409      	add	r1, r1
 bcc 2b          @ loop until marker appears in carry
 800297e:	d3f9      	bcc.n	8002974 <fdiv_n+0x26>
 lsls r0,r3,#4   @ align for packing
 8002980:	0118      	lsls	r0, r3, #4
4:
 eors r0,r4      @ apply sign
 8002982:	4060      	eors	r0, r4
 b packret
 8002984:	e7b4      	b.n	80028f0 <packret>

08002986 <infret>:
infret:
 movs r4,#0
 8002986:	2400      	movs	r4, #0
3:
 mov r0,r1
 8002988:	4608      	mov	r0, r1
 movs r2,#255    @ return infinity
 800298a:	22ff      	movs	r2, #255	; 0xff
 b 4b
 800298c:	e7f9      	b.n	8002982 <fdiv_n+0x34>

0800298e <qfp_fdiv_fast>:
@ cases the value is known to be very close to an integer (usually 1) and so the bits of greater significance do not need
@ to be stored.
@ The reciprocal calculation has been tested for all possible input mantissa values.
.thumb_func
qfp_fdiv_fast:
 push {r4,r5,r14}
 800298e:	b530      	push	{r4, r5, lr}

08002990 <fdiv_fast_n>:
fdiv_fast_n:
 bl unpackxy
 8002990:	f7ff ff42 	bl	8002818 <unpackxy>
 cmp r0,#0
 8002994:	2800      	cmp	r0, #0
 bpl 1f
 8002996:	d501      	bpl.n	800299c <fdiv_fast_n+0xc>
 rsbs r0,#0
 8002998:	4240      	negs	r0, r0
 rsbs r1,#0      @ ensure divisor positive
 800299a:	4249      	negs	r1, r1
1:
 cmp r3,#200
 800299c:	2bc8      	cmp	r3, #200	; 0xc8
 bge infret      @ dividend is an infinity? return it
 800299e:	daf2      	bge.n	8002986 <infret>
 rsbs r2,#0
 80029a0:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero?
 80029a2:	2ac8      	cmp	r2, #200	; 0xc8
 bge infret      @ return infinity
 80029a4:	daef      	bge.n	8002986 <infret>
 adds r2,r3      @ difference of exponents
 80029a6:	18d2      	adds	r2, r2, r3
 adr r4,rcpapp-8 @ the first 8 elements of the table are never accessed because of the mantissa's leading 1
 80029a8:	a423      	add	r4, pc, #140	; (adr r4, 8002a38 <qfp_fsqrt_fast+0x5a>)
 lsrs r3,r0,#20  @ y Q23; y>>20 Q7
 80029aa:	0d03      	lsrs	r3, r0, #20
 ldrb r4,[r4,r3] @ m=rcpapp[(y>>20)&7]; // Q8, .5<m<1
 80029ac:	5ce4      	ldrb	r4, [r4, r3]

 lsls r3,r4,#2   @ m<<2         // Q10  first Newton-Raphson iteration
 80029ae:	00a3      	lsls	r3, r4, #2
 muls r3,r0      @ s=y*(m<<2);  // Q33
 80029b0:	4343      	muls	r3, r0
 lsls r4,#8      @ m<<=8;       // Q16
 80029b2:	0224      	lsls	r4, r4, #8
 asrs r3,#21     @ s>>=21;      // Q12
 80029b4:	155b      	asrs	r3, r3, #21
 muls r3,r4      @ s*=m;        // Q28
 80029b6:	4363      	muls	r3, r4
 asrs r3,#12     @ s>>=12;      // Q16
 80029b8:	131b      	asrs	r3, r3, #12
 subs r4,r3      @ m=m-s;       // Q16
 80029ba:	1ae4      	subs	r4, r4, r3

 mov r3,r4       @ s=y*m        // Q39 second Newton-Raphson iteration
 80029bc:	4623      	mov	r3, r4
 muls r4,r0      @ ...
 80029be:	4344      	muls	r4, r0
 asrs r4,#16     @ s>>=16;      // Q23
 80029c0:	1424      	asrs	r4, r4, #16
 muls r4,r3      @ s*=m;        // Q39
 80029c2:	435c      	muls	r4, r3
 lsls r3,#8      @ m<<=8;       // Q24
 80029c4:	021b      	lsls	r3, r3, #8
 asrs r4,#15     @ s>>=15;      // Q24
 80029c6:	13e4      	asrs	r4, r4, #15
 subs r3,r4      @ m=m-s;       // Q24
 80029c8:	1b1b      	subs	r3, r3, r4

 lsls r4,r3,#7   @ \/ s=y*m;    // Q47 third Newton-Raphson iteration
 80029ca:	01dc      	lsls	r4, r3, #7
 muls r3,r0      @ /\ m<<=7;    // Q31
 80029cc:	4343      	muls	r3, r0
 asrs r3,#15     @ s>>=15;      // Q32
 80029ce:	13db      	asrs	r3, r3, #15
 lsrs r0,r4,#16  @ s*=(m>>16);  // Q47
 80029d0:	0c20      	lsrs	r0, r4, #16
 muls r3,r0      @ ...
 80029d2:	4343      	muls	r3, r0
 asrs r3,#16     @ s>>=16;      // Q31
 80029d4:	141b      	asrs	r3, r3, #16
 subs r0,r4,r3   @ m=m-s;       // Q31
 80029d6:	1ae0      	subs	r0, r4, r3

080029d8 <div0>:
div0:
 adds r0,#7      @ rounding; reduce systematic error
 80029d8:	3007      	adds	r0, #7
 lsrs r0,#4      @ Q27
 80029da:	0900      	lsrs	r0, r0, #4
 b fmul0         @ drop into multiplication code to calculate result
 80029dc:	e7b3      	b.n	8002946 <fmul0>

080029de <qfp_fsqrt_fast>:
@ Again, the fixed-point calculation is carefully implemented to preserve accuracy, and similar comments to those
@ made above on the fast division routine apply.
@ The reciprocal square root calculation has been tested for all possible (possibly shifted) input mantissa values.
.thumb_func
qfp_fsqrt_fast:
 push {r4,r5,r14}
 80029de:	b530      	push	{r4, r5, lr}
 bl unpackx
 80029e0:	f7ff ff21 	bl	8002826 <unpackx>
 movs r1,r0
 80029e4:	0001      	movs	r1, r0
 bmi infret       @ negative? return -Inf
 80029e6:	d4ce      	bmi.n	8002986 <infret>
 asrs r0,r2,#1    @ check LSB of exponent
 80029e8:	1050      	asrs	r0, r2, #1
 bcc 1f
 80029ea:	d300      	bcc.n	80029ee <qfp_fsqrt_fast+0x10>
 lsls r1,#1       @ was odd: double mantissa; mantissa y now 1..4 Q23
 80029ec:	0049      	lsls	r1, r1, #1
1:
 adds r2,#4       @ correction for packing
 80029ee:	3204      	adds	r2, #4
 adr r4,rsqrtapp-4@ first four table entries are never accessed because of the mantissa's leading 1
 80029f0:	a414      	add	r4, pc, #80	; (adr r4, 8002a44 <rcpapp+0x4>)
 lsrs r3,r1,#21   @ y>>21 Q2
 80029f2:	0d4b      	lsrs	r3, r1, #21
 ldrb r4,[r4,r3]  @ initial approximation to reciprocal square root m Q8
 80029f4:	5ce4      	ldrb	r4, [r4, r3]

 lsrs r0,r1,#7    @ y>>7             // Q16 first Newton-Raphson iteration
 80029f6:	09c8      	lsrs	r0, r1, #7
 muls r0,r4       @ m*y
 80029f8:	4360      	muls	r0, r4
 muls r0,r4       @ s=m*y*y          // Q32
 80029fa:	4360      	muls	r0, r4
 asrs r0,#12      @ s>>12
 80029fc:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ m*s              // Q28
 80029fe:	4360      	muls	r0, r4
 asrs r0,#13      @ m*s              // Q15
 8002a00:	1340      	asrs	r0, r0, #13
 lsls r4,#8       @ m                // Q16
 8002a02:	0224      	lsls	r4, r4, #8
 subs r4,r0       @ m=(m<<8)-(s>>13) // Q16-Q15/2 -> Q16
 8002a04:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // second Newton-Raphson iteration
 8002a06:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002a08:	4340      	muls	r0, r0
 lsrs r0,#16      @ u>>16            // Q16
 8002a0a:	0c00      	lsrs	r0, r0, #16
 lsrs r3,r1,#7    @ y>>7             // Q16
 8002a0c:	09cb      	lsrs	r3, r1, #7
 muls r0,r3       @ s=u*(y>>7)       // Q32
 8002a0e:	4358      	muls	r0, r3
 asrs r0,#12      @ s>>12            // Q20
 8002a10:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ s*m              // Q36
 8002a12:	4360      	muls	r0, r4
 asrs r0,#21      @ s*m              // Q15
 8002a14:	1540      	asrs	r0, r0, #21
 subs r4,r0       @ m=m-s            // Q16-Q15/2
 8002a16:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // third Newton-Raphson iteration
 8002a18:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002a1a:	4340      	muls	r0, r0
 lsrs r3,r0,#12   @ now multiply u and y in two parts: u>>12
 8002a1c:	0b03      	lsrs	r3, r0, #12
 muls r3,r1       @ first partial product (u>>12)*y Q43
 8002a1e:	434b      	muls	r3, r1
 lsls r0,#20
 8002a20:	0500      	lsls	r0, r0, #20
 lsrs r0,#20      @ u&0xfff
 8002a22:	0d00      	lsrs	r0, r0, #20
 lsrs r5,r1,#12   @ y>>12
 8002a24:	0b0d      	lsrs	r5, r1, #12
 muls r0,r5       @ second partial product (u&0xfff)*(y>>12) Q43
 8002a26:	4368      	muls	r0, r5
 add r0,r3        @ s=u*y            // Q43
 8002a28:	4418      	add	r0, r3
 asrs r0,#15      @ s>>15            // Q28
 8002a2a:	13c0      	asrs	r0, r0, #15
 muls r0,r4       @ (s>>15)*m        // Q44
 8002a2c:	4360      	muls	r0, r4
 lsls r4,#13      @ m<<13            // Q29
 8002a2e:	0364      	lsls	r4, r4, #13
 asrs r0,#16      @ s>>16            // Q28
 8002a30:	1400      	asrs	r0, r0, #16
 subs r0,r4,r0    @                  // Q29-Q28/2
 8002a32:	1a20      	subs	r0, r4, r0

 asrs r2,#1       @ halve exponent
 8002a34:	1052      	asrs	r2, r2, #1
 bcc div0         @ was y shifted?
 8002a36:	d3cf      	bcc.n	80029d8 <div0>
 lsrs r0,#1
 8002a38:	0840      	lsrs	r0, r0, #1
 lsls r1,#1       @ shift y back
 8002a3a:	0049      	lsls	r1, r1, #1
 b div0           @ round and complete with multiplication
 8002a3c:	e7cc      	b.n	80029d8 <div0>
 8002a3e:	46c0      	nop			; (mov r8, r8)

08002a40 <rcpapp>:
 8002a40:	b2c3d8f1 	.word	0xb2c3d8f1
 8002a44:	848d98a4 	.word	0x848d98a4

08002a48 <rsqrtapp>:
 8002a48:	bbc9daf1 	.word	0xbbc9daf1
 8002a4c:	979ea6b0 	.word	0x979ea6b0
 8002a50:	82868b91 	.word	0x82868b91

08002a54 <qfp_float2int>:
.if include_conversions

@ convert float to signed int, rounding towards -Inf, clamping
.thumb_func
qfp_float2int:
 movs r1,#0      @ fall through
 8002a54:	2100      	movs	r1, #0

08002a56 <qfp_float2fix>:

@ convert float in r0 to signed fixed point in r0, clamping
.thumb_func
qfp_float2fix:
 push {r4,r14}
 8002a56:	b510      	push	{r4, lr}
 bl unpackx
 8002a58:	f7ff fee5 	bl	8002826 <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002a5c:	440a      	add	r2, r1
 subs r2,#23     @ r2 is now amount of left shift required
 8002a5e:	3a17      	subs	r2, #23
 blt 1f          @ requires right shift?
 8002a60:	db07      	blt.n	8002a72 <qfp_float2fix+0x1c>
 cmp r2,#7       @ overflow?
 8002a62:	2a07      	cmp	r2, #7
 ble 4f
 8002a64:	dd17      	ble.n	8002a96 <qfp_float2ufix+0x16>
3:               @ overflow
 asrs r1,r0,#31  @ +ve:0 -ve:0xffffffff
 8002a66:	17c1      	asrs	r1, r0, #31
 mvns r1,r1      @ +ve:0xffffffff -ve:0
 8002a68:	43c9      	mvns	r1, r1
 movs r0,#1
 8002a6a:	2001      	movs	r0, #1
 lsls r0,#31
 8002a6c:	07c0      	lsls	r0, r0, #31
5:
 eors r0,r1      @ +ve:0x7fffffff -ve:0x80000000 (unsigned path: 0xffffffff)
 8002a6e:	4048      	eors	r0, r1
 pop {r4,r15}
 8002a70:	bd10      	pop	{r4, pc}
1:
 rsbs r2,#0      @ right shift for r0, >0
 8002a72:	4252      	negs	r2, r2
 cmp r2,#32
 8002a74:	2a20      	cmp	r2, #32
 blt 2f          @ more than 32 bits of right shift?
 8002a76:	db00      	blt.n	8002a7a <qfp_float2fix+0x24>
 movs r2,#32
 8002a78:	2220      	movs	r2, #32
2:
 asrs r0,r0,r2
 8002a7a:	4110      	asrs	r0, r2
 pop {r4,r15}
 8002a7c:	bd10      	pop	{r4, pc}

08002a7e <qfp_float2uint>:

@ unsigned version
.thumb_func
qfp_float2uint:
 movs r1,#0      @ fall through
 8002a7e:	2100      	movs	r1, #0

08002a80 <qfp_float2ufix>:
.thumb_func
qfp_float2ufix:
 push {r4,r14}
 8002a80:	b510      	push	{r4, lr}
 bl unpackx
 8002a82:	f7ff fed0 	bl	8002826 <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002a86:	440a      	add	r2, r1
 movs r1,r0
 8002a88:	0001      	movs	r1, r0
 bmi 5b          @ negative? return zero
 8002a8a:	d4f0      	bmi.n	8002a6e <qfp_float2fix+0x18>
 subs r2,#23     @ r2 is now amount of left shift required
 8002a8c:	3a17      	subs	r2, #23
 blt 1b          @ requires right shift?
 8002a8e:	dbf0      	blt.n	8002a72 <qfp_float2fix+0x1c>
 mvns r1,r0      @ ready to return 0xffffffff
 8002a90:	43c1      	mvns	r1, r0
 cmp r2,#8       @ overflow?
 8002a92:	2a08      	cmp	r2, #8
 bgt 5b
 8002a94:	dceb      	bgt.n	8002a6e <qfp_float2fix+0x18>
4:
 lsls r0,r0,r2   @ result fits, left shifted
 8002a96:	4090      	lsls	r0, r2
 pop {r4,r15}
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <qfp_int2float>:

@ convert signed int to float, rounding
.thumb_func
qfp_int2float:
 movs r1,#0      @ fall through
 8002a9a:	2100      	movs	r1, #0

08002a9c <qfp_fix2float>:

@ convert signed fix to float, rounding; number of r0 bits after point in r1
.thumb_func
qfp_fix2float:
 push {r4,r5,r14}
 8002a9c:	b530      	push	{r4, r5, lr}
1:
 movs r2,#29
 8002a9e:	221d      	movs	r2, #29
 subs r2,r1      @ fix exponent
 8002aa0:	1a52      	subs	r2, r2, r1

08002aa2 <packretns>:
packretns:       @ pack and return, sticky bits=0
 movs r5,#0
 8002aa2:	2500      	movs	r5, #0
 b packret
 8002aa4:	e724      	b.n	80028f0 <packret>

08002aa6 <qfp_uint2float>:

@ unsigned version
.thumb_func
qfp_uint2float:
 movs r1,#0      @ fall through
 8002aa6:	2100      	movs	r1, #0

08002aa8 <qfp_ufix2float>:
.thumb_func
qfp_ufix2float:
 push {r4,r5,r14}
 8002aa8:	b530      	push	{r4, r5, lr}
 cmp r0,#0
 8002aaa:	2800      	cmp	r0, #0
 bge 1b          @ treat <2^31 as signed
 8002aac:	daf7      	bge.n	8002a9e <qfp_fix2float+0x2>
 movs r2,#30
 8002aae:	221e      	movs	r2, #30
 subs r2,r1      @ fix exponent
 8002ab0:	1a52      	subs	r2, r2, r1
 lsls r5,r0,#31  @ one sticky bit
 8002ab2:	07c5      	lsls	r5, r0, #31
 lsrs r0,#1
 8002ab4:	0840      	lsrs	r0, r0, #1
 b packret
 8002ab6:	e71b      	b.n	80028f0 <packret>

08002ab8 <cordic_start>:
@ r3: coefficient pointer
@ r4,r8: m
@ r5: i (shift)

cordic_start: @ initialisation
 mov r7,r8
 8002ab8:	4647      	mov	r7, r8
 push {r7}
 8002aba:	b480      	push	{r7}
 movs r5,#0   @ initial shift=0
 8002abc:	2500      	movs	r5, #0
 mov r8,r4
 8002abe:	46a0      	mov	r8, r4
 b 5f
 8002ac0:	e00d      	b.n	8002ade <cordic_rstep+0x16>

08002ac2 <cordic_vstep>:

cordic_vstep: @ one step of algorithm in vector mode
 cmp r1,#0    @ check sign of y
 8002ac2:	2900      	cmp	r1, #0
 bgt 4f
 8002ac4:	dc02      	bgt.n	8002acc <cordic_rstep+0x4>
 b 1f
 8002ac6:	e005      	b.n	8002ad4 <cordic_rstep+0xc>

08002ac8 <cordic_rstep>:
cordic_rstep: @ one step of algorithm in rotation mode
 cmp r2,#0    @ check sign of angle
 8002ac8:	2a00      	cmp	r2, #0
 bge 1f
 8002aca:	da03      	bge.n	8002ad4 <cordic_rstep+0xc>
4:
 subs r1,r6   @ negative rotation: y=y-(x>>i)
 8002acc:	1b89      	subs	r1, r1, r6
 rsbs r7,#0
 8002ace:	427f      	negs	r7, r7
 adds r2,r4   @ accumulate angle
 8002ad0:	1912      	adds	r2, r2, r4
 b 2f
 8002ad2:	e001      	b.n	8002ad8 <cordic_rstep+0x10>
1:
 adds r1,r6   @ positive rotation: y=y+(x>>i)
 8002ad4:	1989      	adds	r1, r1, r6
 subs r2,r4   @ accumulate angle
 8002ad6:	1b12      	subs	r2, r2, r4
2:
 mov r4,r8
 8002ad8:	4644      	mov	r4, r8
 muls r7,r4   @ apply sign from m
 8002ada:	4367      	muls	r7, r4
 subs r0,r7   @ finish rotation: x=x{+/-}(y>>i)
 8002adc:	1bc0      	subs	r0, r0, r7
5:
 ldr r4,[r3]  @ fetch next angle from table
 8002ade:	681c      	ldr	r4, [r3, #0]
 adds r3,#4   @ bump pointer
 8002ae0:	3304      	adds	r3, #4
 lsrs r4,#1   @ repeated angle?
 8002ae2:	0864      	lsrs	r4, r4, #1
 bcs 3f
 8002ae4:	d200      	bcs.n	8002ae8 <cordic_rstep+0x20>
 adds r5,#1   @ adjust shift if not
 8002ae6:	3501      	adds	r5, #1
3:
 mov r6,r0
 8002ae8:	4606      	mov	r6, r0
 asrs r6,r5   @ x>>i
 8002aea:	412e      	asrs	r6, r5
 mov r7,r1
 8002aec:	460f      	mov	r7, r1
 asrs r7,r5   @ y>>i
 8002aee:	412f      	asrs	r7, r5
 lsrs r4,#1   @ shift end flag into carry
 8002af0:	0864      	lsrs	r4, r4, #1
 bx r14
 8002af2:	4770      	bx	lr

08002af4 <cordic_rot>:

@ CORDIC rotation mode
cordic_rot:
 push {r6,r7,r14}
 8002af4:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002af6:	f7ff ffdf 	bl	8002ab8 <cordic_start>
1:
 bl cordic_rstep
 8002afa:	f7ff ffe5 	bl	8002ac8 <cordic_rstep>
 bcc 1b            @ step until table finished
 8002afe:	d3fc      	bcc.n	8002afa <cordic_rot+0x6>
 asrs r6,r0,#14    @ remaining small rotations can be linearised: see IV.B of paper referenced above
 8002b00:	1386      	asrs	r6, r0, #14
 asrs r7,r1,#14
 8002b02:	138f      	asrs	r7, r1, #14
 asrs r2,#3
 8002b04:	10d2      	asrs	r2, r2, #3
 muls r6,r2        @ all remaining CORDIC steps in a multiplication
 8002b06:	4356      	muls	r6, r2
 muls r7,r2
 8002b08:	4357      	muls	r7, r2
 mov r4,r8
 8002b0a:	4644      	mov	r4, r8
 muls r7,r4
 8002b0c:	4367      	muls	r7, r4
 asrs r6,#12
 8002b0e:	1336      	asrs	r6, r6, #12
 asrs r7,#12
 8002b10:	133f      	asrs	r7, r7, #12
 subs r0,r7        @ x=x{+/-}(yz>>k)
 8002b12:	1bc0      	subs	r0, r0, r7
 adds r1,r6        @ y=y+(xz>>k)
 8002b14:	1989      	adds	r1, r1, r6

08002b16 <cordic_exit>:
cordic_exit:
 pop {r7}
 8002b16:	bc80      	pop	{r7}
 mov r8,r7
 8002b18:	46b8      	mov	r8, r7
 pop {r6,r7,r15}
 8002b1a:	bdc0      	pop	{r6, r7, pc}

08002b1c <cordic_vec>:

@ CORDIC vector mode
cordic_vec:
 push {r6,r7,r14}
 8002b1c:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002b1e:	f7ff ffcb 	bl	8002ab8 <cordic_start>
1:
 bl cordic_vstep
 8002b22:	f7ff ffce 	bl	8002ac2 <cordic_vstep>
 bcc 1b            @ step until table finished
 8002b26:	d3fc      	bcc.n	8002b22 <cordic_vec+0x6>
4:
 cmp r1,#0         @ continue as in cordic_vstep but without using table; x is not affected as y is small
 8002b28:	2900      	cmp	r1, #0
 bgt 2f            @ check sign of y
 8002b2a:	dc02      	bgt.n	8002b32 <cordic_vec+0x16>
 adds r1,r6        @ positive rotation: y=y+(x>>i)
 8002b2c:	1989      	adds	r1, r1, r6
 subs r2,r4        @ accumulate angle
 8002b2e:	1b12      	subs	r2, r2, r4
 b 3f
 8002b30:	e001      	b.n	8002b36 <cordic_vec+0x1a>
2:
 subs r1,r6        @ negative rotation: y=y-(x>>i)
 8002b32:	1b89      	subs	r1, r1, r6
 adds r2,r4        @ accumulate angle
 8002b34:	1912      	adds	r2, r2, r4
3:
 asrs r6,#1
 8002b36:	1076      	asrs	r6, r6, #1
 asrs r4,#1        @ next "table entry"
 8002b38:	1064      	asrs	r4, r4, #1
 bne 4b
 8002b3a:	d1f5      	bne.n	8002b28 <cordic_vec+0xc>
 b cordic_exit
 8002b3c:	e7eb      	b.n	8002b16 <cordic_exit>

08002b3e <qfp_fsin>:

.thumb_func
qfp_fsin:            @ calculate sin and cos using CORDIC rotation method
 push {r4,r5,r14}
 8002b3e:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002b40:	2118      	movs	r1, #24
 bl qfp_float2fix    @ range reduction by repeated subtraction/addition in fixed point
 8002b42:	f7ff ff88 	bl	8002a56 <qfp_float2fix>
 ldr r4,pi_q29
 8002b46:	4c48      	ldr	r4, [pc, #288]	; (8002c68 <pi_q29>)
 lsrs r4,#4          @ 2pi Q24
 8002b48:	0924      	lsrs	r4, r4, #4
1:
 subs r0,r4
 8002b4a:	1b00      	subs	r0, r0, r4
 bge 1b
 8002b4c:	dafd      	bge.n	8002b4a <qfp_fsin+0xc>
1:
 adds r0,r4
 8002b4e:	1900      	adds	r0, r0, r4
 bmi 1b              @ now in range 0..2pi
 8002b50:	d4fd      	bmi.n	8002b4e <qfp_fsin+0x10>
 lsls r2,r0,#2       @ z Q26
 8002b52:	0082      	lsls	r2, r0, #2
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 8002b54:	0065      	lsls	r5, r4, #1
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002b56:	483e      	ldr	r0, [pc, #248]	; (8002c50 <qfp_fatan2+0x30>)
 movs r1,#0
 8002b58:	2100      	movs	r1, #0
1:
 cmp r2,r4           @ >pi/2?
 8002b5a:	42a2      	cmp	r2, r4
 blt 2f
 8002b5c:	db02      	blt.n	8002b64 <qfp_fsin+0x26>
 subs r2,r5          @ reduce range to -pi/2..pi/2
 8002b5e:	1b52      	subs	r2, r2, r5
 rsbs r0,#0          @ rotate vector by pi
 8002b60:	4240      	negs	r0, r0
 b 1b
 8002b62:	e7fa      	b.n	8002b5a <qfp_fsin+0x1c>
2:
 lsls r2,#3          @ Q29
 8002b64:	00d2      	lsls	r2, r2, #3
 adr r3,tab_cc       @ circular coefficients
 8002b66:	a340      	add	r3, pc, #256	; (adr r3, 8002c68 <pi_q29>)
 movs r4,#1          @ m=1
 8002b68:	2401      	movs	r4, #1
 bl cordic_rot
 8002b6a:	f7ff ffc3 	bl	8002af4 <cordic_rot>
 adds r1,#9          @ fiddle factor to make sin(0)==0
 8002b6e:	3109      	adds	r1, #9
 movs r2,#0          @ exponents to zero
 8002b70:	2200      	movs	r2, #0
 movs r3,#0
 8002b72:	2300      	movs	r3, #0
 movs r5,#0          @ no sticky bits
 8002b74:	2500      	movs	r5, #0
 bl packx            @ pack cosine
 8002b76:	f7ff fe6d 	bl	8002854 <packx>
 bl xchxy
 8002b7a:	f7ff fe49 	bl	8002810 <xchxy>
 b packretns         @ pack sine
 8002b7e:	e790      	b.n	8002aa2 <packretns>

08002b80 <qfp_fcos>:

.thumb_func
qfp_fcos:
 push {r14}
 8002b80:	b500      	push	{lr}
 bl qfp_fsin
 8002b82:	f7ff ffdc 	bl	8002b3e <qfp_fsin>
 mov r0,r1           @ extract cosine result
 8002b86:	4608      	mov	r0, r1
 pop {r15}
 8002b88:	bd00      	pop	{pc}

08002b8a <qfp_ftan>:

.thumb_func
qfp_ftan:
 push {r4,r5,r14}
 8002b8a:	b530      	push	{r4, r5, lr}
 bl qfp_fsin         @ sine in r0/r2, cosine in r1/r3
 8002b8c:	f7ff ffd7 	bl	8002b3e <qfp_fsin>
.if include_faster
 b fdiv_fast_n       @ sin/cos
 8002b90:	e6fe      	b.n	8002990 <fdiv_fast_n>

08002b92 <qfp_fexp>:

.endif

.thumb_func
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 8002b92:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002b94:	2118      	movs	r1, #24
 bl qfp_float2fix    @ Q24: covers entire valid input range
 8002b96:	f7ff ff5e 	bl	8002a56 <qfp_float2fix>
 asrs r1,r0,#16      @ Q8
 8002b9a:	1401      	asrs	r1, r0, #16
 ldr r2,=#5909       @ log_2(e) Q12
 8002b9c:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <qfp_fatan2+0x34>)
 muls r1,r2          @ estimate exponent of result Q20
 8002b9e:	4351      	muls	r1, r2
 asrs r1,#19         @ Q1
 8002ba0:	14c9      	asrs	r1, r1, #19
 adds r1,#1          @ rounding
 8002ba2:	3101      	adds	r1, #1
 asrs r1,#1          @ rounded estimate of exponent of result
 8002ba4:	1049      	asrs	r1, r1, #1
 push {r1}           @ save for later
 8002ba6:	b402      	push	{r1}
 lsls r2,r0,#5       @ Q29
 8002ba8:	0142      	lsls	r2, r0, #5
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002baa:	482b      	ldr	r0, [pc, #172]	; (8002c58 <qfp_fatan2+0x38>)
 muls r1,r0          @ accurate contribution of estimated exponent
 8002bac:	4341      	muls	r1, r0
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 8002bae:	1a52      	subs	r2, r2, r1
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002bb0:	482a      	ldr	r0, [pc, #168]	; (8002c5c <qfp_fatan2+0x3c>)
 movs r1,#0
 8002bb2:	2100      	movs	r1, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002bb4:	a339      	add	r3, pc, #228	; (adr r3, 8002c9c <tab_ch>)
 mvns r4,r1          @ m=-1
 8002bb6:	43cc      	mvns	r4, r1
 bl cordic_rot       @ calculate cosh and sinh
 8002bb8:	f7ff ff9c 	bl	8002af4 <cordic_rot>
 add r0,r1           @ exp=cosh+sinh
 8002bbc:	4408      	add	r0, r1
 pop {r2}            @ recover exponent
 8002bbe:	bc04      	pop	{r2}
 b packretns         @ pack result
 8002bc0:	e76f      	b.n	8002aa2 <packretns>

08002bc2 <qfp_fsqrt>:

.thumb_func
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 8002bc2:	b530      	push	{r4, r5, lr}
 bl unpackx
 8002bc4:	f7ff fe2f 	bl	8002826 <unpackx>
 movs r1,r0          @ -ve argument?
 8002bc8:	0001      	movs	r1, r0
 bmi 3f              @ return -Inf, -Inf
 8002bca:	d415      	bmi.n	8002bf8 <qfp_fsqrt+0x36>
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002bcc:	4924      	ldr	r1, [pc, #144]	; (8002c60 <qfp_fatan2+0x40>)
 bl mul0             @ Q29
 8002bce:	f7ff fe92 	bl	80028f6 <mul0>
 asrs r1,r2,#1       @ halve exponent
 8002bd2:	1051      	asrs	r1, r2, #1
 bcc 1f
 8002bd4:	d301      	bcc.n	8002bda <qfp_fsqrt+0x18>
 adds r1,#1          @ was odd: add 1 and shift mantissa
 8002bd6:	3101      	adds	r1, #1
 asrs r0,#1
 8002bd8:	1040      	asrs	r0, r0, #1
1:
 push {r1}           @ save exponent/2 for later
 8002bda:	b402      	push	{r1}
 mov r1,r0
 8002bdc:	4601      	mov	r1, r0
 ldr r3,=#0x0593C2B9 @ re-use constant
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <qfp_fatan2+0x40>)
 lsls r3,#2
 8002be0:	009b      	lsls	r3, r3, #2
 adds r0,r3          @ "a+1"
 8002be2:	18c0      	adds	r0, r0, r3
 subs r1,r3          @ "a-1"
 8002be4:	1ac9      	subs	r1, r1, r3
 movs r2,#0
 8002be6:	2200      	movs	r2, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002be8:	a32c      	add	r3, pc, #176	; (adr r3, 8002c9c <tab_ch>)
 mvns r4,r2          @ m=-1
 8002bea:	43d4      	mvns	r4, r2
 bl cordic_vec
 8002bec:	f7ff ff96 	bl	8002b1c <cordic_vec>
 mov r1,r2           @ keep ln result
 8002bf0:	4611      	mov	r1, r2
 pop {r2}            @ retrieve exponent/2
 8002bf2:	bc04      	pop	{r2}
2:
 movs r3,r2
 8002bf4:	0013      	movs	r3, r2
 b packretns         @ pack sqrt result
 8002bf6:	e754      	b.n	8002aa2 <packretns>

3:
 movs r2,#255
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 b 2b
 8002bfa:	e7fb      	b.n	8002bf4 <qfp_fsqrt+0x32>

08002bfc <qfp_fln>:

.thumb_func
qfp_fln:
 push {r4,r5,r14}
 8002bfc:	b530      	push	{r4, r5, lr}
 bl qfp_fsqrt            @ get unpacked ln in r1/r3; exponent has been halved
 8002bfe:	f7ff ffe0 	bl	8002bc2 <qfp_fsqrt>
 cmp r3,#70              @ ln(Inf)?
 8002c02:	2b46      	cmp	r3, #70	; 0x46
 bgt 2f                  @ return Inf
 8002c04:	dc0a      	bgt.n	8002c1c <qfp_fln+0x20>
 rsbs r3,#0
 8002c06:	425b      	negs	r3, r3
 cmp r3,#70
 8002c08:	2b46      	cmp	r3, #70	; 0x46
 bgt 1f                  @ ln(0)? return -Inf
 8002c0a:	dc06      	bgt.n	8002c1a <qfp_fln+0x1e>
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002c0c:	4815      	ldr	r0, [pc, #84]	; (8002c64 <qfp_fatan2+0x44>)
 muls r0,r3              @ contribution from negated, halved exponent
 8002c0e:	4358      	muls	r0, r3
 adds r1,#8              @ round result of ln
 8002c10:	3108      	adds	r1, #8
 asrs r1,#4              @ Q24
 8002c12:	1109      	asrs	r1, r1, #4
 subs r0,r1,r0           @ add in contribution from (negated) exponent
 8002c14:	1a08      	subs	r0, r1, r0
 movs r2,#5              @ pack expects Q29
 8002c16:	2205      	movs	r2, #5
 b packretns
 8002c18:	e743      	b.n	8002aa2 <packretns>
1:
 mvns r0,r0              @ make result -Inf
 8002c1a:	43c0      	mvns	r0, r0
2:
 movs r2,#255
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 b packretns
 8002c1e:	e740      	b.n	8002aa2 <packretns>

08002c20 <qfp_fatan2>:

.thumb_func
qfp_fatan2:
 push {r4,r5,r14}
 8002c20:	b530      	push	{r4, r5, lr}
 bl unpackxyalign        @ convert to fixed point (ensure common exponent, which is discarded)
 8002c22:	f7ff fe40 	bl	80028a6 <unpackxyalign>
 movs r2,#0              @ initial angle
 8002c26:	2200      	movs	r2, #0
 cmp r0,#0               @ x negative
 8002c28:	2800      	cmp	r0, #0
 bge 5f
 8002c2a:	da02      	bge.n	8002c32 <qfp_fatan2+0x12>
 rsbs r0,#0              @ rotate to 1st/4th quadrants
 8002c2c:	4240      	negs	r0, r0
 rsbs r1,#0
 8002c2e:	4249      	negs	r1, r1
 ldr r2,pi_q29           @ pi Q29
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <pi_q29>)
5:
 adr r3,tab_cc           @ circular coefficients
 8002c32:	a30d      	add	r3, pc, #52	; (adr r3, 8002c68 <pi_q29>)
 movs r4,#1              @ m=1
 8002c34:	2401      	movs	r4, #1
 bl cordic_vec           @ also produces magnitude (with scaling factor 1.646760119), which is discarded
 8002c36:	f7ff ff71 	bl	8002b1c <cordic_vec>
 mov r0,r2               @ result here is -pi/2..3pi/2 Q29
 8002c3a:	4610      	mov	r0, r2
 ldr r2,pi_q29           @ pi Q29
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <pi_q29>)
 adds r4,r0,r2           @ attempt to fix -3pi/2..-pi case
 8002c3e:	1884      	adds	r4, r0, r2
 bcs 6f                  @ -pi/2..0? leave result as is
 8002c40:	d202      	bcs.n	8002c48 <qfp_fatan2+0x28>
 subs r4,r0,r2           @ <pi? leave as is
 8002c42:	1a84      	subs	r4, r0, r2
 bmi 6f
 8002c44:	d400      	bmi.n	8002c48 <qfp_fatan2+0x28>
 subs r0,r4,r2           @ >pi: take off 2pi
 8002c46:	1aa0      	subs	r0, r4, r2
6:
 subs r0,#1              @ fiddle factor so atan2(0,1)==0
 8002c48:	3801      	subs	r0, #1
 movs r2,#0              @ exponent for pack
 8002c4a:	2200      	movs	r2, #0
 b packretns
 8002c4c:	e729      	b.n	8002aa2 <packretns>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002c50:	136e9db4 	.word	0x136e9db4
 ldr r2,=#5909       @ log_2(e) Q12
 8002c54:	00001715 	.word	0x00001715
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002c58:	162e42ff 	.word	0x162e42ff
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002c5c:	2c9e15ca 	.word	0x2c9e15ca
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002c60:	0593c2b9 	.word	0x0593c2b9
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002c64:	0162e430 	.word	0x0162e430

08002c68 <pi_q29>:
 8002c68:	6487ed51 	.word	0x6487ed51
 8002c6c:	3b58ce0c 	.word	0x3b58ce0c
 8002c70:	1f5b75f8 	.word	0x1f5b75f8
 8002c74:	0feadd4c 	.word	0x0feadd4c
 8002c78:	07fd56ec 	.word	0x07fd56ec
 8002c7c:	03ffaab8 	.word	0x03ffaab8
 8002c80:	01fff554 	.word	0x01fff554
 8002c84:	00fffeac 	.word	0x00fffeac
 8002c88:	007fffd4 	.word	0x007fffd4
 8002c8c:	003ffffc 	.word	0x003ffffc
 8002c90:	001ffffc 	.word	0x001ffffc
 8002c94:	00100000 	.word	0x00100000
 8002c98:	00080002 	.word	0x00080002

08002c9c <tab_ch>:
 8002c9c:	464fa9ec 	.word	0x464fa9ec
 8002ca0:	464fa9ed 	.word	0x464fa9ed
 8002ca4:	20b15df4 	.word	0x20b15df4
 8002ca8:	1015891c 	.word	0x1015891c
 8002cac:	0802ac44 	.word	0x0802ac44
 8002cb0:	0802ac45 	.word	0x0802ac45
 8002cb4:	04005564 	.word	0x04005564
 8002cb8:	02000aac 	.word	0x02000aac
 8002cbc:	01000154 	.word	0x01000154
 8002cc0:	0080002c 	.word	0x0080002c
 8002cc4:	00400004 	.word	0x00400004
 8002cc8:	00200004 	.word	0x00200004
 8002ccc:	00100000 	.word	0x00100000
 8002cd0:	00080000 	.word	0x00080000
 8002cd4:	00080003 	.word	0x00080003

08002cd8 <acos>:

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ACOS]++;
 8002cda:	4d2f      	ldr	r5, [pc, #188]	; (8002d98 <acos+0xc0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002cdc:	4602      	mov	r2, r0
    float_usage[USAGE_ACOS]++;
 8002cde:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
    if (isnan(x)) { return NAN; }
 8002ce2:	460b      	mov	r3, r1
    float_usage[USAGE_ACOS]++;
 8002ce4:	3401      	adds	r4, #1
 8002ce6:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
double acos(double x) {
 8002cea:	4606      	mov	r6, r0
 8002cec:	460f      	mov	r7, r1
    if (isnan(x)) { return NAN; }
 8002cee:	f000 f937 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8002cf2:	b998      	cbnz	r0, 8002d1c <acos+0x44>

    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f7ff fd02 	bl	8002700 <__aeabi_d2f>
 8002cfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d00:	4604      	mov	r4, r0
 8002d02:	f7ff fe0d 	bl	8002920 <qfp_fcmp>
 8002d06:	b910      	cbnz	r0, 8002d0e <acos+0x36>
 8002d08:	2000      	movs	r0, #0
 8002d0a:	2100      	movs	r1, #0
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8002d0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff fe04 	bl	8002920 <qfp_fcmp>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	dd02      	ble.n	8002d22 <acos+0x4a>
    if (isnan(x)) { return NAN; }
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	491f      	ldr	r1, [pc, #124]	; (8002d9c <acos+0xc4>)
}
 8002d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002d22:	491f      	ldr	r1, [pc, #124]	; (8002da0 <acos+0xc8>)
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fdfb 	bl	8002920 <qfp_fcmp>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	dbf6      	blt.n	8002d1c <acos+0x44>
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 8002d2e:	491c      	ldr	r1, [pc, #112]	; (8002da0 <acos+0xc8>)
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fdf5 	bl	8002920 <qfp_fcmp>
 8002d36:	b918      	cbnz	r0, 8002d40 <acos+0x68>
 8002d38:	a115      	add	r1, pc, #84	; (adr r1, 8002d90 <acos+0xb8>)
 8002d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
}
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            qfp_fsqrt_fast(
 8002d40:	4621      	mov	r1, r4
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff fdfa 	bl	800293c <qfp_fmul>
 8002d48:	4601      	mov	r1, r0
 8002d4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d4e:	f7ff fdc3 	bl	80028d8 <qfp_fsub>
 8002d52:	f7ff fe44 	bl	80029de <qfp_fsqrt_fast>
            qfp_fadd( 1.0f , x )
 8002d56:	4621      	mov	r1, r4
            qfp_fsqrt_fast(
 8002d58:	4606      	mov	r6, r0
            qfp_fadd( 1.0f , x )
 8002d5a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d5e:	f7ff fdbe 	bl	80028de <qfp_fadd>
        atan2(
 8002d62:	f7ff fc75 	bl	8002650 <__aeabi_f2d>
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	f7ff fc70 	bl	8002650 <__aeabi_f2d>
 8002d70:	4622      	mov	r2, r4
 8002d72:	462b      	mov	r3, r5
 8002d74:	f000 fa0e 	bl	8003194 <atan2>
    return qfp_fmul(
 8002d78:	f7ff fcc2 	bl	8002700 <__aeabi_d2f>
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d82:	f7ff fddb 	bl	800293c <qfp_fmul>
 8002d86:	f7ff fc63 	bl	8002650 <__aeabi_f2d>
}
 8002d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8c:	f3af 8000 	nop.w
 8002d90:	54442d18 	.word	0x54442d18
 8002d94:	400921fb 	.word	0x400921fb
 8002d98:	20000640 	.word	0x20000640
 8002d9c:	7ff80000 	.word	0x7ff80000
 8002da0:	bf800000 	.word	0xbf800000

08002da4 <__wrap___aeabi_ddiv>:
double __wrap___aeabi_ddiv(double n, double d) { 
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DDIV]++;
 8002da6:	4d0a      	ldr	r5, [pc, #40]	; (8002dd0 <__wrap___aeabi_ddiv+0x2c>)
double __wrap___aeabi_ddiv(double n, double d) { 
 8002da8:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DDIV]++;
 8002daa:	786c      	ldrb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002dac:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DDIV]++;
 8002dae:	3401      	adds	r4, #1
double __wrap___aeabi_ddiv(double n, double d) { 
 8002db0:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DDIV]++;
 8002db2:	706c      	strb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7ff fca3 	bl	8002700 <__aeabi_d2f>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4639      	mov	r1, r7
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7ff fc9e 	bl	8002700 <__aeabi_d2f>
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	f7ff fde2 	bl	800298e <qfp_fdiv_fast>
 8002dca:	f7ff fc41 	bl	8002650 <__aeabi_f2d>
}
 8002dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd0:	20000640 	.word	0x20000640

08002dd4 <__wrap___aeabi_dmul>:
double __wrap___aeabi_dmul(double x, double y) { 
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DMUL]++;
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	; (8002e00 <__wrap___aeabi_dmul+0x2c>)
double __wrap___aeabi_dmul(double x, double y) { 
 8002dd8:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DMUL]++;
 8002dda:	78ac      	ldrb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8002ddc:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DMUL]++;
 8002dde:	3401      	adds	r4, #1
double __wrap___aeabi_dmul(double x, double y) { 
 8002de0:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DMUL]++;
 8002de2:	70ac      	strb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7ff fc8b 	bl	8002700 <__aeabi_d2f>
 8002dea:	4604      	mov	r4, r0
 8002dec:	4639      	mov	r1, r7
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7ff fc86 	bl	8002700 <__aeabi_d2f>
 8002df4:	4621      	mov	r1, r4
 8002df6:	f7ff fda1 	bl	800293c <qfp_fmul>
 8002dfa:	f7ff fc29 	bl	8002650 <__aeabi_f2d>
}
 8002dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e00:	20000640 	.word	0x20000640

08002e04 <__wrap___aeabi_dadd>:
double __wrap___aeabi_dadd(double a, double b) {
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DADD]++;
 8002e06:	4d0a      	ldr	r5, [pc, #40]	; (8002e30 <__wrap___aeabi_dadd+0x2c>)
double __wrap___aeabi_dadd(double a, double b) {
 8002e08:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DADD]++;
 8002e0a:	78ec      	ldrb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8002e0c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DADD]++;
 8002e0e:	3401      	adds	r4, #1
double __wrap___aeabi_dadd(double a, double b) {
 8002e10:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DADD]++;
 8002e12:	70ec      	strb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7ff fc73 	bl	8002700 <__aeabi_d2f>
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	4639      	mov	r1, r7
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f7ff fc6e 	bl	8002700 <__aeabi_d2f>
 8002e24:	4621      	mov	r1, r4
 8002e26:	f7ff fd5a 	bl	80028de <qfp_fadd>
 8002e2a:	f7ff fc11 	bl	8002650 <__aeabi_f2d>
}
 8002e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e30:	20000640 	.word	0x20000640

08002e34 <__wrap___aeabi_dsub>:
double __wrap___aeabi_dsub(double a, double b) {
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DSUB]++;
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__wrap___aeabi_dsub+0x2c>)
double __wrap___aeabi_dsub(double a, double b) {
 8002e38:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DSUB]++;
 8002e3a:	792c      	ldrb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8002e3c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DSUB]++;
 8002e3e:	3401      	adds	r4, #1
double __wrap___aeabi_dsub(double a, double b) {
 8002e40:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DSUB]++;
 8002e42:	712c      	strb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7ff fc5b 	bl	8002700 <__aeabi_d2f>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4639      	mov	r1, r7
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7ff fc56 	bl	8002700 <__aeabi_d2f>
 8002e54:	4621      	mov	r1, r4
 8002e56:	f7ff fd3f 	bl	80028d8 <qfp_fsub>
 8002e5a:	f7ff fbf9 	bl	8002650 <__aeabi_f2d>
}
 8002e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e60:	20000640 	.word	0x20000640

08002e64 <__wrap___aeabi_dcmpeq>:
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002e66:	4d0b      	ldr	r5, [pc, #44]	; (8002e94 <__wrap___aeabi_dcmpeq+0x30>)
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002e68:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002e6a:	796c      	ldrb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002e6c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002e6e:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002e70:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002e72:	716c      	strb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7ff fc43 	bl	8002700 <__aeabi_d2f>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4639      	mov	r1, r7
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f7ff fc3e 	bl	8002700 <__aeabi_d2f>
 8002e84:	4621      	mov	r1, r4
 8002e86:	f7ff fd4b 	bl	8002920 <qfp_fcmp>
}
 8002e8a:	fab0 f080 	clz	r0, r0
 8002e8e:	0940      	lsrs	r0, r0, #5
 8002e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000640 	.word	0x20000640

08002e98 <__wrap___aeabi_dcmplt>:
int __wrap___aeabi_dcmplt(double x, double y) {
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002e9a:	4d0a      	ldr	r5, [pc, #40]	; (8002ec4 <__wrap___aeabi_dcmplt+0x2c>)
int __wrap___aeabi_dcmplt(double x, double y) {
 8002e9c:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002e9e:	79ac      	ldrb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002ea0:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002ea2:	3401      	adds	r4, #1
int __wrap___aeabi_dcmplt(double x, double y) {
 8002ea4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLT]++;
 8002ea6:	71ac      	strb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f7ff fc29 	bl	8002700 <__aeabi_d2f>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	f7ff fc24 	bl	8002700 <__aeabi_d2f>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f7ff fd31 	bl	8002920 <qfp_fcmp>
}
 8002ebe:	0fc0      	lsrs	r0, r0, #31
 8002ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000640 	.word	0x20000640

08002ec8 <__wrap___aeabi_dcmple>:
int __wrap___aeabi_dcmple(double x, double y) { 
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002eca:	4d0b      	ldr	r5, [pc, #44]	; (8002ef8 <__wrap___aeabi_dcmple+0x30>)
int __wrap___aeabi_dcmple(double x, double y) { 
 8002ecc:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002ece:	79ec      	ldrb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002ed0:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002ed2:	3401      	adds	r4, #1
int __wrap___aeabi_dcmple(double x, double y) { 
 8002ed4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLE]++;
 8002ed6:	71ec      	strb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7ff fc11 	bl	8002700 <__aeabi_d2f>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4639      	mov	r1, r7
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff fc0c 	bl	8002700 <__aeabi_d2f>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	f7ff fd19 	bl	8002920 <qfp_fcmp>
}
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	bfcc      	ite	gt
 8002ef2:	2000      	movgt	r0, #0
 8002ef4:	2001      	movle	r0, #1
 8002ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef8:	20000640 	.word	0x20000640

08002efc <__wrap___aeabi_dcmpge>:
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002efe:	4d0a      	ldr	r5, [pc, #40]	; (8002f28 <__wrap___aeabi_dcmpge+0x2c>)
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002f00:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f02:	7a2c      	ldrb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f04:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f06:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002f08:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002f0a:	722c      	strb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fbf7 	bl	8002700 <__aeabi_d2f>
 8002f12:	4604      	mov	r4, r0
 8002f14:	4639      	mov	r1, r7
 8002f16:	4630      	mov	r0, r6
 8002f18:	f7ff fbf2 	bl	8002700 <__aeabi_d2f>
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f7ff fcff 	bl	8002920 <qfp_fcmp>
}
 8002f22:	43c0      	mvns	r0, r0
 8002f24:	0fc0      	lsrs	r0, r0, #31
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f28:	20000640 	.word	0x20000640

08002f2c <__wrap___aeabi_dcmpgt>:
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f2e:	4d0b      	ldr	r5, [pc, #44]	; (8002f5c <__wrap___aeabi_dcmpgt+0x30>)
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002f30:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f32:	7a6c      	ldrb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002f34:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f36:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002f38:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002f3a:	726c      	strb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7ff fbdf 	bl	8002700 <__aeabi_d2f>
 8002f42:	4604      	mov	r4, r0
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
 8002f48:	f7ff fbda 	bl	8002700 <__aeabi_d2f>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	f7ff fce7 	bl	8002920 <qfp_fcmp>
}
 8002f52:	2800      	cmp	r0, #0
 8002f54:	bfd4      	ite	le
 8002f56:	2000      	movle	r0, #0
 8002f58:	2001      	movgt	r0, #1
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	20000640 	.word	0x20000640

08002f60 <__wrap___aeabi_dcmpun>:
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002f62:	4d0b      	ldr	r5, [pc, #44]	; (8002f90 <__wrap___aeabi_dcmpun+0x30>)
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002f64:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002f66:	7aac      	ldrb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002f68:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002f6a:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002f6c:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002f6e:	72ac      	strb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7ff fbc5 	bl	8002700 <__aeabi_d2f>
 8002f76:	4604      	mov	r4, r0
 8002f78:	4639      	mov	r1, r7
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f7ff fbc0 	bl	8002700 <__aeabi_d2f>
 8002f80:	4621      	mov	r1, r4
 8002f82:	f7ff fccd 	bl	8002920 <qfp_fcmp>
}
 8002f86:	3000      	adds	r0, #0
 8002f88:	bf18      	it	ne
 8002f8a:	2001      	movne	r0, #1
 8002f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000640 	.word	0x20000640

08002f94 <__wrap___aeabi_d2iz>:
int __wrap___aeabi_d2iz(double x) { 
 8002f94:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2IZ]++;
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <__wrap___aeabi_d2iz+0x28>)
 8002f98:	7bd3      	ldrb	r3, [r2, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73d3      	strb	r3, [r2, #15]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8002f9e:	f7ff fbaf 	bl	8002700 <__aeabi_d2f>
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	f7ff fcbb 	bl	8002920 <qfp_fcmp>
 8002faa:	b900      	cbnz	r0, 8002fae <__wrap___aeabi_d2iz+0x1a>
}
 8002fac:	bd10      	pop	{r4, pc}
    int xfloored = qfp_float2int(x);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fd50 	bl	8002a54 <qfp_float2int>
    if (xfloored < 0) { return xfloored + 1; }
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	bfb8      	it	lt
 8002fb8:	3001      	addlt	r0, #1
}
 8002fba:	bd10      	pop	{r4, pc}
 8002fbc:	20000640 	.word	0x20000640

08002fc0 <__wrap___aeabi_d2uiz>:
unsigned __wrap___aeabi_d2uiz(double x) { 
 8002fc0:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2UIZ]++;
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <__wrap___aeabi_d2uiz+0x34>)
 8002fc4:	7c13      	ldrb	r3, [r2, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	7413      	strb	r3, [r2, #16]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8002fca:	f7ff fb99 	bl	8002700 <__aeabi_d2f>
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	f7ff fca5 	bl	8002920 <qfp_fcmp>
 8002fd6:	b908      	cbnz	r0, 8002fdc <__wrap___aeabi_d2uiz+0x1c>
}
 8002fd8:	2000      	movs	r0, #0
 8002fda:	bd10      	pop	{r4, pc}
    if (qfp_fcmp(x, 0) < 0) { return 0; }
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff fc9e 	bl	8002920 <qfp_fcmp>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	dbf7      	blt.n	8002fd8 <__wrap___aeabi_d2uiz+0x18>
    return qfp_float2uint(x); 
 8002fe8:	4620      	mov	r0, r4
}
 8002fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return qfp_float2uint(x); 
 8002fee:	f7ff bd46 	b.w	8002a7e <qfp_float2uint>
 8002ff2:	bf00      	nop
 8002ff4:	20000640 	.word	0x20000640

08002ff8 <sqrt>:
double sqrt(double x) { 
 8002ff8:	b508      	push	{r3, lr}
    float_usage[USAGE_SQRT]++;
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <sqrt+0x18>)
 8002ffc:	7d53      	ldrb	r3, [r2, #21]
 8002ffe:	3301      	adds	r3, #1
 8003000:	7553      	strb	r3, [r2, #21]
    return qfp_fsqrt_fast(x); 
 8003002:	f7ff fb7d 	bl	8002700 <__aeabi_d2f>
 8003006:	f7ff fcea 	bl	80029de <qfp_fsqrt_fast>
 800300a:	f7ff fb21 	bl	8002650 <__aeabi_f2d>
}
 800300e:	bd08      	pop	{r3, pc}
 8003010:	20000640 	.word	0x20000640

08003014 <log>:
double log(double x) { 
 8003014:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG]++;
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <log+0x18>)
 8003018:	7d93      	ldrb	r3, [r2, #22]
 800301a:	3301      	adds	r3, #1
 800301c:	7593      	strb	r3, [r2, #22]
    return qfp_fln(x); 
 800301e:	f7ff fb6f 	bl	8002700 <__aeabi_d2f>
 8003022:	f7ff fdeb 	bl	8002bfc <qfp_fln>
 8003026:	f7ff fb13 	bl	8002650 <__aeabi_f2d>
}
 800302a:	bd08      	pop	{r3, pc}
 800302c:	20000640 	.word	0x20000640

08003030 <exp>:
double exp(double x) { 
 8003030:	b508      	push	{r3, lr}
    float_usage[USAGE_EXP]++;
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <exp+0x18>)
 8003034:	7dd3      	ldrb	r3, [r2, #23]
 8003036:	3301      	adds	r3, #1
 8003038:	75d3      	strb	r3, [r2, #23]
    return qfp_fexp(x); 
 800303a:	f7ff fb61 	bl	8002700 <__aeabi_d2f>
 800303e:	f7ff fda8 	bl	8002b92 <qfp_fexp>
 8003042:	f7ff fb05 	bl	8002650 <__aeabi_f2d>
}
 8003046:	bd08      	pop	{r3, pc}
 8003048:	20000640 	.word	0x20000640

0800304c <log2>:
double log2(double x) { 
 800304c:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG2]++;
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <log2+0x20>)
 8003050:	7e13      	ldrb	r3, [r2, #24]
 8003052:	3301      	adds	r3, #1
 8003054:	7613      	strb	r3, [r2, #24]
    return qfp_fmul(
 8003056:	f7ff fb53 	bl	8002700 <__aeabi_d2f>
 800305a:	f7ff fdcf 	bl	8002bfc <qfp_fln>
 800305e:	4904      	ldr	r1, [pc, #16]	; (8003070 <log2+0x24>)
 8003060:	f7ff fc6c 	bl	800293c <qfp_fmul>
 8003064:	f7ff faf4 	bl	8002650 <__aeabi_f2d>
}
 8003068:	bd08      	pop	{r3, pc}
 800306a:	bf00      	nop
 800306c:	20000640 	.word	0x20000640
 8003070:	3fb8aa3b 	.word	0x3fb8aa3b

08003074 <log10>:
double log10(double x) { 
 8003074:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG10]++;
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <log10+0x20>)
 8003078:	7e53      	ldrb	r3, [r2, #25]
 800307a:	3301      	adds	r3, #1
 800307c:	7653      	strb	r3, [r2, #25]
    return qfp_fmul(
 800307e:	f7ff fb3f 	bl	8002700 <__aeabi_d2f>
 8003082:	f7ff fdbb 	bl	8002bfc <qfp_fln>
 8003086:	4904      	ldr	r1, [pc, #16]	; (8003098 <log10+0x24>)
 8003088:	f7ff fc58 	bl	800293c <qfp_fmul>
 800308c:	f7ff fae0 	bl	8002650 <__aeabi_f2d>
}
 8003090:	bd08      	pop	{r3, pc}
 8003092:	bf00      	nop
 8003094:	20000640 	.word	0x20000640
 8003098:	3ede5bd9 	.word	0x3ede5bd9

0800309c <pow>:
double pow(double b, double x) { 
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_POW]++;
 800309e:	4c21      	ldr	r4, [pc, #132]	; (8003124 <pow+0x88>)
double pow(double b, double x) { 
 80030a0:	461f      	mov	r7, r3
    float_usage[USAGE_POW]++;
 80030a2:	7ea3      	ldrb	r3, [r4, #26]
double pow(double b, double x) { 
 80030a4:	4616      	mov	r6, r2
    float_usage[USAGE_POW]++;
 80030a6:	3301      	adds	r3, #1
 80030a8:	76a3      	strb	r3, [r4, #26]
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 80030aa:	f7ff fb29 	bl	8002700 <__aeabi_d2f>
 80030ae:	2100      	movs	r1, #0
 80030b0:	4604      	mov	r4, r0
 80030b2:	f7ff fc35 	bl	8002920 <qfp_fcmp>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	db10      	blt.n	80030dc <pow+0x40>
    return qfp_fexp(
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fd9e 	bl	8002bfc <qfp_fln>
 80030c0:	4639      	mov	r1, r7
 80030c2:	4604      	mov	r4, r0
 80030c4:	4630      	mov	r0, r6
 80030c6:	f7ff fb1b 	bl	8002700 <__aeabi_d2f>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff fc35 	bl	800293c <qfp_fmul>
 80030d2:	f7ff fd5e 	bl	8002b92 <qfp_fexp>
 80030d6:	f7ff fabb 	bl	8002650 <__aeabi_f2d>
}
 80030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 80030dc:	4639      	mov	r1, r7
 80030de:	4630      	mov	r0, r6
 80030e0:	f7ff fb0e 	bl	8002700 <__aeabi_d2f>
 80030e4:	2100      	movs	r1, #0
 80030e6:	4605      	mov	r5, r0
 80030e8:	f7ff fc1a 	bl	8002920 <qfp_fcmp>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	dae4      	bge.n	80030ba <pow+0x1e>
        int xfloored = qfp_float2int(-x);
 80030f0:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 80030f4:	f7ff fcae 	bl	8002a54 <qfp_float2int>
        if (xfloored % 2 == 1) {
 80030f8:	2800      	cmp	r0, #0
 80030fa:	f000 0001 	and.w	r0, r0, #1
 80030fe:	bfb8      	it	lt
 8003100:	4240      	neglt	r0, r0
 8003102:	2801      	cmp	r0, #1
 8003104:	d1d9      	bne.n	80030ba <pow+0x1e>
            return -qfp_fexp(
 8003106:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 800310a:	f7ff fd77 	bl	8002bfc <qfp_fln>
 800310e:	4629      	mov	r1, r5
 8003110:	f7ff fc14 	bl	800293c <qfp_fmul>
 8003114:	f7ff fd3d 	bl	8002b92 <qfp_fexp>
 8003118:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800311c:	f7ff fa98 	bl	8002650 <__aeabi_f2d>
}
 8003120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003122:	bf00      	nop
 8003124:	20000640 	.word	0x20000640

08003128 <sin>:
double sin(double x) { 
 8003128:	b508      	push	{r3, lr}
    float_usage[USAGE_SIN]++;
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <sin+0x18>)
 800312c:	7f13      	ldrb	r3, [r2, #28]
 800312e:	3301      	adds	r3, #1
 8003130:	7713      	strb	r3, [r2, #28]
    return qfp_fsin(x); 
 8003132:	f7ff fae5 	bl	8002700 <__aeabi_d2f>
 8003136:	f7ff fd02 	bl	8002b3e <qfp_fsin>
 800313a:	f7ff fa89 	bl	8002650 <__aeabi_f2d>
}
 800313e:	bd08      	pop	{r3, pc}
 8003140:	20000640 	.word	0x20000640

08003144 <cos>:
double cos(double x) { 
 8003144:	b510      	push	{r4, lr}
    float_usage[USAGE_COS]++;
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <cos+0x2c>)
 8003148:	7f53      	ldrb	r3, [r2, #29]
 800314a:	3301      	adds	r3, #1
 800314c:	7753      	strb	r3, [r2, #29]
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 800314e:	f7ff fad7 	bl	8002700 <__aeabi_d2f>
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <cos+0x30>)
 8003154:	4604      	mov	r4, r0
 8003156:	f7ff fbe3 	bl	8002920 <qfp_fcmp>
 800315a:	b910      	cbnz	r0, 8003162 <cos+0x1e>
 800315c:	2000      	movs	r0, #0
 800315e:	2100      	movs	r1, #0
}
 8003160:	bd10      	pop	{r4, pc}
    return qfp_fcos(x); 
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff fd0c 	bl	8002b80 <qfp_fcos>
 8003168:	f7ff fa72 	bl	8002650 <__aeabi_f2d>
}
 800316c:	bd10      	pop	{r4, pc}
 800316e:	bf00      	nop
 8003170:	20000640 	.word	0x20000640
 8003174:	3fc90fdb 	.word	0x3fc90fdb

08003178 <tan>:
double tan(double x) { 
 8003178:	b508      	push	{r3, lr}
    float_usage[USAGE_TAN]++;
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <tan+0x18>)
 800317c:	7f93      	ldrb	r3, [r2, #30]
 800317e:	3301      	adds	r3, #1
 8003180:	7793      	strb	r3, [r2, #30]
    return qfp_ftan(x); 
 8003182:	f7ff fabd 	bl	8002700 <__aeabi_d2f>
 8003186:	f7ff fd00 	bl	8002b8a <qfp_ftan>
 800318a:	f7ff fa61 	bl	8002650 <__aeabi_f2d>
}
 800318e:	bd08      	pop	{r3, pc}
 8003190:	20000640 	.word	0x20000640

08003194 <atan2>:
double atan2(double y, double x) { 
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATAN2]++;
 8003196:	4c13      	ldr	r4, [pc, #76]	; (80031e4 <atan2+0x50>)
double atan2(double y, double x) { 
 8003198:	461f      	mov	r7, r3
    float_usage[USAGE_ATAN2]++;
 800319a:	7fe3      	ldrb	r3, [r4, #31]
double atan2(double y, double x) { 
 800319c:	4616      	mov	r6, r2
    float_usage[USAGE_ATAN2]++;
 800319e:	3301      	adds	r3, #1
 80031a0:	77e3      	strb	r3, [r4, #31]
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 80031a2:	f7ff faad 	bl	8002700 <__aeabi_d2f>
 80031a6:	2100      	movs	r1, #0
 80031a8:	4604      	mov	r4, r0
 80031aa:	f7ff fbb9 	bl	8002920 <qfp_fcmp>
 80031ae:	b158      	cbz	r0, 80031c8 <atan2+0x34>
 80031b0:	4630      	mov	r0, r6
 80031b2:	4639      	mov	r1, r7
 80031b4:	f7ff faa4 	bl	8002700 <__aeabi_d2f>
 80031b8:	4605      	mov	r5, r0
    return qfp_fatan2( y, x ); 
 80031ba:	4629      	mov	r1, r5
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff fd2f 	bl	8002c20 <qfp_fatan2>
 80031c2:	f7ff fa45 	bl	8002650 <__aeabi_f2d>
}
 80031c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 80031c8:	4639      	mov	r1, r7
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7ff fa98 	bl	8002700 <__aeabi_d2f>
 80031d0:	2100      	movs	r1, #0
 80031d2:	4605      	mov	r5, r0
 80031d4:	f7ff fba4 	bl	8002920 <qfp_fcmp>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d1ee      	bne.n	80031ba <atan2+0x26>
 80031dc:	2000      	movs	r0, #0
 80031de:	2100      	movs	r1, #0
}
 80031e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000640 	.word	0x20000640

080031e8 <atan>:
double atan(double y_over_x) {
 80031e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_ATAN]++;
 80031ec:	4f24      	ldr	r7, [pc, #144]	; (8003280 <atan+0x98>)
    if (isnan(y_over_x)) { return NAN; }
 80031ee:	4602      	mov	r2, r0
    float_usage[USAGE_ATAN]++;
 80031f0:	f897 6020 	ldrb.w	r6, [r7, #32]
    if (isnan(y_over_x)) { return NAN; }
 80031f4:	460b      	mov	r3, r1
    float_usage[USAGE_ATAN]++;
 80031f6:	3601      	adds	r6, #1
 80031f8:	f887 6020 	strb.w	r6, [r7, #32]
double atan(double y_over_x) {
 80031fc:	4604      	mov	r4, r0
 80031fe:	460d      	mov	r5, r1
    if (isnan(y_over_x)) { return NAN; }
 8003200:	f7ff feae 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003204:	bb70      	cbnz	r0, 8003264 <atan+0x7c>
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }
 8003206:	4629      	mov	r1, r5
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fa79 	bl	8002700 <__aeabi_d2f>
 800320e:	2100      	movs	r1, #0
 8003210:	4607      	mov	r7, r0
 8003212:	f7ff fb85 	bl	8002920 <qfp_fcmp>
 8003216:	b308      	cbz	r0, 800325c <atan+0x74>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8003218:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800321c:	4620      	mov	r0, r4
 800321e:	4631      	mov	r1, r6
 8003220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <atan+0x9c>)
 8003226:	f7ff fe9b 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800322a:	b938      	cbnz	r0, 800323c <atan+0x54>
 800322c:	4620      	mov	r0, r4
 800322e:	4631      	mov	r1, r6
 8003230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <atan+0x9c>)
 8003236:	f7ff fe47 	bl	8002ec8 <__wrap___aeabi_dcmple>
 800323a:	b138      	cbz	r0, 800324c <atan+0x64>
    return atan2( y_over_x, 1 ); 
 800323c:	4620      	mov	r0, r4
 800323e:	4629      	mov	r1, r5
}
 8003240:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return atan2( y_over_x, 1 ); 
 8003244:	2200      	movs	r2, #0
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <atan+0xa0>)
 8003248:	f7ff bfa4 	b.w	8003194 <atan2>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 800324c:	2100      	movs	r1, #0
 800324e:	4638      	mov	r0, r7
 8003250:	f7ff fb66 	bl	8002920 <qfp_fcmp>
 8003254:	2800      	cmp	r0, #0
 8003256:	dd0b      	ble.n	8003270 <atan+0x88>
 8003258:	4c0c      	ldr	r4, [pc, #48]	; (800328c <atan+0xa4>)
 800325a:	4d0d      	ldr	r5, [pc, #52]	; (8003290 <atan+0xa8>)
}
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isnan(y_over_x)) { return NAN; }
 8003264:	2400      	movs	r4, #0
 8003266:	4d0b      	ldr	r5, [pc, #44]	; (8003294 <atan+0xac>)
}
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }
 8003270:	4638      	mov	r0, r7
 8003272:	2100      	movs	r1, #0
 8003274:	f7ff fb54 	bl	8002920 <qfp_fcmp>
 8003278:	2800      	cmp	r0, #0
 800327a:	dadf      	bge.n	800323c <atan+0x54>
 800327c:	e7ec      	b.n	8003258 <atan+0x70>
 800327e:	bf00      	nop
 8003280:	20000640 	.word	0x20000640
 8003284:	7fefffff 	.word	0x7fefffff
 8003288:	3ff00000 	.word	0x3ff00000
 800328c:	54442d18 	.word	0x54442d18
 8003290:	3ff921fb 	.word	0x3ff921fb
 8003294:	7ff80000 	.word	0x7ff80000

08003298 <asin>:
double asin(double x) { 
 8003298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float_usage[USAGE_ASIN]++;
 800329c:	4f20      	ldr	r7, [pc, #128]	; (8003320 <asin+0x88>)
    if (isnan(x)) { return NAN; }
 800329e:	4602      	mov	r2, r0
    float_usage[USAGE_ASIN]++;
 80032a0:	f897 6021 	ldrb.w	r6, [r7, #33]	; 0x21
    if (isnan(x)) { return NAN; }
 80032a4:	460b      	mov	r3, r1
    float_usage[USAGE_ASIN]++;
 80032a6:	3601      	adds	r6, #1
 80032a8:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
double asin(double x) { 
 80032ac:	4604      	mov	r4, r0
 80032ae:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80032b0:	f7ff fe56 	bl	8002f60 <__wrap___aeabi_dcmpun>
 80032b4:	b998      	cbnz	r0, 80032de <asin+0x46>
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80032b6:	4629      	mov	r1, r5
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff fa21 	bl	8002700 <__aeabi_d2f>
 80032be:	2100      	movs	r1, #0
 80032c0:	4606      	mov	r6, r0
 80032c2:	f7ff fb2d 	bl	8002920 <qfp_fcmp>
 80032c6:	b918      	cbnz	r0, 80032d0 <asin+0x38>
}
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 80032d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7ff fb23 	bl	8002920 <qfp_fcmp>
 80032da:	2800      	cmp	r0, #0
 80032dc:	dd05      	ble.n	80032ea <asin+0x52>
    if (isnan(x)) { return NAN; }
 80032de:	2400      	movs	r4, #0
 80032e0:	4d10      	ldr	r5, [pc, #64]	; (8003324 <asin+0x8c>)
}
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 80032ea:	490f      	ldr	r1, [pc, #60]	; (8003328 <asin+0x90>)
 80032ec:	4630      	mov	r0, r6
 80032ee:	f7ff fb17 	bl	8002920 <qfp_fcmp>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	dbf3      	blt.n	80032de <asin+0x46>
        qfp_fsqrt_fast(
 80032f6:	4631      	mov	r1, r6
 80032f8:	4630      	mov	r0, r6
 80032fa:	f7ff fb1f 	bl	800293c <qfp_fmul>
 80032fe:	4601      	mov	r1, r0
 8003300:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003304:	f7ff fae8 	bl	80028d8 <qfp_fsub>
 8003308:	f7ff fb69 	bl	80029de <qfp_fsqrt_fast>
    return atan2(
 800330c:	f7ff f9a0 	bl	8002650 <__aeabi_f2d>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
}
 8003318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return atan2(
 800331c:	f7ff bf3a 	b.w	8003194 <atan2>
 8003320:	20000640 	.word	0x20000640
 8003324:	7ff80000 	.word	0x7ff80000
 8003328:	bf800000 	.word	0xbf800000

0800332c <sinh>:

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 800332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_SINH]++;
 8003330:	4f25      	ldr	r7, [pc, #148]	; (80033c8 <sinh+0x9c>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003332:	4602      	mov	r2, r0
    float_usage[USAGE_SINH]++;
 8003334:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
    if (isnan(x)) { return NAN; }
 8003338:	460b      	mov	r3, r1
    float_usage[USAGE_SINH]++;
 800333a:	3601      	adds	r6, #1
 800333c:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
double sinh(double x) {
 8003340:	4604      	mov	r4, r0
 8003342:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003344:	f7ff fe0c 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003348:	bbb8      	cbnz	r0, 80033ba <sinh+0x8e>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800334a:	4629      	mov	r1, r5
 800334c:	4620      	mov	r0, r4
 800334e:	f7ff f9d7 	bl	8002700 <__aeabi_d2f>
 8003352:	2100      	movs	r1, #0
 8003354:	4606      	mov	r6, r0
 8003356:	f7ff fae3 	bl	8002920 <qfp_fcmp>
 800335a:	b188      	cbz	r0, 8003380 <sinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 800335c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8003360:	4620      	mov	r0, r4
 8003362:	4639      	mov	r1, r7
 8003364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <sinh+0xa0>)
 800336a:	f7ff fdf9 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800336e:	b958      	cbnz	r0, 8003388 <sinh+0x5c>
 8003370:	4620      	mov	r0, r4
 8003372:	4639      	mov	r1, r7
 8003374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <sinh+0xa0>)
 800337a:	f7ff fda5 	bl	8002ec8 <__wrap___aeabi_dcmple>
 800337e:	b918      	cbnz	r0, 8003388 <sinh+0x5c>
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 8003388:	4630      	mov	r0, r6
 800338a:	f7ff fc02 	bl	8002b92 <qfp_fexp>
 800338e:	4604      	mov	r4, r0
 8003390:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8003394:	f7ff fbfd 	bl	8002b92 <qfp_fexp>
 8003398:	4601      	mov	r1, r0
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff fa9c 	bl	80028d8 <qfp_fsub>
 80033a0:	4601      	mov	r1, r0
 80033a2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80033a6:	f7ff fac9 	bl	800293c <qfp_fmul>
 80033aa:	f7ff f951 	bl	8002650 <__aeabi_f2d>
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
}
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80033ba:	2400      	movs	r4, #0
 80033bc:	4d04      	ldr	r5, [pc, #16]	; (80033d0 <sinh+0xa4>)
}
 80033be:	4620      	mov	r0, r4
 80033c0:	4629      	mov	r1, r5
 80033c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c6:	bf00      	nop
 80033c8:	20000640 	.word	0x20000640
 80033cc:	7fefffff 	.word	0x7fefffff
 80033d0:	7ff80000 	.word	0x7ff80000

080033d4 <cosh>:
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 80033d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_COSH]++;
 80033d8:	4f23      	ldr	r7, [pc, #140]	; (8003468 <cosh+0x94>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80033da:	4602      	mov	r2, r0
    float_usage[USAGE_COSH]++;
 80033dc:	f897 6024 	ldrb.w	r6, [r7, #36]	; 0x24
    if (isnan(x)) { return NAN; }
 80033e0:	460b      	mov	r3, r1
    float_usage[USAGE_COSH]++;
 80033e2:	3601      	adds	r6, #1
 80033e4:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
double cosh(double x) {
 80033e8:	4605      	mov	r5, r0
 80033ea:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 80033ec:	f7ff fdb8 	bl	8002f60 <__wrap___aeabi_dcmpun>
 80033f0:	bbb0      	cbnz	r0, 8003460 <cosh+0x8c>
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f7ff f983 	bl	8002700 <__aeabi_d2f>
 80033fa:	2100      	movs	r1, #0
 80033fc:	4606      	mov	r6, r0
 80033fe:	f7ff fa8f 	bl	8002920 <qfp_fcmp>
 8003402:	b1a8      	cbz	r0, 8003430 <cosh+0x5c>

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞
 8003404:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003408:	4628      	mov	r0, r5
 800340a:	4639      	mov	r1, r7
 800340c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <cosh+0x98>)
 8003412:	f7ff fda5 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003416:	b970      	cbnz	r0, 8003436 <cosh+0x62>
 8003418:	4628      	mov	r0, r5
 800341a:	4639      	mov	r1, r7
 800341c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <cosh+0x98>)
 8003422:	f7ff fd51 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8003426:	b930      	cbnz	r0, 8003436 <cosh+0x62>
 8003428:	4628      	mov	r0, r5
 800342a:	4621      	mov	r1, r4
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 800342c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 8003430:	490f      	ldr	r1, [pc, #60]	; (8003470 <cosh+0x9c>)
}
 8003432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 8003436:	4630      	mov	r0, r6
 8003438:	f7ff fbab 	bl	8002b92 <qfp_fexp>
 800343c:	4604      	mov	r4, r0
 800343e:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8003442:	f7ff fba6 	bl	8002b92 <qfp_fexp>
 8003446:	4601      	mov	r1, r0
 8003448:	4620      	mov	r0, r4
 800344a:	f7ff fa48 	bl	80028de <qfp_fadd>
 800344e:	4601      	mov	r1, r0
 8003450:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8003454:	f7ff fa72 	bl	800293c <qfp_fmul>
 8003458:	f7ff f8fa 	bl	8002650 <__aeabi_f2d>
}
 800345c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003460:	2000      	movs	r0, #0
 8003462:	4904      	ldr	r1, [pc, #16]	; (8003474 <cosh+0xa0>)
}
 8003464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003468:	20000640 	.word	0x20000640
 800346c:	7fefffff 	.word	0x7fefffff
 8003470:	3ff00000 	.word	0x3ff00000
 8003474:	7ff80000 	.word	0x7ff80000

08003478 <tanh>:
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 8003478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TANH]++;
 800347c:	4f28      	ldr	r7, [pc, #160]	; (8003520 <tanh+0xa8>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800347e:	4602      	mov	r2, r0
    float_usage[USAGE_TANH]++;
 8003480:	f897 6025 	ldrb.w	r6, [r7, #37]	; 0x25
    if (isnan(x)) { return NAN; }
 8003484:	460b      	mov	r3, r1
    float_usage[USAGE_TANH]++;
 8003486:	3601      	adds	r6, #1
 8003488:	f887 6025 	strb.w	r6, [r7, #37]	; 0x25
double tanh(double x) {
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003490:	f7ff fd66 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003494:	2800      	cmp	r0, #0
 8003496:	d13e      	bne.n	8003516 <tanh+0x9e>

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003498:	4629      	mov	r1, r5
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff f930 	bl	8002700 <__aeabi_d2f>
 80034a0:	2100      	movs	r1, #0
 80034a2:	4606      	mov	r6, r0
 80034a4:	f7ff fa3c 	bl	8002920 <qfp_fcmp>
 80034a8:	b1a8      	cbz	r0, 80034d6 <tanh+0x5e>

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 80034aa:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80034ae:	4620      	mov	r0, r4
 80034b0:	4629      	mov	r1, r5
 80034b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <tanh+0xac>)
 80034b8:	f7ff fd52 	bl	8002f60 <__wrap___aeabi_dcmpun>
 80034bc:	b978      	cbnz	r0, 80034de <tanh+0x66>
 80034be:	4620      	mov	r0, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <tanh+0xac>)
 80034c8:	f7ff fcfe 	bl	8002ec8 <__wrap___aeabi_dcmple>
 80034cc:	b938      	cbnz	r0, 80034de <tanh+0x66>
 80034ce:	4d16      	ldr	r5, [pc, #88]	; (8003528 <tanh+0xb0>)
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 80034d0:	4629      	mov	r1, r5
 80034d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80034d6:	4620      	mov	r0, r4
}
 80034d8:	4629      	mov	r1, r5
 80034da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float e2x = qfp_fexp(  //  e^{2x}
 80034de:	4631      	mov	r1, r6
 80034e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80034e4:	f7ff fa2a 	bl	800293c <qfp_fmul>
 80034e8:	f7ff fb53 	bl	8002b92 <qfp_fexp>
    return qfp_fdiv_fast(
 80034ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    float e2x = qfp_fexp(  //  e^{2x}
 80034f0:	4605      	mov	r5, r0
    return qfp_fdiv_fast(
 80034f2:	f7ff f9f1 	bl	80028d8 <qfp_fsub>
 80034f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80034fa:	4604      	mov	r4, r0
 80034fc:	4628      	mov	r0, r5
 80034fe:	f7ff f9ee 	bl	80028de <qfp_fadd>
 8003502:	4601      	mov	r1, r0
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff fa42 	bl	800298e <qfp_fdiv_fast>
 800350a:	f7ff f8a1 	bl	8002650 <__aeabi_f2d>
 800350e:	460d      	mov	r5, r1
}
 8003510:	4629      	mov	r1, r5
 8003512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003516:	4d05      	ldr	r5, [pc, #20]	; (800352c <tanh+0xb4>)
 8003518:	2000      	movs	r0, #0
}
 800351a:	4629      	mov	r1, r5
 800351c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003520:	20000640 	.word	0x20000640
 8003524:	7fefffff 	.word	0x7fefffff
 8003528:	3ff00000 	.word	0x3ff00000
 800352c:	7ff80000 	.word	0x7ff80000

08003530 <asinh>:

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8003530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ASINH]++;
 8003534:	4f24      	ldr	r7, [pc, #144]	; (80035c8 <asinh+0x98>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003536:	4602      	mov	r2, r0
    float_usage[USAGE_ASINH]++;
 8003538:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    if (isnan(x)) { return NAN; }
 800353c:	460b      	mov	r3, r1
    float_usage[USAGE_ASINH]++;
 800353e:	3601      	adds	r6, #1
 8003540:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
double asinh(double x) {
 8003544:	4604      	mov	r4, r0
 8003546:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003548:	f7ff fd0a 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800354c:	bbb0      	cbnz	r0, 80035bc <asinh+0x8c>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800354e:	4629      	mov	r1, r5
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff f8d5 	bl	8002700 <__aeabi_d2f>
 8003556:	2100      	movs	r1, #0
 8003558:	4607      	mov	r7, r0
 800355a:	f7ff f9e1 	bl	8002920 <qfp_fcmp>
 800355e:	b188      	cbz	r0, 8003584 <asinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8003560:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003564:	4620      	mov	r0, r4
 8003566:	4631      	mov	r1, r6
 8003568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800356c:	4b17      	ldr	r3, [pc, #92]	; (80035cc <asinh+0x9c>)
 800356e:	f7ff fcf7 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003572:	b958      	cbnz	r0, 800358c <asinh+0x5c>
 8003574:	4620      	mov	r0, r4
 8003576:	4631      	mov	r1, r6
 8003578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <asinh+0x9c>)
 800357e:	f7ff fca3 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8003582:	b918      	cbnz	r0, 800358c <asinh+0x5c>
                    1.0f
                )
            )
        )
    );
}
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 800358c:	4639      	mov	r1, r7
 800358e:	4638      	mov	r0, r7
 8003590:	f7ff f9d4 	bl	800293c <qfp_fmul>
 8003594:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003598:	f7ff f9a1 	bl	80028de <qfp_fadd>
 800359c:	f7ff fa1f 	bl	80029de <qfp_fsqrt_fast>
 80035a0:	4601      	mov	r1, r0
 80035a2:	4638      	mov	r0, r7
 80035a4:	f7ff f99b 	bl	80028de <qfp_fadd>
 80035a8:	f7ff fb28 	bl	8002bfc <qfp_fln>
 80035ac:	f7ff f850 	bl	8002650 <__aeabi_f2d>
 80035b0:	4604      	mov	r4, r0
 80035b2:	460d      	mov	r5, r1
}
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80035bc:	2400      	movs	r4, #0
 80035be:	4d04      	ldr	r5, [pc, #16]	; (80035d0 <asinh+0xa0>)
}
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c8:	20000640 	.word	0x20000640
 80035cc:	7fefffff 	.word	0x7fefffff
 80035d0:	7ff80000 	.word	0x7ff80000

080035d4 <acosh>:
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 80035d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ACOSH]++;
 80035d8:	4f26      	ldr	r7, [pc, #152]	; (8003674 <acosh+0xa0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80035da:	4602      	mov	r2, r0
    float_usage[USAGE_ACOSH]++;
 80035dc:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
    if (isnan(x)) { return NAN; }
 80035e0:	460b      	mov	r3, r1
    float_usage[USAGE_ACOSH]++;
 80035e2:	3601      	adds	r6, #1
 80035e4:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
double acosh(double x) {
 80035e8:	4605      	mov	r5, r0
 80035ea:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 80035ec:	f7ff fcb8 	bl	8002f60 <__wrap___aeabi_dcmpun>
 80035f0:	bb30      	cbnz	r0, 8003640 <acosh+0x6c>

    //  If the argument is less than 1, NaN is returned
    if (qfp_fcmp(x, 1) < 0) { return NAN; }
 80035f2:	4621      	mov	r1, r4
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7ff f883 	bl	8002700 <__aeabi_d2f>
 80035fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80035fe:	4606      	mov	r6, r0
 8003600:	f7ff f98e 	bl	8002920 <qfp_fcmp>
 8003604:	2800      	cmp	r0, #0
 8003606:	db1b      	blt.n	8003640 <acosh+0x6c>

    //  If the argument is 1, 0 is returned
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8003608:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800360c:	4630      	mov	r0, r6
 800360e:	f7ff f987 	bl	8002920 <qfp_fcmp>
 8003612:	b360      	cbz	r0, 800366e <acosh+0x9a>

    //  If the argument is +∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8003614:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003618:	4628      	mov	r0, r5
 800361a:	4639      	mov	r1, r7
 800361c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <acosh+0xa4>)
 8003622:	f7ff fc9d 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003626:	b978      	cbnz	r0, 8003648 <acosh+0x74>
 8003628:	4628      	mov	r0, r5
 800362a:	4639      	mov	r1, r7
 800362c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <acosh+0xa4>)
 8003632:	f7ff fc49 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8003636:	b938      	cbnz	r0, 8003648 <acosh+0x74>
 8003638:	4628      	mov	r0, r5
 800363a:	4621      	mov	r1, r4
                    1.0f
                )
            )
        )
    );
}
 800363c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003640:	2000      	movs	r0, #0
 8003642:	490e      	ldr	r1, [pc, #56]	; (800367c <acosh+0xa8>)
}
 8003644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 8003648:	4631      	mov	r1, r6
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff f976 	bl	800293c <qfp_fmul>
 8003650:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003654:	f7ff f940 	bl	80028d8 <qfp_fsub>
 8003658:	f7ff f9c1 	bl	80029de <qfp_fsqrt_fast>
 800365c:	4601      	mov	r1, r0
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff f93d 	bl	80028de <qfp_fadd>
 8003664:	f7ff faca 	bl	8002bfc <qfp_fln>
 8003668:	f7fe fff2 	bl	8002650 <__aeabi_f2d>
 800366c:	e7ea      	b.n	8003644 <acosh+0x70>
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 800366e:	4601      	mov	r1, r0
}
 8003670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003674:	20000640 	.word	0x20000640
 8003678:	7fefffff 	.word	0x7fefffff
 800367c:	7ff80000 	.word	0x7ff80000

08003680 <atanh>:
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATANH]++;
 8003682:	4f2c      	ldr	r7, [pc, #176]	; (8003734 <atanh+0xb4>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003684:	4602      	mov	r2, r0
    float_usage[USAGE_ATANH]++;
 8003686:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
    if (isnan(x)) { return NAN; }
 800368a:	460b      	mov	r3, r1
    float_usage[USAGE_ATANH]++;
 800368c:	3601      	adds	r6, #1
 800368e:	f887 6028 	strb.w	r6, [r7, #40]	; 0x28
double atanh(double x) {
 8003692:	4604      	mov	r4, r0
 8003694:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003696:	f7ff fc63 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800369a:	b9f0      	cbnz	r0, 80036da <atanh+0x5a>

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800369c:	4629      	mov	r1, r5
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff f82e 	bl	8002700 <__aeabi_d2f>
 80036a4:	2100      	movs	r1, #0
 80036a6:	4606      	mov	r6, r0
 80036a8:	f7ff f93a 	bl	8002920 <qfp_fcmp>
 80036ac:	b910      	cbnz	r0, 80036b4 <atanh+0x34>
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 80036b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036b8:	4630      	mov	r0, r6
 80036ba:	f7ff f931 	bl	8002920 <qfp_fcmp>
 80036be:	b920      	cbnz	r0, 80036ca <atanh+0x4a>
 80036c0:	2400      	movs	r4, #0
 80036c2:	4d1d      	ldr	r5, [pc, #116]	; (8003738 <atanh+0xb8>)
}
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 80036ca:	491c      	ldr	r1, [pc, #112]	; (800373c <atanh+0xbc>)
 80036cc:	4630      	mov	r0, r6
 80036ce:	f7ff f927 	bl	8002920 <qfp_fcmp>
 80036d2:	b938      	cbnz	r0, 80036e4 <atanh+0x64>
 80036d4:	2400      	movs	r4, #0
 80036d6:	4d1a      	ldr	r5, [pc, #104]	; (8003740 <atanh+0xc0>)
 80036d8:	e7e9      	b.n	80036ae <atanh+0x2e>
    if (isnan(x)) { return NAN; }
 80036da:	2400      	movs	r4, #0
 80036dc:	4d19      	ldr	r5, [pc, #100]	; (8003744 <atanh+0xc4>)
}
 80036de:	4620      	mov	r0, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
 80036e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036e8:	4630      	mov	r0, r6
 80036ea:	f7ff f919 	bl	8002920 <qfp_fcmp>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	dcf3      	bgt.n	80036da <atanh+0x5a>
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 80036f2:	4912      	ldr	r1, [pc, #72]	; (800373c <atanh+0xbc>)
 80036f4:	4630      	mov	r0, r6
 80036f6:	f7ff f913 	bl	8002920 <qfp_fcmp>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	dbed      	blt.n	80036da <atanh+0x5a>
    return qfp_fmul(
 80036fe:	4631      	mov	r1, r6
 8003700:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003704:	f7ff f8eb 	bl	80028de <qfp_fadd>
 8003708:	4631      	mov	r1, r6
 800370a:	4604      	mov	r4, r0
 800370c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003710:	f7ff f8e2 	bl	80028d8 <qfp_fsub>
 8003714:	4601      	mov	r1, r0
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff f939 	bl	800298e <qfp_fdiv_fast>
 800371c:	f7ff fa6e 	bl	8002bfc <qfp_fln>
 8003720:	4601      	mov	r1, r0
 8003722:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8003726:	f7ff f909 	bl	800293c <qfp_fmul>
 800372a:	f7fe ff91 	bl	8002650 <__aeabi_f2d>
 800372e:	4604      	mov	r4, r0
 8003730:	460d      	mov	r5, r1
 8003732:	e7bc      	b.n	80036ae <atanh+0x2e>
 8003734:	20000640 	.word	0x20000640
 8003738:	7ff00000 	.word	0x7ff00000
 800373c:	bf800000 	.word	0xbf800000
 8003740:	fff00000 	.word	0xfff00000
 8003744:	7ff80000 	.word	0x7ff80000

08003748 <trunc>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TRUNC]++;
 800374c:	4f1e      	ldr	r7, [pc, #120]	; (80037c8 <trunc+0x80>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800374e:	4602      	mov	r2, r0
    float_usage[USAGE_TRUNC]++;
 8003750:	f897 6029 	ldrb.w	r6, [r7, #41]	; 0x29
    if (isnan(x)) { return NAN; }
 8003754:	460b      	mov	r3, r1
    float_usage[USAGE_TRUNC]++;
 8003756:	3601      	adds	r6, #1
 8003758:	f887 6029 	strb.w	r6, [r7, #41]	; 0x29
double trunc(double x) { 
 800375c:	4604      	mov	r4, r0
 800375e:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003760:	f7ff fbfe 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003764:	bb68      	cbnz	r0, 80037c2 <trunc+0x7a>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8003766:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800376a:	4620      	mov	r0, r4
 800376c:	4631      	mov	r1, r6
 800376e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <trunc+0x84>)
 8003774:	f7ff fbf4 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003778:	b958      	cbnz	r0, 8003792 <trunc+0x4a>
 800377a:	4620      	mov	r0, r4
 800377c:	4631      	mov	r1, r6
 800377e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <trunc+0x84>)
 8003784:	f7ff fba0 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8003788:	b918      	cbnz	r0, 8003792 <trunc+0x4a>

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
    if (floored < 0) { return floored + 1; }
    return floored;
}
 800378a:	4620      	mov	r0, r4
 800378c:	4629      	mov	r1, r5
 800378e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003792:	4629      	mov	r1, r5
 8003794:	4620      	mov	r0, r4
 8003796:	f7fe ffb3 	bl	8002700 <__aeabi_d2f>
 800379a:	2100      	movs	r1, #0
 800379c:	4606      	mov	r6, r0
 800379e:	f7ff f8bf 	bl	8002920 <qfp_fcmp>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d0f1      	beq.n	800378a <trunc+0x42>
    int floored = qfp_float2int(x);
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7ff f954 	bl	8002a54 <qfp_float2int>
    if (floored < 0) { return floored + 1; }
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	bfb8      	it	lt
 80037b0:	1c58      	addlt	r0, r3, #1
    return floored;
 80037b2:	f7fe ff3b 	bl	800262c <__aeabi_i2d>
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
}
 80037ba:	4620      	mov	r0, r4
 80037bc:	4629      	mov	r1, r5
 80037be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80037c2:	2400      	movs	r4, #0
 80037c4:	4d02      	ldr	r5, [pc, #8]	; (80037d0 <trunc+0x88>)
 80037c6:	e7e0      	b.n	800378a <trunc+0x42>
 80037c8:	20000640 	.word	0x20000640
 80037cc:	7fefffff 	.word	0x7fefffff
 80037d0:	7ff80000 	.word	0x7ff80000

080037d4 <floor>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_FLOOR]++;
 80037d8:	4f1d      	ldr	r7, [pc, #116]	; (8003850 <floor+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80037da:	4602      	mov	r2, r0
    float_usage[USAGE_FLOOR]++;
 80037dc:	f897 602a 	ldrb.w	r6, [r7, #42]	; 0x2a
    if (isnan(x)) { return NAN; }
 80037e0:	460b      	mov	r3, r1
    float_usage[USAGE_FLOOR]++;
 80037e2:	3601      	adds	r6, #1
 80037e4:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
double floor(double x) { 
 80037e8:	4604      	mov	r4, r0
 80037ea:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80037ec:	f7ff fbb8 	bl	8002f60 <__wrap___aeabi_dcmpun>
 80037f0:	bb50      	cbnz	r0, 8003848 <floor+0x74>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 80037f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80037f6:	4620      	mov	r0, r4
 80037f8:	4631      	mov	r1, r6
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <floor+0x80>)
 8003800:	f7ff fbae 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003804:	b958      	cbnz	r0, 800381e <floor+0x4a>
 8003806:	4620      	mov	r0, r4
 8003808:	4631      	mov	r1, r6
 800380a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <floor+0x80>)
 8003810:	f7ff fb5a 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8003814:	b918      	cbnz	r0, 800381e <floor+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
    return floored;
}
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800381e:	4629      	mov	r1, r5
 8003820:	4620      	mov	r0, r4
 8003822:	f7fe ff6d 	bl	8002700 <__aeabi_d2f>
 8003826:	2100      	movs	r1, #0
 8003828:	4606      	mov	r6, r0
 800382a:	f7ff f879 	bl	8002920 <qfp_fcmp>
 800382e:	2800      	cmp	r0, #0
 8003830:	d0f1      	beq.n	8003816 <floor+0x42>
    int floored = qfp_float2int(x);
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff f90e 	bl	8002a54 <qfp_float2int>
    return floored;
 8003838:	f7fe fef8 	bl	800262c <__aeabi_i2d>
 800383c:	4604      	mov	r4, r0
 800383e:	460d      	mov	r5, r1
}
 8003840:	4620      	mov	r0, r4
 8003842:	4629      	mov	r1, r5
 8003844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003848:	2400      	movs	r4, #0
 800384a:	4d03      	ldr	r5, [pc, #12]	; (8003858 <floor+0x84>)
 800384c:	e7e3      	b.n	8003816 <floor+0x42>
 800384e:	bf00      	nop
 8003850:	20000640 	.word	0x20000640
 8003854:	7fefffff 	.word	0x7fefffff
 8003858:	7ff80000 	.word	0x7ff80000

0800385c <ceil>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_CEIL]++;
 8003860:	4f1d      	ldr	r7, [pc, #116]	; (80038d8 <ceil+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003862:	4602      	mov	r2, r0
    float_usage[USAGE_CEIL]++;
 8003864:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
    if (isnan(x)) { return NAN; }
 8003868:	460b      	mov	r3, r1
    float_usage[USAGE_CEIL]++;
 800386a:	3601      	adds	r6, #1
 800386c:	f887 602b 	strb.w	r6, [r7, #43]	; 0x2b
double ceil(double x) { 
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003874:	f7ff fb74 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003878:	bb58      	cbnz	r0, 80038d2 <ceil+0x76>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 800387a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800387e:	4620      	mov	r0, r4
 8003880:	4631      	mov	r1, r6
 8003882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <ceil+0x80>)
 8003888:	f7ff fb6a 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800388c:	b958      	cbnz	r0, 80038a6 <ceil+0x4a>
 800388e:	4620      	mov	r0, r4
 8003890:	4631      	mov	r1, r6
 8003892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <ceil+0x80>)
 8003898:	f7ff fb16 	bl	8002ec8 <__wrap___aeabi_dcmple>
 800389c:	b918      	cbnz	r0, 80038a6 <ceil+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
    return floored + 1;
}
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80038a6:	4629      	mov	r1, r5
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7fe ff29 	bl	8002700 <__aeabi_d2f>
 80038ae:	2100      	movs	r1, #0
 80038b0:	4606      	mov	r6, r0
 80038b2:	f7ff f835 	bl	8002920 <qfp_fcmp>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d0f1      	beq.n	800389e <ceil+0x42>
    int floored = qfp_float2int(x);
 80038ba:	4630      	mov	r0, r6
 80038bc:	f7ff f8ca 	bl	8002a54 <qfp_float2int>
    return floored + 1;
 80038c0:	3001      	adds	r0, #1
 80038c2:	f7fe feb3 	bl	800262c <__aeabi_i2d>
 80038c6:	4604      	mov	r4, r0
 80038c8:	460d      	mov	r5, r1
}
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80038d2:	2400      	movs	r4, #0
 80038d4:	4d02      	ldr	r5, [pc, #8]	; (80038e0 <ceil+0x84>)
 80038d6:	e7e2      	b.n	800389e <ceil+0x42>
 80038d8:	20000640 	.word	0x20000640
 80038dc:	7fefffff 	.word	0x7fefffff
 80038e0:	7ff80000 	.word	0x7ff80000

080038e4 <fmod>:
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
    float_usage[USAGE_FMOD]++;
 80038e4:	f8df c134 	ldr.w	ip, [pc, #308]	; 8003a1c <fmod+0x138>
double fmod(double x, double y) { 
 80038e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_FMOD]++;
 80038ec:	f89c 602c 	ldrb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 80038f0:	4692      	mov	sl, r2
    float_usage[USAGE_FMOD]++;
 80038f2:	3601      	adds	r6, #1
double fmod(double x, double y) { 
 80038f4:	461f      	mov	r7, r3
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
    float_usage[USAGE_FMOD]++;
 80038fa:	f88c 602c 	strb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 80038fe:	4605      	mov	r5, r0
 8003900:	460c      	mov	r4, r1
    if (isnan(x) || isnan(y)) { return NAN; }
 8003902:	f7ff fb2d 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003906:	bb10      	cbnz	r0, 800394e <fmod+0x6a>
 8003908:	4652      	mov	r2, sl
 800390a:	4650      	mov	r0, sl
 800390c:	463b      	mov	r3, r7
 800390e:	4639      	mov	r1, r7
 8003910:	f7ff fb26 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8003914:	b9d8      	cbnz	r0, 800394e <fmod+0x6a>

    // If x is ±0 and y is not zero, ±0 is returned
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f7fe fef1 	bl	8002700 <__aeabi_d2f>
 800391e:	2100      	movs	r1, #0
 8003920:	4680      	mov	r8, r0
 8003922:	f7fe fffd 	bl	8002920 <qfp_fcmp>
 8003926:	4606      	mov	r6, r0
 8003928:	b398      	cbz	r0, 8003992 <fmod+0xae>

    // If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
    if (isinf(x) && !isnan(y)) { return NAN; }
 800392a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800392e:	4628      	mov	r0, r5
 8003930:	4631      	mov	r1, r6
 8003932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <fmod+0x130>)
 8003938:	f7ff fb12 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800393c:	b958      	cbnz	r0, 8003956 <fmod+0x72>
 800393e:	4628      	mov	r0, r5
 8003940:	4631      	mov	r1, r6
 8003942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <fmod+0x130>)
 8003948:	f7ff fabe 	bl	8002ec8 <__wrap___aeabi_dcmple>
 800394c:	b918      	cbnz	r0, 8003956 <fmod+0x72>
    if (isnan(x) || isnan(y)) { return NAN; }
 800394e:	2000      	movs	r0, #0
 8003950:	4931      	ldr	r1, [pc, #196]	; (8003a18 <fmod+0x134>)
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 8003952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (qfp_fcmp(y, 0) == 0 && !isnan(x)) { return NAN; }
 8003956:	4639      	mov	r1, r7
 8003958:	4650      	mov	r0, sl
 800395a:	f7fe fed1 	bl	8002700 <__aeabi_d2f>
 800395e:	2100      	movs	r1, #0
 8003960:	f7fe ffde 	bl	8002920 <qfp_fcmp>
 8003964:	2800      	cmp	r0, #0
 8003966:	d0f2      	beq.n	800394e <fmod+0x6a>
    if (isinf(y) && !isinf(x)) { return x; }
 8003968:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 800396c:	4650      	mov	r0, sl
 800396e:	4639      	mov	r1, r7
 8003970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <fmod+0x130>)
 8003976:	f7ff faf3 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800397a:	b9b8      	cbnz	r0, 80039ac <fmod+0xc8>
 800397c:	4650      	mov	r0, sl
 800397e:	4639      	mov	r1, r7
 8003980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <fmod+0x130>)
 8003986:	f7ff fa9f 	bl	8002ec8 <__wrap___aeabi_dcmple>
 800398a:	b978      	cbnz	r0, 80039ac <fmod+0xc8>
 800398c:	4628      	mov	r0, r5
 800398e:	4621      	mov	r1, r4
 8003990:	e7df      	b.n	8003952 <fmod+0x6e>
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8003992:	4639      	mov	r1, r7
 8003994:	4650      	mov	r0, sl
 8003996:	f7fe feb3 	bl	8002700 <__aeabi_d2f>
 800399a:	2100      	movs	r1, #0
 800399c:	f7fe ffc0 	bl	8002920 <qfp_fcmp>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d0c2      	beq.n	800392a <fmod+0x46>
 80039a4:	4630      	mov	r0, r6
 80039a6:	4631      	mov	r1, r6
}
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
 80039ac:	4628      	mov	r0, r5
 80039ae:	4631      	mov	r1, r6
 80039b0:	f7fe fea6 	bl	8002700 <__aeabi_d2f>
 80039b4:	4639      	mov	r1, r7
 80039b6:	4604      	mov	r4, r0
 80039b8:	4650      	mov	r0, sl
 80039ba:	f7fe fea1 	bl	8002700 <__aeabi_d2f>
 80039be:	4605      	mov	r5, r0
 80039c0:	4601      	mov	r1, r0
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fe ffe3 	bl	800298e <qfp_fdiv_fast>
 80039c8:	f7fe fe42 	bl	8002650 <__aeabi_f2d>
 80039cc:	f7ff febc 	bl	8003748 <trunc>
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 80039d0:	f7fe fe96 	bl	8002700 <__aeabi_d2f>
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7fe ffb1 	bl	800293c <qfp_fmul>
 80039da:	4601      	mov	r1, r0
 80039dc:	4620      	mov	r0, r4
 80039de:	f7fe ff7b 	bl	80028d8 <qfp_fsub>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 80039e2:	2100      	movs	r1, #0
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 80039e4:	4604      	mov	r4, r0
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 80039e6:	f7fe ff9b 	bl	8002920 <qfp_fcmp>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	db0b      	blt.n	8003a06 <fmod+0x122>
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
 80039ee:	4640      	mov	r0, r8
 80039f0:	2100      	movs	r1, #0
 80039f2:	f7fe ff95 	bl	8002920 <qfp_fcmp>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	bfb8      	it	lt
 80039fa:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7fe fe26 	bl	8002650 <__aeabi_f2d>
 8003a04:	e7a5      	b.n	8003952 <fmod+0x6e>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003a06:	4620      	mov	r0, r4
 8003a08:	4629      	mov	r1, r5
 8003a0a:	f7fe ff68 	bl	80028de <qfp_fadd>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	e7ed      	b.n	80039ee <fmod+0x10a>
 8003a12:	bf00      	nop
 8003a14:	7fefffff 	.word	0x7fefffff
 8003a18:	7ff80000 	.word	0x7ff80000
 8003a1c:	20000640 	.word	0x20000640

08003a20 <_strtol_l.isra.0>:

/*
 * Convert a string to a long integer.
 */
static long
_strtol_l (struct _reent *rptr, const char *__restrict nptr,
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	   char **__restrict endptr, int base, locale_t loc)
{
	register const unsigned char *s = (const unsigned char *)nptr;
 8003a24:	460d      	mov	r5, r1
_strtol_l (struct _reent *rptr, const char *__restrict nptr,
 8003a26:	4684      	mov	ip, r0
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace_l(c, loc));
 8003a28:	4837      	ldr	r0, [pc, #220]	; (8003b08 <_strtol_l.isra.0+0xe8>)
		c = *s++;
 8003a2a:	462f      	mov	r7, r5
 8003a2c:	f817 4b01 	ldrb.w	r4, [r7], #1
	} while (isspace_l(c, loc));
 8003a30:	5c26      	ldrb	r6, [r4, r0]
 8003a32:	f016 0608 	ands.w	r6, r6, #8
 8003a36:	d134      	bne.n	8003aa2 <_strtol_l.isra.0+0x82>
	if (c == '-') {
 8003a38:	2c2d      	cmp	r4, #45	; 0x2d
 8003a3a:	d134      	bne.n	8003aa6 <_strtol_l.isra.0+0x86>
		neg = 1;
 8003a3c:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
 8003a40:	786c      	ldrb	r4, [r5, #1]
 8003a42:	1caf      	adds	r7, r5, #2
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <_strtol_l.isra.0+0xe0>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d109      	bne.n	8003a60 <_strtol_l.isra.0+0x40>
 8003a4c:	2c30      	cmp	r4, #48	; 0x30
 8003a4e:	d107      	bne.n	8003a60 <_strtol_l.isra.0+0x40>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8003a50:	7838      	ldrb	r0, [r7, #0]
 8003a52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003a56:	2858      	cmp	r0, #88	; 0x58
 8003a58:	d14d      	bne.n	8003af6 <_strtol_l.isra.0+0xd6>
		c = s[1];
		s += 2;
		base = 16;
 8003a5a:	2310      	movs	r3, #16
		c = s[1];
 8003a5c:	787c      	ldrb	r4, [r7, #1]
		s += 2;
 8003a5e:	3702      	adds	r7, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8003a60:	f1be 0f00 	cmp.w	lr, #0
 8003a64:	bf14      	ite	ne
 8003a66:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8003a6a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8003a6e:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
 8003a70:	fbb8 f9f3 	udiv	r9, r8, r3
	for (acc = 0, any = 0;; c = *s++) {
 8003a74:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
 8003a76:	fb03 8a19 	mls	sl, r3, r9, r8
		if (c >= '0' && c <= '9')
 8003a7a:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8003a7e:	2d09      	cmp	r5, #9
 8003a80:	d817      	bhi.n	8003ab2 <_strtol_l.isra.0+0x92>
			c -= '0';
 8003a82:	462c      	mov	r4, r5
			c -= 'A' - 10;
		else if (c >= 'a' && c <= 'z')
			c -= 'a' - 10;
		else
			break;
		if (c >= base)
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	dd23      	ble.n	8003ad0 <_strtol_l.isra.0+0xb0>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
 8003a88:	1c75      	adds	r5, r6, #1
 8003a8a:	d007      	beq.n	8003a9c <_strtol_l.isra.0+0x7c>
 8003a8c:	4581      	cmp	r9, r0
 8003a8e:	d31c      	bcc.n	8003aca <_strtol_l.isra.0+0xaa>
 8003a90:	d101      	bne.n	8003a96 <_strtol_l.isra.0+0x76>
 8003a92:	45a2      	cmp	sl, r4
 8003a94:	db19      	blt.n	8003aca <_strtol_l.isra.0+0xaa>
			any = -1;
		else {
			any = 1;
 8003a96:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
 8003a98:	fb00 4003 	mla	r0, r0, r3, r4
	for (acc = 0, any = 0;; c = *s++) {
 8003a9c:	f817 4b01 	ldrb.w	r4, [r7], #1
 8003aa0:	e7eb      	b.n	8003a7a <_strtol_l.isra.0+0x5a>
	} while (isspace_l(c, loc));
 8003aa2:	463d      	mov	r5, r7
 8003aa4:	e7c1      	b.n	8003a2a <_strtol_l.isra.0+0xa>
	} else if (c == '+')
 8003aa6:	2c2b      	cmp	r4, #43	; 0x2b
		c = *s++;
 8003aa8:	bf04      	itt	eq
 8003aaa:	1caf      	addeq	r7, r5, #2
 8003aac:	786c      	ldrbeq	r4, [r5, #1]
	register int neg = 0, any, cutlim;
 8003aae:	46b6      	mov	lr, r6
 8003ab0:	e7c8      	b.n	8003a44 <_strtol_l.isra.0+0x24>
		else if (c >= 'A' && c <= 'Z')
 8003ab2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8003ab6:	2d19      	cmp	r5, #25
 8003ab8:	d801      	bhi.n	8003abe <_strtol_l.isra.0+0x9e>
			c -= 'A' - 10;
 8003aba:	3c37      	subs	r4, #55	; 0x37
 8003abc:	e7e2      	b.n	8003a84 <_strtol_l.isra.0+0x64>
		else if (c >= 'a' && c <= 'z')
 8003abe:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8003ac2:	2d19      	cmp	r5, #25
 8003ac4:	d804      	bhi.n	8003ad0 <_strtol_l.isra.0+0xb0>
			c -= 'a' - 10;
 8003ac6:	3c57      	subs	r4, #87	; 0x57
 8003ac8:	e7dc      	b.n	8003a84 <_strtol_l.isra.0+0x64>
			any = -1;
 8003aca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003ace:	e7e5      	b.n	8003a9c <_strtol_l.isra.0+0x7c>
		}
	}
	if (any < 0) {
 8003ad0:	1c73      	adds	r3, r6, #1
 8003ad2:	d106      	bne.n	8003ae2 <_strtol_l.isra.0+0xc2>
		acc = neg ? LONG_MIN : LONG_MAX;
		__errno_r(rptr) = ERANGE;
 8003ad4:	2322      	movs	r3, #34	; 0x22
		acc = neg ? LONG_MIN : LONG_MAX;
 8003ad6:	4640      	mov	r0, r8
		__errno_r(rptr) = ERANGE;
 8003ad8:	f8cc 3000 	str.w	r3, [ip]
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
 8003adc:	b942      	cbnz	r2, 8003af0 <_strtol_l.isra.0+0xd0>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
	return (acc);
}
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (neg)
 8003ae2:	f1be 0f00 	cmp.w	lr, #0
 8003ae6:	d000      	beq.n	8003aea <_strtol_l.isra.0+0xca>
		acc = -acc;
 8003ae8:	4240      	negs	r0, r0
	if (endptr != 0)
 8003aea:	2a00      	cmp	r2, #0
 8003aec:	d0f7      	beq.n	8003ade <_strtol_l.isra.0+0xbe>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
 8003aee:	b106      	cbz	r6, 8003af2 <_strtol_l.isra.0+0xd2>
 8003af0:	1e79      	subs	r1, r7, #1
 8003af2:	6011      	str	r1, [r2, #0]
 8003af4:	e7f3      	b.n	8003ade <_strtol_l.isra.0+0xbe>
	if (base == 0)
 8003af6:	2430      	movs	r4, #48	; 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1b1      	bne.n	8003a60 <_strtol_l.isra.0+0x40>
		base = c == '0' ? 8 : 10;
 8003afc:	2308      	movs	r3, #8
 8003afe:	e7af      	b.n	8003a60 <_strtol_l.isra.0+0x40>
	if ((base == 0 || base == 16) &&
 8003b00:	2c30      	cmp	r4, #48	; 0x30
 8003b02:	d0a5      	beq.n	8003a50 <_strtol_l.isra.0+0x30>
		base = c == '0' ? 8 : 10;
 8003b04:	230a      	movs	r3, #10
 8003b06:	e7ab      	b.n	8003a60 <_strtol_l.isra.0+0x40>
 8003b08:	08005bbf 	.word	0x08005bbf

08003b0c <strtol>:
long
strtol (const char *__restrict s,
	char **__restrict ptr,
	int base)
{
	return _strtol_l (_REENT, s, ptr, base, __get_current_locale ());
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	460a      	mov	r2, r1
 8003b10:	4601      	mov	r1, r0
 8003b12:	4802      	ldr	r0, [pc, #8]	; (8003b1c <strtol+0x10>)
 8003b14:	6800      	ldr	r0, [r0, #0]
 8003b16:	f7ff bf83 	b.w	8003a20 <_strtol_l.isra.0>
 8003b1a:	bf00      	nop
 8003b1c:	20000428 	.word	0x20000428

08003b20 <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 8003b20:	440a      	add	r2, r1
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b28:	d100      	bne.n	8003b2c <memcpy+0xc>
 8003b2a:	4770      	bx	lr
{
 8003b2c:	b510      	push	{r4, lr}
    {
      *dst++ = *src++;
 8003b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
  while (len0--)
 8003b32:	4291      	cmp	r1, r2
      *dst++ = *src++;
 8003b34:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (len0--)
 8003b38:	d1f9      	bne.n	8003b2e <memcpy+0xe>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003b3a:	bd10      	pop	{r4, pc}

08003b3c <strcmp>:
	.syntax unified
def_fn strcmp
	.cfi_sections .debug_frame
	.cfi_startproc
1:
	ldrb	r2, [r0], #1
 8003b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
	ldrb	r3, [r1], #1
 8003b40:	f811 3b01 	ldrb.w	r3, [r1], #1
	cmp	r2, #1
 8003b44:	2a01      	cmp	r2, #1
	it	cs
 8003b46:	bf28      	it	cs
	cmpcs	r2, r3
 8003b48:	429a      	cmpcs	r2, r3
	beq	1b
 8003b4a:	d0f7      	beq.n	8003b3c <strcmp>
2:
	subs	r0, r2, r3
 8003b4c:	1ad0      	subs	r0, r2, r3
	bx	lr
 8003b4e:	4770      	bx	lr

08003b50 <strlen>:
	.eabi_attribute Tag_ARM_ISA_use, 0
	.thumb
	.syntax unified

def_fn	strlen p2align=1
	mov     r3, r0
 8003b50:	4603      	mov	r3, r0
1:	ldrb.w  r2, [r3], #1
 8003b52:	f813 2b01 	ldrb.w	r2, [r3], #1
	cmp     r2, #0
 8003b56:	2a00      	cmp	r2, #0
	bne	1b
 8003b58:	d1fb      	bne.n	8003b52 <strlen+0x2>
	subs    r0, r3, r0
 8003b5a:	1a18      	subs	r0, r3, r0
	subs    r0, #1
 8003b5c:	3801      	subs	r0, #1
	bx      lr
 8003b5e:	4770      	bx	lr

08003b60 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 8003b60:	b530      	push	{r4, r5, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8003b62:	2400      	movs	r4, #0
 8003b64:	42a2      	cmp	r2, r4
 8003b66:	d101      	bne.n	8003b6c <memcmp+0xc>
	  return *s1 - *s2;
	}
      s1++;
      s2++;
    }
  return 0;
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e007      	b.n	8003b7c <memcmp+0x1c>
      if (*s1 != *s2)
 8003b6c:	5d03      	ldrb	r3, [r0, r4]
 8003b6e:	3401      	adds	r4, #1
 8003b70:	190d      	adds	r5, r1, r4
 8003b72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003b76:	42ab      	cmp	r3, r5
 8003b78:	d0f4      	beq.n	8003b64 <memcmp+0x4>
	  return *s1 - *s2;
 8003b7a:	1b58      	subs	r0, r3, r5
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003b7c:	bd30      	pop	{r4, r5, pc}

08003b7e <memmove>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = dst_void;
  const char *src = src_void;

  if (src < dst && dst < src + length)
 8003b7e:	4288      	cmp	r0, r1
{
 8003b80:	b510      	push	{r4, lr}
 8003b82:	eb01 0302 	add.w	r3, r1, r2
  if (src < dst && dst < src + length)
 8003b86:	d807      	bhi.n	8003b98 <memmove+0x1a>
 8003b88:	1e42      	subs	r2, r0, #1
	  *--dst = *--src;
	}
    }
  else
    {
      while (length--)
 8003b8a:	4299      	cmp	r1, r3
 8003b8c:	d00a      	beq.n	8003ba4 <memmove+0x26>
	{
	  *dst++ = *src++;
 8003b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b96:	e7f8      	b.n	8003b8a <memmove+0xc>
  if (src < dst && dst < src + length)
 8003b98:	4283      	cmp	r3, r0
 8003b9a:	d9f5      	bls.n	8003b88 <memmove+0xa>
      dst += length;
 8003b9c:	1881      	adds	r1, r0, r2
 8003b9e:	1ad2      	subs	r2, r2, r3
      while (length--)
 8003ba0:	42d3      	cmn	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memmove+0x28>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003ba4:	bd10      	pop	{r4, pc}
	  *--dst = *--src;
 8003ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003baa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003bae:	e7f7      	b.n	8003ba0 <memmove+0x22>

08003bb0 <memset>:
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
  char *s = (char *) m;
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4402      	add	r2, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
    *s++ = (char) c;

  return m;
}
 8003bb8:	4770      	bx	lr
    *s++ = (char) c;
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <strstr>:
    || CHAR_BIT > 8

/* Small and efficient strstr implementation.  */
char *
strstr (const char *hs, const char *ne)
{
 8003bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t i;
  int c = ne[0];
 8003bc2:	780c      	ldrb	r4, [r1, #0]

  if (c == 0)
 8003bc4:	b164      	cbz	r4, 8003be0 <strstr+0x20>
 8003bc6:	4603      	mov	r3, r0
    return (char*)hs;

  for ( ; hs[0] != '\0'; hs++)
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	1c5e      	adds	r6, r3, #1
 8003bce:	b90a      	cbnz	r2, 8003bd4 <strstr+0x14>
	  break;
      if (ne[i] == '\0')
	return (char*)hs;
    }

  return NULL;
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	e005      	b.n	8003be0 <strstr+0x20>
      if (hs[0] != c)
 8003bd4:	4294      	cmp	r4, r2
 8003bd6:	d108      	bne.n	8003bea <strstr+0x2a>
 8003bd8:	460d      	mov	r5, r1
      for (i = 1; ne[i] != 0; i++)
 8003bda:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003bde:	b902      	cbnz	r2, 8003be2 <strstr+0x22>
}
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hs[i] != ne[i])
 8003be2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003be6:	4297      	cmp	r7, r2
 8003be8:	d0f7      	beq.n	8003bda <strstr+0x1a>
{
 8003bea:	4633      	mov	r3, r6
 8003bec:	e7ec      	b.n	8003bc8 <strstr+0x8>

08003bee <strncpy>:

char *
strncpy (char *__restrict dst0,
	const char *__restrict src0,
	size_t count)
{
 8003bee:	b570      	push	{r4, r5, r6, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	3901      	subs	r1, #1
  sscan = src0;
  while (count > 0)
 8003bf4:	b902      	cbnz	r2, 8003bf8 <strncpy+0xa>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
      if ((*dscan++ = *sscan++) == '\0')
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
      --count;
 8003bfe:	1e56      	subs	r6, r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 8003c00:	f803 5b01 	strb.w	r5, [r3], #1
 8003c04:	b92d      	cbnz	r5, 8003c12 <strncpy+0x24>
 8003c06:	4414      	add	r4, r2
  while (count-- > 0)
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	d0f4      	beq.n	8003bf6 <strncpy+0x8>
    *dscan++ = '\0';
 8003c0c:	f803 5b01 	strb.w	r5, [r3], #1
 8003c10:	e7fa      	b.n	8003c08 <strncpy+0x1a>
 8003c12:	461c      	mov	r4, r3
      --count;
 8003c14:	4632      	mov	r2, r6
 8003c16:	e7ed      	b.n	8003bf4 <strncpy+0x6>

08003c18 <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8003c18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c1c:	d221      	bcs.n	8003c62 <_ZL12debug_appendPKcj+0x4a>
static void debug_append(const char *buffer, unsigned int length) {
 8003c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003c20:	4d10      	ldr	r5, [pc, #64]	; (8003c64 <_ZL12debug_appendPKcj+0x4c>)
 8003c22:	460b      	mov	r3, r1
 8003c24:	882a      	ldrh	r2, [r5, #0]
 8003c26:	4604      	mov	r4, r0
 8003c28:	440a      	add	r2, r1
 8003c2a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
        //  Erase the entire buffer.  Latest log is more important than old log.
        strcpy(debugBuffer, "[DROPPED]");
 8003c2e:	4f0e      	ldr	r7, [pc, #56]	; (8003c68 <_ZL12debug_appendPKcj+0x50>)
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003c30:	d30b      	bcc.n	8003c4a <_ZL12debug_appendPKcj+0x32>
        debugBufferLength = 9;
 8003c32:	2109      	movs	r1, #9
        strcpy(debugBuffer, "[DROPPED]");
 8003c34:	463e      	mov	r6, r7
 8003c36:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <_ZL12debug_appendPKcj+0x54>)
        debugBufferLength = 9;
 8003c38:	8029      	strh	r1, [r5, #0]
        strcpy(debugBuffer, "[DROPPED]");
 8003c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c3c:	c603      	stmia	r6!, {r0, r1}
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8003c3e:	8829      	ldrh	r1, [r5, #0]
        strcpy(debugBuffer, "[DROPPED]");
 8003c40:	8032      	strh	r2, [r6, #0]
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8003c42:	4419      	add	r1, r3
 8003c44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c48:	d20a      	bcs.n	8003c60 <_ZL12debug_appendPKcj+0x48>
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	461c      	mov	r4, r3
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8003c4e:	8828      	ldrh	r0, [r5, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4438      	add	r0, r7
 8003c54:	f7ff ff64 	bl	8003b20 <memcpy>
    debugBufferLength += length;
 8003c58:	882b      	ldrh	r3, [r5, #0]
 8003c5a:	4423      	add	r3, r4
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	802b      	strh	r3, [r5, #0]
}
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	4770      	bx	lr
 8003c64:	20000884 	.word	0x20000884
 8003c68:	20000670 	.word	0x20000670
 8003c6c:	08005cd4 	.word	0x08005cd4

08003c70 <_Z20debug_flush_internalb.part.2>:
void debug_flush_internal(bool forced) {
 8003c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003c74:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003cdc <_Z20debug_flush_internalb.part.2+0x6c>
 8003c78:	4c16      	ldr	r4, [pc, #88]	; (8003cd4 <_Z20debug_flush_internalb.part.2+0x64>)
 8003c7a:	f8b9 6000 	ldrh.w	r6, [r9]
            func(buf, outlen);
 8003c7e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003cd8 <_Z20debug_flush_internalb.part.2+0x68>
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003c82:	b2b6      	uxth	r6, r6
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8003c84:	2e3c      	cmp	r6, #60	; 0x3c
 8003c86:	4635      	mov	r5, r6
 8003c88:	bf28      	it	cs
 8003c8a:	253c      	movcs	r5, #60	; 0x3c
 8003c8c:	f104 0710 	add.w	r7, r4, #16
        if (output_funcs[i]) {
 8003c90:	f854 3b04 	ldr.w	r3, [r4], #4
 8003c94:	b113      	cbz	r3, 8003c9c <_Z20debug_flush_internalb.part.2+0x2c>
            func(buf, outlen);
 8003c96:	4629      	mov	r1, r5
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4798      	blx	r3
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003c9c:	42bc      	cmp	r4, r7
 8003c9e:	d1f7      	bne.n	8003c90 <_Z20debug_flush_internalb.part.2+0x20>
    if (outlen == 0) {
 8003ca0:	b136      	cbz	r6, 8003cb0 <_Z20debug_flush_internalb.part.2+0x40>
    } else if (outlen >= debugBufferLength) {
 8003ca2:	f8b9 3000 	ldrh.w	r3, [r9]
 8003ca6:	429d      	cmp	r5, r3
 8003ca8:	d304      	bcc.n	8003cb4 <_Z20debug_flush_internalb.part.2+0x44>
        debugBufferLength = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8a9 3000 	strh.w	r3, [r9]
}
 8003cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8003cb4:	f8b9 2000 	ldrh.w	r2, [r9]
 8003cb8:	4807      	ldr	r0, [pc, #28]	; (8003cd8 <_Z20debug_flush_internalb.part.2+0x68>)
 8003cba:	1b52      	subs	r2, r2, r5
 8003cbc:	1941      	adds	r1, r0, r5
 8003cbe:	f7ff ff2f 	bl	8003b20 <memcpy>
    debugBufferLength -= outlen;
 8003cc2:	f8b9 3000 	ldrh.w	r3, [r9]
 8003cc6:	1b5d      	subs	r5, r3, r5
 8003cc8:	b2ad      	uxth	r5, r5
 8003cca:	f8a9 5000 	strh.w	r5, [r9]
}
 8003cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000874 	.word	0x20000874
 8003cd8:	20000670 	.word	0x20000670
 8003cdc:	20000884 	.word	0x20000884

08003ce0 <debug_print.part.3>:

void debug_write(uint8_t ch) {
	debug_append((const char *) &ch, 1);
}

void debug_print(const char *s) {
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
 8003ce4:	f7ff ff34 	bl	8003b50 <strlen>
 8003ce8:	4601      	mov	r1, r0
 8003cea:	4620      	mov	r0, r4
}
 8003cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	debug_append(s, strlen(s));
 8003cf0:	f7ff bf92 	b.w	8003c18 <_ZL12debug_appendPKcj>

08003cf4 <enable_log>:
void enable_log(void) { logEnabled = true; }
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <logger_add_output>:
    if (!func) { return -1; }
 8003cf8:	b1f0      	cbz	r0, 8003d38 <logger_add_output+0x40>
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <logger_add_output+0x48>)
int logger_add_output(logger_output_func *func) {
 8003cfc:	b430      	push	{r4, r5}
    if (!func) { return -1; }
 8003cfe:	4613      	mov	r3, r2
 8003d00:	4615      	mov	r5, r2
 8003d02:	f102 0410 	add.w	r4, r2, #16
        if (output_funcs[i] == func) {
 8003d06:	f853 1b04 	ldr.w	r1, [r3], #4
 8003d0a:	4281      	cmp	r1, r0
 8003d0c:	d00c      	beq.n	8003d28 <logger_add_output+0x30>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	d1f9      	bne.n	8003d06 <logger_add_output+0xe>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d12:	2300      	movs	r3, #0
        if (!output_funcs[i]) {
 8003d14:	f852 1b04 	ldr.w	r1, [r2], #4
 8003d18:	b149      	cbz	r1, 8003d2e <logger_add_output+0x36>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d1f9      	bne.n	8003d14 <logger_add_output+0x1c>
}
 8003d20:	bc30      	pop	{r4, r5}
    if (!func) { return -1; }
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003d26:	4770      	bx	lr
            return 0;  //  Already added.
 8003d28:	2000      	movs	r0, #0
}
 8003d2a:	bc30      	pop	{r4, r5}
 8003d2c:	4770      	bx	lr
            output_funcs[i] = func;
 8003d2e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
            return 0;
 8003d32:	4608      	mov	r0, r1
}
 8003d34:	bc30      	pop	{r4, r5}
 8003d36:	4770      	bx	lr
    if (!func) { return -1; }
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000874 	.word	0x20000874

08003d44 <debug_flush>:
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <debug_flush+0x10>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b903      	cbnz	r3, 8003d4e <debug_flush+0xa>
}
 8003d4c:	4770      	bx	lr
 8003d4e:	f7ff bf8f 	b.w	8003c70 <_Z20debug_flush_internalb.part.2>
 8003d52:	bf00      	nop
 8003d54:	20000884 	.word	0x20000884

08003d58 <debug_force_flush>:
void debug_force_flush(void) {
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	2464      	movs	r4, #100	; 0x64
 8003d5c:	4d07      	ldr	r5, [pc, #28]	; (8003d7c <debug_force_flush+0x24>)
 8003d5e:	e001      	b.n	8003d64 <debug_force_flush+0xc>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003d60:	3c01      	subs	r4, #1
 8003d62:	d00a      	beq.n	8003d7a <debug_force_flush+0x22>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8003d64:	882b      	ldrh	r3, [r5, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	b13b      	cbz	r3, 8003d7a <debug_force_flush+0x22>
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003d6a:	882b      	ldrh	r3, [r5, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f6      	beq.n	8003d60 <debug_force_flush+0x8>
 8003d72:	f7ff ff7d 	bl	8003c70 <_Z20debug_flush_internalb.part.2>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003d76:	3c01      	subs	r4, #1
 8003d78:	d1f4      	bne.n	8003d64 <debug_force_flush+0xc>
}
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000884 	.word	0x20000884

08003d80 <_Z11debug_printj>:
void debug_print(size_t l) {
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	210a      	movs	r1, #10
    int length = 0;
 8003d84:	2500      	movs	r5, #0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <_Z11debug_printj+0x7c>)
 8003d88:	4f1d      	ldr	r7, [pc, #116]	; (8003e00 <_Z11debug_printj+0x80>)
void debug_print(size_t l) {
 8003d8a:	b085      	sub	sp, #20
        char digit = '0' + (char)(l / divisor);
 8003d8c:	fbb0 f4f2 	udiv	r4, r0, r2
 8003d90:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003d94:	b2db      	uxtb	r3, r3
        if (digit > '9') {
 8003d96:	2b39      	cmp	r3, #57	; 0x39
 8003d98:	d82a      	bhi.n	8003df0 <_Z11debug_printj+0x70>
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003d9a:	fba7 c602 	umull	ip, r6, r7, r2
        if (digit > '0' || length > 0 || prefixByZero) {
 8003d9e:	2b30      	cmp	r3, #48	; 0x30
        l = l % divisor;
 8003da0:	fb02 0014 	mls	r0, r2, r4, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003da4:	ea4f 02d6 	mov.w	r2, r6, lsr #3
        if (digit > '0' || length > 0 || prefixByZero) {
 8003da8:	d800      	bhi.n	8003dac <_Z11debug_printj+0x2c>
 8003daa:	b135      	cbz	r5, 8003dba <_Z11debug_printj+0x3a>
            if (length < size) {
 8003dac:	2d0a      	cmp	r5, #10
 8003dae:	dc04      	bgt.n	8003dba <_Z11debug_printj+0x3a>
                buffer[length++] = digit;
 8003db0:	ac04      	add	r4, sp, #16
 8003db2:	442c      	add	r4, r5
 8003db4:	f804 3c0c 	strb.w	r3, [r4, #-12]
 8003db8:	3501      	adds	r5, #1
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8003dba:	3901      	subs	r1, #1
 8003dbc:	d1e6      	bne.n	8003d8c <_Z11debug_printj+0xc>
    if (length == 0) { buffer[length++] = '0'; };
 8003dbe:	b9a5      	cbnz	r5, 8003dea <_Z11debug_printj+0x6a>
 8003dc0:	2330      	movs	r3, #48	; 0x30
 8003dc2:	2501      	movs	r5, #1
 8003dc4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (length < size) buffer[length] = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	aa04      	add	r2, sp, #16
 8003dcc:	4415      	add	r5, r2
 8003dce:	f805 3c0c 	strb.w	r3, [r5, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003dd2:	2300      	movs	r3, #0
    debug_append(buffer, strlen(buffer));
 8003dd4:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003dd6:	f88d 300e 	strb.w	r3, [sp, #14]
    debug_append(buffer, strlen(buffer));
 8003dda:	f7ff feb9 	bl	8003b50 <strlen>
 8003dde:	4601      	mov	r1, r0
 8003de0:	a801      	add	r0, sp, #4
 8003de2:	f7ff ff19 	bl	8003c18 <_ZL12debug_appendPKcj>
}
 8003de6:	b005      	add	sp, #20
 8003de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (length < size) buffer[length] = 0;
 8003dea:	2d0a      	cmp	r5, #10
 8003dec:	dcf1      	bgt.n	8003dd2 <_Z11debug_printj+0x52>
 8003dee:	e7eb      	b.n	8003dc8 <_Z11debug_printj+0x48>
 8003df0:	4804      	ldr	r0, [pc, #16]	; (8003e04 <_Z11debug_printj+0x84>)
 8003df2:	f7ff ff75 	bl	8003ce0 <debug_print.part.3>
}
 8003df6:	b005      	add	sp, #20
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	3b9aca00 	.word	0x3b9aca00
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	08005cc8 	.word	0x08005cc8

08003e08 <_Z11debug_printi>:
    if (i == 0) { debug_append("0", 1); } 
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d00d      	beq.n	8003e28 <_Z11debug_printi+0x20>
    else if (i >= 0) { debug_print((size_t) i); }
 8003e0c:	db01      	blt.n	8003e12 <_Z11debug_printi+0xa>
        debug_print((size_t) -i);
 8003e0e:	f7ff bfb7 	b.w	8003d80 <_Z11debug_printj>
void debug_print(int i) {
 8003e12:	b510      	push	{r4, lr}
 8003e14:	461c      	mov	r4, r3
        debug_append("-", 1);
 8003e16:	4806      	ldr	r0, [pc, #24]	; (8003e30 <_Z11debug_printi+0x28>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	f7ff fefd 	bl	8003c18 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 8003e1e:	4260      	negs	r0, r4
}
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_print((size_t) -i);
 8003e24:	f7ff bfac 	b.w	8003d80 <_Z11debug_printj>
    if (i == 0) { debug_append("0", 1); } 
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4802      	ldr	r0, [pc, #8]	; (8003e34 <_Z11debug_printi+0x2c>)
 8003e2c:	f7ff bef4 	b.w	8003c18 <_ZL12debug_appendPKcj>
 8003e30:	08005cc4 	.word	0x08005cc4
 8003e34:	08005cc0 	.word	0x08005cc0

08003e38 <debug_print>:
    if (s[0] == 0) return;
 8003e38:	7803      	ldrb	r3, [r0, #0]
 8003e3a:	b903      	cbnz	r3, 8003e3e <debug_print+0x6>
}
 8003e3c:	4770      	bx	lr
 8003e3e:	f7ff bf4f 	b.w	8003ce0 <debug_print.part.3>
 8003e42:	bf00      	nop

08003e44 <debug_println>:

void debug_println(const char *s) {
 8003e44:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 8003e46:	7803      	ldrb	r3, [r0, #0]
 8003e48:	b10b      	cbz	r3, 8003e4e <debug_println+0xa>
 8003e4a:	f7ff ff49 	bl	8003ce0 <debug_print.part.3>
    debug_append("\r\n", 2);
}
 8003e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 8003e52:	2102      	movs	r1, #2
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <debug_println+0x18>)
 8003e56:	f7ff bedf 	b.w	8003c18 <_ZL12debug_appendPKcj>
 8003e5a:	bf00      	nop
 8003e5c:	08005ce0 	.word	0x08005ce0

08003e60 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 8003e60:	b508      	push	{r3, lr}
    debug_print(i);
 8003e62:	f7ff ffd1 	bl	8003e08 <_Z11debug_printi>
    debug_append("\r\n", 2);
}
 8003e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4801      	ldr	r0, [pc, #4]	; (8003e74 <_Z13debug_printlni+0x14>)
 8003e6e:	f7ff bed3 	b.w	8003c18 <_ZL12debug_appendPKcj>
 8003e72:	bf00      	nop
 8003e74:	08005ce0 	.word	0x08005ce0

08003e78 <debug_print_int>:
void debug_println(float f) {
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
 8003e78:	f7ff bfc6 	b.w	8003e08 <_Z11debug_printi>

08003e7c <debug_print_unsigned>:
void debug_print_unsigned(size_t l) { debug_print(l); }
 8003e7c:	f7ff bf80 	b.w	8003d80 <_Z11debug_printj>

08003e80 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8003e80:	b500      	push	{lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8003e82:	0903      	lsrs	r3, r0, #4
 8003e84:	f103 0230 	add.w	r2, r3, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003e88:	2a39      	cmp	r2, #57	; 0x39
 8003e8a:	bfc8      	it	gt
 8003e8c:	f103 0257 	addgt.w	r2, r3, #87	; 0x57
void debug_printhex(uint8_t v) {
 8003e90:	b083      	sub	sp, #12
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003e92:	bfc8      	it	gt
 8003e94:	b252      	sxtbgt	r2, r2
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 8003e96:	f88d 2004 	strb.w	r2, [sp, #4]
            }
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
 8003e9a:	2200      	movs	r2, #0
        char digit = '0' + (char)(v / divisor);
 8003e9c:	f000 000f 	and.w	r0, r0, #15
 8003ea0:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003ea4:	2b39      	cmp	r3, #57	; 0x39
 8003ea6:	bfc4      	itt	gt
 8003ea8:	3057      	addgt	r0, #87	; 0x57
 8003eaa:	b243      	sxtbgt	r3, r0
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
 8003eac:	a801      	add	r0, sp, #4
                buffer[length++] = digit;
 8003eae:	f88d 3005 	strb.w	r3, [sp, #5]
    if (length < size) buffer[length] = 0;
 8003eb2:	f88d 2006 	strb.w	r2, [sp, #6]
    debug_append(buffer, strlen(buffer));
 8003eb6:	f7ff fe4b 	bl	8003b50 <strlen>
 8003eba:	4601      	mov	r1, r0
 8003ebc:	a801      	add	r0, sp, #4
 8003ebe:	f7ff feab 	bl	8003c18 <_ZL12debug_appendPKcj>
}
 8003ec2:	b003      	add	sp, #12
 8003ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08003ec8 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4604      	mov	r4, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 8003ecc:	0e00      	lsrs	r0, r0, #24
 8003ece:	f7ff ffd7 	bl	8003e80 <debug_printhex>
 8003ed2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8003ed6:	f7ff ffd3 	bl	8003e80 <debug_printhex>
 8003eda:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003ede:	f7ff ffcf 	bl	8003e80 <debug_printhex>
 8003ee2:	b2e0      	uxtb	r0, r4
    }
}
 8003ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_printhex(b);
 8003ee8:	f7ff bfca 	b.w	8003e80 <debug_printhex>

08003eec <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 8003eec:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8003eee:	f7fc ff51 	bl	8000d94 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8003ef2:	f000 f831 	bl	8003f58 <led_setup>
	if (debugEnabled) {
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <platform_setup+0x44>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b1a3      	cbz	r3, 8003f26 <platform_setup+0x3a>
		led_on(); led_wait();
 8003efc:	f000 f83c 	bl	8003f78 <led_on>
 8003f00:	f000 f84a 	bl	8003f98 <led_wait>
		led_off(); led_wait();
 8003f04:	f000 f840 	bl	8003f88 <led_off>
 8003f08:	f000 f846 	bl	8003f98 <led_wait>
		led_on(); led_wait();
 8003f0c:	f000 f834 	bl	8003f78 <led_on>
 8003f10:	f000 f842 	bl	8003f98 <led_wait>
		led_off(); led_wait();
 8003f14:	f000 f838 	bl	8003f88 <led_off>
 8003f18:	f000 f83e 	bl	8003f98 <led_wait>
		//  This line will call ARM Semihosting and may hang until debugger is connected.
  		debug_println("----platform_setup");
 8003f1c:	4805      	ldr	r0, [pc, #20]	; (8003f34 <platform_setup+0x48>)
 8003f1e:	f7ff ff91 	bl	8003e44 <debug_println>
		led_on();
 8003f22:	f000 f829 	bl	8003f78 <led_on>
	}

	////TODO
	test_codal();
}
 8003f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_codal();
 8003f2a:	f7fc bd39 	b.w	80009a0 <test_codal>
 8003f2e:	bf00      	nop
 8003f30:	20000898 	.word	0x20000898
 8003f34:	08005ce4 	.word	0x08005ce4

08003f38 <enable_debug>:

void enable_debug(void) {
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <enable_debug+0xc>)
 8003f3c:	701a      	strb	r2, [r3, #0]
	enable_log();
 8003f3e:	f7ff bed9 	b.w	8003cf4 <enable_log>
 8003f42:	bf00      	nop
 8003f44:	20000898 	.word	0x20000898

08003f48 <__cxa_pure_virtual>:
//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8003f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f4c:	f7fc bd00 	b.w	8000950 <target_panic>

08003f50 <_Znwj>:
}

// define new and delete.
extern "C" void *operator new(size_t objsize) {
    return malloc(objsize);
 8003f50:	f005 ba76 	b.w	8009440 <malloc>

08003f54 <_ZdlPv>:
}

extern "C" void operator delete(void* obj) {
    free(obj);
 8003f54:	f005 b99c 	b.w	8009290 <free>

08003f58 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 8003f58:	b510      	push	{r4, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 8003f5a:	f44f 7041 	mov.w	r0, #772	; 0x304
 8003f5e:	f7fc fe1f 	bl	8000ba0 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
}
 8003f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8003f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4801      	ldr	r0, [pc, #4]	; (8003f74 <led_setup+0x1c>)
 8003f70:	f7fc be6e 	b.w	8000c50 <gpio_set_mode>
 8003f74:	40011000 	.word	0x40011000

08003f78 <led_on>:

void led_on(void) {
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 8003f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <led_on+0xc>)
 8003f7e:	f7fc bdfb 	b.w	8000b78 <gpio_clear>
 8003f82:	bf00      	nop
 8003f84:	40011000 	.word	0x40011000

08003f88 <led_off>:
}

void led_off(void) {
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8003f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f8c:	4801      	ldr	r0, [pc, #4]	; (8003f94 <led_off+0xc>)
 8003f8e:	f7fc bdf1 	b.w	8000b74 <gpio_set>
 8003f92:	bf00      	nop
 8003f94:	40011000 	.word	0x40011000

08003f98 <led_wait>:
void led_toggle(void) {
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
 8003f98:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <led_wait+0xc>)
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
		__asm__("nop");
 8003f9a:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	d1fc      	bne.n	8003f9a <led_wait+0x2>
}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	0016e360 	.word	0x0016e360

08003fa8 <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8003fa8:	b538      	push	{r3, r4, r5, lr}
	if (timerStarted) { return; }
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <platform_start_timer+0xf0>)
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8003fac:	4d3b      	ldr	r5, [pc, #236]	; (800409c <platform_start_timer+0xf4>)
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8003fae:	4a3c      	ldr	r2, [pc, #240]	; (80040a0 <platform_start_timer+0xf8>)
	if (timerStarted) { return; }
 8003fb0:	781c      	ldrb	r4, [r3, #0]
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8003fb2:	6028      	str	r0, [r5, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8003fb4:	6011      	str	r1, [r2, #0]
	if (timerStarted) { return; }
 8003fb6:	b104      	cbz	r4, 8003fba <platform_start_timer+0x12>
}
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
	timerStarted = true;
 8003fba:	2501      	movs	r5, #1
	debug_println("platform_start_timer"); ////
 8003fbc:	4839      	ldr	r0, [pc, #228]	; (80040a4 <platform_start_timer+0xfc>)
	timerStarted = true;
 8003fbe:	701d      	strb	r5, [r3, #0]
	debug_println("platform_start_timer"); ////
 8003fc0:	f7ff ff40 	bl	8003e44 <debug_println>
	rcc_enable_rtc_clock();
 8003fc4:	f7fc fe92 	bl	8000cec <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7fe f805 	bl	8001fd8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f7fe f802 	bl	8001fd8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f7fd ffff 	bl	8001fd8 <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8003fda:	4833      	ldr	r0, [pc, #204]	; (80040a8 <platform_start_timer+0x100>)
 8003fdc:	f7ff ff32 	bl	8003e44 <debug_println>
 8003fe0:	f7ff feb0 	bl	8003d44 <debug_flush>
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8003fe4:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8003fe8:	f7fc fdda 	bl	8000ba0 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 8003fec:	f240 309b 	movw	r0, #923	; 0x39b
 8003ff0:	f7fc fdd6 	bl	8000ba0 <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8003ff4:	f7fc fdc4 	bl	8000b80 <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8003ff8:	2005      	movs	r0, #5
 8003ffa:	f7fc fe7f 	bl	8000cfc <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
	RTC_CRL = 0;
 8003ffe:	4d2b      	ldr	r5, [pc, #172]	; (80040ac <platform_start_timer+0x104>)
	RTC_CRH = 0;
 8004000:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <platform_start_timer+0x108>)
 8004002:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8004004:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8004006:	f7fc fe71 	bl	8000cec <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 800400a:	f7fd ff33 	bl	8001e74 <rtc_enter_config_mode>
	RTC_PRLH = 0;
	RTC_PRLL = 0;
	RTC_CNTH = 0;
	RTC_CNTL = 0;
	RTC_ALRH = 0xFFFF;
 800400e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	RTC_CNTH = 0;
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <platform_start_timer+0x10c>)
	RTC_PRLH = 0;
 8004014:	4828      	ldr	r0, [pc, #160]	; (80040b8 <platform_start_timer+0x110>)
	RTC_PRLL = 0;
 8004016:	4929      	ldr	r1, [pc, #164]	; (80040bc <platform_start_timer+0x114>)
	RTC_PRLH = 0;
 8004018:	6004      	str	r4, [r0, #0]
	RTC_PRLL = 0;
 800401a:	600c      	str	r4, [r1, #0]
	RTC_CNTH = 0;
 800401c:	6014      	str	r4, [r2, #0]
	RTC_CNTL = 0;
 800401e:	6144      	str	r4, [r0, #20]
	RTC_ALRH = 0xFFFF;
 8004020:	614b      	str	r3, [r1, #20]
	RTC_ALRL = 0xFFFF;
 8004022:	60d3      	str	r3, [r2, #12]
	rtc_exit_config_mode();
 8004024:	f7fd ff32 	bl	8001e8c <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8004028:	462a      	mov	r2, r5
	RTC_CRL &= ~RTC_CRL_RSF;
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	f023 0308 	bic.w	r3, r3, #8
 8004030:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	d5fc      	bpl.n	8004032 <platform_start_timer+0x8a>
	rtc_set_prescale_val(prescale);
 8004038:	2020      	movs	r0, #32
 800403a:	f7fd ff53 	bl	8001ee4 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 800403e:	4820      	ldr	r0, [pc, #128]	; (80040c0 <platform_start_timer+0x118>)
 8004040:	f7ff ff00 	bl	8003e44 <debug_println>
 8004044:	f7ff fe7e 	bl	8003d44 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 8004048:	2000      	movs	r0, #0
 800404a:	f7fd ff77 	bl	8001f3c <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 800404e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004052:	f7fd ff27 	bl	8001ea4 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 8004056:	2100      	movs	r1, #0
 8004058:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800405c:	f7fd fece 	bl	8001dfc <exti_set_trigger>
	exti_enable_request(EXTI17);
 8004060:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004064:	f7fd fef2 	bl	8001e4c <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 8004068:	2003      	movs	r0, #3
 800406a:	f7fd feb9 	bl	8001de0 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 800406e:	2029      	movs	r0, #41	; 0x29
 8004070:	f7fd feb6 	bl	8001de0 <nvic_enable_irq>
 8004074:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8004076:	2000      	movs	r0, #0
 8004078:	f7fd ffdc 	bl	8002034 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 800407c:	2001      	movs	r0, #1
 800407e:	f7fd ffd9 	bl	8002034 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8004082:	2002      	movs	r0, #2
 8004084:	f7fd ffd6 	bl	8002034 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd ff77 	bl	8001f7c <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 800408e:	2001      	movs	r0, #1
 8004090:	f7fd ff74 	bl	8001f7c <rtc_interrupt_enable>
	__asm__ volatile ("CPSIE I\n");
 8004094:	b662      	cpsie	i
}
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000899 	.word	0x20000899
 800409c:	2000088c 	.word	0x2000088c
 80040a0:	20000890 	.word	0x20000890
 80040a4:	08005d00 	.word	0x08005d00
 80040a8:	08005d18 	.word	0x08005d18
 80040ac:	40002804 	.word	0x40002804
 80040b0:	40002800 	.word	0x40002800
 80040b4:	40002818 	.word	0x40002818
 80040b8:	40002808 	.word	0x40002808
 80040bc:	4000280c 	.word	0x4000280c
 80040c0:	08005d28 	.word	0x08005d28

080040c4 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 80040c4:	b510      	push	{r4, lr}
	if (!alarmFunc) { debug_print("alm? "); } ////
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <platform_set_alarm+0x2c>)
void platform_set_alarm(uint32_t millisec) {
 80040c8:	b082      	sub	sp, #8
	if (!alarmFunc) { debug_print("alm? "); } ////
 80040ca:	681b      	ldr	r3, [r3, #0]
void platform_set_alarm(uint32_t millisec) {
 80040cc:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 80040ce:	b15b      	cbz	r3, 80040e8 <platform_set_alarm+0x24>
	volatile uint32_t now = rtc_get_counter_val();
 80040d0:	f7fd ff28 	bl	8001f24 <rtc_get_counter_val>
 80040d4:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 80040d6:	f7fc fd53 	bl	8000b80 <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 80040da:	9801      	ldr	r0, [sp, #4]
 80040dc:	4420      	add	r0, r4
}
 80040de:	b002      	add	sp, #8
 80040e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_set_alarm_time(now + millisec);
 80040e4:	f7fd bede 	b.w	8001ea4 <rtc_set_alarm_time>
	if (!alarmFunc) { debug_print("alm? "); } ////
 80040e8:	4802      	ldr	r0, [pc, #8]	; (80040f4 <platform_set_alarm+0x30>)
 80040ea:	f7ff fea5 	bl	8003e38 <debug_print>
 80040ee:	e7ef      	b.n	80040d0 <platform_set_alarm+0xc>
 80040f0:	20000890 	.word	0x20000890
 80040f4:	08005cf8 	.word	0x08005cf8

080040f8 <millis>:
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 80040f8:	f7fd bf14 	b.w	8001f24 <rtc_get_counter_val>

080040fc <poll_restart_callback>:
    return 0;
}

static bool poll_restart_requested = false;

int poll_restart_callback(void) {
 80040fc:	b508      	push	{r3, lr}
    //  Call this function when we need to restart during polling.
    debug_println("restart callback");  debug_flush(); 
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <poll_restart_callback+0x18>)
 8004100:	f7ff fea0 	bl	8003e44 <debug_println>
 8004104:	f7ff fe1e 	bl	8003d44 <debug_flush>
    poll_restart_requested = true;
 8004108:	2201      	movs	r2, #1
 800410a:	4b03      	ldr	r3, [pc, #12]	; (8004118 <poll_restart_callback+0x1c>)
    return 0;
}
 800410c:	2000      	movs	r0, #0
    poll_restart_requested = true;
 800410e:	701a      	strb	r2, [r3, #0]
}
 8004110:	bd08      	pop	{r3, pc}
 8004112:	bf00      	nop
 8004114:	08005e38 	.word	0x08005e38
 8004118:	20000b6c 	.word	0x20000b6c

0800411c <bootloader_poll>:
int bootloader_poll(void) {
 800411c:	b508      	push	{r3, lr}
    last_poll = millis();
 800411e:	f7ff ffeb 	bl	80040f8 <millis>
    if (!usbd_dev) { return -1; }
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <bootloader_poll+0x28>)
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	b150      	cbz	r0, 800413e <bootloader_poll+0x22>
	usbd_poll(usbd_dev);
 8004128:	f7fc ff26 	bl	8000f78 <usbd_poll>
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 800412c:	f000 fa28 	bl	8004580 <get_usb_status>
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <bootloader_poll+0x2c>)
    last_status = status;
 8004132:	4a06      	ldr	r2, [pc, #24]	; (800414c <bootloader_poll+0x30>)
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 8004134:	6018      	str	r0, [r3, #0]
    last_status = status;
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	6011      	str	r1, [r2, #0]
    return status;  // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
 800413a:	6818      	ldr	r0, [r3, #0]
}
 800413c:	bd08      	pop	{r3, pc}
    if (!usbd_dev) { return -1; }
 800413e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004142:	bd08      	pop	{r3, pc}
 8004144:	200008c0 	.word	0x200008c0
 8004148:	200008bc 	.word	0x200008bc
 800414c:	200008b0 	.word	0x200008b0

08004150 <bootloader_start>:
int bootloader_start(void) {
 8004150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (usbd_dev) { return 1; }  // Already started, quit.
 8004154:	4c87      	ldr	r4, [pc, #540]	; (8004374 <bootloader_start+0x224>)
int bootloader_start(void) {
 8004156:	b089      	sub	sp, #36	; 0x24
    if (usbd_dev) { return 1; }  // Already started, quit.
 8004158:	6825      	ldr	r5, [r4, #0]
 800415a:	b11d      	cbz	r5, 8004164 <bootloader_start+0x14>
 800415c:	2001      	movs	r0, #1
}
 800415e:	b009      	add	sp, #36	; 0x24
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    debug_println("----bootloader");  // debug_flush();    
 8004164:	4884      	ldr	r0, [pc, #528]	; (8004378 <bootloader_start+0x228>)
    }
#endif  //  NOTUSED

static void get_serial_number(void) {
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 8004166:	ae08      	add	r6, sp, #32
    debug_println("----bootloader");  // debug_flush();    
 8004168:	f7ff fe6c 	bl	8003e44 <debug_println>
    boot_target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 800416c:	f000 fd84 	bl	8004c78 <boot_target_gpio_setup>
    serial[0] = '\0';
 8004170:	f806 5d1c 	strb.w	r5, [r6, #-28]!
    debug_println("boot_target_get_serial_number");  // debug_flush();
 8004174:	4881      	ldr	r0, [pc, #516]	; (800437c <bootloader_start+0x22c>)
 8004176:	f7ff fe65 	bl	8003e44 <debug_println>
    boot_target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 800417a:	2118      	movs	r1, #24
 800417c:	4630      	mov	r0, r6
 800417e:	f000 fdfb 	bl	8004d78 <boot_target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8004182:	487f      	ldr	r0, [pc, #508]	; (8004380 <bootloader_start+0x230>)
 8004184:	f7ff fe5e 	bl	8003e44 <debug_println>
    usb_set_serial_number(serial);
 8004188:	4630      	mov	r0, r6
 800418a:	f000 fa55 	bl	8004638 <usb_set_serial_number>
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) { 
 800418e:	f000 fd5f 	bl	8004c50 <boot_target_get_startup_mode>
 8004192:	2802      	cmp	r0, #2
 8004194:	d102      	bne.n	800419c <bootloader_start+0x4c>
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8004196:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <bootloader_start+0x234>)
 8004198:	f383 8808 	msr	MSP, r3
    debug_println("usb_setup");  // debug_flush();
 800419c:	487a      	ldr	r0, [pc, #488]	; (8004388 <bootloader_start+0x238>)
 800419e:	f7ff fe51 	bl	8003e44 <debug_println>
    usbd_dev = usb_setup();
 80041a2:	f000 f997 	bl	80044d4 <usb_setup>
 80041a6:	6020      	str	r0, [r4, #0]
    if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 80041a8:	f000 fd52 	bl	8004c50 <boot_target_get_startup_mode>
 80041ac:	2801      	cmp	r0, #1
 80041ae:	d106      	bne.n	80041be <bootloader_start+0x6e>
        target_set_bootloader_callback(bootloader_poll);
 80041b0:	4876      	ldr	r0, [pc, #472]	; (800438c <bootloader_start+0x23c>)
 80041b2:	f7fc fc3d 	bl	8000a30 <target_set_bootloader_callback>
        return 0; 
 80041b6:	2000      	movs	r0, #0
}
 80041b8:	b009      	add	sp, #36	; 0x24
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	baseloader_addr = NULL;
 80041be:	2500      	movs	r5, #0
 80041c0:	4e73      	ldr	r6, [pc, #460]	; (8004390 <bootloader_start+0x240>)
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 80041c2:	4f74      	ldr	r7, [pc, #464]	; (8004394 <bootloader_start+0x244>)
 80041c4:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80043fc <bootloader_start+0x2ac>
 80041c8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8004400 <bootloader_start+0x2b0>
 80041cc:	463b      	mov	r3, r7
 80041ce:	464a      	mov	r2, r9
 80041d0:	4641      	mov	r1, r8
 80041d2:	4630      	mov	r0, r6
	baseloader_addr = NULL;
 80041d4:	6035      	str	r5, [r6, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 80041d6:	f7fc f995 	bl	8000504 <baseloader_fetch>
 80041da:	4d6f      	ldr	r5, [pc, #444]	; (8004398 <bootloader_start+0x248>)
 80041dc:	6028      	str	r0, [r5, #0]
	debug_print("----baseloader "); if (baseloader_status == 0) { 
 80041de:	486f      	ldr	r0, [pc, #444]	; (800439c <bootloader_start+0x24c>)
 80041e0:	f7ff fe2a 	bl	8003e38 <debug_print>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8095 	bne.w	8004316 <bootloader_start+0x1c6>
        debug_print(" found "); debug_printhex_unsigned((uint32_t) baseloader_addr); 
 80041ec:	486c      	ldr	r0, [pc, #432]	; (80043a0 <bootloader_start+0x250>)
 80041ee:	f7ff fe23 	bl	8003e38 <debug_print>
 80041f2:	6830      	ldr	r0, [r6, #0]
 80041f4:	f7ff fe68 	bl	8003ec8 <debug_printhex_unsigned>
		debug_print(", dest "); debug_printhex_unsigned((uint32_t) dest);
 80041f8:	486a      	ldr	r0, [pc, #424]	; (80043a4 <bootloader_start+0x254>)
 80041fa:	f7ff fe1d 	bl	8003e38 <debug_print>
 80041fe:	f8d8 0000 	ldr.w	r0, [r8]
 8004202:	f7ff fe61 	bl	8003ec8 <debug_printhex_unsigned>
		debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8004206:	4868      	ldr	r0, [pc, #416]	; (80043a8 <bootloader_start+0x258>)
 8004208:	f7ff fe16 	bl	8003e38 <debug_print>
 800420c:	f8d9 0000 	ldr.w	r0, [r9]
 8004210:	f7ff fe5a 	bl	8003ec8 <debug_printhex_unsigned>
		debug_print(", len "); debug_printhex_unsigned(byte_count); debug_force_flush();  
 8004214:	4865      	ldr	r0, [pc, #404]	; (80043ac <bootloader_start+0x25c>)
 8004216:	f7ff fe0f 	bl	8003e38 <debug_print>
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f7ff fe54 	bl	8003ec8 <debug_printhex_unsigned>
 8004220:	f7ff fd9a 	bl	8003d58 <debug_force_flush>
		debug_print(", *func "); debug_printhex_unsigned(*(uint32_t *) baseloader_addr); debug_force_flush();  
 8004224:	4862      	ldr	r0, [pc, #392]	; (80043b0 <bootloader_start+0x260>)
 8004226:	f7ff fe07 	bl	8003e38 <debug_print>
 800422a:	6833      	ldr	r3, [r6, #0]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	f7ff fe4b 	bl	8003ec8 <debug_printhex_unsigned>
 8004232:	f7ff fd91 	bl	8003d58 <debug_force_flush>
    }; debug_println(""); debug_force_flush();
 8004236:	485f      	ldr	r0, [pc, #380]	; (80043b4 <bootloader_start+0x264>)
 8004238:	f7ff fe04 	bl	8003e44 <debug_println>
 800423c:	f7ff fd8c 	bl	8003d58 <debug_force_flush>
	if (baseloader_status == 0 && baseloader_addr) {
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	b98b      	cbnz	r3, 8004268 <bootloader_start+0x118>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	b17b      	cbz	r3, 8004268 <bootloader_start+0x118>
		baseloader_status = baseloader_addr(dest, src, byte_count);  //  Call the baseloader.
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	f8d9 1000 	ldr.w	r1, [r9]
 800424e:	f8d8 0000 	ldr.w	r0, [r8]
 8004252:	4798      	blx	r3
 8004254:	6028      	str	r0, [r5, #0]
		debug_print("baseloader failed "); debug_print_int(baseloader_status); debug_println("");  //  If it returned, it must have failed.
 8004256:	4858      	ldr	r0, [pc, #352]	; (80043b8 <bootloader_start+0x268>)
 8004258:	f7ff fdee 	bl	8003e38 <debug_print>
 800425c:	6828      	ldr	r0, [r5, #0]
 800425e:	f7ff fe0b 	bl	8003e78 <debug_print_int>
 8004262:	4854      	ldr	r0, [pc, #336]	; (80043b4 <bootloader_start+0x264>)
 8004264:	f7ff fdee 	bl	8003e44 <debug_println>
    debug_println("usbd polling...");  debug_flush();  debug_flush();  // test_hf2(); test_backup();          //  Test backup.
 8004268:	4854      	ldr	r0, [pc, #336]	; (80043bc <bootloader_start+0x26c>)
 800426a:	f7ff fdeb 	bl	8003e44 <debug_println>
 800426e:	f7ff fd69 	bl	8003d44 <debug_flush>
 8004272:	f7ff fd67 	bl	8003d44 <debug_flush>
    boot_target_set_restart_callback(poll_restart_callback);
 8004276:	4852      	ldr	r0, [pc, #328]	; (80043c0 <bootloader_start+0x270>)
 8004278:	f000 fd4c 	bl	8004d14 <boot_target_set_restart_callback>
            cycleCount = 0;
 800427c:	f04f 0900 	mov.w	r9, #0
            boot_target_set_led((msTimer++ % 500) < 50);
 8004280:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8004284:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8004404 <bootloader_start+0x2b4>
 8004288:	4f4e      	ldr	r7, [pc, #312]	; (80043c4 <bootloader_start+0x274>)
 800428a:	4e4f      	ldr	r6, [pc, #316]	; (80043c8 <bootloader_start+0x278>)
 800428c:	f8df a178 	ldr.w	sl, [pc, #376]	; 8004408 <bootloader_start+0x2b8>
 8004290:	4d4e      	ldr	r5, [pc, #312]	; (80043cc <bootloader_start+0x27c>)
        usbd_poll(usbd_dev);
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	f7fc fe70 	bl	8000f78 <usbd_poll>
        cycleCount++;
 8004298:	f8db 3000 	ldr.w	r3, [fp]
 800429c:	3301      	adds	r3, #1
        if (cycleCount >= 700) {
 800429e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
        cycleCount++;
 80042a2:	f8cb 3000 	str.w	r3, [fp]
        if (cycleCount >= 700) {
 80042a6:	d3f4      	bcc.n	8004292 <bootloader_start+0x142>
            boot_target_set_led((msTimer++ % 500) < 50);
 80042a8:	683b      	ldr	r3, [r7, #0]
            cycleCount = 0;
 80042aa:	f8cb 9000 	str.w	r9, [fp]
            boot_target_set_led((msTimer++ % 500) < 50);
 80042ae:	fba5 2003 	umull	r2, r0, r5, r3
 80042b2:	0940      	lsrs	r0, r0, #5
 80042b4:	fb08 3010 	mls	r0, r8, r0, r3
 80042b8:	2831      	cmp	r0, #49	; 0x31
 80042ba:	f103 0301 	add.w	r3, r3, #1
 80042be:	bf8c      	ite	hi
 80042c0:	2000      	movhi	r0, #0
 80042c2:	2001      	movls	r0, #1
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	f000 fccb 	bl	8004c60 <boot_target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 80042ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042ce:	6832      	ldr	r2, [r6, #0]
 80042d0:	fba5 0302 	umull	r0, r3, r5, r2
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	fb01 2313 	mls	r3, r1, r3, r2
 80042da:	3201      	adds	r2, #1
 80042dc:	6032      	str	r2, [r6, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1d7      	bne.n	8004292 <bootloader_start+0x142>
 80042e2:	f000 f94d 	bl	8004580 <get_usb_status>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1d3      	bne.n	8004292 <bootloader_start+0x142>
                debug_flush(); 
 80042ea:	f7ff fd2b 	bl	8003d44 <debug_flush>
                if (poll_restart_requested) {  //  Flush the log and restart.
 80042ee:	f89a 3000 	ldrb.w	r3, [sl]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0cd      	beq.n	8004292 <bootloader_start+0x142>
                    debug_println("restarting...");
 80042f6:	4836      	ldr	r0, [pc, #216]	; (80043d0 <bootloader_start+0x280>)
 80042f8:	f7ff fda4 	bl	8003e44 <debug_println>
                    debug_force_flush();
 80042fc:	f7ff fd2c 	bl	8003d58 <debug_force_flush>
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <bootloader_start+0x284>)
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8004302:	bf00      	nop
 8004304:	3b01      	subs	r3, #1
 8004306:	d1fc      	bne.n	8004302 <bootloader_start+0x1b2>
                    debug_println("done");
 8004308:	4833      	ldr	r0, [pc, #204]	; (80043d8 <bootloader_start+0x288>)
 800430a:	f7ff fd9b 	bl	8003e44 <debug_println>
                    debug_force_flush();
 800430e:	f7ff fd23 	bl	8003d58 <debug_force_flush>
                    scb_reset_system();
 8004312:	f7fc fc27 	bl	8000b64 <scb_reset_system>
        debug_print("not found "); debug_print_int(baseloader_status); debug_print(" ");
 8004316:	4831      	ldr	r0, [pc, #196]	; (80043dc <bootloader_start+0x28c>)
 8004318:	f7ff fd8e 	bl	8003e38 <debug_print>
 800431c:	6828      	ldr	r0, [r5, #0]
 800431e:	f7ff fdab 	bl	8003e78 <debug_print_int>
 8004322:	482f      	ldr	r0, [pc, #188]	; (80043e0 <bootloader_start+0x290>)
 8004324:	f7ff fd88 	bl	8003e38 <debug_print>
            (baseloader_status == -3) ? "too big " :
 8004328:	682b      	ldr	r3, [r5, #0]
        debug_print(
 800432a:	1cda      	adds	r2, r3, #3
 800432c:	d020      	beq.n	8004370 <bootloader_start+0x220>
            (baseloader_status == -3) ? "too big " :
 800432e:	482d      	ldr	r0, [pc, #180]	; (80043e4 <bootloader_start+0x294>)
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <bootloader_start+0x264>)
 8004332:	f113 0f04 	cmn.w	r3, #4
 8004336:	bf18      	it	ne
 8004338:	4610      	movne	r0, r2
        debug_print(
 800433a:	f7ff fd7d 	bl	8003e38 <debug_print>
        debug_printhex_unsigned(baseloader_fail);
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <bootloader_start+0x298>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f7ff fdc1 	bl	8003ec8 <debug_printhex_unsigned>
        if (baseloader_status == -4) { 
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	f47f af74 	bne.w	8004236 <bootloader_start+0xe6>
            debug_print(", oldapp "); debug_printhex_unsigned((uint32_t) FLASH_ADDRESS(application_start)); 
 800434e:	4827      	ldr	r0, [pc, #156]	; (80043ec <bootloader_start+0x29c>)
 8004350:	f7ff fd72 	bl	8003e38 <debug_print>
 8004354:	4826      	ldr	r0, [pc, #152]	; (80043f0 <bootloader_start+0x2a0>)
 8004356:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800435a:	f020 0003 	bic.w	r0, r0, #3
 800435e:	f7ff fdb3 	bl	8003ec8 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(byte_count); 
 8004362:	4824      	ldr	r0, [pc, #144]	; (80043f4 <bootloader_start+0x2a4>)
 8004364:	f7ff fd68 	bl	8003e38 <debug_print>
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f7ff fdad 	bl	8003ec8 <debug_printhex_unsigned>
 800436e:	e762      	b.n	8004236 <bootloader_start+0xe6>
        debug_print(
 8004370:	4821      	ldr	r0, [pc, #132]	; (80043f8 <bootloader_start+0x2a8>)
 8004372:	e7e2      	b.n	800433a <bootloader_start+0x1ea>
 8004374:	200008c0 	.word	0x200008c0
 8004378:	08005d48 	.word	0x08005d48
 800437c:	08005d58 	.word	0x08005d58
 8004380:	08005d78 	.word	0x08005d78
 8004384:	200047bc 	.word	0x200047bc
 8004388:	08005d90 	.word	0x08005d90
 800438c:	0800411d 	.word	0x0800411d
 8004390:	2000089c 	.word	0x2000089c
 8004394:	200008a4 	.word	0x200008a4
 8004398:	200008a0 	.word	0x200008a0
 800439c:	08005d9c 	.word	0x08005d9c
 80043a0:	08005dac 	.word	0x08005dac
 80043a4:	08005db4 	.word	0x08005db4
 80043a8:	08005dbc 	.word	0x08005dbc
 80043ac:	08005dc4 	.word	0x08005dc4
 80043b0:	08005dcc 	.word	0x08005dcc
 80043b4:	08005b40 	.word	0x08005b40
 80043b8:	08005dfc 	.word	0x08005dfc
 80043bc:	08005e10 	.word	0x08005e10
 80043c0:	080040fd 	.word	0x080040fd
 80043c4:	200008b4 	.word	0x200008b4
 80043c8:	2000042c 	.word	0x2000042c
 80043cc:	10624dd3 	.word	0x10624dd3
 80043d0:	08005e20 	.word	0x08005e20
 80043d4:	00989680 	.word	0x00989680
 80043d8:	08005e30 	.word	0x08005e30
 80043dc:	08005dd8 	.word	0x08005dd8
 80043e0:	08005fd0 	.word	0x08005fd0
 80043e4:	08005d44 	.word	0x08005d44
 80043e8:	20000540 	.word	0x20000540
 80043ec:	08005de4 	.word	0x08005de4
 80043f0:	08007001 	.word	0x08007001
 80043f4:	08005df0 	.word	0x08005df0
 80043f8:	08005d38 	.word	0x08005d38
 80043fc:	200008b8 	.word	0x200008b8
 8004400:	200008ac 	.word	0x200008ac
 8004404:	200008a8 	.word	0x200008a8
 8004408:	20000b6c 	.word	0x20000b6c

0800440c <bootloader_set_restart_callback>:
int bootloader_set_restart_callback(restart_callback_type *func) {
 800440c:	b508      	push	{r3, lr}
    boot_target_set_restart_callback(func);
 800440e:	f000 fc81 	bl	8004d14 <boot_target_set_restart_callback>
}
 8004412:	2000      	movs	r0, #0
 8004414:	bd08      	pop	{r3, pc}
 8004416:	bf00      	nop

08004418 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 8004418:	4b02      	ldr	r3, [pc, #8]	; (8004424 <hf2_connected+0xc>)
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	b90a      	cbnz	r2, 8004422 <hf2_connected+0xa>
    hf2_is_connected = 1;
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 8004422:	4770      	bx	lr
 8004424:	20000b6e 	.word	0x20000b6e

08004428 <usb_cdc_transmit>:
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <usb_cdc_transmit+0x28>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b16b      	cbz	r3, 800444a <usb_cdc_transmit+0x22>
	uint16_t len) {
 800442e:	b410      	push	{r4}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8004430:	4c08      	ldr	r4, [pc, #32]	; (8004454 <usb_cdc_transmit+0x2c>)
 8004432:	7824      	ldrb	r4, [r4, #0]
 8004434:	b12c      	cbz	r4, 8004442 <usb_cdc_transmit+0x1a>
    return cdcadm_transmit(usbd_dev, buf, len);
 8004436:	460a      	mov	r2, r1
}
 8004438:	bc10      	pop	{r4}
    return cdcadm_transmit(usbd_dev, buf, len);
 800443a:	4601      	mov	r1, r0
 800443c:	4618      	mov	r0, r3
 800443e:	f000 bd0b 	b.w	8004e58 <cdcadm_transmit>
}
 8004442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004446:	bc10      	pop	{r4}
 8004448:	4770      	bx	lr
 800444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444e:	4770      	bx	lr
 8004450:	20000960 	.word	0x20000960
 8004454:	20000b6d 	.word	0x20000b6d

08004458 <sof_callback>:
static void sof_callback(void) {
 8004458:	b508      	push	{r3, lr}
    last_frame_time = millis();
 800445a:	f7ff fe4d 	bl	80040f8 <millis>
 800445e:	4b01      	ldr	r3, [pc, #4]	; (8004464 <sof_callback+0xc>)
 8004460:	6018      	str	r0, [r3, #0]
}
 8004462:	bd08      	pop	{r3, pc}
 8004464:	20000940 	.word	0x20000940

08004468 <cdc_connected>:
    if (cdc_is_connected) { return; }
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <cdc_connected+0x14>)
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	b102      	cbz	r2, 8004470 <cdc_connected+0x8>
}
 800446e:	4770      	bx	lr
    cdc_is_connected = 1;
 8004470:	2201      	movs	r2, #1
    logger_add_output(usb_cdc_transmit);
 8004472:	4803      	ldr	r0, [pc, #12]	; (8004480 <cdc_connected+0x18>)
    cdc_is_connected = 1;
 8004474:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 8004476:	f7ff bc3f 	b.w	8003cf8 <logger_add_output>
 800447a:	bf00      	nop
 800447c:	20000b6d 	.word	0x20000b6d
 8004480:	08004429 	.word	0x08004429

08004484 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 8004486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448a:	4299      	cmp	r1, r3
  uint16_t wValue) {
 800448c:	4605      	mov	r5, r0
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 800448e:	d00b      	beq.n	80044a8 <set_aggregate_callback+0x24>
 8004490:	460e      	mov	r6, r1
 8004492:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <set_aggregate_callback+0x44>)
 8004494:	f104 0728 	add.w	r7, r4, #40	; 0x28
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
            if (!config_callback[i]) { break; }
 8004498:	f854 3b04 	ldr.w	r3, [r4], #4
 800449c:	b123      	cbz	r3, 80044a8 <set_aggregate_callback+0x24>
            (config_callback[i])(usbd_dev, wValue);
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80044a4:	42bc      	cmp	r4, r7
 80044a6:	d1f7      	bne.n	8004498 <set_aggregate_callback+0x14>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80044a8:	2200      	movs	r2, #0
 80044aa:	4628      	mov	r0, r5
 80044ac:	4611      	mov	r1, r2
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <set_aggregate_callback+0x48>)
 80044b0:	f7fc fe46 	bl	8001140 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80044b4:	2800      	cmp	r0, #0
 80044b6:	db00      	blt.n	80044ba <set_aggregate_callback+0x36>
}
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <set_aggregate_callback+0x4c>)
 80044bc:	f7ff fcc2 	bl	8003e44 <debug_println>
}
 80044c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80044c4:	f7ff bc3e 	b.w	8003d44 <debug_flush>
 80044c8:	200008c4 	.word	0x200008c4
 80044cc:	0800481d 	.word	0x0800481d
 80044d0:	08006048 	.word	0x08006048

080044d4 <usb_setup>:
usbd_device* usb_setup(void) {
 80044d4:	b510      	push	{r4, lr}
 80044d6:	b084      	sub	sp, #16
    const usbd_driver* driver = boot_target_usb_init();
 80044d8:	f000 fc06 	bl	8004ce8 <boot_target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 80044dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044e0:	2209      	movs	r2, #9
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <usb_setup+0x7c>)
 80044e4:	9102      	str	r1, [sp, #8]
 80044e6:	e9cd 2300 	strd	r2, r3, [sp]
 80044ea:	491a      	ldr	r1, [pc, #104]	; (8004554 <usb_setup+0x80>)
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <usb_setup+0x84>)
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <usb_setup+0x88>)
 80044f0:	f7fc fcfa 	bl	8000ee8 <usbd_init>
 80044f4:	4c1a      	ldr	r4, [pc, #104]	; (8004560 <usb_setup+0x8c>)
    usbd_register_sof_callback(usbd_dev, sof_callback);
 80044f6:	491b      	ldr	r1, [pc, #108]	; (8004564 <usb_setup+0x90>)
    usbd_dev = usbd_init(driver, &dev, &config, 
 80044f8:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 80044fa:	f7fc fd1f 	bl	8000f3c <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	4919      	ldr	r1, [pc, #100]	; (8004568 <usb_setup+0x94>)
 8004502:	f000 fcf9 	bl	8004ef8 <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	4918      	ldr	r1, [pc, #96]	; (800456c <usb_setup+0x98>)
 800450a:	f001 f8eb 	bl	80056e4 <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	4917      	ldr	r1, [pc, #92]	; (8004570 <usb_setup+0x9c>)
 8004512:	f001 f9ad 	bl	8005870 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 8004516:	6820      	ldr	r0, [r4, #0]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <usb_setup+0xa0>)
 800451a:	f000 fa45 	bl	80049a8 <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	2100      	movs	r1, #0
 8004522:	f000 faef 	bl	8004b04 <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	4913      	ldr	r1, [pc, #76]	; (8004578 <usb_setup+0xa4>)
 800452a:	f7fd f92b 	bl	8001784 <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 800452e:	2800      	cmp	r0, #0
 8004530:	db07      	blt.n	8004542 <usb_setup+0x6e>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004538:	f7ff ffa4 	bl	8004484 <set_aggregate_callback>
}
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	b004      	add	sp, #16
 8004540:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8004542:	480e      	ldr	r0, [pc, #56]	; (800457c <usb_setup+0xa8>)
 8004544:	f7ff fc7e 	bl	8003e44 <debug_println>
 8004548:	f7ff fbfc 	bl	8003d44 <debug_flush>
 800454c:	e7f1      	b.n	8004532 <usb_setup+0x5e>
 800454e:	bf00      	nop
 8004550:	20000a6c 	.word	0x20000a6c
 8004554:	08005f40 	.word	0x08005f40
 8004558:	20000438 	.word	0x20000438
 800455c:	08005ef8 	.word	0x08005ef8
 8004560:	20000960 	.word	0x20000960
 8004564:	08004459 	.word	0x08004459
 8004568:	08004469 	.word	0x08004469
 800456c:	08004419 	.word	0x08004419
 8004570:	08005ea8 	.word	0x08005ea8
 8004574:	080060fc 	.word	0x080060fc
 8004578:	08004485 	.word	0x08004485
 800457c:	08006118 	.word	0x08006118

08004580 <get_usb_status>:
volatile int get_usb_status(void) { 
 8004580:	b510      	push	{r4, lr}
    if (last_busy_time == 0) { return 0; }
 8004582:	4c09      	ldr	r4, [pc, #36]	; (80045a8 <get_usb_status+0x28>)
volatile int get_usb_status(void) { 
 8004584:	b082      	sub	sp, #8
    if (last_busy_time == 0) { return 0; }
 8004586:	6820      	ldr	r0, [r4, #0]
 8004588:	b160      	cbz	r0, 80045a4 <get_usb_status+0x24>
    volatile uint32_t now = millis();
 800458a:	f7ff fdb5 	bl	80040f8 <millis>
 800458e:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	9a01      	ldr	r2, [sp, #4]
 8004594:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004598:	3308      	adds	r3, #8
 800459a:	4293      	cmp	r3, r2
    last_busy_time = 0;
 800459c:	bf96      	itet	ls
 800459e:	2000      	movls	r0, #0
        return 1; 
 80045a0:	2001      	movhi	r0, #1
    last_busy_time = 0;
 80045a2:	6020      	strls	r0, [r4, #0]
}
 80045a4:	b002      	add	sp, #8
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	2000093c 	.word	0x2000093c

080045ac <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <aggregate_register_config_callback+0x34>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80045b0:	2300      	movs	r3, #0
 80045b2:	4622      	mov	r2, r4
		if (config_callback[i]) {
 80045b4:	f852 0b04 	ldr.w	r0, [r2], #4
 80045b8:	b178      	cbz	r0, 80045da <aggregate_register_config_callback+0x2e>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80045ba:	4288      	cmp	r0, r1
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80045bc:	f103 0301 	add.w	r3, r3, #1
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80045c0:	d009      	beq.n	80045d6 <aggregate_register_config_callback+0x2a>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80045c2:	2b0a      	cmp	r3, #10
 80045c4:	d1f6      	bne.n	80045b4 <aggregate_register_config_callback+0x8>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80045c6:	4807      	ldr	r0, [pc, #28]	; (80045e4 <aggregate_register_config_callback+0x38>)
 80045c8:	f7ff fc3c 	bl	8003e44 <debug_println>
 80045cc:	f7ff fbba 	bl	8003d44 <debug_flush>
	return -1;
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80045d4:	bd10      	pop	{r4, pc}
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80045d6:	2000      	movs	r0, #0
}
 80045d8:	bd10      	pop	{r4, pc}
		config_callback[i] = callback;
 80045da:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	200008c4 	.word	0x200008c4
 80045e4:	08005e80 	.word	0x08005e80

080045e8 <aggregate_register_callback>:
    usbd_control_callback callback) {
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	4f11      	ldr	r7, [pc, #68]	; (8004630 <aggregate_register_callback+0x48>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80045ec:	2500      	movs	r5, #0
 80045ee:	463c      	mov	r4, r7
		if (control_callback[i].cb) { 
 80045f0:	6860      	ldr	r0, [r4, #4]
 80045f2:	b1b0      	cbz	r0, 8004622 <aggregate_register_callback+0x3a>
            if (control_callback[i].type == type &&
 80045f4:	7826      	ldrb	r6, [r4, #0]
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80045f6:	3501      	adds	r5, #1
            if (control_callback[i].type == type &&
 80045f8:	428e      	cmp	r6, r1
 80045fa:	d104      	bne.n	8004606 <aggregate_register_callback+0x1e>
 80045fc:	7866      	ldrb	r6, [r4, #1]
 80045fe:	4296      	cmp	r6, r2
 8004600:	d101      	bne.n	8004606 <aggregate_register_callback+0x1e>
                control_callback[i].type_mask == type_mask &&
 8004602:	4298      	cmp	r0, r3
 8004604:	d00b      	beq.n	800461e <aggregate_register_callback+0x36>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004606:	2d0a      	cmp	r5, #10
 8004608:	f104 0408 	add.w	r4, r4, #8
 800460c:	d1f0      	bne.n	80045f0 <aggregate_register_callback+0x8>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 800460e:	4809      	ldr	r0, [pc, #36]	; (8004634 <aggregate_register_callback+0x4c>)
 8004610:	f7ff fc18 	bl	8003e44 <debug_println>
 8004614:	f7ff fb96 	bl	8003d44 <debug_flush>
	return -1;
 8004618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    return 0;
 800461e:	2000      	movs	r0, #0
}
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		control_callback[i].type_mask = type_mask;
 8004622:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
		control_callback[i].type = type;
 8004626:	f807 1035 	strb.w	r1, [r7, r5, lsl #3]
		control_callback[i].type_mask = type_mask;
 800462a:	7062      	strb	r2, [r4, #1]
		control_callback[i].cb = callback;
 800462c:	6063      	str	r3, [r4, #4]
}
 800462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004630:	200008ec 	.word	0x200008ec
 8004634:	08005e58 	.word	0x08005e58

08004638 <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
 8004638:	b510      	push	{r4, lr}
    serial_number[0] = '\0';
 800463a:	2400      	movs	r4, #0
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <usb_set_serial_number+0x18>)
 800463e:	701c      	strb	r4, [r3, #0]
    if (serial) {
 8004640:	b128      	cbz	r0, 800464e <usb_set_serial_number+0x16>
 8004642:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8004644:	2218      	movs	r2, #24
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fad1 	bl	8003bee <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 800464c:	7604      	strb	r4, [r0, #24]
    }
}
 800464e:	bd10      	pop	{r4, pc}
 8004650:	20000944 	.word	0x20000944

08004654 <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	4615      	mov	r5, r2
 8004658:	460c      	mov	r4, r1
    debug_print(msg); debug_print(" ");
 800465a:	f7ff fbed 	bl	8003e38 <debug_print>
 800465e:	480e      	ldr	r0, [pc, #56]	; (8004698 <dump_buffer+0x44>)
 8004660:	f7ff fbea 	bl	8003e38 <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 8004664:	4628      	mov	r0, r5
 8004666:	f7ff fc09 	bl	8003e7c <debug_print_unsigned>
 800466a:	480c      	ldr	r0, [pc, #48]	; (800469c <dump_buffer+0x48>)
 800466c:	f7ff fbe4 	bl	8003e38 <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 8004670:	2d00      	cmp	r5, #0
 8004672:	dd0b      	ble.n	800468c <dump_buffer+0x38>
 8004674:	3c01      	subs	r4, #1
        debug_printhex(buf[i]); debug_print(" "); 
 8004676:	4e08      	ldr	r6, [pc, #32]	; (8004698 <dump_buffer+0x44>)
 8004678:	4425      	add	r5, r4
 800467a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800467e:	f7ff fbff 	bl	8003e80 <debug_printhex>
 8004682:	4630      	mov	r0, r6
 8004684:	f7ff fbd8 	bl	8003e38 <debug_print>
    for (i = 0; i < len; i++) { 
 8004688:	42ac      	cmp	r4, r5
 800468a:	d1f6      	bne.n	800467a <dump_buffer+0x26>
    }
    debug_println("");
}
 800468c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 8004690:	4803      	ldr	r0, [pc, #12]	; (80046a0 <dump_buffer+0x4c>)
 8004692:	f7ff bbd7 	b.w	8003e44 <debug_println>
 8004696:	bf00      	nop
 8004698:	08005fd0 	.word	0x08005fd0
 800469c:	08005f54 	.word	0x08005f54
 80046a0:	08005b40 	.word	0x08005b40

080046a4 <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	460c      	mov	r4, r1
    debug_print(msg);
 80046a8:	f7ff fbc6 	bl	8003e38 <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80046ac:	4849      	ldr	r0, [pc, #292]	; (80047d4 <dump_usb_request+0x130>)
    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80046ae:	8865      	ldrh	r5, [r4, #2]
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80046b0:	f7ff fbc2 	bl	8003e38 <debug_print>
 80046b4:	7820      	ldrb	r0, [r4, #0]
 80046b6:	f7ff fbe3 	bl	8003e80 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 80046ba:	4847      	ldr	r0, [pc, #284]	; (80047d8 <dump_usb_request+0x134>)
 80046bc:	f7ff fbbc 	bl	8003e38 <debug_print>
 80046c0:	7860      	ldrb	r0, [r4, #1]
 80046c2:	f7ff fbdd 	bl	8003e80 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80046c6:	4845      	ldr	r0, [pc, #276]	; (80047dc <dump_usb_request+0x138>)
 80046c8:	f7ff fbb6 	bl	8003e38 <debug_print>
 80046cc:	8860      	ldrh	r0, [r4, #2]
	return wValue >> 8;
 80046ce:	0a2e      	lsrs	r6, r5, #8
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80046d0:	0a00      	lsrs	r0, r0, #8
 80046d2:	f7ff fbd5 	bl	8003e80 <debug_printhex>
 80046d6:	8860      	ldrh	r0, [r4, #2]
 80046d8:	b2c0      	uxtb	r0, r0
 80046da:	f7ff fbd1 	bl	8003e80 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 80046de:	4840      	ldr	r0, [pc, #256]	; (80047e0 <dump_usb_request+0x13c>)
 80046e0:	f7ff fbaa 	bl	8003e38 <debug_print>
 80046e4:	88a0      	ldrh	r0, [r4, #4]
 80046e6:	0a00      	lsrs	r0, r0, #8
 80046e8:	f7ff fbca 	bl	8003e80 <debug_printhex>
 80046ec:	88a0      	ldrh	r0, [r4, #4]
 80046ee:	b2c0      	uxtb	r0, r0
 80046f0:	f7ff fbc6 	bl	8003e80 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 80046f4:	483b      	ldr	r0, [pc, #236]	; (80047e4 <dump_usb_request+0x140>)
 80046f6:	f7ff fb9f 	bl	8003e38 <debug_print>
 80046fa:	88e0      	ldrh	r0, [r4, #6]
 80046fc:	0a00      	lsrs	r0, r0, #8
 80046fe:	f7ff fbbf 	bl	8003e80 <debug_printhex>
 8004702:	88e0      	ldrh	r0, [r4, #6]
 8004704:	b2c0      	uxtb	r0, r0
 8004706:	f7ff fbbb 	bl	8003e80 <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 800470a:	7823      	ldrb	r3, [r4, #0]
 800470c:	b9cb      	cbnz	r3, 8004742 <dump_usb_request+0x9e>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 800470e:	7863      	ldrb	r3, [r4, #1]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d043      	beq.n	800479c <dump_usb_request+0xf8>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 8004714:	2b09      	cmp	r3, #9
            debug_print(", SET_CFG    ");
 8004716:	bf0c      	ite	eq
 8004718:	4833      	ldreq	r0, [pc, #204]	; (80047e8 <dump_usb_request+0x144>)
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 800471a:	4834      	ldrne	r0, [pc, #208]	; (80047ec <dump_usb_request+0x148>)
 800471c:	f7ff fb8c 	bl	8003e38 <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8004720:	4833      	ldr	r0, [pc, #204]	; (80047f0 <dump_usb_request+0x14c>)
 8004722:	f7ff fb89 	bl	8003e38 <debug_print>
 8004726:	4630      	mov	r0, r6
 8004728:	f7ff fbaa 	bl	8003e80 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 800472c:	4831      	ldr	r0, [pc, #196]	; (80047f4 <dump_usb_request+0x150>)
 800472e:	f7ff fb83 	bl	8003e38 <debug_print>
 8004732:	b2e8      	uxtb	r0, r5
 8004734:	f7ff fba4 	bl	8003e80 <debug_printhex>
    }
    debug_println("");
}
 8004738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 800473c:	482e      	ldr	r0, [pc, #184]	; (80047f8 <dump_usb_request+0x154>)
 800473e:	f7ff bb81 	b.w	8003e44 <debug_println>
    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d1f8      	bne.n	8004738 <dump_usb_request+0x94>
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8004746:	7863      	ldrb	r3, [r4, #1]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d1e3      	bne.n	8004714 <dump_usb_request+0x70>
            debug_print(", GET_DES");
 800474c:	482b      	ldr	r0, [pc, #172]	; (80047fc <dump_usb_request+0x158>)
 800474e:	f7ff fb73 	bl	8003e38 <debug_print>
            switch(desc_type) {
 8004752:	1e73      	subs	r3, r6, #1
 8004754:	2b0e      	cmp	r3, #14
 8004756:	d8e3      	bhi.n	8004720 <dump_usb_request+0x7c>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <dump_usb_request+0xbc>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	080047cd 	.word	0x080047cd
 8004764:	080047c5 	.word	0x080047c5
 8004768:	080047bd 	.word	0x080047bd
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047ad 	.word	0x080047ad
 8004774:	08004721 	.word	0x08004721
 8004778:	08004721 	.word	0x08004721
 800477c:	08004721 	.word	0x08004721
 8004780:	08004721 	.word	0x08004721
 8004784:	08004721 	.word	0x08004721
 8004788:	08004721 	.word	0x08004721
 800478c:	08004721 	.word	0x08004721
 8004790:	08004721 	.word	0x08004721
 8004794:	08004721 	.word	0x08004721
 8004798:	080047a5 	.word	0x080047a5
            debug_print(", SET_ADR    ");
 800479c:	4818      	ldr	r0, [pc, #96]	; (8004800 <dump_usb_request+0x15c>)
 800479e:	f7ff fb4b 	bl	8003e38 <debug_print>
 80047a2:	e7bd      	b.n	8004720 <dump_usb_request+0x7c>
                case 15: debug_print("_BOS"); break;
 80047a4:	4817      	ldr	r0, [pc, #92]	; (8004804 <dump_usb_request+0x160>)
 80047a6:	f7ff fb47 	bl	8003e38 <debug_print>
 80047aa:	e7b9      	b.n	8004720 <dump_usb_request+0x7c>
                case 5: debug_print("_ENP"); break;
 80047ac:	4816      	ldr	r0, [pc, #88]	; (8004808 <dump_usb_request+0x164>)
 80047ae:	f7ff fb43 	bl	8003e38 <debug_print>
 80047b2:	e7b5      	b.n	8004720 <dump_usb_request+0x7c>
                case 4: debug_print("_INF"); break;
 80047b4:	4815      	ldr	r0, [pc, #84]	; (800480c <dump_usb_request+0x168>)
 80047b6:	f7ff fb3f 	bl	8003e38 <debug_print>
 80047ba:	e7b1      	b.n	8004720 <dump_usb_request+0x7c>
                case 3: debug_print("_STR"); break;
 80047bc:	4814      	ldr	r0, [pc, #80]	; (8004810 <dump_usb_request+0x16c>)
 80047be:	f7ff fb3b 	bl	8003e38 <debug_print>
 80047c2:	e7ad      	b.n	8004720 <dump_usb_request+0x7c>
                case 2: debug_print("_CFG"); break;
 80047c4:	4813      	ldr	r0, [pc, #76]	; (8004814 <dump_usb_request+0x170>)
 80047c6:	f7ff fb37 	bl	8003e38 <debug_print>
 80047ca:	e7a9      	b.n	8004720 <dump_usb_request+0x7c>
                case 1: debug_print("_DEV"); break;
 80047cc:	4812      	ldr	r0, [pc, #72]	; (8004818 <dump_usb_request+0x174>)
 80047ce:	f7ff fb33 	bl	8003e38 <debug_print>
 80047d2:	e7a5      	b.n	8004720 <dump_usb_request+0x7c>
 80047d4:	08005f58 	.word	0x08005f58
 80047d8:	08005f60 	.word	0x08005f60
 80047dc:	08005f68 	.word	0x08005f68
 80047e0:	08005f70 	.word	0x08005f70
 80047e4:	08005dc4 	.word	0x08005dc4
 80047e8:	08005fc4 	.word	0x08005fc4
 80047ec:	08005fd4 	.word	0x08005fd4
 80047f0:	08005fd8 	.word	0x08005fd8
 80047f4:	08005fdc 	.word	0x08005fdc
 80047f8:	08005b40 	.word	0x08005b40
 80047fc:	08005f78 	.word	0x08005f78
 8004800:	08005fb4 	.word	0x08005fb4
 8004804:	08005fac 	.word	0x08005fac
 8004808:	08005fa4 	.word	0x08005fa4
 800480c:	08005f9c 	.word	0x08005f9c
 8004810:	08005f94 	.word	0x08005f94
 8004814:	08005f8c 	.word	0x08005f8c
 8004818:	08005f84 	.word	0x08005f84

0800481c <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8004820:	780c      	ldrb	r4, [r1, #0]
	usbd_control_complete_callback *complete) {
 8004822:	b083      	sub	sp, #12
 8004824:	460e      	mov	r6, r1
 8004826:	4681      	mov	r9, r0
 8004828:	4692      	mov	sl, r2
 800482a:	4698      	mov	r8, r3
 800482c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8004830:	b914      	cbnz	r4, 8004838 <aggregate_callback+0x1c>
 8004832:	784b      	ldrb	r3, [r1, #1]
 8004834:	2b05      	cmp	r3, #5
 8004836:	d031      	beq.n	800489c <aggregate_callback+0x80>
 8004838:	4c23      	ldr	r4, [pc, #140]	; (80048c8 <aggregate_callback+0xac>)
 800483a:	f104 0750 	add.w	r7, r4, #80	; 0x50
        if (control_callback[i].cb == NULL) { break; }
 800483e:	6865      	ldr	r5, [r4, #4]
 8004840:	b195      	cbz	r5, 8004868 <aggregate_callback+0x4c>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 8004842:	7861      	ldrb	r1, [r4, #1]
 8004844:	7833      	ldrb	r3, [r6, #0]
 8004846:	7822      	ldrb	r2, [r4, #0]
 8004848:	400b      	ands	r3, r1
 800484a:	429a      	cmp	r2, r3
 800484c:	f104 0408 	add.w	r4, r4, #8
 8004850:	d108      	bne.n	8004864 <aggregate_callback+0x48>
            result = control_callback[i].cb(
 8004852:	f8cd b000 	str.w	fp, [sp]
 8004856:	4643      	mov	r3, r8
 8004858:	4652      	mov	r2, sl
 800485a:	4631      	mov	r1, r6
 800485c:	4648      	mov	r0, r9
 800485e:	47a8      	blx	r5
            if (result == USBD_REQ_HANDLED ||
 8004860:	2801      	cmp	r0, #1
 8004862:	d914      	bls.n	800488e <aggregate_callback+0x72>
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004864:	42bc      	cmp	r4, r7
 8004866:	d1ea      	bne.n	800483e <aggregate_callback+0x22>
    last_busy_time = millis();
 8004868:	f7ff fc46 	bl	80040f8 <millis>
 800486c:	4602      	mov	r2, r0
 800486e:	4b17      	ldr	r3, [pc, #92]	; (80048cc <aggregate_callback+0xb0>)
    debug_print(".");
 8004870:	4817      	ldr	r0, [pc, #92]	; (80048d0 <aggregate_callback+0xb4>)
    last_busy_time = millis();
 8004872:	601a      	str	r2, [r3, #0]
    debug_print(".");
 8004874:	f7ff fae0 	bl	8003e38 <debug_print>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 8004878:	7833      	ldrb	r3, [r6, #0]
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d102      	bne.n	8004884 <aggregate_callback+0x68>
 800487e:	7873      	ldrb	r3, [r6, #1]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d007      	beq.n	8004894 <aggregate_callback+0x78>
	    dump_usb_request(">> ", req);
 8004884:	4813      	ldr	r0, [pc, #76]	; (80048d4 <aggregate_callback+0xb8>)
 8004886:	4631      	mov	r1, r6
 8004888:	f7ff ff0c 	bl	80046a4 <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 800488c:	2002      	movs	r0, #2
}
 800488e:	b003      	add	sp, #12
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return USBD_REQ_NEXT_CALLBACK;
 8004894:	2002      	movs	r0, #2
}
 8004896:	b003      	add	sp, #12
 8004898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    last_busy_time = millis();
 800489c:	f7ff fc2c 	bl	80040f8 <millis>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <aggregate_callback+0xb0>)
    debug_print(".");
 80048a4:	480a      	ldr	r0, [pc, #40]	; (80048d0 <aggregate_callback+0xb4>)
    last_busy_time = millis();
 80048a6:	601a      	str	r2, [r3, #0]
    debug_print(".");
 80048a8:	f7ff fac6 	bl	8003e38 <debug_print>
        debug_println("SET_ADR");
 80048ac:	480a      	ldr	r0, [pc, #40]	; (80048d8 <aggregate_callback+0xbc>)
 80048ae:	f7ff fac9 	bl	8003e44 <debug_println>
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80048b2:	4643      	mov	r3, r8
 80048b4:	4652      	mov	r2, sl
 80048b6:	4631      	mov	r1, r6
 80048b8:	4648      	mov	r0, r9
        *len = 0;          //  Return an empty message.
 80048ba:	f8a8 4000 	strh.w	r4, [r8]
}
 80048be:	b003      	add	sp, #12
 80048c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80048c4:	f7fc bf78 	b.w	80017b8 <_usbd_standard_request_device>
 80048c8:	200008ec 	.word	0x200008ec
 80048cc:	2000093c 	.word	0x2000093c
 80048d0:	08005e2c 	.word	0x08005e2c
 80048d4:	08005e54 	.word	0x08005e54
 80048d8:	08005e4c 	.word	0x08005e4c

080048dc <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 80048dc:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 80048de:	227f      	movs	r2, #127	; 0x7f
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <webusb_set_config+0x20>)
 80048e2:	2140      	movs	r1, #64	; 0x40
 80048e4:	f7ff fe80 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 80048e8:	2800      	cmp	r0, #0
 80048ea:	db00      	blt.n	80048ee <webusb_set_config+0x12>
}
 80048ec:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 80048ee:	4804      	ldr	r0, [pc, #16]	; (8004900 <webusb_set_config+0x24>)
 80048f0:	f7ff faa8 	bl	8003e44 <debug_println>
}
 80048f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 80048f8:	f7ff ba24 	b.w	8003d44 <debug_flush>
 80048fc:	08004905 	.word	0x08004905
 8004900:	08006188 	.word	0x08006188

08004904 <webusb_control_vendor_request>:
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004904:	7808      	ldrb	r0, [r1, #0]
 8004906:	3040      	adds	r0, #64	; 0x40
 8004908:	b2c0      	uxtb	r0, r0
 800490a:	2801      	cmp	r0, #1
 800490c:	d81e      	bhi.n	800494c <webusb_control_vendor_request+0x48>
									 usbd_control_complete_callback* complete) {
 800490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8004912:	7848      	ldrb	r0, [r1, #1]
 8004914:	460c      	mov	r4, r1
 8004916:	2822      	cmp	r0, #34	; 0x22
 8004918:	d115      	bne.n	8004946 <webusb_control_vendor_request+0x42>
 800491a:	461d      	mov	r5, r3
	switch (req->wIndex) {
 800491c:	888b      	ldrh	r3, [r1, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d116      	bne.n	8004950 <webusb_control_vendor_request+0x4c>
			uint16_t index = req->wValue;
 8004922:	884c      	ldrh	r4, [r1, #2]
			if (index == 0) {
 8004924:	b10c      	cbz	r4, 800492a <webusb_control_vendor_request+0x26>
			if (index == 1) {
 8004926:	2c01      	cmp	r4, #1
 8004928:	d017      	beq.n	800495a <webusb_control_vendor_request+0x56>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 800492a:	481a      	ldr	r0, [pc, #104]	; (8004994 <webusb_control_vendor_request+0x90>)
 800492c:	f7ff fa84 	bl	8003e38 <debug_print>
 8004930:	4620      	mov	r0, r4
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8004932:	f7ff faa3 	bl	8003e7c <debug_print_unsigned>
 8004936:	4818      	ldr	r0, [pc, #96]	; (8004998 <webusb_control_vendor_request+0x94>)
 8004938:	f7ff fa84 	bl	8003e44 <debug_println>
 800493c:	f7ff fa02 	bl	8003d44 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 8004940:	2000      	movs	r0, #0
}
 8004942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004946:	2002      	movs	r0, #2
}
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 800494c:	2002      	movs	r0, #2
}
 800494e:	4770      	bx	lr
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8004950:	4812      	ldr	r0, [pc, #72]	; (800499c <webusb_control_vendor_request+0x98>)
 8004952:	f7ff fa71 	bl	8003e38 <debug_print>
 8004956:	88a0      	ldrh	r0, [r4, #4]
 8004958:	e7eb      	b.n	8004932 <webusb_control_vendor_request+0x2e>
				dump_usb_request("weburl", req); // debug_flush(); ////
 800495a:	4811      	ldr	r0, [pc, #68]	; (80049a0 <webusb_control_vendor_request+0x9c>)
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 800495c:	6817      	ldr	r7, [r2, #0]
				dump_usb_request("weburl", req); // debug_flush(); ////
 800495e:	f7ff fea1 	bl	80046a4 <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <webusb_control_vendor_request+0xa0>)
 8004964:	f8d3 8000 	ldr.w	r8, [r3]
 8004968:	4640      	mov	r0, r8
 800496a:	f7ff f8f1 	bl	8003b50 <strlen>
				url->bDescriptorType = WEBUSB_DT_URL;
 800496e:	2303      	movs	r3, #3
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8004970:	18c6      	adds	r6, r0, r3
 8004972:	b2f6      	uxtb	r6, r6
				size_t url_len = strlen(webusb_https_url);
 8004974:	4602      	mov	r2, r0
				url->bDescriptorType = WEBUSB_DT_URL;
 8004976:	707b      	strb	r3, [r7, #1]
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8004978:	703e      	strb	r6, [r7, #0]
				memcpy(&url->URL, webusb_https_url, url_len);
 800497a:	18f8      	adds	r0, r7, r3
 800497c:	4641      	mov	r1, r8
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 800497e:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 8004980:	f7ff f8ce 	bl	8003b20 <memcpy>
				*len = MIN(*len, url->bLength);
 8004984:	882b      	ldrh	r3, [r5, #0]
				status = USBD_REQ_HANDLED;
 8004986:	4620      	mov	r0, r4
				*len = MIN(*len, url->bLength);
 8004988:	429e      	cmp	r6, r3
 800498a:	bf28      	it	cs
 800498c:	461e      	movcs	r6, r3
 800498e:	802e      	strh	r6, [r5, #0]
 8004990:	e7da      	b.n	8004948 <webusb_control_vendor_request+0x44>
 8004992:	bf00      	nop
 8004994:	08006130 	.word	0x08006130
 8004998:	08005b40 	.word	0x08005b40
 800499c:	08006154 	.word	0x08006154
 80049a0:	0800614c 	.word	0x0800614c
 80049a4:	20000964 	.word	0x20000964

080049a8 <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 80049a8:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <webusb_setup+0x40>)
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 80049aa:	b510      	push	{r4, lr}

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <webusb_setup+0x44>)
	webusb_https_url = https_url;
 80049ae:	6011      	str	r1, [r2, #0]
	int status = aggregate_register_callback(
 80049b0:	227f      	movs	r2, #127	; 0x7f
 80049b2:	2140      	movs	r1, #64	; 0x40
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 80049b4:	4604      	mov	r4, r0
	int status = aggregate_register_callback(
 80049b6:	f7ff fe17 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80049ba:	2800      	cmp	r0, #0
 80049bc:	db0d      	blt.n	80049da <webusb_setup+0x32>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 80049be:	4620      	mov	r0, r4
 80049c0:	490b      	ldr	r1, [pc, #44]	; (80049f0 <webusb_setup+0x48>)
 80049c2:	f7ff fdf3 	bl	80045ac <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80049c6:	2800      	cmp	r0, #0
 80049c8:	db00      	blt.n	80049cc <webusb_setup+0x24>
}
 80049ca:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80049cc:	4809      	ldr	r0, [pc, #36]	; (80049f4 <webusb_setup+0x4c>)
 80049ce:	f7ff fa39 	bl	8003e44 <debug_println>
}
 80049d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80049d6:	f7ff b9b5 	b.w	8003d44 <debug_flush>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 80049da:	4806      	ldr	r0, [pc, #24]	; (80049f4 <webusb_setup+0x4c>)
 80049dc:	f7ff fa32 	bl	8003e44 <debug_println>
 80049e0:	f7ff f9b0 	bl	8003d44 <debug_flush>
 80049e4:	e7eb      	b.n	80049be <webusb_setup+0x16>
 80049e6:	bf00      	nop
 80049e8:	20000964 	.word	0x20000964
 80049ec:	08004905 	.word	0x08004905
 80049f0:	080048dd 	.word	0x080048dd
 80049f4:	080061a8 	.word	0x080061a8

080049f8 <winusb_control_vendor_request>:
}

static int winusb_control_vendor_request(usbd_device *usbd_dev,
					struct usb_setup_data *req,
					uint8_t **buf, uint16_t *len,
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80049fa:	780d      	ldrb	r5, [r1, #0]
 80049fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8004a00:	b2c0      	uxtb	r0, r0
 8004a02:	2801      	cmp	r0, #1
 8004a04:	d80b      	bhi.n	8004a1e <winusb_control_vendor_request+0x26>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8004a06:	7848      	ldrb	r0, [r1, #1]
 8004a08:	2821      	cmp	r0, #33	; 0x21
 8004a0a:	d108      	bne.n	8004a1e <winusb_control_vendor_request+0x26>

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004a0c:	2dc0      	cmp	r5, #192	; 0xc0
 8004a0e:	461f      	mov	r7, r3
 8004a10:	4616      	mov	r6, r2
 8004a12:	888b      	ldrh	r3, [r1, #4]
 8004a14:	d105      	bne.n	8004a22 <winusb_control_vendor_request+0x2a>
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	d024      	beq.n	8004a64 <winusb_control_vendor_request+0x6c>
#ifdef NOTUSED
		uint8_t *b = (uint8_t*) &msos20_descriptor_set; int i;
		debug_print_unsigned(MSOS20_DESCRIPTOR_SET_SIZE); debug_print(" / ");
		for (i = 0; i < MSOS20_DESCRIPTOR_SET_SIZE; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d015      	beq.n	8004a4a <winusb_control_vendor_request+0x52>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004a1e:	2002      	movs	r0, #2

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8004a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	d1fb      	bne.n	8004a1e <winusb_control_vendor_request+0x26>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <winusb_control_vendor_request+0x84>)
 8004a28:	884b      	ldrh	r3, [r1, #2]
 8004a2a:	7c12      	ldrb	r2, [r2, #16]
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 8004a2c:	b2db      	uxtb	r3, r3
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d1f5      	bne.n	8004a1e <winusb_control_vendor_request+0x26>
		dump_usb_request("winprp", req); // debug_flush(); ////
 8004a32:	4813      	ldr	r0, [pc, #76]	; (8004a80 <winusb_control_vendor_request+0x88>)
 8004a34:	f7ff fe36 	bl	80046a4 <dump_usb_request>
		*len = MIN(*len, guid.header.dwLength);
 8004a38:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*)(&guid);
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <winusb_control_vendor_request+0x8c>)
		*len = MIN(*len, guid.header.dwLength);
 8004a3c:	2b92      	cmp	r3, #146	; 0x92
 8004a3e:	bf28      	it	cs
 8004a40:	2392      	movcs	r3, #146	; 0x92
		*buf = (uint8_t*)(&guid);
 8004a42:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 8004a44:	2001      	movs	r0, #1
		*len = MIN(*len, guid.header.dwLength);
 8004a46:	803b      	strh	r3, [r7, #0]
}
 8004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("winid", req); // debug_flush(); ////
 8004a4a:	480f      	ldr	r0, [pc, #60]	; (8004a88 <winusb_control_vendor_request+0x90>)
 8004a4c:	f7ff fe2a 	bl	80046a4 <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <winusb_control_vendor_request+0x84>)
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004a52:	883b      	ldrh	r3, [r7, #0]
 8004a54:	6811      	ldr	r1, [r2, #0]
		status = USBD_REQ_HANDLED;
 8004a56:	2001      	movs	r0, #1
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf28      	it	cs
 8004a5c:	460b      	movcs	r3, r1
		*buf = (uint8_t*)(&winusb_wcid);
 8004a5e:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004a60:	803b      	strh	r3, [r7, #0]
}
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("windes", req); // debug_flush(); ////
 8004a64:	4809      	ldr	r0, [pc, #36]	; (8004a8c <winusb_control_vendor_request+0x94>)
 8004a66:	f7ff fe1d 	bl	80046a4 <dump_usb_request>
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004a6a:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*) &msos20_descriptor_set;
 8004a6c:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <winusb_control_vendor_request+0x98>)
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004a6e:	2bb2      	cmp	r3, #178	; 0xb2
 8004a70:	bf28      	it	cs
 8004a72:	23b2      	movcs	r3, #178	; 0xb2
		*buf = (uint8_t*) &msos20_descriptor_set;
 8004a74:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 8004a76:	2001      	movs	r0, #1
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004a78:	803b      	strh	r3, [r7, #0]
}
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	20000510 	.word	0x20000510
 8004a80:	08006280 	.word	0x08006280
 8004a84:	080061c0 	.word	0x080061c0
 8004a88:	08006278 	.word	0x08006278
 8004a8c:	08006270 	.word	0x08006270
 8004a90:	2000045c 	.word	0x2000045c

08004a94 <winusb_set_config>:

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004a94:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8004a96:	2260      	movs	r2, #96	; 0x60
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <winusb_set_config+0x20>)
 8004a9a:	2140      	movs	r1, #64	; 0x40
 8004a9c:	f7ff fda4 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	db00      	blt.n	8004aa6 <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 8004aa4:	bd08      	pop	{r3, pc}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8004aa6:	4804      	ldr	r0, [pc, #16]	; (8004ab8 <winusb_set_config+0x24>)
 8004aa8:	f7ff f9cc 	bl	8003e44 <debug_println>
}
 8004aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8004ab0:	f7ff b948 	b.w	8003d44 <debug_flush>
 8004ab4:	080049f9 	.word	0x080049f9
 8004ab8:	08006290 	.word	0x08006290

08004abc <winusb_descriptor_request>:
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 8004abc:	b538      	push	{r3, r4, r5, lr}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8004abe:	780c      	ldrb	r4, [r1, #0]
 8004ac0:	f014 0f60 	tst.w	r4, #96	; 0x60
 8004ac4:	d117      	bne.n	8004af6 <winusb_descriptor_request+0x3a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8004ac6:	784c      	ldrb	r4, [r1, #1]
 8004ac8:	2c06      	cmp	r4, #6
 8004aca:	d114      	bne.n	8004af6 <winusb_descriptor_request+0x3a>
 8004acc:	8848      	ldrh	r0, [r1, #2]
 8004ace:	0a04      	lsrs	r4, r0, #8
 8004ad0:	2c03      	cmp	r4, #3
 8004ad2:	d110      	bne.n	8004af6 <winusb_descriptor_request+0x3a>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8004ad4:	b2c0      	uxtb	r0, r0
 8004ad6:	28ee      	cmp	r0, #238	; 0xee
 8004ad8:	d10d      	bne.n	8004af6 <winusb_descriptor_request+0x3a>
 8004ada:	461c      	mov	r4, r3
			dump_usb_request("winee", req); // debug_flush(); ////
 8004adc:	4807      	ldr	r0, [pc, #28]	; (8004afc <winusb_descriptor_request+0x40>)
 8004ade:	4615      	mov	r5, r2
 8004ae0:	f7ff fde0 	bl	80046a4 <dump_usb_request>
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004ae4:	8823      	ldrh	r3, [r4, #0]
			*buf = (uint8_t*) &winusb_string_descriptor;
 8004ae6:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <winusb_descriptor_request+0x44>)
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004ae8:	2b12      	cmp	r3, #18
 8004aea:	bf28      	it	cs
 8004aec:	2312      	movcs	r3, #18
			*buf = (uint8_t*) &winusb_string_descriptor;
 8004aee:	602a      	str	r2, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8004af0:	2001      	movs	r0, #1
 8004af2:	8023      	strh	r3, [r4, #0]
}
 8004af4:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8004af6:	2002      	movs	r0, #2
}
 8004af8:	bd38      	pop	{r3, r4, r5, pc}
 8004afa:	bf00      	nop
 8004afc:	08006288 	.word	0x08006288
 8004b00:	080062c8 	.word	0x080062c8

08004b04 <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <winusb_setup+0x48>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8004b06:	b570      	push	{r4, r5, r6, lr}
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8004b08:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004b0a:	4911      	ldr	r1, [pc, #68]	; (8004b50 <winusb_setup+0x4c>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8004b0c:	4604      	mov	r4, r0
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004b0e:	f7ff fd4d 	bl	80045ac <aggregate_register_config_callback>

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <winusb_setup+0x50>)
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8004b14:	4605      	mov	r5, r0
	int status1 = aggregate_register_callback(
 8004b16:	2260      	movs	r2, #96	; 0x60
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff fd64 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <winusb_setup+0x54>)
	int status1 = aggregate_register_callback(
 8004b22:	4606      	mov	r6, r0
	int status2 = aggregate_register_callback(
 8004b24:	221f      	movs	r2, #31
 8004b26:	4620      	mov	r0, r4
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f7ff fd5d 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	db04      	blt.n	8004b3c <winusb_setup+0x38>
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	db02      	blt.n	8004b3c <winusb_setup+0x38>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	db00      	blt.n	8004b3c <winusb_setup+0x38>
}
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004b3c:	4807      	ldr	r0, [pc, #28]	; (8004b5c <winusb_setup+0x58>)
 8004b3e:	f7ff f981 	bl	8003e44 <debug_println>
}
 8004b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8004b46:	f7ff b8fd 	b.w	8003d44 <debug_flush>
 8004b4a:	bf00      	nop
 8004b4c:	20000510 	.word	0x20000510
 8004b50:	08004a95 	.word	0x08004a95
 8004b54:	080049f9 	.word	0x080049f9
 8004b58:	08004abd 	.word	0x08004abd
 8004b5c:	080062b0 	.word	0x080062b0

08004b60 <boot_target_get_startup_mode.part.0>:
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
    return false;
}

enum StartupMode boot_target_get_startup_mode(void) {
 8004b60:	b538      	push	{r3, r4, r5, lr}
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 8004b62:	4d2f      	ldr	r5, [pc, #188]	; (8004c20 <boot_target_get_startup_mode.part.0+0xc0>)
 8004b64:	682c      	ldr	r4, [r5, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 8004b66:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8004b6a:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 8004b6e:	d015      	beq.n	8004b9c <boot_target_get_startup_mode.part.0+0x3c>
 8004b70:	f004 437f 	and.w	r3, r4, #4278190080	; 0xff000000
 8004b74:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 8004b78:	d010      	beq.n	8004b9c <boot_target_get_startup_mode.part.0+0x3c>
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
 8004b7a:	482a      	ldr	r0, [pc, #168]	; (8004c24 <boot_target_get_startup_mode.part.0+0xc4>)
 8004b7c:	f7ff f95c 	bl	8003e38 <debug_print>
 8004b80:	4628      	mov	r0, r5
 8004b82:	f7ff f9a1 	bl	8003ec8 <debug_printhex_unsigned>
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
 8004b86:	4828      	ldr	r0, [pc, #160]	; (8004c28 <boot_target_get_startup_mode.part.0+0xc8>)
 8004b88:	f7ff f956 	bl	8003e38 <debug_print>
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff f99b 	bl	8003ec8 <debug_printhex_unsigned>
 8004b92:	4826      	ldr	r0, [pc, #152]	; (8004c2c <boot_target_get_startup_mode.part.0+0xcc>)
 8004b94:	f7ff f956 	bl	8003e44 <debug_println>
    return false;
 8004b98:	2500      	movs	r5, #0
 8004b9a:	e003      	b.n	8004ba4 <boot_target_get_startup_mode.part.0+0x44>
        debug_println("app exists");
 8004b9c:	4824      	ldr	r0, [pc, #144]	; (8004c30 <boot_target_get_startup_mode.part.0+0xd0>)
 8004b9e:	f7ff f951 	bl	8003e44 <debug_println>
        return true;
 8004ba2:	2501      	movs	r5, #1
    //  return BOOTLOADER_MODE; ////
    
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
    bool appValid = validate_application();
    //  Check the RTC backup register for any boot request.
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f000 fe9b 	bl	80058e0 <backup_read>
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 8004baa:	2100      	movs	r1, #0
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 8004bac:	4604      	mov	r4, r0
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 8004bae:	4608      	mov	r0, r1
 8004bb0:	f000 fe7a 	bl	80058a8 <backup_write>

    //  Remember the forced startup mode if we were forced before restarting.
    switch(cmd) {
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <boot_target_get_startup_mode.part.0+0xd4>)
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	d02e      	beq.n	8004c18 <boot_target_get_startup_mode.part.0+0xb8>
 8004bba:	f103 53a6 	add.w	r3, r3, #348127232	; 0x14c00000
 8004bbe:	f503 234d 	add.w	r3, r3, #839680	; 0xcd000
 8004bc2:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d109      	bne.n	8004bde <boot_target_get_startup_mode.part.0+0x7e>
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8004bca:	2402      	movs	r4, #2
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <boot_target_get_startup_mode.part.0+0xd8>)
        default:             forced_startup_mode = UNKNOWN_MODE; break;
    }

    if (cmd == CMD_BOOT) {
        //  Go to Bootloader Mode if we were requested by MakeCode to run as bootloader.
        debug_println("----bootloader mode (forced)");
 8004bce:	481b      	ldr	r0, [pc, #108]	; (8004c3c <boot_target_get_startup_mode.part.0+0xdc>)
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8004bd0:	701c      	strb	r4, [r3, #0]
        debug_println("----bootloader mode (forced)");
 8004bd2:	f7ff f937 	bl	8003e44 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <boot_target_get_startup_mode.part.0+0xe0>)
 8004bd8:	4620      	mov	r0, r4
 8004bda:	701c      	strb	r4, [r3, #0]
        //  Else go to Application Mode.
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
        startup_mode = APPLICATION_MODE;
    }
    return startup_mode;
}
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 8004bde:	2300      	movs	r3, #0
 8004be0:	4c15      	ldr	r4, [pc, #84]	; (8004c38 <boot_target_get_startup_mode.part.0+0xd8>)
 8004be2:	7023      	strb	r3, [r4, #0]
    } else if (!appValid) {
 8004be4:	b93d      	cbnz	r5, 8004bf6 <boot_target_get_startup_mode.part.0+0x96>
        debug_println("----bootloader mode (no app)");
 8004be6:	4817      	ldr	r0, [pc, #92]	; (8004c44 <boot_target_get_startup_mode.part.0+0xe4>)
 8004be8:	f7ff f92c 	bl	8003e44 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8004bec:	2302      	movs	r3, #2
 8004bee:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <boot_target_get_startup_mode.part.0+0xe0>)
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	7013      	strb	r3, [r2, #0]
}
 8004bf4:	bd38      	pop	{r3, r4, r5, pc}
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 8004bf6:	4814      	ldr	r0, [pc, #80]	; (8004c48 <boot_target_get_startup_mode.part.0+0xe8>)
 8004bf8:	f7ff f91e 	bl	8003e38 <debug_print>
 8004bfc:	7820      	ldrb	r0, [r4, #0]
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <boot_target_get_startup_mode.part.0+0xcc>)
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <boot_target_get_startup_mode.part.0+0xec>)
 8004c02:	2801      	cmp	r0, #1
 8004c04:	bf14      	ite	ne
 8004c06:	4610      	movne	r0, r2
 8004c08:	4618      	moveq	r0, r3
 8004c0a:	f7ff f91b 	bl	8003e44 <debug_println>
        startup_mode = APPLICATION_MODE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <boot_target_get_startup_mode.part.0+0xe0>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	7013      	strb	r3, [r2, #0]
}
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4c07      	ldr	r4, [pc, #28]	; (8004c38 <boot_target_get_startup_mode.part.0+0xd8>)
 8004c1c:	7023      	strb	r3, [r4, #0]
 8004c1e:	e7e1      	b.n	8004be4 <boot_target_get_startup_mode.part.0+0x84>
 8004c20:	08007000 	.word	0x08007000
 8004c24:	080062f4 	.word	0x080062f4
 8004c28:	08006304 	.word	0x08006304
 8004c2c:	08005b40 	.word	0x08005b40
 8004c30:	080062e8 	.word	0x080062e8
 8004c34:	3f82722a 	.word	0x3f82722a
 8004c38:	20000b6f 	.word	0x20000b6f
 8004c3c:	08006308 	.word	0x08006308
 8004c40:	20000b70 	.word	0x20000b70
 8004c44:	08006328 	.word	0x08006328
 8004c48:	08006348 	.word	0x08006348
 8004c4c:	080062dc 	.word	0x080062dc

08004c50 <boot_target_get_startup_mode>:
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <boot_target_get_startup_mode+0xc>)
 8004c52:	7818      	ldrb	r0, [r3, #0]
 8004c54:	b100      	cbz	r0, 8004c58 <boot_target_get_startup_mode+0x8>
}
 8004c56:	4770      	bx	lr
 8004c58:	f7ff bf82 	b.w	8004b60 <boot_target_get_startup_mode.part.0>
 8004c5c:	20000b70 	.word	0x20000b70

08004c60 <boot_target_set_led>:
}

void boot_target_set_led(int on) {
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8004c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 8004c64:	b910      	cbnz	r0, 8004c6c <boot_target_set_led+0xc>
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8004c66:	4803      	ldr	r0, [pc, #12]	; (8004c74 <boot_target_set_led+0x14>)
 8004c68:	f7fb bf84 	b.w	8000b74 <gpio_set>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <boot_target_set_led+0x14>)
 8004c6e:	f7fb bf83 	b.w	8000b78 <gpio_clear>
 8004c72:	bf00      	nop
 8004c74:	40011000 	.word	0x40011000

08004c78 <boot_target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void boot_target_gpio_setup(void) {
 8004c78:	b508      	push	{r3, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 8004c7a:	f240 3002 	movw	r0, #770	; 0x302
 8004c7e:	f7fb ff8f 	bl	8000ba0 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 8004c82:	f240 3003 	movw	r0, #771	; 0x303
 8004c86:	f7fb ff8b 	bl	8000ba0 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 8004c8a:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004c8e:	f7fb ff87 	bl	8000ba0 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 8004c92:	f240 3097 	movw	r0, #919	; 0x397
 8004c96:	f7fb ff83 	bl	8000ba0 <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8004c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c9e:	480f      	ldr	r0, [pc, #60]	; (8004cdc <boot_target_gpio_setup+0x64>)
 8004ca0:	f7fb ff68 	bl	8000b74 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004caa:	4611      	mov	r1, r2
 8004cac:	480b      	ldr	r0, [pc, #44]	; (8004cdc <boot_target_gpio_setup+0x64>)
 8004cae:	f7fb ffcf 	bl	8000c50 <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 8004cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4809      	ldr	r0, [pc, #36]	; (8004ce0 <boot_target_gpio_setup+0x68>)
 8004cbc:	f7fb ffc8 	bl	8000c50 <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	4806      	ldr	r0, [pc, #24]	; (8004cdc <boot_target_gpio_setup+0x64>)
 8004cc4:	f7fb ff58 	bl	8000b78 <gpio_clear>
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 8004cca:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	d1fc      	bne.n	8004cca <boot_target_gpio_setup+0x52>
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 8004cd2:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	d1fc      	bne.n	8004cd2 <boot_target_gpio_setup+0x5a>
    sleep_us(20000);
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
}
 8004cd8:	bd08      	pop	{r3, pc}
 8004cda:	bf00      	nop
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40010800 	.word	0x40010800
 8004ce4:	00030d40 	.word	0x00030d40

08004ce8 <boot_target_usb_init>:

const usbd_driver* boot_target_usb_init(void) {
 8004ce8:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8004cea:	f240 2017 	movw	r0, #535	; 0x217
 8004cee:	f7fb ff65 	bl	8000bbc <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 8004cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004cf6:	4804      	ldr	r0, [pc, #16]	; (8004d08 <boot_target_usb_init+0x20>)
 8004cf8:	f7fb ff3e 	bl	8000b78 <gpio_clear>
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <boot_target_usb_init+0x24>)
    int i;
    for (i = 0; i < 800000; i++) {
        __asm__("nop");
 8004cfe:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 8004d00:	3b01      	subs	r3, #1
 8004d02:	d1fc      	bne.n	8004cfe <boot_target_usb_init+0x16>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 8004d04:	4802      	ldr	r0, [pc, #8]	; (8004d10 <boot_target_usb_init+0x28>)
 8004d06:	bd08      	pop	{r3, pc}
 8004d08:	40010800 	.word	0x40010800
 8004d0c:	000c3500 	.word	0x000c3500
 8004d10:	08005b70 	.word	0x08005b70

08004d14 <boot_target_set_restart_callback>:

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 8004d18:	4805      	ldr	r0, [pc, #20]	; (8004d30 <boot_target_set_restart_callback+0x1c>)
 8004d1a:	f7ff f88d 	bl	8003e38 <debug_print>
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff f8d2 	bl	8003ec8 <debug_printhex_unsigned>
    restart_callback_func = func;
}
 8004d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 8004d28:	4802      	ldr	r0, [pc, #8]	; (8004d34 <boot_target_set_restart_callback+0x20>)
 8004d2a:	f7ff b88b 	b.w	8003e44 <debug_println>
 8004d2e:	bf00      	nop
 8004d30:	0800637c 	.word	0x0800637c
 8004d34:	08005b40 	.word	0x08005b40

08004d38 <boot_target_manifest_app>:

void boot_target_manifest_app(void) {
 8004d38:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_println("boot app");
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <boot_target_manifest_app+0x18>)
 8004d3c:	f7ff f882 	bl	8003e44 <debug_println>
    debug_force_flush(); ////
 8004d40:	f7ff f80a 	bl	8003d58 <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <boot_target_manifest_app+0x1c>)
 8004d46:	2000      	movs	r0, #0
 8004d48:	f000 fdae 	bl	80058a8 <backup_write>
        if (restart_callback_func) { 
            restart_callback_func(); 
            return;
        }
    #endif  //  NOTUSED
    scb_reset_system();  //  Otherwise restart now.
 8004d4c:	f7fb ff0a 	bl	8000b64 <scb_reset_system>
 8004d50:	08006360 	.word	0x08006360
 8004d54:	3f82722a 	.word	0x3f82722a

08004d58 <boot_target_manifest_bootloader>:
}

void boot_target_manifest_bootloader(void) {
 8004d58:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_println("boot bootloader"); 
 8004d5a:	4805      	ldr	r0, [pc, #20]	; (8004d70 <boot_target_manifest_bootloader+0x18>)
 8004d5c:	f7ff f872 	bl	8003e44 <debug_println>
    debug_force_flush(); ////
 8004d60:	f7fe fffa 	bl	8003d58 <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 8004d64:	4903      	ldr	r1, [pc, #12]	; (8004d74 <boot_target_manifest_bootloader+0x1c>)
 8004d66:	2000      	movs	r0, #0
 8004d68:	f000 fd9e 	bl	80058a8 <backup_write>
    scb_reset_system();  //  Otherwise restart now.
 8004d6c:	f7fb fefa 	bl	8000b64 <scb_reset_system>
 8004d70:	0800636c 	.word	0x0800636c
 8004d74:	544f4f42 	.word	0x544f4f42

08004d78 <boot_target_get_serial_number>:
}

void boot_target_get_serial_number(char* dest, size_t max_chars) {
    desig_get_unique_id_as_string(dest, max_chars+1);
 8004d78:	3101      	adds	r1, #1
 8004d7a:	f7fb bf31 	b.w	8000be0 <desig_get_unique_id_as_string>
 8004d7e:	bf00      	nop

08004d80 <cdcacm_comm_cb>:
static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	//  Callback for the comm channel.
	debug_println("comm");
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <cdcacm_comm_cb+0x8>)
 8004d82:	f7ff b85f 	b.w	8003e44 <debug_println>
 8004d86:	bf00      	nop
 8004d88:	080063ac 	.word	0x080063ac

08004d8c <cdcacm_set_config>:
}

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8004d8c:	b510      	push	{r4, lr}
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <cdcacm_set_config+0x58>)
) {
 8004d90:	b082      	sub	sp, #8
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	9200      	str	r2, [sp, #0]
 8004d96:	2103      	movs	r1, #3
 8004d98:	2202      	movs	r2, #2
) {
 8004d9a:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8004d9c:	f7fc f8f0 	bl	8000f80 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8004da0:	2300      	movs	r3, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2202      	movs	r2, #2
 8004da8:	2340      	movs	r3, #64	; 0x40
 8004daa:	2183      	movs	r1, #131	; 0x83
 8004dac:	f7fc f8e8 	bl	8000f80 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <cdcacm_set_config+0x5c>)
 8004db2:	4620      	mov	r0, r4
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2203      	movs	r2, #3
 8004db8:	2310      	movs	r3, #16
 8004dba:	2184      	movs	r1, #132	; 0x84
 8004dbc:	f7fc f8e0 	bl	8000f80 <usbd_ep_setup>
	int status = aggregate_register_callback(
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <cdcacm_set_config+0x60>)
 8004dc4:	227f      	movs	r2, #127	; 0x7f
 8004dc6:	2121      	movs	r1, #33	; 0x21
 8004dc8:	f7ff fc0e 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	db01      	blt.n	8004dd4 <cdcacm_set_config+0x48>
}
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <cdcacm_set_config+0x64>)
 8004dd6:	f7ff f835 	bl	8003e44 <debug_println>
}
 8004dda:	b002      	add	sp, #8
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8004de0:	f7fe bfb0 	b.w	8003d44 <debug_flush>
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004d81 	.word	0x08004d81
 8004dec:	08004df5 	.word	0x08004df5
 8004df0:	080063dc 	.word	0x080063dc

08004df4 <cdcacm_control_request>:
) {
 8004df4:	b510      	push	{r4, lr}
	switch (req->bRequest) {
 8004df6:	7849      	ldrb	r1, [r1, #1]
 8004df8:	2921      	cmp	r1, #33	; 0x21
 8004dfa:	d00a      	beq.n	8004e12 <cdcacm_control_request+0x1e>
 8004dfc:	2922      	cmp	r1, #34	; 0x22
 8004dfe:	d006      	beq.n	8004e0e <cdcacm_control_request+0x1a>
 8004e00:	2920      	cmp	r1, #32
 8004e02:	d001      	beq.n	8004e08 <cdcacm_control_request+0x14>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 8004e04:	2002      	movs	r0, #2
}
 8004e06:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	2a06      	cmp	r2, #6
 8004e0c:	d90a      	bls.n	8004e24 <cdcacm_control_request+0x30>
			return USBD_REQ_HANDLED;
 8004e0e:	2001      	movs	r0, #1
}
 8004e10:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8004e12:	8819      	ldrh	r1, [r3, #0]
 8004e14:	2906      	cmp	r1, #6
 8004e16:	d905      	bls.n	8004e24 <cdcacm_control_request+0x30>
			*len = sizeof(struct usb_cdc_line_coding);
 8004e18:	2107      	movs	r1, #7
			*buf = (uint8_t *) &line_coding;
 8004e1a:	4c0b      	ldr	r4, [pc, #44]	; (8004e48 <cdcacm_control_request+0x54>)
			return USBD_REQ_HANDLED;
 8004e1c:	2001      	movs	r0, #1
			*buf = (uint8_t *) &line_coding;
 8004e1e:	6014      	str	r4, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 8004e20:	8019      	strh	r1, [r3, #0]
}
 8004e22:	bd10      	pop	{r4, pc}
 8004e24:	461c      	mov	r4, r3
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 8004e26:	4809      	ldr	r0, [pc, #36]	; (8004e4c <cdcacm_control_request+0x58>)
 8004e28:	f7ff f806 	bl	8003e38 <debug_print>
 8004e2c:	2007      	movs	r0, #7
 8004e2e:	f7ff f825 	bl	8003e7c <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 8004e32:	4807      	ldr	r0, [pc, #28]	; (8004e50 <cdcacm_control_request+0x5c>)
 8004e34:	f7ff f800 	bl	8003e38 <debug_print>
 8004e38:	8820      	ldrh	r0, [r4, #0]
 8004e3a:	f7ff f81f 	bl	8003e7c <debug_print_unsigned>
				debug_println("");
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <cdcacm_control_request+0x60>)
 8004e40:	f7ff f800 	bl	8003e44 <debug_println>
				return USBD_REQ_NOTSUPP;
 8004e44:	2000      	movs	r0, #0
}
 8004e46:	bd10      	pop	{r4, pc}
 8004e48:	080063fc 	.word	0x080063fc
 8004e4c:	080063b4 	.word	0x080063b4
 8004e50:	08005dc4 	.word	0x08005dc4
 8004e54:	08005b40 	.word	0x08005b40

08004e58 <cdcadm_transmit>:
) {
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <cdcadm_transmit+0x50>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	b303      	cbz	r3, 8004ea2 <cdcadm_transmit+0x4a>
 8004e60:	4607      	mov	r7, r0
 8004e62:	b1f0      	cbz	r0, 8004ea2 <cdcadm_transmit+0x4a>
 8004e64:	460e      	mov	r6, r1
 8004e66:	b1e1      	cbz	r1, 8004ea2 <cdcadm_transmit+0x4a>
 8004e68:	4614      	mov	r4, r2
	if (len == 0) { return 0; }
 8004e6a:	b192      	cbz	r2, 8004e92 <cdcadm_transmit+0x3a>
	if (len <= MAX_USB_PACKET_SIZE) {
 8004e6c:	2a40      	cmp	r2, #64	; 0x40
 8004e6e:	d912      	bls.n	8004e96 <cdcadm_transmit+0x3e>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 8004e70:	2c40      	cmp	r4, #64	; 0x40
 8004e72:	4625      	mov	r5, r4
 8004e74:	bf28      	it	cs
 8004e76:	2540      	movcs	r5, #64	; 0x40
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8004e78:	4632      	mov	r2, r6
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	2183      	movs	r1, #131	; 0x83
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f7fc f886 	bl	8000f90 <usbd_ep_write_packet>
		len = len - tx_len;
 8004e84:	1b64      	subs	r4, r4, r5
		if (status != tx_len) { return 0; }  //  Stop if error.
 8004e86:	4285      	cmp	r5, r0
		len = len - tx_len;
 8004e88:	b2a4      	uxth	r4, r4
		if (status != tx_len) { return 0; }  //  Stop if error.
 8004e8a:	d102      	bne.n	8004e92 <cdcadm_transmit+0x3a>
		buf = &buf[tx_len];
 8004e8c:	442e      	add	r6, r5
	while (len > 0) {
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d1ee      	bne.n	8004e70 <cdcadm_transmit+0x18>
	if (len == 0) { return 0; }
 8004e92:	2000      	movs	r0, #0
}
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8004e96:	4613      	mov	r3, r2
 8004e98:	460a      	mov	r2, r1
 8004e9a:	2183      	movs	r1, #131	; 0x83
 8004e9c:	f7fc f878 	bl	8000f90 <usbd_ep_write_packet>
}
 8004ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea8:	20000b71 	.word	0x20000b71

08004eac <cdcacm_data_rx_cb>:
) {
 8004eac:	b570      	push	{r4, r5, r6, lr}
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8004eae:	4d0f      	ldr	r5, [pc, #60]	; (8004eec <cdcacm_data_rx_cb+0x40>)
 8004eb0:	2340      	movs	r3, #64	; 0x40
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	2103      	movs	r1, #3
) {
 8004eb6:	4606      	mov	r6, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8004eb8:	f7fc f872 	bl	8000fa0 <usbd_ep_read_packet>
    if (len == 0) { return; }
 8004ebc:	b1a8      	cbz	r0, 8004eea <cdcacm_data_rx_cb+0x3e>
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8004ebe:	2840      	cmp	r0, #64	; 0x40
 8004ec0:	bf28      	it	cs
 8004ec2:	2040      	movcs	r0, #64	; 0x40
    rx_buf[pos] = 0;
 8004ec4:	2100      	movs	r1, #0
	if (!connected) {
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <cdcacm_data_rx_cb+0x44>)
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8004ec8:	b284      	uxth	r4, r0
	if (!connected) {
 8004eca:	781a      	ldrb	r2, [r3, #0]
    rx_buf[pos] = 0;
 8004ecc:	5529      	strb	r1, [r5, r4]
	if (!connected) {
 8004ece:	b92a      	cbnz	r2, 8004edc <cdcacm_data_rx_cb+0x30>
		connected = 1;
 8004ed0:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <cdcacm_data_rx_cb+0x48>)
		connected = 1;
 8004ed4:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	b103      	cbz	r3, 8004edc <cdcacm_data_rx_cb+0x30>
 8004eda:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8004edc:	4622      	mov	r2, r4
 8004ede:	4630      	mov	r0, r6
}
 8004ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8004ee4:	4901      	ldr	r1, [pc, #4]	; (8004eec <cdcacm_data_rx_cb+0x40>)
 8004ee6:	f7ff bfb7 	b.w	8004e58 <cdcadm_transmit>
}
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	2000096c 	.word	0x2000096c
 8004ef0:	20000b71 	.word	0x20000b71
 8004ef4:	20000968 	.word	0x20000968

08004ef8 <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8004ef8:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <cdc_setup+0x20>)
 8004efc:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8004efe:	4907      	ldr	r1, [pc, #28]	; (8004f1c <cdc_setup+0x24>)
 8004f00:	f7ff fb54 	bl	80045ac <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004f04:	2800      	cmp	r0, #0
 8004f06:	db00      	blt.n	8004f0a <cdc_setup+0x12>
}
 8004f08:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004f0a:	4805      	ldr	r0, [pc, #20]	; (8004f20 <cdc_setup+0x28>)
 8004f0c:	f7fe ff9a 	bl	8003e44 <debug_println>
}
 8004f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004f14:	f7fe bf16 	b.w	8003d44 <debug_flush>
 8004f18:	20000968 	.word	0x20000968
 8004f1c:	08004d8d 	.word	0x08004d8d
 8004f20:	08006394 	.word	0x08006394

08004f24 <hf2_set_config>:
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
    }
}

static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4604      	mov	r4, r0
 8004f28:	b082      	sub	sp, #8
    //  Setup the endpoints to be bulk & register the callbacks.
    LOG("hf2 set config");
 8004f2a:	480b      	ldr	r0, [pc, #44]	; (8004f58 <hf2_set_config+0x34>)
 8004f2c:	f7fe ff8a 	bl	8003e44 <debug_println>
    debug_force_flush(); ////
 8004f30:	f7fe ff12 	bl	8003d58 <debug_force_flush>

    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <hf2_set_config+0x38>)
 8004f36:	4620      	mov	r0, r4
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	2182      	movs	r1, #130	; 0x82
 8004f40:	f7fc f81e 	bl	8000f80 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 8004f44:	2202      	movs	r2, #2
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <hf2_set_config+0x3c>)
 8004f48:	4620      	mov	r0, r4
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	2340      	movs	r3, #64	; 0x40
 8004f50:	f7fc f816 	bl	8000f80 <usbd_ep_setup>
}
 8004f54:	b002      	add	sp, #8
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	080065e0 	.word	0x080065e0
 8004f5c:	08005695 	.word	0x08005695
 8004f60:	0800505d 	.word	0x0800505d

08004f64 <pokeSend>:
    uint8_t dataToSendFlag) {
 8004f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	9101      	str	r1, [sp, #4]
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	4616      	mov	r6, r2
    memset(tx_buf, 0, sizeof(tx_buf));
 8004f70:	2100      	movs	r1, #0
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	482a      	ldr	r0, [pc, #168]	; (8005020 <pokeSend+0xbc>)
 8004f76:	f7fe fe1b 	bl	8003bb0 <memset>
	__asm__ volatile ("CPSID I\n");
 8004f7a:	b672      	cpsid	i
    if (dataToSendLength) {
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	b91b      	cbnz	r3, 8004f88 <pokeSend+0x24>
	__asm__ volatile ("CPSIE I\n");
 8004f80:	b662      	cpsie	i
}
 8004f82:	b002      	add	sp, #8
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((int) dataToSendLength < s) {
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f8c:	dd34      	ble.n	8004ff8 <pokeSend+0x94>
 8004f8e:	243f      	movs	r4, #63	; 0x3f
            if (flag == HF2_FLAG_CMDPKT_LAST)
 8004f90:	2e40      	cmp	r6, #64	; 0x40
 8004f92:	bf08      	it	eq
 8004f94:	4623      	moveq	r3, r4
    int s = sizeof(tx_buf) - 1;  //  63
 8004f96:	4627      	mov	r7, r4
 8004f98:	bf18      	it	ne
 8004f9a:	ea46 0304 	orrne.w	r3, r6, r4
        tx_buf[0] = flag | s;
 8004f9e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8005020 <pokeSend+0xbc>
        memcpy(tx_buf + 1, dataToSend, s);
 8004fa2:	4622      	mov	r2, r4
        tx_buf[0] = flag | s;
 8004fa4:	4640      	mov	r0, r8
        memcpy(tx_buf + 1, dataToSend, s);
 8004fa6:	4629      	mov	r1, r5
        tx_buf[0] = flag | s;
 8004fa8:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8004fac:	f7fe fdb8 	bl	8003b20 <memcpy>
        dataToSendLength -= s;
 8004fb0:	9b01      	ldr	r3, [sp, #4]
 8004fb2:	1b1b      	subs	r3, r3, r4
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	b662      	cpsie	i
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <pokeSend+0xc0>)
 8004fba:	4642      	mov	r2, r8
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	2182      	movs	r1, #130	; 0x82
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	f7fb ffe5 	bl	8000f90 <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 8004fc6:	9b01      	ldr	r3, [sp, #4]
 8004fc8:	b323      	cbz	r3, 8005014 <pokeSend+0xb0>
            remDataToSend = dataToSend;
 8004fca:	4b17      	ldr	r3, [pc, #92]	; (8005028 <pokeSend+0xc4>)
        dataToSend += s;
 8004fcc:	442c      	add	r4, r5
            remDataToSend = dataToSend;
 8004fce:	601c      	str	r4, [r3, #0]
            remDataToSendLength = dataToSendLength;
 8004fd0:	9901      	ldr	r1, [sp, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <pokeSend+0xc8>)
            remDataToSendFlag = dataToSendFlag;
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <pokeSend+0xcc>)
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8004fd6:	2f02      	cmp	r7, #2
            remDataToSendLength = dataToSendLength;
 8004fd8:	6011      	str	r1, [r2, #0]
            remDataToSendFlag = dataToSendFlag;
 8004fda:	701e      	strb	r6, [r3, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8004fdc:	dd12      	ble.n	8005004 <pokeSend+0xa0>
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8004fde:	4815      	ldr	r0, [pc, #84]	; (8005034 <pokeSend+0xd0>)
 8004fe0:	f7fe ff2a 	bl	8003e38 <debug_print>
 8004fe4:	1c78      	adds	r0, r7, #1
 8004fe6:	b2c0      	uxtb	r0, r0
 8004fe8:	f7fe ff4a 	bl	8003e80 <debug_printhex>
 8004fec:	4812      	ldr	r0, [pc, #72]	; (8005038 <pokeSend+0xd4>)
}
 8004fee:	b002      	add	sp, #8
 8004ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8004ff4:	f7fe bf26 	b.w	8003e44 <debug_println>
            s = dataToSendLength;
 8004ff8:	9c01      	ldr	r4, [sp, #4]
 8004ffa:	ea46 0304 	orr.w	r3, r6, r4
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	4627      	mov	r7, r4
 8005002:	e7cc      	b.n	8004f9e <pokeSend+0x3a>
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8005004:	4906      	ldr	r1, [pc, #24]	; (8005020 <pokeSend+0xbc>)
 8005006:	480d      	ldr	r0, [pc, #52]	; (800503c <pokeSend+0xd8>)
 8005008:	1c7a      	adds	r2, r7, #1
}
 800500a:	b002      	add	sp, #8
 800500c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8005010:	f7ff bb20 	b.w	8004654 <dump_buffer>
            remDataToSendLength = 0;  //  No more data to send.
 8005014:	4a05      	ldr	r2, [pc, #20]	; (800502c <pokeSend+0xc8>)
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8005016:	2f02      	cmp	r7, #2
            remDataToSendLength = 0;  //  No more data to send.
 8005018:	6013      	str	r3, [r2, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 800501a:	dce0      	bgt.n	8004fde <pokeSend+0x7a>
 800501c:	e7f2      	b.n	8005004 <pokeSend+0xa0>
 800501e:	bf00      	nop
 8005020:	20000a20 	.word	0x20000a20
 8005024:	200009b0 	.word	0x200009b0
 8005028:	200009d4 	.word	0x200009d4
 800502c:	200009d8 	.word	0x200009d8
 8005030:	20000b74 	.word	0x20000b74
 8005034:	08006628 	.word	0x08006628
 8005038:	08005b40 	.word	0x08005b40
 800503c:	08006620 	.word	0x08006620

08005040 <assert.part.0>:
    }
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); }
}

static void assert(bool assertion, const char *msg) {
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8005044:	4804      	ldr	r0, [pc, #16]	; (8005058 <assert.part.0+0x18>)
 8005046:	f7fe fef7 	bl	8003e38 <debug_print>
 800504a:	4620      	mov	r0, r4
 800504c:	f7fe fefa 	bl	8003e44 <debug_println>
}
 8005050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8005054:	f7fe be80 	b.w	8003d58 <debug_force_flush>
 8005058:	08006404 	.word	0x08006404

0800505c <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 8005060:	4ca4      	ldr	r4, [pc, #656]	; (80052f4 <hf2_data_rx_cb+0x298>)
 8005062:	2340      	movs	r3, #64	; 0x40
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 8005064:	b08d      	sub	sp, #52	; 0x34
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 8005066:	4622      	mov	r2, r4
 8005068:	f7fb ff9a 	bl	8000fa0 <usbd_ep_read_packet>
 800506c:	4605      	mov	r5, r0
    rx_time = millis();
 800506e:	f7ff f843 	bl	80040f8 <millis>
 8005072:	4ba1      	ldr	r3, [pc, #644]	; (80052f8 <hf2_data_rx_cb+0x29c>)
 8005074:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 8005076:	b1d5      	cbz	r5, 80050ae <hf2_data_rx_cb+0x52>
    if (!pkt) {
 8005078:	4fa0      	ldr	r7, [pc, #640]	; (80052fc <hf2_data_rx_cb+0x2a0>)
    uint8_t tag = rx_buf[0];
 800507a:	7826      	ldrb	r6, [r4, #0]
    if (!pkt) {
 800507c:	683c      	ldr	r4, [r7, #0]
 800507e:	b3ac      	cbz	r4, 80050ec <hf2_data_rx_cb+0x90>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 8005080:	8820      	ldrh	r0, [r4, #0]
 8005082:	b9b8      	cbnz	r0, 80050b4 <hf2_data_rx_cb+0x58>
 8005084:	f006 093f 	and.w	r9, r6, #63	; 0x3f
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 8005088:	f104 0802 	add.w	r8, r4, #2
 800508c:	4440      	add	r0, r8
 800508e:	464a      	mov	r2, r9
 8005090:	499b      	ldr	r1, [pc, #620]	; (8005300 <hf2_data_rx_cb+0x2a4>)
 8005092:	f7fe fd45 	bl	8003b20 <memcpy>
    pkt->size += size;
 8005096:	8825      	ldrh	r5, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8005098:	f016 06c0 	ands.w	r6, r6, #192	; 0xc0
    pkt->size += size;
 800509c:	444d      	add	r5, r9
 800509e:	b2ad      	uxth	r5, r5
 80050a0:	8025      	strh	r5, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 80050a2:	d004      	beq.n	80050ae <hf2_data_rx_cb+0x52>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 80050a4:	2e40      	cmp	r6, #64	; 0x40
 80050a6:	d02a      	beq.n	80050fe <hf2_data_rx_cb+0xa2>
        pkt->size = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	7023      	strb	r3, [r4, #0]
 80050ac:	7063      	strb	r3, [r4, #1]
}
 80050ae:	b00d      	add	sp, #52	; 0x34
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 80050b4:	0633      	lsls	r3, r6, #24
 80050b6:	d40c      	bmi.n	80050d2 <hf2_data_rx_cb+0x76>
 80050b8:	f006 093f 	and.w	r9, r6, #63	; 0x3f
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 80050bc:	eb09 0300 	add.w	r3, r9, r0
    if (assertion) { return; }
 80050c0:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80050c4:	dde0      	ble.n	8005088 <hf2_data_rx_cb+0x2c>
 80050c6:	488f      	ldr	r0, [pc, #572]	; (8005304 <hf2_data_rx_cb+0x2a8>)
 80050c8:	f7ff ffba 	bl	8005040 <assert.part.0>
 80050cc:	683c      	ldr	r4, [r7, #0]
 80050ce:	8820      	ldrh	r0, [r4, #0]
 80050d0:	e7da      	b.n	8005088 <hf2_data_rx_cb+0x2c>
 80050d2:	488c      	ldr	r0, [pc, #560]	; (8005304 <hf2_data_rx_cb+0x2a8>)
 80050d4:	f7ff ffb4 	bl	8005040 <assert.part.0>
 80050d8:	683c      	ldr	r4, [r7, #0]
 80050da:	f006 093f 	and.w	r9, r6, #63	; 0x3f
 80050de:	8820      	ldrh	r0, [r4, #0]
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 80050e0:	eb09 0300 	add.w	r3, r9, r0
    if (assertion) { return; }
 80050e4:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80050e8:	dced      	bgt.n	80050c6 <hf2_data_rx_cb+0x6a>
 80050ea:	e7cd      	b.n	8005088 <hf2_data_rx_cb+0x2c>
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 80050ec:	f7ff fdb0 	bl	8004c50 <boot_target_get_startup_mode>
            &hf2_buffer :
 80050f0:	4c85      	ldr	r4, [pc, #532]	; (8005308 <hf2_data_rx_cb+0x2ac>)
 80050f2:	4b86      	ldr	r3, [pc, #536]	; (800530c <hf2_data_rx_cb+0x2b0>)
 80050f4:	2802      	cmp	r0, #2
 80050f6:	bf08      	it	eq
 80050f8:	461c      	moveq	r4, r3
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 80050fa:	603c      	str	r4, [r7, #0]
 80050fc:	e7c0      	b.n	8005080 <hf2_data_rx_cb+0x24>
	if (!connected) {
 80050fe:	4b84      	ldr	r3, [pc, #528]	; (8005310 <hf2_data_rx_cb+0x2b4>)
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	b932      	cbnz	r2, 8005112 <hf2_data_rx_cb+0xb6>
		connected = 1;
 8005104:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 8005106:	4a83      	ldr	r2, [pc, #524]	; (8005314 <hf2_data_rx_cb+0x2b8>)
		connected = 1;
 8005108:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b10b      	cbz	r3, 8005112 <hf2_data_rx_cb+0xb6>
 800510e:	4798      	blx	r3
 8005110:	8825      	ldrh	r5, [r4, #0]
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 8005112:	2200      	movs	r2, #0
    uint32_t cmdId = cmd->command_id;
 8005114:	f8d4 6002 	ldr.w	r6, [r4, #2]
    resp->tag = cmd->tag;
 8005118:	88e1      	ldrh	r1, [r4, #6]
    switch (cmdId) {
 800511a:	1e73      	subs	r3, r6, #1
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 800511c:	7122      	strb	r2, [r4, #4]
 800511e:	7162      	strb	r2, [r4, #5]
    resp->tag = cmd->tag;
 8005120:	8061      	strh	r1, [r4, #2]
    switch (cmdId) {
 8005122:	2b07      	cmp	r3, #7
 8005124:	f200 8158 	bhi.w	80053d8 <hf2_data_rx_cb+0x37c>
 8005128:	e8df f013 	tbh	[pc, r3, lsl #1]
 800512c:	00c4011e 	.word	0x00c4011e
 8005130:	00a900ba 	.word	0x00a900ba
 8005134:	00290095 	.word	0x00290095
 8005138:	00080156 	.word	0x00080156
        case HF2_CMD_READ_WORDS: { debug_println("hf2 >> read"); debug_force_flush(); ////
 800513c:	4876      	ldr	r0, [pc, #472]	; (8005318 <hf2_data_rx_cb+0x2bc>)
 800513e:	f7fe fe81 	bl	8003e44 <debug_println>
 8005142:	f7fe fe09 	bl	8003d58 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8005146:	f7ff fd83 	bl	8004c50 <boot_target_get_startup_mode>
 800514a:	2801      	cmp	r0, #1
 800514c:	f000 81be 	beq.w	80054cc <hf2_data_rx_cb+0x470>
    if (assertion) { return; }
 8005150:	2d10      	cmp	r5, #16
 8005152:	d002      	beq.n	800515a <hf2_data_rx_cb+0xfe>
 8005154:	4871      	ldr	r0, [pc, #452]	; (800531c <hf2_data_rx_cb+0x2c0>)
 8005156:	f7ff ff73 	bl	8005040 <assert.part.0>
            int num_words = cmd->read_words.num_words;
 800515a:	f8d4 500e 	ldr.w	r5, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 800515e:	f8d4 100a 	ldr.w	r1, [r4, #10]
 8005162:	00ad      	lsls	r5, r5, #2
 8005164:	462a      	mov	r2, r5
 8005166:	1da0      	adds	r0, r4, #6
    volatile uint32_t dataToSendLength = 4 + size;
 8005168:	3504      	adds	r5, #4
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 800516a:	f7fe fcd9 	bl	8003b20 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 800516e:	9509      	str	r5, [sp, #36]	; 0x24
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005172:	4640      	mov	r0, r8
 8005174:	2240      	movs	r2, #64	; 0x40
 8005176:	f7ff fef5 	bl	8004f64 <pokeSend>
 800517a:	683c      	ldr	r4, [r7, #0]
 800517c:	e794      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 800517e:	f7ff fd67 	bl	8004c50 <boot_target_get_startup_mode>
 8005182:	2801      	cmp	r0, #1
 8005184:	f000 817e 	beq.w	8005484 <hf2_data_rx_cb+0x428>
    uint32_t target_addr = cmd->write_flash_page.target_addr;
 8005188:	f8d4 500a 	ldr.w	r5, [r4, #10]
    int sz = pkt->size;
 800518c:	f8b4 a000 	ldrh.w	sl, [r4]
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 8005190:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8005194:	f0c0 8173 	bcc.w	800547e <hf2_data_rx_cb+0x422>
 8005198:	4961      	ldr	r1, [pc, #388]	; (8005320 <hf2_data_rx_cb+0x2c4>)
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <hf2_data_rx_cb+0x2c8>)
 800519c:	4a62      	ldr	r2, [pc, #392]	; (8005328 <hf2_data_rx_cb+0x2cc>)
 800519e:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 80051a2:	458b      	cmp	fp, r1
 80051a4:	bf94      	ite	ls
 80051a6:	469b      	movls	fp, r3
 80051a8:	4693      	movhi	fp, r2
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 80051aa:	4e60      	ldr	r6, [pc, #384]	; (800532c <hf2_data_rx_cb+0x2d0>)
    cmdId = cmd->command_id;
 80051ac:	f8d4 2002 	ldr.w	r2, [r4, #2]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 80051b0:	6833      	ldr	r3, [r6, #0]
    cmdId = cmd->command_id;
 80051b2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800535c <hf2_data_rx_cb+0x300>
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf14      	ite	ne
 80051ba:	485d      	ldrne	r0, [pc, #372]	; (8005330 <hf2_data_rx_cb+0x2d4>)
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 80051bc:	485d      	ldreq	r0, [pc, #372]	; (8005334 <hf2_data_rx_cb+0x2d8>)
    cmdId = cmd->command_id;
 80051be:	f8c9 2000 	str.w	r2, [r9]
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 80051c2:	f7fe fe39 	bl	8003e38 <debug_print>
 80051c6:	4628      	mov	r0, r5
 80051c8:	f7fe fe7e 	bl	8003ec8 <debug_printhex_unsigned>
 80051cc:	4658      	mov	r0, fp
 80051ce:	f7fe fe33 	bl	8003e38 <debug_print>
    if (flush_count++) { debug_flush(); }
 80051d2:	4a59      	ldr	r2, [pc, #356]	; (8005338 <hf2_data_rx_cb+0x2dc>)
 80051d4:	7813      	ldrb	r3, [r2, #0]
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	7011      	strb	r1, [r2, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 8173 	bne.w	80054c6 <hf2_data_rx_cb+0x46a>
    volatile uint32_t dataToSendLength = 4 + size;
 80051e0:	2304      	movs	r3, #4
 80051e2:	930b      	str	r3, [sp, #44]	; 0x2c
    prevCmdId = cmdId; 
 80051e4:	f8d9 3000 	ldr.w	r3, [r9]
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 80051e8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005360 <hf2_data_rx_cb+0x304>
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80051ec:	4640      	mov	r0, r8
 80051ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051f0:	2240      	movs	r2, #64	; 0x40
    prevCmdId = cmdId; 
 80051f2:	6033      	str	r3, [r6, #0]
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 80051f4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8005364 <hf2_data_rx_cb+0x308>
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80051f8:	f7ff feb4 	bl	8004f64 <pokeSend>
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 80051fc:	f8d9 6010 	ldr.w	r6, [r9, #16]
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8005200:	f8d8 3000 	ldr.w	r3, [r8]
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 8005204:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
 8005208:	f026 0603 	bic.w	r6, r6, #3
    const uint32_t old_app_start_offset = old_app_start - FLASH_BASE;  //  When writing Bootloader, shift by this offset so we don't overwrite the existing Bootloader.
 800520c:	f106 4b78 	add.w	fp, r6, #4160749568	; 0xf8000000
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80f8 	beq.w	8005406 <hf2_data_rx_cb+0x3aa>
 8005216:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800521a:	f000 80f4 	beq.w	8005406 <hf2_data_rx_cb+0x3aa>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 800521e:	4a47      	ldr	r2, [pc, #284]	; (800533c <hf2_data_rx_cb+0x2e0>)
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	2900      	cmp	r1, #0
 8005224:	f000 8109 	beq.w	800543a <hf2_data_rx_cb+0x3de>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8005228:	429d      	cmp	r5, r3
 800522a:	f0c0 8112 	bcc.w	8005452 <hf2_data_rx_cb+0x3f6>
    }  else if (new_base_vector && (target_addr == new_app_start)) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 800522e:	42ab      	cmp	r3, r5
 8005230:	f000 818e 	beq.w	8005550 <hf2_data_rx_cb+0x4f4>
    if (assertion) { return; }
 8005234:	f5ba 7f86 	cmp.w	sl, #268	; 0x10c
 8005238:	d002      	beq.n	8005240 <hf2_data_rx_cb+0x1e4>
 800523a:	4838      	ldr	r0, [pc, #224]	; (800531c <hf2_data_rx_cb+0x2c0>)
 800523c:	f7ff ff00 	bl	8005040 <assert.part.0>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) {
 8005240:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8005244:	d305      	bcc.n	8005252 <hf2_data_rx_cb+0x1f6>
 8005246:	4b36      	ldr	r3, [pc, #216]	; (8005320 <hf2_data_rx_cb+0x2c4>)
 8005248:	f505 7280 	add.w	r2, r5, #256	; 0x100
 800524c:	429a      	cmp	r2, r3
 800524e:	f240 810d 	bls.w	800546c <hf2_data_rx_cb+0x410>
 8005252:	683c      	ldr	r4, [r7, #0]
 8005254:	e728      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
        case HF2_CMD_START_FLASH: { debug_println("hf2 >> start");
 8005256:	483a      	ldr	r0, [pc, #232]	; (8005340 <hf2_data_rx_cb+0x2e4>)
 8005258:	f7fe fdf4 	bl	8003e44 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 800525c:	2304      	movs	r3, #4
 800525e:	9306      	str	r3, [sp, #24]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005260:	9906      	ldr	r1, [sp, #24]
 8005262:	4640      	mov	r0, r8
 8005264:	2240      	movs	r2, #64	; 0x40
 8005266:	f7ff fe7d 	bl	8004f64 <pokeSend>
            send_hf2_response(pkt, 0); debug_force_flush(); ////            
 800526a:	f7fe fd75 	bl	8003d58 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 800526e:	f7ff fcef 	bl	8004c50 <boot_target_get_startup_mode>
 8005272:	2801      	cmp	r0, #1
 8005274:	d1ed      	bne.n	8005252 <hf2_data_rx_cb+0x1f6>
            boot_target_manifest_bootloader();  //  Never returns.
 8005276:	f7ff fd6f 	bl	8004d58 <boot_target_manifest_bootloader>
 800527a:	683c      	ldr	r4, [r7, #0]
 800527c:	e714      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
            debug_println("hf2 >> boot");
 800527e:	4831      	ldr	r0, [pc, #196]	; (8005344 <hf2_data_rx_cb+0x2e8>)
 8005280:	f7fe fde0 	bl	8003e44 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 8005284:	2304      	movs	r3, #4
            restart_request = BOOTLOADER_MODE;
 8005286:	2402      	movs	r4, #2
    volatile uint32_t dataToSendLength = 4 + size;
 8005288:	9303      	str	r3, [sp, #12]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800528a:	9903      	ldr	r1, [sp, #12]
            restart_request = BOOTLOADER_MODE;
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <hf2_data_rx_cb+0x2ec>)
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800528e:	4640      	mov	r0, r8
 8005290:	2240      	movs	r2, #64	; 0x40
            restart_request = BOOTLOADER_MODE;
 8005292:	701c      	strb	r4, [r3, #0]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005294:	f7ff fe66 	bl	8004f64 <pokeSend>
            debug_force_flush(); ////
 8005298:	f7fe fd5e 	bl	8003d58 <debug_force_flush>
 800529c:	683c      	ldr	r4, [r7, #0]
 800529e:	e703      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
        case HF2_CMD_RESET_INTO_APP: { debug_println("hf2 >> app");
 80052a0:	482a      	ldr	r0, [pc, #168]	; (800534c <hf2_data_rx_cb+0x2f0>)
 80052a2:	f7fe fdcf 	bl	8003e44 <debug_println>
            flash_flush();  //  Flush any pending flash writes.
 80052a6:	f000 fb27 	bl	80058f8 <flash_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 80052aa:	2304      	movs	r3, #4
 80052ac:	9304      	str	r3, [sp, #16]
            restart_request = APPLICATION_MODE;
 80052ae:	2401      	movs	r4, #1
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80052b0:	9904      	ldr	r1, [sp, #16]
 80052b2:	e7eb      	b.n	800528c <hf2_data_rx_cb+0x230>
        case HF2_CMD_INFO: { debug_println("hf2 >> info");
 80052b4:	4826      	ldr	r0, [pc, #152]	; (8005350 <hf2_data_rx_cb+0x2f4>)
 80052b6:	f7fe fdc5 	bl	8003e44 <debug_println>
            int info_size = strlen(infoUf2File);
 80052ba:	4826      	ldr	r0, [pc, #152]	; (8005354 <hf2_data_rx_cb+0x2f8>)
 80052bc:	f7fe fc48 	bl	8003b50 <strlen>
    if (assertion) { return; }
 80052c0:	4605      	mov	r5, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f000 80fb 	beq.w	80054be <hf2_data_rx_cb+0x462>
 80052c8:	2854      	cmp	r0, #84	; 0x54
 80052ca:	d902      	bls.n	80052d2 <hf2_data_rx_cb+0x276>
 80052cc:	4822      	ldr	r0, [pc, #136]	; (8005358 <hf2_data_rx_cb+0x2fc>)
 80052ce:	f7ff feb7 	bl	8005040 <assert.part.0>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 80052d2:	462a      	mov	r2, r5
 80052d4:	1da0      	adds	r0, r4, #6
 80052d6:	491f      	ldr	r1, [pc, #124]	; (8005354 <hf2_data_rx_cb+0x2f8>)
    volatile uint32_t dataToSendLength = 4 + size;
 80052d8:	3504      	adds	r5, #4
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 80052da:	f7fe fc21 	bl	8003b20 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 80052de:	9508      	str	r5, [sp, #32]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80052e0:	9908      	ldr	r1, [sp, #32]
 80052e2:	4640      	mov	r0, r8
 80052e4:	2240      	movs	r2, #64	; 0x40
 80052e6:	f7ff fe3d 	bl	8004f64 <pokeSend>
            send_hf2_response(pkt, info_size); debug_force_flush(); ////
 80052ea:	f7fe fd35 	bl	8003d58 <debug_force_flush>
 80052ee:	683c      	ldr	r4, [r7, #0]
 80052f0:	e6da      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
 80052f2:	bf00      	nop
 80052f4:	200009dc 	.word	0x200009dc
 80052f8:	20000a1c 	.word	0x20000a1c
 80052fc:	200009cc 	.word	0x200009cc
 8005300:	200009dd 	.word	0x200009dd
 8005304:	08006410 	.word	0x08006410
 8005308:	20000c84 	.word	0x20000c84
 800530c:	200047bc 	.word	0x200047bc
 8005310:	20000b72 	.word	0x20000b72
 8005314:	200009b8 	.word	0x200009b8
 8005318:	080065c4 	.word	0x080065c4
 800531c:	0800658c 	.word	0x0800658c
 8005320:	08010000 	.word	0x08010000
 8005324:	08005fd0 	.word	0x08005fd0
 8005328:	0800641c 	.word	0x0800641c
 800532c:	200009d0 	.word	0x200009d0
 8005330:	08006484 	.word	0x08006484
 8005334:	08005e54 	.word	0x08005e54
 8005338:	20000b73 	.word	0x20000b73
 800533c:	200009c0 	.word	0x200009c0
 8005340:	08006464 	.word	0x08006464
 8005344:	080065b8 	.word	0x080065b8
 8005348:	20000b75 	.word	0x20000b75
 800534c:	080065ac 	.word	0x080065ac
 8005350:	08006434 	.word	0x08006434
 8005354:	080066d0 	.word	0x080066d0
 8005358:	08006450 	.word	0x08006450
 800535c:	200009b4 	.word	0x200009b4
 8005360:	08000150 	.word	0x08000150
 8005364:	200009bc 	.word	0x200009bc
        case HF2_CMD_BININFO: {  debug_println("hf2 >> bininfo");
 8005368:	48ae      	ldr	r0, [pc, #696]	; (8005624 <hf2_data_rx_cb+0x5c8>)
 800536a:	f7fe fd6b 	bl	8003e44 <debug_println>
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 800536e:	f7ff fc6f 	bl	8004c50 <boot_target_get_startup_mode>
    volatile uint32_t dataToSendLength = 4 + size;
 8005372:	2118      	movs	r1, #24
                HF2_MODE_BOOTLOADER :
 8005374:	2802      	cmp	r0, #2
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005376:	f04f 0300 	mov.w	r3, #0
                HF2_MODE_BOOTLOADER :
 800537a:	bf18      	it	ne
 800537c:	2602      	movne	r6, #2
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800537e:	2240      	movs	r2, #64	; 0x40
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005380:	f04f 0e10 	mov.w	lr, #16
 8005384:	f06f 0c1d 	mvn.w	ip, #29
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005388:	f04f 0b01 	mov.w	fp, #1
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800538c:	f04f 0a04 	mov.w	sl, #4
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005390:	f04f 0972 	mov.w	r9, #114	; 0x72
 8005394:	255e      	movs	r5, #94	; 0x5e
    volatile uint32_t dataToSendLength = 4 + size;
 8005396:	9107      	str	r1, [sp, #28]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005398:	72a3      	strb	r3, [r4, #10]
 800539a:	7323      	strb	r3, [r4, #12]
 800539c:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 800539e:	73a3      	strb	r3, [r4, #14]
 80053a0:	7423      	strb	r3, [r4, #16]
 80053a2:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 80053a4:	7523      	strb	r3, [r4, #20]
 80053a6:	7563      	strb	r3, [r4, #21]
 80053a8:	74a2      	strb	r2, [r4, #18]
            resp->bininfo.uf2_family = UF2_FAMILY;
 80053aa:	f884 e017 	strb.w	lr, [r4, #23]
 80053ae:	f884 c018 	strb.w	ip, [r4, #24]
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 80053b2:	f8c4 6006 	str.w	r6, [r4, #6]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80053b6:	9907      	ldr	r1, [sp, #28]
 80053b8:	4640      	mov	r0, r8
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 80053ba:	f884 b00b 	strb.w	fp, [r4, #11]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 80053be:	f884 b00f 	strb.w	fp, [r4, #15]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 80053c2:	f884 a013 	strb.w	sl, [r4, #19]
            resp->bininfo.uf2_family = UF2_FAMILY;
 80053c6:	f884 9016 	strb.w	r9, [r4, #22]
 80053ca:	7665      	strb	r5, [r4, #25]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80053cc:	f7ff fdca 	bl	8004f64 <pokeSend>
            send_hf2_response(pkt, sizeof(resp->bininfo)); debug_force_flush(); ////
 80053d0:	f7fe fcc2 	bl	8003d58 <debug_force_flush>
 80053d4:	683c      	ldr	r4, [r7, #0]
 80053d6:	e667      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
        default: { debug_print("hf2 >> unknown "); debug_print_unsigned(cmdId); debug_println(""); debug_force_flush(); ////
 80053d8:	4893      	ldr	r0, [pc, #588]	; (8005628 <hf2_data_rx_cb+0x5cc>)
 80053da:	f7fe fd2d 	bl	8003e38 <debug_print>
 80053de:	4630      	mov	r0, r6
 80053e0:	f7fe fd4c 	bl	8003e7c <debug_print_unsigned>
 80053e4:	4891      	ldr	r0, [pc, #580]	; (800562c <hf2_data_rx_cb+0x5d0>)
 80053e6:	f7fe fd2d 	bl	8003e44 <debug_println>
 80053ea:	f7fe fcb5 	bl	8003d58 <debug_force_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 80053ee:	2104      	movs	r1, #4
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80053f0:	2200      	movs	r2, #0
 80053f2:	2301      	movs	r3, #1
    volatile uint32_t dataToSendLength = 4 + size;
 80053f4:	9102      	str	r1, [sp, #8]
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80053f6:	7162      	strb	r2, [r4, #5]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80053f8:	9902      	ldr	r1, [sp, #8]
 80053fa:	4640      	mov	r0, r8
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80053fc:	7123      	strb	r3, [r4, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	f7ff fdb0 	bl	8004f64 <pokeSend>
 8005404:	e725      	b.n	8005252 <hf2_data_rx_cb+0x1f6>
        debug_println("find vector..."); debug_force_flush();
 8005406:	488a      	ldr	r0, [pc, #552]	; (8005630 <hf2_data_rx_cb+0x5d4>)
 8005408:	f7fe fd1c 	bl	8003e44 <debug_println>
 800540c:	f7fe fca4 	bl	8003d58 <debug_force_flush>
        new_base_vector = NULL;
 8005410:	2000      	movs	r0, #0
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 8005412:	f8d9 3010 	ldr.w	r3, [r9, #16]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 8005416:	f8d9 100c 	ldr.w	r1, [r9, #12]
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 800541a:	f423 727f 	bic.w	r2, r3, #1020	; 0x3fc
 800541e:	f022 0203 	bic.w	r2, r2, #3
 8005422:	f8c8 2000 	str.w	r2, [r8]
        new_bootloader_size = (uint32_t) base_vector_table.application - FLASH_BASE;
 8005426:	4a83      	ldr	r2, [pc, #524]	; (8005634 <hf2_data_rx_cb+0x5d8>)
 8005428:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800542c:	6013      	str	r3, [r2, #0]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 800542e:	4b82      	ldr	r3, [pc, #520]	; (8005638 <hf2_data_rx_cb+0x5dc>)
        new_base_vector = NULL;
 8005430:	4a82      	ldr	r2, [pc, #520]	; (800563c <hf2_data_rx_cb+0x5e0>)
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 8005432:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8005436:	6019      	str	r1, [r3, #0]
        new_base_vector = NULL;
 8005438:	6010      	str	r0, [r2, #0]
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 800543a:	f3c9 0309 	ubfx	r3, r9, #0, #10
 800543e:	4333      	orrs	r3, r6
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	497f      	ldr	r1, [pc, #508]	; (8005640 <hf2_data_rx_cb+0x5e4>)
 8005444:	4288      	cmp	r0, r1
 8005446:	d046      	beq.n	80054d6 <hf2_data_rx_cb+0x47a>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8005448:	f8d8 3000 	ldr.w	r3, [r8]
 800544c:	429d      	cmp	r5, r3
 800544e:	f4bf aef1 	bcs.w	8005234 <hf2_data_rx_cb+0x1d8>
        target_addr += old_app_start_offset;
 8005452:	445d      	add	r5, fp
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 8005454:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8005458:	d325      	bcc.n	80054a6 <hf2_data_rx_cb+0x44a>
 800545a:	4b7a      	ldr	r3, [pc, #488]	; (8005644 <hf2_data_rx_cb+0x5e8>)
 800545c:	f505 7280 	add.w	r2, r5, #256	; 0x100
 8005460:	429a      	cmp	r2, r3
 8005462:	d820      	bhi.n	80054a6 <hf2_data_rx_cb+0x44a>
    if (assertion) { return; }
 8005464:	f5ba 7f86 	cmp.w	sl, #268	; 0x10c
 8005468:	f47f aee7 	bne.w	800523a <hf2_data_rx_cb+0x1de>
        flash_write(target_addr, data, HF2_PAGE_SIZE);
 800546c:	f104 010e 	add.w	r1, r4, #14
 8005470:	4628      	mov	r0, r5
 8005472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005476:	f000 fa8d 	bl	8005994 <flash_write>
 800547a:	683c      	ldr	r4, [r7, #0]
 800547c:	e614      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 800547e:	f8df b210 	ldr.w	fp, [pc, #528]	; 8005690 <hf2_data_rx_cb+0x634>
 8005482:	e692      	b.n	80051aa <hf2_data_rx_cb+0x14e>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 8005484:	4870      	ldr	r0, [pc, #448]	; (8005648 <hf2_data_rx_cb+0x5ec>)
 8005486:	f7fe fcdd 	bl	8003e44 <debug_println>
 800548a:	f7fe fc65 	bl	8003d58 <debug_force_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 800548e:	2304      	movs	r3, #4
                restart_request = BOOTLOADER_MODE; 
 8005490:	2402      	movs	r4, #2
    volatile uint32_t dataToSendLength = 4 + size;
 8005492:	9305      	str	r3, [sp, #20]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005494:	9905      	ldr	r1, [sp, #20]
                restart_request = BOOTLOADER_MODE; 
 8005496:	4b6d      	ldr	r3, [pc, #436]	; (800564c <hf2_data_rx_cb+0x5f0>)
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005498:	4640      	mov	r0, r8
 800549a:	2240      	movs	r2, #64	; 0x40
                restart_request = BOOTLOADER_MODE; 
 800549c:	701c      	strb	r4, [r3, #0]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800549e:	f7ff fd61 	bl	8004f64 <pokeSend>
 80054a2:	683c      	ldr	r4, [r7, #0]
 80054a4:	e600      	b.n	80050a8 <hf2_data_rx_cb+0x4c>
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 80054a6:	486a      	ldr	r0, [pc, #424]	; (8005650 <hf2_data_rx_cb+0x5f4>)
 80054a8:	f7fe fcc6 	bl	8003e38 <debug_print>
 80054ac:	4628      	mov	r0, r5
 80054ae:	f7fe fd0b 	bl	8003ec8 <debug_printhex_unsigned>
 80054b2:	485e      	ldr	r0, [pc, #376]	; (800562c <hf2_data_rx_cb+0x5d0>)
 80054b4:	f7fe fcc6 	bl	8003e44 <debug_println>
 80054b8:	f7fe fc4e 	bl	8003d58 <debug_force_flush>
 80054bc:	e6ba      	b.n	8005234 <hf2_data_rx_cb+0x1d8>
 80054be:	4865      	ldr	r0, [pc, #404]	; (8005654 <hf2_data_rx_cb+0x5f8>)
 80054c0:	f7ff fdbe 	bl	8005040 <assert.part.0>
 80054c4:	e705      	b.n	80052d2 <hf2_data_rx_cb+0x276>
    if (flush_count++) { debug_flush(); }
 80054c6:	f7fe fc3d 	bl	8003d44 <debug_flush>
 80054ca:	e689      	b.n	80051e0 <hf2_data_rx_cb+0x184>
    volatile uint32_t dataToSendLength = 4 + size;
 80054cc:	2304      	movs	r3, #4
 80054ce:	930a      	str	r3, [sp, #40]	; 0x28
                restart_request = BOOTLOADER_MODE; 
 80054d0:	2402      	movs	r4, #2
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80054d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054d4:	e7df      	b.n	8005496 <hf2_data_rx_cb+0x43a>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 80054d6:	6958      	ldr	r0, [r3, #20]
 80054d8:	495f      	ldr	r1, [pc, #380]	; (8005658 <hf2_data_rx_cb+0x5fc>)
 80054da:	4288      	cmp	r0, r1
 80054dc:	d1b4      	bne.n	8005448 <hf2_data_rx_cb+0x3ec>
        new_base_vector = BASE_VECTOR_TABLE(old_app_start);
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	9201      	str	r2, [sp, #4]
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 80054e2:	6919      	ldr	r1, [r3, #16]
        new_bootloader_size = new_app_start - FLASH_BASE;
 80054e4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8005634 <hf2_data_rx_cb+0x5d8>
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 80054e8:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
 80054ec:	f021 0103 	bic.w	r1, r1, #3
        new_bootloader_size = new_app_start - FLASH_BASE;
 80054f0:	f101 4078 	add.w	r0, r1, #4160749568	; 0xf8000000
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 80054f4:	f8c8 1000 	str.w	r1, [r8]
        new_bootloader_size = new_app_start - FLASH_BASE;
 80054f8:	f8c9 0000 	str.w	r0, [r9]
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	494e      	ldr	r1, [pc, #312]	; (8005638 <hf2_data_rx_cb+0x5dc>)
 8005500:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8005504:	4855      	ldr	r0, [pc, #340]	; (800565c <hf2_data_rx_cb+0x600>)
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8005506:	600b      	str	r3, [r1, #0]
 8005508:	9100      	str	r1, [sp, #0]
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 800550a:	f7fe fc95 	bl	8003e38 <debug_print>
 800550e:	f8d8 0000 	ldr.w	r0, [r8]
 8005512:	f7fe fcd9 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", boot size "); debug_printhex_unsigned(new_bootloader_size);
 8005516:	4852      	ldr	r0, [pc, #328]	; (8005660 <hf2_data_rx_cb+0x604>)
 8005518:	f7fe fc8e 	bl	8003e38 <debug_print>
 800551c:	f8d9 0000 	ldr.w	r0, [r9]
 8005520:	f7fe fcd2 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", base size "); debug_printhex_unsigned(new_baseloader_size);
 8005524:	484f      	ldr	r0, [pc, #316]	; (8005664 <hf2_data_rx_cb+0x608>)
 8005526:	f7fe fc87 	bl	8003e38 <debug_print>
 800552a:	9900      	ldr	r1, [sp, #0]
 800552c:	6808      	ldr	r0, [r1, #0]
 800552e:	f7fe fccb 	bl	8003ec8 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8005532:	483e      	ldr	r0, [pc, #248]	; (800562c <hf2_data_rx_cb+0x5d0>)
 8005534:	f7fe fc86 	bl	8003e44 <debug_println>
 8005538:	f7fe fc0e 	bl	8003d58 <debug_force_flush>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 800553c:	f8d8 3000 	ldr.w	r3, [r8]
 8005540:	9a01      	ldr	r2, [sp, #4]
 8005542:	429d      	cmp	r5, r3
 8005544:	d385      	bcc.n	8005452 <hf2_data_rx_cb+0x3f6>
    }  else if (new_base_vector && (target_addr == new_app_start)) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	2a00      	cmp	r2, #0
 800554a:	f47f ae70 	bne.w	800522e <hf2_data_rx_cb+0x1d2>
 800554e:	e671      	b.n	8005234 <hf2_data_rx_cb+0x1d8>
        debug_println("wrote bootloader"); debug_force_flush();
 8005550:	4845      	ldr	r0, [pc, #276]	; (8005668 <hf2_data_rx_cb+0x60c>)
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 8005552:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005634 <hf2_data_rx_cb+0x5d8>
 8005556:	9300      	str	r3, [sp, #0]
        debug_println("wrote bootloader"); debug_force_flush();
 8005558:	f7fe fc74 	bl	8003e44 <debug_println>
 800555c:	f7fe fbfc 	bl	8003d58 <debug_force_flush>
        flash_flush();  //  Flush the last Bootloader page.
 8005560:	f000 f9ca 	bl	80058f8 <flash_flush>
        debug_println("compare bootloader..."); debug_force_flush();
 8005564:	4841      	ldr	r0, [pc, #260]	; (800566c <hf2_data_rx_cb+0x610>)
 8005566:	f7fe fc6d 	bl	8003e44 <debug_println>
 800556a:	f7fe fbf5 	bl	8003d58 <debug_force_flush>
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 800556e:	f8d8 2000 	ldr.w	r2, [r8]
 8005572:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005576:	4630      	mov	r0, r6
 8005578:	f7fe faf2 	bl	8003b60 <memcmp>
        if (bootloader_changed) {
 800557c:	b990      	cbnz	r0, 80055a4 <hf2_data_rx_cb+0x548>
        debug_print("bootloader identical "); debug_printhex_unsigned(old_app_start);
 800557e:	483c      	ldr	r0, [pc, #240]	; (8005670 <hf2_data_rx_cb+0x614>)
 8005580:	f7fe fc5a 	bl	8003e38 <debug_print>
 8005584:	4630      	mov	r0, r6
 8005586:	f7fe fc9f 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 800558a:	483a      	ldr	r0, [pc, #232]	; (8005674 <hf2_data_rx_cb+0x618>)
 800558c:	f7fe fc54 	bl	8003e38 <debug_print>
 8005590:	f8d8 0000 	ldr.w	r0, [r8]
 8005594:	f7fe fc98 	bl	8003ec8 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8005598:	4824      	ldr	r0, [pc, #144]	; (800562c <hf2_data_rx_cb+0x5d0>)
 800559a:	f7fe fc53 	bl	8003e44 <debug_println>
 800559e:	f7fe fbdb 	bl	8003d58 <debug_force_flush>
 80055a2:	e647      	b.n	8005234 <hf2_data_rx_cb+0x1d8>
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 80055a4:	9b00      	ldr	r3, [sp, #0]
            debug_println("bootloader changed"); debug_force_flush();
 80055a6:	4834      	ldr	r0, [pc, #208]	; (8005678 <hf2_data_rx_cb+0x61c>)
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 80055a8:	449b      	add	fp, r3
            debug_println("bootloader changed"); debug_force_flush();
 80055aa:	f7fe fc4b 	bl	8003e44 <debug_println>
 80055ae:	f7fe fbd3 	bl	8003d58 <debug_force_flush>
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 80055b2:	4832      	ldr	r0, [pc, #200]	; (800567c <hf2_data_rx_cb+0x620>)
 80055b4:	f7fe fc40 	bl	8003e38 <debug_print>
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 80055b8:	4c1f      	ldr	r4, [pc, #124]	; (8005638 <hf2_data_rx_cb+0x5dc>)
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 80055ba:	4658      	mov	r0, fp
 80055bc:	f7fe fc84 	bl	8003ec8 <debug_printhex_unsigned>
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 80055c0:	482c      	ldr	r0, [pc, #176]	; (8005674 <hf2_data_rx_cb+0x618>)
 80055c2:	f7fe fc39 	bl	8003e38 <debug_print>
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	f7fe fc7e 	bl	8003ec8 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 80055cc:	4817      	ldr	r0, [pc, #92]	; (800562c <hf2_data_rx_cb+0x5d0>)
 80055ce:	f7fe fc39 	bl	8003e44 <debug_println>
 80055d2:	f7fe fbc1 	bl	8003d58 <debug_force_flush>
            flash_write(new_baseloader_addr, (const uint8_t *) old_app_start, new_baseloader_size);
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	4631      	mov	r1, r6
 80055da:	4658      	mov	r0, fp
 80055dc:	f000 f9da 	bl	8005994 <flash_write>
            flash_flush();
 80055e0:	f000 f98a 	bl	80058f8 <flash_flush>
            debug_print("restart to baseloader "); debug_printhex_unsigned(new_baseloader_addr);
 80055e4:	4826      	ldr	r0, [pc, #152]	; (8005680 <hf2_data_rx_cb+0x624>)
 80055e6:	f7fe fc27 	bl	8003e38 <debug_print>
 80055ea:	4658      	mov	r0, fp
 80055ec:	f7fe fc6c 	bl	8003ec8 <debug_printhex_unsigned>
            debug_print(", baselen "); debug_printhex_unsigned(new_baseloader_size);
 80055f0:	4824      	ldr	r0, [pc, #144]	; (8005684 <hf2_data_rx_cb+0x628>)
 80055f2:	f7fe fc21 	bl	8003e38 <debug_print>
 80055f6:	6820      	ldr	r0, [r4, #0]
 80055f8:	f7fe fc66 	bl	8003ec8 <debug_printhex_unsigned>
            debug_print(", oldapp "); debug_printhex_unsigned(old_app_start);
 80055fc:	4822      	ldr	r0, [pc, #136]	; (8005688 <hf2_data_rx_cb+0x62c>)
 80055fe:	f7fe fc1b 	bl	8003e38 <debug_print>
 8005602:	4630      	mov	r0, r6
 8005604:	f7fe fc60 	bl	8003ec8 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(new_bootloader_size);
 8005608:	4820      	ldr	r0, [pc, #128]	; (800568c <hf2_data_rx_cb+0x630>)
 800560a:	f7fe fc15 	bl	8003e38 <debug_print>
 800560e:	f8d8 0000 	ldr.w	r0, [r8]
 8005612:	f7fe fc59 	bl	8003ec8 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <hf2_data_rx_cb+0x5d0>)
 8005618:	f7fe fc14 	bl	8003e44 <debug_println>
 800561c:	f7fe fb9c 	bl	8003d58 <debug_force_flush>
 8005620:	e629      	b.n	8005276 <hf2_data_rx_cb+0x21a>
 8005622:	bf00      	nop
 8005624:	08006424 	.word	0x08006424
 8005628:	080065d0 	.word	0x080065d0
 800562c:	08005b40 	.word	0x08005b40
 8005630:	08006494 	.word	0x08006494
 8005634:	200009c8 	.word	0x200009c8
 8005638:	200009c4 	.word	0x200009c4
 800563c:	200009c0 	.word	0x200009c0
 8005640:	22051969 	.word	0x22051969
 8005644:	08010000 	.word	0x08010000
 8005648:	08006474 	.word	0x08006474
 800564c:	20000b75 	.word	0x20000b75
 8005650:	080064d8 	.word	0x080064d8
 8005654:	08006440 	.word	0x08006440
 8005658:	19690522 	.word	0x19690522
 800565c:	080064a4 	.word	0x080064a4
 8005660:	080064b8 	.word	0x080064b8
 8005664:	080064c8 	.word	0x080064c8
 8005668:	080064f4 	.word	0x080064f4
 800566c:	08006508 	.word	0x08006508
 8005670:	08006574 	.word	0x08006574
 8005674:	08006548 	.word	0x08006548
 8005678:	08006520 	.word	0x08006520
 800567c:	08006534 	.word	0x08006534
 8005680:	08006550 	.word	0x08006550
 8005684:	08006568 	.word	0x08006568
 8005688:	08005de4 	.word	0x08005de4
 800568c:	08005df0 	.word	0x08005df0
 8005690:	0800641c 	.word	0x0800641c

08005694 <hf2_data_tx_cb>:
static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) { (void)usbd_dev; (void)ep;
 8005694:	b510      	push	{r4, lr}
    if (remDataToSendLength > 0) {  //  If there is remaining data to be sent...
 8005696:	4c0f      	ldr	r4, [pc, #60]	; (80056d4 <hf2_data_tx_cb+0x40>)
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	b943      	cbnz	r3, 80056ae <hf2_data_tx_cb+0x1a>
    if (remDataToSendLength == 0) {  //  If there is no more data to be sent...
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	b92b      	cbnz	r3, 80056ac <hf2_data_tx_cb+0x18>
        if (restart_request == BOOTLOADER_MODE) {  //  Restart to Bootloader Mode if requested.
 80056a0:	490d      	ldr	r1, [pc, #52]	; (80056d8 <hf2_data_tx_cb+0x44>)
 80056a2:	780a      	ldrb	r2, [r1, #0]
 80056a4:	2a02      	cmp	r2, #2
 80056a6:	d00f      	beq.n	80056c8 <hf2_data_tx_cb+0x34>
        } else if (restart_request == APPLICATION_MODE) {  //  Restart to Application Mode if requested.
 80056a8:	2a01      	cmp	r2, #1
 80056aa:	d008      	beq.n	80056be <hf2_data_tx_cb+0x2a>
}
 80056ac:	bd10      	pop	{r4, pc}
        pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);  //  Send it.
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <hf2_data_tx_cb+0x48>)
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <hf2_data_tx_cb+0x4c>)
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	7812      	ldrb	r2, [r2, #0]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	f7ff fc54 	bl	8004f64 <pokeSend>
 80056bc:	e7ee      	b.n	800569c <hf2_data_tx_cb+0x8>
}
 80056be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            restart_request = UNKNOWN_MODE;
 80056c2:	700b      	strb	r3, [r1, #0]
            boot_target_manifest_app();  //  Never returns.
 80056c4:	f7ff bb38 	b.w	8004d38 <boot_target_manifest_app>
}
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            restart_request = UNKNOWN_MODE;
 80056cc:	700b      	strb	r3, [r1, #0]
            boot_target_manifest_bootloader();  //  Never returns.
 80056ce:	f7ff bb43 	b.w	8004d58 <boot_target_manifest_bootloader>
 80056d2:	bf00      	nop
 80056d4:	200009d8 	.word	0x200009d8
 80056d8:	20000b75 	.word	0x20000b75
 80056dc:	200009d4 	.word	0x200009d4
 80056e0:	20000b74 	.word	0x20000b74

080056e4 <hf2_setup>:
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	460d      	mov	r5, r1
 80056e8:	4604      	mov	r4, r0
    debug_print("flash allow "); debug_printhex_unsigned(USER_FLASH_START); debug_print(" to "); debug_printhex_unsigned(USER_FLASH_END); debug_println("");  //  Show the addresses that flashing is allowed.
 80056ea:	4815      	ldr	r0, [pc, #84]	; (8005740 <hf2_setup+0x5c>)
 80056ec:	f7fe fba4 	bl	8003e38 <debug_print>
 80056f0:	4814      	ldr	r0, [pc, #80]	; (8005744 <hf2_setup+0x60>)
 80056f2:	f7fe fbe9 	bl	8003ec8 <debug_printhex_unsigned>
 80056f6:	4814      	ldr	r0, [pc, #80]	; (8005748 <hf2_setup+0x64>)
 80056f8:	f7fe fb9e 	bl	8003e38 <debug_print>
 80056fc:	4813      	ldr	r0, [pc, #76]	; (800574c <hf2_setup+0x68>)
 80056fe:	f7fe fbe3 	bl	8003ec8 <debug_printhex_unsigned>
 8005702:	4813      	ldr	r0, [pc, #76]	; (8005750 <hf2_setup+0x6c>)
 8005704:	f7fe fb9e 	bl	8003e44 <debug_println>
    _usbd_dev = usbd_dev;
 8005708:	4a12      	ldr	r2, [pc, #72]	; (8005754 <hf2_setup+0x70>)
    connected_func = connected_func0;  //  test_hf2(); ////
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <hf2_setup+0x74>)
    _usbd_dev = usbd_dev;
 800570c:	6014      	str	r4, [r2, #0]
    connected_func = connected_func0;  //  test_hf2(); ////
 800570e:	601d      	str	r5, [r3, #0]
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) {
 8005710:	f7ff fa9e 	bl	8004c50 <boot_target_get_startup_mode>
 8005714:	2802      	cmp	r0, #2
 8005716:	d00b      	beq.n	8005730 <hf2_setup+0x4c>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 8005718:	4620      	mov	r0, r4
 800571a:	4910      	ldr	r1, [pc, #64]	; (800575c <hf2_setup+0x78>)
 800571c:	f7fe ff46 	bl	80045ac <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8005720:	2800      	cmp	r0, #0
 8005722:	db00      	blt.n	8005726 <hf2_setup+0x42>
}
 8005724:	bd38      	pop	{r3, r4, r5, pc}
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8005726:	480e      	ldr	r0, [pc, #56]	; (8005760 <hf2_setup+0x7c>)
}
 8005728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 800572c:	f7fe bb8a 	b.w	8003e44 <debug_println>
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 8005730:	f240 4242 	movw	r2, #1090	; 0x442
 8005734:	2100      	movs	r1, #0
 8005736:	480b      	ldr	r0, [pc, #44]	; (8005764 <hf2_setup+0x80>)
 8005738:	f7fe fa3a 	bl	8003bb0 <memset>
 800573c:	e7ec      	b.n	8005718 <hf2_setup+0x34>
 800573e:	bf00      	nop
 8005740:	080065f0 	.word	0x080065f0
 8005744:	08007000 	.word	0x08007000
 8005748:	08006600 	.word	0x08006600
 800574c:	08010000 	.word	0x08010000
 8005750:	08005b40 	.word	0x08005b40
 8005754:	200009b0 	.word	0x200009b0
 8005758:	200009b8 	.word	0x200009b8
 800575c:	08004f25 	.word	0x08004f25
 8005760:	08006608 	.word	0x08006608
 8005764:	200047bc 	.word	0x200047bc

08005768 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8005768:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 800576a:	22ff      	movs	r2, #255	; 0xff
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <usb21_set_config+0x20>)
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	f7fe ff3a 	bl	80045e8 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8005774:	2800      	cmp	r0, #0
 8005776:	db00      	blt.n	800577a <usb21_set_config+0x12>
}
 8005778:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 800577a:	4804      	ldr	r0, [pc, #16]	; (800578c <usb21_set_config+0x24>)
 800577c:	f7fe fb62 	bl	8003e44 <debug_println>
}
 8005780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8005784:	f7fe bade 	b.w	8003d44 <debug_flush>
 8005788:	08005791 	.word	0x08005791
 800578c:	08006630 	.word	0x08006630

08005790 <usb21_standard_get_descriptor>:
	int descr_type = req->wValue >> 8;
 8005790:	8848      	ldrh	r0, [r1, #2]
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8005792:	0a00      	lsrs	r0, r0, #8
 8005794:	280f      	cmp	r0, #15
 8005796:	d10e      	bne.n	80057b6 <usb21_standard_get_descriptor+0x26>
											usbd_control_complete_callback* complete) {
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb21_bos) {
 800579c:	4f31      	ldr	r7, [pc, #196]	; (8005864 <usb21_standard_get_descriptor+0xd4>)
											usbd_control_complete_callback* complete) {
 800579e:	b085      	sub	sp, #20
	if (!usb21_bos) {
 80057a0:	683d      	ldr	r5, [r7, #0]
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	4616      	mov	r6, r2
 80057a6:	b145      	cbz	r5, 80057ba <usb21_standard_get_descriptor+0x2a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 80057a8:	784b      	ldrb	r3, [r1, #1]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d00c      	beq.n	80057c8 <usb21_standard_get_descriptor+0x38>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80057ae:	2002      	movs	r0, #2
}
 80057b0:	b005      	add	sp, #20
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80057b6:	2002      	movs	r0, #2
}
 80057b8:	4770      	bx	lr
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 80057ba:	482b      	ldr	r0, [pc, #172]	; (8005868 <usb21_standard_get_descriptor+0xd8>)
 80057bc:	f7fe fb42 	bl	8003e44 <debug_println>
 80057c0:	f7fe fac0 	bl	8003d44 <debug_flush>
 80057c4:	4628      	mov	r0, r5
 80057c6:	e7f3      	b.n	80057b0 <usb21_standard_get_descriptor+0x20>
		dump_usb_request("bos", req); // debug_flush(); ////
 80057c8:	4828      	ldr	r0, [pc, #160]	; (800586c <usb21_standard_get_descriptor+0xdc>)
 80057ca:	f7fe ff6b 	bl	80046a4 <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80057ce:	f8d7 b000 	ldr.w	fp, [r7]
 80057d2:	9b01      	ldr	r3, [sp, #4]
	bytes_to_copy = MIN(len, bos->bLength);
 80057d4:	f89b 8000 	ldrb.w	r8, [fp]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80057d8:	881c      	ldrh	r4, [r3, #0]
 80057da:	6830      	ldr	r0, [r6, #0]
	bytes_to_copy = MIN(len, bos->bLength);
 80057dc:	45a0      	cmp	r8, r4
 80057de:	bf28      	it	cs
 80057e0:	46a0      	movcs	r8, r4
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80057e2:	4605      	mov	r5, r0
	memcpy(buf, bos, bytes_to_copy);
 80057e4:	4642      	mov	r2, r8
 80057e6:	4659      	mov	r1, fp
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80057e8:	9403      	str	r4, [sp, #12]
 80057ea:	9002      	str	r0, [sp, #8]
	memcpy(buf, bos, bytes_to_copy);
 80057ec:	f7fe f998 	bl	8003b20 <memcpy>
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 80057f0:	f89b 2004 	ldrb.w	r2, [fp, #4]
	len -= bytes_to_copy;
 80057f4:	eba4 0708 	sub.w	r7, r4, r8
	buf += bytes_to_copy;
 80057f8:	eb05 0a08 	add.w	sl, r5, r8
	len -= bytes_to_copy;
 80057fc:	b2bf      	uxth	r7, r7
	totallen += bos->bLength;
 80057fe:	f89b 5000 	ldrb.w	r5, [fp]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005802:	b302      	cbz	r2, 8005846 <usb21_standard_get_descriptor+0xb6>
 8005804:	2600      	movs	r6, #0
 8005806:	46a9      	mov	r9, r5
			bos->capabilities[i];
 8005808:	f8db 3005 	ldr.w	r3, [fp, #5]
		memcpy(buf, cap, bytes_to_copy);
 800580c:	4650      	mov	r0, sl
		const struct usb_device_capability_descriptor *cap =
 800580e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8005812:	3601      	adds	r6, #1
		bytes_to_copy = MIN(len, cap->bLength);
 8005814:	782c      	ldrb	r4, [r5, #0]
		memcpy(buf, cap, bytes_to_copy);
 8005816:	4629      	mov	r1, r5
		bytes_to_copy = MIN(len, cap->bLength);
 8005818:	42bc      	cmp	r4, r7
 800581a:	bf28      	it	cs
 800581c:	463c      	movcs	r4, r7
		memcpy(buf, cap, bytes_to_copy);
 800581e:	4622      	mov	r2, r4
 8005820:	f7fe f97e 	bl	8003b20 <memcpy>
		totallen += cap->bLength;
 8005824:	782b      	ldrb	r3, [r5, #0]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005826:	f89b 2004 	ldrb.w	r2, [fp, #4]
		totallen += cap->bLength;
 800582a:	eb09 0503 	add.w	r5, r9, r3
 800582e:	b2b3      	uxth	r3, r6
		len -= bytes_to_copy;
 8005830:	1b3f      	subs	r7, r7, r4
		total += bytes_to_copy;
 8005832:	44a0      	add	r8, r4
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005834:	429a      	cmp	r2, r3
		len -= bytes_to_copy;
 8005836:	b2bf      	uxth	r7, r7
		total += bytes_to_copy;
 8005838:	fa1f f888 	uxth.w	r8, r8
		buf += bytes_to_copy;
 800583c:	44a2      	add	sl, r4
		totallen += cap->bLength;
 800583e:	fa1f f985 	uxth.w	r9, r5
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005842:	d8e1      	bhi.n	8005808 <usb21_standard_get_descriptor+0x78>
 8005844:	464d      	mov	r5, r9
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005846:	9b03      	ldr	r3, [sp, #12]
		return USBD_REQ_HANDLED;
 8005848:	2001      	movs	r0, #1
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800584a:	4543      	cmp	r3, r8
 800584c:	bf28      	it	cs
 800584e:	4643      	movcs	r3, r8
 8005850:	4698      	mov	r8, r3
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	805d      	strh	r5, [r3, #2]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	f8a3 8000 	strh.w	r8, [r3]
}
 800585c:	b005      	add	sp, #20
 800585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005862:	bf00      	nop
 8005864:	20000a60 	.word	0x20000a60
 8005868:	08006664 	.word	0x08006664
 800586c:	08006684 	.word	0x08006684

08005870 <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <usb21_setup+0x2c>)
 8005876:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 8005878:	2100      	movs	r1, #0
 800587a:	f7ff ff75 	bl	8005768 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 800587e:	4620      	mov	r0, r4
 8005880:	4907      	ldr	r1, [pc, #28]	; (80058a0 <usb21_setup+0x30>)
 8005882:	f7fe fe93 	bl	80045ac <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8005886:	2800      	cmp	r0, #0
 8005888:	db00      	blt.n	800588c <usb21_setup+0x1c>
}
 800588a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 800588c:	4805      	ldr	r0, [pc, #20]	; (80058a4 <usb21_setup+0x34>)
 800588e:	f7fe fad9 	bl	8003e44 <debug_println>
}
 8005892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8005896:	f7fe ba55 	b.w	8003d44 <debug_flush>
 800589a:	bf00      	nop
 800589c:	20000a60 	.word	0x20000a60
 80058a0:	08005769 	.word	0x08005769
 80058a4:	0800664c 	.word	0x0800664c

080058a8 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4605      	mov	r5, r0
 80058ac:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 80058ae:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80058b2:	f7fb f975 	bl	8000ba0 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 80058b6:	f240 309b 	movw	r0, #923	; 0x39b
 80058ba:	f7fb f971 	bl	8000ba0 <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 80058be:	f7fb f95f 	bl	8000b80 <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 80058c2:	4a06      	ldr	r2, [pc, #24]	; (80058dc <backup_write+0x34>)
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 80058c4:	006b      	lsls	r3, r5, #1
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 80058c6:	b2a1      	uxth	r1, r4
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 80058c8:	3301      	adds	r3, #1
 80058ca:	0c24      	lsrs	r4, r4, #16
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 80058cc:	f822 1035 	strh.w	r1, [r2, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 80058d0:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    pwr_enable_backup_domain_write_protect();
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 80058d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pwr_enable_backup_domain_write_protect();
 80058d8:	f7fb b95a 	b.w	8000b90 <pwr_enable_backup_domain_write_protect>
 80058dc:	40006c04 	.word	0x40006c04

080058e0 <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 80058e0:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <backup_read+0x14>)
 80058e2:	0043      	lsls	r3, r0, #1
 80058e4:	3301      	adds	r3, #1
 80058e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 80058ea:	f832 0030 	ldrh.w	r0, [r2, r0, lsl #3]
    return value;
}
 80058ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80058f2:	4770      	bx	lr
 80058f4:	40006c04 	.word	0x40006c04

080058f8 <flash_flush>:
	//  TODO: Validate dest, src, half_word_count before flashing.
	int bytes_flashed = baseloader_start((uint32_t *) dest0, (const uint32_t *) src0, half_word_count0 * 2);
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
}

void flash_flush(void) {
 80058f8:	b538      	push	{r3, r4, r5, lr}
    //  Flush the page of cached flashing data to ROM.
    lastFlush = ms;
 80058fa:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <flash_flush+0x78>)
    if (flashAddr == NO_CACHE) { return; }
 80058fc:	4c1d      	ldr	r4, [pc, #116]	; (8005974 <flash_flush+0x7c>)
    lastFlush = ms;
 80058fe:	681a      	ldr	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 8005900:	6821      	ldr	r1, [r4, #0]
    lastFlush = ms;
 8005902:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <flash_flush+0x80>)
 8005904:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 8005906:	1c4b      	adds	r3, r1, #1
 8005908:	d00d      	beq.n	8005926 <flash_flush+0x2e>
    if (firstFlush) { firstFlush = false; }  //  TODO: disable bootloader or something
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <flash_flush+0x84>)
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	b10a      	cbz	r2, 8005914 <flash_flush+0x1c>
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 8005914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005918:	4819      	ldr	r0, [pc, #100]	; (8005980 <flash_flush+0x88>)
 800591a:	f7fe f921 	bl	8003b60 <memcmp>
 800591e:	b918      	cbnz	r0, 8005928 <flash_flush+0x30>
        //  If the page contents are different, write to ROM.
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
    }
    flashAddr = NO_CACHE;
 8005920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005924:	6023      	str	r3, [r4, #0]
}
 8005926:	bd38      	pop	{r3, r4, r5, pc}
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
 8005928:	4816      	ldr	r0, [pc, #88]	; (8005984 <flash_flush+0x8c>)
 800592a:	f7fe fa85 	bl	8003e38 <debug_print>
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	f7fe faca 	bl	8003ec8 <debug_printhex_unsigned>
 8005934:	4814      	ldr	r0, [pc, #80]	; (8005988 <flash_flush+0x90>)
 8005936:	f7fe fa7f 	bl	8003e38 <debug_print>
	int bytes_flashed = baseloader_start((uint32_t *) dest0, (const uint32_t *) src0, half_word_count0 * 2);
 800593a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800593e:	4910      	ldr	r1, [pc, #64]	; (8005980 <flash_flush+0x88>)
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	f7fa fc11 	bl	8000168 <baseloader_start>
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
 8005946:	1e05      	subs	r5, r0, #0
 8005948:	dd03      	ble.n	8005952 <flash_flush+0x5a>
 800594a:	106d      	asrs	r5, r5, #1
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 800594c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005950:	d0e6      	beq.n	8005920 <flash_flush+0x28>
 8005952:	480e      	ldr	r0, [pc, #56]	; (800598c <flash_flush+0x94>)
 8005954:	f7fe fa70 	bl	8003e38 <debug_print>
 8005958:	4628      	mov	r0, r5
 800595a:	f7fe fa8d 	bl	8003e78 <debug_print_int>
 800595e:	480c      	ldr	r0, [pc, #48]	; (8005990 <flash_flush+0x98>)
 8005960:	f7fe fa70 	bl	8003e44 <debug_println>
 8005964:	f7fe f9f8 	bl	8003d58 <debug_force_flush>
    flashAddr = NO_CACHE;
 8005968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	e7da      	b.n	8005926 <flash_flush+0x2e>
 8005970:	20000a68 	.word	0x20000a68
 8005974:	20000538 	.word	0x20000538
 8005978:	20000a64 	.word	0x20000a64
 800597c:	2000053c 	.word	0x2000053c
 8005980:	20004c00 	.word	0x20004c00
 8005984:	08006688 	.word	0x08006688
 8005988:	08005fd0 	.word	0x08005fd0
 800598c:	0800668c 	.word	0x0800668c
 8005990:	08005b40 	.word	0x08005b40

08005994 <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
    //  Write len bytes from src to ROM at address dst.  The writing is buffered in RAM until flash_flush() is called.    
    //  TODO: Support other memory sizes.
    int valid = 
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8005994:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
 8005998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4604      	mov	r4, r0
 800599e:	460e      	mov	r6, r1
 80059a0:	4615      	mov	r5, r2
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 80059a2:	d33f      	bcc.n	8005a24 <flash_write+0x90>
 80059a4:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <flash_write+0xc4>)
 80059a6:	4402      	add	r2, r0
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d83b      	bhi.n	8005a24 <flash_write+0x90>
 80059ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80059b0:	d338      	bcc.n	8005a24 <flash_write+0x90>
        (
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 80059b2:	186a      	adds	r2, r5, r1
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d908      	bls.n	80059ca <flash_write+0x36>
 80059b8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80059bc:	d332      	bcc.n	8005a24 <flash_write+0x90>
            ((uint32_t) src >= 0x20000000 && ((uint32_t) src + byte_count) < 0x20005000)
 80059be:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80059c2:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d82c      	bhi.n	8005a24 <flash_write+0x90>
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
        return;
    }
    while (byte_count > 0) {
 80059ca:	2d00      	cmp	r5, #0
 80059cc:	dd28      	ble.n	8005a20 <flash_write+0x8c>
 80059ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005a5c <flash_write+0xc8>
 80059d2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005a70 <flash_write+0xdc>
        //  Copy one page at a time.
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80059d6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8005a74 <flash_write+0xe0>
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 80059da:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80059de:	462f      	mov	r7, r5
 80059e0:	bfa8      	it	ge
 80059e2:	f44f 6780 	movge.w	r7, #1024	; 0x400
        hadWrite = true;
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80059e6:	f8d8 2000 	ldr.w	r2, [r8]
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80059ea:	ea04 0b0a 	and.w	fp, r4, sl
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80059ee:	4593      	cmp	fp, r2
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
        memcpy(flashBuf + offset, src, len);
        //  Copy next page.
        dst += len;
        src += len;
        byte_count -= len;
 80059f0:	eba5 0507 	sub.w	r5, r5, r7
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80059f4:	d009      	beq.n	8005a0a <flash_write+0x76>
            flash_flush();           //  Flush the previous cached page.
 80059f6:	f7ff ff7f 	bl	80058f8 <flash_flush>
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 80059fa:	4659      	mov	r1, fp
 80059fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a00:	4816      	ldr	r0, [pc, #88]	; (8005a5c <flash_write+0xc8>)
            flashAddr = newAddr;
 8005a02:	f8c8 b000 	str.w	fp, [r8]
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 8005a06:	f7fe f88b 	bl	8003b20 <memcpy>
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
 8005a0a:	f3c4 0009 	ubfx	r0, r4, #0, #10
        memcpy(flashBuf + offset, src, len);
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4448      	add	r0, r9
 8005a12:	463a      	mov	r2, r7
 8005a14:	f7fe f884 	bl	8003b20 <memcpy>
    while (byte_count > 0) {
 8005a18:	2d00      	cmp	r5, #0
        dst += len;
 8005a1a:	443c      	add	r4, r7
        src += len;
 8005a1c:	443e      	add	r6, r7
    while (byte_count > 0) {
 8005a1e:	dcdc      	bgt.n	80059da <flash_write+0x46>
    }
}
 8005a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
 8005a24:	480e      	ldr	r0, [pc, #56]	; (8005a60 <flash_write+0xcc>)
 8005a26:	f7fe fa07 	bl	8003e38 <debug_print>
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7fe fa4c 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8005a30:	480c      	ldr	r0, [pc, #48]	; (8005a64 <flash_write+0xd0>)
 8005a32:	f7fe fa01 	bl	8003e38 <debug_print>
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7fe fa46 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 8005a3c:	480a      	ldr	r0, [pc, #40]	; (8005a68 <flash_write+0xd4>)
 8005a3e:	f7fe f9fb 	bl	8003e38 <debug_print>
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fe fa40 	bl	8003ec8 <debug_printhex_unsigned>
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <flash_write+0xd8>)
 8005a4a:	f7fe f9fb 	bl	8003e44 <debug_println>
}
 8005a4e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 8005a52:	f7fe b981 	b.w	8003d58 <debug_force_flush>
 8005a56:	bf00      	nop
 8005a58:	0800ffff 	.word	0x0800ffff
 8005a5c:	20004c00 	.word	0x20004c00
 8005a60:	080066a8 	.word	0x080066a8
 8005a64:	08005dbc 	.word	0x08005dbc
 8005a68:	08005dc4 	.word	0x08005dc4
 8005a6c:	08005b40 	.word	0x08005b40
 8005a70:	20000538 	.word	0x20000538
 8005a74:	fffffc00 	.word	0xfffffc00
 8005a78:	202a2a2a 	.word	0x202a2a2a
 8005a7c:	206c6168 	.word	0x206c6168
 8005a80:	2f737362 	.word	0x2f737362
 8005a84:	61746164 	.word	0x61746164
 8005a88:	69616620 	.word	0x69616620
 8005a8c:	2c64656c 	.word	0x2c64656c
 8005a90:	73736220 	.word	0x73736220
 8005a94:	7365745f 	.word	0x7365745f
 8005a98:	203d2074 	.word	0x203d2074
 8005a9c:	00000000 	.word	0x00000000
 8005aa0:	6164202c 	.word	0x6164202c
 8005aa4:	745f6174 	.word	0x745f6174
 8005aa8:	20747365 	.word	0x20747365
 8005aac:	0000203d 	.word	0x0000203d
 8005ab0:	00207b75 	.word	0x00207b75
 8005ab4:	0000207d 	.word	0x0000207d
 8005ab8:	00203f61 	.word	0x00203f61
 8005abc:	2d2d2d2d 	.word	0x2d2d2d2d
 8005ac0:	67726174 	.word	0x67726174
 8005ac4:	675f7465 	.word	0x675f7465
 8005ac8:	735f7465 	.word	0x735f7465
 8005acc:	61697265 	.word	0x61697265
 8005ad0:	0000006c 	.word	0x0000006c
 8005ad4:	2a2a2a2a 	.word	0x2a2a2a2a
 8005ad8:	7261742a 	.word	0x7261742a
 8005adc:	5f746567 	.word	0x5f746567
 8005ae0:	696e6170 	.word	0x696e6170
 8005ae4:	00002063 	.word	0x00002063
 8005ae8:	2d2d2d2d 	.word	0x2d2d2d2d
 8005aec:	67726174 	.word	0x67726174
 8005af0:	725f7465 	.word	0x725f7465
 8005af4:	74657365 	.word	0x74657365
 8005af8:	00000000 	.word	0x00000000
 8005afc:	2d2d2d2d 	.word	0x2d2d2d2d
 8005b00:	67726174 	.word	0x67726174
 8005b04:	735f7465 	.word	0x735f7465
 8005b08:	5f646565 	.word	0x5f646565
 8005b0c:	646e6172 	.word	0x646e6172
 8005b10:	00006d6f 	.word	0x00006d6f
 8005b14:	3c207477 	.word	0x3c207477
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	0000203e 	.word	0x0000203e
 8005b20:	70616568 	.word	0x70616568
 8005b24:	61747320 	.word	0x61747320
 8005b28:	203a7472 	.word	0x203a7472
 8005b2c:	00000000 	.word	0x00000000
 8005b30:	6e65202c 	.word	0x6e65202c
 8005b34:	00203a64 	.word	0x00203a64
 8005b38:	6973202c 	.word	0x6973202c
 8005b3c:	203a657a 	.word	0x203a657a
 8005b40:	00000000 	.word	0x00000000
 8005b44:	2c424b20 	.word	0x2c424b20
 8005b48:	61747320 	.word	0x61747320
 8005b4c:	75206b63 	.word	0x75206b63
 8005b50:	3a646573 	.word	0x3a646573
 8005b54:	00000020 	.word	0x00000020
 8005b58:	00424b20 	.word	0x00424b20
 8005b5c:	33323130 	.word	0x33323130
 8005b60:	37363534 	.word	0x37363534
 8005b64:	42413938 	.word	0x42413938
 8005b68:	46454443 	.word	0x46454443
 8005b6c:	00000000 	.word	0x00000000

08005b70 <st_usbfs_v1_usb_driver>:
 8005b70:	08000e61 080018c9 0800191d 08001a35     a...........5...
 8005b80:	08001a7d 08001b7d 08001b3d 08001bc1     }...}...=.......
 8005b90:	08001c49 08001cfd 00000000 00000000     I...............
 8005ba0:	00000000 202a2a2a 6f636f63 6120736f     ....*** cocoos a
 8005bb0:	72657373 61662074 64656c69               ssert failed .

08005bbe <_ctype_>:
 8005bbe:	20202000 20202020 28282020 20282828     .         ((((( 
 8005bce:	20202020 20202020 20202020 20202020                     
 8005bde:	10108820 10101010 10101010 10101010      ...............
 8005bee:	04040410 04040404 10040404 10101010     ................
 8005bfe:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8005c0e:	01010101 01010101 01010101 10101010     ................
 8005c1e:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8005c2e:	02020202 02020202 02020202 10101010     ................
 8005c3e:	00000020 00000000 00000000 00000000      ...............
	...
 8005cbe:	00300000 002d0000 4f280000 66726576     ..0...-...(Overf
 8005cce:	29776f6c 445b0000 50504f52 005d4445     low)..[DROPPED].
 8005cde:	0a0d0000 2d2d0000 6c702d2d 6f667461     ......----platfo
 8005cee:	735f6d72 70757465 6c610000 00203f6d     rm_setup..alm? .
 8005cfe:	6c700000 6f667461 735f6d72 74726174     ..platform_start
 8005d0e:	6d69745f 00007265 74720000 77612063     _timer....rtc aw
 8005d1e:	2e656b61 00002e2e 74720000 77612063     ake.......rtc aw
 8005d2e:	20656b61 00006b6f 6f740000 6962206f     ake ok....too bi
 8005d3e:	00002067 74610000 2d2d0020 6f622d2d     g ....at .----bo
 8005d4e:	6f6c746f 72656461 6f620000 745f746f     otloader..boot_t
 8005d5e:	65677261 65675f74 65735f74 6c616972     arget_get_serial
 8005d6e:	6d756e5f 00726562 73750000 65735f62     _number...usb_se
 8005d7e:	65735f74 6c616972 6d756e5f 00726562     t_serial_number.
 8005d8e:	73750000 65735f62 00707574 2d2d0000     ..usb_setup...--
 8005d9e:	61622d2d 6f6c6573 72656461 66200020     --baseloader . f
 8005dae:	646e756f 202c0020 74736564 202c0020     ound ., dest ., 
 8005dbe:	20637273 202c0000 206e656c 202c0000     src .., len .., 
 8005dce:	6e75662a 00002063 6f6e0000 6f662074     *func ....not fo
 8005dde:	20646e75 202c0000 61646c6f 00207070     und .., oldapp .
 8005dee:	202c0000 746f6f62 206e656c 61620000     .., bootlen ..ba
 8005dfe:	6f6c6573 72656461 69616620 2064656c     seloader failed 
 8005e0e:	73750000 70206462 696c6c6f 2e2e676e     ..usbd polling..
 8005e1e:	6572002e 72617473 676e6974 002e2e2e     ..restarting....
 8005e2e:	6f640000 0000656e 65720000 72617473     ..done....restar
 8005e3e:	61632074 61626c6c 00006b63 45530000     t callback....SE
 8005e4e:	44415f54 3e3e0052 2a2a0020 5245202a     T_ADR.>> .*** ER
 8005e5e:	3a524f52 6f6f5420 6e616d20 6f632079     ROR: Too many co
 8005e6e:	6f72746e 6163206c 61626c6c 00736b63     ntrol callbacks.
 8005e7e:	2a2a0000 5245202a 3a524f52 6f6f5420     ..*** ERROR: Too
 8005e8e:	6e616d20 6f632079 6769666e 6c616320      many config cal
 8005e9e:	6361626c 0000736b                        lbacks....

08005ea8 <bos_descriptor>:
 8005ea8:	00000f05 00043002 00000020              .....0.. ...

08005eb4 <cdc_iface_assoc>:
 8005eb4:	02010b08 06010202                       ........

08005ebc <cdcacm_functional_descriptors>:
 8005ebc:	10002405 01240501 24040200 24050002     .$....$....$...$
 8005ecc:	00020106                                ....

08005ed0 <comm_endp>:
 8005ed0:	03840507 00ff0010 00000000 00000000     ................

08005ee0 <comm_iface>:
 8005ee0:	00010409 01020201 005ed007 005ebc08     ..........^...^.
 8005ef0:	00001308 00000000                       ........

08005ef8 <config>:
 8005ef8:	00000209 80000103 006018fa 00000008     ..........`.....

08005f08 <data_endp>:
 8005f08:	02030507 00010040 00000000 07000000     ....@...........
 8005f18:	40028305 00000100 00000000 00000000     ...@............

08005f28 <data_iface>:
 8005f28:	00020409 00000a02 005f0808 00000008     .........._.....
	...

08005f40 <dev>:
 8005f40:	02100112 400102ef db421209 02010221     .......@..B.!...
 8005f50:	00000103 00202f20 70797420 00000020     .... / . typ ...
 8005f60:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 8005f70:	6469202c 00002078 4547202c 45445f54     , idx .., GET_DE
 8005f80:	00000053 5645445f 00000000 4746435f     S..._DEV...._CFG
 8005f90:	00000000 5254535f 00000000 464e495f     ...._STR...._INF
 8005fa0:	00000000 504e455f 00000000 534f425f     ...._ENP...._BOS
 8005fb0:	00000000 4553202c 44415f54 20202052     ...., SET_ADR   
 8005fc0:	00000020 4553202c 46435f54 20202047      ..., SET_CFG   
 8005fd0:	00000020 0000002c 00207420 00206920      ...,... t . i .

08005fe0 <hf2_endp>:
 8005fe0:	02020507 00000040 00000000 07000000     ....@...........
 8005ff0:	40028205 00000000 00000000 00000000     ...@............

08006000 <hf2_iface>:
 8006000:	00000409 012aff02 005fe009 00000008     ......*..._.....
	...

08006018 <interfaces>:
 8006018:	00000000 00000001 00000000 08006000     .............`..
 8006028:	00000000 00000001 08005eb4 08005ee0     .........^...^..
 8006038:	00000000 00000001 00000000 08005f28     ............(_..
 8006048:	202a2a2a 4f525245 73203a52 615f7465     *** ERROR: set_a
 8006058:	65726767 65746167 6c61635f 6361626c     ggregate_callbac
 8006068:	6166206b 64656c69 00000000 61766544     k failed....Deva
 8006078:	6372616e 00007968 42504144 20746f6f     narchy..DAPBoot 
 8006088:	20554644 746f6f42 64616f6c 00007265     DFU Bootloader..
 8006098:	42504144 20746f6f 00554644 65756c42     DAPBoot DFU.Blue
 80060a8:	6c695020 534d206c 00000043 65756c42      Pill MSC...Blue
 80060b8:	6c695020 6553206c 6c616972 726f5020      Pill Serial Por
 80060c8:	00000074 65756c42 6c695020 4f43206c     t...Blue Pill CO
 80060d8:	00004d4d 65756c42 6c695020 4144206c     MM..Blue Pill DA
 80060e8:	00004154 65756c42 6c695020 4648206c     TA..Blue Pill HF
 80060f8:	00000032 75736976 6c626c61 69706575     2...visualbluepi
 8006108:	672e6c6c 75687469 6f692e62 00000000     ll.github.io....
 8006118:	202a2a2a 5f627375 75746573 61662070     *** usb_setup fa
 8006128:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8006138:	6e206273 7573746f 69207070 7865646e     sb notsupp index
 8006148:	00000020 75626577 00006c72 202a2a2a      ...weburl..*** 
 8006158:	75626577 6e206273 7573746f 77207070     webusb notsupp w
 8006168:	65646e49 00002078                       Index ..

08006170 <webusb_platform_capability_descriptor>:
 8006170:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 8006180:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8006190:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 80061a0:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 80061b0:	735f6273 70757465 69616620 0064656c     sb_setup failed.

080061c0 <guid>:
 80061c0:	00000092 00050100 00880001 00070000     ................
 80061d0:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 80061e0:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 80061f0:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8006200:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8006210:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8006220:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 8006230:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 8006240:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 8006250:	00000000                                ....

08006254 <microsoft_platform_capability_descriptor>:
 8006254:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8006264:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8006274:	00007365 696e6977 00000064 706e6977     es..winid...winp
 8006284:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8006294:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 80062a4:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 80062b4:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 80062c4:	0064656c                                led.

080062c8 <winusb_string_descriptor>:
 80062c8:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 80062d8:	00000021 6f662820 64656372 00000029     !... (forced)...
 80062e8:	20707061 73697865 00007374 20707061     app exists..app 
 80062f8:	7373696d 20676e69 00000000 00203d20     missing .... = .
 8006308:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 8006318:	2065646f 726f6628 29646563 00000000     ode (forced)....
 8006328:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 8006338:	2065646f 206f6e28 29707061 00000000     ode (no app)....
 8006348:	2d2d2d2d 6c707061 74616369 206e6f69     ----application 
 8006358:	65646f6d 00000000 746f6f62 70706120     mode....boot app
 8006368:	00000000 746f6f62 6f6f6220 616f6c74     ....boot bootloa
 8006378:	00726564 20746573 74736572 20747261     der.set restart 
 8006388:	6c6c6163 6b636162 00000020 202a2a2a     callback ...*** 
 8006398:	5f636463 75746573 61662070 64656c69     cdc_setup failed
 80063a8:	00000000 6d6d6f63 00000000 202a2a2a     ....comm....*** 
 80063b8:	61636463 635f6d63 72746e6f 6e206c6f     cdcacm_control n
 80063c8:	7573746f 6c207070 5f656e69 69646f63     otsupp line_codi
 80063d8:	0020676e 202a2a2a 61636463 735f6d63     ng .*** cdcacm_s
 80063e8:	635f7465 69666e6f 61662067 64656c69     et_config failed
 80063f8:	00000000                                ....

080063fc <line_coding>:
 80063fc:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 800640c:	00203a52                                R: .

08006410 <bad_packet_message>:
 8006410:	20646162 6b636170 00007465 21212120     bad packet.. !!!
 8006420:	00000020 20326668 62203e3e 6e696e69      ...hf2 >> binin
 8006430:	00006f66 20326668 69203e3e 006f666e     fo..hf2 >> info.
 8006440:	74706d65 66682079 6e692032 00006f66     empty hf2 info..
 8006450:	20326668 20667562 206f6f74 6c616d73     hf2 buf too smal
 8006460:	0000006c 20326668 73203e3e 74726174     l...hf2 >> start
 8006470:	00000000 20326668 66203e3e 6873616c     ....hf2 >> flash
 8006480:	00000000 20326668 66203e3e 6873616c     ....hf2 >> flash
 8006490:	00000020 646e6966 63657620 2e726f74      ...find vector.
 80064a0:	00002e2e 6e756f66 65762064 726f7463     ....found vector
 80064b0:	7061202c 00002070 6f62202c 7320746f     , app .., boot s
 80064c0:	20657a69 00000000 6162202c 73206573     ize ...., base s
 80064d0:	20657a69 00000000 202a2a2a 4f525245     ize ....*** ERRO
 80064e0:	49203a52 6c61766e 61206469 20726464     R: Invalid addr 
 80064f0:	00000000 746f7277 6f622065 6f6c746f     ....wrote bootlo
 8006500:	72656461 00000000 706d6f63 20657261     ader....compare 
 8006510:	746f6f62 64616f6c 2e2e7265 0000002e     bootloader......
 8006520:	746f6f62 64616f6c 63207265 676e6168     bootloader chang
 8006530:	00006465 79706f63 73616220 616f6c65     ed..copy baseloa
 8006540:	20726564 00206f74 6973202c 0020657a     der to ., size .
 8006550:	74736572 20747261 62206f74 6c657361     restart to basel
 8006560:	6564616f 00002072 6162202c 656c6573     oader .., basele
 8006570:	0000206e 746f6f62 64616f6c 69207265     n ..bootloader i
 8006580:	746e6564 6c616369 00000020 202a2a2a     dentical ...*** 
 8006590:	4f525245 63203a52 6b636568 61746144     ERROR: checkData
 80065a0:	657a6953 69616620 0064656c 20326668     Size failed.hf2 
 80065b0:	61203e3e 00007070 20326668 62203e3e     >> app..hf2 >> b
 80065c0:	00746f6f 20326668 72203e3e 00646165     oot.hf2 >> read.
 80065d0:	20326668 75203e3e 6f6e6b6e 00206e77     hf2 >> unknown .
 80065e0:	20326668 20746573 666e6f63 00006769     hf2 set config..
 80065f0:	73616c66 6c612068 20776f6c 00000000     flash allow ....
 8006600:	206f7420 00000000 202a2a2a 5f326668      to ....*** hf2_
 8006610:	75746573 61662070 64656c69 00000000     setup failed....
 8006620:	20326668 00003c3c 20326668 00203c3c     hf2 <<..hf2 << .
 8006630:	202a2a2a 32627375 65735f31 6f635f74     *** usb21_set_co
 8006640:	6769666e 69616620 0064656c 202a2a2a     nfig failed.*** 
 8006650:	32627375 65735f31 20707574 6c696166     usb21_setup fail
 8006660:	00006465 202a2a2a 32627375 65645f31     ed..*** usb21_de
 8006670:	69726373 726f7470 206f6e20 20736f62     scriptor no bos 
 8006680:	00000000 00736f62 00203e2d 202a2a2a     ....bos.-> .*** 
 8006690:	4f525245 46203a52 6873616c 69616620     ERROR: Flash fai
 80066a0:	2064656c 00000000 2a2a2a2a 52524520     led ....**** ERR
 80066b0:	203a524f 61766e49 2064696c 73616c66     OR: Invalid flas
 80066c0:	72772068 2c657469 74736420 00000020     h write, dst ...

080066d0 <infoUf2File>:
 80066d0:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 80066e0:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 80066f0:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 8006700:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 8006710:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 8006720:	0a0d3076 00000000                       v0......

Disassembly of section .text:

08007000 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8007000:	b538      	push	{r3, r4, r5, lr}
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
	while (dest < &_edata) {
 8007002:	4a36      	ldr	r2, [pc, #216]	; (80070dc <application_start+0xdc>)
 8007004:	4c36      	ldr	r4, [pc, #216]	; (80070e0 <application_start+0xe0>)
 8007006:	42a2      	cmp	r2, r4
 8007008:	d20f      	bcs.n	800702a <application_start+0x2a>
 800700a:	43d3      	mvns	r3, r2
	volatile uint32_t *dest = &_data;
 800700c:	4615      	mov	r5, r2
 800700e:	4423      	add	r3, r4
 8007010:	4934      	ldr	r1, [pc, #208]	; (80070e4 <application_start+0xe4>)
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	3304      	adds	r3, #4
	volatile uint32_t *src = &_data_loadaddr;
 8007018:	4608      	mov	r0, r1
 800701a:	4419      	add	r1, r3
		*dest = *src;
 800701c:	f850 4b04 	ldr.w	r4, [r0], #4
	while (dest < &_edata) {
 8007020:	4288      	cmp	r0, r1
		*dest = *src;
 8007022:	f845 4b04 	str.w	r4, [r5], #4
	while (dest < &_edata) {
 8007026:	d1f9      	bne.n	800701c <application_start+0x1c>
 8007028:	441a      	add	r2, r3
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <application_start+0xe8>)
 800702c:	429a      	cmp	r2, r3
 800702e:	d20d      	bcs.n	800704c <application_start+0x4c>
 8007030:	3303      	adds	r3, #3
 8007032:	1d11      	adds	r1, r2, #4
 8007034:	1a5b      	subs	r3, r3, r1
 8007036:	f023 0303 	bic.w	r3, r3, #3
 800703a:	3304      	adds	r3, #4
 800703c:	2000      	movs	r0, #0
 800703e:	4413      	add	r3, r2
 8007040:	e000      	b.n	8007044 <application_start+0x44>
 8007042:	3104      	adds	r1, #4
 8007044:	4299      	cmp	r1, r3
 8007046:	6010      	str	r0, [r2, #0]
 8007048:	460a      	mov	r2, r1
 800704a:	d1fa      	bne.n	8007042 <application_start+0x42>
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 800704c:	4d27      	ldr	r5, [pc, #156]	; (80070ec <application_start+0xec>)
 800704e:	4c28      	ldr	r4, [pc, #160]	; (80070f0 <application_start+0xf0>)
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b91b      	cbnz	r3, 800705c <application_start+0x5c>
 8007054:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <application_start+0xf4>)
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d00c      	beq.n	8007076 <application_start+0x76>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 800705c:	4826      	ldr	r0, [pc, #152]	; (80070f8 <application_start+0xf8>)
 800705e:	f7fc feeb 	bl	8003e38 <debug_print>
 8007062:	6828      	ldr	r0, [r5, #0]
 8007064:	f7fc ff30 	bl	8003ec8 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8007068:	4824      	ldr	r0, [pc, #144]	; (80070fc <application_start+0xfc>)
 800706a:	f7fc fee5 	bl	8003e38 <debug_print>
 800706e:	6820      	ldr	r0, [r4, #0]
 8007070:	f7fc ff2a 	bl	8003ec8 <debug_printhex_unsigned>
 8007074:	e7fe      	b.n	8007074 <application_start+0x74>

	//  Call any init functions here.
	pre_main();
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007076:	4c22      	ldr	r4, [pc, #136]	; (8007100 <application_start+0x100>)
 8007078:	4922      	ldr	r1, [pc, #136]	; (8007104 <application_start+0x104>)
 800707a:	428c      	cmp	r4, r1
 800707c:	d20b      	bcs.n	8007096 <application_start+0x96>
 800707e:	43e3      	mvns	r3, r4
 8007080:	440b      	add	r3, r1
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	3304      	adds	r3, #4
 8007088:	4625      	mov	r5, r4
 800708a:	441c      	add	r4, r3
		(*fp)();
 800708c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007090:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007092:	42a5      	cmp	r5, r4
 8007094:	d1fa      	bne.n	800708c <application_start+0x8c>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007096:	4c1c      	ldr	r4, [pc, #112]	; (8007108 <application_start+0x108>)
 8007098:	491c      	ldr	r1, [pc, #112]	; (800710c <application_start+0x10c>)
 800709a:	428c      	cmp	r4, r1
 800709c:	d20b      	bcs.n	80070b6 <application_start+0xb6>
 800709e:	43e3      	mvns	r3, r4
 80070a0:	440b      	add	r3, r1
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	3304      	adds	r3, #4
 80070a8:	4625      	mov	r5, r4
 80070aa:	441c      	add	r4, r3
		(*fp)();
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80070b2:	42a5      	cmp	r5, r4
 80070b4:	d1fa      	bne.n	80070ac <application_start+0xac>
	}

	//  Call the application's entry point.
	main();
 80070b6:	f000 f82f 	bl	8007118 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80070ba:	4c15      	ldr	r4, [pc, #84]	; (8007110 <application_start+0x110>)
 80070bc:	4915      	ldr	r1, [pc, #84]	; (8007114 <application_start+0x114>)
 80070be:	428c      	cmp	r4, r1
 80070c0:	d20b      	bcs.n	80070da <application_start+0xda>
 80070c2:	43e3      	mvns	r3, r4
 80070c4:	440b      	add	r3, r1
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	3304      	adds	r3, #4
 80070cc:	4625      	mov	r5, r4
 80070ce:	441c      	add	r4, r3
		(*fp)();
 80070d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d4:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80070d6:	42ac      	cmp	r4, r5
 80070d8:	d1fa      	bne.n	80070d0 <application_start+0xd0>
	}
}
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20001000 	.word	0x20001000
 80070e0:	2000100c 	.word	0x2000100c
 80070e4:	0800d6e4 	.word	0x0800d6e4
 80070e8:	20001674 	.word	0x20001674
 80070ec:	2000165c 	.word	0x2000165c
 80070f0:	20001004 	.word	0x20001004
 80070f4:	12345678 	.word	0x12345678
 80070f8:	0800d3e4 	.word	0x0800d3e4
 80070fc:	0800d40c 	.word	0x0800d40c
 8007100:	0800d6d8 	.word	0x0800d6d8
 8007104:	0800d6d8 	.word	0x0800d6d8
 8007108:	0800d6d8 	.word	0x0800d6d8
 800710c:	0800d6e4 	.word	0x0800d6e4
 8007110:	0800d6e4 	.word	0x0800d6e4
 8007114:	0800d6e4 	.word	0x0800d6e4

08007118 <main>:

#include "pxt.h"
#ifdef PXT_MAIN
PXT_MAIN
 8007118:	b508      	push	{r3, lr}
 800711a:	f002 fd9f 	bl	8009c5c <_ZN3pxt5startEv>
 800711e:	2000      	movs	r0, #0
 8007120:	bd08      	pop	{r3, pc}
 8007122:	bf00      	nop
 8007124:	0000      	movs	r0, r0
	...

08007128 <_ZN6numops5mycvtEdPc>:
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (d < 0) {
 800712c:	2300      	movs	r3, #0
void mycvt(NUMBER d, char *buf) {
 800712e:	b083      	sub	sp, #12
 8007130:	4616      	mov	r6, r2
    if (d < 0) {
 8007132:	2200      	movs	r2, #0
void mycvt(NUMBER d, char *buf) {
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
    if (d < 0) {
 8007138:	f7fb feae 	bl	8002e98 <__wrap___aeabi_dcmplt>
 800713c:	b120      	cbz	r0, 8007148 <_ZN6numops5mycvtEdPc+0x20>
        *buf++ = '-';
 800713e:	232d      	movs	r3, #45	; 0x2d
        d = -d;
 8007140:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        *buf++ = '-';
 8007144:	7033      	strb	r3, [r6, #0]
 8007146:	3601      	adds	r6, #1
    }

    if (!d) {
 8007148:	4628      	mov	r0, r5
 800714a:	4621      	mov	r1, r4
 800714c:	2200      	movs	r2, #0
 800714e:	2300      	movs	r3, #0
 8007150:	f7fb fe88 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 8007154:	b130      	cbz	r0, 8007164 <_ZN6numops5mycvtEdPc+0x3c>
        *buf++ = '0';
 8007156:	2230      	movs	r2, #48	; 0x30
        *buf++ = 0;
 8007158:	2300      	movs	r3, #0
        *buf++ = '0';
 800715a:	7032      	strb	r2, [r6, #0]
        *buf++ = 0;
 800715c:	7073      	strb	r3, [r6, #1]
        *buf++ = 'e';
        itoa(e, buf);
    } else {
        *buf = 0;
    }
}
 800715e:	b003      	add	sp, #12
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pw = (int)log10(d);
 8007164:	4628      	mov	r0, r5
 8007166:	4621      	mov	r1, r4
 8007168:	f7fb ff84 	bl	8003074 <log10>
 800716c:	f7fb ff12 	bl	8002f94 <__wrap___aeabi_d2iz>
    if (0.000001 <= d && d < 1e21) {
 8007170:	a345      	add	r3, pc, #276	; (adr r3, 8007288 <_ZN6numops5mycvtEdPc+0x160>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
    int pw = (int)log10(d);
 8007176:	4607      	mov	r7, r0
 8007178:	9001      	str	r0, [sp, #4]
    if (0.000001 <= d && d < 1e21) {
 800717a:	4621      	mov	r1, r4
 800717c:	4628      	mov	r0, r5
 800717e:	f7fb febd 	bl	8002efc <__wrap___aeabi_dcmpge>
 8007182:	2800      	cmp	r0, #0
 8007184:	d157      	bne.n	8007236 <_ZN6numops5mycvtEdPc+0x10e>
        d /= p10(pw);
 8007186:	9a01      	ldr	r2, [sp, #4]
 8007188:	2000      	movs	r0, #0
 800718a:	4943      	ldr	r1, [pc, #268]	; (8007298 <_ZN6numops5mycvtEdPc+0x170>)
 800718c:	f7fb fb08 	bl	80027a0 <__powidf2>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4628      	mov	r0, r5
 8007196:	4621      	mov	r1, r4
 8007198:	f7fb fe04 	bl	8002da4 <__wrap___aeabi_ddiv>
    int beforeDot = 1;
 800719c:	2701      	movs	r7, #1
        d /= p10(pw);
 800719e:	4605      	mov	r5, r0
 80071a0:	460c      	mov	r4, r1
    int sig = 0;
 80071a2:	f04f 0a00 	mov.w	sl, #0
        d = (d - c) * 10;
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8007298 <_ZN6numops5mycvtEdPc+0x170>
        int c = (int)d;
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f7fb feef 	bl	8002f94 <__wrap___aeabi_d2iz>
        *buf++ = '0' + c;
 80071b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071ba:	7033      	strb	r3, [r6, #0]
        int c = (int)d;
 80071bc:	4683      	mov	fp, r0
        d = (d - c) * 10;
 80071be:	f7fb fa35 	bl	800262c <__aeabi_i2d>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4628      	mov	r0, r5
 80071c8:	4621      	mov	r1, r4
 80071ca:	f7fb fe33 	bl	8002e34 <__wrap___aeabi_dsub>
 80071ce:	464b      	mov	r3, r9
 80071d0:	4642      	mov	r2, r8
 80071d2:	f7fb fdff 	bl	8002dd4 <__wrap___aeabi_dmul>
        if (--beforeDot == 0)
 80071d6:	3f01      	subs	r7, #1
            *buf++ = '.';
 80071d8:	bf08      	it	eq
 80071da:	232e      	moveq	r3, #46	; 0x2e
        d = (d - c) * 10;
 80071dc:	4605      	mov	r5, r0
            *buf++ = '.';
 80071de:	bf08      	it	eq
 80071e0:	7073      	strbeq	r3, [r6, #1]
        d = (d - c) * 10;
 80071e2:	460c      	mov	r4, r1
        *buf++ = '0' + c;
 80071e4:	bf14      	ite	ne
 80071e6:	3601      	addne	r6, #1
            *buf++ = '.';
 80071e8:	3602      	addeq	r6, #2
        if (sig || c)
 80071ea:	f1ba 0f00 	cmp.w	sl, #0
 80071ee:	d106      	bne.n	80071fe <_ZN6numops5mycvtEdPc+0xd6>
 80071f0:	f1bb 0f00 	cmp.w	fp, #0
 80071f4:	bf0c      	ite	eq
 80071f6:	46da      	moveq	sl, fp
 80071f8:	f04f 0a01 	movne.w	sl, #1
 80071fc:	e7d7      	b.n	80071ae <_ZN6numops5mycvtEdPc+0x86>
 80071fe:	f10a 0a01 	add.w	sl, sl, #1
    while (sig < 17 || beforeDot > 0) {
 8007202:	f1ba 0f10 	cmp.w	sl, #16
 8007206:	ddd2      	ble.n	80071ae <_ZN6numops5mycvtEdPc+0x86>
 8007208:	2f00      	cmp	r7, #0
 800720a:	dcd0      	bgt.n	80071ae <_ZN6numops5mycvtEdPc+0x86>
    while (*buf == '0')
 800720c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    buf--;
 8007210:	3e01      	subs	r6, #1
    while (*buf == '0')
 8007212:	2b30      	cmp	r3, #48	; 0x30
 8007214:	d103      	bne.n	800721e <_ZN6numops5mycvtEdPc+0xf6>
 8007216:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 800721a:	2b30      	cmp	r3, #48	; 0x30
 800721c:	d0fb      	beq.n	8007216 <_ZN6numops5mycvtEdPc+0xee>
    if (e != 1) {
 800721e:	9801      	ldr	r0, [sp, #4]
    if (*buf == '.')
 8007220:	2b2e      	cmp	r3, #46	; 0x2e
        buf--;
 8007222:	bf08      	it	eq
 8007224:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    if (e != 1) {
 8007228:	2801      	cmp	r0, #1
 800722a:	d120      	bne.n	800726e <_ZN6numops5mycvtEdPc+0x146>
        *buf = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	7073      	strb	r3, [r6, #1]
}
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (0.000001 <= d && d < 1e21) {
 8007236:	a316      	add	r3, pc, #88	; (adr r3, 8007290 <_ZN6numops5mycvtEdPc+0x168>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	4628      	mov	r0, r5
 800723e:	4621      	mov	r1, r4
 8007240:	f7fb fe2a 	bl	8002e98 <__wrap___aeabi_dcmplt>
 8007244:	2800      	cmp	r0, #0
 8007246:	d09e      	beq.n	8007186 <_ZN6numops5mycvtEdPc+0x5e>
        if (pw > 0) {
 8007248:	2f00      	cmp	r7, #0
 800724a:	dd18      	ble.n	800727e <_ZN6numops5mycvtEdPc+0x156>
            d /= p10(pw);
 800724c:	463a      	mov	r2, r7
 800724e:	2000      	movs	r0, #0
 8007250:	4911      	ldr	r1, [pc, #68]	; (8007298 <_ZN6numops5mycvtEdPc+0x170>)
 8007252:	f7fb faa5 	bl	80027a0 <__powidf2>
 8007256:	460b      	mov	r3, r1
 8007258:	4602      	mov	r2, r0
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f7fb fda1 	bl	8002da4 <__wrap___aeabi_ddiv>
    int e = 1;
 8007262:	2301      	movs	r3, #1
            beforeDot = 1 + pw;
 8007264:	3701      	adds	r7, #1
            d /= p10(pw);
 8007266:	4605      	mov	r5, r0
 8007268:	460c      	mov	r4, r1
    int e = 1;
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	e799      	b.n	80071a2 <_ZN6numops5mycvtEdPc+0x7a>
        *buf++ = 'e';
 800726e:	2365      	movs	r3, #101	; 0x65
        itoa(e, buf);
 8007270:	1cb1      	adds	r1, r6, #2
        *buf++ = 'e';
 8007272:	7073      	strb	r3, [r6, #1]
}
 8007274:	b003      	add	sp, #12
 8007276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        itoa(e, buf);
 800727a:	f003 b9e3 	b.w	800a644 <_ZN5codal4itoaEiPc>
    int beforeDot = 1;
 800727e:	2701      	movs	r7, #1
    int e = 1;
 8007280:	9701      	str	r7, [sp, #4]
 8007282:	e78e      	b.n	80071a2 <_ZN6numops5mycvtEdPc+0x7a>
 8007284:	f3af 8000 	nop.w
 8007288:	a0b5ed8d 	.word	0xa0b5ed8d
 800728c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007290:	d6e2ef50 	.word	0xd6e2ef50
 8007294:	444b1ae4 	.word	0x444b1ae4
 8007298:	40240000 	.word	0x40240000
 800729c:	00000000 	.word	0x00000000

080072a0 <_ZN5Math_12randomDoubleEv>:
//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
 80072a0:	b570      	push	{r4, r5, r6, lr}
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a6:	f000 fb9d 	bl	80079e4 <_ZN3pxt9getRandomEj>
 80072aa:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80072ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80072b0:	f000 fb98 	bl	80079e4 <_ZN3pxt9getRandomEj>
 80072b4:	4606      	mov	r6, r0
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7fb f9a8 	bl	800260c <__aeabi_ui2d>
 80072bc:	2200      	movs	r2, #0
 80072be:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <_ZN5Math_12randomDoubleEv+0x50>)
 80072c0:	f7fb fd88 	bl	8002dd4 <__wrap___aeabi_dmul>
 80072c4:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80072c6:	4630      	mov	r0, r6
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80072c8:	460d      	mov	r5, r1
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80072ca:	f7fb f99f 	bl	800260c <__aeabi_ui2d>
 80072ce:	a306      	add	r3, pc, #24	; (adr r3, 80072e8 <_ZN5Math_12randomDoubleEv+0x48>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7fb fd66 	bl	8002da4 <__wrap___aeabi_ddiv>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7fb fd90 	bl	8002e04 <__wrap___aeabi_dadd>
}
 80072e4:	bd70      	pop	{r4, r5, r6, pc}
 80072e6:	bf00      	nop
 80072e8:	dfe00000 	.word	0xdfe00000
 80072ec:	436fffff 	.word	0x436fffff
 80072f0:	3df00000 	.word	0x3df00000

080072f4 <_ZN5Math_4log2EPN3pxt12TValueStructE>:
#define SINGLE(op) return fromDouble(::op(toDouble(x)));

namespace Math_ {

//
TNumber log2(TNumber x){SINGLE(log2)}
 80072f4:	b508      	push	{r3, lr}
 80072f6:	f000 ff39 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80072fa:	f7fb fea7 	bl	800304c <log2>
 80072fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007302:	f000 bd01 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007306:	bf00      	nop

08007308 <_ZN5Math_3expEPN3pxt12TValueStructE>:
//
TNumber exp(TNumber x){SINGLE(exp)}
 8007308:	b508      	push	{r3, lr}
 800730a:	f000 ff2f 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800730e:	f7fb fe8f 	bl	8003030 <exp>
 8007312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007316:	f000 bcf7 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800731a:	bf00      	nop

0800731c <_ZN5Math_4tanhEPN3pxt12TValueStructE>:
//
TNumber tanh(TNumber x){SINGLE(tanh)}
 800731c:	b508      	push	{r3, lr}
 800731e:	f000 ff25 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007322:	f7fc f8a9 	bl	8003478 <tanh>
 8007326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800732a:	f000 bced 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800732e:	bf00      	nop

08007330 <_ZN5Math_4sinhEPN3pxt12TValueStructE>:
//
TNumber sinh(TNumber x){SINGLE(sinh)}
 8007330:	b508      	push	{r3, lr}
 8007332:	f000 ff1b 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007336:	f7fb fff9 	bl	800332c <sinh>
 800733a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800733e:	f000 bce3 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007342:	bf00      	nop

08007344 <_ZN5Math_4coshEPN3pxt12TValueStructE>:
//
TNumber cosh(TNumber x){SINGLE(cosh)}
 8007344:	b508      	push	{r3, lr}
 8007346:	f000 ff11 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800734a:	f7fc f843 	bl	80033d4 <cosh>
 800734e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007352:	f000 bcd9 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007356:	bf00      	nop

08007358 <_ZN5Math_5atanhEPN3pxt12TValueStructE>:
//
TNumber atanh(TNumber x){SINGLE(atanh)}
 8007358:	b508      	push	{r3, lr}
 800735a:	f000 ff07 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800735e:	f7fc f98f 	bl	8003680 <atanh>
 8007362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007366:	f000 bccf 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800736a:	bf00      	nop

0800736c <_ZN5Math_5asinhEPN3pxt12TValueStructE>:
//
TNumber asinh(TNumber x){SINGLE(asinh)}
 800736c:	b508      	push	{r3, lr}
 800736e:	f000 fefd 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007372:	f7fc f8dd 	bl	8003530 <asinh>
 8007376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800737a:	f000 bcc5 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800737e:	bf00      	nop

08007380 <_ZN5Math_5acoshEPN3pxt12TValueStructE>:
//
TNumber acosh(TNumber x){SINGLE(acosh)}
 8007380:	b508      	push	{r3, lr}
 8007382:	f000 fef3 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007386:	f7fc f925 	bl	80035d4 <acosh>
 800738a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800738e:	f000 bcbb 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007392:	bf00      	nop

08007394 <_ZN3pxtL9readBytesEPhS0_ibi>:
    }

    return 0;
}

static int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	9e04      	ldr	r6, [sp, #16]
 8007398:	460c      	mov	r4, r1
    if (szLeft < length) {
 800739a:	4296      	cmp	r6, r2
 800739c:	db24      	blt.n	80073e8 <_ZN3pxtL9readBytesEPhS0_ibi+0x54>
 800739e:	4615      	mov	r5, r2
        memset(dst, 0, length);
        return -1;
    }

    if (swapBytes) {
 80073a0:	b96b      	cbnz	r3, 80073be <_ZN3pxtL9readBytesEPhS0_ibi+0x2a>
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
 80073a2:	2a04      	cmp	r2, #4
 80073a4:	d019      	beq.n	80073da <_ZN3pxtL9readBytesEPhS0_ibi+0x46>
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)src & 1) == 0)
 80073a6:	2a02      	cmp	r2, #2
 80073a8:	d102      	bne.n	80073b0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
 80073aa:	f010 0301 	ands.w	r3, r0, #1
 80073ae:	d010      	beq.n	80073d2 <_ZN3pxtL9readBytesEPhS0_ibi+0x3e>
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 80073b0:	4601      	mov	r1, r0
 80073b2:	462a      	mov	r2, r5
 80073b4:	4620      	mov	r0, r4
 80073b6:	f7fc fbb3 	bl	8003b20 <memcpy>
 80073ba:	2000      	movs	r0, #0
    }

    return 0;
}
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t *p = src + length;
 80073be:	4410      	add	r0, r2
 80073c0:	440d      	add	r5, r1
            dst[i] = *--p;
 80073c2:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 80073c6:	f801 3b01 	strb.w	r3, [r1], #1
        for (int i = 0; i < length; ++i)
 80073ca:	428d      	cmp	r5, r1
 80073cc:	d1f9      	bne.n	80073c2 <_ZN3pxtL9readBytesEPhS0_ibi+0x2e>
    return 0;
 80073ce:	2000      	movs	r0, #0
}
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
            *(uint16_t *)dst = *(uint16_t *)src;
 80073d2:	8802      	ldrh	r2, [r0, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	800a      	strh	r2, [r1, #0]
}
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
        if (length == 4 && ((uint32_t)src & 3) == 0)
 80073da:	f010 0303 	ands.w	r3, r0, #3
 80073de:	d1e7      	bne.n	80073b0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
            *(uint32_t *)dst = *(uint32_t *)src;
 80073e0:	6802      	ldr	r2, [r0, #0]
    return 0;
 80073e2:	4618      	mov	r0, r3
            *(uint32_t *)dst = *(uint32_t *)src;
 80073e4:	600a      	str	r2, [r1, #0]
}
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
        memset(dst, 0, length);
 80073e8:	4608      	mov	r0, r1
 80073ea:	2100      	movs	r1, #0
 80073ec:	f7fc fbe0 	bl	8003bb0 <memset>
        return -1;
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80073f4:	bd70      	pop	{r4, r5, r6, pc}
 80073f6:	bf00      	nop

080073f8 <_ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE>:
}
 80073f8:	3008      	adds	r0, #8
 80073fa:	4770      	bx	lr

080073fc <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi>:
    if (buf && 0 <= off && off < buf->length)
 80073fc:	b140      	cbz	r0, 8007410 <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x14>
 80073fe:	2900      	cmp	r1, #0
 8007400:	db05      	blt.n	800740e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
 8007402:	6843      	ldr	r3, [r0, #4]
 8007404:	428b      	cmp	r3, r1
 8007406:	dd02      	ble.n	800740e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
        return buf->data[off];
 8007408:	4408      	add	r0, r1
 800740a:	7a00      	ldrb	r0, [r0, #8]
 800740c:	4770      	bx	lr
    return 0;
 800740e:	2000      	movs	r0, #0
}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii>:
    if (buf && 0 <= off && off < buf->length)
 8007414:	b130      	cbz	r0, 8007424 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 8007416:	2900      	cmp	r1, #0
 8007418:	db04      	blt.n	8007424 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 800741a:	6843      	ldr	r3, [r0, #4]
 800741c:	428b      	cmp	r3, r1
        buf->data[off] = v;
 800741e:	bfc4      	itt	gt
 8007420:	1840      	addgt	r0, r0, r1
 8007422:	7202      	strbgt	r2, [r0, #8]
}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop

08007428 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>:
int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
 800742a:	2b00      	cmp	r3, #0
 800742c:	db20      	blt.n	8007470 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 800742e:	2900      	cmp	r1, #0
 8007430:	db1e      	blt.n	8007470 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 8007432:	6846      	ldr	r6, [r0, #4]
 8007434:	428e      	cmp	r6, r1
 8007436:	db1b      	blt.n	8007470 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    length = min(src->length - srcOffset, buf->length - dstOffset);
 8007438:	6854      	ldr	r4, [r2, #4]
 800743a:	1a76      	subs	r6, r6, r1
 800743c:	1ae5      	subs	r5, r4, r3
 800743e:	42b5      	cmp	r5, r6
 8007440:	bfa8      	it	ge
 8007442:	4635      	movge	r5, r6
    if (length < 0)
 8007444:	2d00      	cmp	r5, #0
 8007446:	db13      	blt.n	8007470 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    if (buf == src) {
 8007448:	4282      	cmp	r2, r0
 800744a:	f102 0708 	add.w	r7, r2, #8
 800744e:	460c      	mov	r4, r1
 8007450:	f100 0608 	add.w	r6, r0, #8
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8007454:	462a      	mov	r2, r5
    if (buf == src) {
 8007456:	d005      	beq.n	8007464 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x3c>
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
 8007458:	18f9      	adds	r1, r7, r3
 800745a:	1930      	adds	r0, r6, r4
 800745c:	f7fc fb60 	bl	8003b20 <memcpy>
    return 0;
 8007460:	2000      	movs	r0, #0
}
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8007464:	18f1      	adds	r1, r6, r3
 8007466:	1938      	adds	r0, r7, r4
 8007468:	f7fc fb89 	bl	8003b7e <memmove>
    return 0;
 800746c:	2000      	movs	r0, #0
}
 800746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 8007470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007476:	bf00      	nop

08007478 <_ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE>:
}
 8007478:	6840      	ldr	r0, [r0, #4]
 800747a:	4770      	bx	lr

0800747c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>:
void fill(Buffer buf, int value, int offset = 0, int length = -1) {
 800747c:	b410      	push	{r4}
    if (offset < 0 || offset > buf->length)
 800747e:	1e14      	subs	r4, r2, #0
 8007480:	db0f      	blt.n	80074a2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8007482:	6842      	ldr	r2, [r0, #4]
 8007484:	42a2      	cmp	r2, r4
 8007486:	db0c      	blt.n	80074a2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8007488:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800748c:	bf28      	it	cs
 800748e:	4613      	movcs	r3, r2
    length = min(length, buf->length - offset);
 8007490:	1b12      	subs	r2, r2, r4
    memset(buf->data + offset, value, length);
 8007492:	3008      	adds	r0, #8
 8007494:	429a      	cmp	r2, r3
 8007496:	4420      	add	r0, r4
 8007498:	bfa8      	it	ge
 800749a:	461a      	movge	r2, r3
}
 800749c:	bc10      	pop	{r4}
    memset(buf->data + offset, value, length);
 800749e:	f7fc bb87 	b.w	8003bb0 <memset>
}
 80074a2:	bc10      	pop	{r4}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <_ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii>:
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
 80074a8:	b410      	push	{r4}
    offset = min((int)buf->length, offset);
 80074aa:	6843      	ldr	r3, [r0, #4]
    return mkBuffer(buf->data + offset, length);
 80074ac:	3008      	adds	r0, #8
 80074ae:	428b      	cmp	r3, r1
 80074b0:	461c      	mov	r4, r3
 80074b2:	bfa8      	it	ge
 80074b4:	460c      	movge	r4, r1
        length = buf->length;
 80074b6:	ea32 0122 	bics.w	r1, r2, r2, asr #32
 80074ba:	bf28      	it	cs
 80074bc:	4619      	movcs	r1, r3
    length = min(length, buf->length - offset);
 80074be:	1b1b      	subs	r3, r3, r4
    return mkBuffer(buf->data + offset, length);
 80074c0:	4299      	cmp	r1, r3
 80074c2:	4420      	add	r0, r4
 80074c4:	bfa8      	it	ge
 80074c6:	4619      	movge	r1, r3
}
 80074c8:	bc10      	pop	{r4}
    return mkBuffer(buf->data + offset, length);
 80074ca:	f000 ba69 	b.w	80079a0 <_ZN3pxt8mkBufferEPKhi>
 80074ce:	bf00      	nop

080074d0 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii>:
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80074d0:	b570      	push	{r4, r5, r6, lr}
    if (length < 0)
 80074d2:	2b00      	cmp	r3, #0
        length = buf->length - start;
 80074d4:	bfb8      	it	lt
 80074d6:	6843      	ldrlt	r3, [r0, #4]
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80074d8:	460e      	mov	r6, r1
        length = buf->length - start;
 80074da:	bfb8      	it	lt
 80074dc:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 80074de:	2a00      	cmp	r2, #0
 80074e0:	db20      	blt.n	8007524 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80074e2:	6844      	ldr	r4, [r0, #4]
 80074e4:	1899      	adds	r1, r3, r2
 80074e6:	42a1      	cmp	r1, r4
 80074e8:	dc1c      	bgt.n	8007524 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80074ea:	4291      	cmp	r1, r2
 80074ec:	db1a      	blt.n	8007524 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80074ee:	b1cb      	cbz	r3, 8007524 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
        offset == 0 || offset == INT_MIN)
 80074f0:	f036 4100 	bics.w	r1, r6, #2147483648	; 0x80000000
 80074f4:	d016      	beq.n	8007524 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
    if (offset <= -length || offset >= length) {
 80074f6:	4259      	negs	r1, r3
 80074f8:	42b1      	cmp	r1, r6
 80074fa:	da14      	bge.n	8007526 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
 80074fc:	42b3      	cmp	r3, r6
 80074fe:	dd12      	ble.n	8007526 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
    uint8_t *data = buf->data + start;
 8007500:	3008      	adds	r0, #8
    if (offset < 0) {
 8007502:	2e00      	cmp	r6, #0
    uint8_t *data = buf->data + start;
 8007504:	eb00 0502 	add.w	r5, r0, r2
    if (offset < 0) {
 8007508:	db15      	blt.n	8007536 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x66>
        length = length - offset;
 800750a:	1b9c      	subs	r4, r3, r6
        memmove(data, data + offset, length);
 800750c:	4622      	mov	r2, r4
 800750e:	19a9      	adds	r1, r5, r6
 8007510:	4628      	mov	r0, r5
 8007512:	f7fc fb34 	bl	8003b7e <memmove>
        memset(data + length, 0, offset);
 8007516:	4632      	mov	r2, r6
 8007518:	1928      	adds	r0, r5, r4
 800751a:	2100      	movs	r1, #0
}
 800751c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data + length, 0, offset);
 8007520:	f7fc bb46 	b.w	8003bb0 <memset>
}
 8007524:	bd70      	pop	{r4, r5, r6, pc}
        fill(buf, 0);
 8007526:	2200      	movs	r2, #0
}
 8007528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fill(buf, 0);
 800752c:	4611      	mov	r1, r2
 800752e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007532:	f7ff bfa3 	b.w	800747c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>
        offset = -offset;
 8007536:	4274      	negs	r4, r6
        memmove(data + offset, data, length - offset);
 8007538:	199a      	adds	r2, r3, r6
 800753a:	4629      	mov	r1, r5
 800753c:	1928      	adds	r0, r5, r4
 800753e:	f7fc fb1e 	bl	8003b7e <memmove>
        memset(data, 0, offset);
 8007542:	4622      	mov	r2, r4
 8007544:	4628      	mov	r0, r5
}
 8007546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data, 0, offset);
 800754a:	2100      	movs	r1, #0
 800754c:	f7fc bb30 	b.w	8003bb0 <memset>

08007550 <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE>:
String toHex(Buffer buf) {
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	4605      	mov	r5, r0
    auto res = mkString(NULL, buf->length * 2);
 8007554:	6841      	ldr	r1, [r0, #4]
 8007556:	2000      	movs	r0, #0
 8007558:	0049      	lsls	r1, r1, #1
 800755a:	f000 f9fb 	bl	8007954 <_ZN3pxt8mkStringEPKci>
    for (int i = 0; i < buf->length; ++i) {
 800755e:	686b      	ldr	r3, [r5, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dd12      	ble.n	800758a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3a>
 8007564:	4602      	mov	r2, r0
 8007566:	4e09      	ldr	r6, [pc, #36]	; (800758c <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3c>)
 8007568:	1deb      	adds	r3, r5, #7
        res->data[i << 1] = hex[buf->data[i] >> 4];
 800756a:	785c      	ldrb	r4, [r3, #1]
 800756c:	1f99      	subs	r1, r3, #6
 800756e:	1124      	asrs	r4, r4, #4
 8007570:	5d34      	ldrb	r4, [r6, r4]
 8007572:	1b49      	subs	r1, r1, r5
 8007574:	7194      	strb	r4, [r2, #6]
        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];
 8007576:	785c      	ldrb	r4, [r3, #1]
 8007578:	3202      	adds	r2, #2
 800757a:	f004 040f 	and.w	r4, r4, #15
 800757e:	5d34      	ldrb	r4, [r6, r4]
 8007580:	3301      	adds	r3, #1
 8007582:	7154      	strb	r4, [r2, #5]
    for (int i = 0; i < buf->length; ++i) {
 8007584:	686c      	ldr	r4, [r5, #4]
 8007586:	428c      	cmp	r4, r1
 8007588:	dcef      	bgt.n	800756a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x1a>
}
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	0800ccf4 	.word	0x0800ccf4

08007590 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii>:
    if (length < 0)
 8007590:	2b00      	cmp	r3, #0
        length = buf->length - start;
 8007592:	bfbc      	itt	lt
 8007594:	6843      	ldrlt	r3, [r0, #4]
 8007596:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8007598:	2a00      	cmp	r2, #0
 800759a:	db2f      	blt.n	80075fc <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6c>
void rotate(Buffer buf, int offset, int start = 0, int length = -1) {
 800759c:	b470      	push	{r4, r5, r6}
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 800759e:	6845      	ldr	r5, [r0, #4]
 80075a0:	189c      	adds	r4, r3, r2
 80075a2:	42ac      	cmp	r4, r5
 80075a4:	dc28      	bgt.n	80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80075a6:	4294      	cmp	r4, r2
 80075a8:	db26      	blt.n	80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80075aa:	b32b      	cbz	r3, 80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        offset == 0 || offset == INT_MIN)
 80075ac:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80075b0:	d022      	beq.n	80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
    if (offset < 0)
 80075b2:	2900      	cmp	r1, #0
        offset += length << 8; // try to make it positive
 80075b4:	bfb8      	it	lt
 80075b6:	eb01 2103 	addlt.w	r1, r1, r3, lsl #8
    offset %= length;
 80075ba:	fb91 f4f3 	sdiv	r4, r1, r3
 80075be:	fb03 1114 	mls	r1, r3, r4, r1
    uint8_t *data = buf->data + start;
 80075c2:	3008      	adds	r0, #8
    if (offset < 0)
 80075c4:	2900      	cmp	r1, #0
        offset += length;
 80075c6:	bfb8      	it	lt
 80075c8:	18c9      	addlt	r1, r1, r3
    uint8_t *data = buf->data + start;
 80075ca:	4402      	add	r2, r0
    uint8_t *n_first = data + offset;
 80075cc:	4411      	add	r1, r2
    while (first != next) {
 80075ce:	428a      	cmp	r2, r1
    uint8_t *last = data + length;
 80075d0:	4413      	add	r3, r2
    while (first != next) {
 80075d2:	d011      	beq.n	80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80075d4:	460c      	mov	r4, r1
 80075d6:	e004      	b.n	80075e2 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x52>
        } else if (first == n_first) {
 80075d8:	428a      	cmp	r2, r1
 80075da:	4604      	mov	r4, r0
 80075dc:	d00f      	beq.n	80075fe <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6e>
    while (first != next) {
 80075de:	4294      	cmp	r4, r2
 80075e0:	d00a      	beq.n	80075f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        *first++ = *next;
 80075e2:	4620      	mov	r0, r4
 80075e4:	f810 6b01 	ldrb.w	r6, [r0], #1
        uint8_t tmp = *first;
 80075e8:	7815      	ldrb	r5, [r2, #0]
        if (next == last) {
 80075ea:	4283      	cmp	r3, r0
        *first++ = *next;
 80075ec:	f802 6b01 	strb.w	r6, [r2], #1
        *next++ = tmp;
 80075f0:	7025      	strb	r5, [r4, #0]
        if (next == last) {
 80075f2:	d1f1      	bne.n	80075d8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x48>
 80075f4:	460c      	mov	r4, r1
 80075f6:	e7f2      	b.n	80075de <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
}
 80075f8:	bc70      	pop	{r4, r5, r6}
 80075fa:	4770      	bx	lr
 80075fc:	4770      	bx	lr
        } else if (first == n_first) {
 80075fe:	4601      	mov	r1, r0
 8007600:	e7ed      	b.n	80075de <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
 8007602:	bf00      	nop

08007604 <_ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_>:
void write(Buffer buf, int dstOffset, Buffer src) {
 8007604:	b510      	push	{r4, lr}
    writeBuffer(buf, dstOffset, src, 0, -1);
 8007606:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
void write(Buffer buf, int dstOffset, Buffer src) {
 800760a:	b082      	sub	sp, #8
    writeBuffer(buf, dstOffset, src, 0, -1);
 800760c:	2300      	movs	r3, #0
 800760e:	9400      	str	r4, [sp, #0]
 8007610:	f7ff ff0a 	bl	8007428 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>
}
 8007614:	b002      	add	sp, #8
 8007616:	bd10      	pop	{r4, pc}

08007618 <_ZN7control12createBufferEi>:
    return mkBuffer(NULL, size);
 8007618:	4601      	mov	r1, r0
 800761a:	2000      	movs	r0, #0
 800761c:	f000 b9c0 	b.w	80079a0 <_ZN3pxt8mkBufferEPKhi>

08007620 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>:

void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8007620:	b530      	push	{r4, r5, lr}
#define WRITEBYTES(isz, swap, toInt)                                                               \
    isz = toInt(value);                                                                            \
    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \
    break

    switch (format) {
 8007622:	3a01      	subs	r2, #1
void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8007624:	b083      	sub	sp, #12
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
    switch (format) {
 800762a:	2a0f      	cmp	r2, #15
 800762c:	d813      	bhi.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 800762e:	e8df f002 	tbb	[pc, r2]
 8007632:	1414      	.short	0x1414
 8007634:	14610808 	.word	0x14610808
 8007638:	731b1b14 	.word	0x731b1b14
 800763c:	6754254a 	.word	0x6754254a
 8007640:	385a      	.short	0x385a
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fe26 	bl	8008294 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007648:	2d01      	cmp	r5, #1
 800764a:	dd04      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, false, toInt);
 800764c:	b280      	uxth	r0, r0
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
 800764e:	07e2      	lsls	r2, r4, #31
            *(uint16_t *)dst = *(uint16_t *)src;
 8007650:	bf54      	ite	pl
 8007652:	8020      	strhpl	r0, [r4, #0]
            memcpy(dst, src, length);
 8007654:	8020      	strhmi	r0, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8007656:	b003      	add	sp, #12
 8007658:	bd30      	pop	{r4, r5, pc}
        WRITEBYTES(u8, true, toInt);
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fe1a 	bl	8008294 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007660:	2d00      	cmp	r5, #0
 8007662:	ddf8      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u8, true, toInt);
 8007664:	7020      	strb	r0, [r4, #0]
 8007666:	e7f6      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, true, toInt);
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fe13 	bl	8008294 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 800766e:	2d01      	cmp	r5, #1
 8007670:	ddf1      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8007672:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007676:	7060      	strb	r0, [r4, #1]
 8007678:	7023      	strb	r3, [r4, #0]
 800767a:	e7ec      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, true, toUInt);
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fda5 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007682:	2d03      	cmp	r5, #3
        WRITEBYTES(u32, true, toUInt);
 8007684:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8007686:	dde6      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8007688:	f89d 0000 	ldrb.w	r0, [sp]
 800768c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8007690:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007694:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007698:	70e0      	strb	r0, [r4, #3]
 800769a:	70a1      	strb	r1, [r4, #2]
 800769c:	7062      	strb	r2, [r4, #1]
 800769e:	7023      	strb	r3, [r4, #0]
 80076a0:	e7d9      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, true, toDouble);
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fd62 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 80076a8:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, true, toDouble);
 80076aa:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 80076ae:	ddd2      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 80076b0:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
        uint8_t *p = dst + length;
 80076b4:	f104 0308 	add.w	r3, r4, #8
            *--p = src[i];
 80076b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80076bc:	f803 1d01 	strb.w	r1, [r3, #-1]!
        for (int i = 0; i < length; ++i)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d1f9      	bne.n	80076b8 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x98>
 80076c4:	e7c7      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, false, toUInt);
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fd80 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 80076cc:	2d03      	cmp	r5, #3
 80076ce:	ddc2      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        if (length == 4 && ((uint32_t)dst & 3) == 0)
 80076d0:	07a3      	lsls	r3, r4, #30
            *(uint32_t *)dst = *(uint32_t *)src;
 80076d2:	bf0c      	ite	eq
 80076d4:	6020      	streq	r0, [r4, #0]
            memcpy(dst, src, length);
 80076d6:	6020      	strne	r0, [r4, #0]
 80076d8:	e7bd      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, false, toFloat);
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fe6c 	bl	80083b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 80076e0:	2d03      	cmp	r5, #3
 80076e2:	dcf5      	bgt.n	80076d0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 80076e4:	e7b7      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, true, toFloat);
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fe66 	bl	80083b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 80076ec:	2d03      	cmp	r5, #3
        WRITEBYTES(f32, true, toFloat);
 80076ee:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 80076f0:	dcca      	bgt.n	8007688 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 80076f2:	e7b0      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, false, toInt);
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fdcd 	bl	8008294 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 80076fa:	2d03      	cmp	r5, #3
 80076fc:	dce8      	bgt.n	80076d0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 80076fe:	e7aa      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, false, toDouble);
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd33 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 8007706:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, false, toDouble);
 8007708:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 800770c:	dda3      	ble.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            memcpy(dst, src, length);
 800770e:	466b      	mov	r3, sp
 8007710:	cb03      	ldmia	r3!, {r0, r1}
 8007712:	6020      	str	r0, [r4, #0]
 8007714:	6061      	str	r1, [r4, #4]
 8007716:	e79e      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, true, toInt);
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fdbb 	bl	8008294 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 800771e:	2d03      	cmp	r5, #3
        WRITEBYTES(i32, true, toInt);
 8007720:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8007722:	dcb1      	bgt.n	8007688 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 8007724:	e797      	b.n	8007656 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8007726:	bf00      	nop

08007728 <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE>:
void setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {
 8007728:	b430      	push	{r4, r5}
    if (offset < 0)
 800772a:	1e14      	subs	r4, r2, #0
 800772c:	db07      	blt.n	800773e <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE+0x16>
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 800772e:	6845      	ldr	r5, [r0, #4]
 8007730:	3008      	adds	r0, #8
 8007732:	460a      	mov	r2, r1
 8007734:	4420      	add	r0, r4
 8007736:	1b29      	subs	r1, r5, r4
}
 8007738:	bc30      	pop	{r4, r5}
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 800773a:	f7ff bf71 	b.w	8007620 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>
}
 800773e:	bc30      	pop	{r4, r5}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop

08007744 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>:

TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8007744:	b500      	push	{lr}
// Assume little endian
#define READBYTES(isz, swap, conv)                                                                 \
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
 8007746:	3a01      	subs	r2, #1
TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8007748:	b085      	sub	sp, #20
    switch (format) {
 800774a:	2a0f      	cmp	r2, #15
 800774c:	f200 8088 	bhi.w	8007860 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x11c>
 8007750:	e8df f002 	tbb	[pc, r2]
 8007754:	3d302316 	.word	0x3d302316
 8007758:	5c59564a 	.word	0x5c59564a
 800775c:	7165625f 	.word	0x7165625f
 8007760:	08838074 	.word	0x08838074
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
    case NumberFormat::Float64LE:
        READBYTES(f64, false, fromDouble);
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
 8007764:	2301      	movs	r3, #1
 8007766:	9100      	str	r1, [sp, #0]
 8007768:	2208      	movs	r2, #8
 800776a:	eb0d 0102 	add.w	r1, sp, r2
 800776e:	f7ff fe11 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007776:	f000 fac7 	bl	8007d08 <_ZN3pxt10fromDoubleEd>
    }

    return 0;
}
 800777a:	b005      	add	sp, #20
 800777c:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, false, fromInt);
 8007780:	2300      	movs	r3, #0
 8007782:	9100      	str	r1, [sp, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	a902      	add	r1, sp, #8
 8007788:	f7ff fe04 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 800778c:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8007790:	f000 fb7e 	bl	8007e90 <_ZN3pxt7fromIntEi>
}
 8007794:	b005      	add	sp, #20
 8007796:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u8, false, fromInt);
 800779a:	2300      	movs	r3, #0
 800779c:	9100      	str	r1, [sp, #0]
 800779e:	2201      	movs	r2, #1
 80077a0:	a902      	add	r1, sp, #8
 80077a2:	f7ff fdf7 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 80077a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80077aa:	f000 fb71 	bl	8007e90 <_ZN3pxt7fromIntEi>
}
 80077ae:	b005      	add	sp, #20
 80077b0:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i16, false, fromInt);
 80077b4:	2300      	movs	r3, #0
 80077b6:	9100      	str	r1, [sp, #0]
        READBYTES(i16, true, fromInt);
 80077b8:	2202      	movs	r2, #2
 80077ba:	a902      	add	r1, sp, #8
 80077bc:	f7ff fdea 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 80077c0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80077c4:	f000 fb64 	bl	8007e90 <_ZN3pxt7fromIntEi>
}
 80077c8:	b005      	add	sp, #20
 80077ca:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u16, false, fromInt);
 80077ce:	2300      	movs	r3, #0
 80077d0:	9100      	str	r1, [sp, #0]
        READBYTES(u16, true, fromInt);
 80077d2:	2202      	movs	r2, #2
 80077d4:	a902      	add	r1, sp, #8
 80077d6:	f7ff fddd 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 80077da:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80077de:	f000 fb57 	bl	8007e90 <_ZN3pxt7fromIntEi>
}
 80077e2:	b005      	add	sp, #20
 80077e4:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i32, false, fromInt);
 80077e8:	2300      	movs	r3, #0
 80077ea:	9100      	str	r1, [sp, #0]
        READBYTES(i32, true, fromInt);
 80077ec:	2204      	movs	r2, #4
 80077ee:	a902      	add	r1, sp, #8
 80077f0:	f7ff fdd0 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 80077f4:	9802      	ldr	r0, [sp, #8]
 80077f6:	f000 fb4b 	bl	8007e90 <_ZN3pxt7fromIntEi>
}
 80077fa:	b005      	add	sp, #20
 80077fc:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, true, fromInt);
 8007800:	2301      	movs	r3, #1
 8007802:	9100      	str	r1, [sp, #0]
 8007804:	e7be      	b.n	8007784 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x40>
        READBYTES(u8, true, fromInt);
 8007806:	2301      	movs	r3, #1
 8007808:	9100      	str	r1, [sp, #0]
 800780a:	e7c8      	b.n	800779e <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x5a>
        READBYTES(i16, true, fromInt);
 800780c:	9100      	str	r1, [sp, #0]
 800780e:	2301      	movs	r3, #1
 8007810:	e7d2      	b.n	80077b8 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x74>
        READBYTES(u16, true, fromInt);
 8007812:	9100      	str	r1, [sp, #0]
 8007814:	2301      	movs	r3, #1
 8007816:	e7dc      	b.n	80077d2 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x8e>
        READBYTES(i32, true, fromInt);
 8007818:	9100      	str	r1, [sp, #0]
 800781a:	2301      	movs	r3, #1
 800781c:	e7e6      	b.n	80077ec <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xa8>
        READBYTES(u32, false, fromUInt);
 800781e:	2300      	movs	r3, #0
 8007820:	9100      	str	r1, [sp, #0]
        READBYTES(u32, true, fromUInt);
 8007822:	2204      	movs	r2, #4
 8007824:	a902      	add	r1, sp, #8
 8007826:	f7ff fdb5 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 800782a:	9802      	ldr	r0, [sp, #8]
 800782c:	f000 fb3a 	bl	8007ea4 <_ZN3pxt8fromUIntEj>
}
 8007830:	b005      	add	sp, #20
 8007832:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u32, true, fromUInt);
 8007836:	9100      	str	r1, [sp, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	e7f2      	b.n	8007822 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xde>
        READBYTES(f32, false, fromFloat);
 800783c:	2300      	movs	r3, #0
 800783e:	9100      	str	r1, [sp, #0]
        READBYTES(f32, true, fromFloat);
 8007840:	2204      	movs	r2, #4
 8007842:	a902      	add	r1, sp, #8
 8007844:	f7ff fda6 	bl	8007394 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007848:	9802      	ldr	r0, [sp, #8]
 800784a:	f000 fb19 	bl	8007e80 <_ZN3pxt9fromFloatEf>
}
 800784e:	b005      	add	sp, #20
 8007850:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(f64, false, fromDouble);
 8007854:	9100      	str	r1, [sp, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	e786      	b.n	8007768 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x24>
        READBYTES(f32, true, fromFloat);
 800785a:	9100      	str	r1, [sp, #0]
 800785c:	2301      	movs	r3, #1
 800785e:	e7ef      	b.n	8007840 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xfc>
    return 0;
 8007860:	2000      	movs	r0, #0
 8007862:	e78a      	b.n	800777a <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x36>

08007864 <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi>:
    if (offset < 0)
 8007864:	1e13      	subs	r3, r2, #0
 8007866:	db08      	blt.n	800787a <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi+0x16>
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
 8007868:	b410      	push	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 800786a:	6844      	ldr	r4, [r0, #4]
 800786c:	3008      	adds	r0, #8
 800786e:	460a      	mov	r2, r1
 8007870:	4418      	add	r0, r3
 8007872:	1ae1      	subs	r1, r4, r3
}
 8007874:	bc10      	pop	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 8007876:	f7ff bf65 	b.w	8007744 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>
        return fromInt(0);
 800787a:	2000      	movs	r0, #0
 800787c:	f000 bb08 	b.w	8007e90 <_ZN3pxt7fromIntEi>

08007880 <_ZN7control6millisEv>:
//
//
//
//
    int millis() {
        return current_time_ms();
 8007880:	f002 bb7c 	b.w	8009f7c <_ZN3pxt15current_time_msEv>

08007884 <_ZN7control15internalOnEventEiiPN3pxt12TValueStructEi>:
//
//
//
//
    void internalOnEvent(int src, int value, Action handler, int flags = 16) {
        registerWithDal(src, value, handler, flags);
 8007884:	f002 bc1e 	b.w	800a0c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08007888 <_ZN7control5resetEv>:
//
//
//
//
    void reset() {
        target_reset();
 8007888:	f7f9 b840 	b.w	800090c <target_reset>

0800788c <_ZN7control10waitMicrosEi>:
//
//
//
//
    void waitMicros(int micros) {
        sleep_us(micros);
 800788c:	17c1      	asrs	r1, r0, #31
 800788e:	f002 baa3 	b.w	8009dd8 <_ZN3pxt8sleep_usEy>
 8007892:	bf00      	nop

08007894 <_ZN7control13runInParallelEPN3pxt12TValueStructE>:
//
//
//
//
    void runInParallel(Action a) {
        pxt::runInParallel(a);
 8007894:	f002 bab4 	b.w	8009e00 <_ZN3pxt13runInParallelEPNS_12TValueStructE>

08007898 <_ZN7control12waitForEventEii>:
//
//
//
//
    void waitForEvent(int src, int value) {
        pxt::waitForEvent(src, value);
 8007898:	f002 bac4 	b.w	8009e24 <_ZN3pxt12waitForEventEii>

0800789c <_ZN7control18deviceSerialNumberEv>:
//
//
//
//
    int deviceSerialNumber() {
        return pxt::getSerialNumber();
 800789c:	f002 bb6c 	b.w	8009f78 <_ZN3pxt15getSerialNumberEv>

080078a0 <_ZN7control5__logEiPN3pxt11BoxedStringE>:
//
//
//
//
    void __log(int prority, String text) {
        if (NULL == text) return;
 80078a0:	4608      	mov	r0, r1
 80078a2:	b119      	cbz	r1, 80078ac <_ZN7control5__logEiPN3pxt11BoxedStringE+0xc>
        pxt::sendSerial(text->data, text->length);
 80078a4:	8889      	ldrh	r1, [r1, #4]
 80078a6:	3006      	adds	r0, #6
 80078a8:	f002 be7e 	b.w	800a5a8 <_ZN3pxt10sendSerialEPKci>
    }
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <_ZN7control10dmesgValueEPN3pxt12TValueStructE>:
//
//
//
//
    void dmesgValue(TValue v) {
        anyPrint(v);
 80078b0:	f001 b9da 	b.w	8008c68 <_ZN3pxt8anyPrintEPNS_12TValueStructE>

080078b4 <_ZN7control2gcEv>:
//
//
//
//
    void gc() {
        pxt::gc(1);
 80078b4:	2001      	movs	r0, #1
 80078b6:	f001 bb53 	b.w	8008f60 <_ZN3pxt2gcEi>
 80078ba:	bf00      	nop

080078bc <_ZN7control8heapDumpEv>:

//
//
//
//
    void heapDump() {
 80078bc:	b508      	push	{r3, lr}
        pxt::gc(2);
 80078be:	2002      	movs	r0, #2
 80078c0:	f001 fb4e 	bl	8008f60 <_ZN3pxt2gcEi>
        target_panic(PANIC_HEAP_DUMPED);
    }
 80078c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        target_panic(PANIC_HEAP_DUMPED);
 80078c8:	f240 3093 	movw	r0, #915	; 0x393
 80078cc:	f7f9 b840 	b.w	8000950 <target_panic>

080078d0 <_ZN7control16profilingEnabledEv>:
#ifdef PXT_PROFILE
        return true;
#else
        return false;
#endif
    }
 80078d0:	2000      	movs	r0, #0
 80078d2:	4770      	bx	lr

080078d4 <_ZN3pxtL13dtorDoNothingEv>:
        decr((TValue)s);
#endif
    }
}

static void dtorDoNothing() {}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <_ZN3pxtL11string_sizeEPNS_11BoxedStringE>:
#else
#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \
    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint)
#endif

PRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)
 80078d8:	8880      	ldrh	r0, [r0, #4]
 80078da:	300c      	adds	r0, #12
 80078dc:	0880      	lsrs	r0, r0, #2
 80078de:	4770      	bx	lr

080078e0 <_ZN3pxtL11number_sizeEPNS_11BoxedNumberE>:
PRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)
 80078e0:	2003      	movs	r0, #3
 80078e2:	4770      	bx	lr

080078e4 <_ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE>:
PRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)
 80078e4:	6840      	ldr	r0, [r0, #4]
 80078e6:	300b      	adds	r0, #11
 80078e8:	0880      	lsrs	r0, r0, #2
 80078ea:	4770      	bx	lr

080078ec <_ZN3pxt11findBindingEii>:
    for (auto p = handlerBindings; p; p = p->next) {
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <_ZN3pxt11findBindingEii+0x18>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b12b      	cbz	r3, 80078fe <_ZN3pxt11findBindingEii+0x12>
        if (p->source == source && p->value == value) {
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4282      	cmp	r2, r0
 80078f6:	d1fa      	bne.n	80078ee <_ZN3pxt11findBindingEii+0x2>
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	428a      	cmp	r2, r1
 80078fc:	d1f7      	bne.n	80078ee <_ZN3pxt11findBindingEii+0x2>
}
 80078fe:	4618      	mov	r0, r3
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	2000100c 	.word	0x2000100c

08007908 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>:
void setBinding(int source, int value, Action act) {
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (auto p = handlerBindings; p; p = p->next) {
 800790c:	4f10      	ldr	r7, [pc, #64]	; (8007950 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x48>)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	b913      	cbnz	r3, 8007918 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x10>
 8007912:	e00a      	b.n	800792a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b143      	cbz	r3, 800792a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
        if (p->source == source && p->value == value) {
 8007918:	685c      	ldr	r4, [r3, #4]
 800791a:	42a0      	cmp	r0, r4
 800791c:	d1fa      	bne.n	8007914 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
 800791e:	689c      	ldr	r4, [r3, #8]
 8007920:	42a1      	cmp	r1, r4
 8007922:	d1f7      	bne.n	8007914 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
        curr->action = act;
 8007924:	60da      	str	r2, [r3, #12]
}
 8007926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792a:	4604      	mov	r4, r0
    curr = new HandlerBinding();
 800792c:	2010      	movs	r0, #16
 800792e:	4690      	mov	r8, r2
 8007930:	460d      	mov	r5, r1
 8007932:	f7fc fb0d 	bl	8003f50 <_Znwj>
 8007936:	4606      	mov	r6, r0
    curr->next = handlerBindings;
 8007938:	683b      	ldr	r3, [r7, #0]
    curr->source = source;
 800793a:	6044      	str	r4, [r0, #4]
    curr->value = value;
 800793c:	6085      	str	r5, [r0, #8]
    curr->next = handlerBindings;
 800793e:	6003      	str	r3, [r0, #0]
    registerGC(&curr->action);
 8007940:	2101      	movs	r1, #1
    curr->action = act;
 8007942:	f840 8f0c 	str.w	r8, [r0, #12]!
    registerGC(&curr->action);
 8007946:	f001 fe0b 	bl	8009560 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
    handlerBindings = curr;
 800794a:	603e      	str	r6, [r7, #0]
}
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	2000100c 	.word	0x2000100c

08007954 <_ZN3pxt8mkStringEPKci>:
String mkString(const char *data, int len) {
 8007954:	b570      	push	{r4, r5, r6, lr}
    if (len < 0)
 8007956:	1e0c      	subs	r4, r1, #0
String mkString(const char *data, int len) {
 8007958:	4606      	mov	r6, r0
    if (len < 0)
 800795a:	db03      	blt.n	8007964 <_ZN3pxt8mkStringEPKci+0x10>
    if (len == 0)
 800795c:	b93c      	cbnz	r4, 800796e <_ZN3pxt8mkStringEPKci+0x1a>
        return (String)emptyString;
 800795e:	4d0e      	ldr	r5, [pc, #56]	; (8007998 <_ZN3pxt8mkStringEPKci+0x44>)
}
 8007960:	4628      	mov	r0, r5
 8007962:	bd70      	pop	{r4, r5, r6, pc}
        len = strlen(data);
 8007964:	f7fc f8f4 	bl	8003b50 <strlen>
 8007968:	4604      	mov	r4, r0
    if (len == 0)
 800796a:	2c00      	cmp	r4, #0
 800796c:	d0f7      	beq.n	800795e <_ZN3pxt8mkStringEPKci+0xa>
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 800796e:	f104 0009 	add.w	r0, r4, #9
 8007972:	f001 fcb1 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8007976:	4605      	mov	r5, r0
 8007978:	b108      	cbz	r0, 800797e <_ZN3pxt8mkStringEPKci+0x2a>
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800797a:	4b08      	ldr	r3, [pc, #32]	; (800799c <_ZN3pxt8mkStringEPKci+0x48>)
 800797c:	6003      	str	r3, [r0, #0]
    r->length = len;
 800797e:	80ac      	strh	r4, [r5, #4]
    if (data)
 8007980:	b126      	cbz	r6, 800798c <_ZN3pxt8mkStringEPKci+0x38>
        memcpy(r->data, data, len);
 8007982:	4631      	mov	r1, r6
 8007984:	4622      	mov	r2, r4
 8007986:	1da8      	adds	r0, r5, #6
 8007988:	f7fc f8ca 	bl	8003b20 <memcpy>
    r->data[len] = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	442c      	add	r4, r5
 8007990:	71a3      	strb	r3, [r4, #6]
}
 8007992:	4628      	mov	r0, r5
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	bf00      	nop
 8007998:	0800cdcc 	.word	0x0800cdcc
 800799c:	0800cc10 	.word	0x0800cc10

080079a0 <_ZN3pxt8mkBufferEPKhi>:
Buffer mkBuffer(const uint8_t *data, int len) {
 80079a0:	b570      	push	{r4, r5, r6, lr}
    if (len <= 0)
 80079a2:	1e0d      	subs	r5, r1, #0
 80079a4:	dd12      	ble.n	80079cc <_ZN3pxt8mkBufferEPKhi+0x2c>
 80079a6:	4606      	mov	r6, r0
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
 80079a8:	f105 0008 	add.w	r0, r5, #8
 80079ac:	f001 fc94 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 80079b0:	4604      	mov	r4, r0
 80079b2:	b108      	cbz	r0, 80079b8 <_ZN3pxt8mkBufferEPKhi+0x18>
 80079b4:	4b09      	ldr	r3, [pc, #36]	; (80079dc <_ZN3pxt8mkBufferEPKhi+0x3c>)
 80079b6:	6003      	str	r3, [r0, #0]
    r->length = len;
 80079b8:	6065      	str	r5, [r4, #4]
 80079ba:	f104 0008 	add.w	r0, r4, #8
        memcpy(r->data, data, len);
 80079be:	462a      	mov	r2, r5
 80079c0:	4631      	mov	r1, r6
    if (data)
 80079c2:	b136      	cbz	r6, 80079d2 <_ZN3pxt8mkBufferEPKhi+0x32>
        memcpy(r->data, data, len);
 80079c4:	f7fc f8ac 	bl	8003b20 <memcpy>
}
 80079c8:	4620      	mov	r0, r4
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
        return (Buffer)emptyBuffer;
 80079cc:	4c04      	ldr	r4, [pc, #16]	; (80079e0 <_ZN3pxt8mkBufferEPKhi+0x40>)
}
 80079ce:	4620      	mov	r0, r4
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
        memset(r->data, 0, len);
 80079d2:	f7fc f8ed 	bl	8003bb0 <memset>
}
 80079d6:	4620      	mov	r0, r4
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
 80079da:	bf00      	nop
 80079dc:	0800cbb0 	.word	0x0800cbb0
 80079e0:	0800cdc0 	.word	0x0800cdc0

080079e4 <_ZN3pxt9getRandomEj>:
unsigned getRandom(unsigned max) {
 80079e4:	b430      	push	{r4, r5}
 80079e6:	4604      	mov	r4, r0
 80079e8:	4d0d      	ldr	r5, [pc, #52]	; (8007a20 <_ZN3pxt9getRandomEj+0x3c>)
 80079ea:	682a      	ldr	r2, [r5, #0]
        m = (unsigned)max;
 80079ec:	4621      	mov	r1, r4
        result = 0;
 80079ee:	2000      	movs	r0, #0
            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |
 80079f0:	0993      	lsrs	r3, r2, #6
 80079f2:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 80079f6:	4053      	eors	r3, r2
 80079f8:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 80079fc:	ea83 0392 	eor.w	r3, r3, r2, lsr #2
 8007a00:	0852      	lsrs	r2, r2, #1
 8007a02:	4053      	eors	r3, r2
 8007a04:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
            result = ((result << 1) | (r & 0x00000001));
 8007a08:	f002 0301 	and.w	r3, r2, #1
        } while (m >>= 1);
 8007a0c:	0849      	lsrs	r1, r1, #1
            result = ((result << 1) | (r & 0x00000001));
 8007a0e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
        } while (m >>= 1);
 8007a12:	d1ed      	bne.n	80079f0 <_ZN3pxt9getRandomEj+0xc>
    } while (result > (unsigned)max);
 8007a14:	4284      	cmp	r4, r0
 8007a16:	d3e9      	bcc.n	80079ec <_ZN3pxt9getRandomEj+0x8>
 8007a18:	602a      	str	r2, [r5, #0]
}
 8007a1a:	bc30      	pop	{r4, r5}
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20001000 	.word	0x20001000

08007a24 <_ZN7String_7mkEmptyEv>:
    return mkString("", 0);
 8007a24:	2100      	movs	r1, #0
 8007a26:	4801      	ldr	r0, [pc, #4]	; (8007a2c <_ZN7String_7mkEmptyEv+0x8>)
 8007a28:	f7ff bf94 	b.w	8007954 <_ZN3pxt8mkStringEPKci>
 8007a2c:	0800d1f4 	.word	0x0800d1f4

08007a30 <_ZN7String_12fromCharCodeEi>:
    char buf[] = {(char)code, 0};
 8007a30:	2200      	movs	r2, #0
String fromCharCode(int code) {
 8007a32:	b500      	push	{lr}
 8007a34:	b083      	sub	sp, #12
    char buf[] = {(char)code, 0};
 8007a36:	ab02      	add	r3, sp, #8
 8007a38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007a3c:	f803 0d04 	strb.w	r0, [r3, #-4]!
    return mkString(buf, 1);
 8007a40:	4618      	mov	r0, r3
 8007a42:	2101      	movs	r1, #1
 8007a44:	f7ff ff86 	bl	8007954 <_ZN3pxt8mkStringEPKci>
}
 8007a48:	b003      	add	sp, #12
 8007a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a4e:	bf00      	nop

08007a50 <_ZN7String_6charAtEPN3pxt11BoxedStringEi>:
String charAt(String s, int pos) {
 8007a50:	b510      	push	{r4, lr}
 8007a52:	b082      	sub	sp, #8
    if (s && 0 <= pos && pos < s->length) {
 8007a54:	b120      	cbz	r0, 8007a60 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8007a56:	2900      	cmp	r1, #0
 8007a58:	db02      	blt.n	8007a60 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8007a5a:	8883      	ldrh	r3, [r0, #4]
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	dc05      	bgt.n	8007a6c <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x1c>
    return mkString("", 0);
 8007a60:	2100      	movs	r1, #0
 8007a62:	4809      	ldr	r0, [pc, #36]	; (8007a88 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x38>)
 8007a64:	f7ff ff76 	bl	8007954 <_ZN3pxt8mkStringEPKci>
}
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd10      	pop	{r4, pc}
    char buf[] = {(char)code, 0};
 8007a6c:	2400      	movs	r4, #0
        return fromCharCode(s->data[pos]);
 8007a6e:	4401      	add	r1, r0
 8007a70:	798a      	ldrb	r2, [r1, #6]
    char buf[] = {(char)code, 0};
 8007a72:	ab02      	add	r3, sp, #8
 8007a74:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007a78:	f803 2d04 	strb.w	r2, [r3, #-4]!
    return mkString(buf, 1);
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	2101      	movs	r1, #1
 8007a80:	f7ff ff68 	bl	8007954 <_ZN3pxt8mkStringEPKci>
}
 8007a84:	b002      	add	sp, #8
 8007a86:	bd10      	pop	{r4, pc}
 8007a88:	0800d1f4 	.word	0x0800d1f4

08007a8c <_ZN7String_6concatEPN3pxt11BoxedStringES2_>:
String concat(String s, String other) {
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	460d      	mov	r5, r1
    if (!s)
 8007a90:	b150      	cbz	r0, 8007aa8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x1c>
 8007a92:	4604      	mov	r4, r0
 8007a94:	8881      	ldrh	r1, [r0, #4]
    if (!other)
 8007a96:	b11d      	cbz	r5, 8007aa0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x14>
    if (s->length == 0)
 8007a98:	bb31      	cbnz	r1, 8007ae8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x5c>
 8007a9a:	462e      	mov	r6, r5
}
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
    if (s->length == 0)
 8007aa0:	b961      	cbnz	r1, 8007abc <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x30>
        other = (String)sNull;
 8007aa2:	4e14      	ldr	r6, [pc, #80]	; (8007af4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
}
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
    if (!other)
 8007aa8:	b301      	cbz	r1, 8007aec <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x60>
 8007aaa:	f44f 5169 	mov.w	r1, #14912	; 0x3a40
        s = (String)sNull;
 8007aae:	4e11      	ldr	r6, [pc, #68]	; (8007af4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    if (other->length == 0)
 8007ab0:	88ab      	ldrh	r3, [r5, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f2      	beq.n	8007a9c <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x10>
 8007ab6:	4634      	mov	r4, r6
 8007ab8:	4419      	add	r1, r3
 8007aba:	e002      	b.n	8007ac2 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x36>
 8007abc:	f501 5169 	add.w	r1, r1, #14912	; 0x3a40
        other = (String)sNull;
 8007ac0:	4d0c      	ldr	r5, [pc, #48]	; (8007af4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    String r = mkString(NULL, s->length + other->length);
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7ff ff46 	bl	8007954 <_ZN3pxt8mkStringEPKci>
    memcpy(r->data, s->data, s->length);
 8007ac8:	1d83      	adds	r3, r0, #6
    String r = mkString(NULL, s->length + other->length);
 8007aca:	4606      	mov	r6, r0
    memcpy(r->data, s->data, s->length);
 8007acc:	88a2      	ldrh	r2, [r4, #4]
 8007ace:	1da1      	adds	r1, r4, #6
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fc f825 	bl	8003b20 <memcpy>
 8007ad6:	4603      	mov	r3, r0
    memcpy(r->data + s->length, other->data, other->length);
 8007ad8:	88a0      	ldrh	r0, [r4, #4]
 8007ada:	88aa      	ldrh	r2, [r5, #4]
 8007adc:	4418      	add	r0, r3
 8007ade:	1da9      	adds	r1, r5, #6
 8007ae0:	f7fc f81e 	bl	8003b20 <memcpy>
}
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	4606      	mov	r6, r0
 8007aea:	e7e1      	b.n	8007ab0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x24>
    if (!other)
 8007aec:	f44f 41e9 	mov.w	r1, #29824	; 0x7480
        s = (String)sNull;
 8007af0:	4c00      	ldr	r4, [pc, #0]	; (8007af4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
 8007af2:	e7e5      	b.n	8007ac0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x34>
 8007af4:	0800ce20 	.word	0x0800ce20

08007af8 <_ZN7String_7compareEPN3pxt11BoxedStringES2_>:
    if (a == b)
 8007af8:	4288      	cmp	r0, r1
 8007afa:	d00a      	beq.n	8007b12 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1a>
int compare(String a, String b) {
 8007afc:	b508      	push	{r3, lr}
    int compareResult = strcmp(a->data, b->data);
 8007afe:	3106      	adds	r1, #6
 8007b00:	3006      	adds	r0, #6
 8007b02:	f7fc f81b 	bl	8003b3c <strcmp>
    if (compareResult < 0)
 8007b06:	2800      	cmp	r0, #0
 8007b08:	db05      	blt.n	8007b16 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1e>
    else if (compareResult > 0)
 8007b0a:	bf14      	ite	ne
 8007b0c:	2001      	movne	r0, #1
 8007b0e:	2000      	moveq	r0, #0
}
 8007b10:	bd08      	pop	{r3, pc}
        return 0;
 8007b12:	2000      	movs	r0, #0
}
 8007b14:	4770      	bx	lr
        return -1;
 8007b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007b1a:	bd08      	pop	{r3, pc}

08007b1c <_ZN7String_6lengthEPN3pxt11BoxedStringE>:
}
 8007b1c:	8880      	ldrh	r0, [r0, #4]
 8007b1e:	4770      	bx	lr

08007b20 <_ZN7String_8mystrtodEPKcPPc>:
NUMBER mystrtod(const char *p, char **endp) {
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (isspace(*p))
 8007b24:	7803      	ldrb	r3, [r0, #0]
NUMBER mystrtod(const char *p, char **endp) {
 8007b26:	b083      	sub	sp, #12
    while (isspace(*p))
 8007b28:	2b20      	cmp	r3, #32
NUMBER mystrtod(const char *p, char **endp) {
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	460f      	mov	r7, r1
    while (isspace(*p))
 8007b2e:	d103      	bne.n	8007b38 <_ZN7String_8mystrtodEPKcPPc+0x18>
 8007b30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d0fb      	beq.n	8007b30 <_ZN7String_8mystrtodEPKcPPc+0x10>
    if (*p == '+')
 8007b38:	2b2b      	cmp	r3, #43	; 0x2b
        p++;
 8007b3a:	bf08      	it	eq
 8007b3c:	3401      	addeq	r4, #1
    if (*p == '-') {
 8007b3e:	7823      	ldrb	r3, [r4, #0]
 8007b40:	2b2d      	cmp	r3, #45	; 0x2d
 8007b42:	d05c      	beq.n	8007bfe <_ZN7String_8mystrtodEPKcPPc+0xde>
    NUMBER m = 1;
 8007b44:	2100      	movs	r1, #0
 8007b46:	4a4d      	ldr	r2, [pc, #308]	; (8007c7c <_ZN7String_8mystrtodEPKcPPc+0x15c>)
 8007b48:	e9cd 1200 	strd	r1, r2, [sp]
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d043      	beq.n	8007bd8 <_ZN7String_8mystrtodEPKcPPc+0xb8>
    while (*p) {
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 808d 	beq.w	8007c70 <_ZN7String_8mystrtodEPKcPPc+0x150>
        m = -1;
 8007b56:	2600      	movs	r6, #0
 8007b58:	f04f 0800 	mov.w	r8, #0
 8007b5c:	f04f 0900 	mov.w	r9, #0
            v *= 10;
 8007b60:	f04f 0a00 	mov.w	sl, #0
 8007b64:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8007c84 <_ZN7String_8mystrtodEPKcPPc+0x164>
 8007b68:	e01c      	b.n	8007ba4 <_ZN7String_8mystrtodEPKcPPc+0x84>
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	465b      	mov	r3, fp
 8007b6e:	4640      	mov	r0, r8
 8007b70:	4649      	mov	r1, r9
 8007b72:	f7fb f92f 	bl	8002dd4 <__wrap___aeabi_dmul>
 8007b76:	4680      	mov	r8, r0
 8007b78:	4689      	mov	r9, r1
            v += c;
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7fa fd56 	bl	800262c <__aeabi_i2d>
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	f7fb f93e 	bl	8002e04 <__wrap___aeabi_dadd>
 8007b88:	4680      	mov	r8, r0
 8007b8a:	4689      	mov	r9, r1
            if (dot)
 8007b8c:	b13e      	cbz	r6, 8007b9e <_ZN7String_8mystrtodEPKcPPc+0x7e>
                m /= 10;
 8007b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	f7fb f905 	bl	8002da4 <__wrap___aeabi_ddiv>
 8007b9a:	e9cd 0100 	strd	r0, r1, [sp]
    while (*p) {
 8007b9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007ba2:	b15b      	cbz	r3, 8007bbc <_ZN7String_8mystrtodEPKcPPc+0x9c>
        int c = *p - '0';
 8007ba4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
        if (0 <= c && c <= 9) {
 8007ba8:	2d09      	cmp	r5, #9
 8007baa:	d9de      	bls.n	8007b6a <_ZN7String_8mystrtodEPKcPPc+0x4a>
        } else if (!dot && *p == '.') {
 8007bac:	bb76      	cbnz	r6, 8007c0c <_ZN7String_8mystrtodEPKcPPc+0xec>
 8007bae:	2b2e      	cmp	r3, #46	; 0x2e
 8007bb0:	d12c      	bne.n	8007c0c <_ZN7String_8mystrtodEPKcPPc+0xec>
    while (*p) {
 8007bb2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            dot = 1;
 8007bb6:	2601      	movs	r6, #1
    while (*p) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f3      	bne.n	8007ba4 <_ZN7String_8mystrtodEPKcPPc+0x84>
    v *= m;
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7fb f906 	bl	8002dd4 <__wrap___aeabi_dmul>
 8007bc8:	4680      	mov	r8, r0
 8007bca:	4689      	mov	r9, r1
        *endp = (char *)p;
 8007bcc:	603c      	str	r4, [r7, #0]
}
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	b003      	add	sp, #12
 8007bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8007bd8:	7862      	ldrb	r2, [r4, #1]
 8007bda:	f042 0220 	orr.w	r2, r2, #32
 8007bde:	2a78      	cmp	r2, #120	; 0x78
 8007be0:	d1b9      	bne.n	8007b56 <_ZN7String_8mystrtodEPKcPPc+0x36>
        return m * strtol(p, endp, 16);
 8007be2:	2210      	movs	r2, #16
 8007be4:	4639      	mov	r1, r7
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7fb ff90 	bl	8003b0c <strtol>
 8007bec:	f7fa fd1e 	bl	800262c <__aeabi_i2d>
 8007bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf4:	f7fb f8ee 	bl	8002dd4 <__wrap___aeabi_dmul>
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4689      	mov	r9, r1
 8007bfc:	e7e7      	b.n	8007bce <_ZN7String_8mystrtodEPKcPPc+0xae>
        m = -1;
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <_ZN7String_8mystrtodEPKcPPc+0x160>)
 8007c02:	7863      	ldrb	r3, [r4, #1]
 8007c04:	e9cd 1200 	strd	r1, r2, [sp]
        p++;
 8007c08:	3401      	adds	r4, #1
 8007c0a:	e79f      	b.n	8007b4c <_ZN7String_8mystrtodEPKcPPc+0x2c>
        } else if (*p == 'e' || *p == 'E') {
 8007c0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c10:	2b45      	cmp	r3, #69	; 0x45
 8007c12:	7825      	ldrb	r5, [r4, #0]
 8007c14:	d122      	bne.n	8007c5c <_ZN7String_8mystrtodEPKcPPc+0x13c>
    v *= m;
 8007c16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c1a:	4642      	mov	r2, r8
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	f7fb f8d9 	bl	8002dd4 <__wrap___aeabi_dmul>
 8007c22:	4680      	mov	r8, r0
 8007c24:	4689      	mov	r9, r1
    if (*p) {
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d0d0      	beq.n	8007bcc <_ZN7String_8mystrtodEPKcPPc+0xac>
        int pw = strtol(p, endp, 10);
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	1c60      	adds	r0, r4, #1
 8007c2e:	220a      	movs	r2, #10
 8007c30:	f7fb ff6c 	bl	8003b0c <strtol>
        v *= p10(pw);
 8007c34:	4913      	ldr	r1, [pc, #76]	; (8007c84 <_ZN7String_8mystrtodEPKcPPc+0x164>)
 8007c36:	4602      	mov	r2, r0
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f7fa fdb1 	bl	80027a0 <__powidf2>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7fb f8c5 	bl	8002dd4 <__wrap___aeabi_dmul>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4689      	mov	r9, r1
}
 8007c4e:	4640      	mov	r0, r8
 8007c50:	4649      	mov	r1, r9
 8007c52:	b003      	add	sp, #12
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (isspace(*p))
 8007c58:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007c5c:	2d20      	cmp	r5, #32
 8007c5e:	d0fb      	beq.n	8007c58 <_ZN7String_8mystrtodEPKcPPc+0x138>
            if (*p)
 8007c60:	b90d      	cbnz	r5, 8007c66 <_ZN7String_8mystrtodEPKcPPc+0x146>
 8007c62:	7825      	ldrb	r5, [r4, #0]
 8007c64:	e7d7      	b.n	8007c16 <_ZN7String_8mystrtodEPKcPPc+0xf6>
                return NAN;
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8007c88 <_ZN7String_8mystrtodEPKcPPc+0x168>
 8007c6e:	e7ae      	b.n	8007bce <_ZN7String_8mystrtodEPKcPPc+0xae>
    while (*p) {
 8007c70:	f04f 0800 	mov.w	r8, #0
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	e7a0      	b.n	8007bbc <_ZN7String_8mystrtodEPKcPPc+0x9c>
 8007c7a:	bf00      	nop
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	bff00000 	.word	0xbff00000
 8007c84:	40240000 	.word	0x40240000
 8007c88:	7ff80000 	.word	0x7ff80000

08007c8c <_ZN7String_6substrEPN3pxt11BoxedStringEii>:
String substr(String s, int start, int length) {
 8007c8c:	460b      	mov	r3, r1
    if (length <= 0)
 8007c8e:	1e11      	subs	r1, r2, #0
 8007c90:	dd10      	ble.n	8007cb4 <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x28>
String substr(String s, int start, int length) {
 8007c92:	b410      	push	{r4}
 8007c94:	8884      	ldrh	r4, [r0, #4]
    if (start < 0)
 8007c96:	2b00      	cmp	r3, #0
        start = max(s->length + start, 0);
 8007c98:	bfbc      	itt	lt
 8007c9a:	191b      	addlt	r3, r3, r4
 8007c9c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
    length = min(length, s->length - start);
 8007ca0:	1ae4      	subs	r4, r4, r3
    return mkString(s->data + start, length);
 8007ca2:	42a1      	cmp	r1, r4
 8007ca4:	f100 0006 	add.w	r0, r0, #6
 8007ca8:	bfa8      	it	ge
 8007caa:	4621      	movge	r1, r4
 8007cac:	4418      	add	r0, r3
}
 8007cae:	bc10      	pop	{r4}
    return mkString(s->data + start, length);
 8007cb0:	f7ff be50 	b.w	8007954 <_ZN3pxt8mkStringEPKci>
    return mkString("", 0);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4801      	ldr	r0, [pc, #4]	; (8007cbc <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x30>)
 8007cb8:	f7ff be4c 	b.w	8007954 <_ZN3pxt8mkStringEPKci>
 8007cbc:	0800d1f4 	.word	0x0800d1f4

08007cc0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>:
    if (!s || !searchString)
 8007cc0:	b180      	cbz	r0, 8007ce4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
 8007cc2:	b179      	cbz	r1, 8007ce4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
    if (start < 0 || start + searchString->length > s->length)
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	db0d      	blt.n	8007ce4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
int indexOf(String s, String searchString, int start) {
 8007cc8:	b510      	push	{r4, lr}
    if (start < 0 || start + searchString->length > s->length)
 8007cca:	888b      	ldrh	r3, [r1, #4]
 8007ccc:	8884      	ldrh	r4, [r0, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	dc0a      	bgt.n	8007cea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    const char *match = strstr(((const char *)s->data + start), searchString->data);
 8007cd4:	1d84      	adds	r4, r0, #6
 8007cd6:	18a0      	adds	r0, r4, r2
 8007cd8:	3106      	adds	r1, #6
 8007cda:	f7fb ff71 	bl	8003bc0 <strstr>
    if (NULL == match)
 8007cde:	b120      	cbz	r0, 8007cea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    return match - s->data;
 8007ce0:	1b00      	subs	r0, r0, r4
}
 8007ce2:	bd10      	pop	{r4, pc}
        return -1;
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007ce8:	4770      	bx	lr
        return -1;
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007cee:	bd10      	pop	{r4, pc}

08007cf0 <_ZN7String_8includesEPN3pxt11BoxedStringES2_i>:
int includes(String s, String searchString, int start) {
 8007cf0:	b508      	push	{r3, lr}
    return -1 != indexOf(s, searchString, start);
 8007cf2:	f7ff ffe5 	bl	8007cc0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>
}
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	bf18      	it	ne
 8007cfa:	2001      	movne	r0, #1
 8007cfc:	bd08      	pop	{r3, pc}
 8007cfe:	bf00      	nop

08007d00 <_ZN8Boolean_4bangEi>:
}
 8007d00:	fab0 f080 	clz	r0, r0
 8007d04:	0940      	lsrs	r0, r0, #5
 8007d06:	4770      	bx	lr

08007d08 <_ZN3pxt10fromDoubleEd>:
    if (cnv.word1 == 0 && cnv.word0 == 0)
 8007d08:	1e0a      	subs	r2, r1, #0
TNumber fromDouble(NUMBER r) {
 8007d0a:	b538      	push	{r3, r4, r5, lr}
    if (cnv.word1 == 0 && cnv.word0 == 0)
 8007d0c:	d111      	bne.n	8007d32 <_ZN3pxt10fromDoubleEd+0x2a>
 8007d0e:	b338      	cbz	r0, 8007d60 <_ZN3pxt10fromDoubleEd+0x58>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	f7fb f922 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d141      	bne.n	8007da4 <_ZN3pxt10fromDoubleEd+0x9c>
    BoxedNumber *p = NEW_GC(BoxedNumber);
 8007d20:	200c      	movs	r0, #12
 8007d22:	f001 fad9 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8007d26:	b108      	cbz	r0, 8007d2c <_ZN3pxt10fromDoubleEd+0x24>
 8007d28:	4b1f      	ldr	r3, [pc, #124]	; (8007da8 <_ZN3pxt10fromDoubleEd+0xa0>)
 8007d2a:	6003      	str	r3, [r0, #0]
    p->num = r;
 8007d2c:	e9c0 5401 	strd	r5, r4, [r0, #4]
}
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;
 8007d32:	f3c2 540a 	ubfx	r4, r2, #20, #11
 8007d36:	f2a4 33ff 	subw	r3, r4, #1023	; 0x3ff
    if (ex < 0 || ex > 29) {
 8007d3a:	2b1d      	cmp	r3, #29
 8007d3c:	d812      	bhi.n	8007d64 <_ZN3pxt10fromDoubleEd+0x5c>
    if (ex <= 20) {
 8007d3e:	2b14      	cmp	r3, #20
 8007d40:	4605      	mov	r5, r0
 8007d42:	dc18      	bgt.n	8007d76 <_ZN3pxt10fromDoubleEd+0x6e>
        if (cnv.word0)
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1e3      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
        if (cnv.word1 << (ex + 12))
 8007d48:	f2a4 34f3 	subw	r4, r4, #1011	; 0x3f3
 8007d4c:	fa12 f404 	lsls.w	r4, r2, r4
 8007d50:	d1de      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8007d52:	02d0      	lsls	r0, r2, #11
 8007d54:	f1c3 031f 	rsb	r3, r3, #31
 8007d58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d5c:	40d8      	lsrs	r0, r3
 8007d5e:	e01a      	b.n	8007d96 <_ZN3pxt10fromDoubleEd+0x8e>
        return TAG_NUMBER(0);
 8007d60:	2001      	movs	r0, #1
}
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)
 8007d64:	2b1e      	cmp	r3, #30
 8007d66:	d1d3      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d1d1      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <_ZN3pxt10fromDoubleEd+0xa4>)
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d1ce      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
            return (TValue)(0x80000001);
 8007d72:	480f      	ldr	r0, [pc, #60]	; (8007db0 <_ZN3pxt10fromDoubleEd+0xa8>)
}
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
        if (cnv.word0 << (ex - 20))
 8007d76:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
 8007d7a:	fa10 f404 	lsls.w	r4, r0, r4
 8007d7e:	d1c7      	bne.n	8007d10 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8007d80:	02d0      	lsls	r0, r2, #11
 8007d82:	f1c3 011f 	rsb	r1, r3, #31
 8007d86:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
        r |= cnv.word0 >> (32 - (ex - 20));
 8007d8a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8007d8e:	40c8      	lsrs	r0, r1
        r |= cnv.word0 >> (32 - (ex - 20));
 8007d90:	fa25 f303 	lsr.w	r3, r5, r3
 8007d94:	4318      	orrs	r0, r3
    if (cnv.word1 >> 31)
 8007d96:	2a00      	cmp	r2, #0
        return TAG_NUMBER(-r);
 8007d98:	bfb8      	it	lt
 8007d9a:	4240      	neglt	r0, r0
        return TAG_NUMBER(r);
 8007d9c:	0040      	lsls	r0, r0, #1
 8007d9e:	f040 0001 	orr.w	r0, r0, #1
}
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
        return TAG_NAN;
 8007da4:	200e      	movs	r0, #14
}
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	0800cbe0 	.word	0x0800cbe0
 8007dac:	c1d00000 	.word	0xc1d00000
 8007db0:	80000001 	.word	0x80000001

08007db4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>:
TNumber toNumber(String s) {
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db6:	4607      	mov	r7, r0
 8007db8:	b083      	sub	sp, #12
    NUMBER v = mystrtod(s->data, &endptr);
 8007dba:	1d84      	adds	r4, r0, #6
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	a901      	add	r1, sp, #4
 8007dc0:	f7ff feae 	bl	8007b20 <_ZN7String_8mystrtodEPKcPPc>
    if (endptr != s->data + s->length)
 8007dc4:	88ba      	ldrh	r2, [r7, #4]
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	4414      	add	r4, r2
 8007dca:	42a3      	cmp	r3, r4
 8007dcc:	d007      	beq.n	8007dde <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x2a>
        v = NAN;
 8007dce:	2500      	movs	r5, #0
 8007dd0:	4e1e      	ldr	r6, [pc, #120]	; (8007e4c <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x98>)
    return fromDouble(v);
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	f7ff ff97 	bl	8007d08 <_ZN3pxt10fromDoubleEd>
}
 8007dda:	b003      	add	sp, #12
 8007ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (v == 0.0 || v == -0.0)
 8007dde:	2200      	movs	r2, #0
 8007de0:	2300      	movs	r3, #0
 8007de2:	4605      	mov	r5, r0
 8007de4:	460e      	mov	r6, r1
 8007de6:	f7fb f83d 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d1f1      	bne.n	8007dd2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }
 8007dee:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007df2:	4628      	mov	r0, r5
 8007df4:	4621      	mov	r1, r4
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 8007dfc:	f04f 0701 	mov.w	r7, #1
 8007e00:	f7fb f8ae 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8007e04:	b940      	cbnz	r0, 8007e18 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8007e06:	4628      	mov	r0, r5
 8007e08:	4621      	mov	r1, r4
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 8007e10:	f7fb f88c 	bl	8002f2c <__wrap___aeabi_dcmpgt>
 8007e14:	b900      	cbnz	r0, 8007e18 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8007e16:	4607      	mov	r7, r0
    else if (!isnormal(v))
 8007e18:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007e1c:	d1d7      	bne.n	8007dce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 8007e1e:	4628      	mov	r0, r5
 8007e20:	4621      	mov	r1, r4
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e28:	f04f 0701 	mov.w	r7, #1
 8007e2c:	f7fb f898 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8007e30:	b940      	cbnz	r0, 8007e44 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8007e32:	4628      	mov	r0, r5
 8007e34:	4621      	mov	r1, r4
 8007e36:	2200      	movs	r2, #0
 8007e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e3c:	f7fb f82c 	bl	8002e98 <__wrap___aeabi_dcmplt>
 8007e40:	b900      	cbnz	r0, 8007e44 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8007e42:	4607      	mov	r7, r0
 8007e44:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007e48:	d0c3      	beq.n	8007dd2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
 8007e4a:	e7c0      	b.n	8007dce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 8007e4c:	7ff80000 	.word	0x7ff80000
 8007e50:	7fefffff 	.word	0x7fefffff

08007e54 <_ZN3pxt7fromIntEi.part.7>:
TNumber fromInt(int v) {
 8007e54:	b508      	push	{r3, lr}
    return fromDouble(v);
 8007e56:	f7fa fbe9 	bl	800262c <__aeabi_i2d>
}
 8007e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 8007e5e:	f7ff bf53 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007e62:	bf00      	nop

08007e64 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi>:
    if (s && 0 <= pos && pos < s->length) {
 8007e64:	b150      	cbz	r0, 8007e7c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8007e66:	2900      	cmp	r1, #0
 8007e68:	db08      	blt.n	8007e7c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8007e6a:	8883      	ldrh	r3, [r0, #4]
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	dd05      	ble.n	8007e7c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
        return fromInt(s->data[pos]);
 8007e70:	4408      	add	r0, r1
 8007e72:	7980      	ldrb	r0, [r0, #6]
    return (v << 1) >> 1 == v;
 8007e74:	0040      	lsls	r0, r0, #1
        return TAG_NUMBER(v);
 8007e76:	f040 0001 	orr.w	r0, r0, #1
 8007e7a:	4770      	bx	lr
        return TAG_NAN;
 8007e7c:	200e      	movs	r0, #14
}
 8007e7e:	4770      	bx	lr

08007e80 <_ZN3pxt9fromFloatEf>:
TNumber fromFloat(float r) {
 8007e80:	b508      	push	{r3, lr}
    return fromDouble(r);
 8007e82:	f7fa fbe5 	bl	8002650 <__aeabi_f2d>
}
 8007e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(r);
 8007e8a:	f7ff bf3d 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007e8e:	bf00      	nop

08007e90 <_ZN3pxt7fromIntEi>:
 8007e90:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8007e92:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007e96:	d001      	beq.n	8007e9c <_ZN3pxt7fromIntEi+0xc>
 8007e98:	f7ff bfdc 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8007e9c:	f043 0001 	orr.w	r0, r3, #1
}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <_ZN3pxt8fromUIntEj>:
    if (v <= 0x3fffffff)
 8007ea4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
TNumber fromUInt(unsigned v) {
 8007ea8:	b508      	push	{r3, lr}
    if (v <= 0x3fffffff)
 8007eaa:	d203      	bcs.n	8007eb4 <_ZN3pxt8fromUIntEj+0x10>
        return TAG_NUMBER(v);
 8007eac:	0040      	lsls	r0, r0, #1
 8007eae:	f040 0001 	orr.w	r0, r0, #1
}
 8007eb2:	bd08      	pop	{r3, pc}
    return fromDouble(v);
 8007eb4:	f7fa fbaa 	bl	800260c <__aeabi_ui2d>
}
 8007eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 8007ebc:	f7ff bf24 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>

08007ec0 <_ZN3pxt8fromBoolEb>:
    if (v)
 8007ec0:	2800      	cmp	r0, #0
}
 8007ec2:	bf14      	ite	ne
 8007ec4:	2042      	movne	r0, #66	; 0x42
 8007ec6:	200a      	moveq	r0, #10
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop

08007ecc <_ZN5Math_6randomEv>:
TNumber random() {
 8007ecc:	b508      	push	{r3, lr}
    return fromDouble(randomDouble());
 8007ece:	f7ff f9e7 	bl	80072a0 <_ZN5Math_12randomDoubleEv>
}
 8007ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(randomDouble());
 8007ed6:	f7ff bf17 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8007eda:	bf00      	nop

08007edc <_ZN5Math_4imulEii>:
}
 8007edc:	fb01 f000 	mul.w	r0, r1, r0
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop

08007ee4 <_ZN5Math_4idivEii>:
}
 8007ee4:	fb90 f0f1 	sdiv	r0, r0, r1
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop

08007eec <_ZN6Array_2mkEv>:
RefCollection *mk() {
 8007eec:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefCollection);
 8007eee:	200c      	movs	r0, #12
 8007ef0:	f001 f9f2 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	b108      	cbz	r0, 8007efc <_ZN6Array_2mkEv+0x10>
 8007ef8:	f001 fdbe 	bl	8009a78 <_ZN3pxt13RefCollectionC1Ev>
}
 8007efc:	4620      	mov	r0, r4
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <_ZN6Array_6lengthEPN3pxt13RefCollectionE>:
}
 8007f00:	8900      	ldrh	r0, [r0, #8]
 8007f02:	4770      	bx	lr

08007f04 <_ZN6Array_9setLengthEPN3pxt13RefCollectionEi>:
    static void scan(RefCollection *coll);
    static unsigned gcsize(RefCollection *coll);
    static void print(RefCollection *coll);

    unsigned length() { return head.getLength(); }
    void setLength(unsigned newLength) { head.setLength(newLength); }
 8007f04:	3004      	adds	r0, #4
 8007f06:	f001 bd27 	b.w	8009958 <_ZN3pxt7Segment9setLengthEj>
 8007f0a:	bf00      	nop

08007f0c <_ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
void push(RefCollection *c, TValue x) {
 8007f0c:	4603      	mov	r3, r0
    void push(TValue value) { set(length, value); }
 8007f0e:	460a      	mov	r2, r1
 8007f10:	3004      	adds	r0, #4
 8007f12:	8919      	ldrh	r1, [r3, #8]
 8007f14:	f001 bd00 	b.w	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08007f18 <_ZN6Array_3popEPN3pxt13RefCollectionE>:
    return c->head.pop();
 8007f18:	3004      	adds	r0, #4
 8007f1a:	f001 bd2d 	b.w	8009978 <_ZN3pxt7Segment3popEv>
 8007f1e:	bf00      	nop

08007f20 <_ZN6Array_5getAtEPN3pxt13RefCollectionEi>:
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8007f20:	8903      	ldrh	r3, [r0, #8]
    return c->head.get(x);
 8007f22:	6842      	ldr	r2, [r0, #4]
 8007f24:	4299      	cmp	r1, r3
 8007f26:	bf34      	ite	cc
 8007f28:	f852 0021 	ldrcc.w	r0, [r2, r1, lsl #2]
 8007f2c:	2000      	movcs	r0, #0
}
 8007f2e:	4770      	bx	lr

08007f30 <_ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.set(x, y);
 8007f30:	3004      	adds	r0, #4
 8007f32:	f001 bcf1 	b.w	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 8007f36:	bf00      	nop

08007f38 <_ZN6Array_8removeAtEPN3pxt13RefCollectionEi>:
    return c->head.remove(x);
 8007f38:	3004      	adds	r0, #4
 8007f3a:	f001 bd2b 	b.w	8009994 <_ZN3pxt7Segment6removeEj>
 8007f3e:	bf00      	nop

08007f40 <_ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.insert(x, value);
 8007f40:	3004      	adds	r0, #4
 8007f42:	f001 bd4b 	b.w	80099dc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>
 8007f46:	bf00      	nop

08007f48 <_ZN3pxt11programSizeEv>:
    return bytecode[17] * 8;
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <_ZN3pxt11programSizeEv+0xc>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 8007f4e:	00c0      	lsls	r0, r0, #3
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	20001034 	.word	0x20001034

08007f58 <_ZN3pxt9getConfigEii>:
    cfgData = *(int **)&bytecode[18];
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <_ZN3pxt9getConfigEii+0x34>)
int getConfig(int key, int defl) {
 8007f5a:	b410      	push	{r4}
    cfgData = *(int **)&bytecode[18];
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        if (cfgData[i] == key)
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	d010      	beq.n	8007f88 <_ZN3pxt9getConfigEii+0x30>
        if (cfgData[i] == 0)
 8007f66:	b163      	cbz	r3, 8007f82 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e000      	b.n	8007f6e <_ZN3pxt9getConfigEii+0x16>
        if (cfgData[i] == 0)
 8007f6c:	b14a      	cbz	r2, 8007f82 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 8007f6e:	3302      	adds	r3, #2
        if (cfgData[i] == key)
 8007f70:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8007f74:	4282      	cmp	r2, r0
 8007f76:	d1f9      	bne.n	8007f6c <_ZN3pxt9getConfigEii+0x14>
 8007f78:	3301      	adds	r3, #1
 8007f7a:	009b      	lsls	r3, r3, #2
            return cfgData[i + 1];
 8007f7c:	58e0      	ldr	r0, [r4, r3]
}
 8007f7e:	bc10      	pop	{r4}
 8007f80:	4770      	bx	lr
            return defl;
 8007f82:	4608      	mov	r0, r1
}
 8007f84:	bc10      	pop	{r4}
 8007f86:	4770      	bx	lr
        if (cfgData[i] == key)
 8007f88:	2304      	movs	r3, #4
 8007f8a:	e7f7      	b.n	8007f7c <_ZN3pxt9getConfigEii+0x24>
 8007f8c:	20001034 	.word	0x20001034

08007f90 <_ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE>:
}
 8007f90:	6840      	ldr	r0, [r0, #4]
 8007f92:	4770      	bx	lr

08007f94 <_ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE>:
    r->v = v;
 8007f94:	6041      	str	r1, [r0, #4]
}
 8007f96:	4770      	bx	lr

08007f98 <_ZN5pxtrt8mklocRefEv>:
RefRefLocal *mklocRef() {
 8007f98:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefRefLocal);
 8007f9a:	2008      	movs	r0, #8
 8007f9c:	f001 f99c 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	b108      	cbz	r0, 8007fa8 <_ZN5pxtrt8mklocRefEv+0x10>
 8007fa4:	f001 fd70 	bl	8009a88 <_ZN3pxt11RefRefLocalC1Ev>
}
 8007fa8:	4620      	mov	r0, r4
 8007faa:	bd10      	pop	{r4, pc}

08007fac <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE>:
RefAction *stclo(RefAction *a, int idx, TValue v) {
 8007fac:	b570      	push	{r4, r5, r6, lr}

    RefAction();

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
 8007fae:	1e0c      	subs	r4, r1, #0
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	4616      	mov	r6, r2
 8007fb4:	db0e      	blt.n	8007fd4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 8007fb6:	8883      	ldrh	r3, [r0, #4]
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	da0b      	bge.n	8007fd4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 8007fbc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    if (!cond)
 8007fc0:	68e3      	ldr	r3, [r4, #12]
 8007fc2:	b123      	cbz	r3, 8007fce <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x22>
        error(code, subcode);
 8007fc4:	210b      	movs	r1, #11
 8007fc6:	f240 3086 	movw	r0, #902	; 0x386
 8007fca:	f001 fda3 	bl	8009b14 <_ZN3pxt5errorENS_9PXT_PANICEi>
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
        fields[idx] = v;
 8007fce:	60e6      	str	r6, [r4, #12]
}
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
        error(code, subcode);
 8007fd4:	210a      	movs	r1, #10
 8007fd6:	f240 3086 	movw	r0, #902	; 0x386
 8007fda:	f001 fd9b 	bl	8009b14 <_ZN3pxt5errorENS_9PXT_PANICEi>
 8007fde:	e7ed      	b.n	8007fbc <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x10>

08007fe0 <_ZN5pxtrt5panicEi>:
    target_panic(code);
 8007fe0:	f7f8 bcb6 	b.w	8000950 <target_panic>

08007fe4 <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE>:
    if (!s || s->length == 0)
 8007fe4:	b118      	cbz	r0, 8007fee <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE+0xa>
 8007fe6:	8883      	ldrh	r3, [r0, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf08      	it	eq
 8007fec:	2000      	moveq	r0, #0
}
 8007fee:	4770      	bx	lr

08007ff0 <_ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE>:
}
 8007ff0:	3000      	adds	r0, #0
 8007ff2:	bf18      	it	ne
 8007ff4:	2001      	movne	r0, #1
 8007ff6:	4770      	bx	lr

08007ff8 <_ZN5pxtrt5mkMapEv>:
RefMap *mkMap() {
 8007ff8:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefMap);
 8007ffa:	2014      	movs	r0, #20
 8007ffc:	f001 f96c 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8008000:	4604      	mov	r4, r0
 8008002:	b108      	cbz	r0, 8008008 <_ZN5pxtrt5mkMapEv+0x10>
 8008004:	f001 fd48 	bl	8009a98 <_ZN3pxt6RefMapC1Ev>
}
 8008008:	4620      	mov	r0, r4
 800800a:	bd10      	pop	{r4, pc}

0800800c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>:
TValue mapGetByString(RefMap *map, String key) {
 800800c:	b510      	push	{r4, lr}
 800800e:	4604      	mov	r4, r0
    int i = map->findIdx(key);
 8008010:	f001 fd4c 	bl	8009aac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 8008014:	2800      	cmp	r0, #0
 8008016:	db06      	blt.n	8008026 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8008018:	8a23      	ldrh	r3, [r4, #16]
    TValue r = incr(map->values.get(i));
 800801a:	68e2      	ldr	r2, [r4, #12]
 800801c:	4298      	cmp	r0, r3
 800801e:	d202      	bcs.n	8008026 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
 8008020:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
}
 8008024:	bd10      	pop	{r4, pc}
        return 0;
 8008026:	2000      	movs	r0, #0
}
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop

0800802c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE>:
int lookupMapKey(String key) {
 800802c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    auto arr = *(uintptr_t **)&bytecode[22];
 8008030:	4b1f      	ldr	r3, [pc, #124]	; (80080b0 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x84>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8008036:	e9d7 3200 	ldrd	r3, r2, [r7]
 800803a:	4282      	cmp	r2, r0
    auto r = len - 1;
 800803c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    auto len = *arr++;
 8008040:	f107 0704 	add.w	r7, r7, #4
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8008044:	d806      	bhi.n	8008054 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x28>
 8008046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800804a:	3b01      	subs	r3, #1
 800804c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008050:	4283      	cmp	r3, r0
 8008052:	d21e      	bcs.n	8008092 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x66>
 8008054:	2600      	movs	r6, #0
 8008056:	4680      	mov	r8, r0
    int compareResult = strcmp(a->data, b->data);
 8008058:	f100 0906 	add.w	r9, r0, #6
 800805c:	e003      	b.n	8008066 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    else if (compareResult > 0)
 800805e:	d015      	beq.n	800808c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                r = m - 1;
 8008060:	1e65      	subs	r5, r4, #1
        while (l <= r) {
 8008062:	42ae      	cmp	r6, r5
 8008064:	d80f      	bhi.n	8008086 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5a>
            auto m = (l + r) >> 1;
 8008066:	1974      	adds	r4, r6, r5
 8008068:	0864      	lsrs	r4, r4, #1
            auto cmp = String_::compare((String)arr[m], key);
 800806a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    if (a == b)
 800806e:	4543      	cmp	r3, r8
    int compareResult = strcmp(a->data, b->data);
 8008070:	f103 0006 	add.w	r0, r3, #6
    if (a == b)
 8008074:	d00a      	beq.n	800808c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
    int compareResult = strcmp(a->data, b->data);
 8008076:	4649      	mov	r1, r9
 8008078:	f7fb fd60 	bl	8003b3c <strcmp>
    if (compareResult < 0)
 800807c:	2800      	cmp	r0, #0
 800807e:	daee      	bge.n	800805e <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x32>
                l = m + 1;
 8008080:	1c66      	adds	r6, r4, #1
        while (l <= r) {
 8008082:	42ae      	cmp	r6, r5
 8008084:	d9ef      	bls.n	8008066 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    return 0;
 8008086:	2000      	movs	r0, #0
}
 8008088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return m;
 800808c:	4620      	mov	r0, r4
}
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    auto l = 0U;
 8008092:	2300      	movs	r3, #0
            auto m = (l + r) >> 1;
 8008094:	195c      	adds	r4, r3, r5
 8008096:	0864      	lsrs	r4, r4, #1
            if (arr[m] == ikey)
 8008098:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 800809c:	4282      	cmp	r2, r0
 800809e:	d0f5      	beq.n	800808c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                l = m + 1;
 80080a0:	bf34      	ite	cc
 80080a2:	1c63      	addcc	r3, r4, #1
                r = m - 1;
 80080a4:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
        while (l <= r) {
 80080a8:	429d      	cmp	r5, r3
 80080aa:	d2f3      	bcs.n	8008094 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x68>
    return 0;
 80080ac:	2000      	movs	r0, #0
 80080ae:	e7eb      	b.n	8008088 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5c>
 80080b0:	20001034 	.word	0x20001034

080080b4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj>:
    auto arr = *(String **)&bytecode[22];
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj+0x10>)
    auto r = mapGetByString(map, arr[key + 1]);
 80080b6:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 80080b8:	681b      	ldr	r3, [r3, #0]
    auto r = mapGetByString(map, arr[key + 1]);
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80080c0:	f7ff bfa4 	b.w	800800c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>
 80080c4:	20001034 	.word	0x20001034

080080c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>:
void mapSetByString(RefMap *map, String key, TValue val) {
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	4604      	mov	r4, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	4616      	mov	r6, r2
    int i = map->findIdx(key);
 80080d0:	f001 fcec 	bl	8009aac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 80080d4:	1e01      	subs	r1, r0, #0
 80080d6:	f104 050c 	add.w	r5, r4, #12
 80080da:	db05      	blt.n	80080e8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE+0x20>
        map->values.set(i, val);
 80080dc:	4632      	mov	r2, r6
 80080de:	4628      	mov	r0, r5
}
 80080e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        map->values.set(i, val);
 80080e4:	f001 bc18 	b.w	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
    void push(TValue value) { set(length, value); }
 80080e8:	463a      	mov	r2, r7
 80080ea:	8921      	ldrh	r1, [r4, #8]
 80080ec:	1d20      	adds	r0, r4, #4
 80080ee:	f001 fc13 	bl	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 80080f2:	4632      	mov	r2, r6
 80080f4:	8a21      	ldrh	r1, [r4, #16]
 80080f6:	4628      	mov	r0, r5
}
 80080f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080fc:	f001 bc0c 	b.w	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08008100 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE>:
    auto arr = *(String **)&bytecode[22];
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE+0x10>)
    mapSetByString(map, arr[key + 1], val);
 8008102:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 8008104:	681b      	ldr	r3, [r3, #0]
    mapSetByString(map, arr[key + 1], val);
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800810c:	f7ff bfdc 	b.w	80080c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>
 8008110:	20001034 	.word	0x20001034

08008114 <_ZN5pxtrt13getGlobalsPtrEv>:
    return globals;
 8008114:	4b01      	ldr	r3, [pc, #4]	; (800811c <_ZN5pxtrt13getGlobalsPtrEv+0x8>)
}
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20001030 	.word	0x20001030

08008120 <_ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE>:
}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008124:	0782      	lsls	r2, r0, #30
ValType valType(TValue v) {
 8008126:	b508      	push	{r3, lr}
 8008128:	d108      	bne.n	800813c <_ZN3pxt7valTypeEPNS_12TValueStructE+0x18>
 800812a:	b130      	cbz	r0, 800813a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 800812c:	6803      	ldr	r3, [r0, #0]
 800812e:	f023 0301 	bic.w	r3, r3, #1
        if (vt->magic == VTABLE_MAGIC)
 8008132:	78da      	ldrb	r2, [r3, #3]
 8008134:	2af9      	cmp	r2, #249	; 0xf9
 8008136:	d113      	bne.n	8008160 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
            return vt->objectType;
 8008138:	7898      	ldrb	r0, [r3, #2]
}
 800813a:	bd08      	pop	{r3, pc}
        if (!v)
 800813c:	2800      	cmp	r0, #0
 800813e:	d0fc      	beq.n	800813a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
        if (isNumber(v) || v == TAG_NAN)
 8008140:	07c3      	lsls	r3, r0, #31
 8008142:	d40f      	bmi.n	8008164 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
 8008144:	280e      	cmp	r0, #14
 8008146:	d00d      	beq.n	8008164 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
        if (v == TAG_TRUE || v == TAG_FALSE)
 8008148:	2842      	cmp	r0, #66	; 0x42
 800814a:	d00d      	beq.n	8008168 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
 800814c:	280a      	cmp	r0, #10
 800814e:	d00b      	beq.n	8008168 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
        else if (v == TAG_NULL)
 8008150:	2806      	cmp	r0, #6
 8008152:	d005      	beq.n	8008160 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
    target_panic(800 + subcode);
 8008154:	f240 3021 	movw	r0, #801	; 0x321
 8008158:	f7f8 fbfa 	bl	8000950 <target_panic>
 800815c:	2004      	movs	r0, #4
}
 800815e:	bd08      	pop	{r3, pc}
            return ValType::Object;
 8008160:	2004      	movs	r0, #4
}
 8008162:	bd08      	pop	{r3, pc}
            return ValType::Number;
 8008164:	2002      	movs	r0, #2
}
 8008166:	bd08      	pop	{r3, pc}
            return ValType::Boolean;
 8008168:	2001      	movs	r0, #1
}
 800816a:	bd08      	pop	{r3, pc}

0800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>:
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800816c:	280e      	cmp	r0, #14
 800816e:	d026      	beq.n	80081be <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x52>
NUMBER toDouble(TNumber v) {
 8008170:	b510      	push	{r4, lr}
 8008172:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 8008174:	b968      	cbnz	r0, 8008192 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x26>
 8008176:	e018      	b.n	80081aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    ValType t = valType(v);
 8008178:	f7ff ffd4 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::Number) {
 800817c:	2802      	cmp	r0, #2
 800817e:	d019      	beq.n	80081b4 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x48>
    } else if (t == ValType::String) {
 8008180:	2803      	cmp	r0, #3
 8008182:	d112      	bne.n	80081aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
        auto tmp = String_::toNumber((String)v);
 8008184:	4620      	mov	r0, r4
 8008186:	f7ff fe15 	bl	8007db4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800818a:	280e      	cmp	r0, #14
        auto tmp = String_::toNumber((String)v);
 800818c:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800818e:	d00c      	beq.n	80081aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
 8008190:	b15c      	cbz	r4, 80081aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    return ((intptr_t)v & 3) || !v;
 8008192:	07a3      	lsls	r3, r4, #30
    return (int)toUInt(v);
 8008194:	4620      	mov	r0, r4
 8008196:	d0ef      	beq.n	8008178 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0xc>
 8008198:	f000 f818 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        return toInt(v);
 800819c:	f7fa fa46 	bl	800262c <__aeabi_i2d>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
}
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	bd10      	pop	{r4, pc}
        return NAN;
 80081aa:	2200      	movs	r2, #0
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	bd10      	pop	{r4, pc}
        return p->num;
 80081b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
}
 80081b8:	4610      	mov	r0, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	bd10      	pop	{r4, pc}
        return NAN;
 80081be:	2200      	movs	r2, #0
 80081c0:	4b01      	ldr	r3, [pc, #4]	; (80081c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	4770      	bx	lr
 80081c8:	7ff80000 	.word	0x7ff80000

080081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>:
    if (isNumber(v))
 80081cc:	07c1      	lsls	r1, r0, #31
unsigned toUInt(TNumber v) {
 80081ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d0:	4603      	mov	r3, r0
    if (isNumber(v))
 80081d2:	d44f      	bmi.n	8008274 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa8>
    if (isSpecial(v)) {
 80081d4:	0782      	lsls	r2, r0, #30
 80081d6:	d504      	bpl.n	80081e2 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x16>
        if ((intptr_t)v >> 6)
 80081d8:	099b      	lsrs	r3, r3, #6
 80081da:	bf14      	ite	ne
 80081dc:	2001      	movne	r0, #1
 80081de:	2000      	moveq	r0, #0
}
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!v)
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d044      	beq.n	8008270 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    NUMBER num = toDouble(v);
 80081e6:	f7ff ffc1 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80081ea:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80081ee:	460e      	mov	r6, r1
 80081f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081f4:	4629      	mov	r1, r5
 80081f6:	4b25      	ldr	r3, [pc, #148]	; (800828c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 80081f8:	4604      	mov	r4, r0
 80081fa:	f04f 0701 	mov.w	r7, #1
 80081fe:	f7fa feaf 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008202:	b940      	cbnz	r0, 8008216 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820c:	4b1f      	ldr	r3, [pc, #124]	; (800828c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 800820e:	f7fa fe8d 	bl	8002f2c <__wrap___aeabi_dcmpgt>
 8008212:	b900      	cbnz	r0, 8008216 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8008214:	4607      	mov	r7, r0
    if (!isnormal(num))
 8008216:	f017 0fff 	tst.w	r7, #255	; 0xff
 800821a:	d129      	bne.n	8008270 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	2200      	movs	r2, #0
 8008222:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008226:	f04f 0701 	mov.w	r7, #1
 800822a:	f7fa fe99 	bl	8002f60 <__wrap___aeabi_dcmpun>
 800822e:	b940      	cbnz	r0, 8008242 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	2200      	movs	r2, #0
 8008236:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800823a:	f7fa fe2d 	bl	8002e98 <__wrap___aeabi_dcmplt>
 800823e:	b900      	cbnz	r0, 8008242 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8008240:	4607      	mov	r7, r0
 8008242:	f017 0fff 	tst.w	r7, #255	; 0xff
 8008246:	d113      	bne.n	8008270 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    double rem = fmod(trunc(num), 4294967296.0);
 8008248:	4620      	mov	r0, r4
 800824a:	4631      	mov	r1, r6
 800824c:	f7fb fa7c 	bl	8003748 <trunc>
 8008250:	2200      	movs	r2, #0
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8008254:	f7fb fb46 	bl	80038e4 <fmod>
    if (rem < 0.0)
 8008258:	2200      	movs	r2, #0
 800825a:	2300      	movs	r3, #0
    double rem = fmod(trunc(num), 4294967296.0);
 800825c:	4604      	mov	r4, r0
 800825e:	460d      	mov	r5, r1
    if (rem < 0.0)
 8008260:	f7fa fe1a 	bl	8002e98 <__wrap___aeabi_dcmplt>
 8008264:	b940      	cbnz	r0, 8008278 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xac>
    return (unsigned)rem;
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7fa fea9 	bl	8002fc0 <__wrap___aeabi_d2uiz>
}
 800826e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008270:	2000      	movs	r0, #0
}
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (intptr_t)n >> 1;
 8008274:	1040      	asrs	r0, r0, #1
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rem += 4294967296.0;
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	2200      	movs	r2, #0
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8008280:	f7fa fdc0 	bl	8002e04 <__wrap___aeabi_dadd>
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	e7ed      	b.n	8008266 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x9a>
 800828a:	bf00      	nop
 800828c:	7fefffff 	.word	0x7fefffff
 8008290:	41f00000 	.word	0x41f00000

08008294 <_ZN3pxt5toIntEPNS_12TValueStructE>:
    return (int)toUInt(v);
 8008294:	f7ff bf9a 	b.w	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>

08008298 <_ZN6numops4lslsEPN3pxt12TValueStructES2_>:
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 800829c:	f7ff ff96 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80082a0:	4604      	mov	r4, r0
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff ff92 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80082a8:	fa04 f000 	lsl.w	r0, r4, r0
    return (v << 1) >> 1 == v;
 80082ac:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80082ae:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80082b2:	d003      	beq.n	80082bc <_ZN6numops4lslsEPN3pxt12TValueStructES2_+0x24>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80082b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b8:	f7ff bdcc 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80082bc:	f043 0001 	orr.w	r0, r3, #1
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80082c0:	bd38      	pop	{r3, r4, r5, pc}
 80082c2:	bf00      	nop

080082c4 <_ZN6numops4asrsEPN3pxt12TValueStructES2_>:
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	460d      	mov	r5, r1
    return (int)toUInt(v);
 80082c8:	f7ff ff80 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80082cc:	4604      	mov	r4, r0
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7ff ff7c 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80082d4:	fa44 f000 	asr.w	r0, r4, r0
 80082d8:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80082da:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80082de:	d003      	beq.n	80082e8 <_ZN6numops4asrsEPN3pxt12TValueStructES2_+0x24>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80082e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e4:	f7ff bdb6 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80082e8:	f043 0001 	orr.w	r0, r3, #1
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop

080082f0 <_ZN6numops4eorsEPN3pxt12TValueStructES2_>:
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	460d      	mov	r5, r1
    return (int)toUInt(v);
 80082f4:	f7ff ff6a 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80082f8:	4604      	mov	r4, r0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7ff ff66 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8008300:	4060      	eors	r0, r4
 8008302:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8008304:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008308:	d003      	beq.n	8008312 <_ZN6numops4eorsEPN3pxt12TValueStructES2_+0x22>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 800830a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830e:	f7ff bda1 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008312:	f043 0001 	orr.w	r0, r3, #1
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8008316:	bd38      	pop	{r3, r4, r5, pc}

08008318 <_ZN6numops4orrsEPN3pxt12TValueStructES2_>:
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 800831c:	f7ff ff56 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008320:	4604      	mov	r4, r0
 8008322:	4628      	mov	r0, r5
 8008324:	f7ff ff52 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008328:	4320      	orrs	r0, r4
 800832a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800832c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008330:	d003      	beq.n	800833a <_ZN6numops4orrsEPN3pxt12TValueStructES2_+0x22>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008336:	f7ff bd8d 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 800833a:	f043 0001 	orr.w	r0, r3, #1
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 800833e:	bd38      	pop	{r3, r4, r5, pc}

08008340 <_ZN6numops4bnotEPN3pxt12TValueStructE>:
TNumber bnot(TNumber a) {
 8008340:	b508      	push	{r3, lr}
    return (int)toUInt(v);
 8008342:	f7ff ff43 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    return fromInt(~toInt(a));
 8008346:	43c0      	mvns	r0, r0
 8008348:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800834a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 800834e:	d003      	beq.n	8008358 <_ZN6numops4bnotEPN3pxt12TValueStructE+0x18>
}
 8008350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008354:	f7ff bd7e 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008358:	f043 0001 	orr.w	r0, r3, #1
}
 800835c:	bd08      	pop	{r3, pc}
 800835e:	bf00      	nop

08008360 <_ZN6numops4andsEPN3pxt12TValueStructES2_>:
TNumber ands(TNumber a, TNumber b) {
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8008364:	f7ff ff32 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008368:	4604      	mov	r4, r0
 800836a:	4628      	mov	r0, r5
 800836c:	f7ff ff2e 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    BITOP(&)
 8008370:	4020      	ands	r0, r4
 8008372:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8008374:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008378:	d003      	beq.n	8008382 <_ZN6numops4andsEPN3pxt12TValueStructES2_+0x22>
}
 800837a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800837e:	f7ff bd69 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008382:	f043 0001 	orr.w	r0, r3, #1
}
 8008386:	bd38      	pop	{r3, r4, r5, pc}

08008388 <_ZN6numops4lsrsEPN3pxt12TValueStructES2_>:
TNumber lsrs(TNumber a, TNumber b) {
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	460d      	mov	r5, r1
    return fromUInt(toUInt(a) >> toUInt(b));
 800838c:	f7ff ff1e 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008390:	4604      	mov	r4, r0
 8008392:	4628      	mov	r0, r5
 8008394:	f7ff ff1a 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008398:	fa24 f000 	lsr.w	r0, r4, r0
    if (v <= 0x3fffffff)
 800839c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083a0:	d203      	bcs.n	80083aa <_ZN6numops4lsrsEPN3pxt12TValueStructES2_+0x22>
        return TAG_NUMBER(v);
 80083a2:	0040      	lsls	r0, r0, #1
 80083a4:	f040 0001 	orr.w	r0, r0, #1
}
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
    return fromDouble(v);
 80083aa:	f7fa f92f 	bl	800260c <__aeabi_ui2d>
}
 80083ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return fromDouble(v);
 80083b2:	f7ff bca9 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80083b6:	bf00      	nop

080083b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>:
float toFloat(TNumber v) {
 80083b8:	b508      	push	{r3, lr}
    return (float)toDouble(v);
 80083ba:	f7ff fed7 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80083be:	f7fa f99f 	bl	8002700 <__aeabi_d2f>
}
 80083c2:	bd08      	pop	{r3, pc}

080083c4 <_ZN6numops4addsEPN3pxt12TValueStructES2_>:
TNumber adds(TNumber a, TNumber b){NUMOP(+)}
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	460e      	mov	r6, r1
 80083c8:	f7ff fed0 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80083cc:	4604      	mov	r4, r0
 80083ce:	4630      	mov	r0, r6
 80083d0:	460d      	mov	r5, r1
 80083d2:	f7ff fecb 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4620      	mov	r0, r4
 80083dc:	4629      	mov	r1, r5
 80083de:	f7fa fd11 	bl	8002e04 <__wrap___aeabi_dadd>
 80083e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083e6:	f7ff bc8f 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80083ea:	bf00      	nop

080083ec <_ZN6numops4subsEPN3pxt12TValueStructES2_>:
TNumber subs(TNumber a, TNumber b){NUMOP(-)}
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	460e      	mov	r6, r1
 80083f0:	f7ff febc 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80083f4:	4604      	mov	r4, r0
 80083f6:	4630      	mov	r0, r6
 80083f8:	460d      	mov	r5, r1
 80083fa:	f7ff feb7 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4620      	mov	r0, r4
 8008404:	4629      	mov	r1, r5
 8008406:	f7fa fd15 	bl	8002e34 <__wrap___aeabi_dsub>
 800840a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800840e:	f7ff bc7b 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008412:	bf00      	nop

08008414 <_ZN6numops4mulsEPN3pxt12TValueStructES2_>:
    return (intptr_t)a & (intptr_t)b & 1;
 8008414:	f001 0301 	and.w	r3, r1, #1
    if (bothNumbers(a, b)) {
 8008418:	4218      	tst	r0, r3
 800841a:	d003      	beq.n	8008424 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 800841c:	13c3      	asrs	r3, r0, #15
 800841e:	3301      	adds	r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d912      	bls.n	800844a <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x36>
TNumber muls(TNumber a, TNumber b) {
 8008424:	b5d0      	push	{r4, r6, r7, lr}
 8008426:	460c      	mov	r4, r1
    NUMOP(*)
 8008428:	f7ff fea0 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800842c:	4606      	mov	r6, r0
 800842e:	4620      	mov	r0, r4
 8008430:	460f      	mov	r7, r1
 8008432:	f7ff fe9b 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7fa fcc9 	bl	8002dd4 <__wrap___aeabi_dmul>
}
 8008442:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    NUMOP(*)
 8008446:	f7ff bc5f 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 800844a:	13cb      	asrs	r3, r1, #15
 800844c:	3301      	adds	r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d8e8      	bhi.n	8008424 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
            return fromInt((aa >> 1) * (bb >> 1));
 8008452:	1043      	asrs	r3, r0, #1
 8008454:	1048      	asrs	r0, r1, #1
 8008456:	fb00 f003 	mul.w	r0, r0, r3
    return (v << 1) >> 1 == v;
 800845a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800845c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008460:	d102      	bne.n	8008468 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x54>
        return TAG_NUMBER(v);
 8008462:	f043 0001 	orr.w	r0, r3, #1
}
 8008466:	4770      	bx	lr
 8008468:	f7ff bcf4 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>

0800846c <_ZN6numops3divEPN3pxt12TValueStructES2_>:
TNumber div(TNumber a, TNumber b){NUMOP(/)}
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	f7ff fe7c 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008474:	4604      	mov	r4, r0
 8008476:	4630      	mov	r0, r6
 8008478:	460d      	mov	r5, r1
 800847a:	f7ff fe77 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7fa fc8d 	bl	8002da4 <__wrap___aeabi_ddiv>
 800848a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800848e:	f7ff bc3b 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008492:	bf00      	nop

08008494 <_ZN6numops3modEPN3pxt12TValueStructES2_>:
TNumber mod(TNumber a, TNumber b) {
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	460c      	mov	r4, r1
    if (isNumber(a) && isNumber(b) && numValue(b))
 8008498:	07c1      	lsls	r1, r0, #31
TNumber mod(TNumber a, TNumber b) {
 800849a:	4603      	mov	r3, r0
    if (isNumber(a) && isNumber(b) && numValue(b))
 800849c:	d503      	bpl.n	80084a6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 800849e:	07e2      	lsls	r2, r4, #31
 80084a0:	d501      	bpl.n	80084a6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 80084a2:	0862      	lsrs	r2, r4, #1
 80084a4:	d111      	bne.n	80084ca <_ZN6numops3modEPN3pxt12TValueStructES2_+0x36>
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fe60 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80084ac:	4606      	mov	r6, r0
 80084ae:	4620      	mov	r0, r4
 80084b0:	460f      	mov	r7, r1
 80084b2:	f7ff fe5b 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80084b6:	460b      	mov	r3, r1
 80084b8:	4602      	mov	r2, r0
 80084ba:	4639      	mov	r1, r7
 80084bc:	4630      	mov	r0, r6
 80084be:	f7fb fa11 	bl	80038e4 <fmod>
}
 80084c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80084c6:	f7ff bc1f 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
    return (int)toUInt(v);
 80084ca:	f7ff fe7f 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80084ce:	4605      	mov	r5, r0
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7ff fe7b 	bl	80081cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        BITOP(%)
 80084d6:	fb95 f3f0 	sdiv	r3, r5, r0
 80084da:	fb03 5010 	mls	r0, r3, r0, r5
 80084de:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80084e0:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80084e4:	d003      	beq.n	80084ee <_ZN6numops3modEPN3pxt12TValueStructES2_+0x5a>
}
 80084e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084ea:	f7ff bcb3 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80084ee:	f043 0001 	orr.w	r0, r3, #1
}
 80084f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084f4 <_ZN5Math_3powEPN3pxt12TValueStructES2_>:
TNumber pow(TNumber x, TNumber y) {
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	460e      	mov	r6, r1
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 80084f8:	f7ff fe38 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80084fc:	4604      	mov	r4, r0
 80084fe:	4630      	mov	r0, r6
 8008500:	460d      	mov	r5, r1
 8008502:	f7ff fe33 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7fa fdc5 	bl	800309c <pow>
}
 8008512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8008516:	f7ff bbf7 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800851a:	bf00      	nop

0800851c <_ZN5Math_5atan2EPN3pxt12TValueStructES2_>:
TNumber atan2(TNumber y, TNumber x) {
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	460e      	mov	r6, r1
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 8008520:	f7ff fe24 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008524:	4604      	mov	r4, r0
 8008526:	4630      	mov	r0, r6
 8008528:	460d      	mov	r5, r1
 800852a:	f7ff fe1f 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7fa fe2d 	bl	8003194 <atan2>
}
 800853a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 800853e:	f7ff bbe3 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008542:	bf00      	nop

08008544 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_>:
    if (isNumber(min) && isNumber(max)) {
 8008544:	07c2      	lsls	r2, r0, #31
TNumber randomRange(TNumber min, TNumber max) {
 8008546:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854a:	460c      	mov	r4, r1
    if (isNumber(min) && isNumber(max)) {
 800854c:	d511      	bpl.n	8008572 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
 800854e:	07cb      	lsls	r3, r1, #31
 8008550:	d50f      	bpl.n	8008572 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
    return (intptr_t)n >> 1;
 8008552:	1040      	asrs	r0, r0, #1
 8008554:	104d      	asrs	r5, r1, #1
        if (mini > maxi) {
 8008556:	4285      	cmp	r5, r0
 8008558:	da44      	bge.n	80085e4 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa0>
            return fromInt(mini + getRandom(maxi - mini));
 800855a:	1b40      	subs	r0, r0, r5
 800855c:	f7ff fa42 	bl	80079e4 <_ZN3pxt9getRandomEj>
 8008560:	4428      	add	r0, r5
    return (v << 1) >> 1 == v;
 8008562:	0044      	lsls	r4, r0, #1
    if (canBeTagged(v))
 8008564:	ebb0 0f64 	cmp.w	r0, r4, asr #1
 8008568:	d03d      	beq.n	80085e6 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa2>
}
 800856a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856e:	f7ff bc71 	b.w	8007e54 <_ZN3pxt7fromIntEi.part.7>
        auto mind = toDouble(min);
 8008572:	f7ff fdfb 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008576:	4606      	mov	r6, r0
        auto maxd = toDouble(max);
 8008578:	4620      	mov	r0, r4
        auto mind = toDouble(min);
 800857a:	460f      	mov	r7, r1
        auto maxd = toDouble(max);
 800857c:	f7ff fdf6 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
        if (mind > maxd) {
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7fa fcce 	bl	8002f2c <__wrap___aeabi_dcmpgt>
 8008590:	b990      	cbnz	r0, 80085b8 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x74>
        if (maxd == mind)
 8008592:	4622      	mov	r2, r4
 8008594:	462b      	mov	r3, r5
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7fa fc63 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 800859e:	b128      	cbz	r0, 80085ac <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x68>
            return fromDouble(mind);
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
}
 80085a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind);
 80085a8:	f7ff bbae 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
        auto mind = toDouble(min);
 80085b0:	4634      	mov	r4, r6
 80085b2:	463d      	mov	r5, r7
        auto maxd = toDouble(max);
 80085b4:	4616      	mov	r6, r2
 80085b6:	461f      	mov	r7, r3
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80085b8:	f7fe fe72 	bl	80072a0 <_ZN5Math_12randomDoubleEv>
 80085bc:	4680      	mov	r8, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	4622      	mov	r2, r4
 80085c2:	462b      	mov	r3, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7fa fc34 	bl	8002e34 <__wrap___aeabi_dsub>
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	f7fa fc00 	bl	8002dd4 <__wrap___aeabi_dmul>
 80085d4:	4622      	mov	r2, r4
 80085d6:	462b      	mov	r3, r5
 80085d8:	f7fa fc14 	bl	8002e04 <__wrap___aeabi_dadd>
}
 80085dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80085e0:	f7ff bb92 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
        if (maxi == mini)
 80085e4:	d103      	bne.n	80085ee <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xaa>
        return TAG_NUMBER(v);
 80085e6:	f044 0001 	orr.w	r0, r4, #1
}
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	462b      	mov	r3, r5
 80085f0:	4605      	mov	r5, r0
 80085f2:	4618      	mov	r0, r3
 80085f4:	e7b1      	b.n	800855a <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x16>
 80085f6:	bf00      	nop

080085f8 <_ZN5Math_3logEPN3pxt12TValueStructE>:
TNumber log(TNumber x){SINGLE(log)}
 80085f8:	b508      	push	{r3, lr}
 80085fa:	f7ff fdb7 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80085fe:	f7fa fd09 	bl	8003014 <log>
 8008602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008606:	f7ff bb7f 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800860a:	bf00      	nop

0800860c <_ZN5Math_5log10EPN3pxt12TValueStructE>:
TNumber log10(TNumber x){SINGLE(log10)}
 800860c:	b508      	push	{r3, lr}
 800860e:	f7ff fdad 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008612:	f7fa fd2f 	bl	8003074 <log10>
 8008616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800861a:	f7ff bb75 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800861e:	bf00      	nop

08008620 <_ZN5Math_3tanEPN3pxt12TValueStructE>:
TNumber tan(TNumber x){SINGLE(tan)}
 8008620:	b508      	push	{r3, lr}
 8008622:	f7ff fda3 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008626:	f7fa fda7 	bl	8003178 <tan>
 800862a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800862e:	f7ff bb6b 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008632:	bf00      	nop

08008634 <_ZN5Math_3sinEPN3pxt12TValueStructE>:
TNumber sin(TNumber x){SINGLE(sin)}
 8008634:	b508      	push	{r3, lr}
 8008636:	f7ff fd99 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800863a:	f7fa fd75 	bl	8003128 <sin>
 800863e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008642:	f7ff bb61 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008646:	bf00      	nop

08008648 <_ZN5Math_3cosEPN3pxt12TValueStructE>:
TNumber cos(TNumber x){SINGLE(cos)}
 8008648:	b508      	push	{r3, lr}
 800864a:	f7ff fd8f 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800864e:	f7fa fd79 	bl	8003144 <cos>
 8008652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008656:	f7ff bb57 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800865a:	bf00      	nop

0800865c <_ZN5Math_4atanEPN3pxt12TValueStructE>:
TNumber atan(TNumber x){SINGLE(atan)}
 800865c:	b508      	push	{r3, lr}
 800865e:	f7ff fd85 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008662:	f7fa fdc1 	bl	80031e8 <atan>
 8008666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800866a:	f7ff bb4d 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 800866e:	bf00      	nop

08008670 <_ZN5Math_4asinEPN3pxt12TValueStructE>:
TNumber asin(TNumber x){SINGLE(asin)}
 8008670:	b508      	push	{r3, lr}
 8008672:	f7ff fd7b 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008676:	f7fa fe0f 	bl	8003298 <asin>
 800867a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800867e:	f7ff bb43 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008682:	bf00      	nop

08008684 <_ZN5Math_4acosEPN3pxt12TValueStructE>:
TNumber acos(TNumber x){SINGLE(acos)}
 8008684:	b508      	push	{r3, lr}
 8008686:	f7ff fd71 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800868a:	f7fa fb25 	bl	8002cd8 <acos>
 800868e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008692:	f7ff bb39 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008696:	bf00      	nop

08008698 <_ZN5Math_4sqrtEPN3pxt12TValueStructE>:
TNumber sqrt(TNumber x){SINGLE(sqrt)}
 8008698:	b508      	push	{r3, lr}
 800869a:	f7ff fd67 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800869e:	f7fa fcab 	bl	8002ff8 <sqrt>
 80086a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086a6:	f7ff bb2f 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80086aa:	bf00      	nop

080086ac <_ZN5Math_5floorEPN3pxt12TValueStructE>:
TNumber floor(TNumber x){SINGLE(floor)}
 80086ac:	b508      	push	{r3, lr}
 80086ae:	f7ff fd5d 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80086b2:	f7fb f88f 	bl	80037d4 <floor>
 80086b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086ba:	f7ff bb25 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80086be:	bf00      	nop

080086c0 <_ZN5Math_4ceilEPN3pxt12TValueStructE>:
TNumber ceil(TNumber x){SINGLE(ceil)}
 80086c0:	b508      	push	{r3, lr}
 80086c2:	f7ff fd53 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80086c6:	f7fb f8c9 	bl	800385c <ceil>
 80086ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086ce:	f7ff bb1b 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80086d2:	bf00      	nop

080086d4 <_ZN5Math_5truncEPN3pxt12TValueStructE>:
TNumber trunc(TNumber x){SINGLE(trunc)}
 80086d4:	b508      	push	{r3, lr}
 80086d6:	f7ff fd49 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80086da:	f7fb f835 	bl	8003748 <trunc>
 80086de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086e2:	f7ff bb11 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 80086e6:	bf00      	nop

080086e8 <_ZN5Math_5roundEPN3pxt12TValueStructE>:
TNumber round(TNumber x) {
 80086e8:	b508      	push	{r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 80086ea:	f7ff fd3f 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <_ZN5Math_5roundEPN3pxt12TValueStructE+0x1c>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	f7fa fb87 	bl	8002e04 <__wrap___aeabi_dadd>
 80086f6:	f7fb f86d 	bl	80037d4 <floor>
}
 80086fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 80086fe:	f7ff bb03 	b.w	8007d08 <_ZN3pxt10fromDoubleEd>
 8008702:	bf00      	nop
 8008704:	3fe00000 	.word	0x3fe00000

08008708 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8008708:	280e      	cmp	r0, #14
 800870a:	d00b      	beq.n	8008724 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
 800870c:	290e      	cmp	r1, #14
 800870e:	d009      	beq.n	8008724 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
    if (a == b)
 8008710:	4288      	cmp	r0, r1
bool eqq_bool(TValue a, TValue b) {
 8008712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008714:	4604      	mov	r4, r0
    if (a == b)
 8008716:	d007      	beq.n	8008728 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x20>
    return (intptr_t)a & (intptr_t)b & 1;
 8008718:	f001 0201 	and.w	r2, r1, #1
    if (bothNumbers(a, b))
 800871c:	4210      	tst	r0, r2
 800871e:	d005      	beq.n	800872c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x24>
        return false;
 8008720:	2000      	movs	r0, #0
}
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8008724:	2000      	movs	r0, #0
}
 8008726:	4770      	bx	lr
        return true;
 8008728:	2001      	movs	r0, #1
}
 800872a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872c:	460d      	mov	r5, r1
    ValType ta = valType(a);
 800872e:	f7ff fcf9 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008732:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff fcf5 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta != tb)
 800873a:	4286      	cmp	r6, r0
 800873c:	d1f0      	bne.n	8008720 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if ((aa | bb) & 3)
 800873e:	ea44 0305 	orr.w	r3, r4, r5
 8008742:	079b      	lsls	r3, r3, #30
 8008744:	d1ec      	bne.n	8008720 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if (ta == ValType::String)
 8008746:	2e03      	cmp	r6, #3
 8008748:	d015      	beq.n	8008776 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6e>
    else if (ta == ValType::Number)
 800874a:	2e02      	cmp	r6, #2
 800874c:	d1e8      	bne.n	8008720 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
        return toDouble(a) == toDouble(b);
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff fd0c 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008754:	4606      	mov	r6, r0
 8008756:	4628      	mov	r0, r5
 8008758:	460f      	mov	r7, r1
 800875a:	f7ff fd07 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800875e:	460b      	mov	r3, r1
 8008760:	4602      	mov	r2, r0
 8008762:	4639      	mov	r1, r7
 8008764:	4630      	mov	r0, r6
 8008766:	f7fa fb7d 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 800876a:	f04f 0301 	mov.w	r3, #1
 800876e:	b900      	cbnz	r0, 8008772 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6a>
 8008770:	4603      	mov	r3, r0
 8008772:	b2d8      	uxtb	r0, r3
}
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int compareResult = strcmp(a->data, b->data);
 8008776:	1da9      	adds	r1, r5, #6
 8008778:	1da0      	adds	r0, r4, #6
 800877a:	f7fb f9df 	bl	8003b3c <strcmp>
 800877e:	fab0 f080 	clz	r0, r0
 8008782:	0940      	lsrs	r0, r0, #5
}
 8008784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008786:	bf00      	nop

08008788 <_ZN6numops3eqqEPN3pxt12TValueStructES2_>:
TNumber eqq(TNumber a, TNumber b) {
 8008788:	b508      	push	{r3, lr}
    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 800878a:	f7ff ffbd 	bl	8008708 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 800878e:	2800      	cmp	r0, #0
}
 8008790:	bf14      	ite	ne
 8008792:	2042      	movne	r0, #66	; 0x42
 8008794:	200a      	moveq	r0, #10
 8008796:	bd08      	pop	{r3, pc}

08008798 <_ZN6numops4neqqEPN3pxt12TValueStructES2_>:
TNumber neqq(TNumber a, TNumber b) {
 8008798:	b508      	push	{r3, lr}
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 800879a:	f7ff ffb5 	bl	8008708 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 800879e:	2800      	cmp	r0, #0
}
 80087a0:	bf0c      	ite	eq
 80087a2:	2042      	moveq	r0, #66	; 0x42
 80087a4:	200a      	movne	r0, #10
 80087a6:	bd08      	pop	{r3, pc}

080087a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 80087a8:	280e      	cmp	r0, #14
 80087aa:	d01a      	beq.n	80087e2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3a>
 80087ac:	290e      	cmp	r1, #14
bool eq_bool(TValue a, TValue b) {
 80087ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b0:	460c      	mov	r4, r1
    if (a == TAG_NAN || b == TAG_NAN)
 80087b2:	d014      	beq.n	80087de <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 80087b4:	2806      	cmp	r0, #6
 80087b6:	4605      	mov	r5, r0
 80087b8:	d015      	beq.n	80087e6 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3e>
    if (v == TAG_TRUE)
 80087ba:	2842      	cmp	r0, #66	; 0x42
 80087bc:	d03f      	beq.n	800883e <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x96>
    if (v == TAG_FALSE)
 80087be:	280a      	cmp	r0, #10
 80087c0:	d01c      	beq.n	80087fc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x54>
    if (v == TAG_NULL)
 80087c2:	2906      	cmp	r1, #6
 80087c4:	4603      	mov	r3, r0
 80087c6:	f000 8085 	beq.w	80088d4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x12c>
    if (v == TAG_TRUE)
 80087ca:	2c42      	cmp	r4, #66	; 0x42
 80087cc:	d011      	beq.n	80087f2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4a>
    if (v == TAG_FALSE)
 80087ce:	2c0a      	cmp	r4, #10
 80087d0:	d037      	beq.n	8008842 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9a>
    if (eqFixup(a) == eqFixup(b))
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d010      	beq.n	80087f8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
 80087d6:	f004 0301 	and.w	r3, r4, #1
    if (bothNumbers(a, b))
 80087da:	421d      	tst	r5, r3
 80087dc:	d011      	beq.n	8008802 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return false;
 80087de:	2000      	movs	r0, #0
}
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 80087e2:	2000      	movs	r0, #0
}
 80087e4:	4770      	bx	lr
    if (v == TAG_NULL)
 80087e6:	2906      	cmp	r1, #6
 80087e8:	d006      	beq.n	80087f8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    if (v == TAG_TRUE)
 80087ea:	2c42      	cmp	r4, #66	; 0x42
        return TAG_UNDEFINED;
 80087ec:	f04f 0300 	mov.w	r3, #0
    if (v == TAG_TRUE)
 80087f0:	d1ed      	bne.n	80087ce <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x26>
        return TAG_NUMBER(1);
 80087f2:	2203      	movs	r2, #3
    if (eqFixup(a) == eqFixup(b))
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d104      	bne.n	8008802 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return true;
 80087f8:	2001      	movs	r0, #1
}
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(0);
 80087fc:	2301      	movs	r3, #1
    if (v == TAG_NULL)
 80087fe:	2c06      	cmp	r4, #6
 8008800:	d1e3      	bne.n	80087ca <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x22>
    ValType ta = valType(a);
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff fc8e 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008808:	4606      	mov	r6, r0
    ValType tb = valType(b);
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fc8a 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if ((ta == ValType::String && tb == ValType::Number) ||
 8008810:	2e03      	cmp	r6, #3
 8008812:	d022      	beq.n	800885a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb2>
 8008814:	2803      	cmp	r0, #3
 8008816:	d02f      	beq.n	8008878 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xd0>
    if (ta == ValType::Boolean) {
 8008818:	2e01      	cmp	r6, #1
 800881a:	d014      	beq.n	8008846 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9e>
    if (tb == ValType::Boolean) {
 800881c:	2801      	cmp	r0, #1
 800881e:	d021      	beq.n	8008864 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xbc>
    if (ta != tb)
 8008820:	4286      	cmp	r6, r0
 8008822:	d1dc      	bne.n	80087de <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if ((aa | bb) & 3)
 8008824:	ea45 0304 	orr.w	r3, r5, r4
 8008828:	079b      	lsls	r3, r3, #30
 800882a:	d1d8      	bne.n	80087de <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (ta == ValType::String)
 800882c:	2803      	cmp	r0, #3
 800882e:	d047      	beq.n	80088c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x118>
    else if (ta == ValType::Number)
 8008830:	2802      	cmp	r0, #2
 8008832:	d028      	beq.n	8008886 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
        return a == b;
 8008834:	1b60      	subs	r0, r4, r5
 8008836:	fab0 f080 	clz	r0, r0
 800883a:	0940      	lsrs	r0, r0, #5
}
 800883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(1);
 800883e:	2303      	movs	r3, #3
 8008840:	e7dd      	b.n	80087fe <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>
        return TAG_NUMBER(0);
 8008842:	2201      	movs	r2, #1
 8008844:	e7d6      	b.n	80087f4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>
    if (v == TAG_NULL)
 8008846:	2d06      	cmp	r5, #6
 8008848:	d033      	beq.n	80088b2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x10a>
    if (v == TAG_TRUE)
 800884a:	2d42      	cmp	r5, #66	; 0x42
        ta = ValType::Number;
 800884c:	f04f 0602 	mov.w	r6, #2
    if (v == TAG_TRUE)
 8008850:	d034      	beq.n	80088bc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x114>
    if (v == TAG_FALSE)
 8008852:	2d0a      	cmp	r5, #10
 8008854:	d1e2      	bne.n	800881c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(0);
 8008856:	2501      	movs	r5, #1
 8008858:	e7e0      	b.n	800881c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if ((ta == ValType::String && tb == ValType::Number) ||
 800885a:	2802      	cmp	r0, #2
 800885c:	d013      	beq.n	8008886 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
 800885e:	2803      	cmp	r0, #3
 8008860:	d1dc      	bne.n	800881c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
 8008862:	e7df      	b.n	8008824 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x7c>
    if (v == TAG_NULL)
 8008864:	2c06      	cmp	r4, #6
        tb = ValType::Number;
 8008866:	f04f 0002 	mov.w	r0, #2
    if (v == TAG_NULL)
 800886a:	d020      	beq.n	80088ae <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x106>
    if (v == TAG_TRUE)
 800886c:	2c42      	cmp	r4, #66	; 0x42
 800886e:	d023      	beq.n	80088b8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x110>
    if (v == TAG_FALSE)
 8008870:	2c0a      	cmp	r4, #10
 8008872:	d1d5      	bne.n	8008820 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        return TAG_NUMBER(0);
 8008874:	2401      	movs	r4, #1
 8008876:	e7d3      	b.n	8008820 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        (tb == ValType::String && ta == ValType::Number))
 8008878:	2e02      	cmp	r6, #2
 800887a:	d004      	beq.n	8008886 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
    if (ta == ValType::Boolean) {
 800887c:	2e01      	cmp	r6, #1
 800887e:	d1ae      	bne.n	80087de <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 8008880:	2d06      	cmp	r5, #6
 8008882:	d1e2      	bne.n	800884a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xa2>
 8008884:	e7ab      	b.n	80087de <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
        return toDouble(a) == toDouble(b);
 8008886:	4628      	mov	r0, r5
 8008888:	f7ff fc70 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800888c:	4606      	mov	r6, r0
 800888e:	4620      	mov	r0, r4
 8008890:	460f      	mov	r7, r1
 8008892:	f7ff fc6b 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7fa fae1 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 80088a2:	f04f 0401 	mov.w	r4, #1
 80088a6:	b900      	cbnz	r0, 80088aa <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x102>
 80088a8:	4604      	mov	r4, r0
 80088aa:	b2e0      	uxtb	r0, r4
}
 80088ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 80088ae:	2400      	movs	r4, #0
 80088b0:	e7b6      	b.n	8008820 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        ta = ValType::Number;
 80088b2:	2602      	movs	r6, #2
        return TAG_UNDEFINED;
 80088b4:	2500      	movs	r5, #0
 80088b6:	e7b1      	b.n	800881c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(1);
 80088b8:	2403      	movs	r4, #3
 80088ba:	e7b1      	b.n	8008820 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
 80088bc:	2503      	movs	r5, #3
 80088be:	e7ad      	b.n	800881c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if (a == b)
 80088c0:	42ac      	cmp	r4, r5
 80088c2:	d099      	beq.n	80087f8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    int compareResult = strcmp(a->data, b->data);
 80088c4:	1da1      	adds	r1, r4, #6
 80088c6:	1da8      	adds	r0, r5, #6
 80088c8:	f7fb f938 	bl	8003b3c <strcmp>
 80088cc:	fab0 f080 	clz	r0, r0
 80088d0:	0940      	lsrs	r0, r0, #5
}
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 80088d4:	2200      	movs	r2, #0
 80088d6:	e78d      	b.n	80087f4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>

080088d8 <_ZN3pxt9switch_eqEPNS_12TValueStructES1_>:
    if (eq_bool(a, b)) {
 80088d8:	f7ff bf66 	b.w	80087a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>

080088dc <_ZN6numops2eqEPN3pxt12TValueStructES2_>:
TNumber eq(TNumber a, TNumber b) {
 80088dc:	b508      	push	{r3, lr}
    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80088de:	f7ff ff63 	bl	80087a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 80088e2:	2800      	cmp	r0, #0
}
 80088e4:	bf14      	ite	ne
 80088e6:	2042      	movne	r0, #66	; 0x42
 80088e8:	200a      	moveq	r0, #10
 80088ea:	bd08      	pop	{r3, pc}

080088ec <_ZN6numops3neqEPN3pxt12TValueStructES2_>:
TNumber neq(TNumber a, TNumber b) {
 80088ec:	b508      	push	{r3, lr}
    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80088ee:	f7ff ff5b 	bl	80087a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 80088f2:	2800      	cmp	r0, #0
}
 80088f4:	bf0c      	ite	eq
 80088f6:	2042      	moveq	r0, #66	; 0x42
 80088f8:	200a      	movne	r0, #10
 80088fa:	bd08      	pop	{r3, pc}

080088fc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>:
int indexOf(RefCollection *c, TValue x, int start) {
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned getLength() { return length; };
 80088fe:	8907      	ldrh	r7, [r0, #8]
    auto data = c->head.getData();
 8008900:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
 8008902:	b17f      	cbz	r7, 8008924 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
 8008904:	460e      	mov	r6, r1
 8008906:	2400      	movs	r4, #0
 8008908:	3d04      	subs	r5, #4
 800890a:	e002      	b.n	8008912 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x16>
 800890c:	3401      	adds	r4, #1
 800890e:	42a7      	cmp	r7, r4
 8008910:	d008      	beq.n	8008924 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
        if (pxt::eq_bool(data[i], x)) {
 8008912:	4631      	mov	r1, r6
 8008914:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8008918:	f7ff ff46 	bl	80087a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 800891c:	2800      	cmp	r0, #0
 800891e:	d0f5      	beq.n	800890c <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x10>
            return (int)i;
 8008920:	4620      	mov	r0, r4
}
 8008922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return -1;
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892a:	bf00      	nop

0800892c <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
bool removeElement(RefCollection *c, TValue x) {
 800892c:	b510      	push	{r4, lr}
    int idx = indexOf(c, x, 0);
 800892e:	2200      	movs	r2, #0
bool removeElement(RefCollection *c, TValue x) {
 8008930:	4604      	mov	r4, r0
    int idx = indexOf(c, x, 0);
 8008932:	f7ff ffe3 	bl	80088fc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>
    if (idx >= 0) {
 8008936:	1e01      	subs	r1, r0, #0
 8008938:	db04      	blt.n	8008944 <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE+0x18>
    return c->head.remove(x);
 800893a:	1d20      	adds	r0, r4, #4
 800893c:	f001 f82a 	bl	8009994 <_ZN3pxt7Segment6removeEj>
        return 1;
 8008940:	2001      	movs	r0, #1
}
 8008942:	bd10      	pop	{r4, pc}
    return 0;
 8008944:	2000      	movs	r0, #0
}
 8008946:	bd10      	pop	{r4, pc}

08008948 <_ZN6numops6toBoolEPN3pxt12TValueStructE>:
int toBool(TValue v) {
 8008948:	b538      	push	{r3, r4, r5, lr}
    return ((intptr_t)v & 3) || !v;
 800894a:	0783      	lsls	r3, r0, #30
 800894c:	4604      	mov	r4, r0
 800894e:	d10d      	bne.n	800896c <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x24>
 8008950:	b150      	cbz	r0, 8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
    ValType t = valType(v);
 8008952:	f7ff fbe7 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008956:	2803      	cmp	r0, #3
 8008958:	d003      	beq.n	8008962 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x1a>
    } else if (t == ValType::Number) {
 800895a:	2802      	cmp	r0, #2
 800895c:	d013      	beq.n	8008986 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x3e>
    return 1;
 800895e:	2001      	movs	r0, #1
}
 8008960:	bd38      	pop	{r3, r4, r5, pc}
        if (s->length == 0)
 8008962:	88a3      	ldrh	r3, [r4, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1fa      	bne.n	800895e <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x16>
            return 0;
 8008968:	2000      	movs	r0, #0
}
 800896a:	bd38      	pop	{r3, r4, r5, pc}
        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||
 800896c:	280a      	cmp	r0, #10
 800896e:	d0fb      	beq.n	8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008970:	2800      	cmp	r0, #0
 8008972:	d0f9      	beq.n	8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008974:	280e      	cmp	r0, #14
 8008976:	d0f7      	beq.n	8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008978:	2806      	cmp	r0, #6
 800897a:	d0f5      	beq.n	8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 800897c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8008980:	bf18      	it	ne
 8008982:	2001      	movne	r0, #1
}
 8008984:	bd38      	pop	{r3, r4, r5, pc}
        auto x = toDouble(v);
 8008986:	4620      	mov	r0, r4
 8008988:	f7ff fbf0 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isnan(__x); }
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	f7fa fae4 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008998:	2800      	cmp	r0, #0
 800899a:	d1e5      	bne.n	8008968 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
        if (isnan(x) || x == 0.0 || x == -0.0)
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	f7fa fa5e 	bl	8002e64 <__wrap___aeabi_dcmpeq>
 80089a8:	fab0 f080 	clz	r0, r0
 80089ac:	0940      	lsrs	r0, r0, #5
}
 80089ae:	bd38      	pop	{r3, r4, r5, pc}

080089b0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE>:
    if (v == TAG_TRUE)
 80089b0:	2842      	cmp	r0, #66	; 0x42
 80089b2:	d005      	beq.n	80089c0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0x10>
    if (v == TAG_FALSE)
 80089b4:	280a      	cmp	r0, #10
 80089b6:	d001      	beq.n	80089bc <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0xc>
    int r = toBool(v);
 80089b8:	f7ff bfc6 	b.w	8008948 <_ZN6numops6toBoolEPN3pxt12TValueStructE>
        return 0;
 80089bc:	2000      	movs	r0, #0
}
 80089be:	4770      	bx	lr
        return 1;
 80089c0:	2001      	movs	r0, #1
 80089c2:	4770      	bx	lr

080089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>:
    if (a == TAG_NAN || b == TAG_NAN)
 80089c4:	280e      	cmp	r0, #14
 80089c6:	d04d      	beq.n	8008a64 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
 80089c8:	290e      	cmp	r1, #14
 80089ca:	d04b      	beq.n	8008a64 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
static int valCompare(TValue a, TValue b) {
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	460c      	mov	r4, r1
 80089d0:	4605      	mov	r5, r0
    ValType ta = valType(a);
 80089d2:	f7ff fba7 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 80089d6:	4606      	mov	r6, r0
    ValType tb = valType(b);
 80089d8:	4620      	mov	r0, r4
 80089da:	f7ff fba3 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta == ValType::String && tb == ValType::String)
 80089de:	2e03      	cmp	r6, #3
 80089e0:	d02c      	beq.n	8008a3c <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x78>
    if (a == b)
 80089e2:	42a5      	cmp	r5, r4
 80089e4:	d028      	beq.n	8008a38 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    auto da = toDouble(a);
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7ff fbc0 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80089ec:	4606      	mov	r6, r0
    auto db = toDouble(b);
 80089ee:	4620      	mov	r0, r4
    auto da = toDouble(a);
 80089f0:	460f      	mov	r7, r1
    auto db = toDouble(b);
 80089f2:	f7ff fbbb 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80089f6:	4632      	mov	r2, r6
 80089f8:	4604      	mov	r4, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	463b      	mov	r3, r7
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7fa faad 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008a06:	bb38      	cbnz	r0, 8008a58 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7fa faa6 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008a14:	bb00      	cbnz	r0, 8008a58 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
    if (da < db)
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7fa fa3b 	bl	8002e98 <__wrap___aeabi_dcmplt>
 8008a22:	b9e0      	cbnz	r0, 8008a5e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (da > db)
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7fa fa7e 	bl	8002f2c <__wrap___aeabi_dcmpgt>
 8008a30:	3000      	adds	r0, #0
 8008a32:	bf18      	it	ne
 8008a34:	2001      	movne	r0, #1
}
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008a38:	2000      	movs	r0, #0
}
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ta == ValType::String && tb == ValType::String)
 8008a3c:	2803      	cmp	r0, #3
 8008a3e:	d1d0      	bne.n	80089e2 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x1e>
    if (a == b)
 8008a40:	42a5      	cmp	r5, r4
 8008a42:	d0f9      	beq.n	8008a38 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    int compareResult = strcmp(a->data, b->data);
 8008a44:	1da1      	adds	r1, r4, #6
 8008a46:	1da8      	adds	r0, r5, #6
 8008a48:	f7fb f878 	bl	8003b3c <strcmp>
    if (compareResult < 0)
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	db06      	blt.n	8008a5e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (compareResult > 0)
 8008a50:	bf14      	ite	ne
 8008a52:	2001      	movne	r0, #1
 8008a54:	2000      	moveq	r0, #0
}
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008a58:	f06f 0001 	mvn.w	r0, #1
}
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008a64:	f06f 0001 	mvn.w	r0, #1
}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_>:
bool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}
 8008a6c:	b538      	push	{r3, r4, r5, lr}
    return (intptr_t)a & (intptr_t)b & 1;
 8008a6e:	f001 0301 	and.w	r3, r1, #1
 8008a72:	ea13 0400 	ands.w	r4, r3, r0
 8008a76:	d004      	beq.n	8008a82 <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_+0x16>
 8008a78:	4288      	cmp	r0, r1
 8008a7a:	bfac      	ite	ge
 8008a7c:	2000      	movge	r0, #0
 8008a7e:	2001      	movlt	r0, #1
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	f7ff ff9f 	bl	80089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008a86:	1c83      	adds	r3, r0, #2
 8008a88:	bf14      	ite	ne
 8008a8a:	0fc0      	lsrne	r0, r0, #31
 8008a8c:	4620      	moveq	r0, r4
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}

08008a90 <_ZN6numops2leEPN3pxt12TValueStructES2_>:
TNumber le(TNumber a, TNumber b){CMPOP(<=)}
 8008a90:	b510      	push	{r4, lr}
 8008a92:	f001 0401 	and.w	r4, r1, #1
 8008a96:	4220      	tst	r0, r4
 8008a98:	d003      	beq.n	8008aa2 <_ZN6numops2leEPN3pxt12TValueStructES2_+0x12>
 8008a9a:	4288      	cmp	r0, r1
 8008a9c:	dc07      	bgt.n	8008aae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 8008a9e:	2042      	movs	r0, #66	; 0x42
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	f7ff ff8f 	bl	80089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008aa6:	1c83      	adds	r3, r0, #2
 8008aa8:	d001      	beq.n	8008aae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	ddf7      	ble.n	8008a9e <_ZN6numops2leEPN3pxt12TValueStructES2_+0xe>
 8008aae:	200a      	movs	r0, #10
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	bf00      	nop

08008ab4 <_ZN6numops2ltEPN3pxt12TValueStructES2_>:
TNumber lt(TNumber a, TNumber b){CMPOP(<)}
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f001 0401 	and.w	r4, r1, #1
 8008aba:	4220      	tst	r0, r4
 8008abc:	d003      	beq.n	8008ac6 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x12>
 8008abe:	4288      	cmp	r0, r1
 8008ac0:	da07      	bge.n	8008ad2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 8008ac2:	2042      	movs	r0, #66	; 0x42
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	f7ff ff7d 	bl	80089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008aca:	1c83      	adds	r3, r0, #2
 8008acc:	d001      	beq.n	8008ad2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dbf7      	blt.n	8008ac2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0xe>
 8008ad2:	200a      	movs	r0, #10
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop

08008ad8 <_ZN6numops2geEPN3pxt12TValueStructES2_>:
TNumber ge(TNumber a, TNumber b){CMPOP(>=)}
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	f001 0401 	and.w	r4, r1, #1
 8008ade:	4220      	tst	r0, r4
 8008ae0:	d003      	beq.n	8008aea <_ZN6numops2geEPN3pxt12TValueStructES2_+0x12>
 8008ae2:	4288      	cmp	r0, r1
 8008ae4:	db05      	blt.n	8008af2 <_ZN6numops2geEPN3pxt12TValueStructES2_+0x1a>
 8008ae6:	2042      	movs	r0, #66	; 0x42
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	f7ff ff6b 	bl	80089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	daf9      	bge.n	8008ae6 <_ZN6numops2geEPN3pxt12TValueStructES2_+0xe>
 8008af2:	200a      	movs	r0, #10
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	bf00      	nop

08008af8 <_ZN6numops2gtEPN3pxt12TValueStructES2_>:
TNumber gt(TNumber a, TNumber b){CMPOP(>)}
 8008af8:	b510      	push	{r4, lr}
 8008afa:	f001 0401 	and.w	r4, r1, #1
 8008afe:	4220      	tst	r0, r4
 8008b00:	d003      	beq.n	8008b0a <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x12>
 8008b02:	4288      	cmp	r0, r1
 8008b04:	dd05      	ble.n	8008b12 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x1a>
 8008b06:	2042      	movs	r0, #66	; 0x42
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	f7ff ff5b 	bl	80089c4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	dcf9      	bgt.n	8008b06 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0xe>
 8008b12:	200a      	movs	r0, #10
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop

08008b18 <_ZN6numops8toStringEPN3pxt12TValueStructE>:
String toString(TValue v) {
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	b090      	sub	sp, #64	; 0x40
 8008b1c:	4604      	mov	r4, r0
    ValType t = valType(v);
 8008b1e:	f7ff fb01 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008b22:	2803      	cmp	r0, #3
 8008b24:	d03d      	beq.n	8008ba2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8a>
    } else if (t == ValType::Number) {
 8008b26:	2802      	cmp	r0, #2
 8008b28:	d00f      	beq.n	8008b4a <_ZN6numops8toStringEPN3pxt12TValueStructE+0x32>
    } else if (t == ValType::Function) {
 8008b2a:	2805      	cmp	r0, #5
 8008b2c:	d048      	beq.n	8008bc0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa8>
        if (v == TAG_UNDEFINED)
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d04c      	beq.n	8008bcc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb4>
        else if (v == TAG_FALSE)
 8008b32:	2c0a      	cmp	r4, #10
 8008b34:	d042      	beq.n	8008bbc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa4>
        else if (v == TAG_NAN)
 8008b36:	2c0e      	cmp	r4, #14
 8008b38:	d045      	beq.n	8008bc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        else if (v == TAG_TRUE)
 8008b3a:	2c42      	cmp	r4, #66	; 0x42
 8008b3c:	d055      	beq.n	8008bea <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd2>
        return (String)(void *)sObject;
 8008b3e:	4b2c      	ldr	r3, [pc, #176]	; (8008bf0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd8>)
 8008b40:	482c      	ldr	r0, [pc, #176]	; (8008bf4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xdc>)
 8008b42:	2c06      	cmp	r4, #6
 8008b44:	bf08      	it	eq
 8008b46:	4618      	moveq	r0, r3
 8008b48:	e02c      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        if (isNumber(v)) {
 8008b4a:	07e3      	lsls	r3, r4, #31
 8008b4c:	d42c      	bmi.n	8008ba8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x90>
        if (v == TAG_NAN)
 8008b4e:	2c0e      	cmp	r4, #14
 8008b50:	d039      	beq.n	8008bc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        auto x = toDouble(v);
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff fb0a 	bl	800816c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isinf(__x); }
 8008b58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b5c:	460d      	mov	r5, r1
        if (isinf(x)) {
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b62:	4631      	mov	r1, r6
 8008b64:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
        auto x = toDouble(v);
 8008b66:	4604      	mov	r4, r0
        if (isinf(x)) {
 8008b68:	f7fa f9fa 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008b6c:	b938      	cbnz	r0, 8008b7e <_ZN6numops8toStringEPN3pxt12TValueStructE+0x66>
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4631      	mov	r1, r6
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b76:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
 8008b78:	f7fa f9a6 	bl	8002ec8 <__wrap___aeabi_dcmple>
 8008b7c:	b340      	cbz	r0, 8008bd0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb8>
  { return __builtin_isnan(__x); }
 8008b7e:	4622      	mov	r2, r4
 8008b80:	4620      	mov	r0, r4
 8008b82:	462b      	mov	r3, r5
 8008b84:	4629      	mov	r1, r5
 8008b86:	f7fa f9eb 	bl	8002f60 <__wrap___aeabi_dcmpun>
 8008b8a:	b9e0      	cbnz	r0, 8008bc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        mycvt(x, buf);
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	466a      	mov	r2, sp
 8008b92:	f7fe fac9 	bl	8007128 <_ZN6numops5mycvtEdPc>
        return mkString(buf);
 8008b96:	4668      	mov	r0, sp
 8008b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b9c:	f7fe feda 	bl	8007954 <_ZN3pxt8mkStringEPKci>
 8008ba0:	e000      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 8008ba2:	4620      	mov	r0, r4
}
 8008ba4:	b010      	add	sp, #64	; 0x40
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
            itoa(numValue(v), buf);
 8008ba8:	4669      	mov	r1, sp
 8008baa:	1060      	asrs	r0, r4, #1
 8008bac:	f001 fd4a 	bl	800a644 <_ZN5codal4itoaEiPc>
            return mkString(buf);
 8008bb0:	4668      	mov	r0, sp
 8008bb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bb6:	f7fe fecd 	bl	8007954 <_ZN3pxt8mkStringEPKci>
 8008bba:	e7f3      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sFalse;
 8008bbc:	480f      	ldr	r0, [pc, #60]	; (8008bfc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe4>)
 8008bbe:	e7f1      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        return (String)(void *)sFunction;
 8008bc0:	480f      	ldr	r0, [pc, #60]	; (8008c00 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe8>)
}
 8008bc2:	b010      	add	sp, #64	; 0x40
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sNaN;
 8008bc6:	480f      	ldr	r0, [pc, #60]	; (8008c04 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xec>)
}
 8008bc8:	b010      	add	sp, #64	; 0x40
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sUndefined;
 8008bcc:	480e      	ldr	r0, [pc, #56]	; (8008c08 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf0>)
 8008bce:	e7e9      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            if (x < 0)
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f7fa f95e 	bl	8002e98 <__wrap___aeabi_dcmplt>
                return (String)(void *)sInf;
 8008bdc:	4c0b      	ldr	r4, [pc, #44]	; (8008c0c <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf4>)
 8008bde:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf8>)
 8008be0:	2800      	cmp	r0, #0
 8008be2:	bf14      	ite	ne
 8008be4:	4620      	movne	r0, r4
 8008be6:	4618      	moveq	r0, r3
 8008be8:	e7dc      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sTrue;
 8008bea:	480a      	ldr	r0, [pc, #40]	; (8008c14 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xfc>)
 8008bec:	e7da      	b.n	8008ba4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 8008bee:	bf00      	nop
 8008bf0:	0800ce20 	.word	0x0800ce20
 8008bf4:	0800ce44 	.word	0x0800ce44
 8008bf8:	7fefffff 	.word	0x7fefffff
 8008bfc:	0800ce38 	.word	0x0800ce38
 8008c00:	0800ce54 	.word	0x0800ce54
 8008c04:	0800ce04 	.word	0x0800ce04
 8008c08:	0800cdb0 	.word	0x0800cdb0
 8008c0c:	0800ce10 	.word	0x0800ce10
 8008c10:	0800cdf4 	.word	0x0800cdf4
 8008c14:	0800ce2c 	.word	0x0800ce2c

08008c18 <_ZN3pxt6typeOfEPNS_12TValueStructE>:
String typeOf(TValue v) {
 8008c18:	b508      	push	{r3, lr}
    switch (valType(v)) {
 8008c1a:	f7ff fa83 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008c1e:	2805      	cmp	r0, #5
 8008c20:	d810      	bhi.n	8008c44 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x2c>
 8008c22:	e8df f000 	tbb	[pc, r0]
 8008c26:	0503      	.short	0x0503
 8008c28:	0d0b0907 	.word	0x0d0b0907
        return (String)sUndefinedTp;
 8008c2c:	4808      	ldr	r0, [pc, #32]	; (8008c50 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x38>)
}
 8008c2e:	bd08      	pop	{r3, pc}
        return (String)sBooleanTp;
 8008c30:	4808      	ldr	r0, [pc, #32]	; (8008c54 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x3c>)
}
 8008c32:	bd08      	pop	{r3, pc}
        return (String)sNumberTp;
 8008c34:	4808      	ldr	r0, [pc, #32]	; (8008c58 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x40>)
}
 8008c36:	bd08      	pop	{r3, pc}
        return (String)sStringTp;
 8008c38:	4808      	ldr	r0, [pc, #32]	; (8008c5c <_ZN3pxt6typeOfEPNS_12TValueStructE+0x44>)
}
 8008c3a:	bd08      	pop	{r3, pc}
        return (String)sObjectTp;
 8008c3c:	4808      	ldr	r0, [pc, #32]	; (8008c60 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x48>)
}
 8008c3e:	bd08      	pop	{r3, pc}
        return (String)sFunctionTp;
 8008c40:	4808      	ldr	r0, [pc, #32]	; (8008c64 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x4c>)
}
 8008c42:	bd08      	pop	{r3, pc}
    target_panic(800 + subcode);
 8008c44:	f240 3022 	movw	r0, #802	; 0x322
 8008c48:	f7f7 fe82 	bl	8000950 <target_panic>
        return 0;
 8008c4c:	2000      	movs	r0, #0
}
 8008c4e:	bd08      	pop	{r3, pc}
 8008c50:	0800cde4 	.word	0x0800cde4
 8008c54:	0800cda0 	.word	0x0800cda0
 8008c58:	0800ce68 	.word	0x0800ce68
 8008c5c:	0800ce88 	.word	0x0800ce88
 8008c60:	0800ce78 	.word	0x0800ce78
 8008c64:	0800cdd4 	.word	0x0800cdd4

08008c68 <_ZN3pxt8anyPrintEPNS_12TValueStructE>:
void anyPrint(TValue v) {
 8008c68:	b530      	push	{r4, r5, lr}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	4604      	mov	r4, r0
    if (valType(v) == ValType::Object) {
 8008c6e:	f7ff fa59 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008c72:	2804      	cmp	r0, #4
 8008c74:	d116      	bne.n	8008ca4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x3c>
    return ((intptr_t)v & 3) || !v;
 8008c76:	f014 0103 	ands.w	r1, r4, #3
 8008c7a:	d10c      	bne.n	8008c96 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
 8008c7c:	b15c      	cbz	r4, 8008c96 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 8008c7e:	6822      	ldr	r2, [r4, #0]
            if ((void *)meth == (void *)&anyPrint)
 8008c80:	4d14      	ldr	r5, [pc, #80]	; (8008cd4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x6c>)
 8008c82:	f022 0001 	bic.w	r0, r2, #1
            auto meth = ((RefObjectMethod)vt->methods[1]);
 8008c86:	6943      	ldr	r3, [r0, #20]
            if ((void *)meth == (void *)&anyPrint)
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	d01b      	beq.n	8008cc4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x5c>
                meth(o);
 8008c8c:	4620      	mov	r0, r4
}
 8008c8e:	b003      	add	sp, #12
 8008c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                meth(o);
 8008c94:	4718      	bx	r3
            DMESG("[Native %p]", v);
 8008c96:	4621      	mov	r1, r4
 8008c98:	480f      	ldr	r0, [pc, #60]	; (8008cd8 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x70>)
}
 8008c9a:	b003      	add	sp, #12
 8008c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            DMESG("[Native %p]", v);
 8008ca0:	f001 becc 	b.w	800aa3c <codal_dmesg>
        String s = numops::toString(v);
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f7ff ff37 	bl	8008b18 <_ZN6numops8toStringEPN3pxt12TValueStructE>
 8008caa:	4605      	mov	r5, r0
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7ff ffb3 	bl	8008c18 <_ZN3pxt6typeOfEPNS_12TValueStructE>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	1d81      	adds	r1, r0, #6
 8008cb6:	4809      	ldr	r0, [pc, #36]	; (8008cdc <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x74>)
 8008cb8:	1dab      	adds	r3, r5, #6
}
 8008cba:	b003      	add	sp, #12
 8008cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 8008cc0:	f001 bebc 	b.w	800aa3c <codal_dmesg>
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
 8008cc4:	8903      	ldrh	r3, [r0, #8]
 8008cc6:	8800      	ldrh	r0, [r0, #0]
 8008cc8:	9000      	str	r0, [sp, #0]
 8008cca:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x78>)
 8008ccc:	f001 feb6 	bl	800aa3c <codal_dmesg>
}
 8008cd0:	b003      	add	sp, #12
 8008cd2:	bd30      	pop	{r4, r5, pc}
 8008cd4:	08008c69 	.word	0x08008c69
 8008cd8:	0800cd84 	.word	0x0800cd84
 8008cdc:	0800cd90 	.word	0x0800cd90
 8008ce0:	0800cd5c 	.word	0x0800cd5c

08008ce4 <_ZN3pxt10failedCastEPNS_12TValueStructE>:
// PRIM_VTABLE(action, ValType::Function, RefAction, )

void failedCast(TValue v) {
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	4604      	mov	r4, r0
    DMESG("failed type check for %p", v);
 8008ce8:	4811      	ldr	r0, [pc, #68]	; (8008d30 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x4c>)
 8008cea:	4621      	mov	r1, r4
 8008cec:	f001 fea6 	bl	800aa3c <codal_dmesg>
    return ((intptr_t)v & 3) || !v;
 8008cf0:	07a3      	lsls	r3, r4, #30
 8008cf2:	d106      	bne.n	8008d02 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 8008cf4:	b16c      	cbz	r4, 8008d12 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 8008cf6:	6821      	ldr	r1, [r4, #0]
 8008cf8:	f021 0101 	bic.w	r1, r1, #1
    if (vt->magic == VTABLE_MAGIC)
 8008cfc:	78cb      	ldrb	r3, [r1, #3]
 8008cfe:	2bf9      	cmp	r3, #249	; 0xf9
 8008d00:	d010      	beq.n	8008d24 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x40>
    if (vt) {
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
    }

    int code;
    if (v == TAG_NULL)
 8008d02:	2c06      	cmp	r4, #6
 8008d04:	d105      	bne.n	8008d12 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
}
 8008d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FROM_NULL;
 8008d0a:	f240 30dd 	movw	r0, #989	; 0x3dd
    target_panic(code);
 8008d0e:	f7f7 be1f 	b.w	8000950 <target_panic>
        code = PANIC_CAST_FIRST + (int)valType(v);
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff fa06 	bl	8008124 <_ZN3pxt7valTypeEPNS_12TValueStructE>
}
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FIRST + (int)valType(v);
 8008d1c:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
    target_panic(code);
 8008d20:	f7f7 be16 	b.w	8000950 <target_panic>
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
 8008d24:	890b      	ldrh	r3, [r1, #8]
 8008d26:	788a      	ldrb	r2, [r1, #2]
 8008d28:	4802      	ldr	r0, [pc, #8]	; (8008d34 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x50>)
 8008d2a:	f001 fe87 	bl	800aa3c <codal_dmesg>
 8008d2e:	e7e8      	b.n	8008d02 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 8008d30:	0800cd08 	.word	0x0800cd08
 8008d34:	0800cd24 	.word	0x0800cd24

08008d38 <_ZN3pxt15missingPropertyEPNS_12TValueStructE>:

void missingProperty(TValue v) {
 8008d38:	b508      	push	{r3, lr}
    DMESG("missing property on %p", v);
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4804      	ldr	r0, [pc, #16]	; (8008d50 <_ZN3pxt15missingPropertyEPNS_12TValueStructE+0x18>)
 8008d3e:	f001 fe7d 	bl	800aa3c <codal_dmesg>
    target_panic(PANIC_MISSING_PROPERTY);
}
 8008d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    target_panic(PANIC_MISSING_PROPERTY);
 8008d46:	f44f 7064 	mov.w	r0, #912	; 0x390
 8008d4a:	f7f7 be01 	b.w	8000950 <target_panic>
 8008d4e:	bf00      	nop
 8008d50:	0800cd44 	.word	0x0800cd44

08008d54 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>:
    for (unsigned i = 0; i < len; ++i) {
        gcProcess(*data++);
    }
}

static uint32_t getObjectSize(RefObject *o) {
 8008d54:	b538      	push	{r3, r4, r5, lr}
    auto vt = o->vtable & ~ANY_MARKED_MASK;
 8008d56:	6804      	ldr	r4, [r0, #0]
static uint32_t getObjectSize(RefObject *o) {
 8008d58:	4605      	mov	r5, r0
    uint32_t r;
    GC_CHECK(vt != 0, 49);
 8008d5a:	f034 0403 	bics.w	r4, r4, #3
 8008d5e:	d011      	beq.n	8008d84 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x30>
    if (IS_VAR_BLOCK(vt)) {
 8008d60:	0fa3      	lsrs	r3, r4, #30
 8008d62:	d114      	bne.n	8008d8e <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x3a>
        r = VAR_BLOCK_WORDS(vt);
    } else {
        auto sz = getSizeMethod(vt);
        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);
        r = sz(o);
 8008d64:	4628      	mov	r0, r5
 8008d66:	69e3      	ldr	r3, [r4, #28]
 8008d68:	4798      	blx	r3
 8008d6a:	4605      	mov	r5, r0
    }
    GC_CHECK(1 <= r && (r <= (GC_MAX_ALLOC_SIZE >> 2) || IS_FREE(vt)), 48);
 8008d6c:	b125      	cbz	r5, 8008d78 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x24>
 8008d6e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008d72:	d905      	bls.n	8008d80 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
 8008d74:	2c00      	cmp	r4, #0
 8008d76:	db03      	blt.n	8008d80 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
    target_panic(800 + subcode);
 8008d78:	f44f 7054 	mov.w	r0, #848	; 0x350
 8008d7c:	f7f7 fde8 	bl	8000950 <target_panic>
    return r;
}
 8008d80:	4628      	mov	r0, r5
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	f240 3051 	movw	r0, #849	; 0x351
 8008d88:	f7f7 fde2 	bl	8000950 <target_panic>
 8008d8c:	e7ea      	b.n	8008d64 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x10>
        r = VAR_BLOCK_WORDS(vt);
 8008d8e:	f3c4 0591 	ubfx	r5, r4, #2, #18
 8008d92:	e7eb      	b.n	8008d6c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x18>

08008d94 <_ZN3pxtL9removePtrEPNS_12TValueStructE>:
        else
            oops(44);
    }
}

static void removePtr(TValue v) {
 8008d94:	b538      	push	{r3, r4, r5, lr}
    auto len = gcRoots.getLength();
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
    unsigned getLength() { return length; };
 8008d98:	889d      	ldrh	r5, [r3, #4]
    auto data = gcRoots.getData();
 8008d9a:	681c      	ldr	r4, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 8008d9c:	b175      	cbz	r5, 8008dbc <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x28>
        if (data[i] == v) {
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	4298      	cmp	r0, r3
 8008da2:	d011      	beq.n	8008dc8 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x34>
    for (unsigned i = 0; i < len; ++i) {
 8008da4:	2300      	movs	r3, #0
 8008da6:	1d22      	adds	r2, r4, #4
 8008da8:	e005      	b.n	8008db6 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x22>
        if (data[i] == v) {
 8008daa:	6811      	ldr	r1, [r2, #0]
 8008dac:	4614      	mov	r4, r2
 8008dae:	4281      	cmp	r1, r0
 8008db0:	f102 0204 	add.w	r2, r2, #4
 8008db4:	d009      	beq.n	8008dca <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x36>
    for (unsigned i = 0; i < len; ++i) {
 8008db6:	3301      	adds	r3, #1
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	d1f6      	bne.n	8008daa <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x16>
    target_panic(800 + subcode);
 8008dbc:	f44f 7052 	mov.w	r0, #840	; 0x348
            }
            return;
        }
    }
    oops(40);
}
 8008dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc4:	f7f7 bdc4 	b.w	8000950 <target_panic>
    for (unsigned i = 0; i < len; ++i) {
 8008dc8:	2300      	movs	r3, #0
            if (i == len - 1) {
 8008dca:	3d01      	subs	r5, #1
 8008dcc:	429d      	cmp	r5, r3
                gcRoots.pop();
 8008dce:	4805      	ldr	r0, [pc, #20]	; (8008de4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
            if (i == len - 1) {
 8008dd0:	d003      	beq.n	8008dda <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x46>
                data[i] = gcRoots.pop();
 8008dd2:	f000 fd4b 	bl	800986c <_ZN3pxt9LLSegment3popEv>
 8008dd6:	6020      	str	r0, [r4, #0]
}
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                gcRoots.pop();
 8008dde:	f000 bd45 	b.w	800986c <_ZN3pxt9LLSegment3popEv>
 8008de2:	bf00      	nop
 8008de4:	20001018 	.word	0x20001018

08008de8 <_ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 8008de8:	6803      	ldr	r3, [r0, #0]
 8008dea:	f023 0301 	bic.w	r3, r3, #1
    return tbl->numbytes >> 2;
 8008dee:	8818      	ldrh	r0, [r3, #0]
}
 8008df0:	0880      	lsrs	r0, r0, #2
 8008df2:	4770      	bx	lr

08008df4 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE>:
    if (!ctx)
 8008df4:	b330      	cbz	r0, 8008e44 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x50>
void popThreadContext(ThreadContext *ctx) {
 8008df6:	b538      	push	{r3, r4, r5, lr}
    auto n = ctx->stack.next;
 8008df8:	68c5      	ldr	r5, [r0, #12]
 8008dfa:	4604      	mov	r4, r0
    if (n) {
 8008dfc:	b1a5      	cbz	r5, 8008e28 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x34>
        ctx->stack.top = n->top;
 8008dfe:	e955 3101 	ldrd	r3, r1, [r5, #-4]
        ctx->stack.bottom = n->bottom;
 8008e02:	6868      	ldr	r0, [r5, #4]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008e04:	0f5a      	lsrs	r2, r3, #29
        ctx->stack.top = n->top;
 8008e06:	6061      	str	r1, [r4, #4]
        ctx->stack.next = n->next;
 8008e08:	68a9      	ldr	r1, [r5, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008e0a:	2a03      	cmp	r2, #3
        ctx->stack.next = n->next;
 8008e0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008e10:	d005      	beq.n	8008e1e <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x2a>
    target_panic(800 + subcode);
 8008e12:	f240 3049 	movw	r0, #841	; 0x349
 8008e16:	f7f7 fd9b 	bl	8000950 <target_panic>
 8008e1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
    r[-1] |= FREE_MASK;
 8008e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e22:	f845 3c04 	str.w	r3, [r5, #-4]
}
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8008e28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008e2c:	0f5a      	lsrs	r2, r3, #29
 8008e2e:	2a03      	cmp	r2, #3
 8008e30:	d109      	bne.n	8008e46 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x52>
    r[-1] |= FREE_MASK;
 8008e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e36:	f844 3c04 	str.w	r3, [r4, #-4]
        setThreadContext(NULL);
 8008e3a:	2000      	movs	r0, #0
}
 8008e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        setThreadContext(NULL);
 8008e40:	f001 b8a4 	b.w	8009f8c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 8008e44:	4770      	bx	lr
 8008e46:	f240 3049 	movw	r0, #841	; 0x349
 8008e4a:	f7f7 fd81 	bl	8000950 <target_panic>
 8008e4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e52:	e7ee      	b.n	8008e32 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x3e>

08008e54 <_ZN3pxt6gcScanEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008e54:	0783      	lsls	r3, r0, #30
 8008e56:	d109      	bne.n	8008e6c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8008e58:	b140      	cbz	r0, 8008e6c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008e5a:	0f03      	lsrs	r3, r0, #28
 8008e5c:	d006      	beq.n	8008e6c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    if (SKIP_PROCESSING(v))
 8008e5e:	6803      	ldr	r3, [r0, #0]
 8008e60:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x30>)
 8008e62:	4213      	tst	r3, r2
 8008e64:	d102      	bne.n	8008e6c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8008e66:	78da      	ldrb	r2, [r3, #3]
 8008e68:	2af9      	cmp	r2, #249	; 0xf9
 8008e6a:	d000      	beq.n	8008e6e <_ZN3pxt6gcScanEPNS_12TValueStructE+0x1a>
 8008e6c:	4770      	bx	lr
void gcScan(TValue v) {
 8008e6e:	b410      	push	{r4}
    void push(TValue value) { set(length, value); }
 8008e70:	4c05      	ldr	r4, [pc, #20]	; (8008e88 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x34>)
    MARK(v);
 8008e72:	f043 0301 	orr.w	r3, r3, #1
 8008e76:	6003      	str	r3, [r0, #0]
 8008e78:	4602      	mov	r2, r0
 8008e7a:	88a1      	ldrh	r1, [r4, #4]
 8008e7c:	4620      	mov	r0, r4
}
 8008e7e:	bc10      	pop	{r4}
 8008e80:	f000 bcdc 	b.w	800983c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8008e84:	40000003 	.word	0x40000003
 8008e88:	20001028 	.word	0x20001028

08008e8c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>:
    for (unsigned i = 0; i < len; ++i) {
 8008e8c:	b1e1      	cbz	r1, 8008ec8 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x3c>
void gcScanMany(TValue *data, unsigned len) {
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e90:	1f04      	subs	r4, r0, #4
        if (SKIP_PROCESSING(v))
 8008e92:	4e0e      	ldr	r6, [pc, #56]	; (8008ecc <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x40>)
 8008e94:	4f0e      	ldr	r7, [pc, #56]	; (8008ed0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8008e96:	eb04 0581 	add.w	r5, r4, r1, lsl #2
        auto v = data[i];
 8008e9a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    return ((intptr_t)v & 3) || !v;
 8008e9e:	0793      	lsls	r3, r2, #30
 8008ea0:	d10f      	bne.n	8008ec2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8008ea2:	b172      	cbz	r2, 8008ec2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008ea4:	0f13      	lsrs	r3, r2, #28
 8008ea6:	d00c      	beq.n	8008ec2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        if (SKIP_PROCESSING(v))
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	4233      	tst	r3, r6
 8008eac:	d109      	bne.n	8008ec2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8008eae:	78d9      	ldrb	r1, [r3, #3]
 8008eb0:	29f9      	cmp	r1, #249	; 0xf9
 8008eb2:	d106      	bne.n	8008ec2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        MARK(v);
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	6013      	str	r3, [r2, #0]
    void push(TValue value) { set(length, value); }
 8008eba:	88b9      	ldrh	r1, [r7, #4]
 8008ebc:	4804      	ldr	r0, [pc, #16]	; (8008ed0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8008ebe:	f000 fcbd 	bl	800983c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 8008ec2:	42ac      	cmp	r4, r5
 8008ec4:	d1e9      	bne.n	8008e9a <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0xe>
}
 8008ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40000003 	.word	0x40000003
 8008ed0:	20001028 	.word	0x20001028

08008ed4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>:
void gcScanSegment(Segment &seg) {
 8008ed4:	b538      	push	{r3, r4, r5, lr}
    auto data = seg.getData();
 8008ed6:	6804      	ldr	r4, [r0, #0]
    if (!data)
 8008ed8:	b1ac      	cbz	r4, 8008f06 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x32>
    GC_CHECK(!IS_MARKED(VT(segBl)), 47);
 8008eda:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008ede:	4605      	mov	r5, r0
 8008ee0:	07da      	lsls	r2, r3, #31
 8008ee2:	d409      	bmi.n	8008ef8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x24>
    MARK(segBl);
 8008ee4:	f043 0301 	orr.w	r3, r3, #1
 8008ee8:	f844 3c04 	str.w	r3, [r4, #-4]
    gcScanMany(data, seg.getLength());
 8008eec:	88a9      	ldrh	r1, [r5, #4]
 8008eee:	4620      	mov	r0, r4
}
 8008ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gcScanMany(data, seg.getLength());
 8008ef4:	f7ff bfca 	b.w	8008e8c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
    target_panic(800 + subcode);
 8008ef8:	f240 304f 	movw	r0, #847	; 0x34f
 8008efc:	f7f7 fd28 	bl	8000950 <target_panic>
 8008f00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008f04:	e7ee      	b.n	8008ee4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x10>
}
 8008f06:	bd38      	pop	{r3, r4, r5, pc}

08008f08 <_ZN3pxt9gcProcessEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008f08:	0782      	lsls	r2, r0, #30
 8008f0a:	d10b      	bne.n	8008f24 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1c>
void gcProcess(TValue v) {
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	b140      	cbz	r0, 8008f22 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    return isTagged(v) || !((uint32_t)v >> 28);
 8008f10:	0f02      	lsrs	r2, r0, #28
 8008f12:	d006      	beq.n	8008f22 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    if (SKIP_PROCESSING(v))
 8008f14:	6802      	ldr	r2, [r0, #0]
 8008f16:	4910      	ldr	r1, [pc, #64]	; (8008f58 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x50>)
 8008f18:	420a      	tst	r2, r1
 8008f1a:	d102      	bne.n	8008f22 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
 8008f1c:	78d1      	ldrb	r1, [r2, #3]
 8008f1e:	29f9      	cmp	r1, #249	; 0xf9
 8008f20:	d001      	beq.n	8008f26 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1e>
}
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	4770      	bx	lr
    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);
 8008f26:	f022 0103 	bic.w	r1, r2, #3
 8008f2a:	6989      	ldr	r1, [r1, #24]
    MARK(v);
 8008f2c:	f042 0201 	orr.w	r2, r2, #1
 8008f30:	6002      	str	r2, [r0, #0]
    if (scan)
 8008f32:	b101      	cbz	r1, 8008f36 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x2e>
        scan((RefObject *)v);
 8008f34:	4788      	blx	r1
 8008f36:	4c09      	ldr	r4, [pc, #36]	; (8008f5c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x54>)
        auto curr = (RefObject *)workQueue.pop();
 8008f38:	4625      	mov	r5, r4
 8008f3a:	e007      	b.n	8008f4c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 fc95 	bl	800986c <_ZN3pxt9LLSegment3popEv>
        scan = getScanMethod(curr->vtable & ~ANY_MARKED_MASK);
 8008f42:	6803      	ldr	r3, [r0, #0]
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	699b      	ldr	r3, [r3, #24]
        if (scan)
 8008f4a:	b91b      	cbnz	r3, 8008f54 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x4c>
    while (workQueue.getLength()) {
 8008f4c:	88a3      	ldrh	r3, [r4, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f4      	bne.n	8008f3c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x34>
}
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
            scan(curr);
 8008f54:	4798      	blx	r3
 8008f56:	e7f9      	b.n	8008f4c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 8008f58:	40000003 	.word	0x40000003
 8008f5c:	20001028 	.word	0x20001028

08008f60 <_ZN3pxt2gcEi>:
void gc(int flags) {
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8008f64:	4b89      	ldr	r3, [pc, #548]	; (800918c <_ZN3pxt2gcEi+0x22c>)
void gc(int flags) {
 8008f66:	b083      	sub	sp, #12
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8008f68:	781b      	ldrb	r3, [r3, #0]
void gc(int flags) {
 8008f6a:	9001      	str	r0, [sp, #4]
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8008f6c:	079a      	lsls	r2, r3, #30
 8008f6e:	d505      	bpl.n	8008f7c <_ZN3pxt2gcEi+0x1c>
    target_panic(800 + subcode);
 8008f70:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008f74:	f7f7 fcec 	bl	8000950 <target_panic>
 8008f78:	4b84      	ldr	r3, [pc, #528]	; (800918c <_ZN3pxt2gcEi+0x22c>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
    inGC |= IN_GC_COLLECT;
 8008f7c:	4983      	ldr	r1, [pc, #524]	; (800918c <_ZN3pxt2gcEi+0x22c>)
 8008f7e:	f043 0302 	orr.w	r3, r3, #2
 8008f82:	700b      	strb	r3, [r1, #0]
    if (flags & 2) {
 8008f84:	9b01      	ldr	r3, [sp, #4]
    auto data = gcRoots.getData();
 8008f86:	4a82      	ldr	r2, [pc, #520]	; (8009190 <_ZN3pxt2gcEi+0x230>)
    if (flags & 2) {
 8008f88:	f013 0602 	ands.w	r6, r3, #2
    auto data = gcRoots.getData();
 8008f8c:	6814      	ldr	r4, [r2, #0]
    unsigned getLength() { return length; };
 8008f8e:	8895      	ldrh	r5, [r2, #4]
    if (flags & 2) {
 8008f90:	f040 80e2 	bne.w	8009158 <_ZN3pxt2gcEi+0x1f8>
    for (unsigned i = 0; i < len; ++i) {
 8008f94:	b165      	cbz	r5, 8008fb0 <_ZN3pxt2gcEi+0x50>
 8008f96:	eb04 0585 	add.w	r5, r4, r5, lsl #2
        auto d = data[i];
 8008f9a:	f854 0b04 	ldr.w	r0, [r4], #4
        if ((uint32_t)d & 1) {
 8008f9e:	07c7      	lsls	r7, r0, #31
            d = *(TValue *)((uint32_t)d & ~1);
 8008fa0:	bf44      	itt	mi
 8008fa2:	f020 0001 	bicmi.w	r0, r0, #1
 8008fa6:	6800      	ldrmi	r0, [r0, #0]
        gcProcess(d);
 8008fa8:	f7ff ffae 	bl	8008f08 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 8008fac:	42a5      	cmp	r5, r4
 8008fae:	d1f4      	bne.n	8008f9a <_ZN3pxt2gcEi+0x3a>
    if (globals) {
 8008fb0:	4c78      	ldr	r4, [pc, #480]	; (8009194 <_ZN3pxt2gcEi+0x234>)
    gcProcessStacks(flags);
 8008fb2:	9801      	ldr	r0, [sp, #4]
 8008fb4:	f000 fff0 	bl	8009f98 <_ZN3pxt15gcProcessStacksEi>
    if (globals) {
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	b1b3      	cbz	r3, 8008fea <_ZN3pxt2gcEi+0x8a>
        auto nonPtrs = bytecode[21];
 8008fbc:	4b76      	ldr	r3, [pc, #472]	; (8009198 <_ZN3pxt2gcEi+0x238>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
        len = getNumGlobals() - nonPtrs;
 8008fc4:	f000 fdc0 	bl	8009b48 <_ZN3pxt13getNumGlobalsEv>
        data = globals + nonPtrs;
 8008fc8:	6825      	ldr	r5, [r4, #0]
        len = getNumGlobals() - nonPtrs;
 8008fca:	eba0 0708 	sub.w	r7, r0, r8
        data = globals + nonPtrs;
 8008fce:	eb05 0588 	add.w	r5, r5, r8, lsl #2
        if (flags & 2)
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	f040 80ce 	bne.w	8009174 <_ZN3pxt2gcEi+0x214>
        for (unsigned i = 0; i < len; ++i) {
 8008fd8:	b13f      	cbz	r7, 8008fea <_ZN3pxt2gcEi+0x8a>
 8008fda:	2400      	movs	r4, #0
 8008fdc:	3401      	adds	r4, #1
            gcProcess(*data++);
 8008fde:	f855 0b04 	ldr.w	r0, [r5], #4
 8008fe2:	f7ff ff91 	bl	8008f08 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
        for (unsigned i = 0; i < len; ++i) {
 8008fe6:	42a7      	cmp	r7, r4
 8008fe8:	d1f8      	bne.n	8008fdc <_ZN3pxt2gcEi+0x7c>
    len = tempRootLen;
 8008fea:	4a6c      	ldr	r2, [pc, #432]	; (800919c <_ZN3pxt2gcEi+0x23c>)
    data = tempRoot;
 8008fec:	4b6c      	ldr	r3, [pc, #432]	; (80091a0 <_ZN3pxt2gcEi+0x240>)
    len = tempRootLen;
 8008fee:	7816      	ldrb	r6, [r2, #0]
    data = tempRoot;
 8008ff0:	681d      	ldr	r5, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 8008ff2:	b13e      	cbz	r6, 8009004 <_ZN3pxt2gcEi+0xa4>
 8008ff4:	2400      	movs	r4, #0
 8008ff6:	3401      	adds	r4, #1
        gcProcess(*data++);
 8008ff8:	f855 0b04 	ldr.w	r0, [r5], #4
 8008ffc:	f7ff ff84 	bl	8008f08 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 8009000:	42a6      	cmp	r6, r4
 8009002:	d1f8      	bne.n	8008ff6 <_ZN3pxt2gcEi+0x96>
    firstFree = NULL;
 8009004:	2700      	movs	r7, #0
    for (auto h = firstBlock; h; h = h->next) {
 8009006:	4b67      	ldr	r3, [pc, #412]	; (80091a4 <_ZN3pxt2gcEi+0x244>)
 8009008:	f8d3 8000 	ldr.w	r8, [r3]
    firstFree = NULL;
 800900c:	4b66      	ldr	r3, [pc, #408]	; (80091a8 <_ZN3pxt2gcEi+0x248>)
 800900e:	601f      	str	r7, [r3, #0]
    for (auto h = firstBlock; h; h = h->next) {
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	f000 80b7 	beq.w	8009186 <_ZN3pxt2gcEi+0x226>
    RefBlock *prevFreePtr = NULL;
 8009018:	46ba      	mov	sl, r7
    uint32_t totalSize = 0;
 800901a:	46bb      	mov	fp, r7
 800901c:	4647      	mov	r7, r8
 800901e:	46d0      	mov	r8, sl
        auto words = h->blockSize >> 2;
 8009020:	687b      	ldr	r3, [r7, #4]
        auto d = h->data;
 8009022:	f107 0508 	add.w	r5, r7, #8
        auto words = h->blockSize >> 2;
 8009026:	089b      	lsrs	r3, r3, #2
        auto end = d + words;
 8009028:	eb05 0683 	add.w	r6, r5, r3, lsl #2
        while (d < end) {
 800902c:	42b5      	cmp	r5, r6
        totalSize += words;
 800902e:	449b      	add	fp, r3
        while (d < end) {
 8009030:	d243      	bcs.n	80090ba <_ZN3pxt2gcEi+0x15a>
 8009032:	9700      	str	r7, [sp, #0]
            if (IS_LIVE(d->vtable)) {
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	07d8      	lsls	r0, r3, #31
 8009038:	d46a      	bmi.n	8009110 <_ZN3pxt2gcEi+0x1b0>
 800903a:	0f1a      	lsrs	r2, r3, #28
 800903c:	2a06      	cmp	r2, #6
 800903e:	d067      	beq.n	8009110 <_ZN3pxt2gcEi+0x1b0>
                while (d < end) {
 8009040:	42ae      	cmp	r6, r5
 8009042:	f240 8085 	bls.w	8009150 <_ZN3pxt2gcEi+0x1f0>
 8009046:	462c      	mov	r4, r5
 8009048:	e000      	b.n	800904c <_ZN3pxt2gcEi+0xec>
 800904a:	6823      	ldr	r3, [r4, #0]
                    if (IS_FREE(d->vtable)) {
 800904c:	2b00      	cmp	r3, #0
                    } else if (IS_LIVE(d->vtable)) {
 800904e:	ea4f 7213 	mov.w	r2, r3, lsr #28
                    if (IS_FREE(d->vtable)) {
 8009052:	db0f      	blt.n	8009074 <_ZN3pxt2gcEi+0x114>
                    } else if (IS_LIVE(d->vtable)) {
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	d464      	bmi.n	8009122 <_ZN3pxt2gcEi+0x1c2>
 8009058:	2a06      	cmp	r2, #6
 800905a:	d062      	beq.n	8009122 <_ZN3pxt2gcEi+0x1c2>
                    } else if (IS_ARRAY(d->vtable)) {
 800905c:	005a      	lsls	r2, r3, #1
 800905e:	d409      	bmi.n	8009074 <_ZN3pxt2gcEi+0x114>
                        GC_CHECK(((VTable *)d->vtable)->magic == VTABLE_MAGIC, 41);
 8009060:	78db      	ldrb	r3, [r3, #3]
 8009062:	2bf9      	cmp	r3, #249	; 0xf9
 8009064:	d003      	beq.n	800906e <_ZN3pxt2gcEi+0x10e>
    target_panic(800 + subcode);
 8009066:	f240 3049 	movw	r0, #841	; 0x349
 800906a:	f7f7 fc71 	bl	8000950 <target_panic>
                        d->destroyVT();
 800906e:	4620      	mov	r0, r4
 8009070:	f000 fbcc 	bl	800980c <_ZN3pxt9RefObject9destroyVTEv>
                    d += getObjectSize(d);
 8009074:	4620      	mov	r0, r4
 8009076:	f7ff fe6d 	bl	8008d54 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800907a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                while (d < end) {
 800907e:	42a6      	cmp	r6, r4
 8009080:	d8e3      	bhi.n	800904a <_ZN3pxt2gcEi+0xea>
 8009082:	1b67      	subs	r7, r4, r5
 8009084:	ea4f 0ca7 	mov.w	ip, r7, asr #2
 8009088:	ea4f 098c 	mov.w	r9, ip, lsl #2
                memset(start, 0xff, sz << 2);
 800908c:	464a      	mov	r2, r9
 800908e:	21ff      	movs	r1, #255	; 0xff
 8009090:	4628      	mov	r0, r5
 8009092:	44e0      	add	r8, ip
 8009094:	f7fa fd8c 	bl	8003bb0 <memset>
                start->vtable = (sz << 2) | FREE_MASK;
 8009098:	f049 4200 	orr.w	r2, r9, #2147483648	; 0x80000000
                if (sz > 1) {
 800909c:	2f04      	cmp	r7, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800909e:	602a      	str	r2, [r5, #0]
                if (sz > 1) {
 80090a0:	dd0a      	ble.n	80090b8 <_ZN3pxt2gcEi+0x158>
                    start->nextFree = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	606b      	str	r3, [r5, #4]
                    if (!prevFreePtr) {
 80090a6:	f1ba 0f00 	cmp.w	sl, #0
 80090aa:	d04c      	beq.n	8009146 <_ZN3pxt2gcEi+0x1e6>
                        prevFreePtr->nextFree = start;
 80090ac:	f8ca 5004 	str.w	r5, [sl, #4]
 80090b0:	46aa      	mov	sl, r5
 80090b2:	4625      	mov	r5, r4
        while (d < end) {
 80090b4:	42ae      	cmp	r6, r5
 80090b6:	d8bd      	bhi.n	8009034 <_ZN3pxt2gcEi+0xd4>
 80090b8:	9f00      	ldr	r7, [sp, #0]
    for (auto h = firstBlock; h; h = h->next) {
 80090ba:	683f      	ldr	r7, [r7, #0]
 80090bc:	2f00      	cmp	r7, #0
 80090be:	d1af      	bne.n	8009020 <_ZN3pxt2gcEi+0xc0>
 80090c0:	4647      	mov	r7, r8
    if (midPtr) {
 80090c2:	4d3a      	ldr	r5, [pc, #232]	; (80091ac <_ZN3pxt2gcEi+0x24c>)
 80090c4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	00b9      	lsls	r1, r7, #2
 80090cc:	b193      	cbz	r3, 80090f4 <_ZN3pxt2gcEi+0x194>
        for (auto p = firstFree; p; p = p->nextFree) {
 80090ce:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <_ZN3pxt2gcEi+0x248>)
        auto limit = freeSize >> 1;
 80090d0:	087f      	lsrs	r7, r7, #1
        for (auto p = firstFree; p; p = p->nextFree) {
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b173      	cbz	r3, 80090f4 <_ZN3pxt2gcEi+0x194>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80090d6:	681c      	ldr	r4, [r3, #0]
 80090d8:	f3c4 0491 	ubfx	r4, r4, #2, #18
            if (currFree > limit) {
 80090dc:	42bc      	cmp	r4, r7
 80090de:	d906      	bls.n	80090ee <_ZN3pxt2gcEi+0x18e>
 80090e0:	e043      	b.n	800916a <_ZN3pxt2gcEi+0x20a>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	f3c0 0091 	ubfx	r0, r0, #2, #18
 80090e8:	4404      	add	r4, r0
            if (currFree > limit) {
 80090ea:	42a7      	cmp	r7, r4
 80090ec:	d33d      	bcc.n	800916a <_ZN3pxt2gcEi+0x20a>
        for (auto p = firstFree; p; p = p->nextFree) {
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f6      	bne.n	80090e2 <_ZN3pxt2gcEi+0x182>
    if (flags & 1)
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	07db      	lsls	r3, r3, #31
 80090f8:	d502      	bpl.n	8009100 <_ZN3pxt2gcEi+0x1a0>
        DMESG("GC %d/%d free", freeSize, totalSize);
 80090fa:	482d      	ldr	r0, [pc, #180]	; (80091b0 <_ZN3pxt2gcEi+0x250>)
 80090fc:	f001 fc9e 	bl	800aa3c <codal_dmesg>
    inGC &= ~IN_GC_COLLECT;
 8009100:	4a22      	ldr	r2, [pc, #136]	; (800918c <_ZN3pxt2gcEi+0x22c>)
 8009102:	7813      	ldrb	r3, [r2, #0]
 8009104:	f023 0302 	bic.w	r3, r3, #2
 8009108:	7013      	strb	r3, [r2, #0]
}
 800910a:	b003      	add	sp, #12
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                d->vtable &= ~MARKED_MASK;
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	602b      	str	r3, [r5, #0]
                d += getObjectSize(d);
 8009116:	4628      	mov	r0, r5
 8009118:	f7ff fe1c 	bl	8008d54 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800911c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8009120:	e7c8      	b.n	80090b4 <_ZN3pxt2gcEi+0x154>
 8009122:	eba4 0905 	sub.w	r9, r4, r5
 8009126:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800912a:	009a      	lsls	r2, r3, #2
                memset(start, 0xff, sz << 2);
 800912c:	21ff      	movs	r1, #255	; 0xff
 800912e:	4628      	mov	r0, r5
 8009130:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
 8009134:	4498      	add	r8, r3
 8009136:	f7fa fd3b 	bl	8003bb0 <memset>
                if (sz > 1) {
 800913a:	f1b9 0f04 	cmp.w	r9, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800913e:	602f      	str	r7, [r5, #0]
                if (sz > 1) {
 8009140:	dcaf      	bgt.n	80090a2 <_ZN3pxt2gcEi+0x142>
 8009142:	4625      	mov	r5, r4
 8009144:	e7b6      	b.n	80090b4 <_ZN3pxt2gcEi+0x154>
                        firstFree = start;
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <_ZN3pxt2gcEi+0x248>)
 8009148:	46aa      	mov	sl, r5
 800914a:	601d      	str	r5, [r3, #0]
 800914c:	4625      	mov	r5, r4
 800914e:	e7b1      	b.n	80090b4 <_ZN3pxt2gcEi+0x154>
                start->vtable = (sz << 2) | FREE_MASK;
 8009150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	e7ad      	b.n	80090b4 <_ZN3pxt2gcEi+0x154>
        DMESG("--MARK");
 8009158:	4816      	ldr	r0, [pc, #88]	; (80091b4 <_ZN3pxt2gcEi+0x254>)
 800915a:	f001 fc6f 	bl	800aa3c <codal_dmesg>
        DMESG("RP:%p/%d", data, len);
 800915e:	462a      	mov	r2, r5
 8009160:	4621      	mov	r1, r4
 8009162:	4815      	ldr	r0, [pc, #84]	; (80091b8 <_ZN3pxt2gcEi+0x258>)
 8009164:	f001 fc6a 	bl	800aa3c <codal_dmesg>
 8009168:	e714      	b.n	8008f94 <_ZN3pxt2gcEi+0x34>
                midPtr = (uint8_t *)p + ((currFree - limit) << 2);
 800916a:	1be7      	subs	r7, r4, r7
 800916c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	e7bf      	b.n	80090f4 <_ZN3pxt2gcEi+0x194>
            DMESG("RG:%p/%d", data, len);
 8009174:	463a      	mov	r2, r7
 8009176:	4629      	mov	r1, r5
 8009178:	4810      	ldr	r0, [pc, #64]	; (80091bc <_ZN3pxt2gcEi+0x25c>)
 800917a:	f001 fc5f 	bl	800aa3c <codal_dmesg>
        for (unsigned i = 0; i < len; ++i) {
 800917e:	2f00      	cmp	r7, #0
 8009180:	f47f af2b 	bne.w	8008fda <_ZN3pxt2gcEi+0x7a>
 8009184:	e731      	b.n	8008fea <_ZN3pxt2gcEi+0x8a>
    for (auto h = firstBlock; h; h = h->next) {
 8009186:	4642      	mov	r2, r8
 8009188:	4641      	mov	r1, r8
 800918a:	e7b3      	b.n	80090f4 <_ZN3pxt2gcEi+0x194>
 800918c:	2000166c 	.word	0x2000166c
 8009190:	20001018 	.word	0x20001018
 8009194:	20001030 	.word	0x20001030
 8009198:	20001034 	.word	0x20001034
 800919c:	2000166d 	.word	0x2000166d
 80091a0:	20001020 	.word	0x20001020
 80091a4:	20001010 	.word	0x20001010
 80091a8:	20001024 	.word	0x20001024
 80091ac:	20001014 	.word	0x20001014
 80091b0:	0800ceb8 	.word	0x0800ceb8
 80091b4:	0800ce98 	.word	0x0800ce98
 80091b8:	0800cea0 	.word	0x0800cea0
 80091bc:	0800ceac 	.word	0x0800ceac

080091c0 <_ZN3pxtL13allocateBlockEv>:
__attribute__((noinline)) static void allocateBlock() {
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (firstBlock) {
 80091c2:	4e30      	ldr	r6, [pc, #192]	; (8009284 <_ZN3pxtL13allocateBlockEv+0xc4>)
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	b12b      	cbz	r3, 80091d4 <_ZN3pxtL13allocateBlockEv+0x14>
        gc(2); // dump roots
 80091c8:	2002      	movs	r0, #2
 80091ca:	f7ff fec9 	bl	8008f60 <_ZN3pxt2gcEi>
        target_panic(PANIC_GC_OOM);
 80091ce:	2015      	movs	r0, #21
 80091d0:	f7f7 fbbe 	bl	8000950 <target_panic>
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80091d4:	2100      	movs	r1, #0
 80091d6:	20cf      	movs	r0, #207	; 0xcf
 80091d8:	f7fe febe 	bl	8007f58 <_ZN3pxt9getConfigEii>
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80091dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80091e0:	4607      	mov	r7, r0
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80091e2:	20ce      	movs	r0, #206	; 0xce
 80091e4:	f7fe feb8 	bl	8007f58 <_ZN3pxt9getConfigEii>
 80091e8:	4604      	mov	r4, r0
    auto heapSize = GC_GET_HEAP_SIZE();
 80091ea:	2000      	movs	r0, #0
 80091ec:	f002 f8fc 	bl	800b3e8 <_Z16device_heap_sizeh>
    sz = heapSize - sysHeapSize;
 80091f0:	1b04      	subs	r4, r0, r4
    if (lowMem) {
 80091f2:	b15f      	cbz	r7, 800920c <_ZN3pxtL13allocateBlockEv+0x4c>
        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;
 80091f4:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 80091f8:	307f      	adds	r0, #127	; 0x7f
 80091fa:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80091fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
        int fillerSize = memSize - lowMem * 1024;
 8009202:	eba3 2787 	sub.w	r7, r3, r7, lsl #10
        if (fillerSize > 0) {
 8009206:	2f00      	cmp	r7, #0
 8009208:	dc24      	bgt.n	8009254 <_ZN3pxtL13allocateBlockEv+0x94>
 800920a:	2700      	movs	r7, #0
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 800920c:	4620      	mov	r0, r4
 800920e:	f002 f945 	bl	800b49c <device_malloc>
    curr->blockSize = sz - sizeof(GCBlock);
 8009212:	f1a4 0208 	sub.w	r2, r4, #8
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 8009216:	0793      	lsls	r3, r2, #30
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 8009218:	4605      	mov	r5, r0
    curr->blockSize = sz - sizeof(GCBlock);
 800921a:	6042      	str	r2, [r0, #4]
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 800921c:	d120      	bne.n	8009260 <_ZN3pxtL13allocateBlockEv+0xa0>
    curr->next = NULL;
 800921e:	2000      	movs	r0, #0
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009220:	4b19      	ldr	r3, [pc, #100]	; (8009288 <_ZN3pxtL13allocateBlockEv+0xc8>)
    curr->data[4].vtable = (uint32_t)dummy;
 8009222:	61af      	str	r7, [r5, #24]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009224:	6819      	ldr	r1, [r3, #0]
    firstFree = (RefBlock *)curr->data;
 8009226:	f105 0708 	add.w	r7, r5, #8
    if (!firstBlock) {
 800922a:	6834      	ldr	r4, [r6, #0]
    firstFree = (RefBlock *)curr->data;
 800922c:	601f      	str	r7, [r3, #0]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 800922e:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    curr->next = NULL;
 8009232:	6028      	str	r0, [r5, #0]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009234:	60e9      	str	r1, [r5, #12]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 8009236:	60ab      	str	r3, [r5, #8]
    if (!firstBlock) {
 8009238:	b90c      	cbnz	r4, 800923e <_ZN3pxtL13allocateBlockEv+0x7e>
 800923a:	e017      	b.n	800926c <_ZN3pxtL13allocateBlockEv+0xac>
 800923c:	461c      	mov	r4, r3
            if (!p->next) {
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1fb      	bne.n	800923c <_ZN3pxtL13allocateBlockEv+0x7c>
                GC_CHECK(p < curr, 40); // required by midPtr stuff
 8009244:	42a5      	cmp	r5, r4
 8009246:	d917      	bls.n	8009278 <_ZN3pxtL13allocateBlockEv+0xb8>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009248:	4b10      	ldr	r3, [pc, #64]	; (800928c <_ZN3pxtL13allocateBlockEv+0xcc>)
 800924a:	eb07 0292 	add.w	r2, r7, r2, lsr #2
                p->next = curr;
 800924e:	6025      	str	r5, [r4, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            dummy = GC_ALLOC_BLOCK(fillerSize);
 8009254:	4638      	mov	r0, r7
 8009256:	f002 f921 	bl	800b49c <device_malloc>
            sz -= fillerSize;
 800925a:	1be4      	subs	r4, r4, r7
 800925c:	4607      	mov	r7, r0
 800925e:	e7d5      	b.n	800920c <_ZN3pxtL13allocateBlockEv+0x4c>
 8009260:	f44f 7052 	mov.w	r0, #840	; 0x348
 8009264:	f7f7 fb74 	bl	8000950 <target_panic>
 8009268:	686a      	ldr	r2, [r5, #4]
 800926a:	e7d8      	b.n	800921e <_ZN3pxtL13allocateBlockEv+0x5e>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <_ZN3pxtL13allocateBlockEv+0xcc>)
 800926e:	eb07 0292 	add.w	r2, r7, r2, lsr #2
        firstBlock = curr;
 8009272:	6035      	str	r5, [r6, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009274:	601a      	str	r2, [r3, #0]
}
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	f44f 7052 	mov.w	r0, #840	; 0x348
 800927c:	f7f7 fb68 	bl	8000950 <target_panic>
 8009280:	686a      	ldr	r2, [r5, #4]
 8009282:	e7e1      	b.n	8009248 <_ZN3pxtL13allocateBlockEv+0x88>
 8009284:	20001010 	.word	0x20001010
 8009288:	20001024 	.word	0x20001024
 800928c:	20001014 	.word	0x20001014

08009290 <free>:
    if (!ptr)
 8009290:	b1f0      	cbz	r0, 80092d0 <free+0x40>
    for (auto block = firstBlock; block; block = block->next) {
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <free+0x44>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	b1cb      	cbz	r3, 80092cc <free+0x3c>
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8009298:	f103 0208 	add.w	r2, r3, #8
 800929c:	4290      	cmp	r0, r2
 800929e:	d9f9      	bls.n	8009294 <free+0x4>
 80092a0:	6859      	ldr	r1, [r3, #4]
 80092a2:	440a      	add	r2, r1
 80092a4:	4290      	cmp	r0, r2
 80092a6:	d2f5      	bcs.n	8009294 <free+0x4>
    GC_CHECK((r[-1] >> 29) == 3, 41);
 80092a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
extern "C" void free(void *ptr) {
 80092ac:	b510      	push	{r4, lr}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 80092ae:	0f5a      	lsrs	r2, r3, #29
 80092b0:	2a03      	cmp	r2, #3
 80092b2:	4604      	mov	r4, r0
 80092b4:	d005      	beq.n	80092c2 <free+0x32>
 80092b6:	f240 3049 	movw	r0, #841	; 0x349
 80092ba:	f7f7 fb49 	bl	8000950 <target_panic>
 80092be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    r[-1] |= FREE_MASK;
 80092c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092c6:	f844 3c04 	str.w	r3, [r4, #-4]
}
 80092ca:	bd10      	pop	{r4, pc}
        xfree(ptr);
 80092cc:	f002 b90c 	b.w	800b4e8 <device_free>
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20001010 	.word	0x20001010

080092d8 <_ZN3pxt10gcAllocateEi>:
void *gcAllocate(int numbytes) {
 80092d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (numbytes > GC_MAX_ALLOC_SIZE)
 80092dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    size_t numwords = (numbytes + 3) >> 2;
 80092e0:	f100 0703 	add.w	r7, r0, #3
 80092e4:	ea4f 07a7 	mov.w	r7, r7, asr #2
    if (numbytes > GC_MAX_ALLOC_SIZE)
 80092e8:	dc73      	bgt.n	80093d2 <_ZN3pxt10gcAllocateEi+0xfa>
    if (PXT_IN_ISR() || (inGC & IN_GC_ALLOC))
 80092ea:	f7f7 f977 	bl	80005dc <target_in_isr>
 80092ee:	f8df a108 	ldr.w	sl, [pc, #264]	; 80093f8 <_ZN3pxt10gcAllocateEi+0x120>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d13e      	bne.n	8009374 <_ZN3pxt10gcAllocateEi+0x9c>
 80092f6:	f89a 3000 	ldrb.w	r3, [sl]
 80092fa:	07da      	lsls	r2, r3, #31
 80092fc:	d43a      	bmi.n	8009374 <_ZN3pxt10gcAllocateEi+0x9c>
    inGC |= IN_GC_ALLOC;
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	f88a 3000 	strb.w	r3, [sl]
        auto curr = getThreadContext();
 8009306:	f000 fe3b 	bl	8009f80 <_ZN3pxt16getThreadContextEv>
        if (curr && !curr->stack.top)
 800930a:	b110      	cbz	r0, 8009312 <_ZN3pxt10gcAllocateEi+0x3a>
 800930c:	6843      	ldr	r3, [r0, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d06c      	beq.n	80093ec <_ZN3pxt10gcAllocateEi+0x114>
void *gcAllocate(int numbytes) {
 8009312:	2600      	movs	r6, #0
 8009314:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80093fc <_ZN3pxt10gcAllocateEi+0x124>
            if (i == 0 && (uint8_t *)p > midPtr)
 8009318:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009400 <_ZN3pxt10gcAllocateEi+0x128>
        for (auto p = firstFree; p; p = p->nextFree) {
 800931c:	f8db 4000 	ldr.w	r4, [fp]
 8009320:	b1fc      	cbz	r4, 8009362 <_ZN3pxt10gcAllocateEi+0x8a>
        RefBlock *prev = NULL;
 8009322:	f04f 0800 	mov.w	r8, #0
            if (i == 0 && (uint8_t *)p > midPtr)
 8009326:	b91e      	cbnz	r6, 8009330 <_ZN3pxt10gcAllocateEi+0x58>
 8009328:	f8d9 3000 	ldr.w	r3, [r9]
 800932c:	42a3      	cmp	r3, r4
 800932e:	d349      	bcc.n	80093c4 <_ZN3pxt10gcAllocateEi+0xec>
    return ((intptr_t)v & 3) || !v;
 8009330:	07a3      	lsls	r3, r4, #30
 8009332:	d101      	bne.n	8009338 <_ZN3pxt10gcAllocateEi+0x60>
    return isTagged(v) || !((uint32_t)v >> 28);
 8009334:	0f23      	lsrs	r3, r4, #28
 8009336:	d103      	bne.n	8009340 <_ZN3pxt10gcAllocateEi+0x68>
    target_panic(800 + subcode);
 8009338:	f240 3051 	movw	r0, #849	; 0x351
 800933c:	f7f7 fb08 	bl	8000950 <target_panic>
            auto vt = p->vtable;
 8009340:	6825      	ldr	r5, [r4, #0]
            if (!IS_FREE(vt))
 8009342:	2d00      	cmp	r5, #0
 8009344:	db03      	blt.n	800934e <_ZN3pxt10gcAllocateEi+0x76>
 8009346:	f240 304b 	movw	r0, #843	; 0x34b
 800934a:	f7f7 fb01 	bl	8000950 <target_panic>
            int left = VAR_BLOCK_WORDS(vt) - numwords;
 800934e:	f3c5 0591 	ubfx	r5, r5, #2, #18
 8009352:	1bed      	subs	r5, r5, r7
            if (left >= 0) {
 8009354:	2d00      	cmp	r5, #0
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	da13      	bge.n	8009382 <_ZN3pxt10gcAllocateEi+0xaa>
 800935a:	46a0      	mov	r8, r4
        for (auto p = firstFree; p; p = p->nextFree) {
 800935c:	461c      	mov	r4, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e1      	bne.n	8009326 <_ZN3pxt10gcAllocateEi+0x4e>
        if (i == 0)
 8009362:	b37e      	cbz	r6, 80093c4 <_ZN3pxt10gcAllocateEi+0xec>
        else if (i == 1)
 8009364:	2e01      	cmp	r6, #1
 8009366:	d031      	beq.n	80093cc <_ZN3pxt10gcAllocateEi+0xf4>
 8009368:	f44f 7053 	mov.w	r0, #844	; 0x34c
 800936c:	f7f7 faf0 	bl	8000950 <target_panic>
    for (int i = 0;; ++i) {
 8009370:	3601      	adds	r6, #1
    }
 8009372:	e7d3      	b.n	800931c <_ZN3pxt10gcAllocateEi+0x44>
        target_panic(PANIC_CALLED_FROM_ISR);
 8009374:	f240 3092 	movw	r0, #914	; 0x392
 8009378:	f7f7 faea 	bl	8000950 <target_panic>
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	e7bd      	b.n	80092fe <_ZN3pxt10gcAllocateEi+0x26>
                if (left)
 8009382:	d00a      	beq.n	800939a <_ZN3pxt10gcAllocateEi+0xc2>
                    nf->vtable = (left << 2) | FREE_MASK;
 8009384:	00aa      	lsls	r2, r5, #2
 8009386:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800938a:	f844 2027 	str.w	r2, [r4, r7, lsl #2]
                if (left >= 2) {
 800938e:	2d01      	cmp	r5, #1
                auto nf = (RefBlock *)((void **)p + numwords);
 8009390:	eb04 0787 	add.w	r7, r4, r7, lsl #2
                    nf->nextFree = nextFree;
 8009394:	bf1c      	itt	ne
 8009396:	607b      	strne	r3, [r7, #4]
 8009398:	463b      	movne	r3, r7
                if (prev)
 800939a:	f1b8 0f00 	cmp.w	r8, #0
 800939e:	d01d      	beq.n	80093dc <_ZN3pxt10gcAllocateEi+0x104>
                    prev->nextFree = nf;
 80093a0:	f8c8 3004 	str.w	r3, [r8, #4]
                p->vtable = 0;
 80093a4:	2200      	movs	r2, #0
 80093a6:	6022      	str	r2, [r4, #0]
                GC_CHECK(!nf || !nf->nextFree || ((uint32_t)nf->nextFree) >> 20, 48);
 80093a8:	b11b      	cbz	r3, 80093b2 <_ZN3pxt10gcAllocateEi+0xda>
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	b10b      	cbz	r3, 80093b2 <_ZN3pxt10gcAllocateEi+0xda>
 80093ae:	0d1b      	lsrs	r3, r3, #20
 80093b0:	d017      	beq.n	80093e2 <_ZN3pxt10gcAllocateEi+0x10a>
                inGC &= ~IN_GC_ALLOC;
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
}
 80093b6:	4620      	mov	r0, r4
                inGC &= ~IN_GC_ALLOC;
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	f88a 3000 	strb.w	r3, [sl]
}
 80093c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gc(0);
 80093c4:	2000      	movs	r0, #0
 80093c6:	f7ff fdcb 	bl	8008f60 <_ZN3pxt2gcEi>
 80093ca:	e7d1      	b.n	8009370 <_ZN3pxt10gcAllocateEi+0x98>
            allocateBlock();
 80093cc:	f7ff fef8 	bl	80091c0 <_ZN3pxtL13allocateBlockEv>
 80093d0:	e7ce      	b.n	8009370 <_ZN3pxt10gcAllocateEi+0x98>
 80093d2:	f240 304d 	movw	r0, #845	; 0x34d
 80093d6:	f7f7 fabb 	bl	8000950 <target_panic>
 80093da:	e786      	b.n	80092ea <_ZN3pxt10gcAllocateEi+0x12>
                    firstFree = nf;
 80093dc:	f8cb 3000 	str.w	r3, [fp]
 80093e0:	e7e0      	b.n	80093a4 <_ZN3pxt10gcAllocateEi+0xcc>
 80093e2:	f44f 7054 	mov.w	r0, #848	; 0x350
 80093e6:	f7f7 fab3 	bl	8000950 <target_panic>
 80093ea:	e7e2      	b.n	80093b2 <_ZN3pxt10gcAllocateEi+0xda>
 80093ec:	f240 304e 	movw	r0, #846	; 0x34e
 80093f0:	f7f7 faae 	bl	8000950 <target_panic>
 80093f4:	e78d      	b.n	8009312 <_ZN3pxt10gcAllocateEi+0x3a>
 80093f6:	bf00      	nop
 80093f8:	2000166c 	.word	0x2000166c
 80093fc:	20001024 	.word	0x20001024
 8009400:	20001014 	.word	0x20001014

08009404 <_ZN3pxt15gcAllocateArrayEi>:
void *gcAllocateArray(int numbytes) {
 8009404:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8009406:	1cc4      	adds	r4, r0, #3
 8009408:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 800940c:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff ff62 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
    *r = ARRAY_MASK | numbytes;
 8009414:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8009418:	f840 4b04 	str.w	r4, [r0], #4
}
 800941c:	bd10      	pop	{r4, pc}
 800941e:	bf00      	nop

08009420 <app_alloc>:
    if (!numbytes)
 8009420:	b160      	cbz	r0, 800943c <app_alloc+0x1c>
void *app_alloc(int numbytes) {
 8009422:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8009424:	1cc4      	adds	r4, r0, #3
 8009426:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 800942a:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 800942c:	4620      	mov	r0, r4
 800942e:	f7ff ff53 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8009432:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8009436:	6004      	str	r4, [r0, #0]
    return r + 1;
 8009438:	3004      	adds	r0, #4
}
 800943a:	bd10      	pop	{r4, pc}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop

08009440 <malloc>:
extern "C" void *malloc(size_t sz) {
 8009440:	b510      	push	{r4, lr}
 8009442:	4604      	mov	r4, r0
    if (PXT_IN_ISR() || inGC)
 8009444:	f7f7 f8ca 	bl	80005dc <target_in_isr>
 8009448:	b910      	cbnz	r0, 8009450 <malloc+0x10>
 800944a:	4b06      	ldr	r3, [pc, #24]	; (8009464 <malloc+0x24>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b123      	cbz	r3, 800945a <malloc+0x1a>
        return xmalloc(sz);
 8009450:	4620      	mov	r0, r4
}
 8009452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return xmalloc(sz);
 8009456:	f002 b821 	b.w	800b49c <device_malloc>
        return app_alloc(sz);
 800945a:	4620      	mov	r0, r4
}
 800945c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return app_alloc(sz);
 8009460:	f7ff bfde 	b.w	8009420 <app_alloc>
 8009464:	2000166c 	.word	0x2000166c

08009468 <realloc>:
    for (auto block = firstBlock; block; block = block->next) {
 8009468:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <realloc+0x70>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	b393      	cbz	r3, 80094d4 <realloc+0x6c>
extern "C" void *realloc(void *ptr, size_t size) {
 800946e:	b570      	push	{r4, r5, r6, lr}
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8009470:	f103 0408 	add.w	r4, r3, #8
 8009474:	42a0      	cmp	r0, r4
 8009476:	d903      	bls.n	8009480 <realloc+0x18>
 8009478:	685d      	ldr	r5, [r3, #4]
 800947a:	442c      	add	r4, r5
 800947c:	42a0      	cmp	r0, r4
 800947e:	d306      	bcc.n	800948e <realloc+0x26>
    for (auto block = firstBlock; block; block = block->next) {
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1f4      	bne.n	8009470 <realloc+0x8>
}
 8009486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return device_realloc(ptr, size);
 800948a:	f002 b85d 	b.w	800b548 <device_realloc>
 800948e:	4604      	mov	r4, r0
        void *mem = malloc(size);
 8009490:	4608      	mov	r0, r1
 8009492:	460d      	mov	r5, r1
 8009494:	f7ff ffd4 	bl	8009440 <malloc>
 8009498:	4606      	mov	r6, r0
        if (ptr != NULL && mem != NULL) {
 800949a:	b194      	cbz	r4, 80094c2 <realloc+0x5a>
 800949c:	b18e      	cbz	r6, 80094c2 <realloc+0x5a>
            GC_CHECK((r[-1] >> 29) == 3, 41);
 800949e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80094a2:	0f5a      	lsrs	r2, r3, #29
 80094a4:	2a03      	cmp	r2, #3
 80094a6:	d10e      	bne.n	80094c6 <realloc+0x5e>
            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);
 80094a8:	f3c3 0391 	ubfx	r3, r3, #2, #18
            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));
 80094ac:	009a      	lsls	r2, r3, #2
 80094ae:	42aa      	cmp	r2, r5
 80094b0:	bf28      	it	cs
 80094b2:	462a      	movcs	r2, r5
 80094b4:	4621      	mov	r1, r4
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7fa fb32 	bl	8003b20 <memcpy>
            free(ptr);
 80094bc:	4620      	mov	r0, r4
 80094be:	f7ff fee7 	bl	8009290 <free>
}
 80094c2:	4630      	mov	r0, r6
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
 80094c6:	f240 3049 	movw	r0, #841	; 0x349
 80094ca:	f7f7 fa41 	bl	8000950 <target_panic>
 80094ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80094d2:	e7e9      	b.n	80094a8 <realloc+0x40>
        return device_realloc(ptr, size);
 80094d4:	f002 b838 	b.w	800b548 <device_realloc>
 80094d8:	20001010 	.word	0x20001010

080094dc <_ZN3pxt17pushThreadContextEPvS0_>:
ThreadContext *pushThreadContext(void *sp, void *endSP) {
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	4606      	mov	r6, r0
 80094e0:	460f      	mov	r7, r1
    if (PXT_IN_ISR())
 80094e2:	f7f7 f87b 	bl	80005dc <target_in_isr>
 80094e6:	bb58      	cbnz	r0, 8009540 <_ZN3pxt17pushThreadContextEPvS0_+0x64>
    auto curr = getThreadContext();
 80094e8:	f000 fd4a 	bl	8009f80 <_ZN3pxt16getThreadContextEv>
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 80094ec:	4d17      	ldr	r5, [pc, #92]	; (800954c <_ZN3pxt17pushThreadContextEPvS0_+0x70>)
 80094ee:	1bf3      	subs	r3, r6, r7
    tempRoot = (TValue *)endSP;
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <_ZN3pxt17pushThreadContextEPvS0_+0x74>)
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 80094f2:	109b      	asrs	r3, r3, #2
 80094f4:	702b      	strb	r3, [r5, #0]
    if (curr) {
 80094f6:	4604      	mov	r4, r0
    tempRoot = (TValue *)endSP;
 80094f8:	6017      	str	r7, [r2, #0]
    if (curr) {
 80094fa:	b190      	cbz	r0, 8009522 <_ZN3pxt17pushThreadContextEPvS0_+0x46>
    auto r = (uint32_t *)gcAllocate(numbytes);
 80094fc:	2010      	movs	r0, #16
 80094fe:	f7ff feeb 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8009502:	4b14      	ldr	r3, [pc, #80]	; (8009554 <_ZN3pxt17pushThreadContextEPvS0_+0x78>)
        seg->top = curr->stack.top;
 8009504:	6862      	ldr	r2, [r4, #4]
    r[-1] |= PERMA_MASK;
 8009506:	6003      	str	r3, [r0, #0]
        seg->bottom = curr->stack.bottom;
 8009508:	68a3      	ldr	r3, [r4, #8]
        seg->top = curr->stack.top;
 800950a:	6042      	str	r2, [r0, #4]
        seg->next = curr->stack.next;
 800950c:	68e2      	ldr	r2, [r4, #12]
        seg->bottom = curr->stack.bottom;
 800950e:	6083      	str	r3, [r0, #8]
    return r + 1;
 8009510:	1d03      	adds	r3, r0, #4
        seg->next = curr->stack.next;
 8009512:	60c2      	str	r2, [r0, #12]
        curr->stack.next = seg;
 8009514:	60e3      	str	r3, [r4, #12]
    tempRootLen = 0;
 8009516:	2300      	movs	r3, #0
    curr->stack.bottom = sp;
 8009518:	60a6      	str	r6, [r4, #8]
    tempRootLen = 0;
 800951a:	702b      	strb	r3, [r5, #0]
    curr->stack.top = NULL;
 800951c:	6063      	str	r3, [r4, #4]
}
 800951e:	4620      	mov	r0, r4
 8009520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    auto r = (uint32_t *)gcAllocate(numbytes);
 8009522:	2014      	movs	r0, #20
 8009524:	f7ff fed8 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
        curr->stack.next = NULL;
 8009528:	2300      	movs	r3, #0
        curr->globals = globals;
 800952a:	4a0b      	ldr	r2, [pc, #44]	; (8009558 <_ZN3pxt17pushThreadContextEPvS0_+0x7c>)
    r[-1] |= PERMA_MASK;
 800952c:	490b      	ldr	r1, [pc, #44]	; (800955c <_ZN3pxt17pushThreadContextEPvS0_+0x80>)
        curr->globals = globals;
 800952e:	6812      	ldr	r2, [r2, #0]
    return r + 1;
 8009530:	1d04      	adds	r4, r0, #4
    r[-1] |= PERMA_MASK;
 8009532:	6001      	str	r1, [r0, #0]
        curr->globals = globals;
 8009534:	6042      	str	r2, [r0, #4]
        curr->stack.next = NULL;
 8009536:	6103      	str	r3, [r0, #16]
        setThreadContext(curr);
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fd27 	bl	8009f8c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 800953e:	e7ea      	b.n	8009516 <_ZN3pxt17pushThreadContextEPvS0_+0x3a>
        target_panic(PANIC_CALLED_FROM_ISR);
 8009540:	f240 3092 	movw	r0, #914	; 0x392
 8009544:	f7f7 fa04 	bl	8000950 <target_panic>
 8009548:	e7ce      	b.n	80094e8 <_ZN3pxt17pushThreadContextEPvS0_+0xc>
 800954a:	bf00      	nop
 800954c:	2000166d 	.word	0x2000166d
 8009550:	20001020 	.word	0x20001020
 8009554:	60000010 	.word	0x60000010
 8009558:	20001030 	.word	0x20001030
 800955c:	60000014 	.word	0x60000014

08009560 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>:

void registerGC(TValue *root, int numwords) {
    if (!numwords)
 8009560:	b161      	cbz	r1, 800957c <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1c>
        return;

    if (numwords > 1) {
 8009562:	2901      	cmp	r1, #1
void registerGC(TValue *root, int numwords) {
 8009564:	b538      	push	{r3, r4, r5, lr}
    if (numwords > 1) {
 8009566:	dd0a      	ble.n	800957e <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1e>
        while (numwords-- > 0) {
 8009568:	1e4c      	subs	r4, r1, #1
 800956a:	3c01      	subs	r4, #1
            registerGC(root++, 1);
 800956c:	2101      	movs	r1, #1
 800956e:	1d05      	adds	r5, r0, #4
 8009570:	f7ff fff6 	bl	8009560 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
        while (numwords-- > 0) {
 8009574:	1c63      	adds	r3, r4, #1
            registerGC(root++, 1);
 8009576:	4628      	mov	r0, r5
        while (numwords-- > 0) {
 8009578:	d1f7      	bne.n	800956a <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0xa>
        }
        return;
    }

    gcRoots.push((TValue)((uint32_t)root | 1));
}
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x30>)
 8009580:	f040 0201 	orr.w	r2, r0, #1
 8009584:	8899      	ldrh	r1, [r3, #4]
 8009586:	4618      	mov	r0, r3
 8009588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958c:	f000 b956 	b.w	800983c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8009590:	20001018 	.word	0x20001018

08009594 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009594:	0783      	lsls	r3, r0, #30
 8009596:	d102      	bne.n	800959e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
 8009598:	b108      	cbz	r0, 800959e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
    return isTagged(v) || !((uint32_t)v >> 28);
 800959a:	0f03      	lsrs	r3, r0, #28
 800959c:	d100      	bne.n	80095a0 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xc>

void registerGCPtr(TValue ptr) {
    if (isReadOnly(ptr))
        return;
    gcRoots.push(ptr);
}
 800959e:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 80095a0:	4b02      	ldr	r3, [pc, #8]	; (80095ac <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0x18>)
 80095a2:	4602      	mov	r2, r0
 80095a4:	8899      	ldrh	r1, [r3, #4]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 b948 	b.w	800983c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 80095ac:	20001018 	.word	0x20001018

080095b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 80095b0:	0782      	lsls	r2, r0, #30

void unregisterGCPtr(TValue ptr) {
 80095b2:	4603      	mov	r3, r0
 80095b4:	d102      	bne.n	80095bc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
 80095b6:	b108      	cbz	r0, 80095bc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
    return isTagged(v) || !((uint32_t)v >> 28);
 80095b8:	0f1b      	lsrs	r3, r3, #28
 80095ba:	d100      	bne.n	80095be <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xe>
    if (isReadOnly(ptr))
        return;
    removePtr(ptr);
}
 80095bc:	4770      	bx	lr
    removePtr(ptr);
 80095be:	f7ff bbe9 	b.w	8008d94 <_ZN3pxtL9removePtrEPNS_12TValueStructE>
 80095c2:	bf00      	nop

080095c4 <_ZN3pxt13RefCollection4scanEPS0_>:
void RefImage::scan(RefImage *t) {
    gcScan((TValue)t->buffer());
}

void RefCollection::scan(RefCollection *t) {
    gcScanSegment(t->head);
 80095c4:	3004      	adds	r0, #4
 80095c6:	f7ff bc85 	b.w	8008ed4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80095ca:	bf00      	nop

080095cc <_ZN3pxt9RefAction4scanEPS0_>:
}

void RefAction::scan(RefAction *t) {
    gcScanMany(t->fields, t->len);
 80095cc:	8881      	ldrh	r1, [r0, #4]
 80095ce:	300c      	adds	r0, #12
 80095d0:	f7ff bc5c 	b.w	8008e8c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>

080095d4 <_ZN3pxt11RefRefLocal4scanEPS0_>:
}

void RefRefLocal::scan(RefRefLocal *t) {
    gcScan(t->v);
 80095d4:	6840      	ldr	r0, [r0, #4]
 80095d6:	f7ff bc3d 	b.w	8008e54 <_ZN3pxt6gcScanEPNS_12TValueStructE>
 80095da:	bf00      	nop

080095dc <_ZN3pxt6RefMap4scanEPS0_>:
}

void RefMap::scan(RefMap *t) {
 80095dc:	b510      	push	{r4, lr}
 80095de:	4604      	mov	r4, r0
    gcScanSegment(t->keys);
 80095e0:	3004      	adds	r0, #4
 80095e2:	f7ff fc77 	bl	8008ed4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
    gcScanSegment(t->values);
 80095e6:	f104 000c 	add.w	r0, r4, #12
}
 80095ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gcScanSegment(t->values);
 80095ee:	f7ff bc71 	b.w	8008ed4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80095f2:	bf00      	nop

080095f4 <_ZN3pxt14RefRecord_scanEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 80095f4:	f850 3b04 	ldr.w	r3, [r0], #4
 80095f8:	f023 0301 	bic.w	r3, r3, #1

void RefRecord_scan(RefRecord *r) {
    VTable *tbl = getVTable(r);
    gcScanMany(r->fields, (tbl->numbytes - sizeof(RefRecord)) >> 2);
 80095fc:	8819      	ldrh	r1, [r3, #0]
 80095fe:	3904      	subs	r1, #4
 8009600:	0889      	lsrs	r1, r1, #2
 8009602:	f7ff bc43 	b.w	8008e8c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
 8009606:	bf00      	nop

08009608 <_ZN3pxt13RefCollection6gcsizeEPS0_>:
    return SIZE(t->length());
}

unsigned RefCollection::gcsize(RefCollection *t) {
    return SIZE(0);
}
 8009608:	2003      	movs	r0, #3
 800960a:	4770      	bx	lr

0800960c <_ZN3pxt9RefAction6gcsizeEPS0_>:

unsigned RefAction::gcsize(RefAction *t) {
    return SIZE(t->len << 2);
 800960c:	8880      	ldrh	r0, [r0, #4]
 800960e:	0080      	lsls	r0, r0, #2
 8009610:	300f      	adds	r0, #15
}
 8009612:	0880      	lsrs	r0, r0, #2
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop

08009618 <_ZN3pxt11RefRefLocal6gcsizeEPS0_>:

unsigned RefRefLocal::gcsize(RefRefLocal *t) {
    return SIZE(0);
}
 8009618:	2002      	movs	r0, #2
 800961a:	4770      	bx	lr

0800961c <_ZN3pxt6RefMap6gcsizeEPS0_>:

unsigned RefMap::gcsize(RefMap *t) {
    return SIZE(0);
}
 800961c:	2005      	movs	r0, #5
 800961e:	4770      	bx	lr

08009620 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    LLSegment() : data(nullptr), length(0), size(0) {}
 8009620:	2300      	movs	r3, #0
 8009622:	4903      	ldr	r1, [pc, #12]	; (8009630 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x10>)
 8009624:	4a03      	ldr	r2, [pc, #12]	; (8009634 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x14>)
 8009626:	e9c1 3300 	strd	r3, r3, [r1]
 800962a:	e9c2 3300 	strd	r3, r3, [r2]

#endif

} // namespace pxt
 800962e:	4770      	bx	lr
 8009630:	20001018 	.word	0x20001018
 8009634:	20001028 	.word	0x20001028

08009638 <_ZN5loops7foreverEPN3pxt12TValueStructE>:
//
//
//
//
void forever(Action a) {
    runForever(a);
 8009638:	f000 bbd0 	b.w	8009ddc <_ZN3pxt10runForeverEPNS_12TValueStructE>

0800963c <_ZN5loops5pauseEi>:
//
//
//
//
void pause(int ms) {
    if (ms < 0) return;
 800963c:	2800      	cmp	r0, #0
 800963e:	db01      	blt.n	8009644 <_ZN5loops5pauseEi+0x8>
    sleep_ms(ms);
 8009640:	f000 bbc8 	b.w	8009dd4 <_ZN3pxt8sleep_msEj>
}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <_ZN3pxt17RefRecord_destroyEPNS_9RefRecordE>:
    for (int i = 0; i < len; ++i) {
        decr(r->fields[i]);
        r->fields[i] = 0;
    }
#endif
}
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop

0800964c <_ZN3pxt13RefCollection7destroyEPS0_>:
#ifdef DEBUG_BUILD
    DMESG("In Segment::destroy");
    this->print();
#endif
    length = size = 0;
    data = nullptr;
 800964c:	2300      	movs	r3, #0
 800964e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
        decr(data[i]);
    }
#endif
    t->head.destroy();
}
 8009652:	4770      	bx	lr

08009654 <_ZN3pxt6RefMap7destroyEPS0_>:
    data = nullptr;
 8009654:	2300      	movs	r3, #0
 8009656:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800965a:	e9c0 3303 	strd	r3, r3, [r0, #12]
        keys[i] = nullptr;
    }
#endif
    t->keys.destroy();
    t->values.destroy();
}
 800965e:	4770      	bx	lr

08009660 <_ZN3pxt9RefAction5printEPS0_>:
void RefAction::print(RefAction *t) {
 8009660:	4601      	mov	r1, r0
 8009662:	b500      	push	{lr}
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <_ZN3pxt9RefAction5printEPS0_+0x20>)
 8009666:	6880      	ldr	r0, [r0, #8]
 8009668:	888a      	ldrh	r2, [r1, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
void RefAction::print(RefAction *t) {
 800966c:	b083      	sub	sp, #12
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 800966e:	1ac3      	subs	r3, r0, r3
 8009670:	9200      	str	r2, [sp, #0]
 8009672:	4804      	ldr	r0, [pc, #16]	; (8009684 <_ZN3pxt9RefAction5printEPS0_+0x24>)
 8009674:	2200      	movs	r2, #0
 8009676:	f001 f9e1 	bl	800aa3c <codal_dmesg>
}
 800967a:	b003      	add	sp, #12
 800967c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009680:	20001034 	.word	0x20001034
 8009684:	0800d084 	.word	0x0800d084

08009688 <_ZN3pxt11RefRefLocal5printEPS0_>:
void RefRefLocal::print(RefRefLocal *t) {
 8009688:	4601      	mov	r1, r0
    DMESG("RefRefLocal %p r=%d v=%p", t, REFCNT(t), (void *)t->v);
 800968a:	6843      	ldr	r3, [r0, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	4801      	ldr	r0, [pc, #4]	; (8009694 <_ZN3pxt11RefRefLocal5printEPS0_+0xc>)
 8009690:	f001 b9d4 	b.w	800aa3c <codal_dmesg>
 8009694:	0800cec8 	.word	0x0800cec8

08009698 <_ZN3pxt6RefMap5printEPS0_>:
    }

    return -1;
}

void RefMap::print(RefMap *t) {
 8009698:	4601      	mov	r1, r0
    DMESG("RefMap %p r=%d size=%d", t, REFCNT(t), t->keys.getLength());
 800969a:	8903      	ldrh	r3, [r0, #8]
 800969c:	2200      	movs	r2, #0
 800969e:	4801      	ldr	r0, [pc, #4]	; (80096a4 <_ZN3pxt6RefMap5printEPS0_+0xc>)
 80096a0:	f001 b9cc 	b.w	800aa3c <codal_dmesg>
 80096a4:	0800d018 	.word	0x0800d018

080096a8 <_ZN3pxt9LLSegment9setLengthEj.part.5>:
void LLSegment::setLength(unsigned newLen) {
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (newLen > size) {
 80096aa:	88c3      	ldrh	r3, [r0, #6]
void LLSegment::setLength(unsigned newLen) {
 80096ac:	4605      	mov	r5, r0
    if (newLen > size) {
 80096ae:	428b      	cmp	r3, r1
void LLSegment::setLength(unsigned newLen) {
 80096b0:	460e      	mov	r6, r1
    if (newLen > size) {
 80096b2:	d225      	bcs.n	8009700 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x58>
    if (size == 0) {
 80096b4:	b39b      	cbz	r3, 800971e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x76>
    if (size < 64) {
 80096b6:	2b3f      	cmp	r3, #63	; 0x3f
 80096b8:	dd2f      	ble.n	800971a <_ZN3pxt9LLSegment9setLengthEj.part.5+0x72>
    if (size < 512) {
 80096ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096be:	db36      	blt.n	800972e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x86>
    if ((unsigned)size + 256 < Segment::MaxSize)
 80096c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
        return size + 256;
 80096c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if ((unsigned)size + 256 < Segment::MaxSize)
 80096c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
        return size + 256;
 80096cc:	4293      	cmp	r3, r2
 80096ce:	bf98      	it	ls
 80096d0:	461c      	movls	r4, r3
 80096d2:	42b4      	cmp	r4, r6
 80096d4:	bfb8      	it	lt
 80096d6:	4634      	movlt	r4, r6
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 80096d8:	00a0      	lsls	r0, r4, #2
 80096da:	f001 fedf 	bl	800b49c <device_malloc>
        if (size) {
 80096de:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 80096e0:	4607      	mov	r7, r0
        if (size) {
 80096e2:	b9f3      	cbnz	r3, 8009722 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x7a>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 80096e4:	1ae2      	subs	r2, r4, r3
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 80096ec:	2100      	movs	r1, #0
 80096ee:	f7fa fa5f 	bl	8003bb0 <memset>
        xfree(data);
 80096f2:	6828      	ldr	r0, [r5, #0]
 80096f4:	f001 fef8 	bl	800b4e8 <device_free>
        data = tmp;
 80096f8:	602f      	str	r7, [r5, #0]
        size = newSize;
 80096fa:	80ec      	strh	r4, [r5, #6]
    length = newLen;
 80096fc:	80ae      	strh	r6, [r5, #4]
}
 80096fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (newLen < length) {
 8009700:	8882      	ldrh	r2, [r0, #4]
 8009702:	4291      	cmp	r1, r2
 8009704:	d2fa      	bcs.n	80096fc <_ZN3pxt9LLSegment9setLengthEj.part.5+0x54>
        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	1a52      	subs	r2, r2, r1
 800970a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800970e:	0092      	lsls	r2, r2, #2
 8009710:	2100      	movs	r1, #0
 8009712:	f7fa fa4d 	bl	8003bb0 <memset>
    length = newLen;
 8009716:	80ae      	strh	r6, [r5, #4]
}
 8009718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return size * 2; // Double
 800971a:	005c      	lsls	r4, r3, #1
 800971c:	e7d9      	b.n	80096d2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
        return 4;
 800971e:	2404      	movs	r4, #4
 8009720:	e7d7      	b.n	80096d2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
            memcpy(tmp, data, size * sizeof(TValue));
 8009722:	009a      	lsls	r2, r3, #2
 8009724:	6829      	ldr	r1, [r5, #0]
 8009726:	f7fa f9fb 	bl	8003b20 <memcpy>
 800972a:	88eb      	ldrh	r3, [r5, #6]
 800972c:	e7da      	b.n	80096e4 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x3c>
        return size * 5 / 3; // Grow by 1.66 rate
 800972e:	4c03      	ldr	r4, [pc, #12]	; (800973c <_ZN3pxt9LLSegment9setLengthEj.part.5+0x94>)
 8009730:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009734:	fba4 3403 	umull	r3, r4, r4, r3
 8009738:	0864      	lsrs	r4, r4, #1
 800973a:	e7ca      	b.n	80096d2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
 800973c:	aaaaaaab 	.word	0xaaaaaaab

08009740 <_ZN3pxt8checkStrEbPKc.part.6>:
}

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
 8009740:	4604      	mov	r4, r0
 8009742:	b508      	push	{r3, lr}
    if (!cond) {
        ////  Show a message when check fails.
        debug_print("***** Check Failed: "); debug_println(msg); debug_flush();  //// TODO
 8009744:	4804      	ldr	r0, [pc, #16]	; (8009758 <_ZN3pxt8checkStrEbPKc.part.6+0x18>)
 8009746:	f7fa fb77 	bl	8003e38 <debug_print>
 800974a:	4620      	mov	r0, r4
 800974c:	f7fa fb7a 	bl	8003e44 <debug_println>
 8009750:	f7fa faf8 	bl	8003d44 <debug_flush>
 8009754:	e7fe      	b.n	8009754 <_ZN3pxt8checkStrEbPKc.part.6+0x14>
 8009756:	bf00      	nop
 8009758:	0800d05c 	.word	0x0800d05c

0800975c <_ZN3pxt9RefAction7destroyEPS0_>:
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop

08009760 <_ZN3pxt11RefRefLocal7destroyEPS0_>:
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop

08009764 <_ZN3pxt8mkActionEiPNS_9RefActionE>:
    return (VTable *)(r->vtable & ~1);
 8009764:	680b      	ldr	r3, [r1, #0]
Action mkAction(int totallen, RefAction *act) {
 8009766:	b570      	push	{r4, r5, r6, lr}
 8009768:	f023 0301 	bic.w	r3, r3, #1
    if (!cond)
 800976c:	891b      	ldrh	r3, [r3, #8]
 800976e:	460c      	mov	r4, r1
 8009770:	2b04      	cmp	r3, #4
 8009772:	4605      	mov	r5, r0
 8009774:	d102      	bne.n	800977c <_ZN3pxt8mkActionEiPNS_9RefActionE+0x18>
    if (totallen == 0) {
 8009776:	b96d      	cbnz	r5, 8009794 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x30>
}
 8009778:	4620      	mov	r0, r4
 800977a:	bd70      	pop	{r4, r5, r6, pc}
    DMESG("Error: %d [%d]", code, subcode);
 800977c:	4810      	ldr	r0, [pc, #64]	; (80097c0 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x5c>)
 800977e:	2201      	movs	r2, #1
 8009780:	f240 3185 	movw	r1, #901	; 0x385
 8009784:	f001 f95a 	bl	800aa3c <codal_dmesg>
    target_panic(code);
 8009788:	f240 3085 	movw	r0, #901	; 0x385
 800978c:	f7f7 f8e0 	bl	8000950 <target_panic>
    if (totallen == 0) {
 8009790:	2d00      	cmp	r5, #0
 8009792:	d0f1      	beq.n	8009778 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x14>
    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(unsigned));
 8009794:	1ce8      	adds	r0, r5, #3
 8009796:	0080      	lsls	r0, r0, #2
 8009798:	f7ff fd9e 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
    RefAction *r = new (ptr) RefAction();
 800979c:	4606      	mov	r6, r0
 800979e:	b108      	cbz	r0, 80097a4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x40>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 80097a0:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x60>)
 80097a2:	6003      	str	r3, [r0, #0]
    r->func = act->func;
 80097a4:	68a3      	ldr	r3, [r4, #8]
    return (Action)r;
 80097a6:	4634      	mov	r4, r6
    memset(r->fields, 0, r->len * sizeof(unsigned));
 80097a8:	b2aa      	uxth	r2, r5
    r->func = act->func;
 80097aa:	60b3      	str	r3, [r6, #8]
    r->len = totallen;
 80097ac:	80b5      	strh	r5, [r6, #4]
    memset(r->fields, 0, r->len * sizeof(unsigned));
 80097ae:	0092      	lsls	r2, r2, #2
 80097b0:	2100      	movs	r1, #0
 80097b2:	f106 000c 	add.w	r0, r6, #12
 80097b6:	f7fa f9fb 	bl	8003bb0 <memset>
}
 80097ba:	4620      	mov	r0, r4
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
 80097be:	bf00      	nop
 80097c0:	0800d074 	.word	0x0800d074
 80097c4:	0800cc40 	.word	0x0800cc40

080097c8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE>:
RefRecord *mkClassInstance(VTable *vtable) {
 80097c8:	b538      	push	{r3, r4, r5, lr}
    if (!cond)
 80097ca:	6902      	ldr	r2, [r0, #16]
 80097cc:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x3c>)
 80097ce:	4605      	mov	r5, r0
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d009      	beq.n	80097e8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x20>
    DMESG("Error: %d [%d]", code, subcode);
 80097d4:	480c      	ldr	r0, [pc, #48]	; (8009808 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x40>)
 80097d6:	2203      	movs	r2, #3
 80097d8:	f44f 7162 	mov.w	r1, #904	; 0x388
 80097dc:	f001 f92e 	bl	800aa3c <codal_dmesg>
    target_panic(code);
 80097e0:	f44f 7062 	mov.w	r0, #904	; 0x388
 80097e4:	f7f7 f8b4 	bl	8000950 <target_panic>
    void *ptr = gcAllocate(vtable->numbytes);
 80097e8:	8828      	ldrh	r0, [r5, #0]
 80097ea:	f7ff fd75 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
    RefRecord *r = new (ptr) RefRecord(vtable);
 80097ee:	4604      	mov	r4, r0
 80097f0:	b100      	cbz	r0, 80097f4 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x2c>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 80097f2:	6005      	str	r5, [r0, #0]
    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));
 80097f4:	882a      	ldrh	r2, [r5, #0]
 80097f6:	2100      	movs	r1, #0
 80097f8:	3a04      	subs	r2, #4
 80097fa:	1d20      	adds	r0, r4, #4
 80097fc:	f7fa f9d8 	bl	8003bb0 <memset>
}
 8009800:	4620      	mov	r0, r4
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	08009649 	.word	0x08009649
 8009808:	0800d074 	.word	0x0800d074

0800980c <_ZN3pxt9RefObject9destroyVTEv>:
    return (VTable *)(r->vtable & ~1);
 800980c:	6803      	ldr	r3, [r0, #0]
 800980e:	f023 0301 	bic.w	r3, r3, #1
    ((RefObjectMethod)getVTable(this)->methods[0])(this);
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	4718      	bx	r3
 8009816:	bf00      	nop

08009818 <_ZN3pxt15deleteRefObjectEPNS_9RefObjectE>:
 8009818:	6803      	ldr	r3, [r0, #0]
 800981a:	f023 0301 	bic.w	r3, r3, #1
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	4718      	bx	r3
 8009822:	bf00      	nop

08009824 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE>:
 8009824:	6803      	ldr	r3, [r0, #0]
void RefRecord_print(RefRecord *r) {
 8009826:	4601      	mov	r1, r0
 8009828:	f023 0301 	bic.w	r3, r3, #1
    DMESG("RefRecord %p r=%d size=%d bytes", r, REFCNT(r), getVTable(r)->numbytes);
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	2200      	movs	r2, #0
 8009830:	4801      	ldr	r0, [pc, #4]	; (8009838 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE+0x14>)
 8009832:	f001 b903 	b.w	800aa3c <codal_dmesg>
 8009836:	bf00      	nop
 8009838:	0800cff8 	.word	0x0800cff8

0800983c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>:
    if (idx >= Segment::MaxSize)
 800983c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009840:	4299      	cmp	r1, r3
 8009842:	d80a      	bhi.n	800985a <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x1e>
    if (idx >= length)
 8009844:	8883      	ldrh	r3, [r0, #4]
void LLSegment::set(unsigned idx, TValue v) {
 8009846:	b570      	push	{r4, r5, r6, lr}
    if (idx >= length)
 8009848:	428b      	cmp	r3, r1
 800984a:	4605      	mov	r5, r0
 800984c:	4616      	mov	r6, r2
 800984e:	460c      	mov	r4, r1
 8009850:	d904      	bls.n	800985c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x20>
    data[idx] = v;
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	4770      	bx	lr
 800985c:	3101      	adds	r1, #1
 800985e:	f7ff ff23 	bl	80096a8 <_ZN3pxt9LLSegment9setLengthEj.part.5>
    data[idx] = v;
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009868:	bd70      	pop	{r4, r5, r6, pc}
 800986a:	bf00      	nop

0800986c <_ZN3pxt9LLSegment3popEv>:
    if (length > 0) {
 800986c:	8883      	ldrh	r3, [r0, #4]
 800986e:	b14b      	cbz	r3, 8009884 <_ZN3pxt9LLSegment3popEv+0x18>
        data[length] = 0;
 8009870:	2100      	movs	r1, #0
        TValue value = data[length];
 8009872:	6802      	ldr	r2, [r0, #0]
        --length;
 8009874:	3b01      	subs	r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 800987a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = 0;
 800987e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 8009882:	4770      	bx	lr
    return 0;
 8009884:	4618      	mov	r0, r3
}
 8009886:	4770      	bx	lr

08009888 <_ZN3pxt7Segment9growByMinEt>:
    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));
 8009888:	88c3      	ldrh	r3, [r0, #6]
void Segment::growByMin(ramint_t minSize) {
 800988a:	b570      	push	{r4, r5, r6, lr}
    if (size == 0) {
 800988c:	b34b      	cbz	r3, 80098e2 <_ZN3pxt7Segment9growByMinEt+0x5a>
    if (size < 64) {
 800988e:	2b3f      	cmp	r3, #63	; 0x3f
 8009890:	dd0f      	ble.n	80098b2 <_ZN3pxt7Segment9growByMinEt+0x2a>
    if (size < 512) {
 8009892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009896:	db2c      	blt.n	80098f2 <_ZN3pxt7Segment9growByMinEt+0x6a>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800989c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80098a0:	4294      	cmp	r4, r2
 80098a2:	d823      	bhi.n	80098ec <_ZN3pxt7Segment9growByMinEt+0x64>
 80098a4:	b2a4      	uxth	r4, r4
 80098a6:	428c      	cmp	r4, r1
 80098a8:	bf38      	it	cc
 80098aa:	460c      	movcc	r4, r1
    if (size < newSize) {
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	d307      	bcc.n	80098c0 <_ZN3pxt7Segment9growByMinEt+0x38>
}
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
        return size * 2; // Double
 80098b2:	005c      	lsls	r4, r3, #1
 80098b4:	b2a4      	uxth	r4, r4
 80098b6:	428c      	cmp	r4, r1
 80098b8:	bf38      	it	cc
 80098ba:	460c      	movcc	r4, r1
    if (size < newSize) {
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d2f7      	bcs.n	80098b0 <_ZN3pxt7Segment9growByMinEt+0x28>
 80098c0:	4605      	mov	r5, r0
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 80098c2:	00a0      	lsls	r0, r4, #2
 80098c4:	f7ff fd9e 	bl	8009404 <_ZN3pxt15gcAllocateArrayEi>
        if (size)
 80098c8:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 80098ca:	4606      	mov	r6, r0
        if (size)
 80098cc:	b9e3      	cbnz	r3, 8009908 <_ZN3pxt7Segment9growByMinEt+0x80>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 80098ce:	1ae2      	subs	r2, r4, r3
 80098d0:	0092      	lsls	r2, r2, #2
 80098d2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80098d6:	2100      	movs	r1, #0
 80098d8:	f7fa f96a 	bl	8003bb0 <memset>
        data = tmp;
 80098dc:	602e      	str	r6, [r5, #0]
        size = newSize;
 80098de:	80ec      	strh	r4, [r5, #6]
}
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	2904      	cmp	r1, #4
 80098e4:	bf38      	it	cc
 80098e6:	2104      	movcc	r1, #4
 80098e8:	460c      	mov	r4, r1
 80098ea:	e7e7      	b.n	80098bc <_ZN3pxt7Segment9growByMinEt+0x34>
    if ((unsigned)size + 256 < Segment::MaxSize)
 80098ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80098f0:	e7e4      	b.n	80098bc <_ZN3pxt7Segment9growByMinEt+0x34>
        return size * 5 / 3; // Grow by 1.66 rate
 80098f2:	4a08      	ldr	r2, [pc, #32]	; (8009914 <_ZN3pxt7Segment9growByMinEt+0x8c>)
 80098f4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80098f8:	fba2 2404 	umull	r2, r4, r2, r4
 80098fc:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8009900:	428c      	cmp	r4, r1
 8009902:	bf38      	it	cc
 8009904:	460c      	movcc	r4, r1
 8009906:	e7d9      	b.n	80098bc <_ZN3pxt7Segment9growByMinEt+0x34>
            memcpy(tmp, data, size * sizeof(TValue));
 8009908:	009a      	lsls	r2, r3, #2
 800990a:	6829      	ldr	r1, [r5, #0]
 800990c:	f7fa f908 	bl	8003b20 <memcpy>
 8009910:	88eb      	ldrh	r3, [r5, #6]
 8009912:	e7dc      	b.n	80098ce <_ZN3pxt7Segment9growByMinEt+0x46>
 8009914:	aaaaaaab 	.word	0xaaaaaaab

08009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>:
void Segment::set(unsigned i, TValue value) {
 8009918:	b530      	push	{r4, r5, lr}
    if (i < size) {
 800991a:	88c3      	ldrh	r3, [r0, #6]
void Segment::set(unsigned i, TValue value) {
 800991c:	b083      	sub	sp, #12
    if (i < size) {
 800991e:	428b      	cmp	r3, r1
void Segment::set(unsigned i, TValue value) {
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
    if (i < size) {
 8009924:	d909      	bls.n	800993a <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x22>
        data[i] = value;
 8009926:	6803      	ldr	r3, [r0, #0]
 8009928:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (length <= i) {
 800992c:	88ab      	ldrh	r3, [r5, #4]
 800992e:	429c      	cmp	r4, r3
        length = i + 1;
 8009930:	bf24      	itt	cs
 8009932:	3401      	addcs	r4, #1
 8009934:	80ac      	strhcs	r4, [r5, #4]
}
 8009936:	b003      	add	sp, #12
 8009938:	bd30      	pop	{r4, r5, pc}
    } else if (i < Segment::MaxSize) {
 800993a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800993e:	4299      	cmp	r1, r3
 8009940:	d8f9      	bhi.n	8009936 <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x1e>
        growByMin(i + 1);
 8009942:	3101      	adds	r1, #1
 8009944:	b289      	uxth	r1, r1
 8009946:	9201      	str	r2, [sp, #4]
 8009948:	f7ff ff9e 	bl	8009888 <_ZN3pxt7Segment9growByMinEt>
        data[i] = value;
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	9a01      	ldr	r2, [sp, #4]
 8009950:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009954:	e7ea      	b.n	800992c <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x14>
 8009956:	bf00      	nop

08009958 <_ZN3pxt7Segment9setLengthEj>:
void Segment::setLength(unsigned newLength) {
 8009958:	b538      	push	{r3, r4, r5, lr}
    if (newLength > size) {
 800995a:	88c3      	ldrh	r3, [r0, #6]
void Segment::setLength(unsigned newLength) {
 800995c:	4604      	mov	r4, r0
    if (newLength > size) {
 800995e:	428b      	cmp	r3, r1
void Segment::setLength(unsigned newLength) {
 8009960:	460d      	mov	r5, r1
    if (newLength > size) {
 8009962:	d202      	bcs.n	800996a <_ZN3pxt7Segment9setLengthEj+0x12>
        ensure(length);
 8009964:	8881      	ldrh	r1, [r0, #4]
    if (newSize < size) {
 8009966:	428b      	cmp	r3, r1
 8009968:	d901      	bls.n	800996e <_ZN3pxt7Segment9setLengthEj+0x16>
    length = newLength;
 800996a:	80a5      	strh	r5, [r4, #4]
}
 800996c:	bd38      	pop	{r3, r4, r5, pc}
    growByMin(newSize);
 800996e:	f7ff ff8b 	bl	8009888 <_ZN3pxt7Segment9growByMinEt>
    length = newLength;
 8009972:	80a5      	strh	r5, [r4, #4]
}
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop

08009978 <_ZN3pxt7Segment3popEv>:
    if (length > 0) {
 8009978:	8883      	ldrh	r3, [r0, #4]
 800997a:	b14b      	cbz	r3, 8009990 <_ZN3pxt7Segment3popEv+0x18>
        data[length] = Segment::DefaultValue;
 800997c:	2100      	movs	r1, #0
        TValue value = data[length];
 800997e:	6802      	ldr	r2, [r0, #0]
        --length;
 8009980:	3b01      	subs	r3, #1
 8009982:	b29b      	uxth	r3, r3
 8009984:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 8009986:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = Segment::DefaultValue;
 800998a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 800998e:	4770      	bx	lr
    return Segment::DefaultValue;
 8009990:	4618      	mov	r0, r3
}
 8009992:	4770      	bx	lr

08009994 <_ZN3pxt7Segment6removeEj>:
TValue Segment::remove(unsigned i) {
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (i < length) {
 8009996:	8883      	ldrh	r3, [r0, #4]
 8009998:	428b      	cmp	r3, r1
 800999a:	d91d      	bls.n	80099d8 <_ZN3pxt7Segment6removeEj+0x44>
        TValue ret = data[i];
 800999c:	6805      	ldr	r5, [r0, #0]
        if (i + 1 < length) {
 800999e:	1c4a      	adds	r2, r1, #1
        TValue ret = data[i];
 80099a0:	008f      	lsls	r7, r1, #2
        if (i + 1 < length) {
 80099a2:	4293      	cmp	r3, r2
 80099a4:	4604      	mov	r4, r0
        TValue ret = data[i];
 80099a6:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
 80099aa:	eb05 0007 	add.w	r0, r5, r7
        if (i + 1 < length) {
 80099ae:	d807      	bhi.n	80099c0 <_ZN3pxt7Segment6removeEj+0x2c>
        data[length] = Segment::DefaultValue;
 80099b0:	2200      	movs	r2, #0
        length--;
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	80a3      	strh	r3, [r4, #4]
        data[length] = Segment::DefaultValue;
 80099b8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
}
 80099bc:	4630      	mov	r0, r6
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(unsigned));
 80099c0:	1a5a      	subs	r2, r3, r1
 80099c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80099c6:	3a01      	subs	r2, #1
 80099c8:	1d39      	adds	r1, r7, #4
 80099ca:	4429      	add	r1, r5
 80099cc:	0092      	lsls	r2, r2, #2
 80099ce:	f7fa f8d6 	bl	8003b7e <memmove>
 80099d2:	88a3      	ldrh	r3, [r4, #4]
 80099d4:	6825      	ldr	r5, [r4, #0]
 80099d6:	e7eb      	b.n	80099b0 <_ZN3pxt7Segment6removeEj+0x1c>
    return Segment::DefaultValue;
 80099d8:	2600      	movs	r6, #0
 80099da:	e7ef      	b.n	80099bc <_ZN3pxt7Segment6removeEj+0x28>

080099dc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>:
    if (i < length) {
 80099dc:	8883      	ldrh	r3, [r0, #4]
 80099de:	428b      	cmp	r3, r1
 80099e0:	d91c      	bls.n	8009a1c <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x40>
void Segment::insert(unsigned i, TValue value) {
 80099e2:	b570      	push	{r4, r5, r6, lr}
 80099e4:	460e      	mov	r6, r1
 80099e6:	4615      	mov	r5, r2
        ensure(length + 1);
 80099e8:	1c59      	adds	r1, r3, #1
    if (newSize < size) {
 80099ea:	88c2      	ldrh	r2, [r0, #6]
        ensure(length + 1);
 80099ec:	b289      	uxth	r1, r1
    if (newSize < size) {
 80099ee:	428a      	cmp	r2, r1
 80099f0:	4604      	mov	r4, r0
 80099f2:	d90f      	bls.n	8009a14 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x38>
        memmove(data + i + 1, data + i, (length - i) * sizeof(unsigned));
 80099f4:	1c70      	adds	r0, r6, #1
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	0080      	lsls	r0, r0, #2
 80099fa:	1b9b      	subs	r3, r3, r6
 80099fc:	1f06      	subs	r6, r0, #4
 80099fe:	009a      	lsls	r2, r3, #2
 8009a00:	4408      	add	r0, r1
 8009a02:	4431      	add	r1, r6
 8009a04:	f7fa f8bb 	bl	8003b7e <memmove>
        length++;
 8009a08:	88a3      	ldrh	r3, [r4, #4]
        data[i] = value;
 8009a0a:	6822      	ldr	r2, [r4, #0]
        length++;
 8009a0c:	3301      	adds	r3, #1
        data[i] = value;
 8009a0e:	5195      	str	r5, [r2, r6]
        length++;
 8009a10:	80a3      	strh	r3, [r4, #4]
}
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 8009a14:	f7ff ff38 	bl	8009888 <_ZN3pxt7Segment9growByMinEt>
 8009a18:	88a3      	ldrh	r3, [r4, #4]
 8009a1a:	e7eb      	b.n	80099f4 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x18>
        set(i, value);
 8009a1c:	f7ff bf7c 	b.w	8009918 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08009a20 <_ZN3pxt7Segment5printEv>:
void Segment::print() {
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4605      	mov	r5, r0
    DMESG("Segment: %p, length: %d, size: %d", data, (unsigned)length, (unsigned)size);
 8009a24:	480a      	ldr	r0, [pc, #40]	; (8009a50 <_ZN3pxt7Segment5printEv+0x30>)
 8009a26:	88eb      	ldrh	r3, [r5, #6]
 8009a28:	88aa      	ldrh	r2, [r5, #4]
 8009a2a:	6829      	ldr	r1, [r5, #0]
 8009a2c:	f001 f806 	bl	800aa3c <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009a30:	88eb      	ldrh	r3, [r5, #6]
 8009a32:	b15b      	cbz	r3, 8009a4c <_ZN3pxt7Segment5printEv+0x2c>
 8009a34:	2400      	movs	r4, #0
        DMESG("-> %d", (unsigned)(uintptr_t)data[i]);
 8009a36:	4e07      	ldr	r6, [pc, #28]	; (8009a54 <_ZN3pxt7Segment5printEv+0x34>)
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009a40:	f000 fffc 	bl	800aa3c <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009a44:	88eb      	ldrh	r3, [r5, #6]
 8009a46:	3401      	adds	r4, #1
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d8f5      	bhi.n	8009a38 <_ZN3pxt7Segment5printEv+0x18>
}
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800d030 	.word	0x0800d030
 8009a54:	0800d054 	.word	0x0800d054

08009a58 <_ZN3pxt13RefCollection5printEPS0_>:
void RefCollection::print(RefCollection *t) {
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4604      	mov	r4, r0
    DMESG("RefCollection %p r=%d size=%d", t, REFCNT(t), t->head.getLength());
 8009a5c:	8903      	ldrh	r3, [r0, #8]
 8009a5e:	4601      	mov	r1, r0
 8009a60:	2200      	movs	r2, #0
 8009a62:	4804      	ldr	r0, [pc, #16]	; (8009a74 <_ZN3pxt13RefCollection5printEPS0_+0x1c>)
 8009a64:	f000 ffea 	bl	800aa3c <codal_dmesg>
    t->head.print();
 8009a68:	1d20      	adds	r0, r4, #4
}
 8009a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    t->head.print();
 8009a6e:	f7ff bfd7 	b.w	8009a20 <_ZN3pxt7Segment5printEv>
 8009a72:	bf00      	nop
 8009a74:	0800cfd8 	.word	0x0800cfd8

08009a78 <_ZN3pxt13RefCollectionC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009a78:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009a7a:	4902      	ldr	r1, [pc, #8]	; (8009a84 <_ZN3pxt13RefCollectionC1Ev+0xc>)
    Segment() : data(nullptr), length(0), size(0) {}
 8009a7c:	6082      	str	r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009a7e:	e9c0 1200 	strd	r1, r2, [r0]
PXT_VTABLE_CTOR(RefCollection) {}
 8009a82:	4770      	bx	lr
 8009a84:	0800ccd0 	.word	0x0800ccd0

08009a88 <_ZN3pxt11RefRefLocalC1Ev>:
    v = 0;
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4a02      	ldr	r2, [pc, #8]	; (8009a94 <_ZN3pxt11RefRefLocalC1Ev+0xc>)
 8009a8c:	e9c0 2100 	strd	r2, r1, [r0]
}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	0800cca0 	.word	0x0800cca0

08009a98 <_ZN3pxt6RefMapC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009a98:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009a9a:	4903      	ldr	r1, [pc, #12]	; (8009aa8 <_ZN3pxt6RefMapC1Ev+0x10>)
    Segment() : data(nullptr), length(0), size(0) {}
 8009a9c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009aa0:	e9c0 1200 	strd	r1, r2, [r0]
    Segment() : data(nullptr), length(0), size(0) {}
 8009aa4:	6102      	str	r2, [r0, #16]
PXT_VTABLE_CTOR(RefMap) {}
 8009aa6:	4770      	bx	lr
 8009aa8:	0800cc70 	.word	0x0800cc70

08009aac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>:
int RefMap::findIdx(String key) {
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned getLength() { return length; };
 8009ab0:	8906      	ldrh	r6, [r0, #8]
    auto data = (String *)keys.getData();
 8009ab2:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; ++i) {
 8009ab4:	b31e      	cbz	r6, 8009afe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
        if (data[i] == key)
 8009ab6:	6828      	ldr	r0, [r5, #0]
 8009ab8:	4281      	cmp	r1, r0
 8009aba:	d027      	beq.n	8009b0c <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x60>
    for (unsigned i = 0; i < len; ++i) {
 8009abc:	2300      	movs	r3, #0
        if (data[i] == key)
 8009abe:	462a      	mov	r2, r5
 8009ac0:	e003      	b.n	8009aca <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x1e>
 8009ac2:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8009ac6:	428c      	cmp	r4, r1
 8009ac8:	d01d      	beq.n	8009b06 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x5a>
    for (unsigned i = 0; i < len; ++i) {
 8009aca:	3301      	adds	r3, #1
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	d1f8      	bne.n	8009ac2 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x16>
    auto keylen = key->length;
 8009ad0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 8009ad4:	1d8f      	adds	r7, r1, #6
    for (unsigned i = 0; i < len; ++i) {
 8009ad6:	2400      	movs	r4, #0
 8009ad8:	e004      	b.n	8009ae4 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x38>
 8009ada:	3401      	adds	r4, #1
 8009adc:	42b4      	cmp	r4, r6
 8009ade:	d00e      	beq.n	8009afe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
 8009ae0:	f855 0f04 	ldr.w	r0, [r5, #4]!
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 8009ae4:	8883      	ldrh	r3, [r0, #4]
 8009ae6:	4543      	cmp	r3, r8
 8009ae8:	d1f7      	bne.n	8009ada <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
 8009aea:	3006      	adds	r0, #6
 8009aec:	4642      	mov	r2, r8
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7fa f836 	bl	8003b60 <memcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d1f0      	bne.n	8009ada <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
            return i;
 8009af8:	4620      	mov	r0, r4
}
 8009afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b06:	4618      	mov	r0, r3
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data[i] == key)
 8009b0c:	2000      	movs	r0, #0
            return i;
 8009b0e:	e7f8      	b.n	8009b02 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x56>

08009b10 <_ZN3pxt13debugMemLeaksEv>:
void debugMemLeaks() {}
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop

08009b14 <_ZN3pxt5errorENS_9PXT_PANICEi>:
void error(PXT_PANIC code, int subcode) {
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4604      	mov	r4, r0
    DMESG("Error: %d [%d]", code, subcode);
 8009b18:	460a      	mov	r2, r1
 8009b1a:	4804      	ldr	r0, [pc, #16]	; (8009b2c <_ZN3pxt5errorENS_9PXT_PANICEi+0x18>)
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f000 ff8d 	bl	800aa3c <codal_dmesg>
    target_panic(code);
 8009b22:	4620      	mov	r0, r4
}
 8009b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_panic(code);
 8009b28:	f7f6 bf12 	b.w	8000950 <target_panic>
 8009b2c:	0800d074 	.word	0x0800d074

08009b30 <_ZN3pxt12templateHashEv>:
        }
    }
}

int templateHash() {
    return ((int *)bytecode)[4];
 8009b30:	4b01      	ldr	r3, [pc, #4]	; (8009b38 <_ZN3pxt12templateHashEv+0x8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
}
 8009b34:	6918      	ldr	r0, [r3, #16]
 8009b36:	4770      	bx	lr
 8009b38:	20001034 	.word	0x20001034

08009b3c <_ZN3pxt11programHashEv>:

int programHash() {
    return ((int *)bytecode)[6];
 8009b3c:	4b01      	ldr	r3, [pc, #4]	; (8009b44 <_ZN3pxt11programHashEv+0x8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
}
 8009b40:	6998      	ldr	r0, [r3, #24]
 8009b42:	4770      	bx	lr
 8009b44:	20001034 	.word	0x20001034

08009b48 <_ZN3pxt13getNumGlobalsEv>:

int getNumGlobals() {
    return bytecode[16];
 8009b48:	4b01      	ldr	r3, [pc, #4]	; (8009b50 <_ZN3pxt13getNumGlobalsEv+0x8>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
}
 8009b4c:	8c18      	ldrh	r0, [r3, #32]
 8009b4e:	4770      	bx	lr
 8009b50:	20001034 	.word	0x20001034

08009b54 <_ZN3pxt11exec_binaryEPj>:

#ifndef X86_64
void exec_binary(unsigned *pc) {
 8009b54:	b570      	push	{r4, r5, r6, lr}

    ////  If the runtime version fails, then we are probably running an empty executable e.g.
    ////  pxt-maker/libs/stm32bluepill/built/dockercodal/build/STM32_BLUE_PILL.bin
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
 8009b56:	4604      	mov	r4, r0
 8009b58:	f854 6b03 	ldr.w	r6, [r4], #3
void exec_binary(unsigned *pc) {
 8009b5c:	4605      	mov	r5, r0
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
 8009b5e:	4831      	ldr	r0, [pc, #196]	; (8009c24 <_ZN3pxt11exec_binaryEPj+0xd0>)
 8009b60:	f7fa f96a 	bl	8003e38 <debug_print>
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7fa f9af 	bl	8003ec8 <debug_printhex_unsigned>
 8009b6a:	482f      	ldr	r0, [pc, #188]	; (8009c28 <_ZN3pxt11exec_binaryEPj+0xd4>)
 8009b6c:	f7fa f964 	bl	8003e38 <debug_print>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7fa f9a9 	bl	8003ec8 <debug_printhex_unsigned>
 8009b76:	482d      	ldr	r0, [pc, #180]	; (8009c2c <_ZN3pxt11exec_binaryEPj+0xd8>)
 8009b78:	f7fa f964 	bl	8003e44 <debug_println>
 8009b7c:	f7fa f8e2 	bl	8003d44 <debug_flush>
    if (!cond) {
 8009b80:	f244 2310 	movw	r3, #16912	; 0x4210
 8009b84:	429e      	cmp	r6, r3
 8009b86:	d149      	bne.n	8009c1c <_ZN3pxt11exec_binaryEPj+0xc8>
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO
 8009b88:	4829      	ldr	r0, [pc, #164]	; (8009c30 <_ZN3pxt11exec_binaryEPj+0xdc>)
 8009b8a:	f7fa f95b 	bl	8003e44 <debug_println>
 8009b8e:	f7fa f8d9 	bl	8003d44 <debug_flush>

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009b92:	686b      	ldr	r3, [r5, #4]
 8009b94:	4c27      	ldr	r4, [pc, #156]	; (8009c34 <_ZN3pxt11exec_binaryEPj+0xe0>)
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009b96:	8c18      	ldrh	r0, [r3, #32]
    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009b98:	6023      	str	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009b9a:	0080      	lsls	r0, r0, #2
 8009b9c:	f7ff fc40 	bl	8009420 <app_alloc>
    return bytecode[16];
 8009ba0:	6823      	ldr	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009ba2:	4e25      	ldr	r6, [pc, #148]	; (8009c38 <_ZN3pxt11exec_binaryEPj+0xe4>)
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8009ba4:	8c1a      	ldrh	r2, [r3, #32]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	0092      	lsls	r2, r2, #2
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009baa:	6030      	str	r0, [r6, #0]
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8009bac:	f7fa f800 	bl	8003bb0 <memset>
    debug_println("---exec_binary compare"); debug_flush();  //// TODO
 8009bb0:	4822      	ldr	r0, [pc, #136]	; (8009c3c <_ZN3pxt11exec_binaryEPj+0xe8>)
 8009bb2:	f7fa f947 	bl	8003e44 <debug_println>
 8009bb6:	f7fa f8c5 	bl	8003d44 <debug_flush>
    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	4a20      	ldr	r2, [pc, #128]	; (8009c40 <_ZN3pxt11exec_binaryEPj+0xec>)
 8009bbe:	6819      	ldr	r1, [r3, #0]
    globals[0] = (TValue)&globals;
 8009bc0:	6830      	ldr	r0, [r6, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009bc2:	4291      	cmp	r1, r2
    globals[0] = (TValue)&globals;
 8009bc4:	6006      	str	r6, [r0, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009bc6:	d126      	bne.n	8009c16 <_ZN3pxt11exec_binaryEPj+0xc2>
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	68ab      	ldr	r3, [r5, #8]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d122      	bne.n	8009c16 <_ZN3pxt11exec_binaryEPj+0xc2>
             ":( Failed partial flash");
    debug_println("---exec_binary initPerfCounters"); debug_flush();  //// TODO
 8009bd0:	481c      	ldr	r0, [pc, #112]	; (8009c44 <_ZN3pxt11exec_binaryEPj+0xf0>)
 8009bd2:	f7fa f937 	bl	8003e44 <debug_println>
 8009bd6:	f7fa f8b5 	bl	8003d44 <debug_flush>
    uintptr_t startptr = (uintptr_t)bytecode;

    startptr += 64; // header

    initPerfCounters();
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8009bda:	481b      	ldr	r0, [pc, #108]	; (8009c48 <_ZN3pxt11exec_binaryEPj+0xf4>)
    uintptr_t startptr = (uintptr_t)bytecode;
 8009bdc:	6825      	ldr	r5, [r4, #0]
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8009bde:	f7fa f931 	bl	8003e44 <debug_println>
 8009be2:	f7fa f8af 	bl	8003d44 <debug_flush>

    initRuntime();
 8009be6:	f000 f921 	bl	8009e2c <_ZN3pxt11initRuntimeEv>
    debug_println("---exec_binary runAction0"); debug_flush();  //// TODO
 8009bea:	4818      	ldr	r0, [pc, #96]	; (8009c4c <_ZN3pxt11exec_binaryEPj+0xf8>)
 8009bec:	f7fa f92a 	bl	8003e44 <debug_println>
 8009bf0:	f7fa f8a8 	bl	8003d44 <debug_flush>
    return asmRunAction3(a, 0, 0, 0);
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009bfc:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8009c00:	461a      	mov	r2, r3
 8009c02:	47a0      	blx	r4

    runAction0((Action)startptr);
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO
 8009c04:	4812      	ldr	r0, [pc, #72]	; (8009c50 <_ZN3pxt11exec_binaryEPj+0xfc>)
 8009c06:	f7fa f91d 	bl	8003e44 <debug_println>
 8009c0a:	f7fa f89b 	bl	8003d44 <debug_flush>

    pxt::releaseFiber();
}
 8009c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pxt::releaseFiber();
 8009c12:	f000 b8dd 	b.w	8009dd0 <_ZN3pxt12releaseFiberEv>
 8009c16:	480f      	ldr	r0, [pc, #60]	; (8009c54 <_ZN3pxt11exec_binaryEPj+0x100>)
 8009c18:	f7ff fd92 	bl	8009740 <_ZN3pxt8checkStrEbPKc.part.6>
 8009c1c:	480e      	ldr	r0, [pc, #56]	; (8009c58 <_ZN3pxt11exec_binaryEPj+0x104>)
 8009c1e:	f7ff fd8f 	bl	8009740 <_ZN3pxt8checkStrEbPKc.part.6>
 8009c22:	bf00      	nop
 8009c24:	0800cee4 	.word	0x0800cee4
 8009c28:	0800cefc 	.word	0x0800cefc
 8009c2c:	0800d1f4 	.word	0x0800d1f4
 8009c30:	0800cf1c 	.word	0x0800cf1c
 8009c34:	20001034 	.word	0x20001034
 8009c38:	20001030 	.word	0x20001030
 8009c3c:	0800cf34 	.word	0x0800cf34
 8009c40:	923b8e70 	.word	0x923b8e70
 8009c44:	0800cf4c 	.word	0x0800cf4c
 8009c48:	0800cf6c 	.word	0x0800cf6c
 8009c4c:	0800cf88 	.word	0x0800cf88
 8009c50:	0800cfa4 	.word	0x0800cfa4
 8009c54:	0800cfc0 	.word	0x0800cfc0
 8009c58:	0800cf04 	.word	0x0800cf04

08009c5c <_ZN3pxt5startEv>:

void start() {
    exec_binary((unsigned *)functionsAndBytecode);
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <_ZN3pxt5startEv+0x8>)
 8009c5e:	f7ff bf79 	b.w	8009b54 <_ZN3pxt11exec_binaryEPj>
 8009c62:	bf00      	nop
 8009c64:	0800c880 	.word	0x0800c880

08009c68 <_ZN6Array_7isArrayEPN3pxt12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009c68:	f010 0303 	ands.w	r3, r0, #3
 8009c6c:	d108      	bne.n	8009c80 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x18>
 8009c6e:	b130      	cbz	r0, 8009c7e <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 8009c70:	6802      	ldr	r2, [r0, #0]
 8009c72:	f022 0201 	bic.w	r2, r2, #1
    if (vt->magic == VTABLE_MAGIC)
 8009c76:	78d1      	ldrb	r1, [r2, #3]
 8009c78:	29f9      	cmp	r1, #249	; 0xf9
 8009c7a:	d003      	beq.n	8009c84 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x1c>

namespace Array_ {
//
bool isArray(TValue arr) {
    auto vt = getAnyVTable(arr);
    return vt && vt->classNo == BuiltInType::RefCollection;
 8009c7c:	4618      	mov	r0, r3
}
 8009c7e:	4770      	bx	lr
    return vt && vt->classNo == BuiltInType::RefCollection;
 8009c80:	2000      	movs	r0, #0
 8009c82:	4770      	bx	lr
 8009c84:	8910      	ldrh	r0, [r2, #8]
 8009c86:	f1a0 0006 	sub.w	r0, r0, #6
 8009c8a:	fab0 f080 	clz	r0, r0
 8009c8e:	0940      	lsrs	r0, r0, #5
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop

08009c94 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE>:
} // namespace Array_

namespace pxtrt {
//
RefCollection *keysOf(TValue v) {
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	4605      	mov	r5, r0
    auto r = NEW_GC(RefCollection);
 8009c98:	200c      	movs	r0, #12
 8009c9a:	f7ff fb1d 	bl	80092d8 <_ZN3pxt10gcAllocateEi>
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	b120      	cbz	r0, 8009cac <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x18>
    Segment() : data(nullptr), length(0), size(0) {}
 8009ca2:	2300      	movs	r3, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009ca4:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x60>)
    Segment() : data(nullptr), length(0), size(0) {}
 8009ca6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009caa:	6002      	str	r2, [r0, #0]
    return ((intptr_t)v & 3) || !v;
 8009cac:	07ab      	lsls	r3, r5, #30
 8009cae:	d106      	bne.n	8009cbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
 8009cb0:	b12d      	cbz	r5, 8009cbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    return (VTable *)(r->vtable & ~1);
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
    if (vt->magic == VTABLE_MAGIC)
 8009cb8:	78da      	ldrb	r2, [r3, #3]
 8009cba:	2af9      	cmp	r2, #249	; 0xf9
 8009cbc:	d001      	beq.n	8009cc2 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2e>
    auto dst = r->getData();
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
    for (unsigned i = 0; i < len; ++i)
        incr(dst[i]);
    return r;
}
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
    if (getAnyVTable(v) != &RefMap_vtable)
 8009cc2:	4a0d      	ldr	r2, [pc, #52]	; (8009cf8 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x64>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d1fa      	bne.n	8009cbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    auto len = rm->keys.getLength();
 8009cc8:	892e      	ldrh	r6, [r5, #8]
    if (!len)
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	d0f7      	beq.n	8009cbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    if (newLength > size) {
 8009cce:	8963      	ldrh	r3, [r4, #10]
 8009cd0:	429e      	cmp	r6, r3
 8009cd2:	d902      	bls.n	8009cda <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
        ensure(length);
 8009cd4:	8921      	ldrh	r1, [r4, #8]
    if (newSize < size) {
 8009cd6:	428b      	cmp	r3, r1
 8009cd8:	d907      	bls.n	8009cea <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x56>
    length = newLength;
 8009cda:	8126      	strh	r6, [r4, #8]
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
 8009cdc:	00b2      	lsls	r2, r6, #2
 8009cde:	6869      	ldr	r1, [r5, #4]
 8009ce0:	6860      	ldr	r0, [r4, #4]
 8009ce2:	f7f9 ff1d 	bl	8003b20 <memcpy>
}
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 8009cea:	1d20      	adds	r0, r4, #4
 8009cec:	f7ff fdcc 	bl	8009888 <_ZN3pxt7Segment9growByMinEt>
 8009cf0:	e7f3      	b.n	8009cda <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
 8009cf2:	bf00      	nop
 8009cf4:	0800ccd0 	.word	0x0800ccd0
 8009cf8:	0800cc70 	.word	0x0800cc70

08009cfc <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 8009cfc:	4800      	ldr	r0, [pc, #0]	; (8009d00 <_ZN5codal14CodalComponent4initEv+0x4>)
 8009cfe:	4770      	bx	lr
 8009d00:	fffffc16 	.word	0xfffffc16

08009d04 <_ZN3pxtL10runAction0EPNS_12TValueStructE>:
    return asmRunAction3(a, 0, 0, 0);
 8009d04:	2300      	movs	r3, #0
 8009d06:	4904      	ldr	r1, [pc, #16]	; (8009d18 <_ZN3pxtL10runAction0EPNS_12TValueStructE+0x14>)
static inline TValue runAction0(Action a) {
 8009d08:	b410      	push	{r4}
    return asmRunAction3(a, 0, 0, 0);
 8009d0a:	680c      	ldr	r4, [r1, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8009d10:	4619      	mov	r1, r3
 8009d12:	46a4      	mov	ip, r4
}
 8009d14:	bc10      	pop	{r4}
    return asmRunAction3(a, 0, 0, 0);
 8009d16:	4760      	bx	ip
 8009d18:	20001034 	.word	0x20001034

08009d1c <_ZN3pxt13dispatchEventEN5codal5EventE>:
// ---------------------------------------------------------------------------

// We have the invariant that if [dispatchEvent] is registered against the DAL
// for a given event, then [handlersMap] contains a valid entry for that
// event.
void dispatchEvent(Event e) {
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	466b      	mov	r3, sp
 8009d22:	e883 0003 	stmia.w	r3, {r0, r1}
    lastEvent = e;
 8009d26:	4a17      	ldr	r2, [pc, #92]	; (8009d84 <_ZN3pxt13dispatchEventEN5codal5EventE+0x68>)
 8009d28:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8009d2c:	f8bd 4000 	ldrh.w	r4, [sp]
 8009d30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d34:	e882 0003 	stmia.w	r2, {r0, r1}

    auto curr = findBinding(e.source, e.value);
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7fd fdd6 	bl	80078ec <_ZN3pxt11findBindingEii>
 8009d40:	4606      	mov	r6, r0
    auto value = fromInt(e.value);
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7fe f8a4 	bl	8007e90 <_ZN3pxt7fromIntEi>
 8009d48:	4605      	mov	r5, r0
    if (curr)
 8009d4a:	b13e      	cbz	r6, 8009d5c <_ZN3pxt13dispatchEventEN5codal5EventE+0x40>
    return asmRunAction3(a, arg0, 0, 0);
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4a0e      	ldr	r2, [pc, #56]	; (8009d88 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 8009d50:	68f0      	ldr	r0, [r6, #12]
 8009d52:	6811      	ldr	r1, [r2, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8009d58:	4629      	mov	r1, r5
 8009d5a:	47b0      	blx	r6
        runAction1(curr->action, value);

    curr = findBinding(e.source, DEVICE_EVT_ANY);
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f7fd fdc4 	bl	80078ec <_ZN3pxt11findBindingEii>
    if (curr)
 8009d64:	b158      	cbz	r0, 8009d7e <_ZN3pxt13dispatchEventEN5codal5EventE+0x62>
 8009d66:	2300      	movs	r3, #0
 8009d68:	4a07      	ldr	r2, [pc, #28]	; (8009d88 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	68c0      	ldr	r0, [r0, #12]
 8009d70:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009d72:	461a      	mov	r2, r3
 8009d74:	46a4      	mov	ip, r4
        runAction1(curr->action, value);
}
 8009d76:	b002      	add	sp, #8
 8009d78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d7c:	4760      	bx	ip
 8009d7e:	b002      	add	sp, #8
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	bf00      	nop
 8009d84:	20001084 	.word	0x20001084
 8009d88:	20001034 	.word	0x20001034

08009d8c <_ZN3pxt9fiberDoneEPv>:
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
}

void fiberDone(void *a) {
 8009d8c:	b508      	push	{r3, lr}
    decr((Action)a);
    unregisterGCPtr((Action)a);
 8009d8e:	f7ff fc0f 	bl	80095b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>
    release_fiber();
}
 8009d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    release_fiber();
 8009d96:	f001 ba75 	b.w	800b284 <_ZN5codal13release_fiberEv>
 8009d9a:	bf00      	nop

08009d9c <_ZN3pxt12forever_stubEPv>:

void sleep_us(uint64_t us) {
    target_wait_us(us);
}

void forever_stub(void *a) {
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	b508      	push	{r3, lr}
 8009da0:	4d05      	ldr	r5, [pc, #20]	; (8009db8 <_ZN3pxt12forever_stubEPv+0x1c>)
    return asmRunAction3(a, 0, 0, 0);
 8009da2:	2300      	movs	r3, #0
 8009da4:	6828      	ldr	r0, [r5, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009daa:	4619      	mov	r1, r3
 8009dac:	4630      	mov	r0, r6
 8009dae:	47a0      	blx	r4
    while (true) {
        runAction0((Action)a);
        fiber_sleep(20);
 8009db0:	2014      	movs	r0, #20
 8009db2:	f001 f9ed 	bl	800b190 <_ZN5codal11fiber_sleepEm>
 8009db6:	e7f4      	b.n	8009da2 <_ZN3pxt12forever_stubEPv+0x6>
 8009db8:	20001034 	.word	0x20001034

08009dbc <_ZN5codal3_cm5TimerD1Ev>:

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <_ZN5codal3_cm5TimerD1Ev+0x10>)
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	f001 fd24 	bl	800b810 <_ZN5codal5TimerD1Ev>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	bd10      	pop	{r4, pc}
 8009dcc:	0800d3d4 	.word	0x0800d3d4

08009dd0 <_ZN3pxt12releaseFiberEv>:
    release_fiber();
 8009dd0:	f001 ba58 	b.w	800b284 <_ZN5codal13release_fiberEv>

08009dd4 <_ZN3pxt8sleep_msEj>:
    fiber_sleep(ms);
 8009dd4:	f001 b9dc 	b.w	800b190 <_ZN5codal11fiber_sleepEm>

08009dd8 <_ZN3pxt8sleep_usEy>:
    target_wait_us(us);
 8009dd8:	f7f6 bd88 	b.w	80008ec <target_wait_us>

08009ddc <_ZN3pxt10runForeverEPNS_12TValueStructE>:
    }
}

void runForever(Action a) {
    if (a != 0) {
 8009ddc:	b150      	cbz	r0, 8009df4 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x18>
void runForever(Action a) {
 8009dde:	b510      	push	{r4, lr}
 8009de0:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 8009de2:	f7ff fbd7 	bl	8009594 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber(forever_stub, (void *)a);
 8009de6:	4621      	mov	r1, r4
    }
}
 8009de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber(forever_stub, (void *)a);
 8009dec:	4a02      	ldr	r2, [pc, #8]	; (8009df8 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x1c>)
 8009dee:	4803      	ldr	r0, [pc, #12]	; (8009dfc <_ZN3pxt10runForeverEPNS_12TValueStructE+0x20>)
 8009df0:	f001 b8c2 	b.w	800af78 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	0800b2b9 	.word	0x0800b2b9
 8009dfc:	08009d9d 	.word	0x08009d9d

08009e00 <_ZN3pxt13runInParallelEPNS_12TValueStructE>:

void runInParallel(Action a) {
    if (a != 0) {
 8009e00:	b150      	cbz	r0, 8009e18 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x18>
void runInParallel(Action a) {
 8009e02:	b510      	push	{r4, lr}
 8009e04:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 8009e06:	f7ff fbc5 	bl	8009594 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 8009e0a:	4621      	mov	r1, r4
    }
}
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 8009e10:	4a02      	ldr	r2, [pc, #8]	; (8009e1c <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x1c>)
 8009e12:	4803      	ldr	r0, [pc, #12]	; (8009e20 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x20>)
 8009e14:	f001 b8b0 	b.w	800af78 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	08009d8d 	.word	0x08009d8d
 8009e20:	08009d05 	.word	0x08009d05

08009e24 <_ZN3pxt12waitForEventEii>:

void waitForEvent(int id, int event) {
    fiber_wait_for_event(id, event);
 8009e24:	b289      	uxth	r1, r1
 8009e26:	b280      	uxth	r0, r0
 8009e28:	f001 b9d8 	b.w	800b1dc <_ZN5codal20fiber_wait_for_eventEtt>

08009e2c <_ZN3pxt11initRuntimeEv>:
}

void initRuntime() {
 8009e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 8009e2e:	483f      	ldr	r0, [pc, #252]	; (8009f2c <_ZN3pxt11initRuntimeEv+0x100>)
void initRuntime() {
 8009e30:	b083      	sub	sp, #12
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 8009e32:	f7fa f807 	bl	8003e44 <debug_println>
 8009e36:	f7f9 ff85 	bl	8003d44 <debug_flush>
    cpu_clock_init();
 8009e3a:	f000 fb1d 	bl	800a478 <_Z14cpu_clock_initv>
    debug_println("---initCodal commInit"); debug_flush();  //// TODO
 8009e3e:	483c      	ldr	r0, [pc, #240]	; (8009f30 <_ZN3pxt11initRuntimeEv+0x104>)
 8009e40:	f7fa f800 	bl	8003e44 <debug_println>
 8009e44:	f7f9 ff7e 	bl	8003d44 <debug_flush>
    int commSize = bytecode[20];
 8009e48:	4b3a      	ldr	r3, [pc, #232]	; (8009f34 <_ZN3pxt11initRuntimeEv+0x108>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
    if (!commSize)
 8009e4e:	b35f      	cbz	r7, 8009ea8 <_ZN3pxt11initRuntimeEv+0x7c>
    FreeList *head = NULL;
 8009e50:	2400      	movs	r4, #0
        if (p == commBase) {
 8009e52:	4e39      	ldr	r6, [pc, #228]	; (8009f38 <_ZN3pxt11initRuntimeEv+0x10c>)
 8009e54:	e004      	b.n	8009e60 <_ZN3pxt11initRuntimeEv+0x34>
 8009e56:	42b5      	cmp	r5, r6
 8009e58:	d012      	beq.n	8009e80 <_ZN3pxt11initRuntimeEv+0x54>
        if (p > commBase)
 8009e5a:	d862      	bhi.n	8009f22 <_ZN3pxt11initRuntimeEv+0xf6>
        f->next = head;
 8009e5c:	602c      	str	r4, [r5, #0]
 8009e5e:	462c      	mov	r4, r5
        void *p = xmalloc(4);
 8009e60:	2004      	movs	r0, #4
 8009e62:	f001 fb1b 	bl	800b49c <device_malloc>
        volatile unsigned hp = (unsigned)p;
 8009e66:	9001      	str	r0, [sp, #4]
        if (hp & 4) {
 8009e68:	9b01      	ldr	r3, [sp, #4]
        void *p = xmalloc(4);
 8009e6a:	4605      	mov	r5, r0
        if (hp & 4) {
 8009e6c:	075b      	lsls	r3, r3, #29
 8009e6e:	d5f2      	bpl.n	8009e56 <_ZN3pxt11initRuntimeEv+0x2a>
            xfree(p);
 8009e70:	f001 fb3a 	bl	800b4e8 <device_free>
            p = xmalloc(8);
 8009e74:	2008      	movs	r0, #8
 8009e76:	f001 fb11 	bl	800b49c <device_malloc>
 8009e7a:	4605      	mov	r5, r0
        if (p == commBase) {
 8009e7c:	42b5      	cmp	r5, r6
 8009e7e:	d1ec      	bne.n	8009e5a <_ZN3pxt11initRuntimeEv+0x2e>
            xfree(p);
 8009e80:	4628      	mov	r0, r5
 8009e82:	f001 fb31 	bl	800b4e8 <device_free>
            p = xmalloc(commSize);
 8009e86:	4638      	mov	r0, r7
 8009e88:	f001 fb08 	bl	800b49c <device_malloc>
            if (p != commBase)
 8009e8c:	4285      	cmp	r5, r0
 8009e8e:	d003      	beq.n	8009e98 <_ZN3pxt11initRuntimeEv+0x6c>
    target_panic(800 + subcode);
 8009e90:	f240 302a 	movw	r0, #810	; 0x32a
 8009e94:	f7f6 fd5c 	bl	8000950 <target_panic>
    while (head) {
 8009e98:	b134      	cbz	r4, 8009ea8 <_ZN3pxt11initRuntimeEv+0x7c>
        head = head->next;
 8009e9a:	6825      	ldr	r5, [r4, #0]
        xfree(p);
 8009e9c:	4620      	mov	r0, r4
    while (head) {
 8009e9e:	462c      	mov	r4, r5
        xfree(p);
 8009ea0:	f001 fb22 	bl	800b4e8 <device_free>
    while (head) {
 8009ea4:	2c00      	cmp	r4, #0
 8009ea6:	d1f8      	bne.n	8009e9a <_ZN3pxt11initRuntimeEv+0x6e>
    debug_println("---initCodal scheduler_init"); debug_flush();  //// TODO
 8009ea8:	4824      	ldr	r0, [pc, #144]	; (8009f3c <_ZN3pxt11initRuntimeEv+0x110>)
 8009eaa:	f7f9 ffcb 	bl	8003e44 <debug_println>
 8009eae:	4c24      	ldr	r4, [pc, #144]	; (8009f40 <_ZN3pxt11initRuntimeEv+0x114>)
 8009eb0:	f7f9 ff48 	bl	8003d44 <debug_flush>
    scheduler_init(devMessageBus);
 8009eb4:	4823      	ldr	r0, [pc, #140]	; (8009f44 <_ZN3pxt11initRuntimeEv+0x118>)
 8009eb6:	f000 ff29 	bl	800ad0c <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("---initCodal components.init"); debug_flush();  //// TODO
 8009eba:	4823      	ldr	r0, [pc, #140]	; (8009f48 <_ZN3pxt11initRuntimeEv+0x11c>)
 8009ebc:	f7f9 ffc2 	bl	8003e44 <debug_println>
 8009ec0:	4e22      	ldr	r6, [pc, #136]	; (8009f4c <_ZN3pxt11initRuntimeEv+0x120>)
 8009ec2:	f7f9 ff3f 	bl	8003d44 <debug_flush>
 8009ec6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8009eca:	e001      	b.n	8009ed0 <_ZN3pxt11initRuntimeEv+0xa4>
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 8009ecc:	42a5      	cmp	r5, r4
 8009ece:	d00a      	beq.n	8009ee6 <_ZN3pxt11initRuntimeEv+0xba>
        if (CodalComponent::components[i])
 8009ed0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d0f9      	beq.n	8009ecc <_ZN3pxt11initRuntimeEv+0xa0>
            CodalComponent::components[i]->init();
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	42b3      	cmp	r3, r6
 8009ede:	d0f5      	beq.n	8009ecc <_ZN3pxt11initRuntimeEv+0xa0>
 8009ee0:	4798      	blx	r3
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 8009ee2:	42a5      	cmp	r5, r4
 8009ee4:	d1f4      	bne.n	8009ed0 <_ZN3pxt11initRuntimeEv+0xa4>
    debug_println("---initCodal usb_init"); debug_flush();  //// TODO
 8009ee6:	481a      	ldr	r0, [pc, #104]	; (8009f50 <_ZN3pxt11initRuntimeEv+0x124>)
 8009ee8:	f7f9 ffac 	bl	8003e44 <debug_println>
 8009eec:	f7f9 ff2a 	bl	8003d44 <debug_flush>
    usb_init();
 8009ef0:	f000 fb58 	bl	800a5a4 <_ZN3pxt8usb_initEv>
    debug_println("---initCodal done"); debug_flush();  //// TODO
 8009ef4:	4817      	ldr	r0, [pc, #92]	; (8009f54 <_ZN3pxt11initRuntimeEv+0x128>)
 8009ef6:	f7f9 ffa5 	bl	8003e44 <debug_println>
 8009efa:	f7f9 ff23 	bl	8003d44 <debug_flush>
    auto led = LOOKUP_PIN(LED);
 8009efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f02:	200d      	movs	r0, #13
 8009f04:	f7fe f828 	bl	8007f58 <_ZN3pxt9getConfigEii>
 8009f08:	b2c0      	uxtb	r0, r0
 8009f0a:	f000 f9fd 	bl	800a308 <_ZN3pxt9lookupPinEi>
    if (led) {
 8009f0e:	b118      	cbz	r0, 8009f18 <_ZN3pxt11initRuntimeEv+0xec>
        led->setDigitalValue(0);
 8009f10:	6803      	ldr	r3, [r0, #0]
 8009f12:	2100      	movs	r1, #0
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4798      	blx	r3
    initCodal();
    platform_init();
}
 8009f18:	b003      	add	sp, #12
 8009f1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    platform_init();
 8009f1e:	f000 ba9f 	b.w	800a460 <_ZN3pxt13platform_initEv>
 8009f22:	f240 302b 	movw	r0, #811	; 0x32b
 8009f26:	f7f6 fd13 	bl	8000950 <target_panic>
 8009f2a:	e797      	b.n	8009e5c <_ZN3pxt11initRuntimeEv+0x30>
 8009f2c:	0800d0a4 	.word	0x0800d0a4
 8009f30:	0800d0c0 	.word	0x0800d0c0
 8009f34:	20001034 	.word	0x20001034
 8009f38:	20001000 	.word	0x20001000
 8009f3c:	0800d0d8 	.word	0x0800d0d8
 8009f40:	20001118 	.word	0x20001118
 8009f44:	20001038 	.word	0x20001038
 8009f48:	0800d0f4 	.word	0x0800d0f4
 8009f4c:	08009cfd 	.word	0x08009cfd
 8009f50:	0800d114 	.word	0x0800d114
 8009f54:	0800d12c 	.word	0x0800d12c

08009f58 <_ZN3pxt16afterProgramPageEv>:

//
unsigned afterProgramPage() {
    unsigned ptr = (unsigned)&bytecode[0];
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <_ZN3pxt16afterProgramPageEv+0x1c>)
unsigned afterProgramPage() {
 8009f5a:	b510      	push	{r4, lr}
    unsigned ptr = (unsigned)&bytecode[0];
 8009f5c:	681c      	ldr	r4, [r3, #0]
    ptr += programSize();
 8009f5e:	f7fd fff3 	bl	8007f48 <_ZN3pxt11programSizeEv>
    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
 8009f62:	f204 34ff 	addw	r4, r4, #1023	; 0x3ff
 8009f66:	4420      	add	r0, r4
    return ptr;
}
 8009f68:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8009f6c:	f020 0003 	bic.w	r0, r0, #3
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	bf00      	nop
 8009f74:	20001034 	.word	0x20001034

08009f78 <_ZN3pxt15getSerialNumberEv>:
          * Determines a unique 32 bit ID for this device, if provided by the hardware.
          * @return A 32 bit unique identifier.
          */
        virtual uint32_t getSerialNumber()
        {
            return target_get_serial();
 8009f78:	f7f6 bcde 	b.w	8000938 <target_get_serial>

08009f7c <_ZN3pxt15current_time_msEv>:
int getSerialNumber() {
    return device.getSerialNumber();
}

int current_time_ms() {
    return system_timer_current_time();
 8009f7c:	f001 bc4a 	b.w	800b814 <_ZN5codal25system_timer_current_timeEv>

08009f80 <_ZN3pxt16getThreadContextEv>:
}

#ifdef PXT_GC
ThreadContext *getThreadContext() {
    return (ThreadContext *)currentFiber->user_data;
 8009f80:	4b01      	ldr	r3, [pc, #4]	; (8009f88 <_ZN3pxt16getThreadContextEv+0x8>)
 8009f82:	681b      	ldr	r3, [r3, #0]
}
 8009f84:	6a18      	ldr	r0, [r3, #32]
 8009f86:	4770      	bx	lr
 8009f88:	20001620 	.word	0x20001620

08009f8c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>:

void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
 8009f8c:	4b01      	ldr	r3, [pc, #4]	; (8009f94 <_ZN3pxt16setThreadContextEPNS_13ThreadContextE+0x8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6218      	str	r0, [r3, #32]
}
 8009f92:	4770      	bx	lr
 8009f94:	20001620 	.word	0x20001620

08009f98 <_ZN3pxt15gcProcessStacksEi>:
    if (fib == currentFiber)
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
}

void gcProcessStacks(int flags) {
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	b085      	sub	sp, #20
    int numFibers = codal::list_fibers(NULL);
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f000 fd91 	bl	800aac8 <_ZN5codal11list_fibersEPPNS_5FiberE>
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 8009fa6:	0085      	lsls	r5, r0, #2
    int numFibers = codal::list_fibers(NULL);
 8009fa8:	4604      	mov	r4, r0
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 8009faa:	4628      	mov	r0, r5
 8009fac:	f001 fa76 	bl	800b49c <device_malloc>
 8009fb0:	9003      	str	r0, [sp, #12]
    int num2 = codal::list_fibers(fibers);
 8009fb2:	f000 fd89 	bl	800aac8 <_ZN5codal11list_fibersEPPNS_5FiberE>
    if (numFibers != num2)
 8009fb6:	4284      	cmp	r4, r0
 8009fb8:	d003      	beq.n	8009fc2 <_ZN3pxt15gcProcessStacksEi+0x2a>
 8009fba:	f44f 704b 	mov.w	r0, #812	; 0x32c
 8009fbe:	f7f6 fcc7 	bl	8000950 <target_panic>
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
 8009fc2:	2c00      	cmp	r4, #0
 8009fc4:	dd3a      	ble.n	800a03c <_ZN3pxt15gcProcessStacksEi+0xa4>
 8009fc6:	f04f 0800 	mov.w	r8, #0
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800a068 <_ZN3pxt15gcProcessStacksEi+0xd0>
 8009fd0:	3b04      	subs	r3, #4
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	442b      	add	r3, r5
 8009fd6:	f00a 0a02 	and.w	sl, sl, #2
 8009fda:	9302      	str	r3, [sp, #8]
        auto fib = fibers[i];
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	f853 7f04 	ldr.w	r7, [r3, #4]!
        auto ctx = (ThreadContext *)fib->user_data;
 8009fe2:	6a3e      	ldr	r6, [r7, #32]
        auto fib = fibers[i];
 8009fe4:	9301      	str	r3, [sp, #4]
        if (!ctx)
 8009fe6:	b32e      	cbz	r6, 800a034 <_ZN3pxt15gcProcessStacksEi+0x9c>
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 8009fe8:	3604      	adds	r6, #4
    if (fib == currentFiber)
 8009fea:	f8d9 3000 	ldr.w	r3, [r9]
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
 8009fee:	6834      	ldr	r4, [r6, #0]
    if (fib == currentFiber)
 8009ff0:	429f      	cmp	r7, r3
 8009ff2:	d029      	beq.n	800a048 <_ZN3pxt15gcProcessStacksEi+0xb0>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8009ff4:	6838      	ldr	r0, [r7, #0]
 8009ff6:	68bd      	ldr	r5, [r7, #8]
 8009ff8:	f7f6 fcc8 	bl	800098c <tcb_get_stack_base>
    if (fib == currentFiber)
 8009ffc:	f8d9 3000 	ldr.w	r3, [r9]
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a000:	1a28      	subs	r0, r5, r0
    if (fib == currentFiber)
 800a002:	429f      	cmp	r7, r3
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a004:	4404      	add	r4, r0
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 800a006:	6875      	ldr	r5, [r6, #4]
    if (fib == currentFiber)
 800a008:	d007      	beq.n	800a01a <_ZN3pxt15gcProcessStacksEi+0x82>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a00a:	6838      	ldr	r0, [r7, #0]
 800a00c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800a010:	f7f6 fcbc 	bl	800098c <tcb_get_stack_base>
 800a014:	ebab 0000 	sub.w	r0, fp, r0
 800a018:	4405      	add	r5, r0
            if (flags & 2)
 800a01a:	f1ba 0f00 	cmp.w	sl, #0
 800a01e:	d004      	beq.n	800a02a <_ZN3pxt15gcProcessStacksEi+0x92>
 800a020:	e016      	b.n	800a050 <_ZN3pxt15gcProcessStacksEi+0xb8>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
            // VLOG("mark: %p - %p", ptr, end);
            while (ptr < end) {
                gcProcess(*ptr++);
 800a022:	f854 0b04 	ldr.w	r0, [r4], #4
 800a026:	f7fe ff6f 	bl	8008f08 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
            while (ptr < end) {
 800a02a:	42ac      	cmp	r4, r5
 800a02c:	d3f9      	bcc.n	800a022 <_ZN3pxt15gcProcessStacksEi+0x8a>
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 800a02e:	68b6      	ldr	r6, [r6, #8]
 800a030:	2e00      	cmp	r6, #0
 800a032:	d1da      	bne.n	8009fea <_ZN3pxt15gcProcessStacksEi+0x52>
    for (int i = 0; i < numFibers; ++i) {
 800a034:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a038:	4293      	cmp	r3, r2
 800a03a:	d1cf      	bne.n	8009fdc <_ZN3pxt15gcProcessStacksEi+0x44>
            }
        }
    }
    xfree(fibers);
 800a03c:	9803      	ldr	r0, [sp, #12]
}
 800a03e:	b005      	add	sp, #20
 800a040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    xfree(fibers);
 800a044:	f001 ba50 	b.w	800b4e8 <device_free>
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 800a048:	6875      	ldr	r5, [r6, #4]
            if (flags & 2)
 800a04a:	f1ba 0f00 	cmp.w	sl, #0
 800a04e:	d0ec      	beq.n	800a02a <_ZN3pxt15gcProcessStacksEi+0x92>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
 800a050:	1b2b      	subs	r3, r5, r4
 800a052:	4641      	mov	r1, r8
 800a054:	109b      	asrs	r3, r3, #2
 800a056:	4622      	mov	r2, r4
 800a058:	4802      	ldr	r0, [pc, #8]	; (800a064 <_ZN3pxt15gcProcessStacksEi+0xcc>)
 800a05a:	f108 0801 	add.w	r8, r8, #1
 800a05e:	f000 fced 	bl	800aa3c <codal_dmesg>
 800a062:	e7e2      	b.n	800a02a <_ZN3pxt15gcProcessStacksEi+0x92>
 800a064:	0800d140 	.word	0x0800d140
 800a068:	20001620 	.word	0x20001620

0800a06c <_GLOBAL__sub_I__ZN3pxt8devTimerE>:
#endif

} // namespace pxt
 800a06c:	b570      	push	{r4, r5, r6, lr}
CODAL_TIMER devTimer;
 800a06e:	4e0d      	ldr	r6, [pc, #52]	; (800a0a4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x38>)
 800a070:	4d0d      	ldr	r5, [pc, #52]	; (800a0a8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x3c>)
 800a072:	4630      	mov	r0, r6
 800a074:	f002 f97e 	bl	800c374 <_ZN5codal3_cm5TimerC1Ev>
MessageBus devMessageBus;
 800a078:	4c0c      	ldr	r4, [pc, #48]	; (800a0ac <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x40>)
CODAL_TIMER devTimer;
 800a07a:	462a      	mov	r2, r5
 800a07c:	490c      	ldr	r1, [pc, #48]	; (800a0b0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x44>)
 800a07e:	4630      	mov	r0, r6
 800a080:	f7f6 fcc8 	bl	8000a14 <__aeabi_atexit>
Event lastEvent;
 800a084:	480b      	ldr	r0, [pc, #44]	; (800a0b4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x48>)
 800a086:	f001 ff03 	bl	800be90 <_ZN5codal5EventC1Ev>
MessageBus devMessageBus;
 800a08a:	4620      	mov	r0, r4
 800a08c:	f001 fd86 	bl	800bb9c <_ZN5codal10MessageBusC1Ev>
 800a090:	462a      	mov	r2, r5
 800a092:	4620      	mov	r0, r4
 800a094:	4908      	ldr	r1, [pc, #32]	; (800a0b8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x4c>)
 800a096:	f7f6 fcbd 	bl	8000a14 <__aeabi_atexit>
        {
 800a09a:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x50>)
 800a09c:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x54>)
 800a09e:	601a      	str	r2, [r3, #0]
} // namespace pxt
 800a0a0:	bd70      	pop	{r4, r5, r6, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20001060 	.word	0x20001060
 800a0a8:	20000578 	.word	0x20000578
 800a0ac:	20001038 	.word	0x20001038
 800a0b0:	08009dbd 	.word	0x08009dbd
 800a0b4:	20001084 	.word	0x20001084
 800a0b8:	0800baf5 	.word	0x0800baf5
 800a0bc:	2000105c 	.word	0x2000105c
 800a0c0:	0800d204 	.word	0x0800d204

0800a0c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>:
void registerWithDal(int id, int event, Action a, int flags) {
 800a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	4616      	mov	r6, r2
 800a0cc:	461f      	mov	r7, r3
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
    if (!findBinding(id, event))
 800a0d2:	f7fd fc0b 	bl	80078ec <_ZN3pxt11findBindingEii>
 800a0d6:	b138      	cbz	r0, 800a0e8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x24>
    setBinding(id, event, a);
 800a0d8:	4632      	mov	r2, r6
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4620      	mov	r0, r4
}
 800a0de:	b002      	add	sp, #8
 800a0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setBinding(id, event, a);
 800a0e4:	f7fd bc10 	b.w	8007908 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>
        int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 800a0e8:	2c0f      	cmp	r4, #15
        devMessageBus.listen(id, event, dispatchEvent, flags);
 800a0ea:	b2bf      	uxth	r7, r7
 800a0ec:	d101      	bne.n	800a0f2 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x2e>
 800a0ee:	2fc0      	cmp	r7, #192	; 0xc0
 800a0f0:	d1f2      	bne.n	800a0d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 800a0f2:	2020      	movs	r0, #32
 800a0f4:	f7f9 ff2c 	bl	8003f50 <_Znwj>
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	b2a1      	uxth	r1, r4
 800a0fc:	9700      	str	r7, [sp, #0]
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x5c>)
 800a100:	b2aa      	uxth	r2, r5
 800a102:	f001 fa39 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 800a106:	4641      	mov	r1, r8
 800a108:	4806      	ldr	r0, [pc, #24]	; (800a124 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x60>)
 800a10a:	f001 fc41 	bl	800b990 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d0e2      	beq.n	800a0d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_OK;

            delete newListener;
 800a112:	4640      	mov	r0, r8
 800a114:	f001 fa48 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800a118:	4640      	mov	r0, r8
 800a11a:	f7f9 ff1b 	bl	8003f54 <_ZdlPv>
 800a11e:	e7db      	b.n	800a0d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
 800a120:	08009d1d 	.word	0x08009d1d
 800a124:	20001038 	.word	0x20001038

0800a128 <_ZN7control10raiseEventEii>:
//
//
//
//
//
void raiseEvent(int src, int value) {
 800a128:	b500      	push	{lr}
 800a12a:	b083      	sub	sp, #12
    Event evt(src, value);
 800a12c:	b28a      	uxth	r2, r1
 800a12e:	2301      	movs	r3, #1
 800a130:	b281      	uxth	r1, r0
 800a132:	4668      	mov	r0, sp
 800a134:	f001 fe92 	bl	800be5c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 800a138:	b003      	add	sp, #12
 800a13a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a13e:	bf00      	nop

0800a140 <_ZN7control16deviceDalVersionEv>:
//
//
//
//
String deviceDalVersion() {
    return mkString(device.getVersion());
 800a140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <_ZN7control16deviceDalVersionEv+0xc>)
 800a146:	f7fd bc05 	b.w	8007954 <_ZN3pxt8mkStringEPKci>
 800a14a:	bf00      	nop
 800a14c:	0800d14c 	.word	0x0800d14c

0800a150 <_ZN7control19allocateNotifyEventEv>:

//
//
//
//
int allocateNotifyEvent() {
 800a150:	b508      	push	{r3, lr}
    return ::allocateNotifyEvent();
 800a152:	f001 fe65 	bl	800be20 <_ZN5codal19allocateNotifyEventEv>
}
 800a156:	bd08      	pop	{r3, pc}

0800a158 <_ZN7control5dmesgEPN3pxt11BoxedStringE>:

//
//
void dmesg(String s) {
    DMESG("# %s", s->data);
 800a158:	1d81      	adds	r1, r0, #6
 800a15a:	4801      	ldr	r0, [pc, #4]	; (800a160 <_ZN7control5dmesgEPN3pxt11BoxedStringE+0x8>)
 800a15c:	f000 bc6e 	b.w	800aa3c <codal_dmesg>
 800a160:	0800d154 	.word	0x0800d154

0800a164 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv>:
}

//
//
void dmesgPtr(String str, Object_ ptr) {
    DMESG("# %s: %p", str->data, ptr);
 800a164:	460a      	mov	r2, r1
 800a166:	1d81      	adds	r1, r0, #6
 800a168:	4801      	ldr	r0, [pc, #4]	; (800a170 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv+0xc>)
 800a16a:	f000 bc67 	b.w	800aa3c <codal_dmesg>
 800a16e:	bf00      	nop
 800a170:	0800d15c 	.word	0x0800d15c

0800a174 <_ZN4pinsL7initI2CEv.part.0>:
#include "ErrorNo.h"

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
 800a174:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));
 800a176:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a17a:	2019      	movs	r0, #25
 800a17c:	f7fd feec 	bl	8007f58 <_ZN3pxt9getConfigEii>
 800a180:	b2c0      	uxtb	r0, r0
 800a182:	f000 f8c1 	bl	800a308 <_ZN3pxt9lookupPinEi>
 800a186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a18a:	4605      	mov	r5, r0
 800a18c:	2018      	movs	r0, #24
 800a18e:	f7fd fee3 	bl	8007f58 <_ZN3pxt9getConfigEii>
 800a192:	b2c0      	uxtb	r0, r0
 800a194:	f000 f8b8 	bl	800a308 <_ZN3pxt9lookupPinEi>
 800a198:	4606      	mov	r6, r0
 800a19a:	2010      	movs	r0, #16
 800a19c:	f7f9 fed8 	bl	8003f50 <_Znwj>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	4632      	mov	r2, r6
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f001 feb3 	bl	800bf10 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 800a1aa:	4b01      	ldr	r3, [pc, #4]	; (800a1b0 <_ZN4pinsL7initI2CEv.part.0+0x3c>)
 800a1ac:	601c      	str	r4, [r3, #0]
      }
    }
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	2000108c 	.word	0x2000108c

0800a1b4 <_ZN4pins13i2cReadBufferEiib>:
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if (NULL == i2c) {
 800a1b8:	4f10      	ldr	r7, [pc, #64]	; (800a1fc <_ZN4pins13i2cReadBufferEiib+0x48>)
    {
 800a1ba:	b082      	sub	sp, #8
      if (NULL == i2c) {
 800a1bc:	683b      	ldr	r3, [r7, #0]
    {
 800a1be:	4604      	mov	r4, r0
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	4690      	mov	r8, r2
      if (NULL == i2c) {
 800a1c4:	b1b3      	cbz	r3, 800a1f4 <_ZN4pins13i2cReadBufferEiib+0x40>
      initI2C();
      Buffer buf = mkBuffer(NULL, size);
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f7fd fbe9 	bl	80079a0 <_ZN3pxt8mkBufferEPKhi>
 800a1ce:	4605      	mov	r5, r0
      int status = i2c->read(address << 1, buf->data, size, repeat);
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	0061      	lsls	r1, r4, #1
 800a1d4:	6804      	ldr	r4, [r0, #0]
 800a1d6:	f8cd 8000 	str.w	r8, [sp]
 800a1da:	b289      	uxth	r1, r1
 800a1dc:	4633      	mov	r3, r6
 800a1de:	69e4      	ldr	r4, [r4, #28]
 800a1e0:	f105 0208 	add.w	r2, r5, #8
 800a1e4:	47a0      	blx	r4
      if (status != ErrorCode::DEVICE_OK) {
 800a1e6:	2800      	cmp	r0, #0
        decrRC(buf);
        buf = 0;
      }
      return buf;
    }
 800a1e8:	bf0c      	ite	eq
 800a1ea:	4628      	moveq	r0, r5
 800a1ec:	2000      	movne	r0, #0
 800a1ee:	b002      	add	sp, #8
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	f7ff ffbe 	bl	800a174 <_ZN4pinsL7initI2CEv.part.0>
 800a1f8:	e7e5      	b.n	800a1c6 <_ZN4pins13i2cReadBufferEiib+0x12>
 800a1fa:	bf00      	nop
 800a1fc:	2000108c 	.word	0x2000108c

0800a200 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb>:
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 800a200:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
 800a202:	4e0b      	ldr	r6, [pc, #44]	; (800a230 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x30>)
    {
 800a204:	4604      	mov	r4, r0
      if (NULL == i2c) {
 800a206:	6830      	ldr	r0, [r6, #0]
    {
 800a208:	b084      	sub	sp, #16
 800a20a:	460d      	mov	r5, r1
      if (NULL == i2c) {
 800a20c:	b150      	cbz	r0, 800a224 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x24>
      initI2C();
      return i2c->write(address << 1, buf->data, buf->length, repeat);
 800a20e:	0061      	lsls	r1, r4, #1
 800a210:	6804      	ldr	r4, [r0, #0]
 800a212:	686b      	ldr	r3, [r5, #4]
 800a214:	9200      	str	r2, [sp, #0]
 800a216:	b289      	uxth	r1, r1
 800a218:	6964      	ldr	r4, [r4, #20]
 800a21a:	f105 0208 	add.w	r2, r5, #8
 800a21e:	47a0      	blx	r4
    }
 800a220:	b004      	add	sp, #16
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	9203      	str	r2, [sp, #12]
 800a226:	f7ff ffa5 	bl	800a174 <_ZN4pinsL7initI2CEv.part.0>
 800a22a:	6830      	ldr	r0, [r6, #0]
 800a22c:	9a03      	ldr	r2, [sp, #12]
 800a22e:	e7ee      	b.n	800a20e <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0xe>
 800a230:	2000108c 	.word	0x2000108c

0800a234 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a234:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop

0800a23c <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a23c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop

0800a244 <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a244:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop

0800a24c <_ZN3pxt6getPinEi>:
static uint8_t numPinPtrs;
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
    if (id < 0 || id >= DEV_NUM_PINS)
 800a24c:	287f      	cmp	r0, #127	; 0x7f
DevicePin *getPin(int id) {
 800a24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a252:	4604      	mov	r4, r0
    if (id < 0 || id >= DEV_NUM_PINS)
 800a254:	d83f      	bhi.n	800a2d6 <_ZN3pxt6getPinEi+0x8a>
        target_panic(PANIC_NO_SUCH_PIN);

    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
 800a256:	4e22      	ldr	r6, [pc, #136]	; (800a2e0 <_ZN3pxt6getPinEi+0x94>)
 800a258:	4d22      	ldr	r5, [pc, #136]	; (800a2e4 <_ZN3pxt6getPinEi+0x98>)
 800a25a:	5d33      	ldrb	r3, [r6, r4]
 800a25c:	6828      	ldr	r0, [r5, #0]
    if (ptr == 0) {
 800a25e:	bb9b      	cbnz	r3, 800a2c8 <_ZN3pxt6getPinEi+0x7c>
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
 800a260:	4f21      	ldr	r7, [pc, #132]	; (800a2e8 <_ZN3pxt6getPinEi+0x9c>)
 800a262:	7839      	ldrb	r1, [r7, #0]
 800a264:	3101      	adds	r1, #1
 800a266:	0089      	lsls	r1, r1, #2
 800a268:	f7ff f8fe 	bl	8009468 <realloc>
 800a26c:	6028      	str	r0, [r5, #0]
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 800a26e:	2020      	movs	r0, #32
 800a270:	f7f9 fe6e 	bl	8003f50 <_Znwj>
        bool isAnalog = IS_ANALOG_PIN(id);
 800a274:	213f      	movs	r1, #63	; 0x3f
 800a276:	2300      	movs	r3, #0
 800a278:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a2f0 <_ZN3pxt6getPinEi+0xa4>
 800a27c:	f1c4 0e20 	rsb	lr, r4, #32
 800a280:	fa01 fe0e 	lsl.w	lr, r1, lr
 800a284:	fa2c f904 	lsr.w	r9, ip, r4
 800a288:	f1a4 0c20 	sub.w	ip, r4, #32
 800a28c:	fa21 fc0c 	lsr.w	ip, r1, ip
 800a290:	ea49 090e 	orr.w	r9, r9, lr
 800a294:	ea49 090c 	orr.w	r9, r9, ip
 800a298:	f009 0201 	and.w	r2, r9, #1
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 800a29c:	4313      	orrs	r3, r2
        //  Codal constructor.  Called by pxt-maker.
        STM32BluePillPin(
            int id,              //  e.g. DEVICE_ID_IO_P0 + CM_PIN_PC13
            PinName       name,  //  e.g. CM_PIN_PC13
            PinCapability capability  //  e.g. PIN_CAPABILITY_DIGITAL
        ): codal::_cm::Pin(id, name, capability) {}
 800a29e:	bf0c      	ite	eq
 800a2a0:	2301      	moveq	r3, #1
 800a2a2:	2303      	movne	r3, #3
 800a2a4:	b2e2      	uxtb	r2, r4
 800a2a6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	f001 ff2a 	bl	800c104 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>
        pinPtrs[numPinPtrs++] =
 800a2b0:	7839      	ldrb	r1, [r7, #0]
 800a2b2:	6828      	ldr	r0, [r5, #0]
 800a2b4:	1c4a      	adds	r2, r1, #1
 800a2b6:	b2d2      	uxtb	r2, r2
        ptr = numPinPtrs;
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	4d0c      	ldr	r5, [pc, #48]	; (800a2ec <_ZN3pxt6getPinEi+0xa0>)
        pinPtrs[numPinPtrs++] =
 800a2bc:	703a      	strb	r2, [r7, #0]
 800a2be:	f8c8 5000 	str.w	r5, [r8]
        pinPos[id] = ptr;
 800a2c2:	5532      	strb	r2, [r6, r4]
        pinPtrs[numPinPtrs++] =
 800a2c4:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
    }
    return pinPtrs[ptr - 1];
 800a2c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2cc:	3b01      	subs	r3, #1
}
 800a2ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        target_panic(PANIC_NO_SUCH_PIN);
 800a2d6:	f44f 7063 	mov.w	r0, #908	; 0x38c
 800a2da:	f7f6 fb39 	bl	8000950 <target_panic>
 800a2de:	e7ba      	b.n	800a256 <_ZN3pxt6getPinEi+0xa>
 800a2e0:	20001090 	.word	0x20001090
 800a2e4:	20001110 	.word	0x20001110
 800a2e8:	2000166e 	.word	0x2000166e
 800a2ec:	0800d170 	.word	0x0800d170
 800a2f0:	e0030fff 	.word	0xe0030fff

0800a2f4 <_ZN3pxt9getPinCfgEi>:

//
DevicePin *getPinCfg(int key) {
 800a2f4:	b508      	push	{r3, lr}
    return getPin(getConfig(key));
 800a2f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a2fa:	f7fd fe2d 	bl	8007f58 <_ZN3pxt9getConfigEii>
}
 800a2fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return getPin(getConfig(key));
 800a302:	f7ff bfa3 	b.w	800a24c <_ZN3pxt6getPinEi>
 800a306:	bf00      	nop

0800a308 <_ZN3pxt9lookupPinEi>:
    pinPos[from] = pinPos[to];
}

//
DevicePin *lookupPin(int pinName) {
    if (pinName < 0 || pinName == 0xff)
 800a308:	1e03      	subs	r3, r0, #0
 800a30a:	db03      	blt.n	800a314 <_ZN3pxt9lookupPinEi+0xc>
 800a30c:	2bff      	cmp	r3, #255	; 0xff
 800a30e:	d001      	beq.n	800a314 <_ZN3pxt9lookupPinEi+0xc>
        return NULL;
    return getPin(pinName);
 800a310:	f7ff bf9c 	b.w	800a24c <_ZN3pxt6getPinEi>
}
 800a314:	2000      	movs	r0, #0
 800a316:	4770      	bx	lr

0800a318 <_ZN4pins12createBufferEi>:
//
//
//
//
Buffer createBuffer(int size) {
    return mkBuffer(NULL, size);
 800a318:	4601      	mov	r1, r0
 800a31a:	2000      	movs	r0, #0
 800a31c:	f7fd bb40 	b.w	80079a0 <_ZN3pxt8mkBufferEPKhi>

0800a320 <_ZN4pins13pulseDurationEv>:
//
//
//
//
int pulseDuration() {
    return pxt::lastEvent.timestamp;
 800a320:	4b01      	ldr	r3, [pc, #4]	; (800a328 <_ZN4pins13pulseDurationEv+0x8>)
}
 800a322:	6858      	ldr	r0, [r3, #4]
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20001084 	.word	0x20001084

0800a32c <_ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
int analogRead(AnalogInPin name) {
    return PINOP(getAnalogValue());
 800a32c:	6803      	ldr	r3, [r0, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	4718      	bx	r3
 800a332:	bf00      	nop

0800a334 <_ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogWrite(AnalogOutPin name, int value) {
    PINOP(setAnalogValue(value));
 800a334:	6803      	ldr	r3, [r0, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	4718      	bx	r3
 800a33a:	bf00      	nop

0800a33c <_ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
//
bool digitalRead(DigitalInOutPin name) {
 800a33c:	b508      	push	{r3, lr}
    return PINOP(getDigitalValue()) != 0;
 800a33e:	6803      	ldr	r3, [r0, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	4798      	blx	r3
}
 800a344:	3000      	adds	r0, #0
 800a346:	bf18      	it	ne
 800a348:	2001      	movne	r0, #1
 800a34a:	bd08      	pop	{r3, pc}

0800a34c <_ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb>:
//
//
//
//
void digitalWrite(DigitalInOutPin name, bool value) {
    PINOP(setDigitalValue(value));
 800a34c:	6803      	ldr	r3, [r0, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4718      	bx	r3
 800a352:	bf00      	nop

0800a354 <_ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE>:
//
//
//
//
//
void onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	4604      	mov	r4, r0
 800a358:	460d      	mov	r5, r1
 800a35a:	4616      	mov	r6, r2
    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	2102      	movs	r1, #2
 800a360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a362:	4798      	blx	r3
    registerWithDal(pin->id, (int)pulse, body);
 800a364:	4632      	mov	r2, r6
 800a366:	4629      	mov	r1, r5
 800a368:	89e0      	ldrh	r0, [r4, #14]
 800a36a:	2310      	movs	r3, #16
}
 800a36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    registerWithDal(pin->id, (int)pulse, body);
 800a370:	f7ff bea8 	b.w	800a0c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

0800a374 <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE>:
//
//
//
//
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
    switch(event) {
 800a374:	1e8b      	subs	r3, r1, #2
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	460d      	mov	r5, r1
 800a37a:	4604      	mov	r4, r0
 800a37c:	4616      	mov	r6, r2
    switch(event) {
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d813      	bhi.n	800a3aa <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x36>
 800a382:	e8df f003 	tbb	[pc, r3]
 800a386:	0f0f      	.short	0x0f0f
 800a388:	0202      	.short	0x0202
        case PinEvent::PulseHigh:
        case PinEvent::PulseLow:
            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 800a38a:	2102      	movs	r1, #2
 800a38c:	6803      	ldr	r3, [r0, #0]
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 800a38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a390:	4620      	mov	r0, r4
 800a392:	4798      	blx	r3
            registerWithDal(pin->id, (int)event, body);
 800a394:	4632      	mov	r2, r6
 800a396:	4629      	mov	r1, r5
 800a398:	89e0      	ldrh	r0, [r4, #14]
 800a39a:	2310      	movs	r3, #16
            break;    
    }    
}
 800a39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            registerWithDal(pin->id, (int)event, body);
 800a3a0:	f7ff be90 	b.w	800a0c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 800a3a4:	6803      	ldr	r3, [r0, #0]
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	e7f1      	b.n	800a38e <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x1a>
}
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}

0800a3ac <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei>:
//
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 800a3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pulse = PulseValue::High == value ? 1 : 0;
 800a3b0:	f1a1 0904 	sub.w	r9, r1, #4
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4680      	mov	r8, r0
    int pulse = PulseValue::High == value ? 1 : 0;
 800a3b8:	fab9 f989 	clz	r9, r9
    uint64_t tick = system_timer_current_time_us();
 800a3bc:	f001 fa38 	bl	800b830 <_ZN5codal28system_timer_current_time_usEv>
    int pulse = PulseValue::High == value ? 1 : 0;
 800a3c0:	ea4f 1959 	mov.w	r9, r9, lsr #5
    uint64_t maxd = (uint64_t)maxDuration;
 800a3c4:	17e5      	asrs	r5, r4, #31
    uint64_t tick = system_timer_current_time_us();
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	e009      	b.n	800a3e0 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x34>
    while (pin->getDigitalValue() != pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 800a3cc:	f001 fa30 	bl	800b830 <_ZN5codal28system_timer_current_time_usEv>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	1b82      	subs	r2, r0, r6
 800a3d4:	eb63 0307 	sbc.w	r3, r3, r7
 800a3d8:	429d      	cmp	r5, r3
 800a3da:	bf08      	it	eq
 800a3dc:	4294      	cmpeq	r4, r2
 800a3de:	d322      	bcc.n	800a426 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() != pulse) {
 800a3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	4798      	blx	r3
 800a3ea:	4548      	cmp	r0, r9
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	d1ed      	bne.n	800a3cc <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x20>
            return 0;
    }

    uint64_t start = system_timer_current_time_us();
 800a3f0:	f001 fa1e 	bl	800b830 <_ZN5codal28system_timer_current_time_usEv>
 800a3f4:	4681      	mov	r9, r0
 800a3f6:	e009      	b.n	800a40c <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x60>
    while (pin->getDigitalValue() == pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 800a3f8:	f001 fa1a 	bl	800b830 <_ZN5codal28system_timer_current_time_usEv>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	1b82      	subs	r2, r0, r6
 800a400:	eb63 0307 	sbc.w	r3, r3, r7
 800a404:	429d      	cmp	r5, r3
 800a406:	bf08      	it	eq
 800a408:	4294      	cmpeq	r4, r2
 800a40a:	d30c      	bcc.n	800a426 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() == pulse) {
 800a40c:	f8d8 3000 	ldr.w	r3, [r8]
 800a410:	4640      	mov	r0, r8
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	4798      	blx	r3
 800a416:	4582      	cmp	sl, r0
 800a418:	d0ee      	beq.n	800a3f8 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x4c>
            return 0;
    }
    uint64_t end = system_timer_current_time_us();
 800a41a:	f001 fa09 	bl	800b830 <_ZN5codal28system_timer_current_time_usEv>
    return end - start;
 800a41e:	eba0 0009 	sub.w	r0, r0, r9
}
 800a422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 800a426:	2000      	movs	r0, #0
}
 800a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a42c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode>:
//
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800a42c:	b131      	cbz	r1, 800a43c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode+0x10>
                                                                        ? PullMode::Up
                                                                        : PullMode::None;
    PINOP(setPull(m));
 800a42e:	6803      	ldr	r3, [r0, #0]
                                                                        ? PullMode::Up
 800a430:	2901      	cmp	r1, #1
 800a432:	bf0c      	ite	eq
 800a434:	2102      	moveq	r1, #2
 800a436:	2100      	movne	r1, #0
    PINOP(setPull(m));
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	4718      	bx	r3
 800a43c:	6803      	ldr	r3, [r0, #0]
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800a43e:	2101      	movs	r1, #1
    PINOP(setPull(m));
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	4718      	bx	r3

0800a444 <_ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogSetPeriod(PwmOnlyPin name, int period) {
    PINOP(setAnalogPeriodUs(period));
 800a444:	f001 be80 	b.w	800c148 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>

0800a448 <_ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
    PINOP(setServoValue(value));
 800a448:	6802      	ldr	r2, [r0, #0]
void servoWrite(PwmOnlyPin name, int value) {
 800a44a:	b410      	push	{r4}
    PINOP(setServoValue(value));
 800a44c:	6914      	ldr	r4, [r2, #16]
 800a44e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a452:	46a4      	mov	ip, r4
 800a454:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
}
 800a458:	bc10      	pop	{r4}
    PINOP(setServoValue(value));
 800a45a:	4760      	bx	ip

0800a45c <_ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoSetPulse(PwmOnlyPin name, int duration) {
    PINOP(setServoPulseUs(duration));
 800a45c:	f001 be72 	b.w	800c144 <_ZN5codal3_cm3Pin15setServoPulseUsEi>

0800a460 <_ZN3pxt13platform_initEv>:

    void platformSendSerial(const char *data, int len) {
        debug_println("---pxt::platformSendSerial"); 
    }

    void platform_init() {
 800a460:	b508      	push	{r3, lr}
        //   This is called after cpu_clock_init.  CODAL scheduler is already started.
        debug_println("---pxt::platform_init");
 800a462:	4804      	ldr	r0, [pc, #16]	; (800a474 <_ZN3pxt13platform_initEv+0x14>)
 800a464:	f7f9 fcee 	bl	8003e44 <debug_println>

        //  Start the background tasks to flush the log and wait for restart requests.
        start_background_tasks();
 800a468:	f002 f838 	bl	800c4dc <start_background_tasks>

        initRandomSeed();
        debug_force_flush(); ////
        //  TODO: setSendToUART(platformSendSerial);
    }
 800a46c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        debug_force_flush(); ////
 800a470:	f7f9 bc72 	b.w	8003d58 <debug_force_flush>
 800a474:	0800d1d4 	.word	0x0800d1d4

0800a478 <_Z14cpu_clock_initv>:
}

void cpu_clock_init() {
 800a478:	b508      	push	{r3, lr}
    //  This is called before platform_init().  CODAL scheduler is not started yet.  Starting background tasks will fail.
    debug_println("---pxt::cpu_clock_init");
 800a47a:	4804      	ldr	r0, [pc, #16]	; (800a48c <_Z14cpu_clock_initv+0x14>)
 800a47c:	f7f9 fce2 	bl	8003e44 <debug_println>

    //  Init the CODAL timer.
    devTimer.init();
}
 800a480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    devTimer.init();
 800a484:	4802      	ldr	r0, [pc, #8]	; (800a490 <_Z14cpu_clock_initv+0x18>)
 800a486:	f001 bf8f 	b.w	800c3a8 <_ZN5codal3_cm5Timer4initEv>
 800a48a:	bf00      	nop
 800a48c:	0800d1bc 	.word	0x0800d1bc
 800a490:	20001060 	.word	0x20001060

0800a494 <_ZN4pinsL7initSPIEv.part.0>:
#include "pxt.h"
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (NULL == spi)
            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));
 800a496:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a49a:	2013      	movs	r0, #19
 800a49c:	f7fd fd5c 	bl	8007f58 <_ZN3pxt9getConfigEii>
 800a4a0:	b2c0      	uxtb	r0, r0
 800a4a2:	f7ff ff31 	bl	800a308 <_ZN3pxt9lookupPinEi>
 800a4a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	2012      	movs	r0, #18
 800a4ae:	f7fd fd53 	bl	8007f58 <_ZN3pxt9getConfigEii>
 800a4b2:	b2c0      	uxtb	r0, r0
 800a4b4:	f7ff ff28 	bl	800a308 <_ZN3pxt9lookupPinEi>
 800a4b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4bc:	4606      	mov	r6, r0
 800a4be:	2017      	movs	r0, #23
 800a4c0:	f7fd fd4a 	bl	8007f58 <_ZN3pxt9getConfigEii>
 800a4c4:	b2c0      	uxtb	r0, r0
 800a4c6:	f7ff ff1f 	bl	800a308 <_ZN3pxt9lookupPinEi>
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	2028      	movs	r0, #40	; 0x28
 800a4ce:	f7f9 fd3f 	bl	8003f50 <_Znwj>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f001 fec7 	bl	800c26c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>
 800a4de:	4b01      	ldr	r3, [pc, #4]	; (800a4e4 <_ZN4pinsL7initSPIEv.part.0+0x50>)
 800a4e0:	601c      	str	r4, [r3, #0]
    }
 800a4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e4:	20001114 	.word	0x20001114

0800a4e8 <_ZN4pins8spiWriteEi>:
//
//
//
//
//
    int spiWrite(int value) {
 800a4e8:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a4ea:	4c08      	ldr	r4, [pc, #32]	; (800a50c <_ZN4pins8spiWriteEi+0x24>)
    int spiWrite(int value) {
 800a4ec:	4601      	mov	r1, r0
        if (NULL == spi)
 800a4ee:	6820      	ldr	r0, [r4, #0]
    int spiWrite(int value) {
 800a4f0:	b082      	sub	sp, #8
        if (NULL == spi)
 800a4f2:	b128      	cbz	r0, 800a500 <_ZN4pins8spiWriteEi+0x18>
        initSPI();
        return spi->write(value);
 800a4f4:	6802      	ldr	r2, [r0, #0]
 800a4f6:	6892      	ldr	r2, [r2, #8]
    }
 800a4f8:	b002      	add	sp, #8
 800a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return spi->write(value);
 800a4fe:	4710      	bx	r2
 800a500:	9101      	str	r1, [sp, #4]
 800a502:	f7ff ffc7 	bl	800a494 <_ZN4pinsL7initSPIEv.part.0>
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	9901      	ldr	r1, [sp, #4]
 800a50a:	e7f3      	b.n	800a4f4 <_ZN4pins8spiWriteEi+0xc>
 800a50c:	20001114 	.word	0x20001114

0800a510 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_>:
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 800a510:	b570      	push	{r4, r5, r6, lr}
        if (NULL == spi)
 800a512:	4e0e      	ldr	r6, [pc, #56]	; (800a54c <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x3c>)
    void spiTransfer(Buffer command, Buffer response) {
 800a514:	4605      	mov	r5, r0
        if (NULL == spi)
 800a516:	6830      	ldr	r0, [r6, #0]
    void spiTransfer(Buffer command, Buffer response) {
 800a518:	b082      	sub	sp, #8
 800a51a:	460c      	mov	r4, r1
        if (NULL == spi)
 800a51c:	b190      	cbz	r0, 800a544 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x34>
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
 800a51e:	b175      	cbz	r5, 800a53e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2e>
 800a520:	686a      	ldr	r2, [r5, #4]
 800a522:	f105 0108 	add.w	r1, r5, #8
        auto clength = NULL == command ? 0 : command->length;
        auto rdata = NULL == response ? NULL : response->data;
 800a526:	b144      	cbz	r4, 800a53a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2a>
 800a528:	f104 0308 	add.w	r3, r4, #8
 800a52c:	6864      	ldr	r4, [r4, #4]
        auto rlength = NULL == response ? 0 : response->length;
        spi->transfer(cdata, clength, rdata, rlength);
 800a52e:	6805      	ldr	r5, [r0, #0]
 800a530:	9400      	str	r4, [sp, #0]
 800a532:	68ec      	ldr	r4, [r5, #12]
 800a534:	47a0      	blx	r4
    }
 800a536:	b002      	add	sp, #8
 800a538:	bd70      	pop	{r4, r5, r6, pc}
        auto rdata = NULL == response ? NULL : response->data;
 800a53a:	4623      	mov	r3, r4
 800a53c:	e7f7      	b.n	800a52e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x1e>
 800a53e:	462a      	mov	r2, r5
        auto cdata = NULL == command ? NULL : command->data;
 800a540:	4629      	mov	r1, r5
 800a542:	e7f0      	b.n	800a526 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x16>
 800a544:	f7ff ffa6 	bl	800a494 <_ZN4pinsL7initSPIEv.part.0>
 800a548:	6830      	ldr	r0, [r6, #0]
 800a54a:	e7e8      	b.n	800a51e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0xe>
 800a54c:	20001114 	.word	0x20001114

0800a550 <_ZN4pins12spiFrequencyEi>:
//
//
//
//
//
    void spiFrequency(int frequency) {
 800a550:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a552:	4c08      	ldr	r4, [pc, #32]	; (800a574 <_ZN4pins12spiFrequencyEi+0x24>)
    void spiFrequency(int frequency) {
 800a554:	4601      	mov	r1, r0
        if (NULL == spi)
 800a556:	6820      	ldr	r0, [r4, #0]
    void spiFrequency(int frequency) {
 800a558:	b082      	sub	sp, #8
        if (NULL == spi)
 800a55a:	b128      	cbz	r0, 800a568 <_ZN4pins12spiFrequencyEi+0x18>
        initSPI();
        spi->setFrequency(frequency);
 800a55c:	6802      	ldr	r2, [r0, #0]
 800a55e:	6812      	ldr	r2, [r2, #0]
    }
 800a560:	b002      	add	sp, #8
 800a562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setFrequency(frequency);
 800a566:	4710      	bx	r2
 800a568:	9101      	str	r1, [sp, #4]
 800a56a:	f7ff ff93 	bl	800a494 <_ZN4pinsL7initSPIEv.part.0>
 800a56e:	6820      	ldr	r0, [r4, #0]
 800a570:	9901      	ldr	r1, [sp, #4]
 800a572:	e7f3      	b.n	800a55c <_ZN4pins12spiFrequencyEi+0xc>
 800a574:	20001114 	.word	0x20001114

0800a578 <_ZN4pins7spiModeEi>:
//
//
//
//
//
    void spiMode(int mode) {
 800a578:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a57a:	4c09      	ldr	r4, [pc, #36]	; (800a5a0 <_ZN4pins7spiModeEi+0x28>)
    void spiMode(int mode) {
 800a57c:	4601      	mov	r1, r0
        if (NULL == spi)
 800a57e:	6820      	ldr	r0, [r4, #0]
    void spiMode(int mode) {
 800a580:	b082      	sub	sp, #8
        if (NULL == spi)
 800a582:	b138      	cbz	r0, 800a594 <_ZN4pins7spiModeEi+0x1c>
        initSPI();
        spi->setMode(mode);        
 800a584:	6802      	ldr	r2, [r0, #0]
 800a586:	6854      	ldr	r4, [r2, #4]
 800a588:	2208      	movs	r2, #8
 800a58a:	4623      	mov	r3, r4
    }
 800a58c:	b002      	add	sp, #8
 800a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setMode(mode);        
 800a592:	4718      	bx	r3
 800a594:	9101      	str	r1, [sp, #4]
 800a596:	f7ff ff7d 	bl	800a494 <_ZN4pinsL7initSPIEv.part.0>
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	9901      	ldr	r1, [sp, #4]
 800a59e:	e7f1      	b.n	800a584 <_ZN4pins7spiModeEi+0xc>
 800a5a0:	20001114 	.word	0x20001114

0800a5a4 <_ZN3pxt8usb_initEv>:
    create_fiber(start_usb);
}


#else
void usb_init() {}
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop

0800a5a8 <_ZN3pxt10sendSerialEPKci>:
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <_ZN3pxt10sendSerialEPKci+0xc>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	b103      	cbz	r3, 800a5b0 <_ZN3pxt10sendSerialEPKci+0x8>
        pSendToUART(data, len);
 800a5ae:	4718      	bx	r3
}
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	20001118 	.word	0x20001118

0800a5b8 <_ZN3pxt9dumpDmesgEv>:

void dumpDmesg() {
 800a5b8:	b510      	push	{r4, lr}
    if (pSendToUART)
 800a5ba:	4c0a      	ldr	r4, [pc, #40]	; (800a5e4 <_ZN3pxt9dumpDmesgEv+0x2c>)
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	b17b      	cbz	r3, 800a5e0 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 800a5c0:	2108      	movs	r1, #8
 800a5c2:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <_ZN3pxt9dumpDmesgEv+0x30>)
 800a5c4:	4798      	blx	r3
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 800a5c6:	4809      	ldr	r0, [pc, #36]	; (800a5ec <_ZN3pxt9dumpDmesgEv+0x34>)
    if (pSendToUART)
 800a5c8:	6823      	ldr	r3, [r4, #0]
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 800a5ca:	6801      	ldr	r1, [r0, #0]
    if (pSendToUART)
 800a5cc:	b143      	cbz	r3, 800a5e0 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 800a5ce:	3004      	adds	r0, #4
 800a5d0:	4798      	blx	r3
 800a5d2:	6823      	ldr	r3, [r4, #0]
    if (pSendToUART)
 800a5d4:	b123      	cbz	r3, 800a5e0 <_ZN3pxt9dumpDmesgEv+0x28>
    sendSerial("\n\n", 2);
}
 800a5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pSendToUART(data, len);
 800a5da:	2102      	movs	r1, #2
 800a5dc:	4804      	ldr	r0, [pc, #16]	; (800a5f0 <_ZN3pxt9dumpDmesgEv+0x38>)
 800a5de:	4718      	bx	r3
}
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20001118 	.word	0x20001118
 800a5e8:	0800d1ec 	.word	0x0800d1ec
 800a5ec:	2000121c 	.word	0x2000121c
 800a5f0:	0800d1f8 	.word	0x0800d1f8

0800a5f4 <_ZN3pxt4incrEPNS_12TValueStructE>:
}
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop

0800a5f8 <_ZN3pxt4decrEPNS_12TValueStructE>:
inline void decr(TValue e) {}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop

0800a5fc <_ZN3pxt12ptrOfLiteralEi>:
    return &bytecode[offset];
 800a5fc:	4b02      	ldr	r3, [pc, #8]	; (800a608 <_ZN3pxt12ptrOfLiteralEi+0xc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
}
 800a600:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	20001034 	.word	0x20001034

0800a60c <_ZN3pxt16startPerfCounterENS_12PerfCountersE>:
//
void startPerfCounter(PerfCounters n);
//
void stopPerfCounter(PerfCounters n);
#else
inline void startPerfCounter(PerfCounters n) {}
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <_ZN3pxt15stopPerfCounterENS_12PerfCountersE>:
inline void stopPerfCounter(PerfCounters n) {}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <_ZN3pxt16dumpPerfCountersEv>:
inline void initPerfCounters() {}
inline void dumpPerfCounters() {}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <_ZN5codal14string_reverseEPc>:
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
    //sanity check...
    if(s == NULL)
 800a618:	b188      	cbz	r0, 800a63e <_ZN5codal14string_reverseEPc+0x26>
{
 800a61a:	b510      	push	{r4, lr}
 800a61c:	4604      	mov	r4, r0
        return DEVICE_INVALID_PARAMETER;

    char *j;
    int c;

    j = s + strlen(s) - 1;
 800a61e:	f7f9 fa97 	bl	8003b50 <strlen>
 800a622:	3801      	subs	r0, #1
 800a624:	4420      	add	r0, r4

    while(s < j)
 800a626:	4284      	cmp	r4, r0
 800a628:	d207      	bcs.n	800a63a <_ZN5codal14string_reverseEPc+0x22>
    {
        c = *s;
 800a62a:	7823      	ldrb	r3, [r4, #0]
        *s++ = *j;
 800a62c:	7802      	ldrb	r2, [r0, #0]
 800a62e:	f804 2b01 	strb.w	r2, [r4], #1
        *j-- = c;
 800a632:	f800 3901 	strb.w	r3, [r0], #-1
    while(s < j)
 800a636:	4284      	cmp	r4, r0
 800a638:	d3f7      	bcc.n	800a62a <_ZN5codal14string_reverseEPc+0x12>
    }

    return DEVICE_OK;
 800a63a:	2000      	movs	r0, #0
}
 800a63c:	bd10      	pop	{r4, pc}
        return DEVICE_INVALID_PARAMETER;
 800a63e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a642:	4770      	bx	lr

0800a644 <_ZN5codal4itoaEiPc>:
  * @param s A pointer to the buffer where the resulting string will be stored.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::itoa(int n, char *s)
{
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 800a646:	b349      	cbz	r1, 800a69c <_ZN5codal4itoaEiPc+0x58>
 800a648:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 800a64c:	ebc4 74e0 	rsb	r4, r4, r0, asr #31
 800a650:	1e4f      	subs	r7, r1, #1
 800a652:	2500      	movs	r5, #0
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 800a654:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800a6a4 <_ZN5codal4itoaEiPc+0x60>
 800a658:	e000      	b.n	800a65c <_ZN5codal4itoaEiPc+0x18>
 800a65a:	461d      	mov	r5, r3
 800a65c:	fb8c 2304 	smull	r2, r3, ip, r4
 800a660:	17e2      	asrs	r2, r4, #31
 800a662:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800a666:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800a66a:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
 800a66e:	3330      	adds	r3, #48	; 0x30
    } while (abs(n /= 10) > 0);
 800a670:	4256      	negs	r6, r2
         s[i++] = abs(n % 10) + '0';
 800a672:	f807 3f01 	strb.w	r3, [r7, #1]!
    } while (abs(n /= 10) > 0);
 800a676:	4614      	mov	r4, r2
         s[i++] = abs(n % 10) + '0';
 800a678:	1c6b      	adds	r3, r5, #1
    } while (abs(n /= 10) > 0);
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d1ed      	bne.n	800a65a <_ZN5codal4itoaEiPc+0x16>

    // Add a negative sign as needed
    if (!positive)
 800a67e:	2800      	cmp	r0, #0
 800a680:	eb01 0203 	add.w	r2, r1, r3
 800a684:	da03      	bge.n	800a68e <_ZN5codal4itoaEiPc+0x4a>
        s[i++] = '-';
 800a686:	202d      	movs	r0, #45	; 0x2d
 800a688:	3502      	adds	r5, #2
 800a68a:	194a      	adds	r2, r1, r5
 800a68c:	54c8      	strb	r0, [r1, r3]

    // Terminate the string.
    s[i] = '\0';
 800a68e:	2300      	movs	r3, #0
 800a690:	4608      	mov	r0, r1
 800a692:	7013      	strb	r3, [r2, #0]

    // Flip the order.
    string_reverse(s);
 800a694:	f7ff ffc0 	bl	800a618 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
}
 800a698:	4630      	mov	r0, r6
 800a69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 800a69c:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 800a6a0:	e7fa      	b.n	800a698 <_ZN5codal4itoaEiPc+0x54>
 800a6a2:	bf00      	nop
 800a6a4:	66666667 	.word	0x66666667

0800a6a8 <_ZN5codal14CodalComponent16periodicCallbackEv>:

        /**
          * Implement this function to receive a callback every SCHEDULER_TICK_PERIOD_MS.
          */
        virtual void periodicCallback() {}
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop

0800a6ac <_ZN5codal14CodalComponent12idleCallbackEv>:

        /**
          * Implement this function to receive a callback when the device is idling.
          */
        virtual void idleCallback() {}
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop

0800a6b0 <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 800a6b0:	4800      	ldr	r0, [pc, #0]	; (800a6b4 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 800a6b2:	4770      	bx	lr
 800a6b4:	fffffc16 	.word	0xfffffc16

0800a6b8 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	ab02      	add	r3, sp, #8
 800a6be:	e903 0003 	stmdb	r3, {r0, r1}
 800a6c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d018      	beq.n	800a6fc <_Z18component_callbackN5codal5EventE+0x44>

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d114      	bne.n	800a6f8 <_Z18component_callbackN5codal5EventE+0x40>
 800a6ce:	4c15      	ldr	r4, [pc, #84]	; (800a724 <_Z18component_callbackN5codal5EventE+0x6c>)
 800a6d0:	4e15      	ldr	r6, [pc, #84]	; (800a728 <_Z18component_callbackN5codal5EventE+0x70>)
 800a6d2:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800a6d6:	e001      	b.n	800a6dc <_Z18component_callbackN5codal5EventE+0x24>
    {
        while(i < DEVICE_COMPONENT_COUNT)
 800a6d8:	42ac      	cmp	r4, r5
 800a6da:	d00d      	beq.n	800a6f8 <_Z18component_callbackN5codal5EventE+0x40>
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 800a6dc:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d0f9      	beq.n	800a6d8 <_Z18component_callbackN5codal5EventE+0x20>
 800a6e4:	88c3      	ldrh	r3, [r0, #6]
 800a6e6:	045b      	lsls	r3, r3, #17
 800a6e8:	d5f6      	bpl.n	800a6d8 <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->idleCallback();
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	42b3      	cmp	r3, r6
 800a6f0:	d0f2      	beq.n	800a6d8 <_Z18component_callbackN5codal5EventE+0x20>
 800a6f2:	4798      	blx	r3
        while(i < DEVICE_COMPONENT_COUNT)
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	d1f1      	bne.n	800a6dc <_Z18component_callbackN5codal5EventE+0x24>

            i++;
        }
    }
}
 800a6f8:	b002      	add	sp, #8
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
 800a6fc:	4c09      	ldr	r4, [pc, #36]	; (800a724 <_Z18component_callbackN5codal5EventE+0x6c>)
 800a6fe:	4e0b      	ldr	r6, [pc, #44]	; (800a72c <_Z18component_callbackN5codal5EventE+0x74>)
 800a700:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800a704:	e001      	b.n	800a70a <_Z18component_callbackN5codal5EventE+0x52>
        while(i < DEVICE_COMPONENT_COUNT)
 800a706:	42a5      	cmp	r5, r4
 800a708:	d0f6      	beq.n	800a6f8 <_Z18component_callbackN5codal5EventE+0x40>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 800a70a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a70e:	2800      	cmp	r0, #0
 800a710:	d0f9      	beq.n	800a706 <_Z18component_callbackN5codal5EventE+0x4e>
 800a712:	88c3      	ldrh	r3, [r0, #6]
 800a714:	049a      	lsls	r2, r3, #18
 800a716:	d5f6      	bpl.n	800a706 <_Z18component_callbackN5codal5EventE+0x4e>
                CodalComponent::components[i]->periodicCallback();
 800a718:	6803      	ldr	r3, [r0, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	42b3      	cmp	r3, r6
 800a71e:	d0f2      	beq.n	800a706 <_Z18component_callbackN5codal5EventE+0x4e>
 800a720:	4798      	blx	r3
 800a722:	e7f0      	b.n	800a706 <_Z18component_callbackN5codal5EventE+0x4e>
 800a724:	20001118 	.word	0x20001118
 800a728:	0800a6ad 	.word	0x0800a6ad
 800a72c:	0800a6a9 	.word	0x0800a6a9

0800a730 <_ZN5codal14CodalComponent12addComponentEv>:

/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4c30      	ldr	r4, [pc, #192]	; (800a7f8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 800a736:	b082      	sub	sp, #8
 800a738:	4622      	mov	r2, r4
 800a73a:	2300      	movs	r3, #0
 800a73c:	e002      	b.n	800a744 <_ZN5codal14CodalComponent12addComponentEv+0x14>
 800a73e:	3301      	adds	r3, #1
    uint8_t i = 0;

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 800a740:	2b40      	cmp	r3, #64	; 0x40
 800a742:	d005      	beq.n	800a750 <_ZN5codal14CodalComponent12addComponentEv+0x20>
    {
        if(components[i] == NULL)
 800a744:	f852 1b04 	ldr.w	r1, [r2], #4
 800a748:	2900      	cmp	r1, #0
 800a74a:	d1f8      	bne.n	800a73e <_ZN5codal14CodalComponent12addComponentEv+0xe>
        {
            components[i] = this;
 800a74c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        }

        i++;
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 800a750:	4c2a      	ldr	r4, [pc, #168]	; (800a7fc <_ZN5codal14CodalComponent12addComponentEv+0xcc>)
 800a752:	7823      	ldrb	r3, [r4, #0]
 800a754:	07db      	lsls	r3, r3, #31
 800a756:	d409      	bmi.n	800a76c <_ZN5codal14CodalComponent12addComponentEv+0x3c>
 800a758:	4d29      	ldr	r5, [pc, #164]	; (800a800 <_ZN5codal14CodalComponent12addComponentEv+0xd0>)
 800a75a:	682b      	ldr	r3, [r5, #0]
 800a75c:	b133      	cbz	r3, 800a76c <_ZN5codal14CodalComponent12addComponentEv+0x3c>
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 800a75e:	2201      	movs	r2, #1
 800a760:	2110      	movs	r1, #16
 800a762:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800a766:	f001 f871 	bl	800b84c <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 800a76a:	b110      	cbz	r0, 800a772 <_ZN5codal14CodalComponent12addComponentEv+0x42>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 800a76c:	b002      	add	sp, #8
 800a76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            Listener *newListener = new Listener(id, value, handler, flags);
 800a772:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800a774:	f8d5 8000 	ldr.w	r8, [r5]
 800a778:	f7f9 fbea 	bl	8003f50 <_Znwj>
 800a77c:	22c0      	movs	r2, #192	; 0xc0
 800a77e:	4b21      	ldr	r3, [pc, #132]	; (800a804 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 800a780:	9200      	str	r2, [sp, #0]
 800a782:	2110      	movs	r1, #16
 800a784:	2201      	movs	r2, #1
 800a786:	4607      	mov	r7, r0
 800a788:	f000 fef6 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a78c:	f8d8 3000 	ldr.w	r3, [r8]
 800a790:	4e1d      	ldr	r6, [pc, #116]	; (800a808 <_ZN5codal14CodalComponent12addComponentEv+0xd8>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	42b3      	cmp	r3, r6
 800a796:	d122      	bne.n	800a7de <_ZN5codal14CodalComponent12addComponentEv+0xae>
            delete newListener;
 800a798:	4638      	mov	r0, r7
 800a79a:	f000 ff05 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800a79e:	4638      	mov	r0, r7
 800a7a0:	f7f9 fbd8 	bl	8003f54 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 800a7a4:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800a7a6:	682f      	ldr	r7, [r5, #0]
 800a7a8:	f7f9 fbd2 	bl	8003f50 <_Znwj>
 800a7ac:	22c0      	movs	r2, #192	; 0xc0
 800a7ae:	4b15      	ldr	r3, [pc, #84]	; (800a804 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 800a7b0:	9200      	str	r2, [sp, #0]
 800a7b2:	210f      	movs	r1, #15
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	f000 fede 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	42b3      	cmp	r3, r6
 800a7c2:	d112      	bne.n	800a7ea <_ZN5codal14CodalComponent12addComponentEv+0xba>
            delete newListener;
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f000 feef 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7f9 fbc2 	bl	8003f54 <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 800a7d0:	7823      	ldrb	r3, [r4, #0]
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	7023      	strb	r3, [r4, #0]
}
 800a7d8:	b002      	add	sp, #8
 800a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	4798      	blx	r3
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0dd      	beq.n	800a7a4 <_ZN5codal14CodalComponent12addComponentEv+0x74>
 800a7e8:	e7d6      	b.n	800a798 <_ZN5codal14CodalComponent12addComponentEv+0x68>
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	4798      	blx	r3
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0ed      	beq.n	800a7d0 <_ZN5codal14CodalComponent12addComponentEv+0xa0>
 800a7f4:	e7e6      	b.n	800a7c4 <_ZN5codal14CodalComponent12addComponentEv+0x94>
 800a7f6:	bf00      	nop
 800a7f8:	2000111c 	.word	0x2000111c
 800a7fc:	2000166f 	.word	0x2000166f
 800a800:	2000164c 	.word	0x2000164c
 800a804:	0800a6b9 	.word	0x0800a6b9
 800a808:	0800a6b1 	.word	0x0800a6b1

0800a80c <_ZN5codal14CodalComponent15removeComponentEv>:

/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
 800a80c:	b410      	push	{r4}
 800a80e:	4c08      	ldr	r4, [pc, #32]	; (800a830 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 800a810:	2300      	movs	r3, #0
 800a812:	4622      	mov	r2, r4
 800a814:	e002      	b.n	800a81c <_ZN5codal14CodalComponent15removeComponentEv+0x10>
 800a816:	3301      	adds	r3, #1
    uint8_t i = 0;

    while(i < DEVICE_COMPONENT_COUNT)
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d006      	beq.n	800a82a <_ZN5codal14CodalComponent15removeComponentEv+0x1e>
    {
        if(components[i] == this)
 800a81c:	f852 1b04 	ldr.w	r1, [r2], #4
 800a820:	4281      	cmp	r1, r0
 800a822:	d1f8      	bne.n	800a816 <_ZN5codal14CodalComponent15removeComponentEv+0xa>
        {
            components[i] = NULL;
 800a824:	2200      	movs	r2, #0
 800a826:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            return;
        }

        i++;
    }
}
 800a82a:	bc10      	pop	{r4}
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	2000111c 	.word	0x2000111c

0800a834 <_ZN5codal11CodalDevice10getVersionEv>:
        }
 800a834:	4800      	ldr	r0, [pc, #0]	; (800a838 <_ZN5codal11CodalDevice10getVersionEv+0x4>)
 800a836:	4770      	bx	lr
 800a838:	0800d14c 	.word	0x0800d14c

0800a83c <_ZN5codal11CodalDevice5sleepEm>:

using namespace codal;

void CodalDevice::sleep(unsigned long milliseconds)
{
    fiber_sleep(milliseconds);
 800a83c:	4608      	mov	r0, r1
 800a83e:	f000 bca7 	b.w	800b190 <_ZN5codal11fiber_sleepEm>
 800a842:	bf00      	nop

0800a844 <_ZN5codal11CodalDevice10seedRandomEm>:
         * @param seed an unsigned 32 bit value used to seed codal's lightweight Galois LFSR.
         * @return DEVICE_OK on success
         */
        virtual int seedRandom(uint32_t seed)
        {
            return target_seed_random(seed);
 800a844:	4608      	mov	r0, r1
 800a846:	f7f6 b86f 	b.w	8000928 <target_seed_random>
 800a84a:	bf00      	nop

0800a84c <_ZN5codal11CodalDevice5panicEi>:
            target_panic(statusCode);
 800a84c:	4608      	mov	r0, r1
 800a84e:	f7f6 b87f 	b.w	8000950 <target_panic>
 800a852:	bf00      	nop

0800a854 <_ZN5codal11CodalDevice15getSerialNumberEv>:
            return target_get_serial();
 800a854:	f7f6 b870 	b.w	8000938 <target_get_serial>

0800a858 <_ZN5codal11CodalDevice4waitEm>:
            target_wait(milliseconds);
 800a858:	4608      	mov	r0, r1
 800a85a:	f7f6 b83d 	b.w	80008d8 <target_wait>
 800a85e:	bf00      	nop

0800a860 <_ZN5codal11CodalDevice5resetEv>:
            target_reset();
 800a860:	f7f6 b854 	b.w	800090c <target_reset>

0800a864 <_ZL9logwritenPKci>:
using namespace codal;

static void logwrite(const char *msg);

static void logwriten(const char *msg, int l)
{
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a8dc <_ZL9logwritenPKci+0x78>
 800a86c:	4607      	mov	r7, r0
 800a86e:	4656      	mov	r6, sl
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 800a870:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800a8e0 <_ZL9logwritenPKci+0x7c>
 800a874:	f856 4b04 	ldr.w	r4, [r6], #4
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a878:	f50a 7982 	add.w	r9, sl, #260	; 0x104
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
 800a87c:	190b      	adds	r3, r1, r4
 800a87e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a882:	460d      	mov	r5, r1
 800a884:	d20f      	bcs.n	800a8a6 <_ZL9logwritenPKci+0x42>
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
 800a886:	462a      	mov	r2, r5
 800a888:	4639      	mov	r1, r7
 800a88a:	1930      	adds	r0, r6, r4
 800a88c:	f7f9 f948 	bl	8003b20 <memcpy>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800a890:	2200      	movs	r2, #0
    codalLogStore.ptr += l;
 800a892:	f8da 3000 	ldr.w	r3, [sl]
 800a896:	441d      	add	r5, r3
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800a898:	eb0a 0305 	add.w	r3, sl, r5
 800a89c:	711a      	strb	r2, [r3, #4]
    codalLogStore.ptr += l;
 800a89e:	f8ca 5000 	str.w	r5, [sl]
}
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        codalLogStore.ptr -= jump;
 800a8a6:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	480a      	ldr	r0, [pc, #40]	; (800a8d8 <_ZL9logwritenPKci+0x74>)
        codalLogStore.ptr -= jump;
 800a8b0:	f8ca 4000 	str.w	r4, [sl]
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800a8b4:	f7f9 f963 	bl	8003b7e <memmove>
        memset(codalLogStore.buffer + codalLogStore.ptr, 0, sizeof(codalLogStore.buffer) - codalLogStore.ptr);
 800a8b8:	f5c4 6280 	rsb	r2, r4, #1024	; 0x400
 800a8bc:	1930      	adds	r0, r6, r4
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f7f9 f976 	bl	8003bb0 <memset>
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800a8c4:	f8da 4000 	ldr.w	r4, [sl]
    logwriten(msg, strlen(msg));
 800a8c8:	2115      	movs	r1, #21
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800a8ca:	192b      	adds	r3, r5, r4
 800a8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d0:	d3d9      	bcc.n	800a886 <_ZL9logwritenPKci+0x22>
    logwriten(msg, strlen(msg));
 800a8d2:	4647      	mov	r7, r8
 800a8d4:	e7d2      	b.n	800a87c <_ZL9logwritenPKci+0x18>
 800a8d6:	bf00      	nop
 800a8d8:	20001220 	.word	0x20001220
 800a8dc:	2000121c 	.word	0x2000121c
 800a8e0:	0800d224 	.word	0x0800d224

0800a8e4 <_ZL11logwritenummbb>:
    }
    buf[i] = 0;
}

static void logwritenum(uint32_t n, bool full, bool hex)
{
 800a8e4:	b530      	push	{r4, r5, lr}
 800a8e6:	b087      	sub	sp, #28
    char buff[20];

    if (hex)
 800a8e8:	b962      	cbnz	r2, 800a904 <_ZL11logwritenummbb+0x20>
        writeNum(buff, n, full);
        logwrite("0x");
    }
    else
    {
        itoa(n, buff);
 800a8ea:	ac01      	add	r4, sp, #4
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	f7ff fea9 	bl	800a644 <_ZN5codal4itoaEiPc>
    logwriten(msg, strlen(msg));
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7f9 f92c 	bl	8003b50 <strlen>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff ffb2 	bl	800a864 <_ZL9logwritenPKci>
    }

    logwrite(buff);
}
 800a900:	b007      	add	sp, #28
 800a902:	bd30      	pop	{r4, r5, pc}
 800a904:	4605      	mov	r5, r0
    int i = 0;
 800a906:	2400      	movs	r4, #0
    int sh = 28;
 800a908:	221c      	movs	r2, #28
 800a90a:	e00d      	b.n	800a928 <_ZL11logwritenummbb+0x44>
        if (full || d || sh == 0 || i)
 800a90c:	b993      	cbnz	r3, 800a934 <_ZL11logwritenummbb+0x50>
 800a90e:	b312      	cbz	r2, 800a956 <_ZL11logwritenummbb+0x72>
 800a910:	b13c      	cbz	r4, 800a922 <_ZL11logwritenummbb+0x3e>
 800a912:	4608      	mov	r0, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800a914:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a918:	a806      	add	r0, sp, #24
 800a91a:	4420      	add	r0, r4
 800a91c:	f800 3c14 	strb.w	r3, [r0, #-20]
 800a920:	3401      	adds	r4, #1
        sh -= 4;
 800a922:	3a04      	subs	r2, #4
    while (sh >= 0)
 800a924:	1d13      	adds	r3, r2, #4
 800a926:	d00b      	beq.n	800a940 <_ZL11logwritenummbb+0x5c>
        int d = (n >> sh) & 0xf;
 800a928:	fa25 f302 	lsr.w	r3, r5, r2
 800a92c:	f003 030f 	and.w	r3, r3, #15
        if (full || d || sh == 0 || i)
 800a930:	2900      	cmp	r1, #0
 800a932:	d0eb      	beq.n	800a90c <_ZL11logwritenummbb+0x28>
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800a934:	2b09      	cmp	r3, #9
 800a936:	b258      	sxtb	r0, r3
 800a938:	ddec      	ble.n	800a914 <_ZL11logwritenummbb+0x30>
 800a93a:	f100 0337 	add.w	r3, r0, #55	; 0x37
 800a93e:	e7eb      	b.n	800a918 <_ZL11logwritenummbb+0x34>
    buf[i] = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	aa06      	add	r2, sp, #24
 800a944:	4414      	add	r4, r2
 800a946:	f804 3c14 	strb.w	r3, [r4, #-20]
    logwriten(msg, strlen(msg));
 800a94a:	2102      	movs	r1, #2
 800a94c:	4803      	ldr	r0, [pc, #12]	; (800a95c <_ZL11logwritenummbb+0x78>)
 800a94e:	ac01      	add	r4, sp, #4
 800a950:	f7ff ff88 	bl	800a864 <_ZL9logwritenPKci>
 800a954:	e7cd      	b.n	800a8f2 <_ZL11logwritenummbb+0xe>
        if (full || d || sh == 0 || i)
 800a956:	4610      	mov	r0, r2
 800a958:	e7dc      	b.n	800a914 <_ZL11logwritenummbb+0x30>
 800a95a:	bf00      	nop
 800a95c:	0800d220 	.word	0x0800d220

0800a960 <codal_vdmesg>:
    if (dmesg_flush_fn)
        dmesg_flush_fn();
}

void codal_vdmesg(const char *format, va_list ap)
{
 800a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a964:	460e      	mov	r6, r1
 800a966:	b083      	sub	sp, #12
 800a968:	4605      	mov	r5, r0
    const char *end = format;

    target_disable_irq();
 800a96a:	f7f5 ffdb 	bl	8000924 <target_disable_irq>
    logwriten(msg, strlen(msg));
 800a96e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800aa38 <codal_vdmesg+0xd8>
 800a972:	4f2f      	ldr	r7, [pc, #188]	; (800aa30 <codal_vdmesg+0xd0>)
 800a974:	3e04      	subs	r6, #4
 800a976:	4629      	mov	r1, r5
 800a978:	e002      	b.n	800a980 <codal_vdmesg+0x20>
    while (*end)
    {
        if (*end++ == '%')
 800a97a:	2a25      	cmp	r2, #37	; 0x25
 800a97c:	4619      	mov	r1, r3
 800a97e:	d012      	beq.n	800a9a6 <codal_vdmesg+0x46>
    while (*end)
 800a980:	460b      	mov	r3, r1
 800a982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a986:	460c      	mov	r4, r1
 800a988:	2a00      	cmp	r2, #0
 800a98a:	d1f6      	bne.n	800a97a <codal_vdmesg+0x1a>
                break;
            }
            format = end;
        }
    }
    logwriten(format, end - format);
 800a98c:	1b49      	subs	r1, r1, r5
 800a98e:	4628      	mov	r0, r5
 800a990:	f7ff ff68 	bl	800a864 <_ZL9logwritenPKci>
    logwriten(msg, strlen(msg));
 800a994:	2102      	movs	r1, #2
 800a996:	4827      	ldr	r0, [pc, #156]	; (800aa34 <codal_vdmesg+0xd4>)
 800a998:	f7ff ff64 	bl	800a864 <_ZL9logwritenPKci>
    logwrite("\r\n");
    target_enable_irq();
 800a99c:	f7f5 ffc0 	bl	8000920 <target_enable_irq>
}
 800a9a0:	b003      	add	sp, #12
 800a9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            logwriten(format, end - format - 1);
 800a9a6:	43eb      	mvns	r3, r5
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	4419      	add	r1, r3
 800a9ac:	f7ff ff5a 	bl	800a864 <_ZL9logwritenPKci>
            switch (*end++)
 800a9b0:	7863      	ldrb	r3, [r4, #1]
            uint32_t val = va_arg(ap, uint32_t);
 800a9b2:	f856 9f04 	ldr.w	r9, [r6, #4]!
            switch (*end++)
 800a9b6:	2b64      	cmp	r3, #100	; 0x64
            uint32_t val = va_arg(ap, uint32_t);
 800a9b8:	f8cd 9004 	str.w	r9, [sp, #4]
            switch (*end++)
 800a9bc:	f104 0502 	add.w	r5, r4, #2
 800a9c0:	d027      	beq.n	800aa12 <codal_vdmesg+0xb2>
 800a9c2:	d80a      	bhi.n	800a9da <codal_vdmesg+0x7a>
 800a9c4:	2b58      	cmp	r3, #88	; 0x58
 800a9c6:	d019      	beq.n	800a9fc <codal_vdmesg+0x9c>
 800a9c8:	2b63      	cmp	r3, #99	; 0x63
 800a9ca:	d010      	beq.n	800a9ee <codal_vdmesg+0x8e>
 800a9cc:	2b25      	cmp	r3, #37	; 0x25
 800a9ce:	d01b      	beq.n	800aa08 <codal_vdmesg+0xa8>
    logwriten(msg, strlen(msg));
 800a9d0:	2103      	movs	r1, #3
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	f7ff ff46 	bl	800a864 <_ZL9logwritenPKci>
 800a9d8:	e7cd      	b.n	800a976 <codal_vdmesg+0x16>
            switch (*end++)
 800a9da:	2b73      	cmp	r3, #115	; 0x73
 800a9dc:	d01f      	beq.n	800aa1e <codal_vdmesg+0xbe>
 800a9de:	2b78      	cmp	r3, #120	; 0x78
 800a9e0:	d10a      	bne.n	800a9f8 <codal_vdmesg+0x98>
                logwritenum(val, false, true);
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f7ff ff7c 	bl	800a8e4 <_ZL11logwritenummbb>
                break;
 800a9ec:	e7c3      	b.n	800a976 <codal_vdmesg+0x16>
                logwriten((const char *)&val, 1);
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	a801      	add	r0, sp, #4
 800a9f2:	f7ff ff37 	bl	800a864 <_ZL9logwritenPKci>
                break;
 800a9f6:	e7be      	b.n	800a976 <codal_vdmesg+0x16>
            switch (*end++)
 800a9f8:	2b70      	cmp	r3, #112	; 0x70
 800a9fa:	d1e9      	bne.n	800a9d0 <codal_vdmesg+0x70>
                logwritenum(val, true, true);
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4648      	mov	r0, r9
 800aa00:	4611      	mov	r1, r2
 800aa02:	f7ff ff6f 	bl	800a8e4 <_ZL11logwritenummbb>
                break;
 800aa06:	e7b6      	b.n	800a976 <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800aa08:	2101      	movs	r1, #1
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f7ff ff2a 	bl	800a864 <_ZL9logwritenPKci>
 800aa10:	e7b1      	b.n	800a976 <codal_vdmesg+0x16>
                logwritenum(val, false, false);
 800aa12:	2200      	movs	r2, #0
 800aa14:	4648      	mov	r0, r9
 800aa16:	4611      	mov	r1, r2
 800aa18:	f7ff ff64 	bl	800a8e4 <_ZL11logwritenummbb>
                break;
 800aa1c:	e7ab      	b.n	800a976 <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800aa1e:	4648      	mov	r0, r9
 800aa20:	f7f9 f896 	bl	8003b50 <strlen>
 800aa24:	4601      	mov	r1, r0
 800aa26:	4648      	mov	r0, r9
 800aa28:	f7ff ff1c 	bl	800a864 <_ZL9logwritenPKci>
 800aa2c:	e7a3      	b.n	800a976 <codal_vdmesg+0x16>
 800aa2e:	bf00      	nop
 800aa30:	0800d23c 	.word	0x0800d23c
 800aa34:	0800d244 	.word	0x0800d244
 800aa38:	0800d240 	.word	0x0800d240

0800aa3c <codal_dmesg>:
{
 800aa3c:	b40f      	push	{r0, r1, r2, r3}
 800aa3e:	b500      	push	{lr}
 800aa40:	b083      	sub	sp, #12
 800aa42:	ab04      	add	r3, sp, #16
 800aa44:	f853 0b04 	ldr.w	r0, [r3], #4
    codal_vdmesg(format, arg);
 800aa48:	4619      	mov	r1, r3
    va_start(arg, format);
 800aa4a:	9301      	str	r3, [sp, #4]
    codal_vdmesg(format, arg);
 800aa4c:	f7ff ff88 	bl	800a960 <codal_vdmesg>
}
 800aa50:	b003      	add	sp, #12
 800aa52:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa56:	b004      	add	sp, #16
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop

0800aa5c <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 800aa5c:	4800      	ldr	r0, [pc, #0]	; (800aa60 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 800aa5e:	4770      	bx	lr
 800aa60:	fffffc16 	.word	0xfffffc16

0800aa64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>:

using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
 800aa64:	b1b2      	cbz	r2, 800aa94 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x30>
{
 800aa66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (queue && queue->prev) target_panic(30);
 800aa68:	69d3      	ldr	r3, [r2, #28]
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	4614      	mov	r4, r2
 800aa70:	b113      	cbz	r3, 800aa78 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x14>
 800aa72:	201e      	movs	r0, #30
 800aa74:	f7f5 ff6c 	bl	8000950 <target_panic>
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	3201      	adds	r2, #1
    while (queue) {
        if (*dest)
 800aa7c:	682b      	ldr	r3, [r5, #0]
            *(*dest)++ = queue;
        (*sum)++;
 800aa7e:	4616      	mov	r6, r2
        if (*dest)
 800aa80:	b113      	cbz	r3, 800aa88 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x24>
            *(*dest)++ = queue;
 800aa82:	1d18      	adds	r0, r3, #4
 800aa84:	6028      	str	r0, [r5, #0]
 800aa86:	601c      	str	r4, [r3, #0]
        queue = queue->next;
 800aa88:	69a4      	ldr	r4, [r4, #24]
 800aa8a:	3201      	adds	r2, #1
    while (queue) {
 800aa8c:	2c00      	cmp	r4, #0
 800aa8e:	d1f5      	bne.n	800aa7c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x18>
 800aa90:	603e      	str	r6, [r7, #0]
    }
}
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop

0800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>:
/**
  * Utility function to the given fiber from whichever queue it is currently stored on.
  *
  * @param f the fiber to remove.
  */
void codal::dequeue_fiber(Fiber *f)
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	4604      	mov	r4, r0
    // If this fiber is already dequeued, nothing the there's nothing to do.
    if (f->queue == NULL)
        return;

    // Remove this fiber fromm whichever queue it is on.
    target_disable_irq();
 800aa9c:	f7f5 ff42 	bl	8000924 <target_disable_irq>

    if (f->prev != NULL)
        f->prev->next = f->next;
 800aaa0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    if (f->prev != NULL)
 800aaa4:	b163      	cbz	r3, 800aac0 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x28>
        f->prev->next = f->next;
 800aaa6:	619a      	str	r2, [r3, #24]
    else
        *(f->queue) = f->next;

    if(f->next)
 800aaa8:	69a3      	ldr	r3, [r4, #24]
 800aaaa:	b10b      	cbz	r3, 800aab0 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x18>
        f->next->prev = f->prev;
 800aaac:	69e2      	ldr	r2, [r4, #28]
 800aaae:	61da      	str	r2, [r3, #28]

    f->next = NULL;
 800aab0:	2300      	movs	r3, #0
    f->prev = NULL;
 800aab2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    f->queue = NULL;
 800aab6:	6163      	str	r3, [r4, #20]

    target_enable_irq();
}
 800aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_enable_irq();
 800aabc:	f7f5 bf30 	b.w	8000920 <target_enable_irq>
        *(f->queue) = f->next;
 800aac0:	6963      	ldr	r3, [r4, #20]
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	e7f0      	b.n	800aaa8 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x10>
 800aac6:	bf00      	nop

0800aac8 <_ZN5codal11list_fibersEPPNS_5FiberE>:
    int sum = 0;
 800aac8:	2300      	movs	r3, #0
{
 800aaca:	b510      	push	{r4, lr}
 800aacc:	b084      	sub	sp, #16
    int sum = 0;
 800aace:	ac04      	add	r4, sp, #16
 800aad0:	f844 3d04 	str.w	r3, [r4, #-4]!
{
 800aad4:	9001      	str	r0, [sp, #4]
    target_disable_irq();
 800aad6:	f7f5 ff25 	bl	8000924 <target_disable_irq>
    get_fibers_from(&dest, &sum, runQueue);
 800aada:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <_ZN5codal11list_fibersEPPNS_5FiberE+0x4c>)
 800aadc:	4621      	mov	r1, r4
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	a801      	add	r0, sp, #4
 800aae2:	f7ff ffbf 	bl	800aa64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, sleepQueue);
 800aae6:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <_ZN5codal11list_fibersEPPNS_5FiberE+0x50>)
 800aae8:	4621      	mov	r1, r4
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	a801      	add	r0, sp, #4
 800aaee:	f7ff ffb9 	bl	800aa64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, waitQueue);
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <_ZN5codal11list_fibersEPPNS_5FiberE+0x54>)
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	a801      	add	r0, sp, #4
 800aafa:	f7ff ffb3 	bl	800aa64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    target_enable_irq();
 800aafe:	f7f5 ff0f 	bl	8000920 <target_enable_irq>
    if (dest)
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	b113      	cbz	r3, 800ab0c <_ZN5codal11list_fibersEPPNS_5FiberE+0x44>
        *dest++ = idleFiber;
 800ab06:	4a06      	ldr	r2, [pc, #24]	; (800ab20 <_ZN5codal11list_fibersEPPNS_5FiberE+0x58>)
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	601a      	str	r2, [r3, #0]
    sum++;
 800ab0c:	9803      	ldr	r0, [sp, #12]
}
 800ab0e:	3001      	adds	r0, #1
 800ab10:	b004      	add	sp, #16
 800ab12:	bd10      	pop	{r4, pc}
 800ab14:	20001630 	.word	0x20001630
 800ab18:	20001628 	.word	0x20001628
 800ab1c:	2000163c 	.word	0x2000163c
 800ab20:	20001638 	.word	0x20001638

0800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	460d      	mov	r5, r1
 800ab28:	4604      	mov	r4, r0
    target_disable_irq();
 800ab2a:	f7f5 fefb 	bl	8000924 <target_disable_irq>
    if (*queue == NULL)
 800ab2e:	682a      	ldr	r2, [r5, #0]
    f->queue = queue;
 800ab30:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 800ab32:	b90a      	cbnz	r2, 800ab38 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x14>
 800ab34:	e00a      	b.n	800ab4c <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
 800ab36:	461a      	mov	r2, r3
        while (last->next != NULL)
 800ab38:	6993      	ldr	r3, [r2, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1fb      	bne.n	800ab36 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x12>
        last->next = f;
 800ab3e:	6194      	str	r4, [r2, #24]
        f->next = NULL;
 800ab40:	e9c4 3206 	strd	r3, r2, [r4, #24]
}
 800ab44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800ab48:	f7f5 beea 	b.w	8000920 <target_enable_irq>
        f->prev = NULL;
 800ab4c:	e9c4 2206 	strd	r2, r2, [r4, #24]
        *queue = f;
 800ab50:	602c      	str	r4, [r5, #0]
}
 800ab52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800ab56:	f7f5 bee3 	b.w	8000920 <target_enable_irq>
 800ab5a:	bf00      	nop

0800ab5c <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 800ab5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    Fiber *f = sleepQueue;
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
{
 800ab60:	b083      	sub	sp, #12
    Fiber *f = sleepQueue;
 800ab62:	681c      	ldr	r4, [r3, #0]
{
 800ab64:	aa02      	add	r2, sp, #8
 800ab66:	e902 0003 	stmdb	r2, {r0, r1}
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 800ab6a:	b18c      	cbz	r4, 800ab90 <_ZN5codal14scheduler_tickENS_5EventE+0x34>
 800ab6c:	9e01      	ldr	r6, [sp, #4]

        if (evt.timestamp >= f->context)
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800ab6e:	4f0a      	ldr	r7, [pc, #40]	; (800ab98 <_ZN5codal14scheduler_tickENS_5EventE+0x3c>)
        if (evt.timestamp >= f->context)
 800ab70:	68e3      	ldr	r3, [r4, #12]
        t = f->next;
 800ab72:	69a5      	ldr	r5, [r4, #24]
        if (evt.timestamp >= f->context)
 800ab74:	42b3      	cmp	r3, r6
 800ab76:	d808      	bhi.n	800ab8a <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    if (f->queue == NULL)
 800ab78:	6963      	ldr	r3, [r4, #20]
 800ab7a:	b113      	cbz	r3, 800ab82 <_ZN5codal14scheduler_tickENS_5EventE+0x26>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff ff8b 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
            queue_fiber(f,&runQueue);
 800ab82:	4620      	mov	r0, r4
 800ab84:	4639      	mov	r1, r7
 800ab86:	f7ff ffcd 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    while (f != NULL)
 800ab8a:	462c      	mov	r4, r5
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	d1ef      	bne.n	800ab70 <_ZN5codal14scheduler_tickENS_5EventE+0x14>
        }

        f = t;
    }
}
 800ab90:	b003      	add	sp, #12
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab94:	20001628 	.word	0x20001628
 800ab98:	20001630 	.word	0x20001630

0800ab9c <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 800aba0:	4f33      	ldr	r7, [pc, #204]	; (800ac70 <_ZN5codal15scheduler_eventENS_5EventE+0xd4>)
{
 800aba2:	b08f      	sub	sp, #60	; 0x3c
    if (messageBus == NULL)
 800aba4:	683a      	ldr	r2, [r7, #0]
{
 800aba6:	ab04      	add	r3, sp, #16
 800aba8:	e883 0003 	stmia.w	r3, {r0, r1}
    if (messageBus == NULL)
 800abac:	2a00      	cmp	r2, #0
 800abae:	d032      	beq.n	800ac16 <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
    Fiber *f = waitQueue;
 800abb0:	4b30      	ldr	r3, [pc, #192]	; (800ac74 <_ZN5codal15scheduler_eventENS_5EventE+0xd8>)
 800abb2:	f8bd a010 	ldrh.w	sl, [sp, #16]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f8bd 5012 	ldrh.w	r5, [sp, #18]
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
 800abbc:	b1b2      	cbz	r2, 800abec <_ZN5codal15scheduler_eventENS_5EventE+0x50>
    int notifyOneComplete = 0;
 800abbe:	f04f 0900 	mov.w	r9, #0
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800abc2:	f240 34fe 	movw	r4, #1022	; 0x3fe
 800abc6:	f240 38ff 	movw	r8, #1023	; 0x3ff
        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800abca:	4e2b      	ldr	r6, [pc, #172]	; (800ac78 <_ZN5codal15scheduler_eventENS_5EventE+0xdc>)
        uint16_t id = f->context & 0xFFFF;
 800abcc:	68d3      	ldr	r3, [r2, #12]
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800abce:	45a2      	cmp	sl, r4
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800abd0:	ea4f 4113 	mov.w	r1, r3, lsr #16
        t = f->next;
 800abd4:	f8d2 b018 	ldr.w	fp, [r2, #24]
        uint16_t id = f->context & 0xFFFF;
 800abd8:	b29b      	uxth	r3, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800abda:	b288      	uxth	r0, r1
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800abdc:	d01e      	beq.n	800ac1c <_ZN5codal15scheduler_eventENS_5EventE+0x80>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d032      	beq.n	800ac48 <_ZN5codal15scheduler_eventENS_5EventE+0xac>
 800abe2:	459a      	cmp	sl, r3
 800abe4:	d030      	beq.n	800ac48 <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    while (f != NULL)
 800abe6:	465a      	mov	r2, fp
 800abe8:	2a00      	cmp	r2, #0
 800abea:	d1ef      	bne.n	800abcc <_ZN5codal15scheduler_eventENS_5EventE+0x30>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 800abec:	f2aa 33fe 	subw	r3, sl, #1022	; 0x3fe
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d910      	bls.n	800ac16 <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 800abf4:	2310      	movs	r3, #16
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 800abf6:	683c      	ldr	r4, [r7, #0]
 800abf8:	462a      	mov	r2, r5
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4651      	mov	r1, sl
 800abfe:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <_ZN5codal15scheduler_eventENS_5EventE+0xe0>)
 800ac00:	a806      	add	r0, sp, #24
 800ac02:	f000 fcb9 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	4a1d      	ldr	r2, [pc, #116]	; (800ac80 <_ZN5codal15scheduler_eventENS_5EventE+0xe4>)
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d12a      	bne.n	800ac66 <_ZN5codal15scheduler_eventENS_5EventE+0xca>
            Listener listener(id, value, handler);
 800ac10:	a806      	add	r0, sp, #24
 800ac12:	f000 fcc9 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
}
 800ac16:	b00f      	add	sp, #60	; 0x3c
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800ac1c:	4543      	cmp	r3, r8
 800ac1e:	d1de      	bne.n	800abde <_ZN5codal15scheduler_eventENS_5EventE+0x42>
 800ac20:	b109      	cbz	r1, 800ac26 <_ZN5codal15scheduler_eventENS_5EventE+0x8a>
 800ac22:	42a8      	cmp	r0, r5
 800ac24:	d1df      	bne.n	800abe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            if (!notifyOneComplete)
 800ac26:	f1b9 0f00 	cmp.w	r9, #0
 800ac2a:	d1dc      	bne.n	800abe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800ac2c:	6953      	ldr	r3, [r2, #20]
 800ac2e:	b123      	cbz	r3, 800ac3a <_ZN5codal15scheduler_eventENS_5EventE+0x9e>
 800ac30:	4610      	mov	r0, r2
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	f7ff ff30 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800ac38:	9a03      	ldr	r2, [sp, #12]
                queue_fiber(f,&runQueue);
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	f7ff ff71 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800ac42:	f04f 0901 	mov.w	r9, #1
 800ac46:	e7ce      	b.n	800abe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800ac48:	b109      	cbz	r1, 800ac4e <_ZN5codal15scheduler_eventENS_5EventE+0xb2>
 800ac4a:	42a8      	cmp	r0, r5
 800ac4c:	d1cb      	bne.n	800abe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800ac4e:	6953      	ldr	r3, [r2, #20]
 800ac50:	b123      	cbz	r3, 800ac5c <_ZN5codal15scheduler_eventENS_5EventE+0xc0>
 800ac52:	4610      	mov	r0, r2
 800ac54:	9203      	str	r2, [sp, #12]
 800ac56:	f7ff ff1f 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800ac5a:	9a03      	ldr	r2, [sp, #12]
            queue_fiber(f,&runQueue);
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4631      	mov	r1, r6
 800ac60:	f7ff ff60 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 800ac64:	e7bf      	b.n	800abe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            remove(&listener);
 800ac66:	4620      	mov	r0, r4
 800ac68:	a906      	add	r1, sp, #24
 800ac6a:	4798      	blx	r3
 800ac6c:	e7d0      	b.n	800ac10 <_ZN5codal15scheduler_eventENS_5EventE+0x74>
 800ac6e:	bf00      	nop
 800ac70:	20001624 	.word	0x20001624
 800ac74:	2000163c 	.word	0x2000163c
 800ac78:	20001630 	.word	0x20001630
 800ac7c:	0800ab9d 	.word	0x0800ab9d
 800ac80:	0800aa5d 	.word	0x0800aa5d

0800ac84 <_Z15getFiberContextv>:
{
 800ac84:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 800ac86:	f7f5 fe4d 	bl	8000924 <target_disable_irq>
    if (fiberPool != NULL)
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <_Z15getFiberContextv+0x50>)
 800ac8c:	681c      	ldr	r4, [r3, #0]
 800ac8e:	b194      	cbz	r4, 800acb6 <_Z15getFiberContextv+0x32>
    if (f->queue == NULL)
 800ac90:	6963      	ldr	r3, [r4, #20]
 800ac92:	b113      	cbz	r3, 800ac9a <_Z15getFiberContextv+0x16>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f7ff feff 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    target_enable_irq();
 800ac9a:	f7f5 fe41 	bl	8000920 <target_enable_irq>
    f->flags = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 800aca2:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 800aca4:	6825      	ldr	r5, [r4, #0]
 800aca6:	f7f5 fe63 	bl	8000970 <fiber_initial_stack_base>
 800acaa:	4601      	mov	r1, r0
 800acac:	4628      	mov	r0, r5
 800acae:	f7f5 fe6b 	bl	8000988 <tcb_configure_stack_base>
}
 800acb2:	4620      	mov	r0, r4
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800acb6:	2024      	movs	r0, #36	; 0x24
 800acb8:	f7f9 f94a 	bl	8003f50 <_Znwj>
 800acbc:	2224      	movs	r2, #36	; 0x24
 800acbe:	2100      	movs	r1, #0
 800acc0:	4604      	mov	r4, r0
 800acc2:	f7f8 ff75 	bl	8003bb0 <memset>
        f->tcb = tcb_allocate();
 800acc6:	f7f5 fe57 	bl	8000978 <tcb_allocate>
        f->stack_bottom = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	e9c4 0300 	strd	r0, r3, [r4]
        f->stack_top = 0;
 800acd0:	60a3      	str	r3, [r4, #8]
 800acd2:	e7e2      	b.n	800ac9a <_Z15getFiberContextv+0x16>
 800acd4:	20001634 	.word	0x20001634

0800acd8 <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
    Fiber *f = currentFiber;
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <_ZL10handle_fobv+0x2c>)
{
 800acda:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 800acdc:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	07db      	lsls	r3, r3, #31
 800ace2:	d401      	bmi.n	800ace8 <_ZL10handle_fobv+0x10>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 800ace4:	4620      	mov	r0, r4
 800ace6:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 800ace8:	f7ff ffcc 	bl	800ac84 <_Z15getFiberContextv>
 800acec:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <_ZL10handle_fobv+0x30>)
 800acee:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d0f7      	beq.n	800ace4 <_ZL10handle_fobv+0xc>
            f->user_data = NULL;
 800acf4:	2300      	movs	r3, #0
            forkedFiber->user_data = f->user_data;
 800acf6:	6a22      	ldr	r2, [r4, #32]
 800acf8:	6202      	str	r2, [r0, #32]
            f->user_data = NULL;
 800acfa:	6223      	str	r3, [r4, #32]
 800acfc:	4604      	mov	r4, r0
}
 800acfe:	4620      	mov	r0, r4
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	bf00      	nop
 800ad04:	20001620 	.word	0x20001620
 800ad08:	2000162c 	.word	0x2000162c

0800ad0c <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 800ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ad10:	4d45      	ldr	r5, [pc, #276]	; (800ae28 <_ZN5codal14scheduler_initERNS_10EventModelE+0x11c>)
{
 800ad12:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ad14:	782a      	ldrb	r2, [r5, #0]
 800ad16:	f012 0401 	ands.w	r4, r2, #1
 800ad1a:	d002      	beq.n	800ad22 <_ZN5codal14scheduler_initERNS_10EventModelE+0x16>
}
 800ad1c:	b002      	add	sp, #8
 800ad1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    messageBus = &_messageBus;
 800ad22:	4e42      	ldr	r6, [pc, #264]	; (800ae2c <_ZN5codal14scheduler_initERNS_10EventModelE+0x120>)
    idleFiber = getFiberContext();
 800ad24:	4f42      	ldr	r7, [pc, #264]	; (800ae30 <_ZN5codal14scheduler_initERNS_10EventModelE+0x124>)
    messageBus = &_messageBus;
 800ad26:	6030      	str	r0, [r6, #0]
    currentFiber = getFiberContext();
 800ad28:	f7ff ffac 	bl	800ac84 <_Z15getFiberContextv>
 800ad2c:	4b41      	ldr	r3, [pc, #260]	; (800ae34 <_ZN5codal14scheduler_initERNS_10EventModelE+0x128>)
    queue_fiber(currentFiber, &runQueue);
 800ad2e:	4942      	ldr	r1, [pc, #264]	; (800ae38 <_ZN5codal14scheduler_initERNS_10EventModelE+0x12c>)
    currentFiber = getFiberContext();
 800ad30:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 800ad32:	f7ff fef7 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 800ad36:	f7ff ffa5 	bl	800ac84 <_Z15getFiberContextv>
 800ad3a:	6038      	str	r0, [r7, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800ad3c:	f8d0 8000 	ldr.w	r8, [r0]
 800ad40:	f7f5 fe16 	bl	8000970 <fiber_initial_stack_base>
 800ad44:	1f01      	subs	r1, r0, #4
 800ad46:	4640      	mov	r0, r8
 800ad48:	f7f5 fe1c 	bl	8000984 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	493b      	ldr	r1, [pc, #236]	; (800ae3c <_ZN5codal14scheduler_initERNS_10EventModelE+0x130>)
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f7f5 fe15 	bl	8000980 <tcb_configure_lr>
    if (messageBus)
 800ad56:	6837      	ldr	r7, [r6, #0]
 800ad58:	2f00      	cmp	r7, #0
 800ad5a:	d04b      	beq.n	800adf4 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
            Listener *newListener = new Listener(id, value, handler, flags);
 800ad5c:	2020      	movs	r0, #32
 800ad5e:	f7f9 f8f7 	bl	8003f50 <_Znwj>
 800ad62:	23c0      	movs	r3, #192	; 0xc0
 800ad64:	4622      	mov	r2, r4
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ad6c:	4b34      	ldr	r3, [pc, #208]	; (800ae40 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800ad6e:	4680      	mov	r8, r0
 800ad70:	f000 fc02 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	4c33      	ldr	r4, [pc, #204]	; (800ae44 <_ZN5codal14scheduler_initERNS_10EventModelE+0x138>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	42a3      	cmp	r3, r4
 800ad7c:	d141      	bne.n	800ae02 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf6>
            delete newListener;
 800ad7e:	4640      	mov	r0, r8
 800ad80:	f000 fc12 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800ad84:	4640      	mov	r0, r8
 800ad86:	f7f9 f8e5 	bl	8003f54 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 800ad8a:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800ad8c:	f8d6 8000 	ldr.w	r8, [r6]
 800ad90:	f7f9 f8de 	bl	8003f50 <_Znwj>
 800ad94:	22c0      	movs	r2, #192	; 0xc0
 800ad96:	4b2a      	ldr	r3, [pc, #168]	; (800ae40 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800ad98:	9200      	str	r2, [sp, #0]
 800ad9a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800ad9e:	2200      	movs	r2, #0
 800ada0:	4607      	mov	r7, r0
 800ada2:	f000 fbe9 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800ada6:	f8d8 3000 	ldr.w	r3, [r8]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	42a3      	cmp	r3, r4
 800adae:	d134      	bne.n	800ae1a <_ZN5codal14scheduler_initERNS_10EventModelE+0x10e>
            delete newListener;
 800adb0:	4638      	mov	r0, r7
 800adb2:	f000 fbf9 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800adb6:	4638      	mov	r0, r7
 800adb8:	f7f9 f8cc 	bl	8003f54 <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 800adbc:	2201      	movs	r2, #1
 800adbe:	210f      	movs	r1, #15
 800adc0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800adc4:	f000 fd42 	bl	800b84c <_ZN5codal27system_timer_event_every_usEmtt>
            Listener *newListener = new Listener(id, value, handler, flags);
 800adc8:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800adca:	6837      	ldr	r7, [r6, #0]
 800adcc:	f7f9 f8c0 	bl	8003f50 <_Znwj>
 800add0:	22c0      	movs	r2, #192	; 0xc0
 800add2:	4b1d      	ldr	r3, [pc, #116]	; (800ae48 <_ZN5codal14scheduler_initERNS_10EventModelE+0x13c>)
 800add4:	9200      	str	r2, [sp, #0]
 800add6:	210f      	movs	r1, #15
 800add8:	2201      	movs	r2, #1
 800adda:	4606      	mov	r6, r0
 800addc:	f000 fbcc 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d112      	bne.n	800ae0e <_ZN5codal14scheduler_initERNS_10EventModelE+0x102>
            delete newListener;
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 fbdd 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800adee:	4630      	mov	r0, r6
 800adf0:	f7f9 f8b0 	bl	8003f54 <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 800adf4:	782b      	ldrb	r3, [r5, #0]
 800adf6:	f043 0301 	orr.w	r3, r3, #1
 800adfa:	702b      	strb	r3, [r5, #0]
}
 800adfc:	b002      	add	sp, #8
 800adfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 800ae02:	4638      	mov	r0, r7
 800ae04:	4641      	mov	r1, r8
 800ae06:	4798      	blx	r3
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d0be      	beq.n	800ad8a <_ZN5codal14scheduler_initERNS_10EventModelE+0x7e>
 800ae0c:	e7b7      	b.n	800ad7e <_ZN5codal14scheduler_initERNS_10EventModelE+0x72>
 800ae0e:	4638      	mov	r0, r7
 800ae10:	4631      	mov	r1, r6
 800ae12:	4798      	blx	r3
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d0ed      	beq.n	800adf4 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
 800ae18:	e7e6      	b.n	800ade8 <_ZN5codal14scheduler_initERNS_10EventModelE+0xdc>
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	4798      	blx	r3
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d0cb      	beq.n	800adbc <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 800ae24:	e7c4      	b.n	800adb0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa4>
 800ae26:	bf00      	nop
 800ae28:	20001670 	.word	0x20001670
 800ae2c:	20001624 	.word	0x20001624
 800ae30:	20001638 	.word	0x20001638
 800ae34:	20001620 	.word	0x20001620
 800ae38:	20001630 	.word	0x20001630
 800ae3c:	0800b395 	.word	0x0800b395
 800ae40:	0800ab9d 	.word	0x0800ab9d
 800ae44:	0800a6b1 	.word	0x0800a6b1
 800ae48:	0800ab5d 	.word	0x0800ab5d

0800ae4c <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <_ZN5codal23fiber_scheduler_runningEv+0xc>)
 800ae4e:	7818      	ldrb	r0, [r3, #0]
}
 800ae50:	f000 0001 	and.w	r0, r0, #1
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20001670 	.word	0x20001670

0800ae5c <_ZN5codal19fiber_wake_on_eventEtt>:
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (messageBus == NULL || !fiber_scheduler_running())
 800ae5e:	4f1f      	ldr	r7, [pc, #124]	; (800aedc <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
{
 800ae60:	b083      	sub	sp, #12
    if (messageBus == NULL || !fiber_scheduler_running())
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d037      	beq.n	800aed8 <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800ae68:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	07db      	lsls	r3, r3, #31
 800ae6e:	d533      	bpl.n	800aed8 <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
 800ae70:	460e      	mov	r6, r1
 800ae72:	4604      	mov	r4, r0
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 800ae74:	f7ff ff30 	bl	800acd8 <_ZL10handle_fobv>
    if (f->queue == NULL)
 800ae78:	6943      	ldr	r3, [r0, #20]

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 800ae7a:	ea44 4206 	orr.w	r2, r4, r6, lsl #16
    Fiber *f = handle_fob();
 800ae7e:	4605      	mov	r5, r0
    f->context = (uint32_t)value << 16 | id;
 800ae80:	60c2      	str	r2, [r0, #12]
    if (f->queue == NULL)
 800ae82:	b10b      	cbz	r3, 800ae88 <_ZN5codal19fiber_wake_on_eventEtt+0x2c>
 800ae84:	f7ff fe08 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>

    // Remove ourselves from the run queue
    dequeue_fiber(f);

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 800ae88:	4628      	mov	r0, r5
 800ae8a:	4916      	ldr	r1, [pc, #88]	; (800aee4 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 800ae8c:	f7ff fe4a 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 800ae90:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d916      	bls.n	800aec6 <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
            Listener *newListener = new Listener(id, value, handler, flags);
 800ae98:	2020      	movs	r0, #32
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800ae9a:	683f      	ldr	r7, [r7, #0]
 800ae9c:	f7f9 f858 	bl	8003f50 <_Znwj>
 800aea0:	23c0      	movs	r3, #192	; 0xc0
 800aea2:	4632      	mov	r2, r6
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4b0f      	ldr	r3, [pc, #60]	; (800aee8 <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 800aeaa:	4605      	mov	r5, r0
 800aeac:	f000 fb64 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	4a0e      	ldr	r2, [pc, #56]	; (800aeec <_ZN5codal19fiber_wake_on_eventEtt+0x90>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d108      	bne.n	800aecc <_ZN5codal19fiber_wake_on_eventEtt+0x70>
            delete newListener;
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 fb74 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7f9 f847 	bl	8003f54 <_ZdlPv>
 800aec6:	2000      	movs	r0, #0

    return DEVICE_OK;
}
 800aec8:	b003      	add	sp, #12
 800aeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(add(newListener) == DEVICE_OK)
 800aecc:	4638      	mov	r0, r7
 800aece:	4629      	mov	r1, r5
 800aed0:	4798      	blx	r3
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d0f7      	beq.n	800aec6 <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
 800aed6:	e7f0      	b.n	800aeba <_ZN5codal19fiber_wake_on_eventEtt+0x5e>
        return DEVICE_NOT_SUPPORTED;
 800aed8:	4805      	ldr	r0, [pc, #20]	; (800aef0 <_ZN5codal19fiber_wake_on_eventEtt+0x94>)
 800aeda:	e7f5      	b.n	800aec8 <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 800aedc:	20001624 	.word	0x20001624
 800aee0:	20001670 	.word	0x20001670
 800aee4:	2000163c 	.word	0x2000163c
 800aee8:	0800ab9d 	.word	0x0800ab9d
 800aeec:	0800a6b1 	.word	0x0800a6b1
 800aef0:	fffffc16 	.word	0xfffffc16

0800aef4 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 800aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 800aef8:	b328      	cbz	r0, 800af46 <_Z14__create_fibermmmi+0x52>
 800aefa:	b321      	cbz	r1, 800af46 <_Z14__create_fibermmmi+0x52>
 800aefc:	4605      	mov	r5, r0
 800aefe:	4698      	mov	r8, r3
 800af00:	4617      	mov	r7, r2
 800af02:	460e      	mov	r6, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 800af04:	f7ff febe 	bl	800ac84 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 800af08:	4604      	mov	r4, r0
 800af0a:	b1e0      	cbz	r0, 800af46 <_Z14__create_fibermmmi+0x52>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 800af0c:	4632      	mov	r2, r6
 800af0e:	463b      	mov	r3, r7
 800af10:	4629      	mov	r1, r5
 800af12:	6800      	ldr	r0, [r0, #0]
 800af14:	f7f5 fd40 	bl	8000998 <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 800af18:	6825      	ldr	r5, [r4, #0]
 800af1a:	f7f5 fd29 	bl	8000970 <fiber_initial_stack_base>
 800af1e:	1f01      	subs	r1, r0, #4
 800af20:	4628      	mov	r0, r5
 800af22:	f7f5 fd2f 	bl	8000984 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 800af26:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <_Z14__create_fibermmmi+0x5c>)
 800af28:	490a      	ldr	r1, [pc, #40]	; (800af54 <_Z14__create_fibermmmi+0x60>)
 800af2a:	6820      	ldr	r0, [r4, #0]
 800af2c:	f1b8 0f00 	cmp.w	r8, #0
 800af30:	bf18      	it	ne
 800af32:	4619      	movne	r1, r3
 800af34:	f7f5 fd24 	bl	8000980 <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 800af38:	4620      	mov	r0, r4
 800af3a:	4907      	ldr	r1, [pc, #28]	; (800af58 <_Z14__create_fibermmmi+0x64>)
 800af3c:	f7ff fdf2 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 800af40:	4620      	mov	r0, r4
 800af42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NULL;
 800af46:	2400      	movs	r4, #0
}
 800af48:	4620      	mov	r0, r4
 800af4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4e:	bf00      	nop
 800af50:	0800b36d 	.word	0x0800b36d
 800af54:	0800b299 	.word	0x0800b299
 800af58:	20001630 	.word	0x20001630

0800af5c <_ZN5codal12create_fiberEPFvvES1_>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800af5c:	4b05      	ldr	r3, [pc, #20]	; (800af74 <_ZN5codal12create_fiberEPFvvES1_+0x18>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f013 0301 	ands.w	r3, r3, #1
 800af64:	d003      	beq.n	800af6e <_ZN5codal12create_fiberEPFvvES1_+0x12>
Fiber *codal::create_fiber(void (*entry_fn)(void), void (*completion_fn)(void))
{
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 800af66:	2300      	movs	r3, #0
 800af68:	461a      	mov	r2, r3
 800af6a:	f7ff bfc3 	b.w	800aef4 <_Z14__create_fibermmmi>
}
 800af6e:	4618      	mov	r0, r3
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	20001670 	.word	0x20001670

0800af78 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800af78:	4b07      	ldr	r3, [pc, #28]	; (800af98 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x20>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	f013 0301 	ands.w	r3, r3, #1
 800af80:	d007      	beq.n	800af92 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>
  *                      Defaults to release_fiber.
  *
  * @return The new Fiber, or NULL if the operation could not be completed.
  */
Fiber *codal::create_fiber(void (*entry_fn)(void *), void *param, void (*completion_fn)(void *))
{
 800af82:	b410      	push	{r4}
 800af84:	4614      	mov	r4, r2
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800af86:	2301      	movs	r3, #1
 800af88:	460a      	mov	r2, r1
 800af8a:	4621      	mov	r1, r4
}
 800af8c:	bc10      	pop	{r4}
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800af8e:	f7ff bfb1 	b.w	800aef4 <_Z14__create_fibermmmi>
}
 800af92:	4618      	mov	r0, r3
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	20001670 	.word	0x20001670

0800af9c <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 800af9c:	4b02      	ldr	r3, [pc, #8]	; (800afa8 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 800af9e:	6818      	ldr	r0, [r3, #0]
}
 800afa0:	fab0 f080 	clz	r0, r0
 800afa4:	0940      	lsrs	r0, r0, #5
 800afa6:	4770      	bx	lr
 800afa8:	20001630 	.word	0x20001630

0800afac <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 800afac:	b530      	push	{r4, r5, lr}
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800afae:	4d0f      	ldr	r5, [pc, #60]	; (800afec <_ZN5codal4idleEv+0x40>)
{
 800afb0:	b083      	sub	sp, #12
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800afb2:	782b      	ldrb	r3, [r5, #0]
 800afb4:	079a      	lsls	r2, r3, #30
 800afb6:	d504      	bpl.n	800afc2 <_ZN5codal4idleEv+0x16>
    return (runQueue == NULL);
 800afb8:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <_ZN5codal4idleEv+0x44>)
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	b173      	cbz	r3, 800afdc <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 800afbe:	b003      	add	sp, #12
 800afc0:	bd30      	pop	{r4, r5, pc}
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800afc2:	f043 0402 	orr.w	r4, r3, #2
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800afc6:	2202      	movs	r2, #2
 800afc8:	2301      	movs	r3, #1
 800afca:	210f      	movs	r1, #15
 800afcc:	4668      	mov	r0, sp
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800afce:	702c      	strb	r4, [r5, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800afd0:	f000 ff44 	bl	800be5c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return (runQueue == NULL);
 800afd4:	4b06      	ldr	r3, [pc, #24]	; (800aff0 <_ZN5codal4idleEv+0x44>)
    if(scheduler_runqueue_empty())
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1f0      	bne.n	800afbe <_ZN5codal4idleEv+0x12>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 800afdc:	782b      	ldrb	r3, [r5, #0]
 800afde:	f023 0302 	bic.w	r3, r3, #2
 800afe2:	702b      	strb	r3, [r5, #0]
        target_wait_for_event();
 800afe4:	f7f5 fc70 	bl	80008c8 <target_wait_for_event>
}
 800afe8:	b003      	add	sp, #12
 800afea:	bd30      	pop	{r4, r5, pc}
 800afec:	20001670 	.word	0x20001670
 800aff0:	20001630 	.word	0x20001630

0800aff4 <_ZN5codal8scheduleEv.part.3>:
void codal::schedule()
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Fiber *oldFiber = currentFiber;
 800aff8:	4d5a      	ldr	r5, [pc, #360]	; (800b164 <_ZN5codal8scheduleEv.part.3+0x170>)
 800affa:	682c      	ldr	r4, [r5, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d447      	bmi.n	800b092 <_ZN5codal8scheduleEv.part.3+0x9e>
    if (runQueue == NULL)
 800b002:	4e59      	ldr	r6, [pc, #356]	; (800b168 <_ZN5codal8scheduleEv.part.3+0x174>)
 800b004:	4f59      	ldr	r7, [pc, #356]	; (800b16c <_ZN5codal8scheduleEv.part.3+0x178>)
 800b006:	6832      	ldr	r2, [r6, #0]
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	d031      	beq.n	800b072 <_ZN5codal8scheduleEv.part.3+0x7e>
    else if (currentFiber->queue == &runQueue)
 800b00e:	6960      	ldr	r0, [r4, #20]
 800b010:	42b0      	cmp	r0, r6
 800b012:	f000 8098 	beq.w	800b146 <_ZN5codal8scheduleEv.part.3+0x152>
        currentFiber = runQueue;
 800b016:	602a      	str	r2, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800b018:	428a      	cmp	r2, r1
 800b01a:	d02b      	beq.n	800b074 <_ZN5codal8scheduleEv.part.3+0x80>
    if (currentFiber != oldFiber)
 800b01c:	4294      	cmp	r4, r2
 800b01e:	d06f      	beq.n	800b100 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 800b020:	428c      	cmp	r4, r1
 800b022:	d06f      	beq.n	800b104 <_ZN5codal8scheduleEv.part.3+0x110>
 800b024:	4b52      	ldr	r3, [pc, #328]	; (800b170 <_ZN5codal8scheduleEv.part.3+0x17c>)
 800b026:	6962      	ldr	r2, [r4, #20]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d06b      	beq.n	800b104 <_ZN5codal8scheduleEv.part.3+0x110>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b02c:	6820      	ldr	r0, [r4, #0]
 800b02e:	f7f5 fcad 	bl	800098c <tcb_get_stack_base>
 800b032:	4606      	mov	r6, r0
 800b034:	f7f5 fcac 	bl	8000990 <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800b038:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b03c:	1a30      	subs	r0, r6, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800b03e:	1aca      	subs	r2, r1, r3
    if (bufferSize < stackDepth)
 800b040:	4290      	cmp	r0, r2
 800b042:	d968      	bls.n	800b116 <_ZN5codal8scheduleEv.part.3+0x122>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b044:	f100 0120 	add.w	r1, r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800b048:	682f      	ldr	r7, [r5, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b04a:	f021 061f 	bic.w	r6, r1, #31
        currentFiber = f;
 800b04e:	602c      	str	r4, [r5, #0]
        if (f->stack_bottom != 0)
 800b050:	2b00      	cmp	r3, #0
 800b052:	f040 8082 	bne.w	800b15a <_ZN5codal8scheduleEv.part.3+0x166>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b056:	4630      	mov	r0, r6
 800b058:	f7fe f9f2 	bl	8009440 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800b05c:	1831      	adds	r1, r6, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b05e:	e9c4 0101 	strd	r0, r1, [r4, #4]
        currentFiber = prevCurrFiber;
 800b062:	602f      	str	r7, [r5, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	683a      	ldr	r2, [r7, #0]
}
 800b06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800b06e:	f7f5 bce7 	b.w	8000a40 <swap_context>
        currentFiber = idleFiber;
 800b072:	6029      	str	r1, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800b074:	071b      	lsls	r3, r3, #28
 800b076:	d555      	bpl.n	800b124 <_ZN5codal8scheduleEv.part.3+0x130>
        currentFiber = oldFiber;
 800b078:	602c      	str	r4, [r5, #0]
            idle();
 800b07a:	f7ff ff97 	bl	800afac <_ZN5codal4idleEv>
        while (runQueue == NULL);
 800b07e:	6833      	ldr	r3, [r6, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d0fa      	beq.n	800b07a <_ZN5codal8scheduleEv.part.3+0x86>
    if (currentFiber != oldFiber)
 800b084:	429c      	cmp	r4, r3
        currentFiber = runQueue;
 800b086:	602b      	str	r3, [r5, #0]
    if (currentFiber != oldFiber)
 800b088:	d03a      	beq.n	800b100 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (currentFiber == idleFiber)
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	428b      	cmp	r3, r1
 800b08e:	d1c7      	bne.n	800b020 <_ZN5codal8scheduleEv.part.3+0x2c>
 800b090:	e04b      	b.n	800b12a <_ZN5codal8scheduleEv.part.3+0x136>
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b092:	4e38      	ldr	r6, [pc, #224]	; (800b174 <_ZN5codal8scheduleEv.part.3+0x180>)
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800b094:	f043 0302 	orr.w	r3, r3, #2
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b098:	6832      	ldr	r2, [r6, #0]
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800b09a:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b09c:	6913      	ldr	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800b09e:	6820      	ldr	r0, [r4, #0]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b0a0:	f043 0304 	orr.w	r3, r3, #4
 800b0a4:	6113      	str	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800b0a6:	6814      	ldr	r4, [r2, #0]
 800b0a8:	f7f5 fc74 	bl	8000994 <tcb_get_sp>
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7f5 fc6a 	bl	8000988 <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 800b0b4:	6837      	ldr	r7, [r6, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b0b6:	6838      	ldr	r0, [r7, #0]
 800b0b8:	f7f5 fc68 	bl	800098c <tcb_get_stack_base>
 800b0bc:	4604      	mov	r4, r0
 800b0be:	f7f5 fc67 	bl	8000990 <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800b0c2:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b0c6:	1a20      	subs	r0, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800b0c8:	1a9b      	subs	r3, r3, r2
    if (bufferSize < stackDepth)
 800b0ca:	4298      	cmp	r0, r3
 800b0cc:	d90f      	bls.n	800b0ee <_ZN5codal8scheduleEv.part.3+0xfa>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b0ce:	3020      	adds	r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800b0d0:	f8d5 8000 	ldr.w	r8, [r5]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b0d4:	f020 041f 	bic.w	r4, r0, #31
        currentFiber = f;
 800b0d8:	602f      	str	r7, [r5, #0]
        if (f->stack_bottom != 0)
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d139      	bne.n	800b152 <_ZN5codal8scheduleEv.part.3+0x15e>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7fe f9ae 	bl	8009440 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800b0e4:	4404      	add	r4, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b0e6:	e9c7 0401 	strd	r0, r4, [r7, #4]
        currentFiber = prevCurrFiber;
 800b0ea:	f8c5 8000 	str.w	r8, [r5]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 800b0ee:	6833      	ldr	r3, [r6, #0]
 800b0f0:	6899      	ldr	r1, [r3, #8]
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	f7f5 fce5 	bl	8000ac2 <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	691a      	ldr	r2, [r3, #16]
 800b0fc:	0792      	lsls	r2, r2, #30
 800b0fe:	d40c      	bmi.n	800b11a <_ZN5codal8scheduleEv.part.3+0x126>
}
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800b104:	2100      	movs	r1, #0
 800b106:	682a      	ldr	r2, [r5, #0]
 800b108:	4608      	mov	r0, r1
}
 800b10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800b10e:	6893      	ldr	r3, [r2, #8]
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	f7f5 bc95 	b.w	8000a40 <swap_context>
 800b116:	682f      	ldr	r7, [r5, #0]
 800b118:	e7a4      	b.n	800b064 <_ZN5codal8scheduleEv.part.3+0x70>
            restore_register_context(currentFiber->tcb);
 800b11a:	6818      	ldr	r0, [r3, #0]
}
 800b11c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            restore_register_context(currentFiber->tcb);
 800b120:	f7f5 bd09 	b.w	8000b36 <restore_register_context>
    if (currentFiber != oldFiber)
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	429c      	cmp	r4, r3
 800b128:	d0ea      	beq.n	800b100 <_ZN5codal8scheduleEv.part.3+0x10c>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800b12a:	681e      	ldr	r6, [r3, #0]
 800b12c:	f7f5 fc20 	bl	8000970 <fiber_initial_stack_base>
 800b130:	1f01      	subs	r1, r0, #4
 800b132:	4630      	mov	r0, r6
 800b134:	f7f5 fc26 	bl	8000984 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	490f      	ldr	r1, [pc, #60]	; (800b178 <_ZN5codal8scheduleEv.part.3+0x184>)
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	f7f5 fc1f 	bl	8000980 <tcb_configure_lr>
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	e76c      	b.n	800b020 <_ZN5codal8scheduleEv.part.3+0x2c>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 800b146:	69a0      	ldr	r0, [r4, #24]
 800b148:	2800      	cmp	r0, #0
 800b14a:	bf18      	it	ne
 800b14c:	4602      	movne	r2, r0
 800b14e:	602a      	str	r2, [r5, #0]
 800b150:	e762      	b.n	800b018 <_ZN5codal8scheduleEv.part.3+0x24>
            free((void *)f->stack_bottom);
 800b152:	4610      	mov	r0, r2
 800b154:	f7fe f89c 	bl	8009290 <free>
 800b158:	e7c1      	b.n	800b0de <_ZN5codal8scheduleEv.part.3+0xea>
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe f898 	bl	8009290 <free>
 800b160:	e779      	b.n	800b056 <_ZN5codal8scheduleEv.part.3+0x62>
 800b162:	bf00      	nop
 800b164:	20001620 	.word	0x20001620
 800b168:	20001630 	.word	0x20001630
 800b16c:	20001638 	.word	0x20001638
 800b170:	20001634 	.word	0x20001634
 800b174:	2000162c 	.word	0x2000162c
 800b178:	0800b395 	.word	0x0800b395

0800b17c <_ZN5codal8scheduleEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b17c:	4b03      	ldr	r3, [pc, #12]	; (800b18c <_ZN5codal8scheduleEv+0x10>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	07db      	lsls	r3, r3, #31
 800b182:	d501      	bpl.n	800b188 <_ZN5codal8scheduleEv+0xc>
 800b184:	f7ff bf36 	b.w	800aff4 <_ZN5codal8scheduleEv.part.3>
}
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	20001670 	.word	0x20001670

0800b190 <_ZN5codal11fiber_sleepEm>:
{
 800b190:	b570      	push	{r4, r5, r6, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b192:	4d10      	ldr	r5, [pc, #64]	; (800b1d4 <_ZN5codal11fiber_sleepEm+0x44>)
 800b194:	782a      	ldrb	r2, [r5, #0]
 800b196:	07d2      	lsls	r2, r2, #31
 800b198:	d514      	bpl.n	800b1c4 <_ZN5codal11fiber_sleepEm+0x34>
 800b19a:	4604      	mov	r4, r0
    Fiber *f = handle_fob();
 800b19c:	f7ff fd9c 	bl	800acd8 <_ZL10handle_fobv>
 800b1a0:	4606      	mov	r6, r0
    f->context = system_timer_current_time() + t;
 800b1a2:	f000 fb37 	bl	800b814 <_ZN5codal25system_timer_current_timeEv>
    if (f->queue == NULL)
 800b1a6:	6973      	ldr	r3, [r6, #20]
    f->context = system_timer_current_time() + t;
 800b1a8:	4420      	add	r0, r4
 800b1aa:	60f0      	str	r0, [r6, #12]
    if (f->queue == NULL)
 800b1ac:	b113      	cbz	r3, 800b1b4 <_ZN5codal11fiber_sleepEm+0x24>
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7ff fc72 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    queue_fiber(f, &sleepQueue);
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4908      	ldr	r1, [pc, #32]	; (800b1d8 <_ZN5codal11fiber_sleepEm+0x48>)
 800b1b8:	f7ff fcb4 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b1bc:	782b      	ldrb	r3, [r5, #0]
 800b1be:	07db      	lsls	r3, r3, #31
 800b1c0:	d404      	bmi.n	800b1cc <_ZN5codal11fiber_sleepEm+0x3c>
}
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        target_wait(t);
 800b1c8:	f7f5 bb86 	b.w	80008d8 <target_wait>
}
 800b1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1d0:	f7ff bf10 	b.w	800aff4 <_ZN5codal8scheduleEv.part.3>
 800b1d4:	20001670 	.word	0x20001670
 800b1d8:	20001628 	.word	0x20001628

0800b1dc <_ZN5codal20fiber_wait_for_eventEtt>:
{
 800b1dc:	b500      	push	{lr}
 800b1de:	b083      	sub	sp, #12
    int ret = fiber_wake_on_event(id, value);
 800b1e0:	f7ff fe3c 	bl	800ae5c <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 800b1e4:	b918      	cbnz	r0, 800b1ee <_ZN5codal20fiber_wait_for_eventEtt+0x12>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b1e6:	4b07      	ldr	r3, [pc, #28]	; (800b204 <_ZN5codal20fiber_wait_for_eventEtt+0x28>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	07db      	lsls	r3, r3, #31
 800b1ec:	d402      	bmi.n	800b1f4 <_ZN5codal20fiber_wait_for_eventEtt+0x18>
}
 800b1ee:	b003      	add	sp, #12
 800b1f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f4:	9001      	str	r0, [sp, #4]
 800b1f6:	f7ff fefd 	bl	800aff4 <_ZN5codal8scheduleEv.part.3>
 800b1fa:	9801      	ldr	r0, [sp, #4]
 800b1fc:	b003      	add	sp, #12
 800b1fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b202:	bf00      	nop
 800b204:	20001670 	.word	0x20001670

0800b208 <_ZN5codal13release_fiberEv.part.4>:
void codal::release_fiber(void)
 800b208:	b538      	push	{r3, r4, r5, lr}
    dequeue_fiber(currentFiber);
 800b20a:	4d1b      	ldr	r5, [pc, #108]	; (800b278 <_ZN5codal13release_fiberEv.part.4+0x70>)
 800b20c:	6828      	ldr	r0, [r5, #0]
    if (f->queue == NULL)
 800b20e:	6943      	ldr	r3, [r0, #20]
 800b210:	b113      	cbz	r3, 800b218 <_ZN5codal13release_fiberEv.part.4+0x10>
 800b212:	f7ff fc41 	bl	800aa98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800b216:	6828      	ldr	r0, [r5, #0]
    queue_fiber(currentFiber, &fiberPool);
 800b218:	4c18      	ldr	r4, [pc, #96]	; (800b27c <_ZN5codal13release_fiberEv.part.4+0x74>)
 800b21a:	4621      	mov	r1, r4
 800b21c:	f7ff fc82 	bl	800ab24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 800b220:	6824      	ldr	r4, [r4, #0]
 800b222:	b14c      	cbz	r4, 800b238 <_ZN5codal13release_fiberEv.part.4+0x30>
        if (!p->next && numFree > 3) {
 800b224:	69a3      	ldr	r3, [r4, #24]
    int numFree = 0;
 800b226:	2200      	movs	r2, #0
        if (!p->next && numFree > 3) {
 800b228:	b123      	cbz	r3, 800b234 <_ZN5codal13release_fiberEv.part.4+0x2c>
 800b22a:	461c      	mov	r4, r3
 800b22c:	69a3      	ldr	r3, [r4, #24]
        numFree++;
 800b22e:	3201      	adds	r2, #1
        if (!p->next && numFree > 3) {
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1fa      	bne.n	800b22a <_ZN5codal13release_fiberEv.part.4+0x22>
 800b234:	2a03      	cmp	r2, #3
 800b236:	dc0e      	bgt.n	800b256 <_ZN5codal13release_fiberEv.part.4+0x4e>
    currentFiber->flags = 0;
 800b238:	2200      	movs	r2, #0
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800b23e:	681c      	ldr	r4, [r3, #0]
 800b240:	f7f5 fb96 	bl	8000970 <fiber_initial_stack_base>
 800b244:	4601      	mov	r1, r0
 800b246:	4620      	mov	r0, r4
 800b248:	f7f5 fb9e 	bl	8000988 <tcb_configure_stack_base>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b24c:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <_ZN5codal13release_fiberEv.part.4+0x78>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	07db      	lsls	r3, r3, #31
 800b252:	d40c      	bmi.n	800b26e <_ZN5codal13release_fiberEv.part.4+0x66>
}
 800b254:	bd38      	pop	{r3, r4, r5, pc}
            p->prev->next = NULL;
 800b256:	69e2      	ldr	r2, [r4, #28]
            free(p->tcb);
 800b258:	6820      	ldr	r0, [r4, #0]
            p->prev->next = NULL;
 800b25a:	6193      	str	r3, [r2, #24]
            free(p->tcb);
 800b25c:	f7fe f818 	bl	8009290 <free>
            free((void *)p->stack_bottom);
 800b260:	6860      	ldr	r0, [r4, #4]
 800b262:	f7fe f815 	bl	8009290 <free>
            free(p);
 800b266:	4620      	mov	r0, r4
 800b268:	f7fe f812 	bl	8009290 <free>
 800b26c:	e7e4      	b.n	800b238 <_ZN5codal13release_fiberEv.part.4+0x30>
}
 800b26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b272:	f7ff bebf 	b.w	800aff4 <_ZN5codal8scheduleEv.part.3>
 800b276:	bf00      	nop
 800b278:	20001620 	.word	0x20001620
 800b27c:	20001634 	.word	0x20001634
 800b280:	20001670 	.word	0x20001670

0800b284 <_ZN5codal13release_fiberEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <_ZN5codal13release_fiberEv+0x10>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	07db      	lsls	r3, r3, #31
 800b28a:	d501      	bpl.n	800b290 <_ZN5codal13release_fiberEv+0xc>
 800b28c:	f7ff bfbc 	b.w	800b208 <_ZN5codal13release_fiberEv.part.4>
}
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20001670 	.word	0x20001670

0800b298 <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 800b298:	b510      	push	{r4, lr}
 800b29a:	460c      	mov	r4, r1
    ep();
 800b29c:	4780      	blx	r0
    cp();
 800b29e:	47a0      	blx	r4
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <_ZN5codal16launch_new_fiberEPFvvES1_+0x1c>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	07db      	lsls	r3, r3, #31
 800b2a6:	d400      	bmi.n	800b2aa <_ZN5codal16launch_new_fiberEPFvvES1_+0x12>
}
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ae:	f7ff bfab 	b.w	800b208 <_ZN5codal13release_fiberEv.part.4>
 800b2b2:	bf00      	nop
 800b2b4:	20001670 	.word	0x20001670

0800b2b8 <_ZN5codal13release_fiberEPv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b2b8:	4b03      	ldr	r3, [pc, #12]	; (800b2c8 <_ZN5codal13release_fiberEPv+0x10>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	07db      	lsls	r3, r3, #31
 800b2be:	d400      	bmi.n	800b2c2 <_ZN5codal13release_fiberEPv+0xa>
}
 800b2c0:	4770      	bx	lr
 800b2c2:	f7ff bfa1 	b.w	800b208 <_ZN5codal13release_fiberEv.part.4>
 800b2c6:	bf00      	nop
 800b2c8:	20001670 	.word	0x20001670

0800b2cc <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d042      	beq.n	800b356 <_ZN5codal6invokeEPFvPvES0_+0x8a>
{
 800b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b2d4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800b368 <_ZN5codal6invokeEPFvPvES0_+0x9c>
{
 800b2d8:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b2da:	f898 3000 	ldrb.w	r3, [r8]
 800b2de:	07dc      	lsls	r4, r3, #31
 800b2e0:	d532      	bpl.n	800b348 <_ZN5codal6invokeEPFvPvES0_+0x7c>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800b2e2:	4f1e      	ldr	r7, [pc, #120]	; (800b35c <_ZN5codal6invokeEPFvPvES0_+0x90>)
 800b2e4:	460a      	mov	r2, r1
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	6919      	ldr	r1, [r3, #16]
 800b2ec:	0749      	lsls	r1, r1, #29
 800b2ee:	d101      	bne.n	800b2f4 <_ZN5codal6invokeEPFvPvES0_+0x28>
 800b2f0:	6a1c      	ldr	r4, [r3, #32]
 800b2f2:	b144      	cbz	r4, 800b306 <_ZN5codal6invokeEPFvPvES0_+0x3a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4919      	ldr	r1, [pc, #100]	; (800b360 <_ZN5codal6invokeEPFvPvES0_+0x94>)
 800b2fa:	f7ff fdfb 	bl	800aef4 <_Z14__create_fibermmmi>
        return DEVICE_OK;
 800b2fe:	2000      	movs	r0, #0
}
 800b300:	b002      	add	sp, #8
 800b302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    save_register_context(currentFiber->tcb);
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	9201      	str	r2, [sp, #4]
 800b30a:	f7f5 fbfc 	bl	8000b06 <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	9a01      	ldr	r2, [sp, #4]
 800b312:	690b      	ldr	r3, [r1, #16]
 800b314:	f013 0602 	ands.w	r6, r3, #2
 800b318:	d118      	bne.n	800b34c <_ZN5codal6invokeEPFvPvES0_+0x80>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800b31a:	f043 0301 	orr.w	r3, r3, #1
    entry_fn(param);
 800b31e:	4610      	mov	r0, r2
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800b320:	610b      	str	r3, [r1, #16]
    entry_fn(param);
 800b322:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 800b324:	683b      	ldr	r3, [r7, #0]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b326:	6918      	ldr	r0, [r3, #16]
    currentFiber->user_data = NULL;
 800b328:	621e      	str	r6, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b32a:	f020 0201 	bic.w	r2, r0, #1
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800b32e:	f010 0004 	ands.w	r0, r0, #4
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b332:	611a      	str	r2, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800b334:	d0e4      	beq.n	800b300 <_ZN5codal6invokeEPFvPvES0_+0x34>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b336:	f898 0000 	ldrb.w	r0, [r8]
 800b33a:	f010 0001 	ands.w	r0, r0, #1
 800b33e:	d0df      	beq.n	800b300 <_ZN5codal6invokeEPFvPvES0_+0x34>
 800b340:	f7ff ff62 	bl	800b208 <_ZN5codal13release_fiberEv.part.4>
    return DEVICE_OK;
 800b344:	4630      	mov	r0, r6
 800b346:	e7db      	b.n	800b300 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_NOT_SUPPORTED;
 800b348:	4806      	ldr	r0, [pc, #24]	; (800b364 <_ZN5codal6invokeEPFvPvES0_+0x98>)
 800b34a:	e7d9      	b.n	800b300 <_ZN5codal6invokeEPFvPvES0_+0x34>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	610b      	str	r3, [r1, #16]
        return DEVICE_OK;
 800b352:	4620      	mov	r0, r4
 800b354:	e7d4      	b.n	800b300 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_INVALID_PARAMETER;
 800b356:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b35a:	4770      	bx	lr
 800b35c:	20001620 	.word	0x20001620
 800b360:	0800b2b9 	.word	0x0800b2b9
 800b364:	fffffc16 	.word	0xfffffc16
 800b368:	20001670 	.word	0x20001670

0800b36c <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4614      	mov	r4, r2
 800b370:	4603      	mov	r3, r0
    ep(pm);
 800b372:	4610      	mov	r0, r2
{
 800b374:	460d      	mov	r5, r1
    ep(pm);
 800b376:	4798      	blx	r3
    cp(pm);
 800b378:	4620      	mov	r0, r4
 800b37a:	47a8      	blx	r5
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x24>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	07db      	lsls	r3, r3, #31
 800b382:	d400      	bmi.n	800b386 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x1a>
}
 800b384:	bd38      	pop	{r3, r4, r5, pc}
 800b386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b38a:	f7ff bf3d 	b.w	800b208 <_ZN5codal13release_fiberEv.part.4>
 800b38e:	bf00      	nop
 800b390:	20001670 	.word	0x20001670

0800b394 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 800b394:	b508      	push	{r3, lr}
 800b396:	4c04      	ldr	r4, [pc, #16]	; (800b3a8 <_ZN5codal9idle_taskEv+0x14>)
    while(1)
    {
        idle();
 800b398:	f7ff fe08 	bl	800afac <_ZN5codal4idleEv>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b39c:	7823      	ldrb	r3, [r4, #0]
 800b39e:	07db      	lsls	r3, r3, #31
 800b3a0:	d5fa      	bpl.n	800b398 <_ZN5codal9idle_taskEv+0x4>
 800b3a2:	f7ff fe27 	bl	800aff4 <_ZN5codal8scheduleEv.part.3>
 800b3a6:	e7f7      	b.n	800b398 <_ZN5codal9idle_taskEv+0x4>
 800b3a8:	20001670 	.word	0x20001670

0800b3ac <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	460e      	mov	r6, r1
    HeapDefinition *h = &heap[heap_count];
 800b3b2:	4c0b      	ldr	r4, [pc, #44]	; (800b3e0 <_Z18device_create_heapmm+0x34>)
 800b3b4:	7827      	ldrb	r7, [r4, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800b3b6:	f7f5 fab5 	bl	8000924 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800b3ba:	4a0a      	ldr	r2, [pc, #40]	; (800b3e4 <_Z18device_create_heapmm+0x38>)
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b3bc:	1b73      	subs	r3, r6, r5
 800b3be:	089b      	lsrs	r3, r3, #2
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800b3c0:	f842 5037 	str.w	r5, [r2, r7, lsl #3]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b3c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 800b3c8:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800b3cc:	6056      	str	r6, [r2, #4]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b3ce:	602b      	str	r3, [r5, #0]

    heap_count++;
 800b3d0:	7823      	ldrb	r3, [r4, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	7023      	strb	r3, [r4, #0]

    // Enable Interrupts
    target_enable_irq();
 800b3d6:	f7f5 faa3 	bl	8000920 <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 800b3da:	2000      	movs	r0, #0
 800b3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20001672 	.word	0x20001672
 800b3e4:	20001640 	.word	0x20001640

0800b3e8 <_Z16device_heap_sizeh>:

uint32_t device_heap_size(uint8_t heap_index)
{
    if (heap_index >= heap_count)
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <_Z16device_heap_sizeh+0x1c>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	4283      	cmp	r3, r0
 800b3ee:	d907      	bls.n	800b400 <_Z16device_heap_sizeh+0x18>
        return 0;    
    HeapDefinition *h = &heap[heap_index];
    return (uint8_t*)h->heap_end - (uint8_t*)h->heap_start;
 800b3f0:	4a05      	ldr	r2, [pc, #20]	; (800b408 <_Z16device_heap_sizeh+0x20>)
 800b3f2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 800b3fc:	1a18      	subs	r0, r3, r0
 800b3fe:	4770      	bx	lr
        return 0;    
 800b400:	2000      	movs	r0, #0
}
 800b402:	4770      	bx	lr
 800b404:	20001672 	.word	0x20001672
 800b408:	20001640 	.word	0x20001640

0800b40c <_Z16device_malloc_injR14HeapDefinition>:
  * @param heap The heap to allocate memory from.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void *device_malloc_in(size_t size, HeapDefinition &heap)
{
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blockSize = 0;
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800b40e:	0783      	lsls	r3, r0, #30
 800b410:	ea4f 0690 	mov.w	r6, r0, lsr #2
 800b414:	d134      	bne.n	800b480 <_Z16device_malloc_injR14HeapDefinition+0x74>
    PROCESSOR_WORD_TYPE	*block;
    PROCESSOR_WORD_TYPE	*next;

    if (size <= 0)
 800b416:	b188      	cbz	r0, 800b43c <_Z16device_malloc_injR14HeapDefinition+0x30>
 800b418:	460d      	mov	r5, r1
        return NULL;

    // Account for the index block;
    blocksNeeded++;
 800b41a:	1c77      	adds	r7, r6, #1

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800b41c:	f7f5 fa82 	bl	8000924 <target_disable_irq>

    // We implement a first fit algorithm with cache to handle rapid churn...
    // We also defragment free blocks as we search, to optimise this and future searches.
    block = heap.heap_start;
    while (block < heap.heap_end)
 800b420:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b424:	42a5      	cmp	r5, r4
 800b426:	d906      	bls.n	800b436 <_Z16device_malloc_injR14HeapDefinition+0x2a>
    {
        // If the block is used, then keep looking.
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	db07      	blt.n	800b43e <_Z16device_malloc_injR14HeapDefinition+0x32>
        {
            block += *block;
 800b42e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    while (block < heap.heap_end)
 800b432:	42a5      	cmp	r5, r4
 800b434:	d8f8      	bhi.n	800b428 <_Z16device_malloc_injR14HeapDefinition+0x1c>
    }

    // We're full!
    if (block >= heap.heap_end)
    {
        target_enable_irq();
 800b436:	f7f5 fa73 	bl	8000920 <target_enable_irq>
        return NULL;
 800b43a:	2000      	movs	r0, #0

    // Enable Interrupts
    target_enable_irq();

    return block+1;
}
 800b43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 800b43e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b442:	e007      	b.n	800b454 <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 800b444:	4285      	cmp	r5, r0
 800b446:	d90c      	bls.n	800b462 <_Z16device_malloc_injR14HeapDefinition+0x56>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 800b448:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b44c:	4413      	add	r3, r2
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 800b44e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b452:	6022      	str	r2, [r4, #0]
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b454:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
            next = block + blockSize;
 800b458:	0099      	lsls	r1, r3, #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b45a:	2a00      	cmp	r2, #0
            next = block + blockSize;
 800b45c:	eb04 0001 	add.w	r0, r4, r1
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b460:	dbf0      	blt.n	800b444 <_Z16device_malloc_injR14HeapDefinition+0x38>
        if (blockSize >= blocksNeeded)
 800b462:	429f      	cmp	r7, r3
 800b464:	d901      	bls.n	800b46a <_Z16device_malloc_injR14HeapDefinition+0x5e>
        block += blockSize;
 800b466:	440c      	add	r4, r1
 800b468:	e7dc      	b.n	800b424 <_Z16device_malloc_injR14HeapDefinition+0x18>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800b46a:	3602      	adds	r6, #2
 800b46c:	429e      	cmp	r6, r3
 800b46e:	d309      	bcc.n	800b484 <_Z16device_malloc_injR14HeapDefinition+0x78>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b476:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 800b478:	f7f5 fa52 	bl	8000920 <target_enable_irq>
    return block+1;
 800b47c:	1d20      	adds	r0, r4, #4
}
 800b47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800b480:	3601      	adds	r6, #1
 800b482:	e7c9      	b.n	800b418 <_Z16device_malloc_injR14HeapDefinition+0xc>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800b484:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b488:	42b5      	cmp	r5, r6
 800b48a:	d9f1      	bls.n	800b470 <_Z16device_malloc_injR14HeapDefinition+0x64>
        *splitBlock = blockSize - blocksNeeded;
 800b48c:	1bdb      	subs	r3, r3, r7
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 800b48e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b492:	f846 3c04 	str.w	r3, [r6, #-4]
        *block = blocksNeeded;
 800b496:	6027      	str	r7, [r4, #0]
 800b498:	e7ee      	b.n	800b478 <_Z16device_malloc_injR14HeapDefinition+0x6c>
 800b49a:	bf00      	nop

0800b49c <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 800b49c:	b538      	push	{r3, r4, r5, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
        return NULL;
 800b49e:	4604      	mov	r4, r0
    if (size <= 0)
 800b4a0:	b140      	cbz	r0, 800b4b4 <device_malloc+0x18>

    if (!initialised)
 800b4a2:	4d0c      	ldr	r5, [pc, #48]	; (800b4d4 <device_malloc+0x38>)
 800b4a4:	782b      	ldrb	r3, [r5, #0]
 800b4a6:	b13b      	cbz	r3, 800b4b8 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <device_malloc+0x3c>)
 800b4ac:	f7ff ffae 	bl	800b40c <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	b158      	cbz	r0, 800b4cc <device_malloc+0x30>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b4b8:	4908      	ldr	r1, [pc, #32]	; (800b4dc <device_malloc+0x40>)
        heap_count = 0;
 800b4ba:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <device_malloc+0x44>)
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b4bc:	6808      	ldr	r0, [r1, #0]
 800b4be:	4909      	ldr	r1, [pc, #36]	; (800b4e4 <device_malloc+0x48>)
        heap_count = 0;
 800b4c0:	7013      	strb	r3, [r2, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b4c2:	f7ff ff73 	bl	800b3ac <_Z18device_create_heapmm>
        initialised = 1;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	702b      	strb	r3, [r5, #0]
 800b4ca:	e7ed      	b.n	800b4a8 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 800b4cc:	2014      	movs	r0, #20
 800b4ce:	f7f5 fa3f 	bl	8000950 <target_panic>
    return NULL;
 800b4d2:	e7ef      	b.n	800b4b4 <device_malloc+0x18>
 800b4d4:	20001671 	.word	0x20001671
 800b4d8:	20001640 	.word	0x20001640
 800b4dc:	20000004 	.word	0x20000004
 800b4e0:	20001672 	.word	0x20001672
 800b4e4:	20004800 	.word	0x20004800

0800b4e8 <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 800b4e8:	b1a0      	cbz	r0, 800b514 <device_free+0x2c>

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	; (800b524 <device_free+0x3c>)
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	4282      	cmp	r2, r0
 800b4f0:	d20d      	bcs.n	800b50e <device_free+0x26>
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	4283      	cmp	r3, r0
 800b4f6:	d90a      	bls.n	800b50e <device_free+0x26>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800b4f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
 800b4fc:	b510      	push	{r4, lr}
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	4604      	mov	r4, r0
 800b502:	dd08      	ble.n	800b516 <device_free+0x2e>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 800b504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b508:	f844 3c04 	str.w	r3, [r4, #-4]
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
}
 800b50c:	bd10      	pop	{r4, pc}
    target_panic(DEVICE_HEAP_ERROR);
 800b50e:	201e      	movs	r0, #30
 800b510:	f7f5 ba1e 	b.w	8000950 <target_panic>
 800b514:	4770      	bx	lr
                target_panic(DEVICE_HEAP_ERROR);
 800b516:	201e      	movs	r0, #30
 800b518:	f7f5 fa1a 	bl	8000950 <target_panic>
 800b51c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b520:	e7f0      	b.n	800b504 <device_free+0x1c>
 800b522:	bf00      	nop
 800b524:	20001640 	.word	0x20001640

0800b528 <calloc>:

void* calloc (size_t num, size_t size)
{
 800b528:	b538      	push	{r3, r4, r5, lr}
    void *mem = malloc(num*size);
 800b52a:	fb01 f500 	mul.w	r5, r1, r0
 800b52e:	4628      	mov	r0, r5
 800b530:	f7fd ff86 	bl	8009440 <malloc>

    if (mem) {
 800b534:	4604      	mov	r4, r0
 800b536:	b128      	cbz	r0, 800b544 <calloc+0x1c>
        // without this write, GCC will happily optimize malloc() above into calloc()
        // and remove the memset
        ((uint32_t*)mem)[0] = 1;
 800b538:	2301      	movs	r3, #1
        memset(mem, 0, num*size);
 800b53a:	462a      	mov	r2, r5
        ((uint32_t*)mem)[0] = 1;
 800b53c:	6003      	str	r3, [r0, #0]
        memset(mem, 0, num*size);
 800b53e:	2100      	movs	r1, #0
 800b540:	f7f8 fb36 	bl	8003bb0 <memset>
    }

    return mem;
}
 800b544:	4620      	mov	r0, r4
 800b546:	bd38      	pop	{r3, r4, r5, pc}

0800b548 <device_realloc>:

extern "C" void* device_realloc (void* ptr, size_t size)
{
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	4604      	mov	r4, r0
    void *mem = malloc(size);
 800b54c:	4608      	mov	r0, r1
{
 800b54e:	460e      	mov	r6, r1
    void *mem = malloc(size);
 800b550:	f7fd ff76 	bl	8009440 <malloc>
 800b554:	4605      	mov	r5, r0

    // handle the simplest case - no previous memory allocted.
    if (ptr != NULL && mem != NULL)
 800b556:	b164      	cbz	r4, 800b572 <device_realloc+0x2a>
 800b558:	b158      	cbz	r0, 800b572 <device_realloc+0x2a>
    {

        // Otherwise we need to copy and free up the old data.
        PROCESSOR_WORD_TYPE *cb = ((PROCESSOR_WORD_TYPE *)ptr) - 1;
        PROCESSOR_WORD_TYPE blockSize = *cb & ~DEVICE_HEAP_BLOCK_FREE;
 800b55a:	f854 2c04 	ldr.w	r2, [r4, #-4]

        memcpy(mem, ptr, min(blockSize * sizeof(PROCESSOR_WORD_TYPE), size));
 800b55e:	4621      	mov	r1, r4
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	42b2      	cmp	r2, r6
 800b564:	bfa8      	it	ge
 800b566:	4632      	movge	r2, r6
 800b568:	f7f8 fada 	bl	8003b20 <memcpy>
        free(ptr);
 800b56c:	4620      	mov	r0, r4
 800b56e:	f7fd fe8f 	bl	8009290 <free>
    }

    return mem;
}
 800b572:	4628      	mov	r0, r5
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	bf00      	nop

0800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 800b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	4604      	mov	r4, r0
 800b57e:	3010      	adds	r0, #16
 800b580:	4688      	mov	r8, r1
 800b582:	4617      	mov	r7, r2
 800b584:	461e      	mov	r6, r3
 800b586:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800b58a:	f000 fc81 	bl	800be90 <_ZN5codal5EventC1Ev>
{
	this->id = id;
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 800b58e:	2000      	movs	r0, #0
	this->id = id;
 800b590:	f8a4 8000 	strh.w	r8, [r4]
	this->cb_arg = NULL;
 800b594:	60e0      	str	r0, [r4, #12]
    this->flags = flags;
	this->next = NULL;
    this->evt_queue = NULL;
 800b596:	e9c4 0006 	strd	r0, r0, [r4, #24]
	this->value = value;
 800b59a:	8067      	strh	r7, [r4, #2]
	this->cb = handler;
 800b59c:	60a6      	str	r6, [r4, #8]
    this->flags = flags;
 800b59e:	80a5      	strh	r5, [r4, #4]
}
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a6:	bf00      	nop

0800b5a8 <_ZN5codal8ListenerD1Ev>:
/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b5a8:	8883      	ldrh	r3, [r0, #4]
Listener::~Listener()
 800b5aa:	b510      	push	{r4, lr}
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b5ac:	079b      	lsls	r3, r3, #30
Listener::~Listener()
 800b5ae:	4604      	mov	r4, r0
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b5b0:	d502      	bpl.n	800b5b8 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
 800b5b2:	6880      	ldr	r0, [r0, #8]
 800b5b4:	f7f8 fcce 	bl	8003f54 <_ZdlPv>
}
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	4604      	mov	r4, r0
    int queueDepth;

    EventQueueItem *p = evt_queue;
 800b5c2:	6983      	ldr	r3, [r0, #24]
{
 800b5c4:	4668      	mov	r0, sp
 800b5c6:	e880 0006 	stmia.w	r0, {r1, r2}

    if (evt_queue == NULL)
 800b5ca:	b1e3      	cbz	r3, 800b606 <_ZN5codal8Listener5queueENS_5EventE+0x4a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800b5cc:	689c      	ldr	r4, [r3, #8]
 800b5ce:	b154      	cbz	r4, 800b5e6 <_ZN5codal8Listener5queueENS_5EventE+0x2a>
        queueDepth = 1;
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	e000      	b.n	800b5d6 <_ZN5codal8Listener5queueENS_5EventE+0x1a>
 800b5d4:	461c      	mov	r4, r3
        while (p->next != NULL)
 800b5d6:	68a3      	ldr	r3, [r4, #8]
        {
            p = p->next;
            queueDepth++;
 800b5d8:	3201      	adds	r2, #1
        while (p->next != NULL)
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1fa      	bne.n	800b5d4 <_ZN5codal8Listener5queueENS_5EventE+0x18>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800b5de:	2a09      	cmp	r2, #9
 800b5e0:	dd02      	ble.n	800b5e8 <_ZN5codal8Listener5queueENS_5EventE+0x2c>
            p->next = new EventQueueItem(e);
    }
}
 800b5e2:	b004      	add	sp, #16
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
        while (p->next != NULL)
 800b5e6:	461c      	mov	r4, r3
            p->next = new EventQueueItem(e);
 800b5e8:	c803      	ldmia	r0, {r0, r1}
 800b5ea:	ad02      	add	r5, sp, #8
 800b5ec:	e885 0003 	stmia.w	r5, {r0, r1}
 800b5f0:	200c      	movs	r0, #12
 800b5f2:	f7f8 fcad 	bl	8003f50 <_Znwj>
 800b5f6:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	f000 fc52 	bl	800bea4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800b600:	60a6      	str	r6, [r4, #8]
}
 800b602:	b004      	add	sp, #16
 800b604:	bd70      	pop	{r4, r5, r6, pc}
        evt_queue = new EventQueueItem(e);
 800b606:	ad02      	add	r5, sp, #8
 800b608:	c803      	ldmia	r0, {r0, r1}
 800b60a:	e885 0005 	stmia.w	r5, {r0, r2}
 800b60e:	200c      	movs	r0, #12
 800b610:	f7f8 fc9e 	bl	8003f50 <_Znwj>
 800b614:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b618:	4606      	mov	r6, r0
 800b61a:	f000 fc43 	bl	800bea4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800b61e:	61a6      	str	r6, [r4, #24]
}
 800b620:	b004      	add	sp, #16
 800b622:	bd70      	pop	{r4, r5, r6, pc}

0800b624 <_ZN5codal5Timer17disableInterruptsEv>:
    syncRequest();
    return currentTimeUs;
}

int Timer::disableInterrupts()
{
 800b624:	b508      	push	{r3, lr}
    target_disable_irq();
 800b626:	f7f5 f97d 	bl	8000924 <target_disable_irq>
    return DEVICE_OK;
}
 800b62a:	2000      	movs	r0, #0
 800b62c:	bd08      	pop	{r3, pc}
 800b62e:	bf00      	nop

0800b630 <_ZN5codal5Timer16enableInterruptsEv>:

int Timer::enableInterrupts()
{
 800b630:	b508      	push	{r3, lr}
    target_enable_irq();
 800b632:	f7f5 f975 	bl	8000920 <target_enable_irq>
    return DEVICE_OK;
}
 800b636:	2000      	movs	r0, #0
 800b638:	bd08      	pop	{r3, pc}
 800b63a:	bf00      	nop

0800b63c <_ZN5codal5TimerC1Ev>:
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800b63c:	220a      	movs	r2, #10
Timer::Timer()
 800b63e:	b510      	push	{r4, lr}
 800b640:	4604      	mov	r4, r0
 800b642:	4908      	ldr	r1, [pc, #32]	; (800b664 <_ZN5codal5TimerC1Ev+0x28>)
    system_timer = this;
 800b644:	4b08      	ldr	r3, [pc, #32]	; (800b668 <_ZN5codal5TimerC1Ev+0x2c>)
Timer::Timer()
 800b646:	6001      	str	r1, [r0, #0]
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800b648:	6182      	str	r2, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800b64a:	2101      	movs	r1, #1
 800b64c:	2078      	movs	r0, #120	; 0x78
    system_timer = this;
 800b64e:	601c      	str	r4, [r3, #0]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800b650:	f7ff ff6a 	bl	800b528 <calloc>
    nextTimerEvent = NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	e9c4 0304 	strd	r0, r3, [r4, #16]
    currentTimeUs = 0;
 800b65a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 800b65e:	4620      	mov	r0, r4
 800b660:	bd10      	pop	{r4, pc}
 800b662:	bf00      	nop
 800b664:	0800d250 	.word	0x0800d250
 800b668:	20001648 	.word	0x20001648

0800b66c <_ZN5codal5Timer8setEventEmttb>:

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
 800b66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i=0; i<eventListSize; i++)
 800b670:	f8d0 c018 	ldr.w	ip, [r0, #24]
{
 800b674:	f89d 8020 	ldrb.w	r8, [sp, #32]
    for (int i=0; i<eventListSize; i++)
 800b678:	f1bc 0f00 	cmp.w	ip, #0
 800b67c:	dd0d      	ble.n	800b69a <_ZN5codal5Timer8setEventEmttb+0x2e>
        if (timerEventList[i].id == 0)
 800b67e:	6906      	ldr	r6, [r0, #16]
 800b680:	8834      	ldrh	r4, [r6, #0]
 800b682:	b174      	cbz	r4, 800b6a2 <_ZN5codal5Timer8setEventEmttb+0x36>
 800b684:	4634      	mov	r4, r6
    for (int i=0; i<eventListSize; i++)
 800b686:	2500      	movs	r5, #0
 800b688:	e002      	b.n	800b690 <_ZN5codal5Timer8setEventEmttb+0x24>
        if (timerEventList[i].id == 0)
 800b68a:	8827      	ldrh	r7, [r4, #0]
 800b68c:	4626      	mov	r6, r4
 800b68e:	b147      	cbz	r7, 800b6a2 <_ZN5codal5Timer8setEventEmttb+0x36>
    for (int i=0; i<eventListSize; i++)
 800b690:	3501      	adds	r5, #1
 800b692:	4565      	cmp	r5, ip
 800b694:	f104 040c 	add.w	r4, r4, #12
 800b698:	d1f7      	bne.n	800b68a <_ZN5codal5Timer8setEventEmttb+0x1e>
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;
 800b69a:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
    }

    enableInterrupts();

    return DEVICE_OK;
}
 800b69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	461f      	mov	r7, r3
    syncRequest();
 800b6a8:	6803      	ldr	r3, [r0, #0]
 800b6aa:	4691      	mov	r9, r2
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	4798      	blx	r3
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800b6b0:	f1b8 0f00 	cmp.w	r8, #0
 800b6b4:	bf14      	ite	ne
 800b6b6:	4628      	movne	r0, r5
 800b6b8:	2000      	moveq	r0, #0
    disableInterrupts();
 800b6ba:	6822      	ldr	r2, [r4, #0]
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800b6bc:	68a3      	ldr	r3, [r4, #8]
    disableInterrupts();
 800b6be:	68d1      	ldr	r1, [r2, #12]
 800b6c0:	4a16      	ldr	r2, [pc, #88]	; (800b71c <_ZN5codal5Timer8setEventEmttb+0xb0>)
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800b6c2:	442b      	add	r3, r5
 800b6c4:	4291      	cmp	r1, r2
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 800b6c6:	e9c6 0301 	strd	r0, r3, [r6, #4]
            this->period = period;
            this->id = id;
 800b6ca:	f8a6 9000 	strh.w	r9, [r6]
            this->value = value;
 800b6ce:	8077      	strh	r7, [r6, #2]
 800b6d0:	d121      	bne.n	800b716 <_ZN5codal5Timer8setEventEmttb+0xaa>
    target_disable_irq();
 800b6d2:	f7f5 f927 	bl	8000924 <target_disable_irq>
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800b6d6:	6963      	ldr	r3, [r4, #20]
 800b6d8:	b16b      	cbz	r3, 800b6f6 <_ZN5codal5Timer8setEventEmttb+0x8a>
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	68b2      	ldr	r2, [r6, #8]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d309      	bcc.n	800b6f6 <_ZN5codal5Timer8setEventEmttb+0x8a>
    enableInterrupts();
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	4a0e      	ldr	r2, [pc, #56]	; (800b720 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d10f      	bne.n	800b70c <_ZN5codal5Timer8setEventEmttb+0xa0>
    target_enable_irq();
 800b6ec:	f7f5 f918 	bl	8000920 <target_enable_irq>
    return DEVICE_OK;
 800b6f0:	2000      	movs	r0, #0
}
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        triggerIn(period);
 800b6f6:	6823      	ldr	r3, [r4, #0]
        nextTimerEvent = evt;
 800b6f8:	6166      	str	r6, [r4, #20]
        triggerIn(period);
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4620      	mov	r0, r4
 800b700:	4798      	blx	r3
    enableInterrupts();
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	4a06      	ldr	r2, [pc, #24]	; (800b720 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	4293      	cmp	r3, r2
 800b70a:	d0ef      	beq.n	800b6ec <_ZN5codal5Timer8setEventEmttb+0x80>
 800b70c:	4620      	mov	r0, r4
 800b70e:	4798      	blx	r3
    return DEVICE_OK;
 800b710:	2000      	movs	r0, #0
}
 800b712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    disableInterrupts();
 800b716:	4620      	mov	r0, r4
 800b718:	4788      	blx	r1
 800b71a:	e7dc      	b.n	800b6d6 <_ZN5codal5Timer8setEventEmttb+0x6a>
 800b71c:	0800b625 	.word	0x0800b625
 800b720:	0800b631 	.word	0x0800b631

0800b724 <_ZN5codal5Timer4syncEm>:
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;
 800b724:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
    currentTimeUs += t;
 800b728:	440b      	add	r3, r1
    overflow += t;
 800b72a:	4411      	add	r1, r2

    while(overflow >= 1000)
 800b72c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    overflow += t;
 800b730:	e9c0 3102 	strd	r3, r1, [r0, #8]
    while(overflow >= 1000)
 800b734:	d309      	bcc.n	800b74a <_ZN5codal5Timer4syncEm+0x26>
 800b736:	6843      	ldr	r3, [r0, #4]
    {
        overflow -= 1000;
 800b738:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    while(overflow >= 1000)
 800b73c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        currentTime += 1;
 800b740:	f103 0301 	add.w	r3, r3, #1
    while(overflow >= 1000)
 800b744:	d2f8      	bcs.n	800b738 <_ZN5codal5Timer4syncEm+0x14>
 800b746:	60c1      	str	r1, [r0, #12]
 800b748:	6043      	str	r3, [r0, #4]
    }
}
 800b74a:	4770      	bx	lr

0800b74c <_ZN5codal5Timer7triggerEv>:

/**
 * Callback from physical timer implementation code.
 */
void Timer::trigger()
{
 800b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b750:	4606      	mov	r6, r0
        {
            if (e->id != 0 && currentTimeUs >= e->timestamp)
            {
                // We need to trigger this event.
#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
                Event evt(e->id, e->value, currentTime);
 800b752:	f04f 0801 	mov.w	r8, #1
    syncRequest();
 800b756:	6803      	ldr	r3, [r0, #0]
{
 800b758:	b084      	sub	sp, #16
    syncRequest();
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4798      	blx	r3
 800b75e:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800b760:	2b00      	cmp	r3, #0
        TimerEvent *e = timerEventList;
 800b762:	6934      	ldr	r4, [r6, #16]
        for (int i=0; i<eventListSize; i++)
 800b764:	dd4c      	ble.n	800b800 <_ZN5codal5Timer7triggerEv+0xb4>
 800b766:	2500      	movs	r5, #0
        eventsFired = 0;
 800b768:	462f      	mov	r7, r5
 800b76a:	e004      	b.n	800b776 <_ZN5codal5Timer7triggerEv+0x2a>
        for (int i=0; i<eventListSize; i++)
 800b76c:	3501      	adds	r5, #1
 800b76e:	42ab      	cmp	r3, r5
                    e->timestamp += e->period;

                // TODO: Handle rollover case above...
                eventsFired++;
            }
            e++;
 800b770:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800b774:	dd1c      	ble.n	800b7b0 <_ZN5codal5Timer7triggerEv+0x64>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 800b776:	8821      	ldrh	r1, [r4, #0]
 800b778:	2900      	cmp	r1, #0
 800b77a:	d0f7      	beq.n	800b76c <_ZN5codal5Timer7triggerEv+0x20>
 800b77c:	68b0      	ldr	r0, [r6, #8]
 800b77e:	68a2      	ldr	r2, [r4, #8]
 800b780:	4290      	cmp	r0, r2
 800b782:	d3f3      	bcc.n	800b76c <_ZN5codal5Timer7triggerEv+0x20>
                Event evt(e->id, e->value, currentTime);
 800b784:	6873      	ldr	r3, [r6, #4]
 800b786:	8862      	ldrh	r2, [r4, #2]
 800b788:	a802      	add	r0, sp, #8
 800b78a:	f8cd 8000 	str.w	r8, [sp]
 800b78e:	f000 fb73 	bl	800be78 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d12f      	bne.n	800b7f8 <_ZN5codal5Timer7triggerEv+0xac>
    if (nextTimerEvent == event)
 800b798:	6972      	ldr	r2, [r6, #20]
    event->id = 0;
 800b79a:	8023      	strh	r3, [r4, #0]
    if (nextTimerEvent == event)
 800b79c:	42a2      	cmp	r2, r4
 800b79e:	d034      	beq.n	800b80a <_ZN5codal5Timer7triggerEv+0xbe>
 800b7a0:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	42ab      	cmp	r3, r5
                eventsFired++;
 800b7a6:	f107 0701 	add.w	r7, r7, #1
            e++;
 800b7aa:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800b7ae:	dce2      	bgt.n	800b776 <_ZN5codal5Timer7triggerEv+0x2a>
        }

    } while (eventsFired);
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	d1d5      	bne.n	800b760 <_ZN5codal5Timer7triggerEv+0x14>
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800b7b4:	2b00      	cmp	r3, #0
    nextTimerEvent = NULL;
 800b7b6:	6177      	str	r7, [r6, #20]
    TimerEvent *e = timerEventList;
 800b7b8:	6932      	ldr	r2, [r6, #16]
    for (int i=0; i<eventListSize; i++)
 800b7ba:	dd23      	ble.n	800b804 <_ZN5codal5Timer7triggerEv+0xb8>
 800b7bc:	4638      	mov	r0, r7
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800b7be:	8811      	ldrh	r1, [r2, #0]
    for (int i=0; i<eventListSize; i++)
 800b7c0:	3701      	adds	r7, #1
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800b7c2:	b131      	cbz	r1, 800b7d2 <_ZN5codal5Timer7triggerEv+0x86>
 800b7c4:	b118      	cbz	r0, 800b7ce <_ZN5codal5Timer7triggerEv+0x82>
 800b7c6:	6894      	ldr	r4, [r2, #8]
 800b7c8:	6881      	ldr	r1, [r0, #8]
 800b7ca:	428c      	cmp	r4, r1
 800b7cc:	d201      	bcs.n	800b7d2 <_ZN5codal5Timer7triggerEv+0x86>
            nextTimerEvent = e;
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	6172      	str	r2, [r6, #20]
    for (int i=0; i<eventListSize; i++)
 800b7d2:	42bb      	cmp	r3, r7
        e++;
 800b7d4:	f102 020c 	add.w	r2, r2, #12
    for (int i=0; i<eventListSize; i++)
 800b7d8:	d1f1      	bne.n	800b7be <_ZN5codal5Timer7triggerEv+0x72>
    }

    if (nextTimerEvent) {
 800b7da:	b198      	cbz	r0, 800b804 <_ZN5codal5Timer7triggerEv+0xb8>
        // this may possibly happen if a new timer event was added to the queue while
        // we were running - it might be already in the past
        if (currentTimeUs < nextTimerEvent->timestamp)
 800b7dc:	6881      	ldr	r1, [r0, #8]
 800b7de:	68b3      	ldr	r3, [r6, #8]
 800b7e0:	6832      	ldr	r2, [r6, #0]
 800b7e2:	428b      	cmp	r3, r1
 800b7e4:	6812      	ldr	r2, [r2, #0]
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 800b7e6:	bf39      	ittee	cc
 800b7e8:	1ac9      	subcc	r1, r1, r3
 800b7ea:	4630      	movcc	r0, r6
        else
            triggerIn(1);
 800b7ec:	4630      	movcs	r0, r6
 800b7ee:	2101      	movcs	r1, #1
 800b7f0:	4790      	blx	r2
    }
}
 800b7f2:	b004      	add	sp, #16
 800b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    e->timestamp += e->period;
 800b7f8:	68a2      	ldr	r2, [r4, #8]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	60a3      	str	r3, [r4, #8]
 800b7fe:	e7cf      	b.n	800b7a0 <_ZN5codal5Timer7triggerEv+0x54>
    nextTimerEvent = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	6173      	str	r3, [r6, #20]
}
 800b804:	b004      	add	sp, #16
 800b806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nextTimerEvent = NULL;
 800b80a:	6173      	str	r3, [r6, #20]
 800b80c:	e7c8      	b.n	800b7a0 <_ZN5codal5Timer7triggerEv+0x54>
 800b80e:	bf00      	nop

0800b810 <_ZN5codal5TimerD1Ev>:
/**
 * Destructor for this Timer instance
 */
Timer::~Timer()
{
}
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop

0800b814 <_ZN5codal25system_timer_current_timeEv>:
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <_ZN5codal25system_timer_current_timeEv+0x18>)
{
 800b816:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800b818:	681c      	ldr	r4, [r3, #0]
 800b81a:	b12c      	cbz	r4, 800b828 <_ZN5codal25system_timer_current_timeEv+0x14>
    syncRequest();
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	4620      	mov	r0, r4
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	4798      	blx	r3
    return currentTime;
 800b824:	6860      	ldr	r0, [r4, #4]
        return 0;

    return system_timer->getTime();
}
 800b826:	bd10      	pop	{r4, pc}
        return 0;
 800b828:	4620      	mov	r0, r4
}
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	20001648 	.word	0x20001648

0800b830 <_ZN5codal28system_timer_current_time_usEv>:
  *
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
    if(system_timer == NULL)
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <_ZN5codal28system_timer_current_time_usEv+0x18>)
{
 800b832:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800b834:	681c      	ldr	r4, [r3, #0]
 800b836:	b12c      	cbz	r4, 800b844 <_ZN5codal28system_timer_current_time_usEv+0x14>
    syncRequest();
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	4620      	mov	r0, r4
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4798      	blx	r3
    return currentTimeUs;
 800b840:	68a0      	ldr	r0, [r4, #8]
        return 0;

    return system_timer->getTimeUs();
}
 800b842:	bd10      	pop	{r4, pc}
        return 0;
 800b844:	4620      	mov	r0, r4
}
 800b846:	bd10      	pop	{r4, pc}
 800b848:	20001648 	.word	0x20001648

0800b84c <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 800b84c:	b530      	push	{r4, r5, lr}
    if(system_timer == NULL)
 800b84e:	4b08      	ldr	r3, [pc, #32]	; (800b870 <_ZN5codal27system_timer_event_every_usEmtt+0x24>)
{
 800b850:	b083      	sub	sp, #12
    if(system_timer == NULL)
 800b852:	681c      	ldr	r4, [r3, #0]
 800b854:	b14c      	cbz	r4, 800b86a <_ZN5codal27system_timer_event_every_usEmtt+0x1e>
    return setEvent(period, id, value, true);
 800b856:	2501      	movs	r5, #1
 800b858:	4613      	mov	r3, r2
 800b85a:	9500      	str	r5, [sp, #0]
 800b85c:	460a      	mov	r2, r1
 800b85e:	4601      	mov	r1, r0
 800b860:	4620      	mov	r0, r4
 800b862:	f7ff ff03 	bl	800b66c <_ZN5codal5Timer8setEventEmttb>
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
}
 800b866:	b003      	add	sp, #12
 800b868:	bd30      	pop	{r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 800b86a:	4802      	ldr	r0, [pc, #8]	; (800b874 <_ZN5codal27system_timer_event_every_usEmtt+0x28>)
 800b86c:	e7fb      	b.n	800b866 <_ZN5codal27system_timer_event_every_usEmtt+0x1a>
 800b86e:	bf00      	nop
 800b870:	20001648 	.word	0x20001648
 800b874:	fffffc16 	.word	0xfffffc16

0800b878 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 800b878:	b082      	sub	sp, #8
        }
 800b87a:	4803      	ldr	r0, [pc, #12]	; (800b888 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
        virtual int send(Event)
 800b87c:	ab02      	add	r3, sp, #8
 800b87e:	e903 0006 	stmdb	r3, {r1, r2}
        }
 800b882:	b002      	add	sp, #8
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	fffffc16 	.word	0xfffffc16

0800b88c <_ZN5codal10MessageBus9elementAtEi>:
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800b88c:	2900      	cmp	r1, #0
    Listener *l = listeners;
 800b88e:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 800b890:	dd05      	ble.n	800b89e <_ZN5codal10MessageBus9elementAtEi+0x12>
    {
        if (l == NULL)
 800b892:	b908      	cbnz	r0, 800b898 <_ZN5codal10MessageBus9elementAtEi+0xc>
 800b894:	e004      	b.n	800b8a0 <_ZN5codal10MessageBus9elementAtEi+0x14>
 800b896:	b110      	cbz	r0, 800b89e <_ZN5codal10MessageBus9elementAtEi+0x12>
    while (n > 0)
 800b898:	3901      	subs	r1, #1
            return NULL;

        n--;
        l = l->next;
 800b89a:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 800b89c:	d1fb      	bne.n	800b896 <_ZN5codal10MessageBus9elementAtEi+0xa>
    }

    return l;
}
 800b89e:	4770      	bx	lr
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop

0800b8a4 <_ZN5codal14CodalComponentD1Ev>:
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800b8a4:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	4604      	mov	r4, r0
        {
 800b8aa:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <_ZN5codal14CodalComponentD1Ev+0x14>)
            status = 0;
 800b8ac:	80c2      	strh	r2, [r0, #6]
        {
 800b8ae:	6003      	str	r3, [r0, #0]
            removeComponent();
 800b8b0:	f7fe ffac 	bl	800a80c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	bd10      	pop	{r4, pc}
 800b8b8:	0800d268 	.word	0x0800d268

0800b8bc <_ZN5codal14CodalComponentD0Ev>:
            status = 0;
 800b8bc:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	4604      	mov	r4, r0
        {
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <_ZN5codal14CodalComponentD0Ev+0x1c>)
            status = 0;
 800b8c4:	80c2      	strh	r2, [r0, #6]
        {
 800b8c6:	6003      	str	r3, [r0, #0]
            removeComponent();
 800b8c8:	f7fe ffa0 	bl	800a80c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7f8 fb41 	bl	8003f54 <_ZdlPv>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	bd10      	pop	{r4, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800d268 	.word	0x0800d268

0800b8dc <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b8dc:	b470      	push	{r4, r5, r6}
 800b8de:	460c      	mov	r4, r1
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	4606      	mov	r6, r0
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 800b8e4:	6849      	ldr	r1, [r1, #4]
 800b8e6:	6820      	ldr	r0, [r4, #0]
 800b8e8:	ac02      	add	r4, sp, #8
 800b8ea:	c403      	stmia	r4!, {r0, r1}
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b8ec:	4669      	mov	r1, sp

        (o->*m)(e);
 800b8ee:	9c03      	ldr	r4, [sp, #12]
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800b8f0:	e881 000c 	stmia.w	r1, {r2, r3}
        (o->*m)(e);
 800b8f4:	1065      	asrs	r5, r4, #1
 800b8f6:	07e3      	lsls	r3, r4, #31
 800b8f8:	bf45      	ittet	mi
 800b8fa:	5972      	ldrmi	r2, [r6, r5]
 800b8fc:	9b02      	ldrmi	r3, [sp, #8]
 800b8fe:	9b02      	ldrpl	r3, [sp, #8]
 800b900:	58d3      	ldrmi	r3, [r2, r3]
 800b902:	1970      	adds	r0, r6, r5
 800b904:	c906      	ldmia	r1, {r1, r2}
    }
 800b906:	b005      	add	sp, #20
 800b908:	bc70      	pop	{r4, r5, r6}
        (o->*m)(e);
 800b90a:	4718      	bx	r3

0800b90c <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 800b90c:	2900      	cmp	r1, #0
 800b90e:	d03a      	beq.n	800b986 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x7a>
{
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    l = listeners;
 800b912:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800b914:	2c00      	cmp	r4, #0
 800b916:	d033      	beq.n	800b980 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
 800b918:	460d      	mov	r5, r1
    int removed = 0;
 800b91a:	2700      	movs	r7, #0
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b91c:	4e1b      	ldr	r6, [pc, #108]	; (800b98c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x80>)
 800b91e:	e005      	b.n	800b92c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800b920:	68a2      	ldr	r2, [r4, #8]
 800b922:	68ab      	ldr	r3, [r5, #8]
 800b924:	429a      	cmp	r2, r3
 800b926:	d00d      	beq.n	800b944 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x38>
        l = l->next;
 800b928:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b92a:	b1b4      	cbz	r4, 800b95a <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x4e>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 800b92c:	88aa      	ldrh	r2, [r5, #4]
 800b92e:	88a3      	ldrh	r3, [r4, #4]
 800b930:	4053      	eors	r3, r2
 800b932:	0799      	lsls	r1, r3, #30
 800b934:	d4f8      	bmi.n	800b928 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800b936:	0792      	lsls	r2, r2, #30
 800b938:	d5f2      	bpl.n	800b920 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
 800b93a:	68a9      	ldr	r1, [r5, #8]
 800b93c:	68a0      	ldr	r0, [r4, #8]
 800b93e:	f000 fad1 	bl	800bee4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800b942:	b178      	cbz	r0, 800b964 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x58>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800b944:	882b      	ldrh	r3, [r5, #0]
 800b946:	b98b      	cbnz	r3, 800b96c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x60>
 800b948:	886b      	ldrh	r3, [r5, #2]
 800b94a:	b9ab      	cbnz	r3, 800b978 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6c>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b94c:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 800b94e:	3701      	adds	r7, #1
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800b950:	4333      	orrs	r3, r6
 800b952:	80a3      	strh	r3, [r4, #4]
        l = l->next;
 800b954:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b956:	2c00      	cmp	r4, #0
 800b958:	d1e8      	bne.n	800b92c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
    if (removed > 0)
 800b95a:	2f00      	cmp	r7, #0
        return DEVICE_OK;
 800b95c:	bfc8      	it	gt
 800b95e:	4620      	movgt	r0, r4
    if (removed > 0)
 800b960:	dd0e      	ble.n	800b980 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
}
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800b964:	88ab      	ldrh	r3, [r5, #4]
 800b966:	079b      	lsls	r3, r3, #30
 800b968:	d4de      	bmi.n	800b928 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b96a:	e7d9      	b.n	800b920 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800b96c:	8822      	ldrh	r2, [r4, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d1da      	bne.n	800b928 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b972:	886b      	ldrh	r3, [r5, #2]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0e9      	beq.n	800b94c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
 800b978:	8862      	ldrh	r2, [r4, #2]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d1d4      	bne.n	800b928 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800b97e:	e7e5      	b.n	800b94c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
        return DEVICE_INVALID_PARAMETER;
 800b980:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 800b986:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b98a:	4770      	bx	lr
 800b98c:	ffff8000 	.word	0xffff8000

0800b990 <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
    if (newListener == NULL)
 800b990:	2900      	cmp	r1, #0
 800b992:	d06b      	beq.n	800ba6c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xdc>
{
 800b994:	b5f0      	push	{r4, r5, r6, r7, lr}
    l = listeners;
 800b996:	6944      	ldr	r4, [r0, #20]
{
 800b998:	b083      	sub	sp, #12
 800b99a:	460d      	mov	r5, r1
 800b99c:	4606      	mov	r6, r0
    while (l != NULL)
 800b99e:	b93c      	cbnz	r4, 800b9b0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
 800b9a0:	e060      	b.n	800ba64 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd4>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800b9a2:	88a3      	ldrh	r3, [r4, #4]
 800b9a4:	0798      	lsls	r0, r3, #30
 800b9a6:	d508      	bpl.n	800b9ba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x2a>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b9a8:	4291      	cmp	r1, r2
 800b9aa:	d012      	beq.n	800b9d2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
        l = l->next;
 800b9ac:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b9ae:	b1cc      	cbz	r4, 800b9e4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x54>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800b9b0:	88ab      	ldrh	r3, [r5, #4]
 800b9b2:	6821      	ldr	r1, [r4, #0]
 800b9b4:	079f      	lsls	r7, r3, #30
 800b9b6:	682a      	ldr	r2, [r5, #0]
 800b9b8:	d4f3      	bmi.n	800b9a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b9ba:	4291      	cmp	r1, r2
 800b9bc:	d1f6      	bne.n	800b9ac <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
 800b9be:	68a2      	ldr	r2, [r4, #8]
 800b9c0:	68ab      	ldr	r3, [r5, #8]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d1f2      	bne.n	800b9ac <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800b9c6:	88a3      	ldrh	r3, [r4, #4]
 800b9c8:	041a      	lsls	r2, r3, #16
 800b9ca:	d447      	bmi.n	800ba5c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xcc>
            return DEVICE_NOT_SUPPORTED;
 800b9cc:	4829      	ldr	r0, [pc, #164]	; (800ba74 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
}
 800b9ce:	b003      	add	sp, #12
 800b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800b9d2:	68a9      	ldr	r1, [r5, #8]
 800b9d4:	68a0      	ldr	r0, [r4, #8]
 800b9d6:	f000 fa85 	bl	800bee4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d1f3      	bne.n	800b9c6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
        l = l->next;
 800b9de:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800b9e0:	2c00      	cmp	r4, #0
 800b9e2:	d1e5      	bne.n	800b9b0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
    if (listeners == NULL)
 800b9e4:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800b9e8:	882a      	ldrh	r2, [r5, #0]
 800b9ea:	f1bc 0f00 	cmp.w	ip, #0
 800b9ee:	d033      	beq.n	800ba58 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
 800b9f0:	4664      	mov	r4, ip
 800b9f2:	4663      	mov	r3, ip
 800b9f4:	e000      	b.n	800b9f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x68>
 800b9f6:	460b      	mov	r3, r1
    while (l != NULL && l->id < newListener->id)
 800b9f8:	8818      	ldrh	r0, [r3, #0]
 800b9fa:	4290      	cmp	r0, r2
 800b9fc:	d211      	bcs.n	800ba22 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
        l = l->next;
 800b9fe:	69d9      	ldr	r1, [r3, #28]
 800ba00:	461c      	mov	r4, r3
    while (l != NULL && l->id < newListener->id)
 800ba02:	2900      	cmp	r1, #0
 800ba04:	d1f7      	bne.n	800b9f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x66>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800ba06:	4563      	cmp	r3, ip
 800ba08:	d01d      	beq.n	800ba46 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb6>
        newListener->next = p->next;
 800ba0a:	69d9      	ldr	r1, [r3, #28]
 800ba0c:	61e9      	str	r1, [r5, #28]
        p->next = newListener;
 800ba0e:	61dd      	str	r5, [r3, #28]
    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800ba10:	2301      	movs	r3, #1
 800ba12:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800ba16:	4668      	mov	r0, sp
 800ba18:	f000 fa20 	bl	800be5c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800ba1c:	2000      	movs	r0, #0
}
 800ba1e:	b003      	add	sp, #12
 800ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800ba22:	d121      	bne.n	800ba68 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800ba24:	886f      	ldrh	r7, [r5, #2]
 800ba26:	8859      	ldrh	r1, [r3, #2]
 800ba28:	42b9      	cmp	r1, r7
 800ba2a:	d304      	bcc.n	800ba36 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa6>
 800ba2c:	e01c      	b.n	800ba68 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800ba2e:	884c      	ldrh	r4, [r1, #2]
 800ba30:	42bc      	cmp	r4, r7
 800ba32:	d2e8      	bcs.n	800ba06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800ba34:	460b      	mov	r3, r1
        l = l->next;
 800ba36:	69d9      	ldr	r1, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	d0e4      	beq.n	800ba06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800ba3c:	880c      	ldrh	r4, [r1, #0]
 800ba3e:	4284      	cmp	r4, r0
 800ba40:	d0f5      	beq.n	800ba2e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x9e>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800ba42:	4563      	cmp	r3, ip
 800ba44:	d1e1      	bne.n	800ba0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800ba46:	8819      	ldrh	r1, [r3, #0]
 800ba48:	428a      	cmp	r2, r1
 800ba4a:	d304      	bcc.n	800ba56 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
 800ba4c:	d1dd      	bne.n	800ba0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800ba4e:	8858      	ldrh	r0, [r3, #2]
 800ba50:	8869      	ldrh	r1, [r5, #2]
 800ba52:	4288      	cmp	r0, r1
 800ba54:	d9d9      	bls.n	800ba0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
        newListener->next = p;
 800ba56:	61eb      	str	r3, [r5, #28]
        listeners = newListener;
 800ba58:	6175      	str	r5, [r6, #20]
 800ba5a:	e7d9      	b.n	800ba10 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x80>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 800ba5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ba60:	80a3      	strh	r3, [r4, #4]
 800ba62:	e7b3      	b.n	800b9cc <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3c>
 800ba64:	880a      	ldrh	r2, [r1, #0]
 800ba66:	e7f7      	b.n	800ba58 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800ba68:	4623      	mov	r3, r4
 800ba6a:	e7cc      	b.n	800ba06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
        return DEVICE_INVALID_PARAMETER;
 800ba6c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	fffffc16 	.word	0xfffffc16

0800ba78 <_Z14async_callbackPv>:
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800ba78:	8883      	ldrh	r3, [r0, #4]
{
 800ba7a:	b570      	push	{r4, r5, r6, lr}
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800ba7c:	075a      	lsls	r2, r3, #29
{
 800ba7e:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800ba80:	d503      	bpl.n	800ba8a <_Z14async_callbackPv+0x12>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 800ba82:	069e      	lsls	r6, r3, #26
 800ba84:	d428      	bmi.n	800bad8 <_Z14async_callbackPv+0x60>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 800ba86:	06dd      	lsls	r5, r3, #27
 800ba88:	d42d      	bmi.n	800bae6 <_Z14async_callbackPv+0x6e>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 800ba8a:	f043 0304 	orr.w	r3, r3, #4
 800ba8e:	80a3      	strh	r3, [r4, #4]
 800ba90:	f104 0510 	add.w	r5, r4, #16
 800ba94:	e012      	b.n	800babc <_Z14async_callbackPv+0x44>
            listener->cb_param(listener->evt, listener->cb_arg);
 800ba96:	68e2      	ldr	r2, [r4, #12]
 800ba98:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800ba9a:	88a2      	ldrh	r2, [r4, #4]
 800ba9c:	06d3      	lsls	r3, r2, #27
 800ba9e:	d518      	bpl.n	800bad2 <_Z14async_callbackPv+0x5a>
 800baa0:	69a3      	ldr	r3, [r4, #24]
 800baa2:	b1b3      	cbz	r3, 800bad2 <_Z14async_callbackPv+0x5a>
            listener->evt = item->evt;
 800baa4:	e893 0003 	ldmia.w	r3, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800baa8:	689a      	ldr	r2, [r3, #8]
            listener->evt = item->evt;
 800baaa:	e885 0003 	stmia.w	r5, {r0, r1}
            delete item;
 800baae:	4618      	mov	r0, r3
            listener->evt_queue = listener->evt_queue->next;
 800bab0:	61a2      	str	r2, [r4, #24]
            delete item;
 800bab2:	f7f8 fa4f 	bl	8003f54 <_ZdlPv>
            schedule();
 800bab6:	f7ff fb61 	bl	800b17c <_ZN5codal8scheduleEv>
 800baba:	88a3      	ldrh	r3, [r4, #4]
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800babc:	0799      	lsls	r1, r3, #30
 800babe:	68a6      	ldr	r6, [r4, #8]
 800bac0:	d40b      	bmi.n	800bada <_Z14async_callbackPv+0x62>
            listener->cb_param(listener->evt, listener->cb_arg);
 800bac2:	e895 0003 	ldmia.w	r5, {r0, r1}
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 800bac6:	07da      	lsls	r2, r3, #31
 800bac8:	d4e5      	bmi.n	800ba96 <_Z14async_callbackPv+0x1e>
            listener->cb(listener->evt);
 800baca:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800bacc:	88a2      	ldrh	r2, [r4, #4]
 800bace:	06d3      	lsls	r3, r2, #27
 800bad0:	d4e6      	bmi.n	800baa0 <_Z14async_callbackPv+0x28>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 800bad2:	f022 0204 	bic.w	r2, r2, #4
 800bad6:	80a2      	strh	r2, [r4, #4]
}
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
            listener->cb_method->fire(listener->evt);
 800bada:	e895 0006 	ldmia.w	r5, {r1, r2}
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 f9f2 	bl	800bec8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 800bae4:	e7d9      	b.n	800ba9a <_Z14async_callbackPv+0x22>
            listener->queue(listener->evt);
 800bae6:	3410      	adds	r4, #16
 800bae8:	e894 0006 	ldmia.w	r4, {r1, r2}
}
 800baec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            listener->queue(listener->evt);
 800baf0:	f7ff bd64 	b.w	800b5bc <_ZN5codal8Listener5queueENS_5EventE>

0800baf4 <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	4604      	mov	r4, r0
 800baf8:	4b1b      	ldr	r3, [pc, #108]	; (800bb68 <_ZN5codal10MessageBusD1Ev+0x74>)
 800bafa:	b08a      	sub	sp, #40	; 0x28
 800bafc:	f103 0208 	add.w	r2, r3, #8
 800bb00:	3328      	adds	r3, #40	; 0x28
 800bb02:	6022      	str	r2, [r4, #0]
 800bb04:	60a3      	str	r3, [r4, #8]
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800bb06:	a806      	add	r0, sp, #24
 800bb08:	f000 f9c2 	bl	800be90 <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800bb0c:	230f      	movs	r3, #15
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
 800bb0e:	2018      	movs	r0, #24
        this->id = id;
 800bb10:	9302      	str	r3, [sp, #8]
        this->cb_method = new MemberFunctionCallback(object, method);
 800bb12:	f7f8 fa1d 	bl	8003f50 <_Znwj>
 800bb16:	2500      	movs	r5, #0
 800bb18:	4a14      	ldr	r2, [pc, #80]	; (800bb6c <_ZN5codal10MessageBusD1Ev+0x78>)
        this->object = object;
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	e9cd 2500 	strd	r2, r5, [sp]
        memcpy(this->method, &method, sizeof(method));
 800bb20:	466a      	mov	r2, sp
 800bb22:	4603      	mov	r3, r0
        this->cb_arg = NULL;
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bb24:	2612      	movs	r6, #18
        this->object = object;
 800bb26:	f841 4b0c 	str.w	r4, [r1], #12
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 800bb2a:	60c5      	str	r5, [r0, #12]
 800bb2c:	604d      	str	r5, [r1, #4]
        memcpy(this->method, &method, sizeof(method));
 800bb2e:	ca03      	ldmia	r2!, {r0, r1}
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bb30:	4a0f      	ldr	r2, [pc, #60]	; (800bb70 <_ZN5codal10MessageBusD1Ev+0x7c>)
        memcpy(this->method, &method, sizeof(method));
 800bb32:	6058      	str	r0, [r3, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bb34:	615a      	str	r2, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800bb36:	6099      	str	r1, [r3, #8]
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
        remove(&listener);
 800bb38:	4620      	mov	r0, r4
 800bb3a:	a902      	add	r1, sp, #8
        this->cb_arg = NULL;
 800bb3c:	e9cd 3504 	strd	r3, r5, [sp, #16]
        this->evt_queue = NULL;
        this->next = NULL;
 800bb40:	e9cd 5508 	strd	r5, r5, [sp, #32]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bb44:	f8ad 600c 	strh.w	r6, [sp, #12]
 800bb48:	f7ff fee0 	bl	800b90c <_ZN5codal10MessageBus6removeEPNS_8ListenerE>
        Listener listener(id, value, object, handler);
 800bb4c:	a802      	add	r0, sp, #8
 800bb4e:	f7ff fd2b 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
        {
 800bb52:	4b08      	ldr	r3, [pc, #32]	; (800bb74 <_ZN5codal10MessageBusD1Ev+0x80>)
            removeComponent();
 800bb54:	f104 0008 	add.w	r0, r4, #8
            status = 0;
 800bb58:	81e5      	strh	r5, [r4, #14]
        {
 800bb5a:	60a3      	str	r3, [r4, #8]
            removeComponent();
 800bb5c:	f7fe fe56 	bl	800a80c <_ZN5codal14CodalComponent15removeComponentEv>
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800bb60:	4620      	mov	r0, r4
 800bb62:	b00a      	add	sp, #40	; 0x28
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	bf00      	nop
 800bb68:	0800d290 	.word	0x0800d290
 800bb6c:	0800bddd 	.word	0x0800bddd
 800bb70:	0800b8dd 	.word	0x0800b8dd
 800bb74:	0800d268 	.word	0x0800d268

0800bb78 <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800bb78:	f1a0 0008 	sub.w	r0, r0, #8
 800bb7c:	f7ff bfba 	b.w	800baf4 <_ZN5codal10MessageBusD1Ev>

0800bb80 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4604      	mov	r4, r0
}
 800bb84:	f7ff ffb6 	bl	800baf4 <_ZN5codal10MessageBusD1Ev>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f7f8 f9e3 	bl	8003f54 <_ZdlPv>
 800bb8e:	4620      	mov	r0, r4
 800bb90:	bd10      	pop	{r4, pc}
 800bb92:	bf00      	nop

0800bb94 <_ZThn8_N5codal10MessageBusD0Ev>:
 800bb94:	f1a0 0008 	sub.w	r0, r0, #8
 800bb98:	f7ff bff2 	b.w	800bb80 <_ZN5codal10MessageBusD0Ev>

0800bb9c <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 800bb9c:	b570      	push	{r4, r5, r6, lr}
            this->id = 0;
 800bb9e:	2500      	movs	r5, #0
 800bba0:	4604      	mov	r4, r0
    class EventModel
 800bba2:	4a23      	ldr	r2, [pc, #140]	; (800bc30 <_ZN5codal10MessageBusC1Ev+0x94>)
        {
 800bba4:	4b23      	ldr	r3, [pc, #140]	; (800bc34 <_ZN5codal10MessageBusC1Ev+0x98>)
 800bba6:	b082      	sub	sp, #8
 800bba8:	6002      	str	r2, [r0, #0]
            this->id = 0;
 800bbaa:	e9c0 3502 	strd	r3, r5, [r0, #8]
            addComponent();
 800bbae:	3008      	adds	r0, #8
 800bbb0:	f7fe fdbe 	bl	800a730 <_ZN5codal14CodalComponent12addComponentEv>
 800bbb4:	4b20      	ldr	r3, [pc, #128]	; (800bc38 <_ZN5codal10MessageBusC1Ev+0x9c>)
    this->listeners = NULL;
 800bbb6:	6165      	str	r5, [r4, #20]
MessageBus::MessageBus()
 800bbb8:	f103 0220 	add.w	r2, r3, #32
 800bbbc:	60a2      	str	r2, [r4, #8]
 800bbbe:	6023      	str	r3, [r4, #0]
    this->evt_queue_tail = NULL;
 800bbc0:	e9c4 5506 	strd	r5, r5, [r4, #24]
    this->queueLength = 0;
 800bbc4:	8465      	strh	r5, [r4, #34]	; 0x22
        Listener *newListener = new Listener(id, value, object, handler, flags);
 800bbc6:	2020      	movs	r0, #32
 800bbc8:	f7f8 f9c2 	bl	8003f50 <_Znwj>
 800bbcc:	4606      	mov	r6, r0
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800bbce:	3010      	adds	r0, #16
 800bbd0:	f000 f95e 	bl	800be90 <_ZN5codal5EventC1Ev>
        this->id = id;
 800bbd4:	4b19      	ldr	r3, [pc, #100]	; (800bc3c <_ZN5codal10MessageBusC1Ev+0xa0>)
        this->cb_method = new MemberFunctionCallback(object, method);
 800bbd6:	2018      	movs	r0, #24
        this->id = id;
 800bbd8:	6033      	str	r3, [r6, #0]
        this->cb_method = new MemberFunctionCallback(object, method);
 800bbda:	f7f8 f9b9 	bl	8003f50 <_Znwj>
        this->object = object;
 800bbde:	4602      	mov	r2, r0
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f842 4b0c 	str.w	r4, [r2], #12
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bbe6:	21c2      	movs	r1, #194	; 0xc2
 800bbe8:	60dd      	str	r5, [r3, #12]
 800bbea:	6055      	str	r5, [r2, #4]
        memcpy(this->method, &method, sizeof(method));
 800bbec:	466a      	mov	r2, sp
 800bbee:	4814      	ldr	r0, [pc, #80]	; (800bc40 <_ZN5codal10MessageBusC1Ev+0xa4>)
 800bbf0:	9501      	str	r5, [sp, #4]
        this->cb_arg = NULL;
 800bbf2:	e9c6 3502 	strd	r3, r5, [r6, #8]
        this->next = NULL;
 800bbf6:	e9c6 5506 	strd	r5, r5, [r6, #24]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bbfa:	4d12      	ldr	r5, [pc, #72]	; (800bc44 <_ZN5codal10MessageBusC1Ev+0xa8>)
 800bbfc:	9000      	str	r0, [sp, #0]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bbfe:	80b1      	strh	r1, [r6, #4]
 800bc00:	615d      	str	r5, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800bc02:	ca03      	ldmia	r2!, {r0, r1}
 800bc04:	6058      	str	r0, [r3, #4]
 800bc06:	6099      	str	r1, [r3, #8]
        if(add(newListener) == DEVICE_OK)
 800bc08:	4620      	mov	r0, r4
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	f7ff fec0 	bl	800b990 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800bc10:	b930      	cbnz	r0, 800bc20 <_ZN5codal10MessageBusC1Ev+0x84>
    if(EventModel::defaultEventBus == NULL)
 800bc12:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <_ZN5codal10MessageBusC1Ev+0xac>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	b902      	cbnz	r2, 800bc1a <_ZN5codal10MessageBusC1Ev+0x7e>
        EventModel::defaultEventBus = this;
 800bc18:	601c      	str	r4, [r3, #0]
}
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}
        delete newListener;
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff fcc1 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7f8 f994 	bl	8003f54 <_ZdlPv>
 800bc2c:	e7f1      	b.n	800bc12 <_ZN5codal10MessageBusC1Ev+0x76>
 800bc2e:	bf00      	nop
 800bc30:	0800d284 	.word	0x0800d284
 800bc34:	0800d268 	.word	0x0800d268
 800bc38:	0800d298 	.word	0x0800d298
 800bc3c:	0002000f 	.word	0x0002000f
 800bc40:	0800bddd 	.word	0x0800bddd
 800bc44:	0800b8dd 	.word	0x0800b8dd
 800bc48:	2000164c 	.word	0x2000164c

0800bc4c <_ZN5codal10MessageBus12dequeueEventEv>:
{
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4604      	mov	r4, r0
    target_disable_irq();
 800bc50:	f7f4 fe68 	bl	8000924 <target_disable_irq>
    if (evt_queue_head != NULL)
 800bc54:	69a5      	ldr	r5, [r4, #24]
 800bc56:	b12d      	cbz	r5, 800bc64 <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 800bc58:	68ab      	ldr	r3, [r5, #8]
 800bc5a:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 800bc5c:	b133      	cbz	r3, 800bc6c <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 800bc5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bc60:	3b01      	subs	r3, #1
 800bc62:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800bc64:	f7f4 fe5c 	bl	8000920 <target_enable_irq>
}
 800bc68:	4628      	mov	r0, r5
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 800bc6c:	61e3      	str	r3, [r4, #28]
 800bc6e:	e7f6      	b.n	800bc5e <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800bc70 <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800bc74:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800bc76:	b30c      	cbz	r4, 800bcbc <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x4c>
    int removed = 0;
 800bc78:	2700      	movs	r7, #0
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800bc7a:	88a3      	ldrh	r3, [r4, #4]
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	041a      	lsls	r2, r3, #16
    p = NULL;
 800bc80:	463e      	mov	r6, r7
 800bc82:	69e5      	ldr	r5, [r4, #28]
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800bc84:	d406      	bmi.n	800bc94 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x24>
 800bc86:	4626      	mov	r6, r4
    while (l != NULL)
 800bc88:	b195      	cbz	r5, 800bcb0 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x40>
 800bc8a:	462c      	mov	r4, r5
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800bc8c:	88a3      	ldrh	r3, [r4, #4]
 800bc8e:	69e5      	ldr	r5, [r4, #28]
 800bc90:	041a      	lsls	r2, r3, #16
 800bc92:	d5f8      	bpl.n	800bc86 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
 800bc94:	075b      	lsls	r3, r3, #29
 800bc96:	d4f6      	bmi.n	800bc86 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
            if (p == NULL)
 800bc98:	b16e      	cbz	r6, 800bcb6 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
                p->next = l->next;
 800bc9a:	61f5      	str	r5, [r6, #28]
 800bc9c:	69e5      	ldr	r5, [r4, #28]
            delete t;
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f7ff fc82 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800bca4:	4620      	mov	r0, r4
            removed++;
 800bca6:	3701      	adds	r7, #1
            delete t;
 800bca8:	f7f8 f954 	bl	8003f54 <_ZdlPv>
    while (l != NULL)
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	d1ec      	bne.n	800bc8a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x1a>
}
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                listeners = l->next;
 800bcb6:	f8c8 5014 	str.w	r5, [r8, #20]
 800bcba:	e7f0      	b.n	800bc9e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x2e>
    int removed = 0;
 800bcbc:	4627      	mov	r7, r4
}
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcc4 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 800bcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800bcc8:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	d041      	beq.n	800bd52 <_ZN5codal10MessageBus7processERNS_5EventEb+0x8e>
 800bcce:	4616      	mov	r6, r2
 800bcd0:	460d      	mov	r5, r1
    int complete = 1;
 800bcd2:	2701      	movs	r7, #1
                    invoke(async_callback, l);
 800bcd4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800bd5c <_ZN5codal10MessageBus7processERNS_5EventEb+0x98>
 800bcd8:	e00c      	b.n	800bcf4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 800bcda:	88a3      	ldrh	r3, [r4, #4]
 800bcdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bce0:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 800bce4:	fab3 f383 	clz	r3, r3
 800bce8:	095b      	lsrs	r3, r3, #5
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800bcea:	42b3      	cmp	r3, r6
 800bcec:	d015      	beq.n	800bd1a <_ZN5codal10MessageBus7processERNS_5EventEb+0x56>
                complete = 0;
 800bcee:	2700      	movs	r7, #0
        l = l->next;
 800bcf0:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bcf2:	b334      	cbz	r4, 800bd42 <_ZN5codal10MessageBus7processERNS_5EventEb+0x7e>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 800bcf4:	8823      	ldrh	r3, [r4, #0]
 800bcf6:	8829      	ldrh	r1, [r5, #0]
 800bcf8:	4299      	cmp	r1, r3
 800bcfa:	d001      	beq.n	800bd00 <_ZN5codal10MessageBus7processERNS_5EventEb+0x3c>
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1f7      	bne.n	800bcf0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
 800bd00:	8863      	ldrh	r3, [r4, #2]
 800bd02:	886a      	ldrh	r2, [r5, #2]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d001      	beq.n	800bd0c <_ZN5codal10MessageBus7processERNS_5EventEb+0x48>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1f1      	bne.n	800bcf0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
            if (fiber_scheduler_running())
 800bd0c:	f7ff f89e 	bl	800ae4c <_ZN5codal23fiber_scheduler_runningEv>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d1e2      	bne.n	800bcda <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 800bd14:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800bd16:	42b3      	cmp	r3, r6
 800bd18:	d1e9      	bne.n	800bcee <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
 800bd1a:	88a3      	ldrh	r3, [r4, #4]
 800bd1c:	041a      	lsls	r2, r3, #16
 800bd1e:	d4e6      	bmi.n	800bcee <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
                l->evt = evt;
 800bd20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd24:	f104 0210 	add.w	r2, r4, #16
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800bd28:	065b      	lsls	r3, r3, #25
                l->evt = evt;
 800bd2a:	e882 0003 	stmia.w	r2, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800bd2e:	d402      	bmi.n	800bd36 <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
 800bd30:	f7ff f88c 	bl	800ae4c <_ZN5codal23fiber_scheduler_runningEv>
 800bd34:	b940      	cbnz	r0, 800bd48 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>
                    async_callback(l);
 800bd36:	4620      	mov	r0, r4
 800bd38:	f7ff fe9e 	bl	800ba78 <_Z14async_callbackPv>
        l = l->next;
 800bd3c:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	d1d8      	bne.n	800bcf4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
}
 800bd42:	4638      	mov	r0, r7
 800bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    invoke(async_callback, l);
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	f7ff fabe 	bl	800b2cc <_ZN5codal6invokeEPFvPvES0_>
 800bd50:	e7ce      	b.n	800bcf0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
    int complete = 1;
 800bd52:	2701      	movs	r7, #1
}
 800bd54:	4638      	mov	r0, r7
 800bd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5a:	bf00      	nop
 800bd5c:	0800ba79 	.word	0x0800ba79

0800bd60 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
    processingComplete = this->process(evt, true);
 800bd62:	2201      	movs	r2, #1
{
 800bd64:	b083      	sub	sp, #12
 800bd66:	4604      	mov	r4, r0
    EventQueueItem *prev = evt_queue_tail;
 800bd68:	69c5      	ldr	r5, [r0, #28]
{
 800bd6a:	460e      	mov	r6, r1
    processingComplete = this->process(evt, true);
 800bd6c:	f7ff ffaa 	bl	800bcc4 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 800bd70:	b910      	cbnz	r0, 800bd78 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800bd72:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bd74:	2b09      	cmp	r3, #9
 800bd76:	d901      	bls.n	800bd7c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800bd78:	b003      	add	sp, #12
 800bd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 800bd7c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bd80:	466e      	mov	r6, sp
 800bd82:	e886 0003 	stmia.w	r6, {r0, r1}
 800bd86:	200c      	movs	r0, #12
 800bd88:	f7f8 f8e2 	bl	8003f50 <_Znwj>
 800bd8c:	e896 0006 	ldmia.w	r6, {r1, r2}
 800bd90:	4607      	mov	r7, r0
 800bd92:	f000 f887 	bl	800bea4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800bd96:	f7f4 fdc5 	bl	8000924 <target_disable_irq>
    if (prev == NULL)
 800bd9a:	b165      	cbz	r5, 800bdb6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x56>
        item->next = prev->next;
 800bd9c:	68ab      	ldr	r3, [r5, #8]
 800bd9e:	60bb      	str	r3, [r7, #8]
        prev->next = item;
 800bda0:	60af      	str	r7, [r5, #8]
 800bda2:	68bb      	ldr	r3, [r7, #8]
    if (item->next == NULL)
 800bda4:	b15b      	cbz	r3, 800bdbe <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5e>
    queueLength++;
 800bda6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bda8:	3301      	adds	r3, #1
 800bdaa:	8463      	strh	r3, [r4, #34]	; 0x22
}
 800bdac:	b003      	add	sp, #12
 800bdae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    target_enable_irq();
 800bdb2:	f7f4 bdb5 	b.w	8000920 <target_enable_irq>
        item->next = evt_queue_head;
 800bdb6:	69a3      	ldr	r3, [r4, #24]
        evt_queue_head = item;
 800bdb8:	61a7      	str	r7, [r4, #24]
        item->next = evt_queue_head;
 800bdba:	60bb      	str	r3, [r7, #8]
 800bdbc:	e7f2      	b.n	800bda4 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x44>
        evt_queue_tail = item;
 800bdbe:	61e7      	str	r7, [r4, #28]
 800bdc0:	e7f1      	b.n	800bda6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>
 800bdc2:	bf00      	nop

0800bdc4 <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 800bdc4:	b500      	push	{lr}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	466b      	mov	r3, sp
 800bdca:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f7ff ffc6 	bl	800bd60 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	b003      	add	sp, #12
 800bdd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800bddc <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 800bddc:	b530      	push	{r4, r5, lr}
 800bdde:	4605      	mov	r5, r0
 800bde0:	b083      	sub	sp, #12
 800bde2:	ab02      	add	r3, sp, #8
 800bde4:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 800bde8:	f7ff ff42 	bl	800bc70 <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 800bdec:	4628      	mov	r0, r5
 800bdee:	f7ff ff2d 	bl	800bc4c <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800bdf2:	b190      	cbz	r0, 800be1a <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	e004      	b.n	800be02 <_ZN5codal10MessageBus4idleENS_5EventE+0x26>
        item = this->dequeueEvent();
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f7ff ff27 	bl	800bc4c <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800bdfe:	4604      	mov	r4, r0
 800be00:	b158      	cbz	r0, 800be1a <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
        this->process(item->evt);
 800be02:	2200      	movs	r2, #0
 800be04:	4621      	mov	r1, r4
 800be06:	4628      	mov	r0, r5
 800be08:	f7ff ff5c 	bl	800bcc4 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7f8 f8a1 	bl	8003f54 <_ZdlPv>
        if(!scheduler_runqueue_empty())
 800be12:	f7ff f8c3 	bl	800af9c <_ZN5codal24scheduler_runqueue_emptyEv>
 800be16:	2800      	cmp	r0, #0
 800be18:	d1ee      	bne.n	800bdf8 <_ZN5codal10MessageBus4idleENS_5EventE+0x1c>
}
 800be1a:	b003      	add	sp, #12
 800be1c:	bd30      	pop	{r4, r5, pc}
 800be1e:	bf00      	nop

0800be20 <_ZN5codal19allocateNotifyEventEv>:
    return userNotifyId++;
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <_ZN5codal19allocateNotifyEventEv+0xc>)
 800be22:	8818      	ldrh	r0, [r3, #0]
 800be24:	1c42      	adds	r2, r0, #1
 800be26:	801a      	strh	r2, [r3, #0]
}
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	20001008 	.word	0x20001008

0800be30 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>:
/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
    if(EventModel::defaultEventBus)
 800be30:	4b08      	ldr	r3, [pc, #32]	; (800be54 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x24>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	b13b      	cbz	r3, 800be46 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x16>
        EventModel::defaultEventBus->send(*this);
 800be36:	6819      	ldr	r1, [r3, #0]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800be38:	b410      	push	{r4}
 800be3a:	4a07      	ldr	r2, [pc, #28]	; (800be58 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x28>)
        EventModel::defaultEventBus->send(*this);
 800be3c:	680c      	ldr	r4, [r1, #0]
 800be3e:	4294      	cmp	r4, r2
 800be40:	d102      	bne.n	800be48 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x18>
}
 800be42:	bc10      	pop	{r4}
 800be44:	4770      	bx	lr
 800be46:	4770      	bx	lr
        EventModel::defaultEventBus->send(*this);
 800be48:	e890 0006 	ldmia.w	r0, {r1, r2}
 800be4c:	4618      	mov	r0, r3
 800be4e:	4623      	mov	r3, r4
}
 800be50:	bc10      	pop	{r4}
        EventModel::defaultEventBus->send(*this);
 800be52:	4718      	bx	r3
 800be54:	2000164c 	.word	0x2000164c
 800be58:	0800b879 	.word	0x0800b879

0800be5c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800be5c:	b538      	push	{r3, r4, r5, lr}
    this->source = source;
 800be5e:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800be60:	8042      	strh	r2, [r0, #2]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800be62:	4604      	mov	r4, r0
 800be64:	461d      	mov	r5, r3
    this->timestamp = system_timer_current_time();
 800be66:	f7ff fcd5 	bl	800b814 <_ZN5codal25system_timer_current_timeEv>
 800be6a:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 800be6c:	b115      	cbz	r5, 800be74 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x18>
 800be6e:	4620      	mov	r0, r4
 800be70:	f7ff ffde 	bl	800be30 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
}
 800be74:	4620      	mov	r0, r4
 800be76:	bd38      	pop	{r3, r4, r5, pc}

0800be78 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800be7e:	4604      	mov	r4, r0
      this->source = source;
 800be80:	8001      	strh	r1, [r0, #0]
      this->value = value;
 800be82:	8042      	strh	r2, [r0, #2]
      this->timestamp = currentTimeUs;
 800be84:	6043      	str	r3, [r0, #4]
      if(mode != CREATE_ONLY)
 800be86:	b10d      	cbz	r5, 800be8c <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
 800be88:	f7ff ffd2 	bl	800be30 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
  }
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd38      	pop	{r3, r4, r5, pc}

0800be90 <_ZN5codal5EventC1Ev>:
    this->source = 0;
 800be90:	2300      	movs	r3, #0
Event::Event()
 800be92:	b510      	push	{r4, lr}
    this->source = 0;
 800be94:	6003      	str	r3, [r0, #0]
Event::Event()
 800be96:	4604      	mov	r4, r0
    this->timestamp = system_timer_current_time();
 800be98:	f7ff fcbc 	bl	800b814 <_ZN5codal25system_timer_current_timeEv>
 800be9c:	6060      	str	r0, [r4, #4]
}
 800be9e:	4620      	mov	r0, r4
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	bf00      	nop

0800bea4 <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800bea4:	b570      	push	{r4, r5, r6, lr}
    this->source = 0;
 800bea6:	2600      	movs	r6, #0
EventQueueItem::EventQueueItem(Event evt)
 800bea8:	b082      	sub	sp, #8
 800beaa:	4604      	mov	r4, r0
 800beac:	466d      	mov	r5, sp
    this->source = 0;
 800beae:	6006      	str	r6, [r0, #0]
EventQueueItem::EventQueueItem(Event evt)
 800beb0:	e885 0006 	stmia.w	r5, {r1, r2}
    this->timestamp = system_timer_current_time();
 800beb4:	f7ff fcae 	bl	800b814 <_ZN5codal25system_timer_current_timeEv>
{
    this->evt = evt;
 800beb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bebc:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
}
 800bec0:	4620      	mov	r0, r4
    this->next = NULL;
 800bec2:	60a6      	str	r6, [r4, #8]
}
 800bec4:	b002      	add	sp, #8
 800bec6:	bd70      	pop	{r4, r5, r6, pc}

0800bec8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800bec8:	b410      	push	{r4}
 800beca:	b083      	sub	sp, #12
 800becc:	466b      	mov	r3, sp
    invoke(object, method, e);
 800bece:	6944      	ldr	r4, [r0, #20]
{
 800bed0:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800bed4:	46a4      	mov	ip, r4
 800bed6:	cb0c      	ldmia	r3, {r2, r3}
 800bed8:	1d01      	adds	r1, r0, #4
 800beda:	6800      	ldr	r0, [r0, #0]
}
 800bedc:	b003      	add	sp, #12
 800bede:	bc10      	pop	{r4}
    invoke(object, method, e);
 800bee0:	4760      	bx	ip
 800bee2:	bf00      	nop

0800bee4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800bee4:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800bee6:	6802      	ldr	r2, [r0, #0]
 800bee8:	680b      	ldr	r3, [r1, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d001      	beq.n	800bef2 <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800beee:	2000      	movs	r0, #0
}
 800bef0:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800bef2:	3104      	adds	r1, #4
 800bef4:	2210      	movs	r2, #16
 800bef6:	3004      	adds	r0, #4
 800bef8:	f7f7 fe32 	bl	8003b60 <memcmp>
 800befc:	fab0 f080 	clz	r0, r0
 800bf00:	0940      	lsrs	r0, r0, #5
}
 800bf02:	bd08      	pop	{r3, pc}

0800bf04 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800bf04:	2000      	movs	r0, #0
 800bf06:	4770      	bx	lr

0800bf08 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800bf08:	2000      	movs	r0, #0
 800bf0a:	4770      	bx	lr

0800bf0c <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	4770      	bx	lr

0800bf10 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4604      	mov	r4, r0
 800bf14:	460e      	mov	r6, r1
 800bf16:	4615      	mov	r5, r2
 800bf18:	f000 fca8 	bl	800c86c <_ZN5codal3I2CC1ERNS_3PinES2_>
 800bf1c:	4b02      	ldr	r3, [pc, #8]	; (800bf28 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800bf1e:	e9c4 6501 	strd	r6, r5, [r4, #4]
 800bf22:	6023      	str	r3, [r4, #0]
        }
 800bf24:	4620      	mov	r0, r4
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	0800d2d4 	.word	0x0800d2d4

0800bf2c <_ZN5codal3_cm3Pin15getDigitalValueEv>:
    if(status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE))
        return ((TimedInterruptIn *)pin)->read();

    return ((DigitalIn *)pin)->read();
#endif  //  TODO
}
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	4770      	bx	lr

0800bf30 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800bf30:	7903      	ldrb	r3, [r0, #4]
 800bf32:	07db      	lsls	r3, r3, #31
 800bf34:	d506      	bpl.n	800bf44 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x14>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 800bf36:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 800bf3a:	bf2c      	ite	cs
 800bf3c:	f46f 707a 	mvncs.w	r0, #1000	; 0x3e8
 800bf40:	2000      	movcc	r0, #0
 800bf42:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800bf44:	4800      	ldr	r0, [pc, #0]	; (800bf48 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>)
}
 800bf46:	4770      	bx	lr
 800bf48:	fffffc16 	.word	0xfffffc16

0800bf4c <_ZN5codal3_cm3Pin13setServoValueEiii>:
  *         if the given pin does not have analog capability.
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
 800bf4c:	7900      	ldrb	r0, [r0, #4]
 800bf4e:	f010 0f02 	tst.w	r0, #2
 800bf52:	d00c      	beq.n	800bf6e <_ZN5codal3_cm3Pin13setServoValueEiii+0x22>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
 800bf54:	2900      	cmp	r1, #0
 800bf56:	db07      	blt.n	800bf68 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	dd05      	ble.n	800bf68 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800bf5c:	2b00      	cmp	r3, #0
    value = value * 1000;

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
 800bf5e:	bfd4      	ite	le
 800bf60:	f46f 707a 	mvnle.w	r0, #1000	; 0x3e8
 800bf64:	2000      	movgt	r0, #0
 800bf66:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 800bf68:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800bf6c:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800bf6e:	4801      	ldr	r0, [pc, #4]	; (800bf74 <_ZN5codal3_cm3Pin13setServoValueEiii+0x28>)
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	fffffc16 	.word	0xfffffc16

0800bf78 <_ZN5codal3_cm3Pin14getAnalogValueEv>:
    }

    //perform a read!
    return (((AnalogIn *)pin)->read_u16() >> 6);
#endif  //  TODO
}
 800bf78:	20e1      	movs	r0, #225	; 0xe1
 800bf7a:	4770      	bx	lr

0800bf7c <_ZN5codal3_cm3Pin7isInputEv>:
  *
  * @return 1 if pin is an analog or digital input, 0 otherwise.
  */
int Pin::isInput()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800bf7c:	8980      	ldrh	r0, [r0, #12]
 800bf7e:	f000 0005 	and.w	r0, r0, #5
}
 800bf82:	3000      	adds	r0, #0
 800bf84:	bf18      	it	ne
 800bf86:	2001      	movne	r0, #1
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop

0800bf8c <_ZN5codal3_cm3Pin8isOutputEv>:
  *
  * @return 1 if pin is an analog or digital output, 0 otherwise.
  */
int Pin::isOutput()
{
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800bf8c:	8980      	ldrh	r0, [r0, #12]
 800bf8e:	f000 000a 	and.w	r0, r0, #10
}
 800bf92:	3000      	adds	r0, #0
 800bf94:	bf18      	it	ne
 800bf96:	2001      	movne	r0, #1
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop

0800bf9c <_ZN5codal3_cm3Pin9isDigitalEv>:
  *
  * @return 1 if pin is digital, 0 otherwise.
  */
int Pin::isDigital()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800bf9c:	8980      	ldrh	r0, [r0, #12]
}
 800bf9e:	f010 0003 	ands.w	r0, r0, #3
 800bfa2:	bf18      	it	ne
 800bfa4:	2001      	movne	r0, #1
 800bfa6:	4770      	bx	lr

0800bfa8 <_ZN5codal3_cm3Pin8isAnalogEv>:
  *
  * @return 1 if pin is analog, 0 otherwise.
  */
int Pin::isAnalog()
{
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800bfa8:	8980      	ldrh	r0, [r0, #12]
 800bfaa:	f000 000c 	and.w	r0, r0, #12
}
 800bfae:	3000      	adds	r0, #0
 800bfb0:	bf18      	it	ne
 800bfb2:	2001      	movne	r0, #1
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop

0800bfb8 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 800bfb8:	4800      	ldr	r0, [pc, #0]	; (800bfbc <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 800bfba:	4770      	bx	lr
 800bfbc:	fffffc16 	.word	0xfffffc16

0800bfc0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 800bfc0:	4800      	ldr	r0, [pc, #0]	; (800bfc4 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 800bfc2:	4770      	bx	lr
 800bfc4:	fffffc16 	.word	0xfffffc16

0800bfc8 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800bfc8:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800bfca:	2000      	movs	r0, #0
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop

0800bfd0 <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	4605      	mov	r5, r0
    debug_print("pin "); debug_println(value); ////
 800bfd6:	4813      	ldr	r0, [pc, #76]	; (800c024 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x54>)
 800bfd8:	f7f7 ff2e 	bl	8003e38 <debug_print>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7f7 ff3f 	bl	8003e60 <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800bfe2:	792b      	ldrb	r3, [r5, #4]
 800bfe4:	07db      	lsls	r3, r3, #31
 800bfe6:	d51b      	bpl.n	800c020 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x50>
    if (value < 0 || value > 1)
 800bfe8:	2c01      	cmp	r4, #1
 800bfea:	d816      	bhi.n	800c01a <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4a>
	rcc_periph_clock_enable(RCC_GPIOC);
 800bfec:	f44f 7041 	mov.w	r0, #772	; 0x304
 800bff0:	f7f4 fdd6 	bl	8000ba0 <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 800bff4:	2102      	movs	r1, #2
 800bff6:	480c      	ldr	r0, [pc, #48]	; (800c028 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
 800bff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bffc:	2200      	movs	r2, #0
 800bffe:	f7f4 fe27 	bl	8000c50 <gpio_set_mode>
        gpio_set(GPIOC, GPIO13);
 800c002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c006:	4808      	ldr	r0, [pc, #32]	; (800c028 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
    if (value) {
 800c008:	b91c      	cbnz	r4, 800c012 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
	    gpio_clear(GPIOC, GPIO13);
 800c00a:	f7f4 fdb5 	bl	8000b78 <gpio_clear>
    return DEVICE_OK;
 800c00e:	4620      	mov	r0, r4
}
 800c010:	bd38      	pop	{r3, r4, r5, pc}
        gpio_set(GPIOC, GPIO13);
 800c012:	f7f4 fdaf 	bl	8000b74 <gpio_set>
 800c016:	2000      	movs	r0, #0
}
 800c018:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_INVALID_PARAMETER;
 800c01a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 800c020:	4802      	ldr	r0, [pc, #8]	; (800c02c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
}
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	0800d2f8 	.word	0x0800d2f8
 800c028:	40011000 	.word	0x40011000
 800c02c:	fffffc16 	.word	0xfffffc16

0800c030 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
{
 800c030:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	4a05      	ldr	r2, [pc, #20]	; (800c04c <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x1c>)
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	4293      	cmp	r3, r2
 800c03a:	d101      	bne.n	800c040 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x10>
 800c03c:	4804      	ldr	r0, [pc, #16]	; (800c050 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x20>)
}
 800c03e:	bd08      	pop	{r3, pc}
    return getAnalogPeriodUs()/1000;
 800c040:	4798      	blx	r3
 800c042:	4b04      	ldr	r3, [pc, #16]	; (800c054 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x24>)
 800c044:	fba3 3000 	umull	r3, r0, r3, r0
 800c048:	0980      	lsrs	r0, r0, #6
}
 800c04a:	bd08      	pop	{r3, pc}
 800c04c:	0800bfc1 	.word	0x0800bfc1
 800c050:	00418936 	.word	0x00418936
 800c054:	10624dd3 	.word	0x10624dd3

0800c058 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
    setPull(pull);
 800c058:	6803      	ldr	r3, [r0, #0]
{
 800c05a:	b570      	push	{r4, r5, r6, lr}
    setPull(pull);
 800c05c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c05e:	4d0a      	ldr	r5, [pc, #40]	; (800c088 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x30>)
{
 800c060:	4604      	mov	r4, r0
 800c062:	42aa      	cmp	r2, r5
 800c064:	d106      	bne.n	800c074 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x1c>
    return getDigitalValue();
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	4a08      	ldr	r2, [pc, #32]	; (800c08c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    pullMode = pull;
 800c06a:	60a1      	str	r1, [r4, #8]
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d107      	bne.n	800c080 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x28>
}
 800c070:	2001      	movs	r0, #1
 800c072:	bd70      	pop	{r4, r5, r6, pc}
    setPull(pull);
 800c074:	4790      	blx	r2
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	4a04      	ldr	r2, [pc, #16]	; (800c08c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    return getDigitalValue();
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d0f7      	beq.n	800c070 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x18>
 800c080:	4620      	mov	r0, r4
}
 800c082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return getDigitalValue();
 800c086:	4718      	bx	r3
 800c088:	0800bfc9 	.word	0x0800bfc9
 800c08c:	0800bf2d 	.word	0x0800bf2d

0800c090 <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800c090:	b508      	push	{r3, lr}
    switch(eventType)
 800c092:	2903      	cmp	r1, #3
 800c094:	d817      	bhi.n	800c0c6 <_ZN5codal3_cm3Pin7eventOnEi+0x36>
 800c096:	e8df f001 	tbb	[pc, r1]
 800c09a:	070a      	.short	0x070a
 800c09c:	0207      	.short	0x0207
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 800c09e:	6803      	ldr	r3, [r0, #0]
 800c0a0:	4a0a      	ldr	r2, [pc, #40]	; (800c0cc <_ZN5codal3_cm3Pin7eventOnEi+0x3c>)
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d10b      	bne.n	800c0c0 <_ZN5codal3_cm3Pin7eventOnEi+0x30>
 800c0a8:	2100      	movs	r1, #0
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	bd08      	pop	{r3, pc}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800c0ae:	8983      	ldrh	r3, [r0, #12]
 800c0b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0f8      	beq.n	800c0aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
    this->status = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	8183      	strh	r3, [r0, #12]
}
 800c0bc:	4608      	mov	r0, r1
 800c0be:	bd08      	pop	{r3, pc}
            isTouched();
 800c0c0:	4798      	blx	r3
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	e7f1      	b.n	800c0aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
            return DEVICE_INVALID_PARAMETER;
 800c0c6:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 800c0ca:	e7ee      	b.n	800c0aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
 800c0cc:	0800bfb9 	.word	0x0800bfb9

0800c0d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>:
        ret = setAnalogValue(0);
 800c0d0:	6802      	ldr	r2, [r0, #0]
 800c0d2:	4906      	ldr	r1, [pc, #24]	; (800c0ec <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x1c>)
 800c0d4:	68d2      	ldr	r2, [r2, #12]
 800c0d6:	428a      	cmp	r2, r1
 800c0d8:	d106      	bne.n	800c0e8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x18>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c0da:	7903      	ldrb	r3, [r0, #4]
    return 0;
 800c0dc:	4804      	ldr	r0, [pc, #16]	; (800c0f0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x20>)
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c0de:	f013 0f01 	tst.w	r3, #1
    return 0;
 800c0e2:	bf18      	it	ne
 800c0e4:	2000      	movne	r0, #0
}
 800c0e6:	4770      	bx	lr
        ret = setAnalogValue(0);
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	4710      	bx	r2
 800c0ec:	0800bf31 	.word	0x0800bf31
 800c0f0:	fffffc16 	.word	0xfffffc16

0800c0f4 <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800c0f4:	8983      	ldrh	r3, [r0, #12]
 800c0f6:	071b      	lsls	r3, r3, #28
 800c0f8:	d501      	bpl.n	800c0fe <_ZN5codal3_cm3Pin15setAnalogPeriodEi+0xa>
}
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4770      	bx	lr
 800c0fe:	f7ff bfe7 	b.w	800c0d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800c102:	bf00      	nop

0800c104 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>:
Pin::Pin(
 800c104:	b430      	push	{r4, r5}
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800c106:	2500      	movs	r5, #0
            this->id = id;
 800c108:	81c1      	strh	r1, [r0, #14]
    rcc(0), port(0), pin() {
 800c10a:	4905      	ldr	r1, [pc, #20]	; (800c120 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x1c>)
            this->status = 0;
 800c10c:	8185      	strh	r5, [r0, #12]
 800c10e:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800c112:	8385      	strh	r5, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 800c114:	6085      	str	r5, [r0, #8]
            this->name = name;
 800c116:	7402      	strb	r2, [r0, #16]
            this->capability = capability;
 800c118:	7103      	strb	r3, [r0, #4]
    rcc(0), port(0), pin() {
 800c11a:	6001      	str	r1, [r0, #0]
}
 800c11c:	bc30      	pop	{r4, r5}
 800c11e:	4770      	bx	lr
 800c120:	0800d308 	.word	0x0800d308

0800c124 <_ZN5codal3_cm3Pin5setupEhh>:
) {
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	460d      	mov	r5, r1
 800c12a:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800c12c:	8a80      	ldrh	r0, [r0, #20]
 800c12e:	f7f4 fd37 	bl	8000ba0 <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800c132:	4632      	mov	r2, r6
 800c134:	4629      	mov	r1, r5
 800c136:	8ba3      	ldrh	r3, [r4, #28]
 800c138:	69a0      	ldr	r0, [r4, #24]
}
 800c13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800c13e:	f7f4 bd87 	b.w	8000c50 <gpio_set_mode>
 800c142:	bf00      	nop

0800c144 <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
 800c144:	2000      	movs	r0, #0
 800c146:	4770      	bx	lr

0800c148 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800c148:	8983      	ldrh	r3, [r0, #12]
 800c14a:	071b      	lsls	r3, r3, #28
 800c14c:	d501      	bpl.n	800c152 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xa>
}
 800c14e:	2000      	movs	r0, #0
 800c150:	4770      	bx	lr
 800c152:	f7ff bfbd 	b.w	800c0d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800c156:	bf00      	nop

0800c158 <_ZN5codal3_cm3SPI12setFrequencyEm>:
            debug_println(""); debug_flush();
        }

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
            needsInit = true;
 800c158:	2301      	movs	r3, #1
            freq = frequency;
 800c15a:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800c15c:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800c160:	2000      	movs	r0, #0
 800c162:	4770      	bx	lr

0800c164 <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800c164:	2300      	movs	r3, #0
            txCh = data;
 800c166:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            rxCh = 0;
 800c16a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800c16e:	4618      	mov	r0, r3
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800c174:	2000      	movs	r0, #0
 800c176:	4770      	bx	lr

0800c178 <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800c178:	b508      	push	{r3, lr}
            needsInit = true;
 800c17a:	2301      	movs	r3, #1
            CODAL_ASSERT(bits == 8);
 800c17c:	2a08      	cmp	r2, #8
            needsInit = true;
 800c17e:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800c182:	d003      	beq.n	800c18c <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800c184:	f240 308d 	movw	r0, #909	; 0x38d
 800c188:	f7f4 fbe2 	bl	8000950 <target_panic>
        }
 800c18c:	2000      	movs	r0, #0
 800c18e:	bd08      	pop	{r3, pc}

0800c190 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            auto pin = p->name;
 800c194:	7c05      	ldrb	r5, [r0, #16]
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c196:	4607      	mov	r7, r0
 800c198:	4688      	mov	r8, r1
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800c19a:	4628      	mov	r0, r5
 800c19c:	4611      	mov	r1, r2
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c19e:	4616      	mov	r6, r2
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800c1a0:	f000 fa16 	bl	800c5d0 <pinmap_peripheral>
 800c1a4:	4604      	mov	r4, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d016      	beq.n	800c1d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
            auto mode = pinmap_mode(pin, map);
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 fa2d 	bl	800c60c <pinmap_mode>
            auto cnf = pinmap_cnf(pin, map);
 800c1b2:	4631      	mov	r1, r6
            auto mode = pinmap_mode(pin, map);
 800c1b4:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 fa44 	bl	800c644 <pinmap_cnf>
            p->setup(mode, cnf);
 800c1bc:	4649      	mov	r1, r9
 800c1be:	4602      	mov	r2, r0
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7ff ffaf 	bl	800c124 <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	d005      	beq.n	800c1d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800c1cc:	4544      	cmp	r4, r8
 800c1ce:	d003      	beq.n	800c1d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800c1d0:	f240 308d 	movw	r0, #909	; 0x38d
 800c1d4:	f7f4 fbbc 	bl	8000950 <target_panic>
        }
 800c1d8:	4620      	mov	r0, r4
 800c1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1de:	bf00      	nop

0800c1e0 <_ZN5codal3_cm3SPI4initEv.part.1>:
        void SPI::init() {
 800c1e0:	b510      	push	{r4, lr}
            needsInit = false;
 800c1e2:	2100      	movs	r1, #0
        void SPI::init() {
 800c1e4:	4604      	mov	r4, r0
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 800c1e6:	68c0      	ldr	r0, [r0, #12]
            needsInit = false;
 800c1e8:	f884 1020 	strb.w	r1, [r4, #32]
            if (!p) { return 0; }
 800c1ec:	b110      	cbz	r0, 800c1f4 <_ZN5codal3_cm3SPI4initEv.part.1+0x14>
 800c1ee:	4a0e      	ldr	r2, [pc, #56]	; (800c228 <_ZN5codal3_cm3SPI4initEv.part.1+0x48>)
 800c1f0:	f7ff ffce 	bl	800c190 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 800c1f4:	68a0      	ldr	r0, [r4, #8]
            if (!p) { return 0; }
 800c1f6:	b118      	cbz	r0, 800c200 <_ZN5codal3_cm3SPI4initEv.part.1+0x20>
 800c1f8:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <_ZN5codal3_cm3SPI4initEv.part.1+0x4c>)
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	f7ff ffc8 	bl	800c190 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 800c200:	6860      	ldr	r0, [r4, #4]
            if (!p) { return 0; }
 800c202:	b118      	cbz	r0, 800c20c <_ZN5codal3_cm3SPI4initEv.part.1+0x2c>
 800c204:	4a0a      	ldr	r2, [pc, #40]	; (800c230 <_ZN5codal3_cm3SPI4initEv.part.1+0x50>)
 800c206:	2100      	movs	r1, #0
 800c208:	f7ff ffc2 	bl	800c190 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 800c20c:	6920      	ldr	r0, [r4, #16]
            if (!p) { return 0; }
 800c20e:	b118      	cbz	r0, 800c218 <_ZN5codal3_cm3SPI4initEv.part.1+0x38>
 800c210:	4a08      	ldr	r2, [pc, #32]	; (800c234 <_ZN5codal3_cm3SPI4initEv.part.1+0x54>)
 800c212:	2100      	movs	r1, #0
 800c214:	f7ff ffbc 	bl	800c190 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            LOG("SPI instance %p", instance);
 800c218:	4807      	ldr	r0, [pc, #28]	; (800c238 <_ZN5codal3_cm3SPI4initEv.part.1+0x58>)
 800c21a:	f7f7 fe13 	bl	8003e44 <debug_println>
        }
 800c21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG("SPI instance %p", instance);
 800c222:	f7f7 bd8f 	b.w	8003d44 <debug_flush>
 800c226:	bf00      	nop
 800c228:	0800d664 	.word	0x0800d664
 800c22c:	0800d58c 	.word	0x0800d58c
 800c230:	0800d5d4 	.word	0x0800d5d4
 800c234:	0800d61c 	.word	0x0800d61c
 800c238:	0800d354 	.word	0x0800d354

0800c23c <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if (!needsInit) { return; }
 800c23e:	f890 3020 	ldrb.w	r3, [r0, #32]
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800c242:	4604      	mov	r4, r0
 800c244:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800c248:	4615      	mov	r5, r2
            if (!needsInit) { return; }
 800c24a:	b963      	cbnz	r3, 800c266 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x2a>
            int res = HAL_OK;
            init();
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
            this->doneHandlerArg = arg;
 800c24c:	e9c4 7606 	strd	r7, r6, [r4, #24]
            if (txSize && rxSize) {
 800c250:	b13d      	cbz	r5, 800c262 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800c252:	9b06      	ldr	r3, [sp, #24]
 800c254:	b12b      	cbz	r3, 800c262 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800c256:	429d      	cmp	r5, r3
 800c258:	d003      	beq.n	800c262 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800c25a:	f240 308d 	movw	r0, #909	; 0x38d
 800c25e:	f7f4 fb77 	bl	8000950 <target_panic>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800c262:	2000      	movs	r0, #0
 800c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c266:	f7ff ffbb 	bl	800c1e0 <_ZN5codal3_cm3SPI4initEv.part.1>
 800c26a:	e7ef      	b.n	800c24c <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x10>

0800c26c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>:
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	4616      	mov	r6, r2
 800c270:	461d      	mov	r5, r3
            this->nss = NULL;
 800c272:	2300      	movs	r3, #0
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c274:	460f      	mov	r7, r1
 800c276:	4604      	mov	r4, r0
 800c278:	4a0f      	ldr	r2, [pc, #60]	; (800c2b8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x4c>)
            this->miso = &miso;
 800c27a:	e9c0 1601 	strd	r1, r6, [r0, #4]
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c27e:	6002      	str	r2, [r0, #0]
            this->nss = NULL;
 800c280:	6103      	str	r3, [r0, #16]
            this->sclk = &sclk;
 800c282:	60c5      	str	r5, [r0, #12]
            debug_print("*** codal spi mosi "); debug_print(mosi.name); 
 800c284:	480d      	ldr	r0, [pc, #52]	; (800c2bc <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x50>)
 800c286:	f7f7 fdd7 	bl	8003e38 <debug_print>
 800c28a:	7c38      	ldrb	r0, [r7, #16]
 800c28c:	f7f7 fdbc 	bl	8003e08 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 800c290:	480b      	ldr	r0, [pc, #44]	; (800c2c0 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x54>)
 800c292:	f7f7 fdd1 	bl	8003e38 <debug_print>
 800c296:	7c30      	ldrb	r0, [r6, #16]
 800c298:	f7f7 fdb6 	bl	8003e08 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 800c29c:	4809      	ldr	r0, [pc, #36]	; (800c2c4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x58>)
 800c29e:	f7f7 fdcb 	bl	8003e38 <debug_print>
 800c2a2:	7c28      	ldrb	r0, [r5, #16]
 800c2a4:	f7f7 fdb0 	bl	8003e08 <_Z11debug_printi>
            debug_println(""); debug_flush();
 800c2a8:	4807      	ldr	r0, [pc, #28]	; (800c2c8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x5c>)
 800c2aa:	f7f7 fdcb 	bl	8003e44 <debug_println>
 800c2ae:	f7f7 fd49 	bl	8003d44 <debug_flush>
        }
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0800d390 	.word	0x0800d390
 800c2bc:	0800d364 	.word	0x0800d364
 800c2c0:	0800d378 	.word	0x0800d378
 800c2c4:	0800d380 	.word	0x0800d380
 800c2c8:	0800d1f4 	.word	0x0800d1f4

0800c2cc <_ZN5codal3_cm14alarm_callbackEv>:
        }

        void alarm_callback() {
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <_ZN5codal3_cm14alarm_callbackEv+0xc>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	b108      	cbz	r0, 800c2d6 <_ZN5codal3_cm14alarm_callbackEv+0xa>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 800c2d2:	f7ff ba3b 	b.w	800b74c <_ZN5codal5Timer7triggerEv>
        }
 800c2d6:	4770      	bx	lr
 800c2d8:	20001650 	.word	0x20001650

0800c2dc <_ZN5codal3_cm5Timer9triggerInEm>:
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 800c2dc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c2e0:	b113      	cbz	r3, 800c2e8 <_ZN5codal3_cm5Timer9triggerInEm+0xc>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	f7f7 beee 	b.w	80040c4 <platform_set_alarm>
                trigger_period = t;
 800c2e8:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <_ZN5codal3_cm5Timer9triggerInEm+0x18>)
                debug_println("triggerIn b4 init!");
 800c2ea:	4803      	ldr	r0, [pc, #12]	; (800c2f8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
                trigger_period = t;
 800c2ec:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 800c2ee:	f7f7 bda9 	b.w	8003e44 <debug_println>
 800c2f2:	bf00      	nop
 800c2f4:	20001658 	.word	0x20001658
 800c2f8:	0800d3b8 	.word	0x0800d3b8

0800c2fc <_ZN5codal3_cm13tick_callbackEv>:
        void tick_callback() {
 800c2fc:	b510      	push	{r4, lr}
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800c2fe:	4c09      	ldr	r4, [pc, #36]	; (800c324 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	b13b      	cbz	r3, 800c314 <_ZN5codal3_cm13tick_callbackEv+0x18>
            CODAL_TIMESTAMP now = millis();
 800c304:	f7f7 fef8 	bl	80040f8 <millis>
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 800c308:	4a07      	ldr	r2, [pc, #28]	; (800c328 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
            CODAL_TIMESTAMP now = millis();
 800c30a:	4601      	mov	r1, r0
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 800c30c:	6813      	ldr	r3, [r2, #0]
 800c30e:	3304      	adds	r3, #4
 800c310:	4298      	cmp	r0, r3
 800c312:	d200      	bcs.n	800c316 <_ZN5codal3_cm13tick_callbackEv+0x1a>
        }
 800c314:	bd10      	pop	{r4, pc}
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 800c316:	6820      	ldr	r0, [r4, #0]
        }
 800c318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                last_trigger = now;
 800c31c:	6011      	str	r1, [r2, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 800c31e:	f7ff ba15 	b.w	800b74c <_ZN5codal5Timer7triggerEv>
 800c322:	bf00      	nop
 800c324:	20001650 	.word	0x20001650
 800c328:	20001654 	.word	0x20001654

0800c32c <_ZN5codal3_cm5Timer11syncRequestEv>:
            target_enable_irq();
#endif  //  TODO
        }

        void Timer::syncRequest() {
            if (!initialised) {
 800c32c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c330:	b1d3      	cbz	r3, 800c368 <_ZN5codal3_cm5Timer11syncRequestEv+0x3c>
        void Timer::syncRequest() {
 800c332:	b510      	push	{r4, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	4604      	mov	r4, r0
                debug_print("sync! ");  //  Warning: syncRequest called before init
                return;
            }
            target_disable_irq();
 800c338:	f7f4 faf4 	bl	8000924 <target_disable_irq>
            volatile uint32_t curr = millis();
 800c33c:	f7f7 fedc 	bl	80040f8 <millis>
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
            volatile uint32_t curr = millis();
 800c344:	9000      	str	r0, [sp, #0]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800c346:	9b00      	ldr	r3, [sp, #0]
 800c348:	69e2      	ldr	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c34a:	4620      	mov	r0, r4
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800c34c:	1a9b      	subs	r3, r3, r2
 800c34e:	9301      	str	r3, [sp, #4]
            this->prev = curr;
 800c350:	9a00      	ldr	r2, [sp, #0]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c352:	9b01      	ldr	r3, [sp, #4]
            this->prev = curr;
 800c354:	61e2      	str	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c356:	fb01 f103 	mul.w	r1, r1, r3
 800c35a:	f7ff f9e3 	bl	800b724 <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 800c35e:	b002      	add	sp, #8
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            target_enable_irq();            
 800c364:	f7f4 badc 	b.w	8000920 <target_enable_irq>
                debug_print("sync! ");  //  Warning: syncRequest called before init
 800c368:	4801      	ldr	r0, [pc, #4]	; (800c370 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 800c36a:	f7f7 bd65 	b.w	8003e38 <debug_print>
 800c36e:	bf00      	nop
 800c370:	0800d3a4 	.word	0x0800d3a4

0800c374 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4604      	mov	r4, r0
 800c378:	f7ff f960 	bl	800b63c <_ZN5codal5TimerC1Ev>
            initialised = false;
 800c37c:	2300      	movs	r3, #0
        Timer::Timer() : codal::Timer() {
 800c37e:	4d06      	ldr	r5, [pc, #24]	; (800c398 <_ZN5codal3_cm5TimerC1Ev+0x24>)
            instance = this;
 800c380:	4806      	ldr	r0, [pc, #24]	; (800c39c <_ZN5codal3_cm5TimerC1Ev+0x28>)
            trigger_period = 0;
 800c382:	4907      	ldr	r1, [pc, #28]	; (800c3a0 <_ZN5codal3_cm5TimerC1Ev+0x2c>)
            last_trigger = 0;
 800c384:	4a07      	ldr	r2, [pc, #28]	; (800c3a4 <_ZN5codal3_cm5TimerC1Ev+0x30>)
        Timer::Timer() : codal::Timer() {
 800c386:	6025      	str	r5, [r4, #0]
            initialised = false;
 800c388:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 800c38c:	6004      	str	r4, [r0, #0]
            prev = 0;
 800c38e:	61e3      	str	r3, [r4, #28]
        }
 800c390:	4620      	mov	r0, r4
            trigger_period = 0;
 800c392:	600b      	str	r3, [r1, #0]
            last_trigger = 0;
 800c394:	6013      	str	r3, [r2, #0]
        }
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	0800d3d4 	.word	0x0800d3d4
 800c39c:	20001650 	.word	0x20001650
 800c3a0:	20001658 	.word	0x20001658
 800c3a4:	20001654 	.word	0x20001654

0800c3a8 <_ZN5codal3_cm5Timer4initEv>:
        void Timer::init() {
 800c3a8:	b570      	push	{r4, r5, r6, lr}
            if (initialised) { return; }  //  If already initialised, quit.
 800c3aa:	f890 5020 	ldrb.w	r5, [r0, #32]
 800c3ae:	b105      	cbz	r5, 800c3b2 <_ZN5codal3_cm5Timer4initEv+0xa>
        }
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 800c3b4:	480e      	ldr	r0, [pc, #56]	; (800c3f0 <_ZN5codal3_cm5Timer4initEv+0x48>)
 800c3b6:	f7f7 fd45 	bl	8003e44 <debug_println>
            initialised = true;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 800c3c0:	f7f7 fe9a 	bl	80040f8 <millis>
            if (trigger_period > 0) {
 800c3c4:	4e0b      	ldr	r6, [pc, #44]	; (800c3f4 <_ZN5codal3_cm5Timer4initEv+0x4c>)
            prev = millis();
 800c3c6:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 800c3c8:	480b      	ldr	r0, [pc, #44]	; (800c3f8 <_ZN5codal3_cm5Timer4initEv+0x50>)
 800c3ca:	f7f4 fb25 	bl	8000a18 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 800c3ce:	480b      	ldr	r0, [pc, #44]	; (800c3fc <_ZN5codal3_cm5Timer4initEv+0x54>)
 800c3d0:	f7f4 fb28 	bl	8000a24 <target_set_alarm_callback>
            if (trigger_period > 0) {
 800c3d4:	6831      	ldr	r1, [r6, #0]
 800c3d6:	b121      	cbz	r1, 800c3e2 <_ZN5codal3_cm5Timer4initEv+0x3a>
                triggerIn(trigger_period);
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4798      	blx	r3
                trigger_period = 0;
 800c3e0:	6035      	str	r5, [r6, #0]
            start_background_tasks();
 800c3e2:	f000 f87b 	bl	800c4dc <start_background_tasks>
        }
 800c3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            bootloader_set_restart_callback(restart_callback);
 800c3ea:	4805      	ldr	r0, [pc, #20]	; (800c400 <_ZN5codal3_cm5Timer4initEv+0x58>)
 800c3ec:	f7f8 b80e 	b.w	800440c <bootloader_set_restart_callback>
 800c3f0:	0800d3ac 	.word	0x0800d3ac
 800c3f4:	20001658 	.word	0x20001658
 800c3f8:	0800c2fd 	.word	0x0800c2fd
 800c3fc:	0800c2cd 	.word	0x0800c2cd
 800c400:	0800c46d 	.word	0x0800c46d

0800c404 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 800c404:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 800c406:	4804      	ldr	r0, [pc, #16]	; (800c418 <_ZL10flush_taskv+0x14>)
 800c408:	f7f7 fd1c 	bl	8003e44 <debug_println>
    while (true) {
        debug_flush();
 800c40c:	f7f7 fc9a 	bl	8003d44 <debug_flush>
        codal::fiber_sleep(200);
 800c410:	20c8      	movs	r0, #200	; 0xc8
 800c412:	f7fe febd 	bl	800b190 <_ZN5codal11fiber_sleepEm>
 800c416:	e7f9      	b.n	800c40c <_ZL10flush_taskv+0x8>
 800c418:	0800d41c 	.word	0x0800d41c

0800c41c <_ZL15restart_handlerN5codal5EventE>:
static void restart_handler(codal::Event evt) {
 800c41c:	b500      	push	{lr}
 800c41e:	b083      	sub	sp, #12
 800c420:	ab02      	add	r3, sp, #8
 800c422:	e903 0003 	stmdb	r3, {r0, r1}
    debug_println("restart handler");
 800c426:	480e      	ldr	r0, [pc, #56]	; (800c460 <_ZL15restart_handlerN5codal5EventE+0x44>)
 800c428:	f7f7 fd0c 	bl	8003e44 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 800c42c:	f640 039d 	movw	r3, #2205	; 0x89d
 800c430:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c434:	429a      	cmp	r2, r3
 800c436:	d002      	beq.n	800c43e <_ZL15restart_handlerN5codal5EventE+0x22>
}
 800c438:	b003      	add	sp, #12
 800c43a:	f85d fb04 	ldr.w	pc, [sp], #4
    debug_println("restarting...");
 800c43e:	4809      	ldr	r0, [pc, #36]	; (800c464 <_ZL15restart_handlerN5codal5EventE+0x48>)
 800c440:	f7f7 fd00 	bl	8003e44 <debug_println>
    debug_force_flush();
 800c444:	f7f7 fc88 	bl	8003d58 <debug_force_flush>
    codal::fiber_sleep(5000);
 800c448:	f241 3088 	movw	r0, #5000	; 0x1388
 800c44c:	f7fe fea0 	bl	800b190 <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 800c450:	4805      	ldr	r0, [pc, #20]	; (800c468 <_ZL15restart_handlerN5codal5EventE+0x4c>)
 800c452:	f7f7 fcf7 	bl	8003e44 <debug_println>
    debug_force_flush();
 800c456:	f7f7 fc7f 	bl	8003d58 <debug_force_flush>
    scb_reset_system();
 800c45a:	f7f4 fb83 	bl	8000b64 <scb_reset_system>
 800c45e:	bf00      	nop
 800c460:	0800d428 	.word	0x0800d428
 800c464:	0800d438 	.word	0x0800d438
 800c468:	0800d448 	.word	0x0800d448

0800c46c <restart_callback>:
int restart_callback(void) {
 800c46c:	b538      	push	{r3, r4, r5, lr}
    debug_println("restart callback");
 800c46e:	4813      	ldr	r0, [pc, #76]	; (800c4bc <restart_callback+0x50>)
 800c470:	f7f7 fce8 	bl	8003e44 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 800c474:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <restart_callback+0x54>)
 800c476:	6818      	ldr	r0, [r3, #0]
 800c478:	b1c8      	cbz	r0, 800c4ae <restart_callback+0x42>
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 800c47a:	6803      	ldr	r3, [r0, #0]
 800c47c:	4a11      	ldr	r2, [pc, #68]	; (800c4c4 <restart_callback+0x58>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4293      	cmp	r3, r2
 800c482:	d10c      	bne.n	800c49e <restart_callback+0x32>
 800c484:	4d10      	ldr	r5, [pc, #64]	; (800c4c8 <restart_callback+0x5c>)
 800c486:	462c      	mov	r4, r5
        debug_print("*** ERROR: unable to send restart event ");
 800c488:	4810      	ldr	r0, [pc, #64]	; (800c4cc <restart_callback+0x60>)
 800c48a:	f7f7 fcd5 	bl	8003e38 <debug_print>
        debug_print_unsigned(status); debug_println("");
 800c48e:	4628      	mov	r0, r5
 800c490:	f7f7 fcf4 	bl	8003e7c <debug_print_unsigned>
 800c494:	480e      	ldr	r0, [pc, #56]	; (800c4d0 <restart_callback+0x64>)
 800c496:	f7f7 fcd5 	bl	8003e44 <debug_println>
}
 800c49a:	4620      	mov	r0, r4
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 800c49e:	4a0d      	ldr	r2, [pc, #52]	; (800c4d4 <restart_callback+0x68>)
 800c4a0:	ca06      	ldmia	r2, {r1, r2}
 800c4a2:	4798      	blx	r3
    if (status) {
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d0f7      	beq.n	800c49a <restart_callback+0x2e>
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	e7ec      	b.n	800c488 <restart_callback+0x1c>
        debug_println("*** ERROR: missing event bus");
 800c4ae:	480a      	ldr	r0, [pc, #40]	; (800c4d8 <restart_callback+0x6c>)
 800c4b0:	f7f7 fcc8 	bl	8003e44 <debug_println>
        return -1;
 800c4b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4b8:	e7ef      	b.n	800c49a <restart_callback+0x2e>
 800c4ba:	bf00      	nop
 800c4bc:	0800d450 	.word	0x0800d450
 800c4c0:	2000164c 	.word	0x2000164c
 800c4c4:	0800b879 	.word	0x0800b879
 800c4c8:	fffffc16 	.word	0xfffffc16
 800c4cc:	0800d484 	.word	0x0800d484
 800c4d0:	0800d1f4 	.word	0x0800d1f4
 800c4d4:	20001660 	.word	0x20001660
 800c4d8:	0800d464 	.word	0x0800d464

0800c4dc <start_background_tasks>:
        // if (restart_requested) {}
    }
}

int start_background_tasks(void) {
 800c4dc:	b570      	push	{r4, r5, r6, lr}
    //  Start the background tasks to flush the log and wait for restart requests.
    if (!flush_task_fibre) {
 800c4de:	4c29      	ldr	r4, [pc, #164]	; (800c584 <start_background_tasks+0xa8>)
int start_background_tasks(void) {
 800c4e0:	b082      	sub	sp, #8
    if (!flush_task_fibre) {
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	b37b      	cbz	r3, 800c546 <start_background_tasks+0x6a>
                debug_println("*** ERROR: create fibre failed");
            }
        }
    }
    //  Listen for restart requests.
    if (!restart_listener_started) {
 800c4e6:	4c28      	ldr	r4, [pc, #160]	; (800c588 <start_background_tasks+0xac>)
 800c4e8:	7823      	ldrb	r3, [r4, #0]
 800c4ea:	bb1b      	cbnz	r3, 800c534 <start_background_tasks+0x58>
        if (!codal::EventModel::defaultEventBus) {
 800c4ec:	4b27      	ldr	r3, [pc, #156]	; (800c58c <start_background_tasks+0xb0>)
 800c4ee:	681d      	ldr	r5, [r3, #0]
 800c4f0:	b31d      	cbz	r5, 800c53a <start_background_tasks+0x5e>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 800c4f2:	2020      	movs	r0, #32
 800c4f4:	f7f7 fd2c 	bl	8003f50 <_Znwj>
 800c4f8:	2210      	movs	r2, #16
 800c4fa:	4b25      	ldr	r3, [pc, #148]	; (800c590 <start_background_tasks+0xb4>)
 800c4fc:	9200      	str	r2, [sp, #0]
 800c4fe:	f645 0134 	movw	r1, #22580	; 0x5834
 800c502:	f640 029d 	movw	r2, #2205	; 0x89d
 800c506:	4606      	mov	r6, r0
 800c508:	f7ff f836 	bl	800b578 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	4a21      	ldr	r2, [pc, #132]	; (800c594 <start_background_tasks+0xb8>)
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	4293      	cmp	r3, r2
 800c514:	d12c      	bne.n	800c570 <start_background_tasks+0x94>
                return DEVICE_OK;

            delete newListener;
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff f846 	bl	800b5a8 <_ZN5codal8ListenerD1Ev>
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7f7 fd19 	bl	8003f54 <_ZdlPv>
            debug_println("*** ERROR: missing event bus");
        } else {
            int status = codal::EventModel::defaultEventBus->listen(
                CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, restart_handler);
            if (status) {
                debug_print("*** ERROR: unable to listen for restart event ");
 800c522:	481d      	ldr	r0, [pc, #116]	; (800c598 <start_background_tasks+0xbc>)
 800c524:	f7f7 fc88 	bl	8003e38 <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 800c528:	481c      	ldr	r0, [pc, #112]	; (800c59c <start_background_tasks+0xc0>)
 800c52a:	f7f7 fccd 	bl	8003ec8 <debug_printhex_unsigned>
 800c52e:	481c      	ldr	r0, [pc, #112]	; (800c5a0 <start_background_tasks+0xc4>)
 800c530:	f7f7 fc88 	bl	8003e44 <debug_println>
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 800c534:	2000      	movs	r0, #0
 800c536:	b002      	add	sp, #8
 800c538:	bd70      	pop	{r4, r5, r6, pc}
            debug_println("*** ERROR: missing event bus");
 800c53a:	481a      	ldr	r0, [pc, #104]	; (800c5a4 <start_background_tasks+0xc8>)
 800c53c:	f7f7 fc82 	bl	8003e44 <debug_println>
}
 800c540:	2000      	movs	r0, #0
 800c542:	b002      	add	sp, #8
 800c544:	bd70      	pop	{r4, r5, r6, pc}
        if (!codal::fiber_scheduler_running()) {
 800c546:	f7fe fc81 	bl	800ae4c <_ZN5codal23fiber_scheduler_runningEv>
 800c54a:	b918      	cbnz	r0, 800c554 <start_background_tasks+0x78>
            debug_println("no scheduler, start bg tasks later");
 800c54c:	4816      	ldr	r0, [pc, #88]	; (800c5a8 <start_background_tasks+0xcc>)
 800c54e:	f7f7 fc79 	bl	8003e44 <debug_println>
 800c552:	e7c8      	b.n	800c4e6 <start_background_tasks+0xa>
            debug_println("start bg tasks");
 800c554:	4815      	ldr	r0, [pc, #84]	; (800c5ac <start_background_tasks+0xd0>)
 800c556:	f7f7 fc75 	bl	8003e44 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 800c55a:	4915      	ldr	r1, [pc, #84]	; (800c5b0 <start_background_tasks+0xd4>)
 800c55c:	4815      	ldr	r0, [pc, #84]	; (800c5b4 <start_background_tasks+0xd8>)
 800c55e:	f7fe fcfd 	bl	800af5c <_ZN5codal12create_fiberEPFvvES1_>
 800c562:	6020      	str	r0, [r4, #0]
            if (!flush_task_fibre) {
 800c564:	2800      	cmp	r0, #0
 800c566:	d1be      	bne.n	800c4e6 <start_background_tasks+0xa>
                debug_println("*** ERROR: create fibre failed");
 800c568:	4813      	ldr	r0, [pc, #76]	; (800c5b8 <start_background_tasks+0xdc>)
 800c56a:	f7f7 fc6b 	bl	8003e44 <debug_println>
 800c56e:	e7ba      	b.n	800c4e6 <start_background_tasks+0xa>
            if(add(newListener) == DEVICE_OK)
 800c570:	4628      	mov	r0, r5
 800c572:	4631      	mov	r1, r6
 800c574:	4798      	blx	r3
 800c576:	2800      	cmp	r0, #0
 800c578:	d1cd      	bne.n	800c516 <start_background_tasks+0x3a>
                restart_listener_started = true;
 800c57a:	2301      	movs	r3, #1
}
 800c57c:	2000      	movs	r0, #0
                restart_listener_started = true;
 800c57e:	7023      	strb	r3, [r4, #0]
}
 800c580:	b002      	add	sp, #8
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	20001668 	.word	0x20001668
 800c588:	20001673 	.word	0x20001673
 800c58c:	2000164c 	.word	0x2000164c
 800c590:	0800c41d 	.word	0x0800c41d
 800c594:	0800a6b1 	.word	0x0800a6b1
 800c598:	0800d504 	.word	0x0800d504
 800c59c:	fffffc16 	.word	0xfffffc16
 800c5a0:	0800d1f4 	.word	0x0800d1f4
 800c5a4:	0800d464 	.word	0x0800d464
 800c5a8:	0800d4b0 	.word	0x0800d4b0
 800c5ac:	0800d4d4 	.word	0x0800d4d4
 800c5b0:	0800b285 	.word	0x0800b285
 800c5b4:	0800c405 	.word	0x0800c405
 800c5b8:	0800d4e4 	.word	0x0800d4e4

0800c5bc <_GLOBAL__sub_I_restart_callback>:
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f640 029d 	movw	r2, #2205	; 0x89d
 800c5c2:	f645 0134 	movw	r1, #22580	; 0x5834
 800c5c6:	4801      	ldr	r0, [pc, #4]	; (800c5cc <_GLOBAL__sub_I_restart_callback+0x10>)
 800c5c8:	f7ff bc48 	b.w	800be5c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 800c5cc:	20001660 	.word	0x20001660

0800c5d0 <pinmap_peripheral>:
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800c5d0:	28ff      	cmp	r0, #255	; 0xff
 800c5d2:	d00e      	beq.n	800c5f2 <pinmap_peripheral+0x22>
CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 800c5d4:	b508      	push	{r3, lr}
    return cnf;
}

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800c5d6:	780b      	ldrb	r3, [r1, #0]
 800c5d8:	2bff      	cmp	r3, #255	; 0xff
 800c5da:	d104      	bne.n	800c5e6 <pinmap_peripheral+0x16>
 800c5dc:	e00c      	b.n	800c5f8 <pinmap_peripheral+0x28>
 800c5de:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800c5e2:	2bff      	cmp	r3, #255	; 0xff
 800c5e4:	d008      	beq.n	800c5f8 <pinmap_peripheral+0x28>
        if (map->pin == pin) { return map->peripheral; }
 800c5e6:	4298      	cmp	r0, r3
 800c5e8:	d1f9      	bne.n	800c5de <pinmap_peripheral+0xe>
 800c5ea:	6848      	ldr	r0, [r1, #4]
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d003      	beq.n	800c5f8 <pinmap_peripheral+0x28>
}
 800c5f0:	bd08      	pop	{r3, pc}
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c5f6:	4770      	bx	lr
        { error("pinmap not found for peripheral"); }
 800c5f8:	4803      	ldr	r0, [pc, #12]	; (800c608 <pinmap_peripheral+0x38>)
 800c5fa:	f7f7 fc23 	bl	8003e44 <debug_println>
 800c5fe:	f7f7 fba1 	bl	8003d44 <debug_flush>
 800c602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c606:	bd08      	pop	{r3, pc}
 800c608:	0800d56c 	.word	0x0800d56c

0800c60c <pinmap_mode>:
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 800c60c:	28ff      	cmp	r0, #255	; 0xff
 800c60e:	d00e      	beq.n	800c62e <pinmap_mode+0x22>
CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 800c610:	b508      	push	{r3, lr}
    return CM_PERIPHERAL_NC;
}

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800c612:	780b      	ldrb	r3, [r1, #0]
 800c614:	2bff      	cmp	r3, #255	; 0xff
 800c616:	d104      	bne.n	800c622 <pinmap_mode+0x16>
 800c618:	e00a      	b.n	800c630 <pinmap_mode+0x24>
 800c61a:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800c61e:	2bff      	cmp	r3, #255	; 0xff
 800c620:	d006      	beq.n	800c630 <pinmap_mode+0x24>
        if (map->pin == pin) { return map->mode; }
 800c622:	4298      	cmp	r0, r3
 800c624:	d1f9      	bne.n	800c61a <pinmap_mode+0xe>
 800c626:	7a48      	ldrb	r0, [r1, #9]
    if (mode == CM_PINMODE_NC) // no mapping available
 800c628:	28ff      	cmp	r0, #255	; 0xff
 800c62a:	d001      	beq.n	800c630 <pinmap_mode+0x24>
}
 800c62c:	bd08      	pop	{r3, pc}
 800c62e:	4770      	bx	lr
        { error("pinmap not found for mode"); }
 800c630:	4803      	ldr	r0, [pc, #12]	; (800c640 <pinmap_mode+0x34>)
 800c632:	f7f7 fc07 	bl	8003e44 <debug_println>
 800c636:	f7f7 fb85 	bl	8003d44 <debug_flush>
 800c63a:	20ff      	movs	r0, #255	; 0xff
}
 800c63c:	bd08      	pop	{r3, pc}
 800c63e:	bf00      	nop
 800c640:	0800d550 	.word	0x0800d550

0800c644 <pinmap_cnf>:
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 800c644:	28ff      	cmp	r0, #255	; 0xff
 800c646:	d00e      	beq.n	800c666 <pinmap_cnf+0x22>
CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 800c648:	b508      	push	{r3, lr}
    return CM_PINMODE_NC;
}

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800c64a:	780b      	ldrb	r3, [r1, #0]
 800c64c:	2bff      	cmp	r3, #255	; 0xff
 800c64e:	d104      	bne.n	800c65a <pinmap_cnf+0x16>
 800c650:	e00a      	b.n	800c668 <pinmap_cnf+0x24>
 800c652:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800c656:	2bff      	cmp	r3, #255	; 0xff
 800c658:	d006      	beq.n	800c668 <pinmap_cnf+0x24>
        if (map->pin == pin) { return map->cnf; }
 800c65a:	4298      	cmp	r0, r3
 800c65c:	d1f9      	bne.n	800c652 <pinmap_cnf+0xe>
 800c65e:	7a88      	ldrb	r0, [r1, #10]
    if (cnf == CM_PINCNF_NC) // no mapping available
 800c660:	28ff      	cmp	r0, #255	; 0xff
 800c662:	d001      	beq.n	800c668 <pinmap_cnf+0x24>
}
 800c664:	bd08      	pop	{r3, pc}
 800c666:	4770      	bx	lr
        { error("pinmap not found for cnf"); }
 800c668:	4803      	ldr	r0, [pc, #12]	; (800c678 <pinmap_cnf+0x34>)
 800c66a:	f7f7 fbeb 	bl	8003e44 <debug_println>
 800c66e:	f7f7 fb69 	bl	8003d44 <debug_flush>
 800c672:	20ff      	movs	r0, #255	; 0xff
}
 800c674:	bd08      	pop	{r3, pc}
 800c676:	bf00      	nop
 800c678:	0800d534 	.word	0x0800d534

0800c67c <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800c67c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop

0800c684 <_ZN5codal3I2C4stopEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800c684:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop

0800c68c <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800c68c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop

0800c694 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800c694:	b530      	push	{r4, r5, lr}
      uint8_t command[2];
      command[0] = reg;
      command[1] = value;

      return write(address, command, 2);
 800c696:	2500      	movs	r5, #0
  {
 800c698:	b085      	sub	sp, #20
      return write(address, command, 2);
 800c69a:	6804      	ldr	r4, [r0, #0]
 800c69c:	9500      	str	r5, [sp, #0]
      command[0] = reg;
 800c69e:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800c6a2:	f88d 300d 	strb.w	r3, [sp, #13]
      return write(address, command, 2);
 800c6a6:	6964      	ldr	r4, [r4, #20]
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	aa03      	add	r2, sp, #12
 800c6ac:	47a0      	blx	r4
}
 800c6ae:	b005      	add	sp, #20
 800c6b0:	bd30      	pop	{r4, r5, pc}
 800c6b2:	bf00      	nop

0800c6b4 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800c6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b8:	b086      	sub	sp, #24
 800c6ba:	6806      	ldr	r6, [r0, #0]
 800c6bc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	f88d 200f 	strb.w	r2, [sp, #15]
 800c6c8:	6976      	ldr	r6, [r6, #20]
 800c6ca:	4688      	mov	r8, r1
    int result;

    if (repeated)
 800c6cc:	b185      	cbz	r5, 800c6f0 <_ZN5codal3I2C12readRegisterEthPhib+0x3c>
        result = write(address, &reg, 1, true);
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	f10d 020f 	add.w	r2, sp, #15
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	47b0      	blx	r6
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800c6d8:	b938      	cbnz	r0, 800c6ea <_ZN5codal3I2C12readRegisterEthPhib+0x36>
        return result;

    result = read(address, data, length);
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	9000      	str	r0, [sp, #0]
 800c6de:	69dd      	ldr	r5, [r3, #28]
 800c6e0:	463a      	mov	r2, r7
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6e8:	47a8      	blx	r5
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800c6ea:	b006      	add	sp, #24
 800c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c6f4:	aa06      	add	r2, sp, #24
      return write(address, &data, 1);
 800c6f6:	9500      	str	r5, [sp, #0]
 800c6f8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	47b0      	blx	r6
 800c700:	e7ea      	b.n	800c6d8 <_ZN5codal3I2C12readRegisterEthPhib+0x24>
 800c702:	bf00      	nop

0800c704 <_ZN5codal3I2C5writeEtPhib>:
  {
 800c704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c708:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
      if (data == NULL || len <= 0)
 800c70c:	2a00      	cmp	r2, #0
 800c70e:	d03c      	beq.n	800c78a <_ZN5codal3I2C5writeEtPhib+0x86>
 800c710:	2b00      	cmp	r3, #0
 800c712:	dd3a      	ble.n	800c78a <_ZN5codal3I2C5writeEtPhib+0x86>
 800c714:	4688      	mov	r8, r1
      start();
 800c716:	6801      	ldr	r1, [r0, #0]
 800c718:	461e      	mov	r6, r3
 800c71a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800c790 <_ZN5codal3I2C5writeEtPhib+0x8c>
 800c71e:	684b      	ldr	r3, [r1, #4]
 800c720:	4682      	mov	sl, r0
 800c722:	454b      	cmp	r3, r9
 800c724:	4614      	mov	r4, r2
 800c726:	d128      	bne.n	800c77a <_ZN5codal3I2C5writeEtPhib+0x76>
      write((uint8_t)address);
 800c728:	68cd      	ldr	r5, [r1, #12]
 800c72a:	f8df b068 	ldr.w	fp, [pc, #104]	; 800c794 <_ZN5codal3I2C5writeEtPhib+0x90>
 800c72e:	455d      	cmp	r5, fp
 800c730:	d11b      	bne.n	800c76a <_ZN5codal3I2C5writeEtPhib+0x66>
 800c732:	4426      	add	r6, r4
 800c734:	e005      	b.n	800c742 <_ZN5codal3I2C5writeEtPhib+0x3e>
 800c736:	3401      	adds	r4, #1
      for (int i = 0; i < len; i++)
 800c738:	42a6      	cmp	r6, r4
 800c73a:	d00a      	beq.n	800c752 <_ZN5codal3I2C5writeEtPhib+0x4e>
 800c73c:	f8da 3000 	ldr.w	r3, [sl]
 800c740:	68dd      	ldr	r5, [r3, #12]
 800c742:	455d      	cmp	r5, fp
 800c744:	d0f7      	beq.n	800c736 <_ZN5codal3I2C5writeEtPhib+0x32>
          write(data[i]);
 800c746:	7821      	ldrb	r1, [r4, #0]
 800c748:	4650      	mov	r0, sl
 800c74a:	3401      	adds	r4, #1
 800c74c:	47a8      	blx	r5
      for (int i = 0; i < len; i++)
 800c74e:	42a6      	cmp	r6, r4
 800c750:	d1f4      	bne.n	800c73c <_ZN5codal3I2C5writeEtPhib+0x38>
      if (!repeated)
 800c752:	b117      	cbz	r7, 800c75a <_ZN5codal3I2C5writeEtPhib+0x56>
      return DEVICE_OK;
 800c754:	2000      	movs	r0, #0
  }
 800c756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          stop();
 800c75a:	f8da 3000 	ldr.w	r3, [sl]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	454b      	cmp	r3, r9
 800c762:	d10e      	bne.n	800c782 <_ZN5codal3I2C5writeEtPhib+0x7e>
      return DEVICE_OK;
 800c764:	4638      	mov	r0, r7
  }
 800c766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      write((uint8_t)address);
 800c76a:	fa5f f188 	uxtb.w	r1, r8
 800c76e:	4650      	mov	r0, sl
 800c770:	47a8      	blx	r5
 800c772:	f8da 3000 	ldr.w	r3, [sl]
 800c776:	68dd      	ldr	r5, [r3, #12]
 800c778:	e7db      	b.n	800c732 <_ZN5codal3I2C5writeEtPhib+0x2e>
      start();
 800c77a:	4798      	blx	r3
 800c77c:	f8da 1000 	ldr.w	r1, [sl]
 800c780:	e7d2      	b.n	800c728 <_ZN5codal3I2C5writeEtPhib+0x24>
          stop();
 800c782:	4650      	mov	r0, sl
 800c784:	4798      	blx	r3
 800c786:	4638      	mov	r0, r7
 800c788:	e7e5      	b.n	800c756 <_ZN5codal3I2C5writeEtPhib+0x52>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800c78a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800c78e:	e7e2      	b.n	800c756 <_ZN5codal3I2C5writeEtPhib+0x52>
 800c790:	0800c685 	.word	0x0800c685
 800c794:	0800c68d 	.word	0x0800c68d

0800c798 <_ZN5codal3I2C4readEtPhib>:
{
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	b083      	sub	sp, #12
 800c79e:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (data == NULL || len <= 0)
 800c7a2:	2a00      	cmp	r2, #0
 800c7a4:	d05a      	beq.n	800c85c <_ZN5codal3I2C4readEtPhib+0xc4>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	4698      	mov	r8, r3
 800c7aa:	dd57      	ble.n	800c85c <_ZN5codal3I2C4readEtPhib+0xc4>
    start();
 800c7ac:	6805      	ldr	r5, [r0, #0]
 800c7ae:	4692      	mov	sl, r2
 800c7b0:	686b      	ldr	r3, [r5, #4]
 800c7b2:	4a2c      	ldr	r2, [pc, #176]	; (800c864 <_ZN5codal3I2C4readEtPhib+0xcc>)
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d13d      	bne.n	800c836 <_ZN5codal3I2C4readEtPhib+0x9e>
    write((uint8_t)(address | 0x01));
 800c7ba:	68eb      	ldr	r3, [r5, #12]
 800c7bc:	4f2a      	ldr	r7, [pc, #168]	; (800c868 <_ZN5codal3I2C4readEtPhib+0xd0>)
 800c7be:	42bb      	cmp	r3, r7
 800c7c0:	d141      	bne.n	800c846 <_ZN5codal3I2C4readEtPhib+0xae>
    for (i = 0; i < len-1; i++)
 800c7c2:	f1b8 0f01 	cmp.w	r8, #1
 800c7c6:	d01b      	beq.n	800c800 <_ZN5codal3I2C4readEtPhib+0x68>
 800c7c8:	f1a8 0802 	sub.w	r8, r8, #2
 800c7cc:	eb0a 0b08 	add.w	fp, sl, r8
 800c7d0:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800c7d4:	e005      	b.n	800c7e2 <_ZN5codal3I2C4readEtPhib+0x4a>
        data[i] = read();
 800c7d6:	200b      	movs	r0, #11
 800c7d8:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800c7dc:	45a3      	cmp	fp, r4
 800c7de:	d00b      	beq.n	800c7f8 <_ZN5codal3I2C4readEtPhib+0x60>
 800c7e0:	6835      	ldr	r5, [r6, #0]
        data[i] = read();
 800c7e2:	692d      	ldr	r5, [r5, #16]
 800c7e4:	42bd      	cmp	r5, r7
 800c7e6:	d0f6      	beq.n	800c7d6 <_ZN5codal3I2C4readEtPhib+0x3e>
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	47a8      	blx	r5
 800c7ee:	b2c0      	uxtb	r0, r0
 800c7f0:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800c7f4:	45a3      	cmp	fp, r4
 800c7f6:	d1f3      	bne.n	800c7e0 <_ZN5codal3I2C4readEtPhib+0x48>
 800c7f8:	f108 0801 	add.w	r8, r8, #1
 800c7fc:	6835      	ldr	r5, [r6, #0]
 800c7fe:	44c2      	add	sl, r8
    data[i] = read(NACK);
 800c800:	692b      	ldr	r3, [r5, #16]
 800c802:	42bb      	cmp	r3, r7
 800c804:	d112      	bne.n	800c82c <_ZN5codal3I2C4readEtPhib+0x94>
 800c806:	200b      	movs	r0, #11
 800c808:	f88a 0000 	strb.w	r0, [sl]
    if (!repeated)
 800c80c:	f1b9 0f00 	cmp.w	r9, #0
 800c810:	d003      	beq.n	800c81a <_ZN5codal3I2C4readEtPhib+0x82>
 800c812:	2000      	movs	r0, #0
}
 800c814:	b003      	add	sp, #12
 800c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        stop();
 800c81a:	6833      	ldr	r3, [r6, #0]
 800c81c:	4a11      	ldr	r2, [pc, #68]	; (800c864 <_ZN5codal3I2C4readEtPhib+0xcc>)
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4293      	cmp	r3, r2
 800c822:	d117      	bne.n	800c854 <_ZN5codal3I2C4readEtPhib+0xbc>
 800c824:	4648      	mov	r0, r9
}
 800c826:	b003      	add	sp, #12
 800c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data[i] = read(NACK);
 800c82c:	2101      	movs	r1, #1
 800c82e:	4630      	mov	r0, r6
 800c830:	4798      	blx	r3
 800c832:	b2c0      	uxtb	r0, r0
 800c834:	e7e8      	b.n	800c808 <_ZN5codal3I2C4readEtPhib+0x70>
 800c836:	9101      	str	r1, [sp, #4]
    start();
 800c838:	4798      	blx	r3
 800c83a:	6835      	ldr	r5, [r6, #0]
 800c83c:	4f0a      	ldr	r7, [pc, #40]	; (800c868 <_ZN5codal3I2C4readEtPhib+0xd0>)
    write((uint8_t)(address | 0x01));
 800c83e:	68eb      	ldr	r3, [r5, #12]
 800c840:	9901      	ldr	r1, [sp, #4]
 800c842:	42bb      	cmp	r3, r7
 800c844:	d0bd      	beq.n	800c7c2 <_ZN5codal3I2C4readEtPhib+0x2a>
 800c846:	f041 0101 	orr.w	r1, r1, #1
 800c84a:	b2c9      	uxtb	r1, r1
 800c84c:	4630      	mov	r0, r6
 800c84e:	4798      	blx	r3
 800c850:	6835      	ldr	r5, [r6, #0]
 800c852:	e7b6      	b.n	800c7c2 <_ZN5codal3I2C4readEtPhib+0x2a>
        stop();
 800c854:	4630      	mov	r0, r6
 800c856:	4798      	blx	r3
 800c858:	4648      	mov	r0, r9
 800c85a:	e7db      	b.n	800c814 <_ZN5codal3I2C4readEtPhib+0x7c>
        return DEVICE_INVALID_PARAMETER;
 800c85c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800c860:	e7d8      	b.n	800c814 <_ZN5codal3I2C4readEtPhib+0x7c>
 800c862:	bf00      	nop
 800c864:	0800c685 	.word	0x0800c685
 800c868:	0800c68d 	.word	0x0800c68d

0800c86c <_ZN5codal3I2CC1ERNS_3PinES2_>:
I2C::I2C(Pin &sda, Pin &scl)
 800c86c:	4b01      	ldr	r3, [pc, #4]	; (800c874 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 800c86e:	6003      	str	r3, [r0, #0]
}
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	0800d6b4 	.word	0x0800d6b4
	...

0800c880 <_ZN3pxt20functionsAndBytecodeE>:
 800c880:	08010801 42424242 08010801 8de9d83e     ....BBBB....>...
 800c890:	08009819 08009c69 08009c95 08008df5     ....i...........
 800c8a0:	080094dd 08009f59 0800a5b9 08009765     ....Y.......e...
 800c8b0:	08009b31 08009b3d 08007f49 08009b49     1...=...I...I...
 800c8c0:	080097c9 08009b11 08008c69 08008295     ........i.......
 800c8d0:	080081cd 0800816d 080083b9 08007d09     ....m........}..
 800c8e0:	08007e81 08007e91 08007ea5 08007ec1     .~...~...~...~..
 800c8f0:	080087a9 08008709 08008ce5 08008d39     ............9...
 800c900:	0800a5f5 0800a5f9 0800cc10 0800cbb0     ................
 800c910:	0800cbe0 0800cc40 08009649 08009825     ....@...I...%...
 800c920:	080095f5 08008de9 0800a615 0800a60d     ................
 800c930:	0800a611 08008b19 08008949 080089b1     ........I.......
 800c940:	08007af9 08007eed 08007f01 08007f05     .z...~..........
 800c950:	08007f0d 08007f19 08007f21 08007f31     ........!...1...
 800c960:	08007f39 08007f41 080088fd 0800892d     9...A.......-...
 800c970:	08007a25 08007a31 08007a51 08007e65     %z..1z..Qz..e~..
 800c980:	08007a8d 08007b1d 08007db5 08007c8d     .z...{...}...|..
 800c990:	08007cc1 08007cf1 08007d01 080088d9     .|...|...}......
 800c9a0:	080083c5 080083ed 08008415 0800846d     ............m...
 800c9b0:	08008495 08008299 08008389 080082c5     ................
 800c9c0:	080082f1 08008319 08008341 08008361     ........A...a...
 800c9d0:	08008a6d 08008a91 08008ab5 08008ad9     m...............
 800c9e0:	08008af9 080088dd 080088ed 08008789     ................
 800c9f0:	08008799 080084f5 0800851d 08007ecd     .............~..
 800ca00:	08008545 080085f9 0800860d 08008621     E...........!...
 800ca10:	08008635 08008649 0800865d 08008671     5...I...]...q...
 800ca20:	08008685 08008699 080086ad 080086c1     ................
 800ca30:	080086d5 080086e9 08007edd 08007ee5     .........~...~..
 800ca40:	0800a5fd 08007f49 08007f59 08007f91     ....I...Y.......
 800ca50:	08007f95 08007f99 08007fad 08007fe1     ................
 800ca60:	08007fe5 08007ff1 08007ff9 0800800d     ................
 800ca70:	0800802d 080080b5 080080c9 08008101     -...............
 800ca80:	08008115 08008121 08008125 08008c19     ....!...%.......
 800ca90:	080072f5 08007309 0800731d 08007331     .r...s...s..1s..
 800caa0:	08007345 08007359 0800736d 08007381     Es..Ys..ms...s..
 800cab0:	080073f9 080073fd 08007415 08007729     .s...s...t..)w..
 800cac0:	08007865 08007479 0800747d 080074a9     ex..yt..}t...t..
 800cad0:	080074d1 08007551 08007591 08007605     .t..Qu...u...v..
 800cae0:	08007619 08009639 0800963d 08007881     .v..9...=....x..
 800caf0:	08007885 08007889 0800788d 08007895     .x...x...x...x..
 800cb00:	08007899 0800789d 080078a1 080078b1     .x...x...x...x..
 800cb10:	080078b5 080078bd 080078d1 08002e05     .x...x...x......
 800cb20:	08002e99 08002f2d 08002e35 08002da5     ....-/..5....-..
 800cb30:	08002dd5 08009f59 0800a24d 0800a2f5     .-..Y...M.......
 800cb40:	0800a309 0800a319 0800a321 0800a32d     ........!...-...
 800cb50:	0800a335 0800a33d 0800a34d 0800a355     5...=...M...U...
 800cb60:	0800a375 0800a3ad 0800a42d 0800a445     u.......-...E...
 800cb70:	0800a449 0800a45d 0800a129 0800a141     I...]...)...A...
 800cb80:	0800a151 0800a159 0800a165 0800a1b5     Q...Y...e.......
 800cb90:	0800a201 0800a4e9 0800a511 0800a551     ............Q...
 800cba0:	0800a579 00000000 00000000 00000000     y...............

0800cbb0 <_ZN3pxt9buffer_vtE>:
 800cbb0:	f9040008 00000000 00000003 00000000     ................
 800cbc0:	080078d5 08008c69 00000000 080078e5     .x..i........x..
	...

0800cbe0 <_ZN3pxt9number_vtE>:
 800cbe0:	f902000c 00000000 00000002 00000000     ................
 800cbf0:	080078d5 08008c69 00000000 080078e1     .x..i........x..
	...

0800cc10 <_ZN3pxt9string_vtE>:
 800cc10:	f9030008 00000000 00000001 00000000     ................
 800cc20:	080078d5 08008c69 00000000 080078d9     .x..i........x..
	...

0800cc40 <_ZN3pxt16RefAction_vtableE>:
 800cc40:	f904000c 00000000 00000004 00000000     ................
 800cc50:	0800975d 08009661 080095cd 0800960d     ]...a...........
	...

0800cc70 <_ZN3pxtL13RefMap_vtableE>:
 800cc70:	f9040014 00000000 00000008 00000000     ................
 800cc80:	08009655 08009699 080095dd 0800961d     U...............
	...

0800cca0 <_ZN3pxtL18RefRefLocal_vtableE>:
 800cca0:	f9040008 00000000 00000007 00000000     ................
 800ccb0:	08009761 08009689 080095d5 08009619     a...............
	...

0800ccd0 <_ZN3pxtL20RefCollection_vtableE>:
 800ccd0:	f904000c 00000000 00000006 00000000     ................
 800cce0:	0800964d 08009a59 080095c5 08009609     M...Y...........
 800ccf0:	00000000 33323130 37363534 62613938     ....0123456789ab
 800cd00:	66656463 00000000 6c696166 74206465     cdef....failed t
 800cd10:	20657079 63656863 6f66206b 70252072     ype check for %p
 800cd20:	00000000 25205456 202d2070 746a626f     ....VT %p - objt
 800cd30:	20657079 63206425 7373616c 25206f4e     ype %d classNo %
 800cd40:	00000064 7373696d 20676e69 706f7270     d...missing prop
 800cd50:	79747265 206e6f20 00007025 6665525b     erty on %p..[Ref
 800cd60:	656a624f 72207463 3d736665 76206425     Object refs=%d v
 800cd70:	70253d74 3d6c6320 73206425 64253d7a     t=%p cl=%d sz=%d
 800cd80:	0000005d 74614e5b 20657669 005d7025     ]...[Native %p].
 800cd90:	2073255b 3d207025 5d732520 00000000     [%s %p = %s]....

0800cda0 <_ZN3pxtL10sBooleanTpE>:
 800cda0:	54585040 6f623a40 61656c6f 0000006e     @PXT@:boolean...

0800cdb0 <_ZN3pxtL10sUndefinedE>:
 800cdb0:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800cdc0 <_ZN3pxtL11emptyBufferE>:
 800cdc0:	54585040 00003a23 00000000              @PXT#:......

0800cdcc <_ZN3pxtL11emptyStringE>:
 800cdcc:	54585040 00003a40                       @PXT@:..

0800cdd4 <_ZN3pxtL11sFunctionTpE>:
 800cdd4:	54585040 75663a40 6974636e 00006e6f     @PXT@:function..

0800cde4 <_ZN3pxtL12sUndefinedTpE>:
 800cde4:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800cdf4 <_ZN3pxtL4sInfE>:
 800cdf4:	54585040 6e493a40 696e6966 00007974     @PXT@:Infinity..

0800ce04 <_ZN3pxtL4sNaNE>:
 800ce04:	54585040 614e3a40 0000004e              @PXT@:NaN...

0800ce10 <_ZN3pxtL5sMInfE>:
 800ce10:	54585040 492d3a40 6e69666e 00797469     @PXT@:-Infinity.

0800ce20 <_ZN3pxtL5sNullE>:
 800ce20:	54585040 756e3a40 00006c6c              @PXT@:null..

0800ce2c <_ZN3pxtL5sTrueE>:
 800ce2c:	54585040 72743a40 00006575              @PXT@:true..

0800ce38 <_ZN3pxtL6sFalseE>:
 800ce38:	54585040 61663a40 0065736c              @PXT@:false.

0800ce44 <_ZN3pxtL7sObjectE>:
 800ce44:	54585040 4f5b3a40 63656a62 00005d74     @PXT@:[Object]..

0800ce54 <_ZN3pxtL9sFunctionE>:
 800ce54:	54585040 465b3a40 74636e75 5d6e6f69     @PXT@:[Function]
 800ce64:	00000000                                ....

0800ce68 <_ZN3pxtL9sNumberTpE>:
 800ce68:	54585040 756e3a40 7265626d 00000000     @PXT@:number....

0800ce78 <_ZN3pxtL9sObjectTpE>:
 800ce78:	54585040 626f3a40 7463656a 00000000     @PXT@:object....

0800ce88 <_ZN3pxtL9sStringTpE>:
 800ce88:	54585040 74733a40 676e6972 00000000     @PXT@:string....
 800ce98:	414d2d2d 00004b52 253a5052 64252f70     --MARK..RP:%p/%d
 800cea8:	00000000 253a4752 64252f70 00000000     ....RG:%p/%d....
 800ceb8:	25204347 64252f64 65726620 00000065     GC %d/%d free...
 800cec8:	52666552 6f4c6665 206c6163 72207025     RefRefLocal %p r
 800ced8:	2064253d 70253d76 00000000 652d2d2d     =%d v=%p....---e
 800cee8:	5f636578 616e6962 61207972 20726464     xec_binary addr 
 800cef8:	00000000 6576202c 00002072 4220283a     ...., ver ..:( B
 800cf08:	72206461 69746e75 7620656d 69737265     ad runtime versi
 800cf18:	00006e6f 652d2d2d 5f636578 616e6962     on..---exec_bina
 800cf28:	61207972 636f6c6c 00657461 652d2d2d     ry allocate.---e
 800cf38:	5f636578 616e6962 63207972 61706d6f     xec_binary compa
 800cf48:	00006572 652d2d2d 5f636578 616e6962     re..---exec_bina
 800cf58:	69207972 5074696e 43667265 746e756f     ry initPerfCount
 800cf68:	00737265 652d2d2d 5f636578 616e6962     ers.---exec_bina
 800cf78:	69207972 5274696e 69746e75 0000656d     ry initRuntime..
 800cf88:	652d2d2d 5f636578 616e6962 72207972     ---exec_binary r
 800cf98:	63416e75 6e6f6974 00000030 652d2d2d     unAction0...---e
 800cfa8:	5f636578 616e6962 72207972 61656c65     xec_binary relea
 800cfb8:	69466573 00726562 4620283a 656c6961     seFiber.:( Faile
 800cfc8:	61702064 61697472 6c66206c 00687361     d partial flash.
 800cfd8:	43666552 656c6c6f 6f697463 7025206e     RefCollection %p
 800cfe8:	253d7220 69732064 253d657a 00000064      r=%d size=%d...
 800cff8:	52666552 726f6365 70252064 253d7220     RefRecord %p r=%
 800d008:	69732064 253d657a 79622064 00736574     d size=%d bytes.
 800d018:	4d666552 25207061 3d722070 73206425     RefMap %p r=%d s
 800d028:	3d657a69 00006425 6d676553 3a746e65     ize=%d..Segment:
 800d038:	2c702520 6e656c20 3a687467 2c642520      %p, length: %d,
 800d048:	7a697320 25203a65 00000064 25203e2d      size: %d...-> %
 800d058:	00000064 2a2a2a2a 6843202a 206b6365     d...***** Check 
 800d068:	6c696146 203a6465 00000000 6f727245     Failed: ....Erro
 800d078:	25203a72 255b2064 00005d64 41666552     r: %d [%d]..RefA
 800d088:	6f697463 7025206e 253d7220 63702064     ction %p r=%d pc
 800d098:	2058253d 657a6973 0064253d 692d2d2d     =%X size=%d.---i
 800d0a8:	4374696e 6c61646f 75706320 6f6c635f     nitCodal cpu_clo
 800d0b8:	695f6b63 0074696e 692d2d2d 4374696e     ck_init.---initC
 800d0c8:	6c61646f 6d6f6320 696e496d 00000074     odal commInit...
 800d0d8:	692d2d2d 4374696e 6c61646f 68637320     ---initCodal sch
 800d0e8:	6c756465 695f7265 0074696e 692d2d2d     eduler_init.---i
 800d0f8:	4374696e 6c61646f 6d6f6320 656e6f70     nitCodal compone
 800d108:	2e73746e 74696e69 00000000 692d2d2d     nts.init....---i
 800d118:	4374696e 6c61646f 62737520 696e695f     nitCodal usb_ini
 800d128:	00000074 692d2d2d 4374696e 6c61646f     t...---initCodal
 800d138:	6e6f6420 00000065 64255352 2f70253a      done...RS%d:%p/
 800d148:	00006425 6e6b6e75 006e776f 73252023     %d..unknown.# %s
 800d158:	00000000 73252023 7025203a 00000000     ....# %s: %p....

0800d168 <_ZTVN5codal16STM32BluePillPinE>:
	...
 800d170:	0800bfd1 0800bf2d 0800c059 0800bf31     ....-...Y...1...
 800d180:	0800bf4d 0800bf79 0800bf7d 0800bf8d     M...y...}.......
 800d190:	0800bf9d 0800bfa9 0800bfb9 0800a235     ............5...
 800d1a0:	0800c0f5 0800a23d 0800bfc1 0800c031     ....=.......1...
 800d1b0:	0800bfc9 0800a245 0800c091 702d2d2d     ....E.......---p
 800d1c0:	3a3a7478 5f757063 636f6c63 6e695f6b     xt::cpu_clock_in
 800d1d0:	00007469 702d2d2d 3a3a7478 74616c70     it..---pxt::plat
 800d1e0:	6d726f66 696e695f 00000074 454d440a     form_init....DME
 800d1f0:	0a3a4753 00000000 00000a0a              SG:.........

0800d1fc <_ZTVN5codal11CodalDeviceE>:
	...
 800d204:	0800a861 0800a83d 0800a859 0800a835     a...=...Y...5...
 800d214:	0800a855 0800a84d 0800a845 00007830     U...M...E...0x..
 800d224:	53454d44 696c2047 7420656e 6c206f6f     DMESG line too l
 800d234:	21676e6f 0000000a 00000025 003f3f3f     ong!....%...???.
 800d244:	00000a0d                                ....

0800d248 <_ZTVN5codal5TimerE>:
	...
 800d250:	08003f49 08003f49 0800b631 0800b625     I?..I?..1...%...

0800d260 <_ZTVN5codal14CodalComponentE>:
	...
 800d268:	08009cfd 0800a6a9 0800a6ad 0800b8a5     ................
 800d278:	0800b8bd                                ....

0800d27c <_ZTVN5codal10EventModelE>:
	...
 800d284:	0800b879 0800a6b1 0800aa5d              y.......]...

0800d290 <_ZTVN5codal10MessageBusE>:
	...
 800d298:	0800bdc5 0800b991 0800b90d 0800b88d     ................
 800d2a8:	0800baf5 0800bb81 fffffff8 00000000     ................
 800d2b8:	08009cfd 0800a6a9 0800a6ad 0800bb79     ............y...
 800d2c8:	0800bb95                                ....

0800d2cc <_ZTVN5codal3_cm3I2CE>:
	...
 800d2d4:	0800bf05 0800c685 0800c685 0800c68d     ................
 800d2e4:	0800c68d 0800bf09 0800c695 0800bf09     ................
 800d2f4:	0800bf0d 206e6970 00000000              ....pin ....

0800d300 <_ZTVN5codal3_cm3PinE>:
	...
 800d308:	0800bfd1 0800bf2d 0800c059 0800bf31     ....-...Y...1...
 800d318:	0800bf4d 0800bf79 0800bf7d 0800bf8d     M...y...}.......
 800d328:	0800bf9d 0800bfa9 0800bfb9 0800a235     ............5...
 800d338:	0800c0f5 0800a23d 0800bfc1 0800c031     ....=.......1...
 800d348:	0800bfc9 0800a245 0800c091 20495053     ....E.......SPI 
 800d358:	74736e69 65636e61 00702520 202a2a2a     instance %p.*** 
 800d368:	61646f63 7073206c 6f6d2069 00206973     codal spi mosi .
 800d378:	73696d20 0000206f 6c637320 0000206b      miso .. sclk ..

0800d388 <_ZTVN5codal3_cm3SPIE>:
	...
 800d390:	0800c159 0800c179 0800c165 0800c175     Y...y...e...u...
 800d3a0:	0800c23d 636e7973 00002021 656d6974     =...sync! ..time
 800d3b0:	6e692072 00007469 67697274 49726567     r init..triggerI
 800d3c0:	3462206e 696e6920 00002174              n b4 init!..

0800d3cc <_ZTVN5codal3_cm5TimerE>:
	...
 800d3d4:	0800c2dd 0800c32d 0800b631 0800b625     ....-...1...%...
 800d3e4:	202a2a2a 20707061 2f737362 61746164     *** app bss/data
 800d3f4:	69616620 2c64656c 73736220 7365745f      failed, bss_tes
 800d404:	203d2074 00000000 6164202c 745f6174     t = ...., data_t
 800d414:	20747365 0000203d 73756c66 61742068     est = ..flush ta
 800d424:	00006b73 74736572 20747261 646e6168     sk..restart hand
 800d434:	0072656c 74736572 69747261 2e2e676e     ler.restarting..
 800d444:	0000002e 656e6f64 00000000 74736572     ....done....rest
 800d454:	20747261 6c6c6163 6b636162 00000000     art callback....
 800d464:	202a2a2a 4f525245 6d203a52 69737369     *** ERROR: missi
 800d474:	6520676e 746e6576 73756220 00000000     ng event bus....
 800d484:	202a2a2a 4f525245 75203a52 6c62616e     *** ERROR: unabl
 800d494:	6f742065 6e657320 65722064 72617473     e to send restar
 800d4a4:	76652074 20746e65 00000000 73206f6e     t event ....no s
 800d4b4:	64656863 72656c75 7473202c 20747261     cheduler, start 
 800d4c4:	74206762 736b7361 74616c20 00007265     bg tasks later..
 800d4d4:	72617473 67622074 73617420 0000736b     start bg tasks..
 800d4e4:	202a2a2a 4f525245 63203a52 74616572     *** ERROR: creat
 800d4f4:	69662065 20657262 6c696166 00006465     e fibre failed..
 800d504:	202a2a2a 4f525245 75203a52 6c62616e     *** ERROR: unabl
 800d514:	6f742065 73696c20 206e6574 20726f66     e to listen for 
 800d524:	74736572 20747261 6e657665 00002074     restart event ..
 800d534:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 800d544:	726f6620 666e6320 00000000 6d6e6970      for cnf....pinm
 800d554:	6e207061 6620746f 646e756f 726f6620     ap not found for
 800d564:	646f6d20 00000065 6d6e6970 6e207061      mode...pinmap n
 800d574:	6620746f 646e756f 726f6620 72657020     ot found for per
 800d584:	65687069 006c6172                       ipheral.

0800d58c <PinMap_SPI_MISO>:
 800d58c:	00000068 40013000 00010000 00000070     h....0.@....p...
 800d59c:	40003800 00010000 00000074 40003c00     .8.@....t....<.@
 800d5ac:	00010000 0000006c 40013000 00010001     ....l....0.@....
 800d5bc:	00000078 40003c00 00010001 000000ff     x....<.@........
 800d5cc:	ffffffff 00ffff00                       ........

0800d5d4 <PinMap_SPI_MOSI>:
 800d5d4:	00000069 40013000 00020300 00000071     i....0.@....q...
 800d5e4:	40003800 00020300 00000075 40003c00     .8.@....u....<.@
 800d5f4:	00020300 0000006d 40013000 00020301     ....m....0.@....
 800d604:	00000079 40003c00 00020301 000000ff     y....<.@........
 800d614:	ffffffff 00ffff00                       ........

0800d61c <PinMap_SPI_NSS>:
 800d61c:	00000066 40013000 00020300 0000006e     f....0.@....n...
 800d62c:	40003800 00020300 00000072 40003c00     .8.@....r....<.@
 800d63c:	00020300 0000006a 40013000 00020301     ....j....0.@....
 800d64c:	00000076 40003c00 00020301 000000ff     v....<.@........
 800d65c:	ffffffff 00ffff00                       ........

0800d664 <PinMap_SPI_SCK>:
 800d664:	00000067 40013000 00020300 0000006f     g....0.@....o...
 800d674:	40003800 00020300 00000073 40003c00     .8.@....s....<.@
 800d684:	00020300 0000006b 40013000 00020301     ....k....0.@....
 800d694:	00000077 40003c00 00020301 000000ff     w....<.@........
 800d6a4:	ffffffff 00ffff00                       ........

0800d6ac <_ZTVN5codal3I2CE>:
	...
 800d6b4:	0800c67d 0800c685 0800c685 0800c68d     }...............
 800d6c4:	0800c68d 0800c705 0800c695 0800c799     ................
 800d6d4:	0800c6b5                                ....
