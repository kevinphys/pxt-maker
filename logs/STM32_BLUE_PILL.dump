
libs/stm32bluepill/built/codal/build/STM32_BLUE_PILL:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08007400 l    d  .text	00000000 .text
08006c2c l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800dad8 l    d  .preinit_array	00000000 .preinit_array
08006c2c l    d  .boot_init_array	00000000 .boot_init_array
0800dad8 l    d  .init_array	00000000 .init_array
08006c2c l    d  .boot_fini_array	00000000 .boot_fini_array
0800dae4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
20000580 l    d  .boot_bss	00000000 .boot_bss
2000100c l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
080009b4 l     F .boot_text	00000080 _ZL10timer_tickv
08000a34 l     F .boot_text	00000028 _ZL11timer_alarmv
08000a5c l     F .boot_text	00000070 target_wait.part.1
20000598 l     O .boot_bss	00000001 _ZL11initialised
20000580 l     O .boot_bss	00000004 _ZL11poll_status
20000584 l     O .boot_bss	00000004 _ZL13tick_callback
20000588 l     O .boot_bss	00000004 _ZL14alarm_callback
2000058c l     O .boot_bss	00000004 _ZL16prev_poll_status
20000590 l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 timer.cpp
200008a4 l     O .boot_bss	00000004 _ZL10alarmCount
200008a8 l     O .boot_bss	00000004 _ZL8tickFunc
200008ac l     O .boot_bss	00000004 _ZL9alarmFunc
200008b0 l     O .boot_bss	00000004 _ZL9tickCount
200008b5 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 reset_handler.c
00000000 l    df *ABS*	00000000 CortexContextSwitch.s.o
08000ca4 l       .boot_text	00000000 store_context_complete
08000cb6 l       .boot_text	00000000 store_stack_complete
08000caa l       .boot_text	00000000 store_stack
08000cd0 l       .boot_text	00000000 restore_stack_complete
08000cc4 l       .boot_text	00000000 restore_stack
08000d24 l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 pwr_common_v1.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 desig.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 rcc.c
08000f00 l     F .boot_text	00000010 rcc_is_osc_ready.part.0
08000f10 l     F .boot_text	00000010 rcc_osc_on.part.1
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08001094 l     F .boot_text	00000034 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_control.c
080011fc l     F .boot_text	00000052 usb_control_send_chunk
08001250 l     F .boot_text	00000060 usb_control_request_dispatch
080012b0 l     F .boot_text	0000007a usb_control_setup_read
0800132c l     F .boot_text	00000046 usb_control_recv_chunk
00000000 l    df *ABS*	00000000 usb_standard.c
08001518 l     F .boot_text	000000a4 usb_standard_set_configuration
080015bc l     F .boot_text	0000002c usb_standard_get_configuration
080015e8 l     F .boot_text	0000003c usb_standard_get_interface
08001624 l     F .boot_text	00000018 usb_standard_device_get_status
0800163c l     F .boot_text	0000002a usb_standard_endpoint_get_status
08001668 l     F .boot_text	00000010 usb_standard_endpoint_stall
08001678 l     F .boot_text	00000010 usb_standard_endpoint_unstall
08001688 l     F .boot_text	00000030 usb_standard_set_address
080016b8 l     F .boot_text	00000052 usb_standard_set_interface
0800170c l     F .boot_text	00000292 usb_standard_get_descriptor
080019a0 l     F .boot_text	00000018 usb_standard_interface_get_status
00000000 l    df *ABS*	00000000 flash_common_all.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
2000059c l     O .boot_bss	00000020 msgQList
20000658 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
20000659 l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
2000065a l     O .boot_bss	00000001 nTasks
200005bc l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000656 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_event.c
20000648 l     O .boot_bss	0000000e eventList
2000065b l     O .boot_bss	00000001 nEvents
20000054 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 qfplib.S.o
00000001 l       *ABS*	00000000 include_faster
00000001 l       *ABS*	00000000 include_conversions
00000001 l       *ABS*	00000000 include_scientific
08002a44 l       .boot_text	00000000 xchxy
08002a4c l       .boot_text	00000000 unpackxy
08002a5a l       .boot_text	00000000 unpackx
08002a88 l       .boot_text	00000000 packx
08002a96 l       .boot_text	00000000 packx0
08002ada l       .boot_text	00000000 unpackxyalign
08002b24 l       .boot_text	00000000 packret
08002b2a l       .boot_text	00000000 mul0
08002b7a l       .boot_text	00000000 fmul0
08002b82 l       .boot_text	00000000 fdiv_n
08002bba l       .boot_text	00000000 infret
08002bc4 l       .boot_text	00000000 fdiv_fast_n
08002c74 l       .boot_text	00000000 rcpapp
08002c0c l       .boot_text	00000000 div0
08002c7c l       .boot_text	00000000 rsqrtapp
08002cd6 l       .boot_text	00000000 packretns
08002cec l       .boot_text	00000000 cordic_start
08002cf6 l       .boot_text	00000000 cordic_vstep
08002cfc l       .boot_text	00000000 cordic_rstep
08002d28 l       .boot_text	00000000 cordic_rot
08002d4a l       .boot_text	00000000 cordic_exit
08002d50 l       .boot_text	00000000 cordic_vec
08002e9c l       .boot_text	00000000 pi_q29
08002e9c l       .boot_text	00000000 tab_cc
08002ed0 l       .boot_text	00000000 tab_ch
08002f0c l       .boot_text	00000000 qfp_lib_end
00000000 l    df *ABS*	00000000 functions.c
2000065c l     O .boot_bss	0000002e float_usage
00000000 l    df *ABS*	00000000 strtol.c
08003c58 l     F .boot_text	000000ec _strtol_l.isra.0
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 strcmp.S.o
00000000 l    df *ABS*	00000000 strlen.S.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
08003e50 l     F .boot_text	00000058 _ZL12debug_appendPKcj
08003ea8 l     F .boot_text	00000014 debug_print.part.3
08003ebc l     F .boot_text	000000a0 _Z20debug_flush_internalb.part.2
200008a2 l     O .boot_bss	00000001 _ZL10logEnabled
2000068c l     O .boot_bss	00000201 _ZL11debugBuffer
20000890 l     O .boot_bss	00000010 _ZL12output_funcs
200008a0 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
200008b4 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 bootloader.c
200008b8 l     O .boot_bss	00000004 baseloader_addr
200008bc l     O .boot_bss	00000004 baseloader_status
200008c0 l     O .boot_bss	00000004 byte_count
200008c4 l     O .boot_bss	00000004 cycleCount
200008c8 l     O .boot_bss	00000004 dest
200008cc l     O .boot_bss	00000004 last_status
200008d0 l     O .boot_bss	00000004 msTimer
20000b90 l     O .boot_bss	00000001 poll_restart_requested
200008d4 l     O .boot_bss	00000004 src
200008d8 l     O .boot_bss	00000004 status
200008dc l     O .boot_bss	00000004 tmp_vector_table
200008e0 l     O .boot_bss	00000004 usbd_dev
2000046c l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 ghostfat.c
200008e4 l     O .boot_bss	00000004 lastFlush
200008e8 l     O .boot_bss	00000004 ms
2000057c l     O .boot_data	00000001 firstFlush
20000470 l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 usb_conf.c
08004958 l     F .boot_text	00000010 hf2_connected
08004968 l     F .boot_text	00000030 usb_cdc_transmit
08004998 l     F .boot_text	00000010 sof_callback
080049a8 l     F .boot_text	0000001c cdc_connected
080049c4 l     F .boot_text	00000050 set_aggregate_callback
08004d5c l     F .boot_text	000000c0 aggregate_callback
20000b91 l     O .boot_bss	00000001 cdc_is_connected
200008ec l     O .boot_bss	00000028 config_callback
20000914 l     O .boot_bss	00000050 control_callback
20000b92 l     O .boot_bss	00000001 hf2_is_connected
20000964 l     O .boot_bss	00000004 last_busy_time
20000968 l     O .boot_bss	00000004 last_frame_time
2000096c l     O .boot_bss	00000019 serial_number
20000a90 l     O .boot_bss	00000100 usbd_control_buffer
20000474 l     O .boot_data	00000008 capabilities
2000047c l     O .boot_data	00000024 usb_strings
0800641c l     O .boot_text	00000009 bos_descriptor
08006428 l     O .boot_text	00000008 cdc_iface_assoc
08006430 l     O .boot_text	00000013 cdcacm_functional_descriptors
08006444 l     O .boot_text	0000000f comm_endp
08006454 l     O .boot_text	00000015 comm_iface
0800646c l     O .boot_text	0000000d config
0800658c l     O .boot_text	00000030 interfaces
0800647c l     O .boot_text	0000001e data_endp
0800649c l     O .boot_text	00000015 data_iface
080064b4 l     O .boot_text	00000012 dev
08006554 l     O .boot_text	0000001e hf2_endp
08006574 l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08004e1c l     F .boot_text	00000028 webusb_set_config
08004e44 l     F .boot_text	000000a4 webusb_control_vendor_request
2000098c l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
08004f38 l     F .boot_text	0000009c winusb_control_vendor_request
08004fd4 l     F .boot_text	00000028 winusb_set_config
08004ffc l     F .boot_text	00000048 winusb_descriptor_request
200004a0 l     O .boot_data	000000b2 msos20_descriptor_set
20000554 l     O .boot_data	00000028 winusb_wcid
08006734 l     O .boot_text	00000092 guid
0800683c l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 target_stm32f103.c
080050a0 l     F .boot_text	0000011c boot_target_get_startup_mode.part.0
20000b93 l     O .boot_bss	00000001 forced_startup_mode
20000b94 l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 cdc.c
0800530c l     F .boot_text	0000000c cdcacm_comm_cb
08005318 l     F .boot_text	00000068 cdcacm_set_config
08005438 l     F .boot_text	0000004c cdcacm_data_rx_cb
08005380 l     F .boot_text	00000064 cdcacm_control_request
20000b95 l     O .boot_bss	00000001 connected
20000990 l     O .boot_bss	00000004 connected_func
20000994 l     O .boot_bss	00000041 rx_buf
080069a0 l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
080054b0 l     F .boot_text	0000003c hf2_set_config
08005c70 l     F .boot_text	0000005c hf2_data_tx_cb
080055e4 l     F .boot_text	0000068c hf2_data_rx_cb
080054ec l     F .boot_text	000000dc pokeSend
080055c8 l     F .boot_text	0000001c assert.part.0
200009d8 l     O .boot_bss	00000004 _usbd_dev
200009dc l     O .boot_bss	00000004 bootloader_changed
200009e0 l     O .boot_bss	00000004 cmdId.6040
20000b96 l     O .boot_bss	00000001 connected
200009e4 l     O .boot_bss	00000004 connected_func
20000b97 l     O .boot_bss	00000001 flush_count.6042
200009e8 l     O .boot_bss	00000004 new_app_start.6044
200009ec l     O .boot_bss	00000004 new_base_vector.6043
200009f0 l     O .boot_bss	00000004 new_baseloader_size.6046
200009f4 l     O .boot_bss	00000004 new_bootloader_size.6045
200009f8 l     O .boot_bss	00000004 pkt.6064
200009fc l     O .boot_bss	00000004 prevCmdId.6041
20000a00 l     O .boot_bss	00000004 remDataToSend
20000b98 l     O .boot_bss	00000001 remDataToSendFlag
20000a04 l     O .boot_bss	00000004 remDataToSendLength
20000b99 l     O .boot_bss	00000001 restart_request
20000a08 l     O .boot_bss	00000040 rx_buf
20000a48 l     O .boot_bss	00000004 rx_time
20000a4c l     O .boot_bss	00000040 tx_buf
080069b4 l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 usb21_standard.c
08005d50 l     F .boot_text	00000028 usb21_set_config
08005d78 l     F .boot_text	000000e0 usb21_standard_get_descriptor
20000a8c l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 application.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 core.cpp
08007cd4 l     F .text	00000002 _ZN3pxtL13dtorDoNothingEv
08007cd8 l     F .text	00000008 _ZN3pxtL11string_sizeEPNS_11BoxedStringE
08007ce0 l     F .text	00000004 _ZN3pxtL11number_sizeEPNS_11BoxedNumberE
08007ce4 l     F .text	00000008 _ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE
08008254 l     F .text	0000000e _ZN3pxt7fromIntEi.part.7
08008dc4 l     F .text	000000a6 _ZN6numopsL10valCompareEPN3pxt12TValueStructES2_
2000100c l     O .bss	00000004 _ZN3pxtL15handlerBindingsE
20001000 l     O .data	00000004 _ZN3pxtL12random_valueE
0800d1a0 l     O .text	0000000e _ZN3pxtL10sBooleanTpE
0800d1b0 l     O .text	00000010 _ZN3pxtL10sUndefinedE
0800d1c0 l     O .text	0000000a _ZN3pxtL11emptyBufferE
0800d1cc l     O .text	00000007 _ZN3pxtL11emptyStringE
0800d1d4 l     O .text	0000000f _ZN3pxtL11sFunctionTpE
0800d1e4 l     O .text	00000010 _ZN3pxtL12sUndefinedTpE
0800d1f4 l     O .text	0000000f _ZN3pxtL4sInfE
0800d204 l     O .text	0000000a _ZN3pxtL4sNaNE
0800d210 l     O .text	00000010 _ZN3pxtL5sMInfE
0800d220 l     O .text	0000000b _ZN3pxtL5sNullE
0800d22c l     O .text	0000000b _ZN3pxtL5sTrueE
0800d238 l     O .text	0000000c _ZN3pxtL6sFalseE
0800d244 l     O .text	0000000f _ZN3pxtL7sObjectE
0800d254 l     O .text	00000011 _ZN3pxtL9sFunctionE
0800d268 l     O .text	0000000d _ZN3pxtL9sNumberTpE
0800d278 l     O .text	0000000d _ZN3pxtL9sObjectTpE
0800d288 l     O .text	0000000d _ZN3pxtL9sStringTpE
00000000 l    df *ABS*	00000000 advmath.cpp
00000000 l    df *ABS*	00000000 buffer.cpp
08007794 l     F .text	00000062 _ZN3pxtL9readBytesEPhS0_ibi
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 gc.cpp
08009154 l     F .text	00000040 _ZN3pxtL13getObjectSizeEPNS_9RefObjectE
08009194 l     F .text	00000054 _ZN3pxtL9removePtrEPNS_12TValueStructE
080095c0 l     F .text	000000d0 _ZN3pxtL13allocateBlockEv
08009a20 l     F .text	00000018 _GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
20001010 l     O .bss	00000004 _ZN3pxtL10firstBlockE
2000166d l     O .bss	00000001 _ZN3pxtL11tempRootLenE
20001014 l     O .bss	00000004 _ZN3pxtL6midPtrE
20001018 l     O .bss	00000008 _ZN3pxtL7gcRootsE
20001020 l     O .bss	00000004 _ZN3pxtL8tempRootE
20001024 l     O .bss	00000004 _ZN3pxtL9firstFreeE
20001028 l     O .bss	00000008 _ZN3pxtL9workQueueE
00000000 l    df *ABS*	00000000 loops.cpp
00000000 l    df *ABS*	00000000 pxt.cpp
08009aa8 l     F .text	00000098 _ZN3pxt9LLSegment9setLengthEj.part.5
08009b40 l     F .text	0000001c _ZN3pxt8checkStrEbPKc.part.6
0800d070 l     O .text	00000024 _ZN3pxtL13RefMap_vtableE
0800d0a0 l     O .text	00000024 _ZN3pxtL18RefRefLocal_vtableE
0800d0d0 l     O .text	00000024 _ZN3pxtL20RefCollection_vtableE
00000000 l    df *ABS*	00000000 codal.cpp
0800a104 l     F .text	00000018 _ZN3pxtL10runAction0EPNS_12TValueStructE
0800a46c l     F .text	00000058 _GLOBAL__sub_I__ZN3pxt8devTimerE
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 i2c.cpp
0800a574 l     F .text	00000040 _ZN4pinsL7initI2CEv.part.0
2000108c l     O .bss	00000004 _ZN4pinsL3i2cE
00000000 l    df *ABS*	00000000 pins.cpp
2000166e l     O .bss	00000001 _ZN3pxtL10numPinPtrsE
20001090 l     O .bss	00000080 _ZN3pxtL6pinPosE
20001110 l     O .bss	00000004 _ZN3pxtL7pinPtrsE
00000000 l    df *ABS*	00000000 pinsAnalog.cpp
00000000 l    df *ABS*	00000000 pinsDigital.cpp
00000000 l    df *ABS*	00000000 pinsPWM.cpp
00000000 l    df *ABS*	00000000 platform.cpp
00000000 l    df *ABS*	00000000 spi.cpp
0800a894 l     F .text	00000054 _ZN4pinsL7initSPIEv.part.0
20001114 l     O .bss	00000004 _ZN4pinsL3spiE
00000000 l    df *ABS*	00000000 usb.cpp
20001118 l     O .bss	00000004 _ZN3pxtL11pSendToUARTE
00000000 l    df *ABS*	00000000 pointers.cpp
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDevice.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
0800ac64 l     F .text	00000080 _ZL9logwritenPKci
0800ace4 l     F .text	0000007c _ZL11logwritenummbb
00000000 l    df *ABS*	00000000 CodalFiber.cpp
0800ae64 l     F .text	00000032 _ZL15get_fibers_fromPPPN5codal5FiberEPiS1_
0800ae98 l     F .text	0000002e _ZN5codal13dequeue_fiberEPNS_5FiberE.part.0
0800b0d8 l     F .text	00000034 _ZL10handle_fobv
0800b3f4 l     F .text	00000188 _ZN5codal8scheduleEv.part.3
0800b608 l     F .text	0000007c _ZN5codal13release_fiberEv.part.4
20001624 l     O .bss	00000004 _ZN5codalL10messageBusE
20001628 l     O .bss	00000004 _ZN5codalL10sleepQueueE
20001670 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
2000162c l     O .bss	00000004 _ZN5codalL11forkedFiberE
20001630 l     O .bss	00000004 _ZN5codalL8runQueueE
20001634 l     O .bss	00000004 _ZN5codalL9fiberPoolE
20001638 l     O .bss	00000004 _ZN5codalL9idleFiberE
2000163c l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20001671 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001008 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
0800c230 l     F .text	0000002c _ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0
0800c230 l     F .text	0000002c _ZN5codal5EventC2EttmNS_15EventLaunchModeE.part.1
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
0800c4d0 l     F .text	00000024 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1
00000000 l    df *ABS*	00000000 CmSPI.cpp
0800c590 l     F .text	0000004e _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0
0800c5e0 l     F .text	0000005c _ZN5codal3_cm3SPI4initEv.part.1
00000000 l    df *ABS*	00000000 CmTimer.cpp
20001654 l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
20001658 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
0800c804 l     F .text	00000018 _ZL10flush_taskv
0800c81c l     F .text	00000050 _ZL15restart_handlerN5codal5EventE
0800c9bc l     F .text	00000014 _GLOBAL__sub_I_restart_callback
20001660 l     O .bss	00000008 _ZL13restart_event
20001668 l     O .bss	00000004 _ZL16flush_task_fibre
20001673 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 CmPinMap.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 impure.c
20000058 l     O .boot_data	00000410 impure_data
08003198 g     F .boot_text	00000034 __wrap___aeabi_dcmpun
0800ca0c g     F .text	00000038 pinmap_mode
080080c0 g     F .text	00000030 _ZN7String_7indexOfEPN3pxt11BoxedStringES2_i
0800ba3c g     F .text	00000030 _ZN5codal5TimerC1Ev
08007828 g     F .text	0000004e _ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii
08004874 g     F .boot_text	000000e4 flash_write
08008ae8 g     F .text	00000020 _ZN5Math_5roundEPN3pxt12TValueStructE
0800c544 g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800bf80 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08002fdc g     F .boot_text	00000030 __wrap___aeabi_ddiv
0800a358 g     F .text	00000020 _ZN3pxt16afterProgramPageEv
0800aaa8  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
080092d4 g     F .text	00000034 _ZN3pxt13gcScanSegmentERNS_7SegmentE
08001d70 g     F .boot_text	00000040 st_usbfs_ep_stall_get
0800af5c g     F .text	00000040 _ZN5codal14scheduler_tickENS_5EventE
08002bc2 g     F .boot_text	00000000 qfp_fdiv_fast
0800324c g     F .boot_text	0000001c log
08007cb4 g     F .text	00000006 _ZN7control2gcEv
08006c2c g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08007a20 g     F .text	00000106 _ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE
08003230 g     F .boot_text	0000001c sqrt
08001408 g     F .boot_text	0000009e _usbd_control_out
0800a9f8  w    F .text	00000002 _ZN3pxt4decrEPNS_12TValueStructE
0800360c g     F .boot_text	000000a4 cosh
08000bbc g     F .boot_text	00000004 tcb_configure_stack_base
08003768 g     F .boot_text	000000a4 asinh
0800c558 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08007c94 g     F .text	00000004 _ZN7control13runInParallelEPN3pxt12TValueStructE
08007da0 g     F .text	00000044 _ZN3pxt8mkBufferEPKhi
08000880 g     F .boot_text	00000134 reset_handler
00007400 g       *ABS*	00000000 _bootrom_size
08000ba4 g     F .boot_text	00000008 fiber_initial_stack_base
20001672 g     O .bss	00000001 heap_count
08004638 g     F .boot_text	00000170 bootloader_start
0800c504 g     F .text	00000020 _ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE
08009e88 g     F .text	00000010 _ZN3pxt11RefRefLocalC1Ev
080011c4 g     F .boot_text	0000000e usbd_ep_write_packet
080028d8 g     F .boot_text	0000005a .hidden __floatdidf
08005280 g     F .boot_text	00000024 boot_target_set_restart_callback
080011e4 g     F .boot_text	00000008 usbd_ep_stall_set
0800c38c g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800d9d4 g     O .text	00000048 PinMap_SPI_MOSI
080078d0 g     F .text	00000080 _ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii
0800b9a8 g     F .text	00000014 _ZN5codal8ListenerD2Ev
08009f54 g     F .text	00000108 _ZN3pxt11exec_binaryEPj
08000bb8 g     F .boot_text	00000004 tcb_configure_sp
08000808  w    F .boot_text	00000002 usart3_isr
0800a378 g     F .text	00000004 _ZN3pxt15getSerialNumberEv
08000820 g     F .boot_text	00000030 rtc_isr
08000808 g       .boot_text	00000000 _base_etext
080052a4 g     F .boot_text	00000020 boot_target_manifest_app
0800d7cc g     O .text	00000018 _ZTVN5codal3_cm5TimerE
08008ba8 g     F .text	00000130 _ZN3pxt7eq_boolEPNS_12TValueStructES1_
08004098 g     F .boot_text	00000030 _Z11debug_printi
0800bf9c g     F .text	000000b0 _ZN5codal10MessageBusC2Ev
080040f0 g     F .boot_text	00000018 _Z13debug_printlni
08000808  w    F .boot_text	00000002 tim7_isr
0800209c g     F .boot_text	0000000c exti_reset_request
20000ca4 g     O .boot_bss	00000001 running_tid
2000105c g     O .bss	00000004 _ZN3pxt6deviceE
08000808  w    F .boot_text	00000002 adc1_2_isr
0800c2a4 g     F .text	00000024 _ZN5codal14EventQueueItemC2ENS_5EventE
0800c66c g     F .text	00000060 _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_
080077fc g     F .text	00000016 _ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi
08008514 g     F .text	0000000c _ZN5pxtrt13getGlobalsPtrEv
08000bc4 g     F .boot_text	00000004 get_current_sp
080031cc g     F .boot_text	0000002c __wrap___aeabi_d2iz
08000808  w    F .boot_text	00000002 tim1_trg_com_isr
08008320 g     F .text	00000010 _ZN6Array_5getAtEPN3pxt13RefCollectionEi
08008cec g     F .text	00000010 _ZN6numops3neqEPN3pxt12TValueStructES2_
0800808c g     F .text	00000034 _ZN7String_6substrEPN3pxt11BoxedStringEii
0800a708 g     F .text	00000010 _ZN3pxt9lookupPinEi
08008290 g     F .text	00000012 _ZN3pxt7fromIntEi
080082c0 g     F .text	0000000a _ZN3pxt8fromBoolEb
0800c30c g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
08003db6 g     F .boot_text	00000032 memmove
08008aac g     F .text	00000012 _ZN5Math_5floorEPN3pxt12TValueStructE
080083f0 g     F .text	00000008 _ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE
08008330 g     F .text	00000006 _ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
08007cd0 g     F .text	00000004 _ZN7control16profilingEnabledEv
0800aa18 g     F .text	0000002c _ZN5codal14string_reverseEPc
0800cab4 g     F .text	0000004e _ZN5codal3I2C12readRegisterEthPhib
0800ac0c g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
0800a1d8 g     F .text	00000004 _ZN3pxt8sleep_usEy
08009a60 g     F .text	00000028 _ZN3pxt9RefAction5printEPS0_
08007a04 g     F .text	00000014 _ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_
08002b12 g     F .boot_text	00000000 qfp_fadd
080029d4 g     F .boot_text	00000070 .hidden __powidf2
08001a84 g     F .boot_text	00000064 _usbd_standard_request
08009d18 g     F .text	0000003e _ZN3pxt7Segment3setEjPNS_12TValueStructE
0800a9fc  w    F .text	00000010 _ZN3pxt12ptrOfLiteralEi
08002304 g     F .boot_text	00000008 os_tick
080011f4 g     F .boot_text	00000008 usbd_ep_nak_set
08007d08 g     F .text	0000004c _ZN3pxt10setBindingEiiPNS_12TValueStructE
0800300c g     F .boot_text	00000030 __wrap___aeabi_dmul
08000808  w    F .boot_text	00000002 usb_hp_can_tx_isr
08008390 g     F .text	00000004 _ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE
08009e20 g     F .text	00000038 _ZN3pxt7Segment5printEv
0800a9a4 g     F .text	00000002 _ZN3pxt8usb_initEv
080099c4 g     F .text	00000006 _ZN3pxt13RefCollection4scanEPS0_
08009254 g     F .text	00000038 _ZN3pxt6gcScanEPNS_12TValueStructE
0800bca4  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800ad60 g     F .text	000000dc codal_vdmesg
08002b0c g     F .boot_text	00000000 qfp_fsub
08008a5c g     F .text	00000012 _ZN5Math_4atanEPN3pxt12TValueStructE
0800ca94 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
20000000 g     O .boot_data	0000001c base_para
08003a94 g     F .boot_text	00000088 ceil
0800cb98 g     F .text	000000d4 _ZN5codal3I2C4readEtPhib
08000b5c g     F .boot_text	00000010 target_seed_random
08007b28 g     F .text	0000001a _ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE
08009f30 g     F .text	0000000c _ZN3pxt12templateHashEv
08000808  w    F .boot_text	00000002 tim6_isr
08006c2c g       *ABS*	00000000 _boot_data_loadaddr
08003a0c g     F .boot_text	00000088 floor
0800cfe0 g     O .text	00000024 _ZN3pxt9number_vtE
0800dae4 g       .init_array	00000000 _etext
08009e78 g     F .text	00000010 _ZN3pxt13RefCollectionC1Ev
08000e84 g     F .boot_text	0000007c gpio_set_mode
080084b4 g     F .text	00000014 _ZN5pxtrt6mapGetEPN3pxt6RefMapEj
08006c2c g     O .boot_fini_array	00000004 __boot_fini_array_start
0800af24 g     F .text	00000036 _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800c504 g     F .text	00000020 _ZN5codal3_cm3PinC2Ei7PinNameNS_13PinCapabilityE
08000808  w    F .boot_text	00000002 usb_wakeup_isr
08008cdc g     F .text	00000010 _ZN6numops2eqEPN3pxt12TValueStructES2_
08000808 g     F .boot_text	00000002 blocking_handler
0800ac3c g     F .text	00000006 _ZN5codal11CodalDevice5sleepEm
20000ca5 g     O .boot_bss	00000001 running
080041e8 g     F .boot_text	00000020 led_setup
08000808  w    F .boot_text	00000002 tim5_isr
080086c4 g     F .text	0000002a _ZN6numops4asrsEPN3pxt12TValueStructES2_
080040d4 g     F .boot_text	0000001c debug_println
20004bbc g     O .boot_buf	00000442 hf2_buffer
08008eb4 g     F .text	00000022 _ZN6numops2ltEPN3pxt12TValueStructES2_
08000808  w    F .boot_text	00000002 otg_fs_isr
08000bd4 g     F .boot_text	00000070 test_codal
0800c378 g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
0800c9d0 g     F .text	0000003c pinmap_peripheral
08000808  w    F .boot_text	00000002 spi1_isr
08000b20 g     F .boot_text	00000020 target_wait_us
08000b40 g     F .boot_text	00000014 target_reset
08003f68 g     F .boot_text	0000004c logger_add_output
080087ec g     F .text	00000026 _ZN6numops4subsEPN3pxt12TValueStructES2_
0800b7ac g     F .text	0000003c _Z18device_create_heapmm
0800856c g     F .text	00000060 _ZN3pxt8toDoubleEPNS_12TValueStructE
08001170 g     F .boot_text	00000004 usbd_register_sof_callback
08008524 g     F .text	00000048 _ZN3pxt7valTypeEPNS_12TValueStructE
0800b80c g     F .text	0000008e _Z16device_malloc_injR14HeapDefinition
08005044 g     F .boot_text	0000005c winusb_setup
0800c490 g     F .text	00000040 _ZN5codal3_cm3Pin7eventOnEi
08003d58 g     F .boot_text	0000001c memcpy
0800a1bc  w    F .text	00000014 _ZN5codal3_cm5TimerD2Ev
08000808  w    F .boot_text	00000002 exti2_isr
08000808  w    F .boot_text	00000002 dma1_channel6_isr
08008304 g     F .text	00000006 _ZN6Array_9setLengthEPN3pxt13RefCollectionEi
08007c84 g     F .text	00000004 _ZN7control15internalOnEventEiiPN3pxt12TValueStructEi
0800a8e8 g     F .text	00000028 _ZN4pins8spiWriteEi
0800a73c g     F .text	00000010 _ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE
20001004 g     O .data	00000004 app_data_test
0800080c g     F .boot_text	00000002 null_handler
080083e4 g     F .text	0000000c _ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE
08009eac g     F .text	00000064 _ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE
20000048 g     O .boot_data	00000004 rcc_ahb_frequency
08002860 g     F .boot_text	00000022 .hidden __floatsidf
0800c2c8 g     F .text	0000001a _ZN5codal22MemberFunctionCallback4fireENS_5EventE
0800d010 g     O .text	00000024 _ZN3pxt9string_vtE
0800c66c g     F .text	00000060 _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_
0800a18c g     F .text	0000000e _ZN3pxt9fiberDoneEPv
08007528 g     F .text	00000174 _ZN6numops5mycvtEdPc
0800438c g     F .boot_text	00000020 poll_restart_callback
08000bcc g     F .boot_text	00000008 tcb_configure_args
2000165c g     O .bss	00000004 app_bss_test
08005ccc g     F .boot_text	00000084 hf2_setup
0800d040 g     O .text	00000024 _ZN3pxt16RefAction_vtableE
0800a1d4 g     F .text	00000004 _ZN3pxt8sleep_msEj
08000808  w    F .boot_text	00000002 can_rx1_isr
0800dae4 g       .fini_array	00000000 __fini_array_end
08000808  w    F .boot_text	00000002 dma1_channel5_isr
08000738 g     F .boot_text	000000d0 baseloader_fetch
0800a82c g     F .text	00000018 _ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode
08008cfc g     F .text	0000002e _ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi
0800c63c g     F .text	00000030 _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08007730 g     F .text	00000012 _ZN5Math_4sinhEPN3pxt12TValueStructE
0800a72c g     F .text	00000006 _ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE
08009840 g     F .text	00000028 malloc
0800d5fc g     O .text	00000024 _ZTVN5codal11CodalDeviceE
08008300 g     F .text	00000004 _ZN6Array_6lengthEPN3pxt13RefCollectionE
08000808  w    F .boot_text	00000002 dma2_channel5_isr
0800b9a8 g     F .text	00000014 _ZN5codal8ListenerD1Ev
08009a38 g     F .text	00000004 _ZN5loops7foreverEPN3pxt12TValueStructE
08005fd8 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
080047a8 g     F .boot_text	0000000a bootloader_set_restart_callback
08002268 g     F .boot_text	00000034 rtc_clear_flag
0800ba6c g     F .text	000000b8 _ZN5codal5Timer8setEventEmttb
08008a20 g     F .text	00000012 _ZN5Math_3tanEPN3pxt12TValueStructE
08008d48 g     F .text	00000068 _ZN6numops6toBoolEPN3pxt12TValueStructE
0800b2f4 g     F .text	00000068 _Z14__create_fibermmmi
08000c64 g     F .boot_text	0000000c target_set_bootloader_callback
08009e58 g     F .text	00000020 _ZN3pxt13RefCollection5printEPS0_
08000808  w    F .boot_text	00000002 usart1_isr
08007cbc g     F .text	00000014 _ZN7control8heapDumpEv
0800aec8 g     F .text	0000005c _ZN5codal11list_fibersEPPNS_5FiberE
0800a878 g     F .text	0000001c _Z14cpu_clock_initv
00000844 g       *ABS*	00000000 _bootbuf_size
0800b3ac g     F .text	00000048 _ZN5codal4idleEv
08008a70 g     F .text	00000012 _ZN5Math_4asinEPN3pxt12TValueStructE
20000594 g     O .boot_bss	00000004 .hidden __dso_handle
08002840 g     F .boot_text	0000001e .hidden __aeabi_ui2d
0800ca44 g     F .text	00000038 pinmap_cnf
08009c3c g     F .text	0000002e _ZN3pxt9LLSegment3setEjPNS_12TValueStructE
08000bc8 g     F .boot_text	00000004 tcb_get_sp
080019b8 g     F .boot_text	00000032 usbd_register_set_config_callback
08001b50 g     F .boot_text	00000118 st_usbfs_ep_setup
0800a600 g     F .text	00000034 _ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb
08000b6c g     F .boot_text	00000018 target_get_serial
0800c3c0 g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
08009360 g     F .text	00000260 _ZN3pxt2gcEi
080025bc g     F .boot_text	00000000 .hidden __aeabi_drsub
0800c308 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
0800a860 g     F .text	00000018 _ZN3pxt13platform_initEv
0800b6b8 g     F .text	00000014 _ZN5codal13release_fiberEPv
0800b8e8 g     F .text	00000040 device_free
08009c18 g     F .text	0000000a _ZN3pxt15deleteRefObjectEPNS_9RefObjectE
08007744 g     F .text	00000012 _ZN5Math_4coshEPN3pxt12TValueStructE
0800a644  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
08008500 g     F .text	00000014 _ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE
08009a08 g     F .text	00000004 _ZN3pxt13RefCollection6gcsizeEPS0_
08000808  w    F .boot_text	00000002 usage_fault_handler
08000808  w    F .boot_text	00000002 tim8_trg_com_isr
0800c774 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
0800a848 g     F .text	00000014 _ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi
08004110 g     F .boot_text	00000048 debug_printhex
08000808  w    F .boot_text	00000002 can2_rx0_isr
08007e50 g     F .text	0000003c _ZN7String_6charAtEPN3pxt11BoxedStringEi
0800a4c4 g     F .text	00000064 _ZN3pxt15registerWithDalEiiPNS_12TValueStructEi
0800ca8c g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
080023ec g     F .boot_text	00000040 os_task_highest_prio_ready_task
08000808  w    F .boot_text	00000002 tim1_brk_isr
0800a38c g     F .text	0000000c _ZN3pxt16setThreadContextEPNS_13ThreadContextE
0800c8dc g     F .text	000000e0 start_background_tasks
08002cb4 g     F .boot_text	00000000 qfp_float2ufix
0800c0c4 g     F .text	0000009c _ZN5codal10MessageBus7processERNS_5EventEb
0800a224 g     F .text	00000008 _ZN3pxt12waitForEventEii
20001034 g     O .bss	00000004 _ZN3pxt8bytecodeE
0800bca4  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
080083ac g     F .text	00000034 _ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE
080099d4 g     F .text	00000006 _ZN3pxt11RefRefLocal4scanEPS0_
08002c12 g     F .boot_text	00000000 qfp_fsqrt_fast
08003fb4 g     F .boot_text	00000024 debug_flush
08002884 g     F .boot_text	00000042 .hidden __extendsfdf2
08004ee8 g     F .boot_text	00000050 webusb_setup
080025c8 g     F .boot_text	00000276 .hidden __adddf3
0800a540 g     F .text	00000010 _ZN7control16deviceDalVersionEv
0800a950 g     F .text	00000028 _ZN4pins12spiFrequencyEi
0800ca7c g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
0800b590 g     F .text	0000004c _ZN5codal11fiber_sleepEm
0800c1c4 g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
080020c0 g     F .boot_text	00000018 rtc_exit_config_mode
0800aa0c  w    F .text	00000002 _ZN3pxt16startPerfCounterENS_12PerfCountersE
0800d6cc g     O .text	0000002c _ZTVN5codal3_cm3I2CE
08000808  w    F .boot_text	00000002 can2_rx1_isr
080041e4 g     F .boot_text	00000004 _ZdlPv
080085cc g     F .text	000000c8 _ZN3pxt6toUIntEPNS_12TValueStructE
08000db4 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
080099cc g     F .text	00000008 _ZN3pxt9RefAction4scanEPS0_
08008ac0 g     F .text	00000012 _ZN5Math_4ceilEPN3pxt12TValueStructE
08000000 g       .boot_text	00000000 _boot_text
0800c6cc g     F .text	00000010 _ZN5codal3_cm14alarm_callbackEv
08000808  w    F .boot_text	00000002 tim1_cc_isr
0800bc4c g     F .text	0000002c _ZN5codal27system_timer_event_every_usEmtt
0800c430 g     F .text	00000028 _ZN5codal3_cm3Pin15getAnalogPeriodEv
080047b4 g     F .boot_text	000000c0 flash_flush
08000dd4 g     F .boot_text	0000001c rcc_periph_clock_enable
08001174 g     F .boot_text	00000038 _usbd_reset
08002840 g     F .boot_text	0000001e .hidden __floatunsidf
080043ac g     F .boot_text	00000030 bootloader_poll
08008a98 g     F .text	00000012 _ZN5Math_4sqrtEPN3pxt12TValueStructE
08004b94 g     F .boot_text	00000050 dump_buffer
0800c6dc g     F .text	00000020 _ZN5codal3_cm5Timer9triggerInEm
08000808  w    F .boot_text	00000002 sdio_isr
08007990 g     F .text	00000072 _ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii
08008ad4 g     F .text	00000012 _ZN5Math_5truncEPN3pxt12TValueStructE
08007e30 g     F .text	0000001e _ZN7String_12fromCharCodeEi
080014a8 g     F .boot_text	0000006e _usbd_control_in
08005e90 g     F .boot_text	00000038 backup_write
08000808  w    F .boot_text	00000002 eth_isr
08009ddc g     F .text	00000044 _ZN3pxt7Segment6insertEjPNS_12TValueStructE
08007c98 g     F .text	00000004 _ZN7control12waitForEventEii
08009a1c g     F .text	00000004 _ZN3pxt6RefMap6gcsizeEPS0_
0800ca8c g     F .text	00000006 _ZN5codal3I2C5writeEh
2000004c g     O .boot_data	00000004 rcc_apb1_frequency
08002cdc g     F .boot_text	00000000 qfp_ufix2float
08005ec8 g     F .boot_text	00000018 backup_read
0800a774 g     F .text	00000038 _ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE
2000166f g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
080051bc g     F .boot_text	00000010 boot_target_get_startup_mode
08003d44 g     F .boot_text	00000014 strtol
080030d0 g     F .boot_text	00000030 __wrap___aeabi_dcmplt
08000808  w    F .boot_text	00000002 dma1_channel4_isr
08007ef8 g     F .text	00000024 _ZN7String_7compareEPN3pxt11BoxedStringES2_
08000808  w    F .boot_text	00000002 tim8_brk_isr
0800bc14 g     F .text	0000001c _ZN5codal25system_timer_current_timeEv
08009f14 g     F .text	0000001c _ZN3pxt5errorENS_9PXT_PANICEi
08003164 g     F .boot_text	00000034 __wrap___aeabi_dcmpgt
08000808  w    F .boot_text	00000002 dma2_channel4_5_isr
0800a85c g     F .text	00000004 _ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi
0800c2a4 g     F .text	00000024 _ZN5codal14EventQueueItemC1ENS_5EventE
080087b8 g     F .text	0000000c _ZN3pxt7toFloatEPNS_12TValueStructE
080052e4 g     F .boot_text	00000020 boot_target_manifest_bootloader
20001620 g     O .bss	00000004 _ZN5codal12currentFiberE
08002934 g     F .boot_text	0000009e .hidden __aeabi_d2f
0800bc10 g     F .text	00000002 _ZN5codal5TimerD2Ev
08000c58 g     F .boot_text	0000000c target_set_alarm_callback
08005304 g     F .boot_text	00000006 boot_target_get_serial_number
2000164c g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
0800b39c g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
0800aab8 g     F .text	00000078 _Z18component_callbackN5codal5EventE
08004ac0 g     F .boot_text	0000002c get_usb_status
20001678 g       .bss	00000000 _ebss
08007950 g     F .text	00000040 _ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE
0800c25c g     F .text	0000001c _ZN5codal5EventC1EttNS_15EventLaunchModeE
080022d0 g     F .boot_text	00000034 os_init
080011b4 g     F .boot_text	0000000e usbd_ep_setup
08008100 g     F .text	00000008 _ZN8Boolean_4bangEi
08008698 g     F .text	0000002a _ZN6numops4lslsEPN3pxt12TValueStructES2_
08000d6a g       .boot_text	00000000 restore_register_context
0800a0fc  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08001374 g     F .boot_text	00000030 usbd_register_control_callback
0800bb24 g     F .text	00000028 _ZN5codal5Timer4syncEm
20000040 g     O .boot_data	00000004 hal_data_test
08000808  w    F .boot_text	00000002 pvd_isr
080011d4 g     F .boot_text	0000000e usbd_ep_read_packet
080099f4 g     F .text	00000012 _ZN3pxt14RefRecord_scanEPNS_9RefRecordE
0800cc6c g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800c278 g     F .text	00000018 _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08009a98 g     F .text	00000010 _ZN3pxt6RefMap5printEPS0_
0800b928 g     F .text	00000020 calloc
0800417c g     F .boot_text	0000004c platform_setup
08008b88 g     F .text	00000010 _ZN6numops3eqqEPN3pxt12TValueStructES2_
08008318 g     F .text	00000006 _ZN6Array_3popEPN3pxt13RefCollectionE
08009f48 g     F .text	0000000c _ZN3pxt13getNumGlobalsEv
08009a18 g     F .text	00000004 _ZN3pxt11RefRefLocal6gcsizeEPS0_
08002cb2 g     F .boot_text	00000000 qfp_float2uint
0800ae5c  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08002594 g     F .boot_text	0000000c os_event_init
0800a1dc g     F .text	00000024 _ZN3pxt10runForeverEPNS_12TValueStructE
0800b35c g     F .text	0000001c _ZN5codal12create_fiberEPFvvES1_
08009bc8 g     F .text	00000044 _ZN3pxt15mkClassInstanceEPNS_6VTableE
08007f1c g     F .text	00000004 _ZN7String_6lengthEPN3pxt11BoxedStringE
20000988 g     O .boot_bss	00000004 usbd_dev
08007c8c g     F .text	00000006 _ZN7control10waitMicrosEi
08000b58 g     F .boot_text	00000004 target_disable_irq
08004208 g     F .boot_text	00000010 led_on
080025c8 g     F .boot_text	00000276 .hidden __aeabi_dadd
0800b698 g     F .text	00000020 _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000168 g     F .boot_text	000005d0 baseloader_start
0800230c g     F .boot_text	0000000c os_running
20000ca6 g     O .boot_bss	00000001 last_running_task
0800aa14  w    F .text	00000002 _ZN3pxt16dumpPerfCountersEv
0800bef4 g     F .text	00000084 _ZN5codal10MessageBusD2Ev
0800080c  w    F .boot_text	00000002 sv_call_handler
0800cfb0 g     O .text	00000024 _ZN3pxt9buffer_vtE
08007c64 g     F .text	0000001c _ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi
08000808  w    F .boot_text	00000002 rcc_isr
0800306c g     F .boot_text	00000030 __wrap___aeabi_dsub
08000000 g     O .boot_text	00000150 vector_table
08000e14 g     F .boot_text	00000070 desig_get_unique_id_as_string
080028c8 g     F .boot_text	0000006a .hidden __aeabi_ul2d
08000d3a g       .boot_text	00000000 save_register_context
08002dc6 g     F .boot_text	00000000 qfp_fexp
08008740 g     F .text	0000001e _ZN6numops4bnotEPN3pxt12TValueStructE
08004b28 g     F .boot_text	00000050 aggregate_register_callback
08002db4 g     F .boot_text	00000000 qfp_fcos
08009a88 g     F .text	00000010 _ZN3pxt11RefRefLocal5printEPS0_
08007400 g     F .text	00000118 application_start
08009e78 g     F .text	00000010 _ZN3pxt13RefCollectionC2Ev
0800a64c g     F .text	000000a8 _ZN3pxt6getPinEi
08007780 g     F .text	00000012 _ZN5Math_5acoshEPN3pxt12TValueStructE
08008348 g     F .text	00000010 _ZN3pxt11programSizeEv
08000808  w    F .boot_text	00000002 flash_isr
0800dae4 g       *ABS*	00000000 _data_loadaddr
0800b25c g     F .text	00000098 _ZN5codal19fiber_wake_on_eventEtt
0800a550 g     F .text	00000008 _ZN7control19allocateNotifyEventEv
20005000 g       .boot_buf	00000000 end
08000808  w    F .boot_text	00000002 uart4_isr
08008814 g     F .text	00000058 _ZN6numops4mulsEPN3pxt12TValueStructES2_
080021b0 g     F .boot_text	0000005c rtc_interrupt_enable
0800c3d0 g     F .text	00000060 _ZN5codal3_cm3Pin15setDigitalValueEi
08000850 g     F .boot_text	00000030 rtc_alarm_isr
08007c9c g     F .text	00000004 _ZN7control18deviceSerialNumberEv
08000808  w    F .boot_text	00000002 exti15_10_isr
08006c2c g     O .boot_init_array	00000004 __boot_init_array_end
0800b24c g     F .text	00000010 _ZN5codal23fiber_scheduler_runningEv
0800ac58  w    F .text	00000006 _ZN5codal11CodalDevice4waitEm
0800bb4c g     F .text	000000c2 _ZN5codal5Timer7triggerEv
080052c4 g     F .boot_text	00000020 boot_target_manifest_baseloader
0800b948 g     F .text	0000002e device_realloc
0800c32c g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
08000bc0 g     F .boot_text	00000004 tcb_get_stack_base
0800c290 g     F .text	00000012 _ZN5codal5EventC2Ev
080053e4 g     F .boot_text	00000054 cdcadm_transmit
0800233c g     F .boot_text	00000060 os_msgQ_tick
08000bac g     F .boot_text	00000006 tcb_allocate
080086f0 g     F .text	00000028 _ZN6numops4eorsEPN3pxt12TValueStructES2_
0800d648 g     O .text	00000018 _ZTVN5codal5TimerE
08003b1c g     F .boot_text	0000013c fmod
0800b7e8 g     F .text	00000024 _Z16device_heap_sizeh
0800337c g     F .boot_text	00000034 cos
0800d788 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800a05c g     F .text	0000000c _ZN3pxt5startEv
0800da1c g     O .text	00000048 PinMap_SPI_NSS
080036b0 g     F .boot_text	000000b8 tanh
08000808  w    F .boot_text	00000002 hard_fault_handler
0800cb04 g     F .text	00000094 _ZN5codal3I2C5writeEtPhib
08000808  w    F .boot_text	00000002 exti1_isr
080082a4 g     F .text	0000001c _ZN3pxt8fromUIntEj
0800c3c8 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
0800a564 g     F .text	00000010 _ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv
08003134 g     F .boot_text	00000030 __wrap___aeabi_dcmpge
0800242c g     F .boot_text	00000098 os_task_tick
0800c7a8 g     F .text	0000005c _ZN5codal3_cm5Timer4initEv
08004b78 g     F .boot_text	0000001c usb_set_serial_number
080091e8 g     F .text	0000000c _ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
08000808  w    F .boot_text	00000002 i2c1_ev_isr
20001084 g     O .bss	00000008 _ZN3pxt9lastEventE
0800b684 g     F .text	00000014 _ZN5codal13release_fiberEv
08000df0 g     F .boot_text	00000024 rcc_periph_reset_pulse
08002b70 g     F .boot_text	00000000 qfp_fmul
0800da64 g     O .text	00000048 PinMap_SPI_SCK
08001df4 g     F .boot_text	00000088 st_usbfs_ep_write_packet
08009994 g     F .text	0000001c _ZN3pxt13registerGCPtrEPNS_12TValueStructE
08001c68 g     F .boot_text	00000048 st_usbfs_endpoints_reset
0800ae3c g     F .text	0000001e codal_dmesg
080025c4 g     F .boot_text	0000027a .hidden __aeabi_dsub
08000808  w    F .boot_text	00000002 dma2_channel1_isr
0800bcdc  w    F .text	00000030 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
0800aab0  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
0800b89c g     F .text	0000004c device_malloc
08002e30 g     F .boot_text	00000000 qfp_fln
080088f4 g     F .text	00000026 _ZN5Math_3powEPN3pxt12TValueStructES2_
08003f5c g     F .boot_text	0000000c enable_log
08009804 g     F .text	0000001a _ZN3pxt15gcAllocateArrayEi
08003df8 g     F .boot_text	0000002e strstr
0800080c  w    F .boot_text	00000002 pend_sv_handler
08008394 g     F .text	00000004 _ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE
08003360 g     F .boot_text	0000001c sin
080028c8 g     F .boot_text	0000006a .hidden __floatundidf
080041d8 g     F .boot_text	00000008 __cxa_pure_virtual
0800af9c g     F .text	000000e8 _ZN5codal15scheduler_eventENS_5EventE
0800229c g     F .boot_text	00000030 rtc_check_flag
0800d98c g     O .text	00000048 PinMap_SPI_MISO
0800a9b8 g     F .text	0000003c _ZN3pxt9dumpDmesgEv
08000808  w    F .boot_text	00000002 spi2_isr
080033cc g     F .boot_text	00000054 atan2
08009a54 g     F .text	0000000c _ZN3pxt6RefMap7destroyEPS0_
0800ac4c  w    F .text	00000006 _ZN5codal11CodalDevice5panicEi
0800c330 g     F .text	0000001c _ZN5codal3_cm3Pin14setAnalogValueEi
2000166c g     O .bss	00000001 _ZN3pxt4inGCE
0800303c g     F .boot_text	00000030 __wrap___aeabi_dadd
08000acc g     F .boot_text	00000030 target_init
20000d04 g       .boot_bss	00000000 boot_end
0800b10c g     F .text	00000140 _ZN5codal14scheduler_initERNS_10EventModelE
08002538 g     F .boot_text	00000034 os_task_run
080091f4 g     F .text	00000060 _ZN3pxt16popThreadContextEPNS_13ThreadContextE
0800c308 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
0800a9f4  w    F .text	00000002 _ZN3pxt4incrEPNS_12TValueStructE
080011ec g     F .boot_text	00000008 usbd_ep_stall_get
0800309c g     F .boot_text	00000034 __wrap___aeabi_dcmpeq
08002c88 g     F .boot_text	00000000 qfp_float2int
08000808  w    F .boot_text	00000002 tim8_up_isr
0800a068 g     F .text	0000002a _ZN6Array_7isArrayEPN3pxt12TValueStructE
08002e54 g     F .boot_text	00000000 qfp_fatan2
080032d4 g     F .boot_text	0000008c pow
08003e26 g     F .boot_text	0000002a strncpy
08003564 g     F .boot_text	000000a8 sinh
080038b8 g     F .boot_text	000000c8 atanh
080032ac g     F .boot_text	00000028 log10
0800239c g     F .boot_text	0000000c os_sem_init
0800c220 g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800a720 g     F .text	0000000c _ZN4pins13pulseDurationEv
08009868 g     F .text	00000074 realloc
08009820 g     F .text	0000001e app_alloc
08008788 g     F .text	0000002e _ZN6numops4lsrsEPN3pxt12TValueStructES2_
08009c6c g     F .text	0000001c _ZN3pxt9LLSegment3popEv
0800aa10  w    F .text	00000002 _ZN3pxt15stopPerfCounterENS_12PerfCountersE
0800840c g     F .text	0000001e _ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE
08002860 g     F .boot_text	00000022 .hidden __aeabi_i2d
08000808  w    F .boot_text	00000002 dma2_channel2_isr
08009f10 g     F .text	00000002 _ZN3pxt13debugMemLeaksEv
08001ae8 g     F .boot_text	00000014 flash_set_ws
08006c2c g     O .boot_fini_array	00000004 __boot_fini_array_end
08000f30 g     F .boot_text	00000098 rcc_set_rtc_clock_source
08001b0c g     F .boot_text	00000044 st_usbfs_set_ep_rx_bufsize
08004be4 g     F .boot_text	00000178 dump_usb_request
08006c2c g       .boot_init_array	00000000 _boot_etext
0800d660  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08003d98 g     F .boot_text	0000001e memcmp
08002cd0 g     F .boot_text	00000000 qfp_fix2float
080013a4 g     F .boot_text	00000064 _usbd_control_setup
080090e4 g     F .text	00000054 _ZN3pxt10failedCastEPNS_12TValueStructE
0800c3a8 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
0800080c  w    F .boot_text	00000002 debug_monitor_handler
08000808  w    F .boot_text	00000002 exti3_isr
08000808  w    F .boot_text	00000002 adc3_isr
08008cd8 g     F .text	00000004 _ZN3pxt9switch_eqEPNS_12TValueStructES1_
0800bcbc  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
08000cf6 g       .boot_text	00000000 save_context
08000808  w    F .boot_text	00000002 tim3_isr
08000d98 g     F .boot_text	00000010 scb_reset_system
08002dbe g     F .boot_text	00000000 qfp_ftan
08000808  w    F .boot_text	00000002 usart2_isr
08003100 g     F .boot_text	00000034 __wrap___aeabi_dcmple
08000b84 g     F .boot_text	00000020 target_panic
0800a74c g     F .text	00000006 _ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb
080040c8 g     F .boot_text	0000000a debug_print
08000808  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08007400 g       .text	00000000 _text
08009d94 g     F .text	00000048 _ZN3pxt7Segment6removeEj
08009a4c g     F .text	00000008 _ZN3pxt13RefCollection7destroyEPS0_
08000c74 g       .boot_text	00000000 swap_context
200047bc g     O .boot_buf	00000400 flashBuf
08008e90 g     F .text	00000022 _ZN6numops2leEPN3pxt12TValueStructES2_
2000001c g     O .boot_data	00000024 base_tmp
080025a0 g     F .boot_text	0000000c os_signal_event
0800dae4 g       .fini_array	00000000 __fini_array_start
08000808  w    F .boot_text	00000002 i2c2_er_isr
08007cec g     F .text	0000001c _ZN3pxt11findBindingEii
08009c24 g     F .text	00000018 _ZN3pxt15RefRecord_printEPNS_9RefRecordE
08009308 g     F .text	00000058 _ZN3pxt9gcProcessEPNS_12TValueStructE
080076f4 g     F .text	00000012 _ZN5Math_4log2EPN3pxt12TValueStructE
080022cc g     F .boot_text	00000002 os_cbkSleep
08009068 g     F .text	0000007c _ZN3pxt8anyPrintEPNS_12TValueStructE
08001db0 g     F .boot_text	00000044 st_usbfs_ep_nak_set
080089f8 g     F .text	00000012 _ZN5Math_3logEPN3pxt12TValueStructE
080096d8 g     F .text	0000012c _ZN3pxt10gcAllocateEi
08003de8 g     F .boot_text	00000010 memset
20001648 g     O .bss	00000004 _ZN5codal12system_timerE
08007518 g     F .text	0000000a main
0800b378 g     F .text	00000024 _ZN5codal12create_fiberEPFvPvES0_S2_
08002d72 g     F .boot_text	00000000 qfp_fsin
0800111c g     F .boot_text	00000054 usbd_init
0800891c g     F .text	00000026 _ZN5Math_5atan2EPN3pxt12TValueStructES2_
2000111c g     O .bss	00000100 _ZN5codal14CodalComponent10componentsE
0800cc6c g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
08000808  w    F .boot_text	00000002 i2c2_ev_isr
080025ac g     F .boot_text	00000010 os_event_set_signaling_tid
0800a7ac g     F .text	00000080 _ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei
08000808  w    F .boot_text	00000002 uart5_isr
080078a8 g     F .text	00000026 _ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii
08004354 g     F .boot_text	00000034 platform_set_alarm
20001640 g     O .bss	00000008 heap
20001060 g     O .bss	00000024 _ZN3pxt8devTimerE
20000ca8 g     O .boot_bss	0000005b hf2_buffer_mini
0800c578 g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
08008398 g     F .text	00000014 _ZN5pxtrt8mklocRefEv
0800080c  w    F .boot_text	00000002 sys_tick_handler
0800d67c  w    O .text	00000014 _ZTVN5codal10EventModelE
0800256c g     F .boot_text	00000028 os_on_assert
08002934 g     F .boot_text	0000009e .hidden __truncdfsf2
0800bef4 g     F .text	00000084 _ZN5codal10MessageBusD1Ev
08008520 g     F .text	00000002 _ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE
0800dae4 g       .init_array	00000000 __init_array_end
08000808  w    F .boot_text	00000002 fsmc_isr
08000808  w    F .boot_text	00000002 dma1_channel1_isr
08000808  w    F .boot_text	00000002 exti4_isr
08008280 g     F .text	0000000e _ZN3pxt9fromFloatEf
0800a910 g     F .text	00000040 _ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_
0800c774 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
08008944 g     F .text	000000b2 _ZN5Math_11randomRangeEPN3pxt12TValueStructES2_
0800d700 g     O .text	00000054 _ZTVN5codal3_cm3PinE
080028d8 g     F .boot_text	0000005a .hidden __aeabi_l2d
08002df6 g     F .boot_text	00000000 qfp_fsqrt
20000044 g     O .boot_data	00000004 codal_heap_start
080084c8 g     F .text	00000038 _ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE
080082dc g     F .text	00000006 _ZN5Math_4imulEii
0800c564 g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
0800ba3c g     F .text	00000030 _ZN5codal5TimerC2Ev
08000afc g     F .boot_text	00000010 target_wait_for_event
0800b5dc g     F .text	0000002c _ZN5codal20fiber_wait_for_eventEtt
08005e58 g     F .boot_text	00000038 usb21_setup
0800b978 g     F .text	0000002e _ZN5codal8ListenerC2EttPFvNS_5EventEEt
08003fd8 g     F .boot_text	00000038 debug_force_flush
0800a1d0 g     F .text	00000004 _ZN3pxt12releaseFiberEv
0800c548 g     F .text	0000000e _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
08009e98 g     F .text	00000014 _ZN3pxt6RefMapC1Ev
08004010 g     F .boot_text	00000088 _Z11debug_printj
08008b08 g     F .text	0000007e _ZN3pxt8eqq_boolEPNS_12TValueStructES1_
08003268 g     F .boot_text	0000001c exp
0800ac60  w    F .text	00000004 _ZN5codal11CodalDevice5resetEv
0800c304 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08009b60 g     F .text	00000002 _ZN3pxt11RefRefLocal7destroyEPS0_
080080f0 g     F .text	0000000e _ZN7String_8includesEPN3pxt11BoxedStringES2_i
08007e8c g     F .text	0000006c _ZN7String_6concatEPN3pxt11BoxedStringES2_
0800a37c g     F .text	00000004 _ZN3pxt15current_time_msEv
0800bf9c g     F .text	000000b0 _ZN5codal10MessageBusC1Ev
08003d74 g     F .boot_text	00000014 strcmp
08002cce g     F .boot_text	00000000 qfp_int2float
08009c88 g     F .text	00000090 _ZN3pxt7Segment9growByMinEt
0800bd0c g     F .text	00000084 _ZN5codal10MessageBus6removeEPNS_8ListenerE
08007878 g     F .text	00000004 _ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE
08002080 g     F .boot_text	0000001c exti_enable_request
080033b0 g     F .boot_text	0000001c tan
08008a34 g     F .text	00000012 _ZN5Math_3sinEPN3pxt12TValueStructE
08002030 g     F .boot_text	00000050 exti_set_trigger
08000808  w    F .boot_text	00000002 mem_manage_handler
0800c86c g     F .text	00000070 restart_callback
08009a3c g     F .text	0000000a _ZN5loops5pauseEi
0800c37c g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800c39c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
08007f20 g     F .text	0000016c _ZN7String_8mystrtodEPKcPPc
20000050 g     O .boot_data	00000004 rcc_apb2_frequency
080020d8 g     F .boot_text	00000040 rtc_set_alarm_time
0800c290 g     F .text	00000012 _ZN5codal5EventC1Ev
08007a18 g     F .text	00000008 _ZN7control12createBufferEi
080011ac g     F .boot_text	00000008 usbd_poll
0800ca84 g     F .text	00000006 _ZN5codal3I2C4stopEv
08000c44 g     F .boot_text	00000002 _fini
0800bc30 g     F .text	0000001c _ZN5codal28system_timer_current_time_usEv
08000b0c g     F .boot_text	00000014 target_wait
08009f3c g     F .text	0000000c _ZN3pxt11programHashEv
08000808  w    F .boot_text	00000002 can2_tx_isr
08003420 g     F .boot_text	000000b0 atan
0800c310 g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
08008a0c g     F .text	00000012 _ZN5Math_5log10EPN3pxt12TValueStructE
0800b6cc g     F .text	000000a0 _ZN5codal6invokeEPFvPvES0_
080087c4 g     F .text	00000026 _ZN6numops4addsEPN3pxt12TValueStructES2_
2000121c g     O .bss	00000404 codalLogStore
08007cb0 g     F .text	00000004 _ZN7control10dmesgValueEPN3pxt12TValueStructE
08000808  w    F .boot_text	00000002 exti9_5_isr
080077f8 g     F .text	00000004 _ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE
08008358 g     F .text	00000038 _ZN3pxt9getConfigEii
08004218 g     F .boot_text	00000010 led_off
0800a634  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
080034d0 g     F .boot_text	00000094 asin
08000808  w    F .boot_text	00000002 dma2_channel3_isr
08002c8a g     F .boot_text	00000000 qfp_float2fix
08000f20 g     F .boot_text	00000010 rcc_enable_rtc_clock
0800be78 g     F .text	0000007c _Z14async_callbackPv
20000468 g     O .boot_data	00000004 _impure_ptr
08001a44 g     F .boot_text	00000040 _usbd_standard_request_endpoint
0800aaac  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
080024c4 g     F .boot_text	00000074 os_task_signal_event
080099b0 g     F .text	00000012 _ZN3pxt15unregisterGCPtrEPNS_12TValueStructE
08000810 g     F .boot_text	00000010 target_in_isr
0800dad8 g       .preinit_array	00000000 __preinit_array_end
08002014 g     F .boot_text	0000001a nvic_enable_irq
08004228 g     F .boot_text	00000010 led_wait
08000c70 g     F .boot_text	00000004 target_enable_debug
0800886c g     F .text	00000026 _ZN6numops3divEPN3pxt12TValueStructES2_
08000808  w    F .boot_text	00000002 dma1_channel7_isr
08005254 g     F .boot_text	0000002c boot_target_usb_init
08004238 g     F .boot_text	0000011c platform_start_timer
0800a22c g     F .text	0000012c _ZN3pxt11initRuntimeEv
0800b978 g     F .text	0000002e _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08005484 g     F .boot_text	0000002c cdc_setup
20001000 g       .data	00000000 _data
08000808  w    F .boot_text	00000002 tim1_up_isr
08008760 g     F .text	00000028 _ZN6numops4andsEPN3pxt12TValueStructES2_
080082e4 g     F .text	00000006 _ZN5Math_4idivEii
08002118 g     F .boot_text	00000040 rtc_set_prescale_val
0800a978 g     F .text	0000002c _ZN4pins7spiModeEi
08007b44 g     F .text	00000120 _ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE
0800c72c g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
08008264 g     F .text	0000001c _ZN7String_10charCodeAtEPN3pxt11BoxedStringEi
0800c458 g     F .text	00000038 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
0800380c g     F .boot_text	000000ac acosh
08007814 g     F .text	00000012 _ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii
20001650 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
0800c310 g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000fc8 g     F .boot_text	000000cc rcc_clock_setup_in_hse_8mhz_out_72mhz
0800c6fc g     F .text	00000030 _ZN5codal3_cm13tick_callbackEv
080031f8 g     F .boot_text	00000038 __wrap___aeabi_d2uiz
0800cc80 g     O .text	00000324 _ZN3pxt20functionsAndBytecodeE
08002cda g     F .boot_text	00000000 qfp_uint2float
0800830c g     F .text	0000000c _ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE
08008340 g     F .text	00000006 _ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
0800928c g     F .text	00000048 _ZN3pxt10gcScanManyEPPNS_12TValueStructEj
0800c2e4 g     F .text	00000020 _ZN5codal22MemberFunctionCallbackeqERKS0_
0800a528 g     F .text	00000016 _ZN7control10raiseEventEii
08002158 g     F .boot_text	00000018 rtc_get_counter_val
0800a63c  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800c4f4 g     F .text	0000000e _ZN5codal3_cm3Pin15setAnalogPeriodEi
0800a380 g     F .text	0000000c _ZN3pxt16getThreadContextEv
08000dc4 g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
08000808  w    F .boot_text	00000002 can2_sce_isr
08008ed8 g     F .text	0000001e _ZN6numops2geEPN3pxt12TValueStructES2_
08000808  w    F .boot_text	00000002 tim4_isr
08009c0c g     F .text	0000000a _ZN3pxt9RefObject9destroyVTEv
0800daac g     O .text	0000002c _ZTVN5codal3I2CE
0800c04c g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
08008ef8 g     F .text	0000001e _ZN6numops2gtEPN3pxt12TValueStructES2_
08001cb0 g     F .boot_text	000000c0 st_usbfs_ep_stall_set
0800c070 g     F .text	00000054 _ZN5codal10MessageBus21deleteMarkedListenersEv
08007e24 g     F .text	0000000c _ZN7String_7mkEmptyEv
0800a5b4 g     F .text	0000004c _ZN4pins13i2cReadBufferEiib
08004a14 g     F .boot_text	000000ac usb_setup
20000d04 g       .boot_bss	00000000 _boot_ebss
2000100c g       .data	00000000 _edata
0800b76c g     F .text	00000028 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
0800bd90 g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
08000808  w    F .boot_text	00000002 dma1_channel2_isr
0800d568  w    O .text	00000054 _ZTVN5codal16STM32BluePillPinE
08000808  w    F .boot_text	00000002 i2c1_er_isr
0800c278 g     F .text	00000018 _ZN5codal5EventC2EttmNS_15EventLaunchModeE
0800ac54  w    F .text	00000004 _ZN5codal11CodalDevice15getSerialNumberEv
080019ec g     F .boot_text	00000058 _usbd_standard_request_device
0800b084 g     F .text	00000054 _Z15getFiberContextv
08000b54 g     F .boot_text	00000004 target_enable_irq
08009960 g     F .text	00000034 _ZN3pxt10registerGCEPPNS_12TValueStructEi
0800ba24 g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
08000808  w    F .boot_text	00000002 can_sce_isr
0800c574 g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
0800a718 g     F .text	00000008 _ZN4pins12createBufferEi
08002b80 g     F .boot_text	00000000 qfp_fdiv
0800080c  w    F .boot_text	00000002 nmi_handler
0800220c g     F .boot_text	0000005c rtc_interrupt_disable
080043dc g     F .boot_text	0000025c prepare_baseloader
08002b54 g     F .boot_text	00000000 qfp_fcmp
08006c2c g     O .boot_preinit_array	00000004 __boot_preinit_array_end
080041e0 g     F .boot_text	00000004 _Znwj
20000ba0 g     O .boot_bss	00000008 st_usbfs_force_nak
08008a48 g     F .text	00000012 _ZN5Math_3cosEPN3pxt12TValueStructE
0800d690 g     O .text	0000003c _ZTVN5codal10MessageBusE
08007de4 g     F .text	00000040 _ZN3pxt9getRandomEj
20000000 g       .boot_data	00000000 _boot_data
0800b794 g     F .text	00000018 _ZN5codal9idle_taskEv
0800a754 g     F .text	00000020 _ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE
08003284 g     F .boot_text	00000028 log2
08007ca0 g     F .text	0000000e _ZN7control5__logEiPN3pxt11BoxedStringE
0800bf94 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
08008718 g     F .text	00000028 _ZN6numops4orrsEPN3pxt12TValueStructES2_
08000808  w    F .boot_text	00000002 tim8_cc_isr
08009b5c g     F .text	00000002 _ZN3pxt9RefAction7destroyEPS0_
08007d54 g     F .text	0000004c _ZN3pxt8mkStringEPKci
08008db0 g     F .text	00000014 _ZN6numops10toBoolDecrEPN3pxt12TValueStructE
0800a9a8 g     F .text	00000010 _ZN3pxt10sendSerialEPKci
080081b4 g     F .text	000000a0 _ZN7String_8toNumberEPN3pxt11BoxedStringE
200047bc g       .boot_buf	00000000 _boot_stack
0800bc8c g     F .text	00000016 _ZN5codal10MessageBus9elementAtEi
0800a734  w    F .text	00000006 _ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi
0800ac34  w    F .text	00000008 _ZN5codal11CodalDevice10getVersionEv
08001f30 g     F .boot_text	000000e4 st_usbfs_poll
080066e4 g     O .boot_text	00000018 webusb_platform_capability_descriptor
0800bf78 g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
080083e0 g     F .text	00000004 _ZN5pxtrt5panicEi
08009a0c g     F .text	0000000a _ZN3pxt9RefAction6gcsizeEPS0_
0800b57c g     F .text	00000014 _ZN5codal8scheduleEv
08006c2c g     O .boot_init_array	00000004 __boot_init_array_start
08009d78 g     F .text	0000001c _ZN3pxt7Segment3popEv
080051e4 g     F .boot_text	00000070 boot_target_gpio_setup
0800c34c g     F .text	0000002c _ZN5codal3_cm3Pin13setServoValueEiii
20000b9c g     O .boot_bss	00000004 hal_bss_test
08000808  w    F .boot_text	00000002 tamper_isr
08008f18 g     F .text	00000100 _ZN6numops8toStringEPN3pxt12TValueStructE
08006026 g     O .boot_text	00000101 _ctype_
0800ac44  w    F .text	00000006 _ZN5codal11CodalDevice10seedRandomEm
0800dad8 g       .init_array	00000000 __init_array_start
08000dac g     F .boot_text	00000006 gpio_clear
08004aec g     F .boot_text	0000003c aggregate_register_config_callback
0800ab30 g     F .text	000000dc _ZN5codal14CodalComponent12addComponentEv
0800771c g     F .text	00000012 _ZN5Math_4tanhEPN3pxt12TValueStructE
08009b64 g     F .text	00000064 _ZN3pxt8mkActionEiPNS_9RefActionE
0800a844 g     F .text	00000004 _ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi
08000808  w    F .boot_text	00000002 eth_wkup_isr
08008108 g     F .text	000000ac _ZN3pxt10fromDoubleEd
080041c8 g     F .boot_text	00000010 enable_debug
080010c8 g     F .boot_text	00000022 st_usbfs_copy_to_pm
0800842c g     F .text	00000088 _ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE
080098dc g     F .text	00000084 _ZN3pxt17pushThreadContextEPvS0_
0800c1dc g     F .text	00000042 _ZN5codal10MessageBus4idleENS_5EventE
0800c25c g     F .text	0000001c _ZN5codal5EventC2EttNS_15EventLaunchModeE
0800787c g     F .text	0000002a _ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii
0800bc78  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08009a48 g     F .text	00000002 _ZN3pxt17RefRecord_destroyEPNS_9RefRecordE
080023a8 g     F .boot_text	00000044 os_task_init
080083f8 g     F .text	00000014 _ZN5pxtrt5mkMapEv
08007c80 g     F .text	00000004 _ZN7control6millisEv
0800c160 g     F .text	00000062 _ZN5codal10MessageBus10queueEventERNS_5EventE
08008e6c g     F .text	00000024 _ZN6numops7lt_boolEPN3pxt12TValueStructES2_
080010ec g     F .boot_text	00000030 st_usbfs_copy_from_pm
080051cc g     F .boot_text	00000018 boot_target_set_led
08003d88 g     F .boot_text	00000010 strlen
08000bb4 g     F .boot_text	00000004 tcb_configure_lr
08004158 g     F .boot_text	00000024 debug_printhex_unsigned
20000580 g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
20005000 g       .boot_buf	00000000 _eboot_buf
08008b98 g     F .text	00000010 _ZN6numops4neqqEPN3pxt12TValueStructES2_
08000da8 g     F .boot_text	00000004 gpio_set
0800c524 g     F .text	0000001e _ZN5codal3_cm3Pin5setupEhh
080082cc g     F .text	0000000e _ZN5Math_6randomEv
0800a19c g     F .text	00000020 _ZN3pxt12forever_stubEPv
08007758 g     F .text	00000012 _ZN5Math_5atanhEPN3pxt12TValueStructE
0800776c g     F .text	00000012 _ZN5Math_5asinhEPN3pxt12TValueStructE
0800b9bc g     F .text	00000068 _ZN5codal8Listener5queueENS_5EventE
0800a094 g     F .text	00000068 _ZN5pxtrt6keysOfEPN3pxt12TValueStructE
08002884 g     F .boot_text	00000042 .hidden __aeabi_f2d
08000808  w    F .boot_text	00000002 bus_fault_handler
08000808  w    F .boot_text	00000002 wwdg_isr
20001030 g     O .bss	00000004 _ZN3pxt7globalsE
080082ec g     F .text	00000014 _ZN6Array_2mkEv
08009018 g     F .text	00000050 _ZN3pxt6typeOfEPNS_12TValueStructE
08000808  w    F .boot_text	00000002 dma1_channel3_isr
0800ba30 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
080076a0 g     F .text	00000054 _ZN5Math_12randomDoubleEv
0800a1bc  w    F .text	00000014 _ZN5codal3_cm5TimerD1Ev
0800aa44 g     F .text	00000064 _ZN5codal4itoaEiPc
20001038 g     O .bss	00000024 _ZN3pxt13devMessageBusE
08009d58 g     F .text	0000001e _ZN3pxt7Segment9setLengthEj
0800a398 g     F .text	000000d4 _ZN3pxt15gcProcessStacksEi
08002f10 g     F .boot_text	000000cc acos
08002170 g     F .boot_text	00000040 rtc_set_counter_val
20000ba8 g     O .boot_bss	000000fc st_usbfs_dev
0800bc10 g     F .text	00000002 _ZN5codal5TimerD1Ev
08008338 g     F .text	00000006 _ZN6Array_8removeAtEPN3pxt13RefCollectionEi
08007708 g     F .text	00000012 _ZN5Math_3expEPN3pxt12TValueStructE
08009138 g     F .text	0000001c _ZN3pxt15missingPropertyEPNS_12TValueStructE
0800a11c g     F .text	00000070 _ZN3pxt13dispatchEventEN5codal5EventE
080025c4 g     F .boot_text	0000027a .hidden __subdf3
08002318 g     F .boot_text	00000024 os_msgQ_init
0800dad8 g       .preinit_array	00000000 __preinit_array_start
08003980 g     F .boot_text	0000008c trunc
08007c88 g     F .text	00000004 _ZN7control5resetEv
08001e7c g     F .boot_text	000000b4 st_usbfs_ep_read_packet
08009e98 g     F .text	00000014 _ZN3pxt6RefMapC2Ev
08000808  w    F .boot_text	00000002 spi3_isr
0800a558 g     F .text	0000000c _ZN7control5dmesgEPN3pxt11BoxedStringE
08008d2c g     F .text	0000001c _ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE
08009e88 g     F .text	00000010 _ZN3pxt11RefRefLocalC2Ev
20001674 g     O .bss	00000004 debug_base_result
0800a6f4 g     F .text	00000012 _ZN3pxt9getPinCfgEi
08008694 g     F .text	00000004 _ZN3pxt5toIntEPNS_12TValueStructE
08000c48 g     F .boot_text	00000004 __aeabi_atexit
08004108 g     F .boot_text	00000004 debug_print_int
08006368 g     O .boot_text	00000055 infoUf2File
08000150 g     O .boot_text	00000018 base_vector_table
08008894 g     F .text	00000060 _ZN6numops3modEPN3pxt12TValueStructES2_
08004388 g     F .boot_text	00000004 millis
0800c3b8 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000c4c g     F .boot_text	0000000c target_set_tick_callback
08000808  w    F .boot_text	00000002 tim2_isr
08008a84 g     F .text	00000012 _ZN5Math_4acosEPN3pxt12TValueStructE
0800410c g     F .boot_text	00000004 debug_print_unsigned
080067c8 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08009690 g     F .text	00000048 free
0800a200 g     F .text	00000024 _ZN3pxt13runInParallelEPNS_12TValueStructE
080020a8 g     F .boot_text	00000018 rtc_enter_config_mode
08001afc g     F .boot_text	00000010 st_usbfs_set_address
08000808  w    F .boot_text	00000002 exti0_isr
080099dc g     F .text	00000016 _ZN3pxt6RefMap4scanEPS0_
0800ca84 g     F .text	00000006 _ZN5codal3I2C5startEv



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 81 08 00 08 0d 08 00 08 09 08 00 08     .P. ............
 8000010:	09 08 00 08 09 08 00 08 09 08 00 08 00 00 00 00     ................
	...
 800002c:	0d 08 00 08 0d 08 00 08 00 00 00 00 0d 08 00 08     ................
 800003c:	0d 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800004c:	21 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     !...............
 800005c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800006c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800007c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800008c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800009c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 80000ac:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 80000bc:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 80000cc:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 80000dc:	09 08 00 08 09 08 00 08 51 08 00 08 09 08 00 08     ........Q.......
 80000ec:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 80000fc:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800010c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800011c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800012c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800013c:	09 08 00 08 09 08 00 08 09 08 00 08 09 08 00 08     ................
 800014c:	09 08 00 08                                         ....

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 69 01 00 08 08 08 00 08     i.."....i.......
 8000160:	01 74 00 08 22 05 69 19                             .t..".i.

08000168 <baseloader_start>:
	8000170:	fa22 fc05 	lsr.w	ip, r2, r5
		dest = (uint16_t *) dest0;
	8000174:	4aa9      	ldr	r2, [pc, #676]	; (800041c <baseloader_start+0x2b4>)  */

//  This must be the first function in the file.  Macros appearing before the function are OK.
void baseloader_start(void) {
 8000168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	base_tmp.src_hw  = (uint16_t *) base_para.src;
	base_tmp.half_word_count = base_para.byte_count / 2;
	base_para.result = 0;
	base_para.fail = 0;
	base_tmp.bytes_flashed = 0;
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 800016c:	2601      	movs	r6, #1
	base_para.result = 0;
 800016e:	2100      	movs	r1, #0
	base_tmp.dest_hw = (uint16_t *) base_para.dest;
 8000170:	4ab0      	ldr	r2, [pc, #704]	; (8000434 <baseloader_start+0x2cc>)
 8000172:	4bb1      	ldr	r3, [pc, #708]	; (8000438 <baseloader_start+0x2d0>)
	base_tmp.half_word_count = base_para.byte_count / 2;
 8000174:	6895      	ldr	r5, [r2, #8]
	base_tmp.dest_hw = (uint16_t *) base_para.dest;
 8000176:	6810      	ldr	r0, [r2, #0]
	base_tmp.half_word_count = base_para.byte_count / 2;
 8000178:	fa25 f406 	lsr.w	r4, r5, r6
 800017c:	609c      	str	r4, [r3, #8]
	base_tmp.src_hw  = (uint16_t *) base_para.src;
 800017e:	6854      	ldr	r4, [r2, #4]
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 8000180:	611e      	str	r6, [r3, #16]
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 8000182:	4eae      	ldr	r6, [pc, #696]	; (800043c <baseloader_start+0x2d4>)

	//  Validate dest, src, byte_count before flashing.
    //  TODO: Support other memory sizes.
	if ((uint32_t) base_para.dest < 0x08000000) {  //  Dest ROM address too low.
 8000184:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
void baseloader_start(void) {
 8000188:	b08b      	sub	sp, #44	; 0x2c
	base_tmp.src_hw  = (uint16_t *) base_para.src;
 800018a:	e9c3 0400 	strd	r0, r4, [r3]
	base_para.fail = 0;
 800018e:	e9c2 1105 	strd	r1, r1, [r2, #20]
	base_tmp.bytes_flashed = 0;
 8000192:	60d9      	str	r1, [r3, #12]
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 8000194:	e9c3 1105 	strd	r1, r1, [r3, #20]
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 8000198:	61de      	str	r6, [r3, #28]
	if ((uint32_t) base_para.dest < 0x08000000) {  //  Dest ROM address too low.
 800019a:	f0c0 812d 	bcc.w	80003f8 <baseloader_start+0x290>
		base_para.result = -2;
		base_para.fail = (uint32_t) base_para.dest;
		return;
	}
	if (((uint32_t) base_para.dest) + base_para.byte_count > 0x08010000) {  //  Dest ROM address too high.
 800019e:	4428      	add	r0, r5
 80001a0:	42b0      	cmp	r0, r6
 80001a2:	f200 8122 	bhi.w	80003ea <baseloader_start+0x282>
		base_para.result = -3;
		base_para.fail = ((uint32_t) base_para.dest) + base_para.byte_count;
		return;
	}
	if ((uint32_t) base_para.src >= 0x08000000 &&
 80001a6:	f104 4178 	add.w	r1, r4, #4160749568	; 0xf8000000
 80001aa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80001ae:	f0c0 812a 	bcc.w	8000406 <baseloader_start+0x29e>
		if (((uint32_t) base_para.src) + base_para.byte_count > 0x08010000) {  //  Too many ROM bytes to copy.
			base_para.result = -4;
			base_para.fail = ((uint32_t) base_para.src) + base_para.byte_count;
			return;
		}
	} else if ((uint32_t) base_para.src >= 0x20000000 &&
 80001b2:	f104 4160 	add.w	r1, r4, #3758096384	; 0xe0000000
 80001b6:	f5b1 4fa0 	cmp.w	r1, #20480	; 0x5000
 80001ba:	f080 8200 	bcs.w	80005be <baseloader_start+0x456>
		(uint32_t) base_para.src < 0x20005000) {  //  If src is in RAM...

		if (((uint32_t) base_para.src) + base_para.byte_count > 0x20005000) {  //  Too many RAM bytes to copy.
 80001be:	49a0      	ldr	r1, [pc, #640]	; (8000440 <baseloader_start+0x2d8>)
 80001c0:	442c      	add	r4, r5
 80001c2:	428c      	cmp	r4, r1
 80001c4:	f200 8215 	bhi.w	80005f2 <baseloader_start+0x48a>
		base_para.fail = (uint32_t) base_para.src;
		return;
	}

	//  Disable interrupts while flashing Bootloader because the System Vector Table may have been overwritten during flashing.
	if (base_para.restart) { base_disable_interrupts(); }
 80001c8:	68d7      	ldr	r7, [r2, #12]
 80001ca:	2f00      	cmp	r7, #0
 80001cc:	f040 81fc 	bne.w	80005c8 <baseloader_start+0x460>

	base_flash_unlock();  if (base_para.result < 0) { return; }  //  Quit if error.
 80001d0:	499c      	ldr	r1, [pc, #624]	; (8000444 <baseloader_start+0x2dc>)
 80001d2:	4d9d      	ldr	r5, [pc, #628]	; (8000448 <baseloader_start+0x2e0>)
 80001d4:	4c9d      	ldr	r4, [pc, #628]	; (800044c <baseloader_start+0x2e4>)
 80001d6:	600d      	str	r5, [r1, #0]
 80001d8:	600c      	str	r4, [r1, #0]
    while (base_tmp.half_word_count > 0) {        
 80001da:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80001de:	f1bc 0f00 	cmp.w	ip, #0
 80001e2:	f000 80e5 	beq.w	80003b0 <baseloader_start+0x248>
		if (!base_para.preview && base_para.restart) { 
			if (base_tmp.bytes_flashed % 100 == 0) {
				debug_base_result = base_tmp.bytes_flashed;  //  Trigger a watchpoint break.
			}
		}
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 80001e6:	f04f 0b00 	mov.w	fp, #0
 80001ea:	681c      	ldr	r4, [r3, #0]
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
				if (base_para.result < 0) { return; }  //  Quit if error.
			}
        }
		if (!base_para.preview) {  //  Write the ROM half-word.
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80001ec:	46da      	mov	sl, fp
 80001ee:	9408      	str	r4, [sp, #32]
 80001f0:	68d9      	ldr	r1, [r3, #12]
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 80001f2:	f8cd b010 	str.w	fp, [sp, #16]
 80001f6:	e9cd bb01 	strd	fp, fp, [sp, #4]
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80001fa:	46e3      	mov	fp, ip
 80001fc:	9109      	str	r1, [sp, #36]	; 0x24
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 80001fe:	468e      	mov	lr, r1
 8000200:	69d9      	ldr	r1, [r3, #28]
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 8000202:	4893      	ldr	r0, [pc, #588]	; (8000450 <baseloader_start+0x2e8>)
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 8000204:	9106      	str	r1, [sp, #24]
 8000206:	4993      	ldr	r1, [pc, #588]	; (8000454 <baseloader_start+0x2ec>)
 8000208:	6809      	ldr	r1, [r1, #0]
 800020a:	9103      	str	r1, [sp, #12]
 800020c:	6916      	ldr	r6, [r2, #16]
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 800020e:	4992      	ldr	r1, [pc, #584]	; (8000458 <baseloader_start+0x2f0>)
 8000210:	e9d3 5905 	ldrd	r5, r9, [r3, #20]
 8000214:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8000218:	9600      	str	r6, [sp, #0]
 800021a:	9705      	str	r7, [sp, #20]
		if (!base_para.preview && base_para.restart) { 
 800021c:	9e00      	ldr	r6, [sp, #0]
 800021e:	b9ae      	cbnz	r6, 800024c <baseloader_start+0xe4>
 8000220:	68d7      	ldr	r7, [r2, #12]
 8000222:	b19f      	cbz	r7, 800024c <baseloader_start+0xe4>
			if (base_tmp.bytes_flashed % 100 == 0) {
 8000224:	4f8d      	ldr	r7, [pc, #564]	; (800045c <baseloader_start+0x2f4>)
 8000226:	ea4f 76ee 	mov.w	r6, lr, asr #31
 800022a:	fb87 c70e 	smull	ip, r7, r7, lr
 800022e:	ebc6 1c67 	rsb	ip, r6, r7, asr #5
 8000232:	2764      	movs	r7, #100	; 0x64
 8000234:	fb07 ec1c 	mls	ip, r7, ip, lr
 8000238:	f1bc 0f00 	cmp.w	ip, #0
 800023c:	9f03      	ldr	r7, [sp, #12]
 800023e:	bf08      	it	eq
 8000240:	4677      	moveq	r7, lr
 8000242:	9703      	str	r7, [sp, #12]
 8000244:	9f04      	ldr	r7, [sp, #16]
 8000246:	bf08      	it	eq
 8000248:	2701      	moveq	r7, #1
 800024a:	9704      	str	r7, [sp, #16]
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 800024c:	9f06      	ldr	r7, [sp, #24]
 800024e:	42a7      	cmp	r7, r4
 8000250:	f240 8212 	bls.w	8000678 <baseloader_start+0x510>
        if (base_tmp.dest_hw >= base_tmp.erase_end || base_tmp.dest_hw < base_tmp.erase_start) {
 8000254:	454c      	cmp	r4, r9
 8000256:	f080 80df 	bcs.w	8000418 <baseloader_start+0x2b0>
 800025a:	42ac      	cmp	r4, r5
 800025c:	f0c0 80dc 	bcc.w	8000418 <baseloader_start+0x2b0>
 8000260:	9f01      	ldr	r7, [sp, #4]
 8000262:	9707      	str	r7, [sp, #28]
		if (!base_para.preview) {  //  Write the ROM half-word.
 8000264:	9e00      	ldr	r6, [sp, #0]
 8000266:	2e00      	cmp	r6, #0
 8000268:	f040 80e1 	bne.w	800042e <baseloader_start+0x2c6>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 800026c:	621e      	str	r6, [r3, #32]
 800026e:	6807      	ldr	r7, [r0, #0]
 8000270:	6196      	str	r6, [r2, #24]
 8000272:	f007 0735 	and.w	r7, r7, #53	; 0x35
 8000276:	621f      	str	r7, [r3, #32]
 8000278:	880e      	ldrh	r6, [r1, #0]
 800027a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800027e:	d906      	bls.n	800028e <baseloader_start+0x126>
 8000280:	4e77      	ldr	r6, [pc, #476]	; (8000460 <baseloader_start+0x2f8>)
 8000282:	6836      	ldr	r6, [r6, #0]
 8000284:	6a1f      	ldr	r7, [r3, #32]
 8000286:	f006 0635 	and.w	r6, r6, #53	; 0x35
 800028a:	433e      	orrs	r6, r7
 800028c:	621e      	str	r6, [r3, #32]
 800028e:	f04f 0c00 	mov.w	ip, #0
 8000292:	e010      	b.n	80002b6 <baseloader_start+0x14e>
 8000294:	6996      	ldr	r6, [r2, #24]
 8000296:	1c77      	adds	r7, r6, #1
 8000298:	2eff      	cmp	r6, #255	; 0xff
 800029a:	6197      	str	r7, [r2, #24]
 800029c:	f200 815b 	bhi.w	8000556 <baseloader_start+0x3ee>
 80002a0:	f8c3 c020 	str.w	ip, [r3, #32]
 80002a4:	6806      	ldr	r6, [r0, #0]
 80002a6:	f006 0635 	and.w	r6, r6, #53	; 0x35
 80002aa:	621e      	str	r6, [r3, #32]
 80002ac:	880e      	ldrh	r6, [r1, #0]
 80002ae:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002b2:	f200 8163 	bhi.w	800057c <baseloader_start+0x414>
 80002b6:	6a1e      	ldr	r6, [r3, #32]
 80002b8:	07f6      	lsls	r6, r6, #31
 80002ba:	d4eb      	bmi.n	8000294 <baseloader_start+0x12c>
 80002bc:	880e      	ldrh	r6, [r1, #0]
 80002be:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002c2:	d907      	bls.n	80002d4 <baseloader_start+0x16c>
 80002c4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80002c8:	1bf6      	subs	r6, r6, r7
 80002ca:	4f66      	ldr	r7, [pc, #408]	; (8000464 <baseloader_start+0x2fc>)
 80002cc:	4476      	add	r6, lr
 80002ce:	42be      	cmp	r6, r7
 80002d0:	f200 81c8 	bhi.w	8000664 <baseloader_start+0x4fc>
 80002d4:	4f64      	ldr	r7, [pc, #400]	; (8000468 <baseloader_start+0x300>)
 80002d6:	683e      	ldr	r6, [r7, #0]
 80002d8:	f046 0601 	orr.w	r6, r6, #1
 80002dc:	603e      	str	r6, [r7, #0]
 80002de:	2700      	movs	r7, #0
 80002e0:	f8b8 6000 	ldrh.w	r6, [r8]
 80002e4:	8026      	strh	r6, [r4, #0]
 80002e6:	621f      	str	r7, [r3, #32]
 80002e8:	6806      	ldr	r6, [r0, #0]
 80002ea:	6197      	str	r7, [r2, #24]
 80002ec:	f006 0635 	and.w	r6, r6, #53	; 0x35
 80002f0:	621e      	str	r6, [r3, #32]
 80002f2:	880e      	ldrh	r6, [r1, #0]
 80002f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f8:	d906      	bls.n	8000308 <baseloader_start+0x1a0>
 80002fa:	4e59      	ldr	r6, [pc, #356]	; (8000460 <baseloader_start+0x2f8>)
 80002fc:	6836      	ldr	r6, [r6, #0]
 80002fe:	6a1f      	ldr	r7, [r3, #32]
 8000300:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000304:	433e      	orrs	r6, r7
 8000306:	621e      	str	r6, [r3, #32]
 8000308:	f04f 0c00 	mov.w	ip, #0
 800030c:	e010      	b.n	8000330 <baseloader_start+0x1c8>
 800030e:	6996      	ldr	r6, [r2, #24]
 8000310:	1c77      	adds	r7, r6, #1
 8000312:	2eff      	cmp	r6, #255	; 0xff
 8000314:	6197      	str	r7, [r2, #24]
 8000316:	f200 8167 	bhi.w	80005e8 <baseloader_start+0x480>
 800031a:	f8c3 c020 	str.w	ip, [r3, #32]
 800031e:	6806      	ldr	r6, [r0, #0]
 8000320:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000324:	621e      	str	r6, [r3, #32]
 8000326:	880e      	ldrh	r6, [r1, #0]
 8000328:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800032c:	f200 8166 	bhi.w	80005fc <baseloader_start+0x494>
 8000330:	6a1e      	ldr	r6, [r3, #32]
 8000332:	07f7      	lsls	r7, r6, #31
 8000334:	d4eb      	bmi.n	800030e <baseloader_start+0x1a6>
 8000336:	880d      	ldrh	r5, [r1, #0]
 8000338:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800033c:	f200 8184 	bhi.w	8000648 <baseloader_start+0x4e0>
 8000340:	4e49      	ldr	r6, [pc, #292]	; (8000468 <baseloader_start+0x300>)
 8000342:	6835      	ldr	r5, [r6, #0]
 8000344:	f025 0501 	bic.w	r5, r5, #1
 8000348:	6035      	str	r5, [r6, #0]
 800034a:	6915      	ldr	r5, [r2, #16]
 800034c:	9500      	str	r5, [sp, #0]
			if (base_para.result < 0) { return; }  //  Quit if error.
		}
        base_tmp.erase_start = base_tmp.dest_hw + 1;
        if (!base_para.preview && *base_tmp.dest_hw != *base_tmp.src_hw) {
 800034e:	9e00      	ldr	r6, [sp, #0]
        base_tmp.erase_start = base_tmp.dest_hw + 1;
 8000350:	1ca5      	adds	r5, r4, #2
        if (!base_para.preview && *base_tmp.dest_hw != *base_tmp.src_hw) {
 8000352:	2e00      	cmp	r6, #0
 8000354:	f040 81ae 	bne.w	80006b4 <baseloader_start+0x54c>
 8000358:	f835 cc02 	ldrh.w	ip, [r5, #-2]
 800035c:	f8b8 7000 	ldrh.w	r7, [r8]
 8000360:	45bc      	cmp	ip, r7
 8000362:	f040 819d 	bne.w	80006a0 <baseloader_start+0x538>
 8000366:	2401      	movs	r4, #1
 8000368:	9402      	str	r4, [sp, #8]
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 800036a:	9c00      	ldr	r4, [sp, #0]
 800036c:	9405      	str	r4, [sp, #20]
 800036e:	2701      	movs	r7, #1
    while (base_tmp.half_word_count > 0) {        
 8000370:	f1bb 0b01 	subs.w	fp, fp, #1
            base_tmp.verified = false;
            break;
        }
        base_tmp.dest_hw++;
        base_tmp.src_hw++;
 8000374:	f108 0802 	add.w	r8, r8, #2
        base_tmp.half_word_count--;
		base_tmp.bytes_flashed += 2;
 8000378:	f10e 0e02 	add.w	lr, lr, #2
 800037c:	462c      	mov	r4, r5
 800037e:	9701      	str	r7, [sp, #4]
    while (base_tmp.half_word_count > 0) {        
 8000380:	f47f af4c 	bne.w	800021c <baseloader_start+0xb4>
 8000384:	9902      	ldr	r1, [sp, #8]
 8000386:	9f05      	ldr	r7, [sp, #20]
 8000388:	46d3      	mov	fp, sl
 800038a:	2900      	cmp	r1, #0
 800038c:	f040 819d 	bne.w	80006ca <baseloader_start+0x562>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c3 1e02 	strd	r1, lr, [r3, #8]
 8000396:	9904      	ldr	r1, [sp, #16]
 8000398:	e9c3 5800 	strd	r5, r8, [r3]
 800039c:	615d      	str	r5, [r3, #20]
 800039e:	b111      	cbz	r1, 80003a6 <baseloader_start+0x23e>
 80003a0:	492c      	ldr	r1, [pc, #176]	; (8000454 <baseloader_start+0x2ec>)
 80003a2:	9803      	ldr	r0, [sp, #12]
 80003a4:	6008      	str	r0, [r1, #0]
 80003a6:	f1bb 0f00 	cmp.w	fp, #0
 80003aa:	d001      	beq.n	80003b0 <baseloader_start+0x248>
 80003ac:	f8c3 9018 	str.w	r9, [r3, #24]
    }
	base_flash_lock();  if (base_para.result < 0) { return; }  //  Quit if error.
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <baseloader_start+0x300>)
 80003b2:	6954      	ldr	r4, [r2, #20]
 80003b4:	6801      	ldr	r1, [r0, #0]
 80003b6:	2c00      	cmp	r4, #0
 80003b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80003bc:	6001      	str	r1, [r0, #0]
 80003be:	db18      	blt.n	80003f2 <baseloader_start+0x28a>

	//  TODO: Erase the second vector table.

	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 80003c0:	6919      	ldr	r1, [r3, #16]
 80003c2:	2900      	cmp	r1, #0
 80003c4:	f040 812e 	bne.w	8000624 <baseloader_start+0x4bc>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	//  Restart the device after flashing Bootloader because the System Vector Table may have been overwritten during flashing.
    if (!base_para.preview && base_para.restart) { 
 80003cc:	6911      	ldr	r1, [r2, #16]
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 80003ce:	6153      	str	r3, [r2, #20]
    if (!base_para.preview && base_para.restart) { 
 80003d0:	b979      	cbnz	r1, 80003f2 <baseloader_start+0x28a>
 80003d2:	68d3      	ldr	r3, [r2, #12]
 80003d4:	b16b      	cbz	r3, 80003f2 <baseloader_start+0x28a>
		//  Swap back to the original System Vector Table.  DMB and DSB may not be necessary for some processors.
        //  See http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0321a/BIHHDGBC.html
        asm("dmb");
 80003d6:	f3bf 8f5f 	dmb	sy
		SCB_VTOR = (uint32_t) &vector_table;  
 80003da:	4a24      	ldr	r2, [pc, #144]	; (800046c <baseloader_start+0x304>)
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <baseloader_start+0x308>)
 80003de:	601a      	str	r2, [r3, #0]
        asm("dsb");
 80003e0:	f3bf 8f4f 	dsb	sy
		debug_base_result = base_para.result;  //  Trigger a watchpoint break after flashing.
		base_scb_reset_system();  //  Restart.
 80003e4:	4a23      	ldr	r2, [pc, #140]	; (8000474 <baseloader_start+0x30c>)
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	e7fe      	b.n	80003e8 <baseloader_start+0x280>
		base_para.result = -3;
 80003ea:	f06f 0302 	mvn.w	r3, #2
 80003ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
	}	
}
 80003f2:	b00b      	add	sp, #44	; 0x2c
 80003f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		base_para.result = -2;
 80003f8:	f06f 0301 	mvn.w	r3, #1
 80003fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
}
 8000400:	b00b      	add	sp, #44	; 0x2c
 8000402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (((uint32_t) base_para.src) + base_para.byte_count > 0x08010000) {  //  Too many ROM bytes to copy.
 8000406:	442c      	add	r4, r5
 8000408:	42b4      	cmp	r4, r6
 800040a:	f67f aedd 	bls.w	80001c8 <baseloader_start+0x60>
			base_para.result = -4;
 800040e:	f06f 0303 	mvn.w	r3, #3
 8000412:	e9c2 3405 	strd	r3, r4, [r2, #20]
			return;
 8000416:	e7ec      	b.n	80003f2 <baseloader_start+0x28a>
            base_tmp.erase_start = base_get_flash_page_address(base_tmp.dest_hw);
 8000418:	f424 7a7f 	bic.w	sl, r4, #1020	; 0x3fc
			if (!base_para.preview) {  //  Erase the ROM page.
 800041c:	9e00      	ldr	r6, [sp, #0]
            base_tmp.erase_start = base_get_flash_page_address(base_tmp.dest_hw);
 800041e:	f02a 0a03 	bic.w	sl, sl, #3
 8000422:	4655      	mov	r5, sl
            base_tmp.erase_end = base_tmp.erase_start + ((FLASH_PAGE_SIZE) / sizeof(uint16_t));
 8000424:	f50a 6980 	add.w	r9, sl, #1024	; 0x400
			if (!base_para.preview) {  //  Erase the ROM page.
 8000428:	b336      	cbz	r6, 8000478 <baseloader_start+0x310>
 800042a:	f04f 0a01 	mov.w	sl, #1
        base_tmp.erase_start = base_tmp.dest_hw + 1;
 800042e:	1ca5      	adds	r5, r4, #2
 8000430:	e79d      	b.n	800036e <baseloader_start+0x206>
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000
 8000438:	2000001c 	.word	0x2000001c
 800043c:	08010000 	.word	0x08010000
 8000440:	20005000 	.word	0x20005000
 8000444:	40022004 	.word	0x40022004
 8000448:	45670123 	.word	0x45670123
 800044c:	cdef89ab 	.word	0xcdef89ab
 8000450:	4002200c 	.word	0x4002200c
 8000454:	20001674 	.word	0x20001674
 8000458:	1ffff7e0 	.word	0x1ffff7e0
 800045c:	51eb851f 	.word	0x51eb851f
 8000460:	4002204c 	.word	0x4002204c
 8000464:	0807ffff 	.word	0x0807ffff
 8000468:	40022010 	.word	0x40022010
 800046c:	08000000 	.word	0x08000000
 8000470:	e000ed08 	.word	0xe000ed08
 8000474:	05fa0004 	.word	0x05fa0004
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 8000478:	621e      	str	r6, [r3, #32]
 800047a:	6807      	ldr	r7, [r0, #0]
 800047c:	6196      	str	r6, [r2, #24]
 800047e:	f007 0735 	and.w	r7, r7, #53	; 0x35
 8000482:	621f      	str	r7, [r3, #32]
 8000484:	880e      	ldrh	r6, [r1, #0]
 8000486:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800048a:	d906      	bls.n	800049a <baseloader_start+0x332>
 800048c:	4e9e      	ldr	r6, [pc, #632]	; (8000708 <baseloader_start+0x5a0>)
 800048e:	6836      	ldr	r6, [r6, #0]
 8000490:	6a1f      	ldr	r7, [r3, #32]
 8000492:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000496:	433e      	orrs	r6, r7
 8000498:	621e      	str	r6, [r3, #32]
 800049a:	f04f 0c00 	mov.w	ip, #0
 800049e:	e00e      	b.n	80004be <baseloader_start+0x356>
 80004a0:	6996      	ldr	r6, [r2, #24]
 80004a2:	1c77      	adds	r7, r6, #1
 80004a4:	2eff      	cmp	r6, #255	; 0xff
 80004a6:	6197      	str	r7, [r2, #24]
 80004a8:	d878      	bhi.n	800059c <baseloader_start+0x434>
 80004aa:	f8c3 c020 	str.w	ip, [r3, #32]
 80004ae:	6806      	ldr	r6, [r0, #0]
 80004b0:	f006 0635 	and.w	r6, r6, #53	; 0x35
 80004b4:	621e      	str	r6, [r3, #32]
 80004b6:	880e      	ldrh	r6, [r1, #0]
 80004b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004bc:	d866      	bhi.n	800058c <baseloader_start+0x424>
 80004be:	6a1e      	ldr	r6, [r3, #32]
 80004c0:	07f6      	lsls	r6, r6, #31
 80004c2:	d4ed      	bmi.n	80004a0 <baseloader_start+0x338>
 80004c4:	880e      	ldrh	r6, [r1, #0]
 80004c6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004ca:	d903      	bls.n	80004d4 <baseloader_start+0x36c>
 80004cc:	4e8f      	ldr	r6, [pc, #572]	; (800070c <baseloader_start+0x5a4>)
 80004ce:	45b2      	cmp	sl, r6
 80004d0:	f200 80ce 	bhi.w	8000670 <baseloader_start+0x508>
 80004d4:	4e8e      	ldr	r6, [pc, #568]	; (8000710 <baseloader_start+0x5a8>)
 80004d6:	f8df c258 	ldr.w	ip, [pc, #600]	; 8000730 <baseloader_start+0x5c8>
 80004da:	6837      	ldr	r7, [r6, #0]
 80004dc:	f047 0702 	orr.w	r7, r7, #2
 80004e0:	6037      	str	r7, [r6, #0]
 80004e2:	f8cc a000 	str.w	sl, [ip]
 80004e6:	6837      	ldr	r7, [r6, #0]
 80004e8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80004ec:	6037      	str	r7, [r6, #0]
 80004ee:	2700      	movs	r7, #0
 80004f0:	621f      	str	r7, [r3, #32]
 80004f2:	6806      	ldr	r6, [r0, #0]
 80004f4:	6197      	str	r7, [r2, #24]
 80004f6:	f006 0635 	and.w	r6, r6, #53	; 0x35
 80004fa:	621e      	str	r6, [r3, #32]
 80004fc:	880e      	ldrh	r6, [r1, #0]
 80004fe:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000502:	d906      	bls.n	8000512 <baseloader_start+0x3aa>
 8000504:	4e80      	ldr	r6, [pc, #512]	; (8000708 <baseloader_start+0x5a0>)
 8000506:	6836      	ldr	r6, [r6, #0]
 8000508:	6a1f      	ldr	r7, [r3, #32]
 800050a:	f006 0635 	and.w	r6, r6, #53	; 0x35
 800050e:	433e      	orrs	r6, r7
 8000510:	621e      	str	r6, [r3, #32]
 8000512:	f04f 0c00 	mov.w	ip, #0
 8000516:	e00e      	b.n	8000536 <baseloader_start+0x3ce>
 8000518:	6996      	ldr	r6, [r2, #24]
 800051a:	1c77      	adds	r7, r6, #1
 800051c:	2eff      	cmp	r6, #255	; 0xff
 800051e:	6197      	str	r7, [r2, #24]
 8000520:	d87c      	bhi.n	800061c <baseloader_start+0x4b4>
 8000522:	f8c3 c020 	str.w	ip, [r3, #32]
 8000526:	6806      	ldr	r6, [r0, #0]
 8000528:	f006 0635 	and.w	r6, r6, #53	; 0x35
 800052c:	621e      	str	r6, [r3, #32]
 800052e:	880e      	ldrh	r6, [r1, #0]
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	d86a      	bhi.n	800060c <baseloader_start+0x4a4>
 8000536:	6a1e      	ldr	r6, [r3, #32]
 8000538:	07f7      	lsls	r7, r6, #31
 800053a:	d4ed      	bmi.n	8000518 <baseloader_start+0x3b0>
 800053c:	880e      	ldrh	r6, [r1, #0]
 800053e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000542:	d971      	bls.n	8000628 <baseloader_start+0x4c0>
 8000544:	4e71      	ldr	r6, [pc, #452]	; (800070c <baseloader_start+0x5a4>)
 8000546:	45b2      	cmp	sl, r6
 8000548:	d96e      	bls.n	8000628 <baseloader_start+0x4c0>
 800054a:	4f72      	ldr	r7, [pc, #456]	; (8000714 <baseloader_start+0x5ac>)
 800054c:	683e      	ldr	r6, [r7, #0]
 800054e:	f026 0602 	bic.w	r6, r6, #2
 8000552:	603e      	str	r6, [r7, #0]
 8000554:	e06d      	b.n	8000632 <baseloader_start+0x4ca>
 8000556:	46dc      	mov	ip, fp
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 8000558:	f06f 0109 	mvn.w	r1, #9
 800055c:	46d3      	mov	fp, sl
 800055e:	6151      	str	r1, [r2, #20]
 8000560:	9a01      	ldr	r2, [sp, #4]
 8000562:	2a00      	cmp	r2, #0
 8000564:	f040 80be 	bne.w	80006e4 <baseloader_start+0x57c>
 8000568:	9a07      	ldr	r2, [sp, #28]
 800056a:	2a00      	cmp	r2, #0
 800056c:	f000 80c2 	beq.w	80006f4 <baseloader_start+0x58c>
 8000570:	9a01      	ldr	r2, [sp, #4]
 8000572:	615d      	str	r5, [r3, #20]
 8000574:	2a00      	cmp	r2, #0
 8000576:	f000 80bd 	beq.w	80006f4 <baseloader_start+0x58c>
 800057a:	e0b9      	b.n	80006f0 <baseloader_start+0x588>
 800057c:	4e62      	ldr	r6, [pc, #392]	; (8000708 <baseloader_start+0x5a0>)
 800057e:	6836      	ldr	r6, [r6, #0]
 8000580:	6a1f      	ldr	r7, [r3, #32]
 8000582:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000586:	433e      	orrs	r6, r7
 8000588:	621e      	str	r6, [r3, #32]
 800058a:	e694      	b.n	80002b6 <baseloader_start+0x14e>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 800058c:	4e5e      	ldr	r6, [pc, #376]	; (8000708 <baseloader_start+0x5a0>)
 800058e:	6836      	ldr	r6, [r6, #0]
 8000590:	6a1f      	ldr	r7, [r3, #32]
 8000592:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000596:	433e      	orrs	r6, r7
 8000598:	621e      	str	r6, [r3, #32]
 800059a:	e790      	b.n	80004be <baseloader_start+0x356>
 800059c:	46dc      	mov	ip, fp
 800059e:	f06f 010b 	mvn.w	r1, #11
 80005a2:	6151      	str	r1, [r2, #20]
 80005a4:	9a01      	ldr	r2, [sp, #4]
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	f040 8091 	bne.w	80006ce <baseloader_start+0x566>
 80005ac:	f8c3 a014 	str.w	sl, [r3, #20]
 80005b0:	9a04      	ldr	r2, [sp, #16]
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	f040 8092 	bne.w	80006dc <baseloader_start+0x574>
 80005b8:	f8c3 9018 	str.w	r9, [r3, #24]
 80005bc:	e719      	b.n	80003f2 <baseloader_start+0x28a>
		base_para.result = -6;
 80005be:	f06f 0305 	mvn.w	r3, #5
 80005c2:	e9c2 3405 	strd	r3, r4, [r2, #20]
		return;
 80005c6:	e714      	b.n	80003f2 <baseloader_start+0x28a>
	if (base_para.restart) { base_disable_interrupts(); }
 80005c8:	b672      	cpsid	i
 80005ca:	2000      	movs	r0, #0
 80005cc:	4c52      	ldr	r4, [pc, #328]	; (8000718 <baseloader_start+0x5b0>)
 80005ce:	4d53      	ldr	r5, [pc, #332]	; (800071c <baseloader_start+0x5b4>)
 80005d0:	6020      	str	r0, [r4, #0]
 80005d2:	6028      	str	r0, [r5, #0]
 80005d4:	6957      	ldr	r7, [r2, #20]
	base_flash_unlock();  if (base_para.result < 0) { return; }  //  Quit if error.
 80005d6:	4952      	ldr	r1, [pc, #328]	; (8000720 <baseloader_start+0x5b8>)
 80005d8:	4c52      	ldr	r4, [pc, #328]	; (8000724 <baseloader_start+0x5bc>)
 80005da:	4853      	ldr	r0, [pc, #332]	; (8000728 <baseloader_start+0x5c0>)
 80005dc:	2f00      	cmp	r7, #0
 80005de:	600c      	str	r4, [r1, #0]
 80005e0:	6008      	str	r0, [r1, #0]
 80005e2:	f6ff af06 	blt.w	80003f2 <baseloader_start+0x28a>
 80005e6:	e5f8      	b.n	80001da <baseloader_start+0x72>
 80005e8:	46dc      	mov	ip, fp
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80005ea:	f06f 010a 	mvn.w	r1, #10
 80005ee:	46d3      	mov	fp, sl
 80005f0:	e7b5      	b.n	800055e <baseloader_start+0x3f6>
			base_para.result = -5;
 80005f2:	f06f 0304 	mvn.w	r3, #4
 80005f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
			return;
 80005fa:	e6fa      	b.n	80003f2 <baseloader_start+0x28a>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80005fc:	4e42      	ldr	r6, [pc, #264]	; (8000708 <baseloader_start+0x5a0>)
 80005fe:	6836      	ldr	r6, [r6, #0]
 8000600:	6a1f      	ldr	r7, [r3, #32]
 8000602:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000606:	433e      	orrs	r6, r7
 8000608:	621e      	str	r6, [r3, #32]
 800060a:	e691      	b.n	8000330 <baseloader_start+0x1c8>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 800060c:	4e3e      	ldr	r6, [pc, #248]	; (8000708 <baseloader_start+0x5a0>)
 800060e:	6836      	ldr	r6, [r6, #0]
 8000610:	6a1f      	ldr	r7, [r3, #32]
 8000612:	f006 0635 	and.w	r6, r6, #53	; 0x35
 8000616:	433e      	orrs	r6, r7
 8000618:	621e      	str	r6, [r3, #32]
 800061a:	e78c      	b.n	8000536 <baseloader_start+0x3ce>
 800061c:	46dc      	mov	ip, fp
 800061e:	f06f 010c 	mvn.w	r1, #12
 8000622:	e7be      	b.n	80005a2 <baseloader_start+0x43a>
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	e6d1      	b.n	80003cc <baseloader_start+0x264>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 8000628:	4f39      	ldr	r7, [pc, #228]	; (8000710 <baseloader_start+0x5a8>)
 800062a:	683e      	ldr	r6, [r7, #0]
 800062c:	f026 0602 	bic.w	r6, r6, #2
 8000630:	603e      	str	r6, [r7, #0]
 8000632:	6916      	ldr	r6, [r2, #16]
 8000634:	f04f 0a01 	mov.w	sl, #1
 8000638:	9600      	str	r6, [sp, #0]
 800063a:	2600      	movs	r6, #0
 800063c:	f8cd a01c 	str.w	sl, [sp, #28]
 8000640:	f8cd a008 	str.w	sl, [sp, #8]
 8000644:	9605      	str	r6, [sp, #20]
 8000646:	e60d      	b.n	8000264 <baseloader_start+0xfc>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 8000648:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 800064c:	1bad      	subs	r5, r5, r6
 800064e:	4e2f      	ldr	r6, [pc, #188]	; (800070c <baseloader_start+0x5a4>)
 8000650:	4475      	add	r5, lr
 8000652:	42b5      	cmp	r5, r6
 8000654:	f67f ae74 	bls.w	8000340 <baseloader_start+0x1d8>
 8000658:	4e2e      	ldr	r6, [pc, #184]	; (8000714 <baseloader_start+0x5ac>)
 800065a:	6835      	ldr	r5, [r6, #0]
 800065c:	f025 0501 	bic.w	r5, r5, #1
 8000660:	6035      	str	r5, [r6, #0]
 8000662:	e672      	b.n	800034a <baseloader_start+0x1e2>
 8000664:	4f2b      	ldr	r7, [pc, #172]	; (8000714 <baseloader_start+0x5ac>)
 8000666:	683e      	ldr	r6, [r7, #0]
 8000668:	f046 0601 	orr.w	r6, r6, #1
 800066c:	603e      	str	r6, [r7, #0]
 800066e:	e636      	b.n	80002de <baseloader_start+0x176>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 8000670:	4e28      	ldr	r6, [pc, #160]	; (8000714 <baseloader_start+0x5ac>)
 8000672:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8000734 <baseloader_start+0x5cc>
 8000676:	e730      	b.n	80004da <baseloader_start+0x372>
 8000678:	9902      	ldr	r1, [sp, #8]
 800067a:	46dc      	mov	ip, fp
 800067c:	9f05      	ldr	r7, [sp, #20]
 800067e:	46d3      	mov	fp, sl
 8000680:	b9b1      	cbnz	r1, 80006b0 <baseloader_start+0x548>
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	b9d9      	cbnz	r1, 80006be <baseloader_start+0x556>
 8000686:	9904      	ldr	r1, [sp, #16]
 8000688:	b111      	cbz	r1, 8000690 <baseloader_start+0x528>
 800068a:	4928      	ldr	r1, [pc, #160]	; (800072c <baseloader_start+0x5c4>)
 800068c:	9803      	ldr	r0, [sp, #12]
 800068e:	6008      	str	r0, [r1, #0]
 8000690:	f1bb 0f00 	cmp.w	fp, #0
 8000694:	d001      	beq.n	800069a <baseloader_start+0x532>
 8000696:	f8c3 9018 	str.w	r9, [r3, #24]
            base_tmp.verified = false;
 800069a:	2100      	movs	r1, #0
 800069c:	6119      	str	r1, [r3, #16]
            break;
 800069e:	e687      	b.n	80003b0 <baseloader_start+0x248>
 80006a0:	9e00      	ldr	r6, [sp, #0]
 80006a2:	9901      	ldr	r1, [sp, #4]
 80006a4:	46dc      	mov	ip, fp
 80006a6:	6156      	str	r6, [r2, #20]
 80006a8:	46d3      	mov	fp, sl
 80006aa:	b941      	cbnz	r1, 80006be <baseloader_start+0x556>
 80006ac:	615d      	str	r5, [r3, #20]
 80006ae:	e7ea      	b.n	8000686 <baseloader_start+0x51e>
 80006b0:	6157      	str	r7, [r2, #20]
 80006b2:	e7e6      	b.n	8000682 <baseloader_start+0x51a>
 80006b4:	2401      	movs	r4, #1
 80006b6:	9402      	str	r4, [sp, #8]
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80006b8:	2400      	movs	r4, #0
 80006ba:	9405      	str	r4, [sp, #20]
 80006bc:	e657      	b.n	800036e <baseloader_start+0x206>
 80006be:	e9c3 4800 	strd	r4, r8, [r3]
 80006c2:	615d      	str	r5, [r3, #20]
 80006c4:	e9c3 ce02 	strd	ip, lr, [r3, #8]
 80006c8:	e7dd      	b.n	8000686 <baseloader_start+0x51e>
 80006ca:	6157      	str	r7, [r2, #20]
 80006cc:	e660      	b.n	8000390 <baseloader_start+0x228>
 80006ce:	e9c3 4800 	strd	r4, r8, [r3]
 80006d2:	f8c3 a014 	str.w	sl, [r3, #20]
 80006d6:	e9c3 ce02 	strd	ip, lr, [r3, #8]
 80006da:	e769      	b.n	80005b0 <baseloader_start+0x448>
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <baseloader_start+0x5c4>)
 80006de:	9903      	ldr	r1, [sp, #12]
 80006e0:	6011      	str	r1, [r2, #0]
 80006e2:	e769      	b.n	80005b8 <baseloader_start+0x450>
 80006e4:	9a07      	ldr	r2, [sp, #28]
 80006e6:	e9c3 4800 	strd	r4, r8, [r3]
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	f47f af40 	bne.w	8000570 <baseloader_start+0x408>
 80006f0:	e9c3 ce02 	strd	ip, lr, [r3, #8]
 80006f4:	9a04      	ldr	r2, [sp, #16]
 80006f6:	b112      	cbz	r2, 80006fe <baseloader_start+0x596>
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <baseloader_start+0x5c4>)
 80006fa:	9903      	ldr	r1, [sp, #12]
 80006fc:	6011      	str	r1, [r2, #0]
 80006fe:	f1bb 0f00 	cmp.w	fp, #0
 8000702:	f43f ae76 	beq.w	80003f2 <baseloader_start+0x28a>
 8000706:	e757      	b.n	80005b8 <baseloader_start+0x450>
 8000708:	4002204c 	.word	0x4002204c
 800070c:	0807ffff 	.word	0x0807ffff
 8000710:	40022010 	.word	0x40022010
 8000714:	40022050 	.word	0x40022050
 8000718:	e000e010 	.word	0xe000e010
 800071c:	40021008 	.word	0x40021008
 8000720:	40022004 	.word	0x40022004
 8000724:	45670123 	.word	0x45670123
 8000728:	cdef89ab 	.word	0xcdef89ab
 800072c:	20001674 	.word	0x20001674
 8000730:	40022014 	.word	0x40022014
 8000734:	40022054 	.word	0x40022054

08000738 <baseloader_fetch>:

int baseloader_fetch(baseloader_func *baseloader_addr, uint32_t **dest, const uint32_t **src, size_t *byte_count) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//  Return the address of the baseloader function, located in the Second Base Vector Table.
	//  Also return the parameters to be passed to the baseloader function: dest, src, byte_count.
	if (!baseloader_addr || !dest || !src || !byte_count) { 
 800073c:	2800      	cmp	r0, #0
 800073e:	d04b      	beq.n	80007d8 <baseloader_fetch+0xa0>
 8000740:	2900      	cmp	r1, #0
 8000742:	d049      	beq.n	80007d8 <baseloader_fetch+0xa0>
 8000744:	2a00      	cmp	r2, #0
 8000746:	d047      	beq.n	80007d8 <baseloader_fetch+0xa0>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d045      	beq.n	80007d8 <baseloader_fetch+0xa0>
		base_para.fail = (uint32_t) baseloader_addr;
		return -1; 
	}
	//  Search for the First and Second Base Vector Tables and find the bootloader range.
	//  First Base Vector Table is in the start of the application ROM.
	if (!IS_VALID_BASE_VECTOR_TABLE(application_start)) {  //  Quit if First Base Vector Table is not found.
 800074c:	4c27      	ldr	r4, [pc, #156]	; (80007ec <baseloader_fetch+0xb4>)
 800074e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000800 <baseloader_fetch+0xc8>
 8000752:	4d27      	ldr	r5, [pc, #156]	; (80007f0 <baseloader_fetch+0xb8>)
 8000754:	ea04 0709 	and.w	r7, r4, r9
 8000758:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800075c:	ea47 0805 	orr.w	r8, r7, r5
 8000760:	f8d8 e000 	ldr.w	lr, [r8]
 8000764:	4e23      	ldr	r6, [pc, #140]	; (80007f4 <baseloader_fetch+0xbc>)
 8000766:	45b6      	cmp	lr, r6
 8000768:	d12a      	bne.n	80007c0 <baseloader_fetch+0x88>
 800076a:	4e23      	ldr	r6, [pc, #140]	; (80007f8 <baseloader_fetch+0xc0>)
 800076c:	f8d8 c014 	ldr.w	ip, [r8, #20]
 8000770:	45b4      	cmp	ip, r6
 8000772:	d125      	bne.n	80007c0 <baseloader_fetch+0x88>
		return -2; 
	}
	base_vector_table_t *begin_base_vector = BASE_VECTOR_TABLE(application_start);

	//  Get size of new bootloader from the First Base Vector Table (same as the Application ROM start address).
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 8000774:	f8d8 6010 	ldr.w	r6, [r8, #16]
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000778:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 800077c:	ea06 0609 	and.w	r6, r6, r9
 8000780:	f106 4678 	add.w	r6, r6, #4160749568	; 0xf8000000
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000784:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000804 <baseloader_fetch+0xcc>
 8000788:	4434      	add	r4, r6
 800078a:	4544      	cmp	r4, r8
 800078c:	d829      	bhi.n	80007e2 <baseloader_fetch+0xaa>
		base_para.fail = bootloader_size;
		return -3; 
	} 

	//  Second Base Vector Table is at start of application ROM + bootloader size.  TODO: Round up to the next flash page?
	uint32_t flash_page_addr = (uint32_t) FLASH_ADDRESS(application_start) + bootloader_size;
 800078e:	eb07 0806 	add.w	r8, r7, r6
	if (!IS_VALID_BASE_VECTOR_TABLE(flash_page_addr)) {  //  Quit if Second Base Vector Table is not found.
 8000792:	ea45 0408 	orr.w	r4, r5, r8
 8000796:	6825      	ldr	r5, [r4, #0]
 8000798:	4575      	cmp	r5, lr
 800079a:	d116      	bne.n	80007ca <baseloader_fetch+0x92>
 800079c:	6965      	ldr	r5, [r4, #20]
 800079e:	4565      	cmp	r5, ip
 80007a0:	d113      	bne.n	80007ca <baseloader_fetch+0x92>
	}
	base_vector_table_t *end_base_vector = BASE_VECTOR_TABLE(flash_page_addr);

	//  Tell caller to jump to the baseloader in the Second Base Vector Table.
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 80007a2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
	*byte_count = bootloader_size;			 //  For this number of bytes.
	return 0;
 80007a6:	2500      	movs	r5, #0
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
 80007a8:	68a4      	ldr	r4, [r4, #8]
 80007aa:	f108 4878 	add.w	r8, r8, #4160749568	; 0xf8000000
 80007ae:	4444      	add	r4, r8
 80007b0:	6004      	str	r4, [r0, #0]
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 80007b2:	f8c1 c000 	str.w	ip, [r1]
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
 80007b6:	6017      	str	r7, [r2, #0]
	*byte_count = bootloader_size;			 //  For this number of bytes.
 80007b8:	601e      	str	r6, [r3, #0]
}
 80007ba:	4628      	mov	r0, r5
 80007bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		base_para.fail = (uint32_t) FLASH_ADDRESS(application_start);
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <baseloader_fetch+0xc4>)
		return -2; 
 80007c2:	f06f 0501 	mvn.w	r5, #1
		base_para.fail = (uint32_t) FLASH_ADDRESS(application_start);
 80007c6:	619f      	str	r7, [r3, #24]
		return -2; 
 80007c8:	e7f7      	b.n	80007ba <baseloader_fetch+0x82>
		base_para.fail = flash_page_addr;
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <baseloader_fetch+0xc4>)
		return -4;
 80007cc:	f06f 0503 	mvn.w	r5, #3
		base_para.fail = flash_page_addr;
 80007d0:	f8c2 8018 	str.w	r8, [r2, #24]
		*byte_count = bootloader_size;
 80007d4:	601e      	str	r6, [r3, #0]
		return -4;
 80007d6:	e7f0      	b.n	80007ba <baseloader_fetch+0x82>
		base_para.fail = (uint32_t) baseloader_addr;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <baseloader_fetch+0xc4>)
		return -1; 
 80007da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		base_para.fail = (uint32_t) baseloader_addr;
 80007de:	6198      	str	r0, [r3, #24]
		return -1; 
 80007e0:	e7eb      	b.n	80007ba <baseloader_fetch+0x82>
		base_para.fail = bootloader_size;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <baseloader_fetch+0xc4>)
		return -3; 
 80007e4:	f06f 0502 	mvn.w	r5, #2
		base_para.fail = bootloader_size;
 80007e8:	619e      	str	r6, [r3, #24]
		return -3; 
 80007ea:	e7e6      	b.n	80007ba <baseloader_fetch+0x82>
 80007ec:	08007401 	.word	0x08007401
 80007f0:	08000150 	.word	0x08000150
 80007f4:	22051969 	.word	0x22051969
 80007f8:	19690522 	.word	0x19690522
 80007fc:	20000000 	.word	0x20000000
 8000800:	fffffc00 	.word	0xfffffc00
 8000804:	0800ffff 	.word	0x0800ffff

08000808 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8000808:	e7fe      	b.n	8000808 <blocking_handler>
 800080a:	bf00      	nop

0800080c <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <target_in_isr>:
// From pxt-common-packages/libs/base/pxtbase.h:
// #define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)

uint32_t target_in_isr(void) {
    //  Return true if CPU is in ISR now.
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <target_in_isr+0xc>)
 8000812:	6818      	ldr	r0, [r3, #0]
}
 8000814:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 8000820:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 8000822:	2000      	movs	r0, #0
 8000824:	f001 fd3a 	bl	800229c <rtc_check_flag>
 8000828:	b900      	cbnz	r0, 800082c <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 800082a:	bd10      	pop	{r4, pc}
		rtc_clear_flag(RTC_SEC);
 800082c:	2000      	movs	r0, #0
 800082e:	f001 fd1b 	bl	8002268 <rtc_clear_flag>
		tickCount++;
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <rtc_isr+0x28>)
		if (tickFunc != NULL) { tickFunc(); }
 8000834:	4905      	ldr	r1, [pc, #20]	; (800084c <rtc_isr+0x2c>)
		tickCount++;
 8000836:	6813      	ldr	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 8000838:	6809      	ldr	r1, [r1, #0]
		tickCount++;
 800083a:	3301      	adds	r3, #1
 800083c:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 800083e:	2900      	cmp	r1, #0
 8000840:	d0f3      	beq.n	800082a <rtc_isr+0xa>
}
 8000842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (tickFunc != NULL) { tickFunc(); }
 8000846:	4708      	bx	r1
 8000848:	200008b0 	.word	0x200008b0
 800084c:	200008a8 	.word	0x200008a8

08000850 <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 8000850:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 8000852:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000856:	f001 fc21 	bl	800209c <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 800085a:	2001      	movs	r0, #1
 800085c:	f001 fd04 	bl	8002268 <rtc_clear_flag>
	alarmCount++;
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <rtc_alarm_isr+0x28>)
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 8000862:	4906      	ldr	r1, [pc, #24]	; (800087c <rtc_alarm_isr+0x2c>)
	alarmCount++;
 8000864:	6813      	ldr	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 8000866:	6809      	ldr	r1, [r1, #0]
	alarmCount++;
 8000868:	3301      	adds	r3, #1
 800086a:	6013      	str	r3, [r2, #0]
	if (alarmFunc != NULL) { alarmFunc(); }
 800086c:	b111      	cbz	r1, 8000874 <rtc_alarm_isr+0x24>
}
 800086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (alarmFunc != NULL) { alarmFunc(); }
 8000872:	4708      	bx	r1
}
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	200008a4 	.word	0x200008a4
 800087c:	200008ac 	.word	0x200008ac

08000880 <reset_handler>:
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}

void reset_handler(void) {
 8000880:	b538      	push	{r3, r4, r5, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000882:	4a3c      	ldr	r2, [pc, #240]	; (8000974 <reset_handler+0xf4>)
 8000884:	4c3c      	ldr	r4, [pc, #240]	; (8000978 <reset_handler+0xf8>)
 8000886:	42a2      	cmp	r2, r4
 8000888:	d20f      	bcs.n	80008aa <reset_handler+0x2a>
 800088a:	43d3      	mvns	r3, r2
 800088c:	4615      	mov	r5, r2
 800088e:	4423      	add	r3, r4
 8000890:	493a      	ldr	r1, [pc, #232]	; (800097c <reset_handler+0xfc>)
 8000892:	f023 0303 	bic.w	r3, r3, #3
 8000896:	3304      	adds	r3, #4
 8000898:	4608      	mov	r0, r1
 800089a:	4419      	add	r1, r3
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 800089c:	f850 4b04 	ldr.w	r4, [r0], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 80008a0:	4288      	cmp	r0, r1
		*boot_dest = *src;
 80008a2:	f845 4b04 	str.w	r4, [r5], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 80008a6:	d1f9      	bne.n	800089c <reset_handler+0x1c>
 80008a8:	441a      	add	r2, r3
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <reset_handler+0x100>)
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d20d      	bcs.n	80008cc <reset_handler+0x4c>
 80008b0:	3303      	adds	r3, #3
 80008b2:	1d11      	adds	r1, r2, #4
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	f023 0303 	bic.w	r3, r3, #3
 80008ba:	3304      	adds	r3, #4
 80008bc:	2000      	movs	r0, #0
 80008be:	4413      	add	r3, r2
 80008c0:	e000      	b.n	80008c4 <reset_handler+0x44>
 80008c2:	3104      	adds	r1, #4
 80008c4:	4299      	cmp	r1, r3
 80008c6:	6010      	str	r0, [r2, #0]
 80008c8:	460a      	mov	r2, r1
 80008ca:	d1fa      	bne.n	80008c2 <reset_handler+0x42>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 80008cc:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <reset_handler+0x104>)
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 80008ce:	4d2e      	ldr	r5, [pc, #184]	; (8000988 <reset_handler+0x108>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	4c2e      	ldr	r4, [pc, #184]	; (800098c <reset_handler+0x10c>)
 80008d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d8:	6013      	str	r3, [r2, #0]
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 80008da:	f000 f9c9 	bl	8000c70 <target_enable_debug>
    target_init();               //  Init the STM32 platform.
 80008de:	f000 f8f5 	bl	8000acc <target_init>
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	b91b      	cbnz	r3, 80008ee <reset_handler+0x6e>
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <reset_handler+0x110>)
 80008e8:	6822      	ldr	r2, [r4, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d00c      	beq.n	8000908 <reset_handler+0x88>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 80008ee:	4829      	ldr	r0, [pc, #164]	; (8000994 <reset_handler+0x114>)
 80008f0:	f003 fbea 	bl	80040c8 <debug_print>
 80008f4:	6828      	ldr	r0, [r5, #0]
 80008f6:	f003 fc2f 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 80008fa:	4827      	ldr	r0, [pc, #156]	; (8000998 <reset_handler+0x118>)
 80008fc:	f003 fbe4 	bl	80040c8 <debug_print>
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	f003 fc29 	bl	8004158 <debug_printhex_unsigned>
 8000906:	e7fe      	b.n	8000906 <reset_handler+0x86>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000908:	4c24      	ldr	r4, [pc, #144]	; (800099c <reset_handler+0x11c>)
 800090a:	4925      	ldr	r1, [pc, #148]	; (80009a0 <reset_handler+0x120>)
 800090c:	428c      	cmp	r4, r1
 800090e:	d20b      	bcs.n	8000928 <reset_handler+0xa8>
 8000910:	43e3      	mvns	r3, r4
 8000912:	440b      	add	r3, r1
 8000914:	f023 0303 	bic.w	r3, r3, #3
 8000918:	3304      	adds	r3, #4
 800091a:	4625      	mov	r5, r4
 800091c:	441c      	add	r4, r3
		(*fp)();
 800091e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000922:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000924:	42a5      	cmp	r5, r4
 8000926:	d1fa      	bne.n	800091e <reset_handler+0x9e>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000928:	4c1e      	ldr	r4, [pc, #120]	; (80009a4 <reset_handler+0x124>)
 800092a:	491f      	ldr	r1, [pc, #124]	; (80009a8 <reset_handler+0x128>)
 800092c:	428c      	cmp	r4, r1
 800092e:	d20b      	bcs.n	8000948 <reset_handler+0xc8>
 8000930:	43e3      	mvns	r3, r4
 8000932:	440b      	add	r3, r1
 8000934:	f023 0303 	bic.w	r3, r3, #3
 8000938:	3304      	adds	r3, #4
 800093a:	4625      	mov	r5, r4
 800093c:	441c      	add	r4, r3
		(*fp)();
 800093e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000942:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000944:	42a5      	cmp	r5, r4
 8000946:	d1fa      	bne.n	800093e <reset_handler+0xbe>
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 8000948:	f003 fe76 	bl	8004638 <bootloader_start>
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800094c:	4c17      	ldr	r4, [pc, #92]	; (80009ac <reset_handler+0x12c>)
	application_start();
 800094e:	f006 fd57 	bl	8007400 <application_start>
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000952:	4917      	ldr	r1, [pc, #92]	; (80009b0 <reset_handler+0x130>)
 8000954:	428c      	cmp	r4, r1
 8000956:	d20b      	bcs.n	8000970 <reset_handler+0xf0>
 8000958:	43e3      	mvns	r3, r4
 800095a:	440b      	add	r3, r1
 800095c:	f023 0303 	bic.w	r3, r3, #3
 8000960:	3304      	adds	r3, #4
 8000962:	4625      	mov	r5, r4
 8000964:	441c      	add	r4, r3
		(*fp)();
 8000966:	f855 3b04 	ldr.w	r3, [r5], #4
 800096a:	4798      	blx	r3
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800096c:	42ac      	cmp	r4, r5
 800096e:	d1fa      	bne.n	8000966 <reset_handler+0xe6>
	}

}
 8000970:	bd38      	pop	{r3, r4, r5, pc}
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000
 8000978:	20000580 	.word	0x20000580
 800097c:	08006c2c 	.word	0x08006c2c
 8000980:	20000d04 	.word	0x20000d04
 8000984:	e000ed14 	.word	0xe000ed14
 8000988:	20000b9c 	.word	0x20000b9c
 800098c:	20000040 	.word	0x20000040
 8000990:	87654321 	.word	0x87654321
 8000994:	08005ee0 	.word	0x08005ee0
 8000998:	08005f08 	.word	0x08005f08
 800099c:	08006c2c 	.word	0x08006c2c
 80009a0:	08006c2c 	.word	0x08006c2c
 80009a4:	08006c2c 	.word	0x08006c2c
 80009a8:	08006c2c 	.word	0x08006c2c
 80009ac:	08006c2c 	.word	0x08006c2c
 80009b0:	08006c2c 	.word	0x08006c2c

080009b4 <_ZL10timer_tickv>:
static void timer_tick() {
 80009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!bootloader_callback) { return; }
 80009b8:	4e18      	ldr	r6, [pc, #96]	; (8000a1c <_ZL10timer_tickv+0x68>)
 80009ba:	6833      	ldr	r3, [r6, #0]
 80009bc:	b333      	cbz	r3, 8000a0c <_ZL10timer_tickv+0x58>
    poll_status = bootloader_callback();
 80009be:	4798      	blx	r3
 80009c0:	4d17      	ldr	r5, [pc, #92]	; (8000a20 <_ZL10timer_tickv+0x6c>)
    prev_poll_status = poll_status;
 80009c2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000a30 <_ZL10timer_tickv+0x7c>
    poll_status = bootloader_callback();
 80009c6:	6028      	str	r0, [r5, #0]
    prev_poll_status = poll_status;
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	f8c8 3000 	str.w	r3, [r8]
    if (poll_status > 0) { debug_print("u{ "); }
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dd02      	ble.n	80009da <_ZL10timer_tickv+0x26>
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <_ZL10timer_tickv+0x70>)
 80009d6:	f003 fb77 	bl	80040c8 <debug_print>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80009da:	682b      	ldr	r3, [r5, #0]
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80009dc:	2700      	movs	r7, #0
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dd0d      	ble.n	80009fe <_ZL10timer_tickv+0x4a>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80009e2:	240a      	movs	r4, #10
 80009e4:	602f      	str	r7, [r5, #0]
            poll_status = poll_status | bootloader_callback();
 80009e6:	6833      	ldr	r3, [r6, #0]
 80009e8:	4798      	blx	r3
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	3c01      	subs	r4, #1
 80009ee:	4318      	orrs	r0, r3
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	6028      	str	r0, [r5, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 80009f4:	2c00      	cmp	r4, #0
 80009f6:	d1f6      	bne.n	80009e6 <_ZL10timer_tickv+0x32>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dcf1      	bgt.n	80009e2 <_ZL10timer_tickv+0x2e>
    if (prev_poll_status > 0) { debug_print("} "); }
 80009fe:	f8d8 3000 	ldr.w	r3, [r8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dd02      	ble.n	8000a0c <_ZL10timer_tickv+0x58>
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <_ZL10timer_tickv+0x74>)
 8000a08:	f003 fb5e 	bl	80040c8 <debug_print>
    if (tick_callback) { tick_callback(); }
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_ZL10timer_tickv+0x78>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b103      	cbz	r3, 8000a14 <_ZL10timer_tickv+0x60>
 8000a12:	4798      	blx	r3
}
 8000a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    os_tick();
 8000a18:	f001 bc74 	b.w	8002304 <os_tick>
 8000a1c:	20000590 	.word	0x20000590
 8000a20:	20000580 	.word	0x20000580
 8000a24:	08005f18 	.word	0x08005f18
 8000a28:	08005f1c 	.word	0x08005f1c
 8000a2c:	20000584 	.word	0x20000584
 8000a30:	2000058c 	.word	0x2000058c

08000a34 <_ZL11timer_alarmv>:
    if (alarm_callback) { alarm_callback(); }
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_ZL11timer_alarmv+0x20>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b103      	cbz	r3, 8000a3c <_ZL11timer_alarmv+0x8>
 8000a3a:	4718      	bx	r3
static void timer_alarm() {
 8000a3c:	b510      	push	{r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000a3e:	f003 fca3 	bl	8004388 <millis>
 8000a42:	28c7      	cmp	r0, #199	; 0xc7
 8000a44:	d900      	bls.n	8000a48 <_ZL11timer_alarmv+0x14>
}
 8000a46:	bd10      	pop	{r4, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <_ZL11timer_alarmv+0x24>)
}
 8000a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000a4e:	f003 bb3b 	b.w	80040c8 <debug_print>
 8000a52:	bf00      	nop
 8000a54:	20000588 	.word	0x20000588
 8000a58:	08005f20 	.word	0x08005f20

08000a5c <target_wait.part.1>:
void target_wait(uint32_t milliseconds) {
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4604      	mov	r4, r0
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <target_wait.part.1+0x60>)
 8000a62:	f003 fb31 	bl	80040c8 <debug_print>
 8000a66:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <target_wait.part.1+0x64>)
}

static void os_schedule( void ) {
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
    running_tid = NO_TID;
 8000a68:	26ff      	movs	r6, #255	; 0xff
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000a6a:	fba0 3004 	umull	r3, r0, r0, r4
 8000a6e:	0980      	lsrs	r0, r0, #6
 8000a70:	f003 fb4c 	bl	800410c <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8000a74:	f003 fc88 	bl	8004388 <millis>
    running_tid = NO_TID;
 8000a78:	4d12      	ldr	r5, [pc, #72]	; (8000ac4 <target_wait.part.1+0x68>)
    uint32_t end = millis() + milliseconds;
 8000a7a:	4404      	add	r4, r0
 8000a7c:	e000      	b.n	8000a80 <target_wait.part.1+0x24>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000a7e:	bf20      	wfe
        if (millis() >= end) { break; }
 8000a80:	f003 fc82 	bl	8004388 <millis>
 8000a84:	4284      	cmp	r4, r0
 8000a86:	d910      	bls.n	8000aaa <target_wait.part.1+0x4e>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 8000a88:	f001 fc40 	bl	800230c <os_running>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d0f6      	beq.n	8000a7e <target_wait.part.1+0x22>
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 8000a90:	f001 fc3c 	bl	800230c <os_running>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d0f2      	beq.n	8000a7e <target_wait.part.1+0x22>
    running_tid = NO_TID;
 8000a98:	702e      	strb	r6, [r5, #0]
#ifdef ROUND_ROBIN
    /* Find next ready task */
    running_tid = os_task_next_ready_task();
#else
    /* Find the highest prio task ready to run */
    running_tid = os_task_highest_prio_ready_task();   
 8000a9a:	f001 fca7 	bl	80023ec <os_task_highest_prio_ready_task>
#endif    
    if ( running_tid != NO_TID ) {
 8000a9e:	28ff      	cmp	r0, #255	; 0xff
    running_tid = os_task_highest_prio_ready_task();   
 8000aa0:	7028      	strb	r0, [r5, #0]
    if ( running_tid != NO_TID ) {
 8000aa2:	d007      	beq.n	8000ab4 <target_wait.part.1+0x58>
        os_task_run();
 8000aa4:	f001 fd48 	bl	8002538 <os_task_run>
 8000aa8:	e7e9      	b.n	8000a7e <target_wait.part.1+0x22>
    debug_print("> ");
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <target_wait.part.1+0x6c>)
}
 8000aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_print("> ");
 8000ab0:	f003 bb0a 	b.w	80040c8 <debug_print>
    }
    else {
        os_cbkSleep();
 8000ab4:	f001 fc0a 	bl	80022cc <os_cbkSleep>
 8000ab8:	e7e1      	b.n	8000a7e <target_wait.part.1+0x22>
 8000aba:	bf00      	nop
 8000abc:	08005f7c 	.word	0x08005f7c
 8000ac0:	10624dd3 	.word	0x10624dd3
 8000ac4:	20000ca4 	.word	0x20000ca4
 8000ac8:	08005f84 	.word	0x08005f84

08000acc <target_init>:
void target_init(void) {
 8000acc:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <target_init+0x24>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	b102      	cbz	r2, 8000ad6 <target_init+0xa>
}
 8000ad4:	bd08      	pop	{r3, pc}
    initialised = true;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 8000ada:	f003 fb4f 	bl	800417c <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 8000ade:	f001 fbf7 	bl	80022d0 <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 8000ae2:	4904      	ldr	r1, [pc, #16]	; (8000af4 <target_init+0x28>)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <target_init+0x2c>)
}
 8000ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    platform_start_timer(timer_tick, timer_alarm);
 8000aea:	f003 bba5 	b.w	8004238 <platform_start_timer>
 8000aee:	bf00      	nop
 8000af0:	20000598 	.word	0x20000598
 8000af4:	08000a35 	.word	0x08000a35
 8000af8:	080009b5 	.word	0x080009b5

08000afc <target_wait_for_event>:
    if (!initialised) { return; }  //  If not initialised, quit.
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <target_wait_for_event+0xc>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b103      	cbz	r3, 8000b04 <target_wait_for_event+0x8>
    __asm("wfe");  //  Allow CPU to go to sleep.
 8000b02:	bf20      	wfe
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000598 	.word	0x20000598

08000b0c <target_wait>:
    if (milliseconds <= 0) { return; }
 8000b0c:	b110      	cbz	r0, 8000b14 <target_wait+0x8>
    if (!initialised) { return; }  //  If not initialised, quit.
 8000b0e:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <target_wait+0x10>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b903      	cbnz	r3, 8000b16 <target_wait+0xa>
}
 8000b14:	4770      	bx	lr
 8000b16:	f7ff bfa1 	b.w	8000a5c <target_wait.part.1>
 8000b1a:	bf00      	nop
 8000b1c:	20000598 	.word	0x20000598

08000b20 <target_wait_us>:
    return target_wait(microseconds / 1000);
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <target_wait_us+0x18>)
 8000b22:	fba3 3000 	umull	r3, r0, r3, r0
    if (milliseconds <= 0) { return; }
 8000b26:	0980      	lsrs	r0, r0, #6
 8000b28:	d002      	beq.n	8000b30 <target_wait_us+0x10>
    if (!initialised) { return; }  //  If not initialised, quit.
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <target_wait_us+0x1c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b903      	cbnz	r3, 8000b32 <target_wait_us+0x12>
}
 8000b30:	4770      	bx	lr
 8000b32:	f7ff bf93 	b.w	8000a5c <target_wait.part.1>
 8000b36:	bf00      	nop
 8000b38:	10624dd3 	.word	0x10624dd3
 8000b3c:	20000598 	.word	0x20000598

08000b40 <target_reset>:
void target_reset() {
 8000b40:	b508      	push	{r3, lr}
  	debug_println("----target_reset"); debug_flush();
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <target_reset+0x10>)
 8000b44:	f003 fac6 	bl	80040d4 <debug_println>
 8000b48:	f003 fa34 	bl	8003fb4 <debug_flush>
    scb_reset_system();
 8000b4c:	f000 f924 	bl	8000d98 <scb_reset_system>
 8000b50:	08005f50 	.word	0x08005f50

08000b54 <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 8000b54:	b662      	cpsie	i
}
 8000b56:	4770      	bx	lr

08000b58 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__ volatile ("CPSID I\n");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	4770      	bx	lr

08000b5c <target_seed_random>:
int target_seed_random(uint32_t rand) {
 8000b5c:	b508      	push	{r3, lr}
    debug_println("----target_seed_random");
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <target_seed_random+0xc>)
 8000b60:	f003 fab8 	bl	80040d4 <debug_println>
}
 8000b64:	2000      	movs	r0, #0
 8000b66:	bd08      	pop	{r3, pc}
 8000b68:	08005f64 	.word	0x08005f64

08000b6c <target_get_serial>:
uint32_t target_get_serial() {
 8000b6c:	b508      	push	{r3, lr}
    debug_println("----target_get_serial");
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <target_get_serial+0x10>)
 8000b70:	f003 fab0 	bl	80040d4 <debug_println>
    return (uint32_t)STM32_UUID[1];
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <target_get_serial+0x14>)
}
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	bd08      	pop	{r3, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08005f24 	.word	0x08005f24
 8000b80:	1fff7a14 	.word	0x1fff7a14

08000b84 <target_panic>:
void target_panic(int statusCode) {
 8000b84:	b508      	push	{r3, lr}
 8000b86:	4604      	mov	r4, r0
 8000b88:	b672      	cpsid	i
	debug_print("*****target_panic ");
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <target_panic+0x1c>)
 8000b8c:	f003 fa9c 	bl	80040c8 <debug_print>
	debug_println((int) statusCode);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f003 faad 	bl	80040f0 <_Z13debug_printlni>
	debug_flush();
 8000b96:	f003 fa0d 	bl	8003fb4 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000b9a:	bf20      	wfe
 8000b9c:	e7fd      	b.n	8000b9a <target_panic+0x16>
 8000b9e:	bf00      	nop
 8000ba0:	08005f3c 	.word	0x08005f3c

08000ba4 <fiber_initial_stack_base>:
}
 8000ba4:	4800      	ldr	r0, [pc, #0]	; (8000ba8 <fiber_initial_stack_base+0x4>)
 8000ba6:	4770      	bx	lr
 8000ba8:	20005000 	.word	0x20005000

08000bac <tcb_allocate>:
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8000bac:	2040      	movs	r0, #64	; 0x40
 8000bae:	f008 be47 	b.w	8009840 <malloc>
 8000bb2:	bf00      	nop

08000bb4 <tcb_configure_lr>:
    tcbPointer->LR = function;
 8000bb4:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000bb6:	4770      	bx	lr

08000bb8 <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8000bb8:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000bba:	4770      	bx	lr

08000bbc <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8000bbc:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000bbe:	4770      	bx	lr

08000bc0 <tcb_get_stack_base>:
}
 8000bc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000bc2:	4770      	bx	lr

08000bc4 <get_current_sp>:
}
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	4770      	bx	lr

08000bc8 <tcb_get_sp>:
}
 8000bc8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000bca:	4770      	bx	lr

08000bcc <tcb_configure_args>:
    tcbPointer->R1 = (uint32_t)cp;
 8000bcc:	e9c0 1200 	strd	r1, r2, [r0]
    tcbPointer->R2 = (uint32_t)pm;
 8000bd0:	6083      	str	r3, [r0, #8]
}
 8000bd2:	4770      	bx	lr

08000bd4 <test_codal>:
void test_codal() {
 8000bd4:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <test_codal+0x54>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <test_codal+0x58>)
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000bda:	681d      	ldr	r5, [r3, #0]
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000bdc:	4c14      	ldr	r4, [pc, #80]	; (8000c30 <test_codal+0x5c>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000bde:	f003 fa73 	bl	80040c8 <debug_print>
 8000be2:	4628      	mov	r0, r5
 8000be4:	f003 fab8 	bl	8004158 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <test_codal+0x60>)
 8000bea:	f003 fa6d 	bl	80040c8 <debug_print>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f003 fab2 	bl	8004158 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <test_codal+0x64>)
 8000bf6:	f003 fa67 	bl	80040c8 <debug_print>
	PROCESSOR_WORD_TYPE size = end - start;
 8000bfa:	1b60      	subs	r0, r4, r5
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000bfc:	0a80      	lsrs	r0, r0, #10
 8000bfe:	f003 fa07 	bl	8004010 <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <test_codal+0x68>)
 8000c04:	f003 fa60 	bl	80040c8 <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000c08:	466b      	mov	r3, sp
 8000c0a:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 8000c0e:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000c12:	0a80      	lsrs	r0, r0, #10
 8000c14:	f003 f9fc 	bl	8004010 <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <test_codal+0x6c>)
 8000c1a:	f003 fa5b 	bl	80040d4 <debug_println>
}
 8000c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    debug_println(" KB"); debug_flush();
 8000c22:	f003 b9c7 	b.w	8003fb4 <debug_flush>
 8000c26:	bf00      	nop
 8000c28:	20000044 	.word	0x20000044
 8000c2c:	08005f88 	.word	0x08005f88
 8000c30:	20004800 	.word	0x20004800
 8000c34:	08005f98 	.word	0x08005f98
 8000c38:	08005fa0 	.word	0x08005fa0
 8000c3c:	08005fac 	.word	0x08005fac
 8000c40:	08005fc0 	.word	0x08005fc0

08000c44 <_fini>:
    void _fini(void) { }
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_atexit>:
    }
 8000c48:	2000      	movs	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8000c4c:	4b01      	ldr	r3, [pc, #4]	; (8000c54 <target_set_tick_callback+0x8>)
 8000c4e:	6018      	str	r0, [r3, #0]
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000584 	.word	0x20000584

08000c58 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <target_set_alarm_callback+0x8>)
 8000c5a:	6018      	str	r0, [r3, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000588 	.word	0x20000588

08000c64 <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <target_set_bootloader_callback+0x8>)
 8000c66:	6018      	str	r0, [r3, #0]
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000590 	.word	0x20000590

08000c70 <target_enable_debug>:
    enable_debug();   
 8000c70:	f003 baaa 	b.w	80041c8 <enable_debug>

08000c74 <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 8000c74:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 8000c76:	d015      	beq.n	8000ca4 <store_context_complete>

    STR     R0, [R0,#0]
 8000c78:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000c7a:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000c7c:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000c7e:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000c80:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000c82:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000c84:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000c86:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000c88:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000c8a:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000c8c:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000c8e:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000c90:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000c92:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000c94:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000c96:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000c98:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000c9a:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000c9c:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000c9e:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000ca0:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000ca2:	6384      	str	r4, [r0, #56]	; 0x38

08000ca4 <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 8000ca4:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 8000ca6:	d006      	beq.n	8000cb6 <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000ca8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000caa <store_stack>:
store_stack:
    SUBS    R4, #4
 8000caa:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000cac:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000cae:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000cb0:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000cb2:	42b4      	cmp	r4, r6
    BNE     store_stack
 8000cb4:	d1f9      	bne.n	8000caa <store_stack>

08000cb6 <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 8000cb6:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000cb8:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000cba:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000cbc:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000cbe:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000cc0:	d006      	beq.n	8000cd0 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 8000cc2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

08000cc4 <restore_stack>:

restore_stack:
    SUBS    R4, #4
 8000cc4:	3c04      	subs	r4, #4
    SUBS    R3, #4
 8000cc6:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000cc8:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000cca:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000ccc:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000cce:	d1f9      	bne.n	8000cc4 <restore_stack>

08000cd0 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000cd0:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 8000cd2:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 8000cd4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 8000cd6:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000cd8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000cda:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000cdc:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000cde:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000ce0:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 8000ce2:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 8000ce4:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 8000ce6:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000ce8:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000cea:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000cec:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000cee:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000cf0:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 8000cf2:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 8000cf4:	4770      	bx	lr

08000cf6 <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000cf6:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000cf8:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000cfa:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000cfc:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000cfe:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000d00:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000d02:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000d04:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000d06:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000d08:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000d0a:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000d0c:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000d0e:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000d10:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000d12:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000d14:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000d16:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000d18:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000d1a:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000d1c:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000d1e:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000d20:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000d22:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000d24 <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000d24:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000d26:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000d28:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000d2a:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000d2c:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000d2e:	d1f9      	bne.n	8000d24 <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000d30:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000d32:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000d34:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000d36:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000d38:	4770      	bx	lr

08000d3a <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000d3a:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000d3c:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000d3e:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000d40:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000d42:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000d44:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000d46:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000d48:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000d4a:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000d4c:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000d4e:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000d50:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000d52:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000d54:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000d56:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000d58:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000d5a:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000d5c:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000d5e:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000d60:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000d62:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000d64:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 8000d66:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000d68:	4770      	bx	lr

08000d6a <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8000d6a:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000d6c:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000d6e:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000d70:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000d72:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000d74:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 8000d76:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8000d78:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8000d7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000d7c:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000d7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000d80:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000d82:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000d84:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 8000d86:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000d88:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000d8a:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000d8c:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000d8e:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000d90:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000d92:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000d94:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 8000d96:	4770      	bx	lr

08000d98 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <scb_reset_system+0x8>)
 8000d9a:	4a02      	ldr	r2, [pc, #8]	; (8000da4 <scb_reset_system+0xc>)
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e7fe      	b.n	8000d9e <scb_reset_system+0x6>
 8000da0:	e000ed0c 	.word	0xe000ed0c
 8000da4:	05fa0004 	.word	0x05fa0004

08000da8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000da8:	6101      	str	r1, [r0, #16]
}
 8000daa:	4770      	bx	lr

08000dac <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000dac:	0409      	lsls	r1, r1, #16
 8000dae:	6101      	str	r1, [r0, #16]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000db4:	4a02      	ldr	r2, [pc, #8]	; (8000dc0 <pwr_disable_backup_domain_write_protect+0xc>)
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	4770      	bx	lr
 8000dc0:	40007000 	.word	0x40007000

08000dc4 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000dc4:	4a02      	ldr	r2, [pc, #8]	; (8000dd0 <pwr_enable_backup_domain_write_protect+0xc>)
 8000dc6:	6813      	ldr	r3, [r2, #0]
 8000dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	4770      	bx	lr
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	0943      	lsrs	r3, r0, #5
 8000dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ddc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000de0:	6819      	ldr	r1, [r3, #0]
 8000de2:	f000 001f 	and.w	r0, r0, #31
 8000de6:	fa02 f000 	lsl.w	r0, r2, r0
 8000dea:	4308      	orrs	r0, r1
 8000dec:	6018      	str	r0, [r3, #0]
}
 8000dee:	4770      	bx	lr

08000df0 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000df0:	2201      	movs	r2, #1
 8000df2:	0943      	lsrs	r3, r0, #5
 8000df4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000df8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	f000 001f 	and.w	r0, r0, #31
 8000e02:	fa02 f000 	lsl.w	r0, r2, r0
 8000e06:	4301      	orrs	r1, r0
 8000e08:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	ea22 0000 	bic.w	r0, r2, r0
 8000e10:	6018      	str	r0, [r3, #0]
}
 8000e12:	4770      	bx	lr

08000e14 <desig_get_unique_id_as_string>:

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000e14:	2919      	cmp	r1, #25
 8000e16:	bf28      	it	cs
 8000e18:	2119      	movcs	r1, #25
{
 8000e1a:	b4f0      	push	{r4, r5, r6, r7}
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000e1c:	460d      	mov	r5, r1
{
 8000e1e:	b088      	sub	sp, #32
	const char chars[] = "0123456789ABCDEF";
 8000e20:	4f16      	ldr	r7, [pc, #88]	; (8000e7c <desig_get_unique_id_as_string+0x68>)
 8000e22:	ae03      	add	r6, sp, #12
{
 8000e24:	4604      	mov	r4, r0
	const char chars[] = "0123456789ABCDEF";
 8000e26:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000e28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e2a:	683a      	ldr	r2, [r7, #0]
	*result++ = DESIG_UNIQUE_ID2;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <desig_get_unique_id_as_string+0x6c>)
	const char chars[] = "0123456789ABCDEF";
 8000e2e:	7032      	strb	r2, [r6, #0]
	*result++ = DESIG_UNIQUE_ID2;
 8000e30:	681a      	ldr	r2, [r3, #0]
	*result = DESIG_UNIQUE_ID0;
 8000e32:	3b08      	subs	r3, #8
	*result++ = DESIG_UNIQUE_ID2;
 8000e34:	9200      	str	r2, [sp, #0]
	*result++ = DESIG_UNIQUE_ID1;
 8000e36:	685a      	ldr	r2, [r3, #4]
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000e38:	3d01      	subs	r5, #1
	*result++ = DESIG_UNIQUE_ID1;
 8000e3a:	9201      	str	r2, [sp, #4]
	*result = DESIG_UNIQUE_ID0;
 8000e3c:	681b      	ldr	r3, [r3, #0]

	for (i = 0; i < len; i += 2) {
 8000e3e:	2d00      	cmp	r5, #0
	*result = DESIG_UNIQUE_ID0;
 8000e40:	9302      	str	r3, [sp, #8]
	for (i = 0; i < len; i += 2) {
 8000e42:	dd16      	ble.n	8000e72 <desig_get_unique_id_as_string+0x5e>
 8000e44:	2200      	movs	r2, #0
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000e46:	ab08      	add	r3, sp, #32
 8000e48:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8000e4c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8000e50:	a808      	add	r0, sp, #32
 8000e52:	eb00 1013 	add.w	r0, r0, r3, lsr #4
 8000e56:	f810 0c14 	ldrb.w	r0, [r0, #-20]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	ae08      	add	r6, sp, #32
 8000e60:	4433      	add	r3, r6
 8000e62:	18a1      	adds	r1, r4, r2
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000e64:	54a0      	strb	r0, [r4, r2]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000e66:	f813 3c14 	ldrb.w	r3, [r3, #-20]
	for (i = 0; i < len; i += 2) {
 8000e6a:	3202      	adds	r2, #2
 8000e6c:	4295      	cmp	r5, r2
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000e6e:	704b      	strb	r3, [r1, #1]
	for (i = 0; i < len; i += 2) {
 8000e70:	dce9      	bgt.n	8000e46 <desig_get_unique_id_as_string+0x32>
	}

	string[len] = '\0';
 8000e72:	2300      	movs	r3, #0
 8000e74:	5563      	strb	r3, [r4, r5]
}
 8000e76:	b008      	add	sp, #32
 8000e78:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	08005fc4 	.word	0x08005fc4
 8000e80:	1ffff7f0 	.word	0x1ffff7f0

08000e84 <gpio_set_mode>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8000e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000e88:	f643 7cf8 	movw	ip, #16376	; 0x3ff8
	crl = GPIO_CRL(gpioport);
 8000e8c:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8000e8e:	2400      	movs	r4, #0
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000e90:	270f      	movs	r7, #15
	crh = GPIO_CRH(gpioport);
 8000e92:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000e96:	e004      	b.n	8000ea2 <gpio_set_mode+0x1e>
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000e98:	ea48 060a 	orr.w	r6, r8, sl
 8000e9c:	3401      	adds	r4, #1
	for (i = 0; i < 16; i++) {
 8000e9e:	2c10      	cmp	r4, #16
 8000ea0:	d029      	beq.n	8000ef6 <gpio_set_mode+0x72>
		if (!((1 << i) & gpios)) {
 8000ea2:	fa43 f504 	asr.w	r5, r3, r4
 8000ea6:	f015 0f01 	tst.w	r5, #1
 8000eaa:	b2a5      	uxth	r5, r4
 8000eac:	d0f6      	beq.n	8000e9c <gpio_set_mode+0x18>
 8000eae:	ea4f 0884 	mov.w	r8, r4, lsl #2
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000eb2:	f108 0902 	add.w	r9, r8, #2
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000eb6:	fa07 fa08 	lsl.w	sl, r7, r8
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000eba:	fa02 f909 	lsl.w	r9, r2, r9
 8000ebe:	fa01 f808 	lsl.w	r8, r1, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000ec2:	2c07      	cmp	r4, #7
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000ec4:	ea26 0a0a 	bic.w	sl, r6, sl
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000ec8:	ea49 0808 	orr.w	r8, r9, r8
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000ecc:	d9e4      	bls.n	8000e98 <gpio_set_mode+0x14>
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000ece:	4465      	add	r5, ip
 8000ed0:	00ad      	lsls	r5, r5, #2
 8000ed2:	b2ad      	uxth	r5, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000ed4:	f105 0802 	add.w	r8, r5, #2
 8000ed8:	fa01 f905 	lsl.w	r9, r1, r5
 8000edc:	fa02 f808 	lsl.w	r8, r2, r8
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000ee0:	fa07 f505 	lsl.w	r5, r7, r5
 8000ee4:	3401      	adds	r4, #1
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000ee6:	ea48 0809 	orr.w	r8, r8, r9
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000eea:	ea2e 0505 	bic.w	r5, lr, r5
	for (i = 0; i < 16; i++) {
 8000eee:	2c10      	cmp	r4, #16
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000ef0:	ea48 0e05 	orr.w	lr, r8, r5
	for (i = 0; i < 16; i++) {
 8000ef4:	d1d5      	bne.n	8000ea2 <gpio_set_mode+0x1e>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000ef6:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000ef8:	f8c0 e004 	str.w	lr, [r0, #4]
}
 8000efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000f00 <rcc_is_osc_ready.part.0>:

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <rcc_is_osc_ready.part.0+0xc>)
 8000f02:	6818      	ldr	r0, [r3, #0]
		return RCC_BDCR & RCC_BDCR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
	}
	return false;
}
 8000f04:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <rcc_osc_on.part.1>:

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000f10:	4a02      	ldr	r2, [pc, #8]	; (8000f1c <rcc_osc_on.part.1+0xc>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f18:	6013      	str	r3, [r2, #0]
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
		break;
	}
}
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000

08000f20 <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <rcc_enable_rtc_clock+0xc>)
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021020 	.word	0x40021020

08000f30 <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8000f30:	2806      	cmp	r0, #6
 8000f32:	d80a      	bhi.n	8000f4a <rcc_set_rtc_clock_source+0x1a>
 8000f34:	e8df f000 	tbb	[pc, r0]
 8000f38:	2f040404 	.word	0x2f040404
 8000f3c:	1d04      	.short	0x1d04
 8000f3e:	0a          	.byte	0x0a
 8000f3f:	00          	.byte	0x00
	case RCC_PLL2:
	case RCC_PLL3:
	case RCC_HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <rcc_set_rtc_clock_source+0x8c>)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f48:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000f4a:	4770      	bx	lr
		RCC_CSR |= RCC_CSR_LSION;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <rcc_set_rtc_clock_source+0x90>)
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000f4e:	461a      	mov	r2, r3
		RCC_CSR |= RCC_CSR_LSION;
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	f041 0101 	orr.w	r1, r1, #1
 8000f56:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	0799      	lsls	r1, r3, #30
 8000f5c:	d5fc      	bpl.n	8000f58 <rcc_set_rtc_clock_source+0x28>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <rcc_set_rtc_clock_source+0x8c>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f66:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6e:	601a      	str	r2, [r3, #0]
		break;
 8000f70:	4770      	bx	lr
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <rcc_set_rtc_clock_source+0x8c>)
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000f74:	461a      	mov	r2, r3
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	f041 0101 	orr.w	r1, r1, #1
 8000f7c:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	0798      	lsls	r0, r3, #30
 8000f82:	d5fc      	bpl.n	8000f7e <rcc_set_rtc_clock_source+0x4e>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f8a:	6013      	str	r3, [r2, #0]
		RCC_BDCR |= (1 << 8);
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
		break;
 8000f94:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEON;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <rcc_set_rtc_clock_source+0x94>)
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000f98:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSEON;
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000fa0:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	039b      	lsls	r3, r3, #14
 8000fa6:	d5fc      	bpl.n	8000fa2 <rcc_set_rtc_clock_source+0x72>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <rcc_set_rtc_clock_source+0x8c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fb0:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000fb8:	601a      	str	r2, [r3, #0]
		break;
 8000fba:	4770      	bx	lr
 8000fbc:	40021020 	.word	0x40021020
 8000fc0:	40021024 	.word	0x40021024
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
		RCC_CR |= RCC_CR_HSION;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
		return RCC_CR & RCC_CR_HSIRDY;
 8000fcc:	461a      	mov	r2, r3
		RCC_CR |= RCC_CR_HSION;
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	f041 0101 	orr.w	r1, r1, #1
 8000fd4:	6019      	str	r1, [r3, #0]
		return RCC_CR & RCC_CR_HSIRDY;
 8000fd6:	6813      	ldr	r3, [r2, #0]
	while (!rcc_is_osc_ready(osc));
 8000fd8:	0799      	lsls	r1, r3, #30
 8000fda:	d5fc      	bpl.n	8000fd6 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xe>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000fdc:	4827      	ldr	r0, [pc, #156]	; (800107c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
		return RCC_CR & RCC_CR_HSERDY;
 8000fde:	4926      	ldr	r1, [pc, #152]	; (8001078 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	6003      	str	r3, [r0, #0]
		RCC_CR |= RCC_CR_HSEON;
 8000fe8:	6813      	ldr	r3, [r2, #0]
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
		return RCC_CR & RCC_CR_HSERDY;
 8000ff0:	680b      	ldr	r3, [r1, #0]
	while (!rcc_is_osc_ready(osc));
 8000ff2:	039b      	lsls	r3, r3, #14
 8000ff4:	d5fc      	bpl.n	8000ff0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x28>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000ff6:	4c21      	ldr	r4, [pc, #132]	; (800107c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000ff8:	2002      	movs	r0, #2
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f023 0303 	bic.w	r3, r3, #3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800100c:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001014:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800101c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001020:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001028:	6023      	str	r3, [r4, #0]
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 800102a:	f000 fd5d 	bl	8001ae8 <flash_set_ws>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001034:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001038:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6023      	str	r3, [r4, #0]
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	f7ff ff61 	bl	8000f10 <rcc_osc_on.part.1>
 800104e:	f7ff ff57 	bl	8000f00 <rcc_is_osc_ready.part.0>
	while (!rcc_is_osc_ready(osc));
 8001052:	2800      	cmp	r0, #0
 8001054:	d0fb      	beq.n	800104e <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x86>
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8001056:	4909      	ldr	r1, [pc, #36]	; (800107c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8001058:	4a09      	ldr	r2, [pc, #36]	; (8001080 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb8>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 800105a:	680b      	ldr	r3, [r1, #0]
	rcc_ahb_frequency = 72000000;
 800105c:	4d09      	ldr	r5, [pc, #36]	; (8001084 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xbc>)
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	600b      	str	r3, [r1, #0]
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
 8001068:	4c07      	ldr	r4, [pc, #28]	; (8001088 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc0>)
	rcc_apb1_frequency = 36000000;
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc4>)
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc8>)
	rcc_ahb_frequency = 72000000;
 800106e:	602a      	str	r2, [r5, #0]
	rcc_apb2_frequency = 72000000;
 8001070:	6022      	str	r2, [r4, #0]
	rcc_apb1_frequency = 36000000;
 8001072:	6003      	str	r3, [r0, #0]
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	40021004 	.word	0x40021004
 8001080:	044aa200 	.word	0x044aa200
 8001084:	20000048 	.word	0x20000048
 8001088:	20000050 	.word	0x20000050
 800108c:	2000004c 	.word	0x2000004c
 8001090:	02255100 	.word	0x02255100

08001094 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8001094:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8001096:	f240 3097 	movw	r0, #919	; 0x397
 800109a:	f7ff fe9b 	bl	8000dd4 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 800109e:	2300      	movs	r3, #0
	SET_REG(USB_BTABLE_REG, 0);
	SET_REG(USB_ISTR_REG, 0);

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 80010a0:	f44f 411c 	mov.w	r1, #39936	; 0x9c00
	SET_REG(USB_CNTR_REG, 0);
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <st_usbfs_v1_usbd_init+0x24>)
	SET_REG(USB_BTABLE_REG, 0);
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <st_usbfs_v1_usbd_init+0x28>)
	SET_REG(USB_ISTR_REG, 0);
 80010a8:	4c05      	ldr	r4, [pc, #20]	; (80010c0 <st_usbfs_v1_usbd_init+0x2c>)
	SET_REG(USB_CNTR_REG, 0);
 80010aa:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 80010ac:	6003      	str	r3, [r0, #0]
	SET_REG(USB_ISTR_REG, 0);
 80010ae:	6023      	str	r3, [r4, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <st_usbfs_v1_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 80010b2:	6011      	str	r1, [r2, #0]
}
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	bf00      	nop
 80010b8:	40005c40 	.word	0x40005c40
 80010bc:	40005c50 	.word	0x40005c50
 80010c0:	40005c44 	.word	0x40005c44
 80010c4:	20000ba8 	.word	0x20000ba8

080010c8 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 80010c8:	3201      	adds	r2, #1
 80010ca:	1052      	asrs	r2, r2, #1
 80010cc:	b293      	uxth	r3, r2
 80010ce:	b15a      	cbz	r2, 80010e8 <st_usbfs_copy_to_pm+0x20>
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		*PM++ = *lbuf++;
 80010da:	f831 2b02 	ldrh.w	r2, [r1], #2
 80010de:	3004      	adds	r0, #4
	for (len = (len + 1) >> 1; len; len--) {
 80010e0:	4299      	cmp	r1, r3
		*PM++ = *lbuf++;
 80010e2:	f840 2c04 	str.w	r2, [r0, #-4]
	for (len = (len + 1) >> 1; len; len--) {
 80010e6:	d1f8      	bne.n	80010da <st_usbfs_copy_to_pm+0x12>
	}
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 80010ec:	b470      	push	{r4, r5, r6}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 80010ee:	f002 0601 	and.w	r6, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 80010f2:	0852      	lsrs	r2, r2, #1
 80010f4:	d00d      	beq.n	8001112 <st_usbfs_copy_from_pm+0x26>
	const volatile uint16_t *PM = vPM;
 80010f6:	460b      	mov	r3, r1
 80010f8:	3a01      	subs	r2, #1
 80010fa:	b292      	uxth	r2, r2
 80010fc:	3201      	adds	r2, #1
 80010fe:	eb00 0542 	add.w	r5, r0, r2, lsl #1
		*lbuf = *PM;
 8001102:	f833 4b04 	ldrh.w	r4, [r3], #4
 8001106:	f820 4b02 	strh.w	r4, [r0], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 800110a:	42a8      	cmp	r0, r5
 800110c:	d1f9      	bne.n	8001102 <st_usbfs_copy_from_pm+0x16>
 800110e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	}

	if (odd) {
 8001112:	b10e      	cbz	r6, 8001118 <st_usbfs_copy_from_pm+0x2c>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 8001114:	780b      	ldrb	r3, [r1, #0]
 8001116:	7003      	strb	r3, [r0, #0]
	}
}
 8001118:	bc70      	pop	{r4, r5, r6}
 800111a:	4770      	bx	lr

0800111c <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	4680      	mov	r8, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8001122:	6800      	ldr	r0, [r0, #0]
{
 8001124:	468a      	mov	sl, r1
 8001126:	4617      	mov	r7, r2
 8001128:	461e      	mov	r6, r3
 800112a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	usbd_dev = driver->init();
 800112e:	4780      	blx	r0
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 8001130:	2500      	movs	r5, #0
	usbd_dev->strings = strings;
 8001132:	6086      	str	r6, [r0, #8]
	usbd_dev->num_strings = num_strings;
 8001134:	9e08      	ldr	r6, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <usbd_init+0x48>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8001138:	490b      	ldr	r1, [pc, #44]	; (8001168 <usbd_init+0x4c>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800113a:	4a0c      	ldr	r2, [pc, #48]	; (800116c <usbd_init+0x50>)
	usbd_dev->num_strings = num_strings;
 800113c:	60c6      	str	r6, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 800113e:	9e09      	ldr	r6, [sp, #36]	; 0x24
	usbd_dev->desc = dev;
 8001140:	f8c0 a000 	str.w	sl, [r0]
	usbd_dev->driver = driver;
 8001144:	f8c0 80dc 	str.w	r8, [r0, #220]	; 0xdc
	usbd_dev->config = conf;
 8001148:	6047      	str	r7, [r0, #4]
	usbd_dev->ctrl_buf = control_buffer;
 800114a:	6106      	str	r6, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800114c:	f8a0 9014 	strh.w	r9, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8001150:	e9c0 131b 	strd	r1, r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8001154:	6682      	str	r2, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8001156:	e9c0 5532 	strd	r5, r5, [r0, #200]	; 0xc8
 800115a:	e9c0 5534 	strd	r5, r5, [r0, #208]	; 0xd0
	}

	return usbd_dev;
}
 800115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001162:	bf00      	nop
 8001164:	080013a5 	.word	0x080013a5
 8001168:	08001409 	.word	0x08001409
 800116c:	080014a9 	.word	0x080014a9

08001170 <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 8001170:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001172:	4770      	bx	lr

08001174 <_usbd_reset>:

void _usbd_reset(usbd_device *usbd_dev)
{
 8001174:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->current_address = 0;
 8001176:	2500      	movs	r5, #0
{
 8001178:	4604      	mov	r4, r0
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 800117a:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 800117c:	82c5      	strh	r5, [r0, #22]
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800117e:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
 8001182:	b082      	sub	sp, #8
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8001184:	79db      	ldrb	r3, [r3, #7]
 8001186:	9500      	str	r5, [sp, #0]
 8001188:	6896      	ldr	r6, [r2, #8]
 800118a:	4629      	mov	r1, r5
 800118c:	462a      	mov	r2, r5
 800118e:	47b0      	blx	r6
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001190:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8001194:	4629      	mov	r1, r5
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4620      	mov	r0, r4
 800119a:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 800119c:	69e3      	ldr	r3, [r4, #28]
 800119e:	b11b      	cbz	r3, 80011a8 <_usbd_reset+0x34>
}
 80011a0:	b002      	add	sp, #8
 80011a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbd_dev->user_callback_reset();
 80011a6:	4718      	bx	r3
}
 80011a8:	b002      	add	sp, #8
 80011aa:	bd70      	pop	{r4, r5, r6, pc}

080011ac <usbd_poll>:
	usbd_dev->driver->poll(usbd_dev);
 80011ac:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	4718      	bx	r3

080011b4 <usbd_ep_setup>:
{
 80011b4:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80011b6:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80011ba:	68a4      	ldr	r4, [r4, #8]
 80011bc:	46a4      	mov	ip, r4
}
 80011be:	bc10      	pop	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80011c0:	4760      	bx	ip
 80011c2:	bf00      	nop

080011c4 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 80011c4:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80011c6:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80011ca:	69e4      	ldr	r4, [r4, #28]
 80011cc:	46a4      	mov	ip, r4
}
 80011ce:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80011d0:	4760      	bx	ip
 80011d2:	bf00      	nop

080011d4 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 80011d4:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80011d6:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80011da:	6a24      	ldr	r4, [r4, #32]
 80011dc:	46a4      	mov	ip, r4
}
 80011de:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80011e0:	4760      	bx	ip
 80011e2:	bf00      	nop

080011e4 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 80011e4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	4718      	bx	r3

080011ec <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 80011ec:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4718      	bx	r3

080011f4 <usbd_ep_nak_set>:
}

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 80011f4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4718      	bx	r3

080011fc <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 80011fc:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 80011fe:	6802      	ldr	r2, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
 8001200:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001202:	79d1      	ldrb	r1, [r2, #7]
{
 8001204:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001206:	4299      	cmp	r1, r3
 8001208:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800120a:	d310      	bcc.n	800122e <usb_control_send_chunk+0x32>
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 800120c:	2100      	movs	r1, #0
 800120e:	f7ff ffd9 	bl	80011c4 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
 8001212:	2300      	movs	r3, #0
			DATA_IN : LAST_DATA_IN;
 8001214:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 8001218:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
 800121a:	429a      	cmp	r2, r3
 800121c:	bf0c      	ite	eq
 800121e:	2203      	moveq	r2, #3
 8001220:	2202      	movne	r2, #2
		usbd_dev->control_state.needs_zlp = false;
 8001222:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.state =
 8001226:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf = NULL;
 800122a:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 800122c:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 800122e:	460b      	mov	r3, r1
 8001230:	2100      	movs	r1, #0
 8001232:	f7ff ffc7 	bl	80011c4 <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001236:	2202      	movs	r2, #2
			usbd_dev->desc->bMaxPacketSize0;
 8001238:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.state = DATA_IN;
 800123a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 800123e:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 8001240:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8001242:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8001244:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8001246:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8001248:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 800124a:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800124c:	bd10      	pop	{r4, pc}
 800124e:	bf00      	nop

08001250 <usb_control_request_dispatch>:
}

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 8001250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001254:	4605      	mov	r5, r0
 8001256:	460f      	mov	r7, r1
 8001258:	b083      	sub	sp, #12
 800125a:	f100 0838 	add.w	r8, r0, #56	; 0x38
 800125e:	f100 093c 	add.w	r9, r0, #60	; 0x3c
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8001262:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001266:	f100 0a68 	add.w	sl, r0, #104	; 0x68
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 800126a:	f100 0b40 	add.w	fp, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 800126e:	6826      	ldr	r6, [r4, #0]
 8001270:	b196      	cbz	r6, 8001298 <usb_control_request_dispatch+0x48>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001272:	7961      	ldrb	r1, [r4, #5]
 8001274:	783b      	ldrb	r3, [r7, #0]
 8001276:	7922      	ldrb	r2, [r4, #4]
 8001278:	400b      	ands	r3, r1
 800127a:	429a      	cmp	r2, r3
 800127c:	f104 0408 	add.w	r4, r4, #8
 8001280:	d108      	bne.n	8001294 <usb_control_request_dispatch+0x44>
			result = cb[i].cb(usbd_dev, req,
 8001282:	f8cd b000 	str.w	fp, [sp]
 8001286:	464b      	mov	r3, r9
 8001288:	4642      	mov	r2, r8
 800128a:	4639      	mov	r1, r7
 800128c:	4628      	mov	r0, r5
 800128e:	47b0      	blx	r6
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8001290:	2801      	cmp	r0, #1
 8001292:	d90a      	bls.n	80012aa <usb_control_request_dispatch+0x5a>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001294:	4554      	cmp	r4, sl
 8001296:	d1ea      	bne.n	800126e <usb_control_request_dispatch+0x1e>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001298:	464b      	mov	r3, r9
 800129a:	4642      	mov	r2, r8
 800129c:	4639      	mov	r1, r7
 800129e:	4628      	mov	r0, r5
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80012a0:	b003      	add	sp, #12
 80012a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 80012a6:	f000 bbed 	b.w	8001a84 <_usbd_standard_request>
}
 80012aa:	b003      	add	sp, #12
 80012ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012b0 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 80012b0:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80012b2:	6903      	ldr	r3, [r0, #16]
{
 80012b4:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80012b6:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 80012b8:	798b      	ldrb	r3, [r1, #6]
 80012ba:	79ca      	ldrb	r2, [r1, #7]
{
 80012bc:	460d      	mov	r5, r1
	usbd_dev->control_state.ctrl_len = req->wLength;
 80012be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012c2:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 80012c4:	f7ff ffc4 	bl	8001250 <usb_control_request_dispatch>
 80012c8:	b1a8      	cbz	r0, 80012f6 <usb_control_setup_read+0x46>
		if (req->wLength) {
 80012ca:	88eb      	ldrh	r3, [r5, #6]
 80012cc:	b323      	cbz	r3, 8001318 <usb_control_setup_read+0x68>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 80012ce:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80012d0:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 80012d2:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 80012d4:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 80012d6:	d917      	bls.n	8001308 <usb_control_setup_read+0x58>
		if (len && (len % ep_size == 0)) {
 80012d8:	b132      	cbz	r2, 80012e8 <usb_control_setup_read+0x38>
 80012da:	fb92 f3f1 	sdiv	r3, r2, r1
 80012de:	fb01 2213 	mls	r2, r1, r3, r2
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	0952      	lsrs	r2, r2, #5
			usbd_dev->control_state.needs_zlp =
 80012e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 80012ec:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 80012ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 80012f2:	f7ff bf83 	b.w	80011fc <usb_control_send_chunk>
 80012f6:	4606      	mov	r6, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80012f8:	4601      	mov	r1, r0
 80012fa:	2201      	movs	r2, #1
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff71 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001302:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8001306:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8001308:	2200      	movs	r2, #0
			usb_control_send_chunk(usbd_dev);
 800130a:	4620      	mov	r0, r4
			usbd_dev->control_state.needs_zlp =
 800130c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8001310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usb_control_send_chunk(usbd_dev);
 8001314:	f7ff bf72 	b.w	80011fc <usb_control_send_chunk>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001318:	461a      	mov	r2, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff ff51 	bl	80011c4 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001322:	2304      	movs	r3, #4
 8001324:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	bf00      	nop

0800132c <usb_control_recv_chunk>:
{
 800132c:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800132e:	6802      	ldr	r2, [r0, #0]
 8001330:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001332:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001334:	79d2      	ldrb	r2, [r2, #7]
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	4294      	cmp	r4, r2
 800133a:	bfa8      	it	ge
 800133c:	4614      	movge	r4, r2
				       usbd_dev->control_state.ctrl_buf +
 800133e:	6b82      	ldr	r2, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001340:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001342:	441a      	add	r2, r3
 8001344:	2100      	movs	r1, #0
 8001346:	4633      	mov	r3, r6
{
 8001348:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800134a:	f7ff ff43 	bl	80011d4 <usbd_ep_read_packet>
	if (size != packetsize) {
 800134e:	4286      	cmp	r6, r0
 8001350:	d104      	bne.n	800135c <usb_control_recv_chunk+0x30>
	usbd_dev->control_state.ctrl_len += size;
 8001352:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001354:	b2a0      	uxth	r0, r4
 8001356:	441e      	add	r6, r3
 8001358:	87ae      	strh	r6, [r5, #60]	; 0x3c
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800135c:	4628      	mov	r0, r5
 800135e:	2201      	movs	r2, #1
 8001360:	2100      	movs	r1, #0
 8001362:	f7ff ff3f 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001366:	2300      	movs	r3, #0
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	bf00      	nop

08001374 <usbd_register_control_callback>:
{
 8001374:	b470      	push	{r4, r5, r6}
 8001376:	4605      	mov	r5, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001378:	2600      	movs	r6, #0
		if (usbd_dev->user_control_callback[i].cb) {
 800137a:	6cac      	ldr	r4, [r5, #72]	; 0x48
 800137c:	3508      	adds	r5, #8
 800137e:	b13c      	cbz	r4, 8001390 <usbd_register_control_callback+0x1c>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001380:	3601      	adds	r6, #1
 8001382:	2e04      	cmp	r6, #4
 8001384:	d1f9      	bne.n	800137a <usbd_register_control_callback+0x6>
	return -1;
 8001386:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800138a:	4620      	mov	r0, r4
 800138c:	bc70      	pop	{r4, r5, r6}
 800138e:	4770      	bx	lr
 8001390:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
		usbd_dev->user_control_callback[i].type = type;
 8001394:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001398:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 800139c:	6483      	str	r3, [r0, #72]	; 0x48
}
 800139e:	4620      	mov	r0, r4
 80013a0:	bc70      	pop	{r4, r5, r6}
 80013a2:	4770      	bx	lr

080013a4 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 80013a4:	b538      	push	{r3, r4, r5, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80013a6:	2500      	movs	r5, #0
{
 80013a8:	4604      	mov	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 80013aa:	4629      	mov	r1, r5
 80013ac:	2201      	movs	r2, #1
	usbd_dev->control_state.complete = NULL;
 80013ae:	6405      	str	r5, [r0, #64]	; 0x40
	usbd_ep_nak_set(usbd_dev, 0, 1);
 80013b0:	f7ff ff20 	bl	80011f4 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 80013b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 80013b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
	if (req->wLength == 0) {
 80013ba:	b1c3      	cbz	r3, 80013ee <_usbd_control_setup+0x4a>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 80013bc:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	db14      	blt.n	80013ee <_usbd_control_setup+0x4a>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 80013c4:	8aa2      	ldrh	r2, [r4, #20]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d316      	bcc.n	80013f8 <_usbd_control_setup+0x54>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80013ca:	6921      	ldr	r1, [r4, #16]
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80013cc:	6822      	ldr	r2, [r4, #0]
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80013ce:	63a1      	str	r1, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 80013d0:	87a5      	strh	r5, [r4, #60]	; 0x3c
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80013d2:	79d2      	ldrb	r2, [r2, #7]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80013d4:	4620      	mov	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80013d6:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 80013d8:	bf34      	ite	cc
 80013da:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80013dc:	2306      	movcs	r3, #6
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80013de:	2200      	movs	r2, #0
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80013e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80013e4:	4611      	mov	r1, r2
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 80013e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80013ea:	f7ff bf03 	b.w	80011f4 <usbd_ep_nak_set>
		usb_control_setup_read(usbd_dev, req);
 80013ee:	4620      	mov	r0, r4
}
 80013f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_control_setup_read(usbd_dev, req);
 80013f4:	f7ff bf5c 	b.w	80012b0 <usb_control_setup_read>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	4629      	mov	r1, r5
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fef1 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001402:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8001406:	bd38      	pop	{r3, r4, r5, pc}

08001408 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8001408:	b538      	push	{r3, r4, r5, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 800140a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800140e:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001410:	2b06      	cmp	r3, #6
 8001412:	d02b      	beq.n	800146c <_usbd_control_out+0x64>
 8001414:	2b07      	cmp	r3, #7
 8001416:	d018      	beq.n	800144a <_usbd_control_out+0x42>
 8001418:	2b05      	cmp	r3, #5
 800141a:	d007      	beq.n	800142c <_usbd_control_out+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	2100      	movs	r1, #0
 8001420:	f7ff fee0 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001424:	2300      	movs	r3, #0
 8001426:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 800142a:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 800142c:	f7ff ff7e 	bl	800132c <usb_control_recv_chunk>
 8001430:	2800      	cmp	r0, #0
 8001432:	dbfa      	blt.n	800142a <_usbd_control_out+0x22>
					usbd_dev->desc->bMaxPacketSize0) {
 8001434:	6822      	ldr	r2, [r4, #0]
		if ((usbd_dev->control_state.req.wLength -
 8001436:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 8001438:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
					usbd_dev->desc->bMaxPacketSize0) {
 800143a:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 800143c:	1a5b      	subs	r3, r3, r1
 800143e:	4293      	cmp	r3, r2
 8001440:	dcf3      	bgt.n	800142a <_usbd_control_out+0x22>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001442:	2306      	movs	r3, #6
 8001444:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001448:	bd38      	pop	{r3, r4, r5, pc}
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 800144a:	2300      	movs	r3, #0
 800144c:	461a      	mov	r2, r3
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fec0 	bl	80011d4 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001454:	2200      	movs	r2, #0
		if (usbd_dev->control_state.complete) {
 8001456:	6c23      	ldr	r3, [r4, #64]	; 0x40
		usbd_dev->control_state.state = IDLE;
 8001458:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 800145c:	b11b      	cbz	r3, 8001466 <_usbd_control_out+0x5e>
			usbd_dev->control_state.complete(usbd_dev,
 800145e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001462:	4620      	mov	r0, r4
 8001464:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001466:	2300      	movs	r3, #0
 8001468:	6423      	str	r3, [r4, #64]	; 0x40
}
 800146a:	bd38      	pop	{r3, r4, r5, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 800146c:	f7ff ff5e 	bl	800132c <usb_control_recv_chunk>
 8001470:	2800      	cmp	r0, #0
 8001472:	dbda      	blt.n	800142a <_usbd_control_out+0x22>
		if (usb_control_request_dispatch(usbd_dev,
 8001474:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fee9 	bl	8001250 <usb_control_request_dispatch>
 800147e:	4605      	mov	r5, r0
 8001480:	b148      	cbz	r0, 8001496 <_usbd_control_out+0x8e>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001482:	2300      	movs	r3, #0
 8001484:	4620      	mov	r0, r4
 8001486:	461a      	mov	r2, r3
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fe9b 	bl	80011c4 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 800148e:	2304      	movs	r3, #4
 8001490:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001494:	bd38      	pop	{r3, r4, r5, pc}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001496:	4601      	mov	r1, r0
 8001498:	2201      	movs	r2, #1
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff fea2 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80014a0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80014a4:	bd38      	pop	{r3, r4, r5, pc}
 80014a6:	bf00      	nop

080014a8 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 80014a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80014ac:	b510      	push	{r4, lr}
	switch (usbd_dev->control_state.state) {
 80014ae:	2b03      	cmp	r3, #3
{
 80014b0:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 80014b2:	d027      	beq.n	8001504 <_usbd_control_in+0x5c>
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d00d      	beq.n	80014d4 <_usbd_control_in+0x2c>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d007      	beq.n	80014cc <_usbd_control_in+0x24>
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	2100      	movs	r1, #0
 80014c0:	f7ff fe90 	bl	80011e4 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80014ca:	bd10      	pop	{r4, pc}
 80014cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 80014d0:	f7ff be94 	b.w	80011fc <usb_control_send_chunk>
		if (usbd_dev->control_state.complete) {
 80014d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014d6:	b113      	cbz	r3, 80014de <_usbd_control_in+0x36>
			usbd_dev->control_state.complete(usbd_dev,
 80014d8:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80014dc:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 80014de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ee      	bne.n	80014c4 <_usbd_control_in+0x1c>
 80014e6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d1ea      	bne.n	80014c4 <_usbd_control_in+0x1c>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80014ee:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80014f0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80014f4:	b2c9      	uxtb	r1, r1
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4620      	mov	r0, r4
 80014fa:	4798      	blx	r3
	usbd_dev->control_state.state = IDLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001502:	bd10      	pop	{r4, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8001504:	2307      	movs	r3, #7
}
 8001506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_ep_nak_set(usbd_dev, 0, 0);
 800150a:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 800150c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8001510:	4611      	mov	r1, r2
 8001512:	f7ff be6f 	b.w	80011f4 <usbd_ep_nak_set>
 8001516:	bf00      	nop

08001518 <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 800151a:	884e      	ldrh	r6, [r1, #2]
 800151c:	b196      	cbz	r6, 8001544 <usb_standard_set_configuration+0x2c>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800151e:	6803      	ldr	r3, [r0, #0]
 8001520:	7c5d      	ldrb	r5, [r3, #17]
 8001522:	b16d      	cbz	r5, 8001540 <usb_standard_set_configuration+0x28>
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8001524:	6844      	ldr	r4, [r0, #4]
			if (req->wValue
 8001526:	7963      	ldrb	r3, [r4, #5]
 8001528:	42b3      	cmp	r3, r6
 800152a:	d044      	beq.n	80015b6 <usb_standard_set_configuration+0x9e>
 800152c:	4622      	mov	r2, r4
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	e003      	b.n	800153a <usb_standard_set_configuration+0x22>
			    == usbd_dev->config[i].bConfigurationValue) {
 8001532:	7c97      	ldrb	r7, [r2, #18]
 8001534:	320d      	adds	r2, #13
			if (req->wValue
 8001536:	42be      	cmp	r6, r7
 8001538:	d022      	beq.n	8001580 <usb_standard_set_configuration+0x68>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800153a:	3301      	adds	r3, #1
 800153c:	42ab      	cmp	r3, r5
 800153e:	d1f8      	bne.n	8001532 <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8001540:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8001542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 8001544:	75c6      	strb	r6, [r0, #23]
 8001546:	4604      	mov	r4, r0
	usbd_dev->driver->ep_reset(usbd_dev);
 8001548:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800154c:	460e      	mov	r6, r1
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001552:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001556:	b18b      	cbz	r3, 800157c <usb_standard_set_configuration+0x64>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001558:	2200      	movs	r2, #0
 800155a:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
 800155e:	64a2      	str	r2, [r4, #72]	; 0x48
 8001560:	6522      	str	r2, [r4, #80]	; 0x50
 8001562:	65a2      	str	r2, [r4, #88]	; 0x58
 8001564:	6622      	str	r2, [r4, #96]	; 0x60
 8001566:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 800156a:	b113      	cbz	r3, 8001572 <usb_standard_set_configuration+0x5a>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 800156c:	8871      	ldrh	r1, [r6, #2]
 800156e:	4620      	mov	r0, r4
 8001570:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001572:	42af      	cmp	r7, r5
 8001574:	d002      	beq.n	800157c <usb_standard_set_configuration+0x64>
 8001576:	f855 3b04 	ldr.w	r3, [r5], #4
 800157a:	e7f6      	b.n	800156a <usb_standard_set_configuration+0x52>
	return USBD_REQ_HANDLED;
 800157c:	2001      	movs	r0, #1
}
 800157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbd_dev->current_config = found_index + 1;
 8001580:	3301      	adds	r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	75c3      	strb	r3, [r0, #23]
	if (usbd_dev->current_config > 0) {
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0dd      	beq.n	8001546 <usb_standard_set_configuration+0x2e>
 800158a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800158e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001592:	3b0d      	subs	r3, #13
 8001594:	441c      	add	r4, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001596:	7925      	ldrb	r5, [r4, #4]
 8001598:	2d00      	cmp	r5, #0
 800159a:	d0d4      	beq.n	8001546 <usb_standard_set_configuration+0x2e>
 800159c:	2300      	movs	r3, #0
				*cfg->interface[i].cur_altsetting = 0;
 800159e:	461f      	mov	r7, r3
			if (cfg->interface[i].cur_altsetting) {
 80015a0:	f8d4 2009 	ldr.w	r2, [r4, #9]
 80015a4:	011e      	lsls	r6, r3, #4
 80015a6:	58b2      	ldr	r2, [r6, r2]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80015a8:	3301      	adds	r3, #1
			if (cfg->interface[i].cur_altsetting) {
 80015aa:	b10a      	cbz	r2, 80015b0 <usb_standard_set_configuration+0x98>
				*cfg->interface[i].cur_altsetting = 0;
 80015ac:	7017      	strb	r7, [r2, #0]
 80015ae:	7925      	ldrb	r5, [r4, #4]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80015b0:	429d      	cmp	r5, r3
 80015b2:	d8f5      	bhi.n	80015a0 <usb_standard_set_configuration+0x88>
 80015b4:	e7c7      	b.n	8001546 <usb_standard_set_configuration+0x2e>
	usbd_dev->current_config = found_index + 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75c3      	strb	r3, [r0, #23]
 80015ba:	e7ec      	b.n	8001596 <usb_standard_set_configuration+0x7e>

080015bc <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 80015bc:	8819      	ldrh	r1, [r3, #0]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	2901      	cmp	r1, #1
		*len = 1;
 80015c2:	bf84      	itt	hi
 80015c4:	2101      	movhi	r1, #1
 80015c6:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 80015c8:	7dc3      	ldrb	r3, [r0, #23]
 80015ca:	b913      	cbnz	r3, 80015d2 <usb_standard_get_configuration+0x16>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
	} else {
		(*buf)[0] = 0;
 80015cc:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 80015ce:	2001      	movs	r0, #1
 80015d0:	4770      	bx	lr
		(*buf)[0] = cfg->bConfigurationValue;
 80015d2:	6841      	ldr	r1, [r0, #4]
 80015d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80015d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80015dc:	440b      	add	r3, r1
 80015de:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 80015e2:	2001      	movs	r0, #1
		(*buf)[0] = cfg->bConfigurationValue;
 80015e4:	7013      	strb	r3, [r2, #0]
}
 80015e6:	4770      	bx	lr

080015e8 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 80015e8:	b430      	push	{r4, r5}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 80015ea:	7dc4      	ldrb	r4, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80015ec:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80015ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80015f2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80015f6:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 80015f8:	4404      	add	r4, r0

	if (req->wIndex >= cfx->bNumInterfaces) {
 80015fa:	7920      	ldrb	r0, [r4, #4]
 80015fc:	888d      	ldrh	r5, [r1, #4]
 80015fe:	4285      	cmp	r5, r0
 8001600:	d20d      	bcs.n	800161e <usb_standard_get_interface+0x36>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 8001602:	2001      	movs	r0, #1
 8001604:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8001606:	888b      	ldrh	r3, [r1, #4]
 8001608:	f8d4 1009 	ldr.w	r1, [r4, #9]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	585b      	ldr	r3, [r3, r1]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001610:	b103      	cbz	r3, 8001614 <usb_standard_get_interface+0x2c>
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 8001616:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001618:	7013      	strb	r3, [r2, #0]
}
 800161a:	bc30      	pop	{r4, r5}
 800161c:	4770      	bx	lr
		return USBD_REQ_NOTSUPP;
 800161e:	2000      	movs	r0, #0
}
 8001620:	bc30      	pop	{r4, r5}
 8001622:	4770      	bx	lr

08001624 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8001624:	8819      	ldrh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8001626:	2001      	movs	r0, #1
	if (*len > 2) {
 8001628:	2902      	cmp	r1, #2
		*len = 2;
 800162a:	bf84      	itt	hi
 800162c:	2102      	movhi	r1, #2
 800162e:	8019      	strhhi	r1, [r3, #0]
	(*buf)[0] = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	6811      	ldr	r1, [r2, #0]
 8001634:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	7053      	strb	r3, [r2, #1]
}
 800163a:	4770      	bx	lr

0800163c <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 800163c:	b538      	push	{r3, r4, r5, lr}
	(void)req;

	if (*len > 2) {
 800163e:	881d      	ldrh	r5, [r3, #0]
{
 8001640:	4614      	mov	r4, r2
	if (*len > 2) {
 8001642:	2d02      	cmp	r5, #2
		*len = 2;
 8001644:	bf84      	itt	hi
 8001646:	2202      	movhi	r2, #2
 8001648:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800164a:	8889      	ldrh	r1, [r1, #4]
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	f7ff fdcd 	bl	80011ec <usbd_ep_stall_get>
 8001652:	1c01      	adds	r1, r0, #0
 8001654:	bf18      	it	ne
 8001656:	2101      	movne	r1, #1
	(*buf)[1] = 0;
 8001658:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800165a:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 800165c:	2001      	movs	r0, #1
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800165e:	7019      	strb	r1, [r3, #0]
	(*buf)[1] = 0;
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	705a      	strb	r2, [r3, #1]
}
 8001664:	bd38      	pop	{r3, r4, r5, pc}
 8001666:	bf00      	nop

08001668 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8001668:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 800166a:	8889      	ldrh	r1, [r1, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	b2c9      	uxtb	r1, r1
 8001670:	f7ff fdb8 	bl	80011e4 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001674:	2001      	movs	r0, #1
 8001676:	bd08      	pop	{r3, pc}

08001678 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8001678:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 800167a:	8889      	ldrh	r1, [r1, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	b2c9      	uxtb	r1, r1
 8001680:	f7ff fdb0 	bl	80011e4 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001684:	2001      	movs	r0, #1
 8001686:	bd08      	pop	{r3, pc}

08001688 <usb_standard_set_address>:
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001688:	780b      	ldrb	r3, [r1, #0]
 800168a:	b98b      	cbnz	r3, 80016b0 <usb_standard_set_address+0x28>
{
 800168c:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 800168e:	884c      	ldrh	r4, [r1, #2]
 8001690:	2c7f      	cmp	r4, #127	; 0x7f
 8001692:	d80b      	bhi.n	80016ac <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 8001694:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 8001698:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 800169a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800169e:	b14a      	cbz	r2, 80016b4 <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80016a0:	8849      	ldrh	r1, [r1, #2]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	b2c9      	uxtb	r1, r1
 80016a6:	4798      	blx	r3
	return USBD_REQ_HANDLED;
 80016a8:	2001      	movs	r0, #1
}
 80016aa:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 80016ac:	4618      	mov	r0, r3
}
 80016ae:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 80016b0:	2000      	movs	r0, #0
}
 80016b2:	4770      	bx	lr
	return USBD_REQ_HANDLED;
 80016b4:	2001      	movs	r0, #1
}
 80016b6:	bd10      	pop	{r4, pc}

080016b8 <usb_standard_set_interface>:
{
 80016b8:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 80016ba:	7dc2      	ldrb	r2, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80016bc:	6844      	ldr	r4, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80016be:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80016c2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80016c6:	3a0d      	subs	r2, #13
	const struct usb_config_descriptor *cfx =
 80016c8:	4422      	add	r2, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 80016ca:	7915      	ldrb	r5, [r2, #4]
 80016cc:	888c      	ldrh	r4, [r1, #4]
 80016ce:	42a5      	cmp	r5, r4
 80016d0:	d915      	bls.n	80016fe <usb_standard_set_interface+0x46>
	iface = &cfx->interface[req->wIndex];
 80016d2:	f8d2 2009 	ldr.w	r2, [r2, #9]
 80016d6:	0124      	lsls	r4, r4, #4
 80016d8:	1915      	adds	r5, r2, r4
	if (req->wValue >= iface->num_altsetting) {
 80016da:	792e      	ldrb	r6, [r5, #4]
 80016dc:	884d      	ldrh	r5, [r1, #2]
 80016de:	42ae      	cmp	r6, r5
 80016e0:	d90d      	bls.n	80016fe <usb_standard_set_interface+0x46>
	if (iface->cur_altsetting) {
 80016e2:	5912      	ldr	r2, [r2, r4]
 80016e4:	b16a      	cbz	r2, 8001702 <usb_standard_set_interface+0x4a>
		*iface->cur_altsetting = req->wValue;
 80016e6:	7015      	strb	r5, [r2, #0]
 80016e8:	461c      	mov	r4, r3
	if (usbd_dev->user_callback_set_altsetting) {
 80016ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80016ee:	b113      	cbz	r3, 80016f6 <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 80016f0:	884a      	ldrh	r2, [r1, #2]
 80016f2:	8889      	ldrh	r1, [r1, #4]
 80016f4:	4798      	blx	r3
	*len = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	2001      	movs	r0, #1
 80016fa:	8023      	strh	r3, [r4, #0]
}
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 80016fe:	2000      	movs	r0, #0
}
 8001700:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 8001702:	2d00      	cmp	r5, #0
 8001704:	d0f0      	beq.n	80016e8 <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 8001706:	4610      	mov	r0, r2
}
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	bf00      	nop

0800170c <usb_standard_get_descriptor>:
{
 800170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 8001710:	884d      	ldrh	r5, [r1, #2]
{
 8001712:	b089      	sub	sp, #36	; 0x24
	switch (usb_descriptor_type(req->wValue)) {
 8001714:	0a2c      	lsrs	r4, r5, #8
 8001716:	2c02      	cmp	r4, #2
{
 8001718:	9306      	str	r3, [sp, #24]
	switch (usb_descriptor_type(req->wValue)) {
 800171a:	d048      	beq.n	80017ae <usb_standard_get_descriptor+0xa2>
 800171c:	2c03      	cmp	r4, #3
 800171e:	d012      	beq.n	8001746 <usb_standard_get_descriptor+0x3a>
 8001720:	2c01      	cmp	r4, #1
 8001722:	d003      	beq.n	800172c <usb_standard_get_descriptor+0x20>
				return USBD_REQ_NOTSUPP;
 8001724:	2000      	movs	r0, #0
}
 8001726:	b009      	add	sp, #36	; 0x24
 8001728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = (uint8_t *) usbd_dev->desc;
 800172c:	6801      	ldr	r1, [r0, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 800172e:	881d      	ldrh	r5, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8001730:	6011      	str	r1, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001732:	461e      	mov	r6, r3
 8001734:	780b      	ldrb	r3, [r1, #0]
		return USBD_REQ_HANDLED;
 8001736:	4620      	mov	r0, r4
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001738:	42ab      	cmp	r3, r5
 800173a:	bf28      	it	cs
 800173c:	462b      	movcs	r3, r5
 800173e:	8033      	strh	r3, [r6, #0]
}
 8001740:	b009      	add	sp, #36	; 0x24
 8001742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (descr_idx == 0) {
 8001746:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 800174a:	6906      	ldr	r6, [r0, #16]
		if (descr_idx == 0) {
 800174c:	f000 8115 	beq.w	800197a <usb_standard_get_descriptor+0x26e>
			if (!usbd_dev->strings) {
 8001750:	6884      	ldr	r4, [r0, #8]
 8001752:	2c00      	cmp	r4, #0
 8001754:	d0e6      	beq.n	8001724 <usb_standard_get_descriptor+0x18>
			if (array_idx >= usbd_dev->num_strings) {
 8001756:	68c3      	ldr	r3, [r0, #12]
			array_idx = descr_idx - 1;
 8001758:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 800175a:	42ab      	cmp	r3, r5
 800175c:	dde2      	ble.n	8001724 <usb_standard_get_descriptor+0x18>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 800175e:	f240 4309 	movw	r3, #1033	; 0x409
 8001762:	8889      	ldrh	r1, [r1, #4]
 8001764:	4299      	cmp	r1, r3
 8001766:	d1dd      	bne.n	8001724 <usb_standard_get_descriptor+0x18>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001768:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	4620      	mov	r0, r4
 8001770:	f002 fb0a 	bl	8003d88 <strlen>
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
			*len = MIN(*len, sd->bLength);
 800177a:	9a06      	ldr	r2, [sp, #24]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 800177c:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 800177e:	8811      	ldrh	r1, [r2, #0]
 8001780:	4615      	mov	r5, r2
 8001782:	428b      	cmp	r3, r1
 8001784:	bf28      	it	cs
 8001786:	460b      	movcs	r3, r1
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001788:	2b03      	cmp	r3, #3
			*len = MIN(*len, sd->bLength);
 800178a:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800178c:	9a00      	ldr	r2, [sp, #0]
 800178e:	f240 80ff 	bls.w	8001990 <usb_standard_get_descriptor+0x284>
 8001792:	2100      	movs	r1, #0
 8001794:	1e60      	subs	r0, r4, #1
					usbd_dev->strings[array_idx][i];
 8001796:	f810 4f01 	ldrb.w	r4, [r0, #1]!
				sd->wData[i] =
 800179a:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 800179e:	805c      	strh	r4, [r3, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80017a0:	882b      	ldrh	r3, [r5, #0]
 80017a2:	3101      	adds	r1, #1
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	428b      	cmp	r3, r1
 80017aa:	dcf4      	bgt.n	8001796 <usb_standard_get_descriptor+0x8a>
 80017ac:	e0f0      	b.n	8001990 <usb_standard_get_descriptor+0x284>
		*buf = usbd_dev->ctrl_buf;
 80017ae:	6901      	ldr	r1, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80017b0:	b2ed      	uxtb	r5, r5
 80017b2:	6846      	ldr	r6, [r0, #4]
 80017b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		*buf = usbd_dev->ctrl_buf;
 80017b8:	6011      	str	r1, [r2, #0]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80017ba:	9a06      	ldr	r2, [sp, #24]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80017bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80017c0:	5d73      	ldrb	r3, [r6, r5]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80017c2:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80017c4:	1972      	adds	r2, r6, r5
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80017c6:	42a3      	cmp	r3, r4
 80017c8:	bf28      	it	cs
 80017ca:	4623      	movcs	r3, r4
 80017cc:	4690      	mov	r8, r2
 80017ce:	469b      	mov	fp, r3
		*buf = usbd_dev->ctrl_buf;
 80017d0:	460f      	mov	r7, r1
 80017d2:	9107      	str	r1, [sp, #28]
 80017d4:	4608      	mov	r0, r1
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80017d6:	9203      	str	r2, [sp, #12]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80017d8:	4611      	mov	r1, r2
 80017da:	461a      	mov	r2, r3
 80017dc:	f002 fabc 	bl	8003d58 <memcpy>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80017e0:	f898 3004 	ldrb.w	r3, [r8, #4]
	len -= count;
 80017e4:	eba4 040b 	sub.w	r4, r4, fp
 80017e8:	b2a4      	uxth	r4, r4
	totallen += cfg->bLength;
 80017ea:	f816 a005 	ldrb.w	sl, [r6, r5]
	buf += count;
 80017ee:	eb07 090b 	add.w	r9, r7, fp
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b7 	beq.w	8001966 <usb_standard_get_descriptor+0x25a>
 80017f8:	2300      	movs	r3, #0
 80017fa:	9305      	str	r3, [sp, #20]
 80017fc:	f8d8 2009 	ldr.w	r2, [r8, #9]
 8001800:	9b05      	ldr	r3, [sp, #20]
 8001802:	011f      	lsls	r7, r3, #4
		if (cfg->interface[i].iface_assoc) {
 8001804:	19d3      	adds	r3, r2, r7
 8001806:	689d      	ldr	r5, [r3, #8]
 8001808:	9704      	str	r7, [sp, #16]
 800180a:	b1bd      	cbz	r5, 800183c <usb_standard_get_descriptor+0x130>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 800180c:	782e      	ldrb	r6, [r5, #0]
 800180e:	4629      	mov	r1, r5
 8001810:	42a6      	cmp	r6, r4
 8001812:	bf28      	it	cs
 8001814:	4626      	movcs	r6, r4
 8001816:	4648      	mov	r0, r9
 8001818:	4632      	mov	r2, r6
 800181a:	f002 fa9d 	bl	8003d58 <memcpy>
 800181e:	9a03      	ldr	r2, [sp, #12]
			totallen += assoc->bLength;
 8001820:	782b      	ldrb	r3, [r5, #0]
 8001822:	f8d2 2009 	ldr.w	r2, [r2, #9]
 8001826:	449a      	add	sl, r3
			len -= count;
 8001828:	1ba4      	subs	r4, r4, r6
			total += count;
 800182a:	eb06 010b 	add.w	r1, r6, fp
			len -= count;
 800182e:	b2a4      	uxth	r4, r4
			total += count;
 8001830:	fa1f fb81 	uxth.w	fp, r1
			buf += count;
 8001834:	44b1      	add	r9, r6
			totallen += assoc->bLength;
 8001836:	fa1f fa8a 	uxth.w	sl, sl
 800183a:	19d3      	adds	r3, r2, r7
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800183c:	7919      	ldrb	r1, [r3, #4]
 800183e:	2900      	cmp	r1, #0
 8001840:	f000 8088 	beq.w	8001954 <usb_standard_get_descriptor+0x248>
 8001844:	2200      	movs	r2, #0
 8001846:	9202      	str	r2, [sp, #8]
			const struct usb_interface_descriptor *iface =
 8001848:	68df      	ldr	r7, [r3, #12]
 800184a:	9b02      	ldr	r3, [sp, #8]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800184c:	4648      	mov	r0, r9
			const struct usb_interface_descriptor *iface =
 800184e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8001852:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001856:	5dbd      	ldrb	r5, [r7, r6]
			const struct usb_interface_descriptor *iface =
 8001858:	19ba      	adds	r2, r7, r6
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800185a:	42a5      	cmp	r5, r4
 800185c:	bf28      	it	cs
 800185e:	4625      	movcs	r5, r4
 8001860:	4690      	mov	r8, r2
 8001862:	4611      	mov	r1, r2
			const struct usb_interface_descriptor *iface =
 8001864:	9200      	str	r2, [sp, #0]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001866:	462a      	mov	r2, r5
 8001868:	f002 fa76 	bl	8003d58 <memcpy>
			totallen += iface->bLength;
 800186c:	5dbb      	ldrb	r3, [r7, r6]
			if (iface->extra) {
 800186e:	f8d8 100d 	ldr.w	r1, [r8, #13]
			len -= count;
 8001872:	1b64      	subs	r4, r4, r5
			total += count;
 8001874:	44ab      	add	fp, r5
			totallen += iface->bLength;
 8001876:	449a      	add	sl, r3
			len -= count;
 8001878:	b2a4      	uxth	r4, r4
			total += count;
 800187a:	fa1f fb8b 	uxth.w	fp, fp
			buf += count;
 800187e:	44a9      	add	r9, r5
			totallen += iface->bLength;
 8001880:	fa1f fa8a 	uxth.w	sl, sl
			if (iface->extra) {
 8001884:	b1a1      	cbz	r1, 80018b0 <usb_standard_get_descriptor+0x1a4>
				       count = MIN(len, iface->extralen));
 8001886:	f8d8 5011 	ldr.w	r5, [r8, #17]
				memcpy(buf, iface->extra,
 800188a:	4648      	mov	r0, r9
				       count = MIN(len, iface->extralen));
 800188c:	42a5      	cmp	r5, r4
 800188e:	bfa8      	it	ge
 8001890:	4625      	movge	r5, r4
				memcpy(buf, iface->extra,
 8001892:	b2ae      	uxth	r6, r5
 8001894:	4632      	mov	r2, r6
 8001896:	f002 fa5f 	bl	8003d58 <memcpy>
				totallen += iface->extralen;
 800189a:	f8d8 3011 	ldr.w	r3, [r8, #17]
				len -= count;
 800189e:	1ba4      	subs	r4, r4, r6
				total += count;
 80018a0:	44b3      	add	fp, r6
				totallen += iface->extralen;
 80018a2:	449a      	add	sl, r3
				len -= count;
 80018a4:	b2a4      	uxth	r4, r4
				total += count;
 80018a6:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 80018aa:	44b1      	add	r9, r6
				totallen += iface->extralen;
 80018ac:	fa1f fa8a 	uxth.w	sl, sl
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d040      	beq.n	800193a <usb_standard_get_descriptor+0x22e>
 80018b8:	2500      	movs	r5, #0
 80018ba:	4653      	mov	r3, sl
 80018bc:	9301      	str	r3, [sp, #4]
				    &iface->endpoint[k];
 80018be:	9b00      	ldr	r3, [sp, #0]
				const struct usb_endpoint_descriptor *ep =
 80018c0:	ebc5 1805 	rsb	r8, r5, r5, lsl #4
				    &iface->endpoint[k];
 80018c4:	f8d3 a009 	ldr.w	sl, [r3, #9]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80018c8:	4648      	mov	r0, r9
 80018ca:	f81a 6008 	ldrb.w	r6, [sl, r8]
				const struct usb_endpoint_descriptor *ep =
 80018ce:	eb0a 0708 	add.w	r7, sl, r8
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	bf28      	it	cs
 80018d6:	4626      	movcs	r6, r4
 80018d8:	4639      	mov	r1, r7
 80018da:	4632      	mov	r2, r6
 80018dc:	f002 fa3c 	bl	8003d58 <memcpy>
				totallen += ep->bLength;
 80018e0:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80018e4:	9b01      	ldr	r3, [sp, #4]
				if (ep->extra) {
 80018e6:	f8d7 1007 	ldr.w	r1, [r7, #7]
				len -= count;
 80018ea:	1ba4      	subs	r4, r4, r6
				total += count;
 80018ec:	44b3      	add	fp, r6
				totallen += ep->bLength;
 80018ee:	4413      	add	r3, r2
				len -= count;
 80018f0:	b2a4      	uxth	r4, r4
				total += count;
 80018f2:	fa1f fb8b 	uxth.w	fp, fp
				buf += count;
 80018f6:	44b1      	add	r9, r6
				totallen += ep->bLength;
 80018f8:	b29b      	uxth	r3, r3
				if (ep->extra) {
 80018fa:	b1b9      	cbz	r1, 800192c <usb_standard_get_descriptor+0x220>
 80018fc:	9301      	str	r3, [sp, #4]
					       count = MIN(len, ep->extralen));
 80018fe:	f8d7 600b 	ldr.w	r6, [r7, #11]
					memcpy(buf, ep->extra,
 8001902:	4648      	mov	r0, r9
					       count = MIN(len, ep->extralen));
 8001904:	42a6      	cmp	r6, r4
 8001906:	bfa8      	it	ge
 8001908:	4626      	movge	r6, r4
					memcpy(buf, ep->extra,
 800190a:	fa1f f886 	uxth.w	r8, r6
					       count = MIN(len, ep->extralen));
 800190e:	4646      	mov	r6, r8
					memcpy(buf, ep->extra,
 8001910:	4642      	mov	r2, r8
 8001912:	f002 fa21 	bl	8003d58 <memcpy>
					totallen += ep->extralen;
 8001916:	f8d7 200b 	ldr.w	r2, [r7, #11]
 800191a:	9b01      	ldr	r3, [sp, #4]
					len -= count;
 800191c:	1ba4      	subs	r4, r4, r6
					total += count;
 800191e:	44c3      	add	fp, r8
					totallen += ep->extralen;
 8001920:	4413      	add	r3, r2
					len -= count;
 8001922:	b2a4      	uxth	r4, r4
					total += count;
 8001924:	fa1f fb8b 	uxth.w	fp, fp
					buf += count;
 8001928:	44c1      	add	r9, r8
					totallen += ep->extralen;
 800192a:	b29b      	uxth	r3, r3
			for (k = 0; k < iface->bNumEndpoints; k++) {
 800192c:	9a00      	ldr	r2, [sp, #0]
 800192e:	3501      	adds	r5, #1
 8001930:	7911      	ldrb	r1, [r2, #4]
 8001932:	b2aa      	uxth	r2, r5
 8001934:	4291      	cmp	r1, r2
 8001936:	d8c1      	bhi.n	80018bc <usb_standard_get_descriptor+0x1b0>
 8001938:	469a      	mov	sl, r3
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	9902      	ldr	r1, [sp, #8]
 800193e:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8001942:	9b04      	ldr	r3, [sp, #16]
 8001944:	3101      	adds	r1, #1
 8001946:	18d3      	adds	r3, r2, r3
 8001948:	791d      	ldrb	r5, [r3, #4]
 800194a:	b288      	uxth	r0, r1
 800194c:	4285      	cmp	r5, r0
 800194e:	9102      	str	r1, [sp, #8]
 8001950:	f63f af7a 	bhi.w	8001848 <usb_standard_get_descriptor+0x13c>
 8001954:	9b05      	ldr	r3, [sp, #20]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001956:	9903      	ldr	r1, [sp, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	7908      	ldrb	r0, [r1, #4]
 800195c:	b299      	uxth	r1, r3
 800195e:	4288      	cmp	r0, r1
 8001960:	9305      	str	r3, [sp, #20]
 8001962:	f63f af4d 	bhi.w	8001800 <usb_standard_get_descriptor+0xf4>
		return USBD_REQ_HANDLED;
 8001966:	2001      	movs	r0, #1
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8001968:	9b07      	ldr	r3, [sp, #28]
 800196a:	f8a3 a002 	strh.w	sl, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800196e:	9b06      	ldr	r3, [sp, #24]
 8001970:	f8a3 b000 	strh.w	fp, [r3]
}
 8001974:	b009      	add	sp, #36	; 0x24
 8001976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 800197a:	2109      	movs	r1, #9
 800197c:	2304      	movs	r3, #4
 800197e:	70b1      	strb	r1, [r6, #2]
			*len = MIN(*len, sd->bLength);
 8001980:	9906      	ldr	r1, [sp, #24]
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001982:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 8001984:	7033      	strb	r3, [r6, #0]
			*len = MIN(*len, sd->bLength);
 8001986:	880b      	ldrh	r3, [r1, #0]
 8001988:	2b04      	cmp	r3, #4
 800198a:	bf28      	it	cs
 800198c:	2304      	movcs	r3, #4
 800198e:	800b      	strh	r3, [r1, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8001990:	2303      	movs	r3, #3
		return USBD_REQ_HANDLED;
 8001992:	2001      	movs	r0, #1
		sd->bDescriptorType = USB_DT_STRING;
 8001994:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 8001996:	6016      	str	r6, [r2, #0]
}
 8001998:	b009      	add	sp, #36	; 0x24
 800199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800199e:	bf00      	nop

080019a0 <usb_standard_interface_get_status>:
 80019a0:	8819      	ldrh	r1, [r3, #0]
 80019a2:	2001      	movs	r0, #1
 80019a4:	2902      	cmp	r1, #2
 80019a6:	bf84      	itt	hi
 80019a8:	2102      	movhi	r1, #2
 80019aa:	8019      	strhhi	r1, [r3, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	6811      	ldr	r1, [r2, #0]
 80019b0:	700b      	strb	r3, [r1, #0]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	7053      	strb	r3, [r2, #1]
 80019b6:	4770      	bx	lr

080019b8 <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80019b8:	2200      	movs	r2, #0
{
 80019ba:	b410      	push	{r4}
 80019bc:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 80019c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80019c4:	b163      	cbz	r3, 80019e0 <usbd_register_set_config_callback+0x28>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 80019c6:	428b      	cmp	r3, r1
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80019c8:	f102 0201 	add.w	r2, r2, #1
			if (usbd_dev->user_callback_set_config[i] == callback) {
 80019cc:	d005      	beq.n	80019da <usbd_register_set_config_callback+0x22>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80019ce:	2a04      	cmp	r2, #4
 80019d0:	d1f6      	bne.n	80019c0 <usbd_register_set_config_callback+0x8>
	return -1;
 80019d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80019d6:	bc10      	pop	{r4}
 80019d8:	4770      	bx	lr
				return 0;
 80019da:	2000      	movs	r0, #0
}
 80019dc:	bc10      	pop	{r4}
 80019de:	4770      	bx	lr
		usbd_dev->user_callback_set_config[i] = callback;
 80019e0:	3232      	adds	r2, #50	; 0x32
 80019e2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		return 0;
 80019e6:	4618      	mov	r0, r3
 80019e8:	e7f8      	b.n	80019dc <usbd_register_set_config_callback+0x24>
 80019ea:	bf00      	nop

080019ec <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 80019ec:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80019ee:	784c      	ldrb	r4, [r1, #1]
 80019f0:	2c09      	cmp	r4, #9
 80019f2:	d81a      	bhi.n	8001a2a <_usbd_standard_request_device+0x3e>
 80019f4:	e8df f004 	tbb	[pc, r4]
 80019f8:	19191911 	.word	0x19191911
 80019fc:	19090519 	.word	0x19090519
 8001a00:	0d15      	.short	0x0d15
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 8001a02:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <_usbd_standard_request_device+0x44>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001a04:	46a4      	mov	ip, r4
}
 8001a06:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a08:	4760      	bx	ip
		command = usb_standard_get_descriptor;
 8001a0a:	4c0a      	ldr	r4, [pc, #40]	; (8001a34 <_usbd_standard_request_device+0x48>)
	return command(usbd_dev, req, buf, len);
 8001a0c:	46a4      	mov	ip, r4
}
 8001a0e:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a10:	4760      	bx	ip
		command = usb_standard_set_configuration;
 8001a12:	4c09      	ldr	r4, [pc, #36]	; (8001a38 <_usbd_standard_request_device+0x4c>)
	return command(usbd_dev, req, buf, len);
 8001a14:	46a4      	mov	ip, r4
}
 8001a16:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a18:	4760      	bx	ip
		command = usb_standard_device_get_status;
 8001a1a:	4c08      	ldr	r4, [pc, #32]	; (8001a3c <_usbd_standard_request_device+0x50>)
	return command(usbd_dev, req, buf, len);
 8001a1c:	46a4      	mov	ip, r4
}
 8001a1e:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a20:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8001a22:	4c07      	ldr	r4, [pc, #28]	; (8001a40 <_usbd_standard_request_device+0x54>)
	return command(usbd_dev, req, buf, len);
 8001a24:	46a4      	mov	ip, r4
}
 8001a26:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a28:	4760      	bx	ip
}
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bc10      	pop	{r4}
 8001a2e:	4770      	bx	lr
 8001a30:	08001689 	.word	0x08001689
 8001a34:	0800170d 	.word	0x0800170d
 8001a38:	08001519 	.word	0x08001519
 8001a3c:	08001625 	.word	0x08001625
 8001a40:	080015bd 	.word	0x080015bd

08001a44 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8001a44:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001a46:	784c      	ldrb	r4, [r1, #1]
 8001a48:	2c01      	cmp	r4, #1
 8001a4a:	d008      	beq.n	8001a5e <_usbd_standard_request_endpoint+0x1a>
 8001a4c:	d30c      	bcc.n	8001a68 <_usbd_standard_request_endpoint+0x24>
 8001a4e:	2c03      	cmp	r4, #3
 8001a50:	d107      	bne.n	8001a62 <_usbd_standard_request_endpoint+0x1e>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001a52:	884c      	ldrh	r4, [r1, #2]
 8001a54:	b92c      	cbnz	r4, 8001a62 <_usbd_standard_request_endpoint+0x1e>
			command = usb_standard_endpoint_stall;
 8001a56:	4c08      	ldr	r4, [pc, #32]	; (8001a78 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001a58:	46a4      	mov	ip, r4
}
 8001a5a:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a5c:	4760      	bx	ip
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001a5e:	884c      	ldrh	r4, [r1, #2]
 8001a60:	b134      	cbz	r4, 8001a70 <_usbd_standard_request_endpoint+0x2c>
}
 8001a62:	2000      	movs	r0, #0
 8001a64:	bc10      	pop	{r4}
 8001a66:	4770      	bx	lr
		command = usb_standard_endpoint_get_status;
 8001a68:	4c04      	ldr	r4, [pc, #16]	; (8001a7c <_usbd_standard_request_endpoint+0x38>)
	return command(usbd_dev, req, buf, len);
 8001a6a:	46a4      	mov	ip, r4
}
 8001a6c:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a6e:	4760      	bx	ip
			command = usb_standard_endpoint_unstall;
 8001a70:	4c03      	ldr	r4, [pc, #12]	; (8001a80 <_usbd_standard_request_endpoint+0x3c>)
	return command(usbd_dev, req, buf, len);
 8001a72:	46a4      	mov	ip, r4
}
 8001a74:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001a76:	4760      	bx	ip
 8001a78:	08001669 	.word	0x08001669
 8001a7c:	0800163d 	.word	0x0800163d
 8001a80:	08001679 	.word	0x08001679

08001a84 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8001a84:	b4f0      	push	{r4, r5, r6, r7}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001a86:	780c      	ldrb	r4, [r1, #0]
 8001a88:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001a8c:	d113      	bne.n	8001ab6 <_usbd_standard_request+0x32>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001a8e:	f004 041f 	and.w	r4, r4, #31
 8001a92:	2c01      	cmp	r4, #1
 8001a94:	d005      	beq.n	8001aa2 <_usbd_standard_request+0x1e>
 8001a96:	d311      	bcc.n	8001abc <_usbd_standard_request+0x38>
 8001a98:	2c02      	cmp	r4, #2
 8001a9a:	d10c      	bne.n	8001ab6 <_usbd_standard_request+0x32>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001a9c:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001a9e:	f7ff bfd1 	b.w	8001a44 <_usbd_standard_request_endpoint>
 8001aa2:	469c      	mov	ip, r3
	switch (req->bRequest) {
 8001aa4:	784b      	ldrb	r3, [r1, #1]
 8001aa6:	460d      	mov	r5, r1
 8001aa8:	2b0a      	cmp	r3, #10
 8001aaa:	4606      	mov	r6, r0
 8001aac:	4617      	mov	r7, r2
 8001aae:	d012      	beq.n	8001ad6 <_usbd_standard_request+0x52>
 8001ab0:	2b0b      	cmp	r3, #11
 8001ab2:	d00e      	beq.n	8001ad2 <_usbd_standard_request+0x4e>
 8001ab4:	b12b      	cbz	r3, 8001ac2 <_usbd_standard_request+0x3e>
}
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	2000      	movs	r0, #0
 8001aba:	4770      	bx	lr
 8001abc:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001abe:	f7ff bf95 	b.w	80019ec <_usbd_standard_request_device>
		command = usb_standard_interface_get_status;
 8001ac2:	4c06      	ldr	r4, [pc, #24]	; (8001adc <_usbd_standard_request+0x58>)
	return command(usbd_dev, req, buf, len);
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	463a      	mov	r2, r7
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4630      	mov	r0, r6
 8001acc:	46a4      	mov	ip, r4
}
 8001ace:	bcf0      	pop	{r4, r5, r6, r7}
	return command(usbd_dev, req, buf, len);
 8001ad0:	4760      	bx	ip
		command = usb_standard_set_interface;
 8001ad2:	4c03      	ldr	r4, [pc, #12]	; (8001ae0 <_usbd_standard_request+0x5c>)
 8001ad4:	e7f6      	b.n	8001ac4 <_usbd_standard_request+0x40>
		command = usb_standard_get_interface;
 8001ad6:	4c03      	ldr	r4, [pc, #12]	; (8001ae4 <_usbd_standard_request+0x60>)
 8001ad8:	e7f4      	b.n	8001ac4 <_usbd_standard_request+0x40>
 8001ada:	bf00      	nop
 8001adc:	080019a1 	.word	0x080019a1
 8001ae0:	080016b9 	.word	0x080016b9
 8001ae4:	080015e9 	.word	0x080015e9

08001ae8 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <flash_set_ws+0x10>)
 8001aea:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8001aec:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8001af0:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 8001af2:	6010      	str	r0, [r2, #0]
}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <st_usbfs_set_address+0xc>)
 8001afe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001b02:	6019      	str	r1, [r3, #0]
}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40005c4c 	.word	0x40005c4c

08001b0c <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 8001b0c:	2a3e      	cmp	r2, #62	; 0x3e
{
 8001b0e:	b410      	push	{r4}
	if (size > 62) {
 8001b10:	d811      	bhi.n	8001b36 <st_usbfs_set_ep_rx_bufsize+0x2a>
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
	} else {
		/* round up and div by 2 */
		size = (size + 1) >> 1;
 8001b12:	3201      	adds	r2, #1
		realsize = size << 1;
 8001b14:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8001b18:	0050      	lsls	r0, r2, #1
 8001b1a:	b280      	uxth	r0, r0
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <st_usbfs_set_ep_rx_bufsize+0x3c>)
 8001b1e:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <st_usbfs_set_ep_rx_bufsize+0x40>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0292      	lsls	r2, r2, #10
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001b2a:	0049      	lsls	r1, r1, #1
 8001b2c:	440c      	add	r4, r1
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	6022      	str	r2, [r4, #0]
	return realsize;
}
 8001b32:	bc10      	pop	{r4}
 8001b34:	4770      	bx	lr
		size = ((size - 1) >> 5) & 0x1F;
 8001b36:	3a01      	subs	r2, #1
 8001b38:	f3c2 1244 	ubfx	r2, r2, #5, #5
		realsize = (size + 1) << 5;
 8001b3c:	1c50      	adds	r0, r2, #1
 8001b3e:	0140      	lsls	r0, r0, #5
 8001b40:	f042 0220 	orr.w	r2, r2, #32
 8001b44:	e7ea      	b.n	8001b1c <st_usbfs_set_ep_rx_bufsize+0x10>
 8001b46:	bf00      	nop
 8001b48:	40005c50 	.word	0x40005c50
 8001b4c:	4000600c 	.word	0x4000600c

08001b50 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 8001b52:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001b56:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001b5a:	00b4      	lsls	r4, r6, #2
 8001b5c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001b60:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001b64:	6825      	ldr	r5, [r4, #0]
{
 8001b66:	b083      	sub	sp, #12
	USB_SET_EP_ADDR(addr, addr);
 8001b68:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001b6c:	f10d 0c08 	add.w	ip, sp, #8
	USB_SET_EP_ADDR(addr, addr);
 8001b70:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001b74:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
	USB_SET_EP_ADDR(addr, addr);
 8001b78:	4335      	orrs	r5, r6
	const uint16_t typelookup[] = {
 8001b7a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001c64 <st_usbfs_ep_setup+0x114>
	USB_SET_EP_ADDR(addr, addr);
 8001b7e:	b2ad      	uxth	r5, r5
	const uint16_t typelookup[] = {
 8001b80:	e9cd c700 	strd	ip, r7, [sp]
	USB_SET_EP_ADDR(addr, addr);
 8001b84:	6025      	str	r5, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001b86:	6825      	ldr	r5, [r4, #0]
 8001b88:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001b8c:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8001b90:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8001b94:	4315      	orrs	r5, r2
 8001b96:	b249      	sxtb	r1, r1
 8001b98:	b2ad      	uxth	r5, r5

	if (dir || (addr == 0)) {
 8001b9a:	2900      	cmp	r1, #0
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001b9c:	6025      	str	r5, [r4, #0]
 8001b9e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8001ba2:	f8b0 c018 	ldrh.w	ip, [r0, #24]
{
 8001ba6:	9f08      	ldr	r7, [sp, #32]
	if (dir || (addr == 0)) {
 8001ba8:	db00      	blt.n	8001bac <st_usbfs_ep_setup+0x5c>
 8001baa:	bb5e      	cbnz	r6, 8001c04 <st_usbfs_ep_setup+0xb4>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <st_usbfs_ep_setup+0x110>)
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	4472      	add	r2, lr
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001bba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8001bbe:	f8c2 c000 	str.w	ip, [r2]
		if (callback) {
 8001bc2:	b127      	cbz	r7, 8001bce <st_usbfs_ep_setup+0x7e>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001bc4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001bc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001bcc:	6697      	str	r7, [r2, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 8001bce:	f648 75cf 	movw	r5, #36815	; 0x8fcf
 8001bd2:	6822      	ldr	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
		dev->pm_top += max_size;
 8001bd4:	449c      	add	ip, r3
		USB_CLR_EP_TX_DTOG(addr);
 8001bd6:	402a      	ands	r2, r5
 8001bd8:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001bda:	6825      	ldr	r5, [r4, #0]
		dev->pm_top += max_size;
 8001bdc:	fa1f fc8c 	uxth.w	ip, ip
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001be0:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001be4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001be8:	b2ad      	uxth	r5, r5
 8001bea:	f085 0520 	eor.w	r5, r5, #32
 8001bee:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001bf2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	}

	if (!dir) {
 8001bf6:	2900      	cmp	r1, #0
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001bf8:	6025      	str	r5, [r4, #0]
		dev->pm_top += max_size;
 8001bfa:	f8a0 c018 	strh.w	ip, [r0, #24]
	if (!dir) {
 8001bfe:	da01      	bge.n	8001c04 <st_usbfs_ep_setup+0xb4>
		}
		USB_CLR_EP_RX_DTOG(addr);
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
		dev->pm_top += realsize;
	}
}
 8001c00:	b003      	add	sp, #12
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	461a      	mov	r2, r3
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <st_usbfs_ep_setup+0x110>)
 8001c08:	4605      	mov	r5, r0
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001c10:	b289      	uxth	r1, r1
 8001c12:	448e      	add	lr, r1
 8001c14:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001c18:	4473      	add	r3, lr
 8001c1a:	f8c3 c000 	str.w	ip, [r3]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 8001c1e:	4631      	mov	r1, r6
 8001c20:	f7ff ff74 	bl	8001b0c <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001c24:	b127      	cbz	r7, 8001c30 <st_usbfs_ep_setup+0xe0>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001c26:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8001c2a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8001c2e:	66f7      	str	r7, [r6, #108]	; 0x6c
		USB_CLR_EP_RX_DTOG(addr);
 8001c30:	f64c 718f 	movw	r1, #53135	; 0xcf8f
 8001c34:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 8001c36:	8b2a      	ldrh	r2, [r5, #24]
		USB_CLR_EP_RX_DTOG(addr);
 8001c38:	400b      	ands	r3, r1
 8001c3a:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001c3c:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 8001c3e:	4410      	add	r0, r2
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8001c58:	8328      	strh	r0, [r5, #24]
}
 8001c5a:	b003      	add	sp, #12
 8001c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40005c50 	.word	0x40005c50
 8001c64:	04000200 	.word	0x04000200

08001c68 <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001c68:	f248 0180 	movw	r1, #32896	; 0x8080
{
 8001c6c:	b470      	push	{r4, r5, r6}
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001c70:	4e0c      	ldr	r6, [pc, #48]	; (8001ca4 <st_usbfs_endpoints_reset+0x3c>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001c72:	4d0d      	ldr	r5, [pc, #52]	; (8001ca8 <st_usbfs_endpoints_reset+0x40>)
	for (i = 1; i < 8; i++) {
 8001c74:	4c0d      	ldr	r4, [pc, #52]	; (8001cac <st_usbfs_endpoints_reset+0x44>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	4033      	ands	r3, r6
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	402b      	ands	r3, r5
 8001c84:	430b      	orrs	r3, r1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 1; i < 8; i++) {
 8001c8c:	42a2      	cmp	r2, r4
 8001c8e:	d1f2      	bne.n	8001c76 <st_usbfs_endpoints_reset+0xe>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
}
 8001c90:	bc70      	pop	{r4, r5, r6}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8001c92:	6803      	ldr	r3, [r0, #0]
 8001c94:	79db      	ldrb	r3, [r3, #7]
 8001c96:	3320      	adds	r3, #32
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	8303      	strh	r3, [r0, #24]
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40005c04 	.word	0x40005c04
 8001ca4:	ffff8fbf 	.word	0xffff8fbf
 8001ca8:	ffffbf8f 	.word	0xffffbf8f
 8001cac:	40005c20 	.word	0x40005c20

08001cb0 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8001cb0:	b410      	push	{r4}
	(void)dev;
	if (addr == 0) {
 8001cb2:	bb49      	cbnz	r1, 8001d08 <st_usbfs_ep_stall_set+0x58>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2420      	moveq	r4, #32
 8001cba:	2410      	movne	r4, #16
 8001cbc:	482b      	ldr	r0, [pc, #172]	; (8001d6c <st_usbfs_ep_stall_set+0xbc>)
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc8:	4063      	eors	r3, r4
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	6003      	str	r3, [r0, #0]
 8001cd8:	0089      	lsls	r1, r1, #2
 8001cda:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001cde:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 8001ce2:	b322      	cbz	r2, 8001d2e <st_usbfs_ep_stall_set+0x7e>
			USB_CLR_EP_RX_DTOG(addr);
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	680a      	ldr	r2, [r1, #0]
 8001cea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	4053      	eors	r3, r2
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 8001d04:	bc10      	pop	{r4}
 8001d06:	4770      	bx	lr
	if (addr & 0x80) {
 8001d08:	060b      	lsls	r3, r1, #24
 8001d0a:	d5e5      	bpl.n	8001cd8 <st_usbfs_ep_stall_set+0x28>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001d0c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001d10:	0089      	lsls	r1, r1, #2
 8001d12:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001d16:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001d1a:	680b      	ldr	r3, [r1, #0]
 8001d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b182      	cbz	r2, 8001d4a <st_usbfs_ep_stall_set+0x9a>
 8001d28:	f083 0310 	eor.w	r3, r3, #16
 8001d2c:	e7e3      	b.n	8001cf6 <st_usbfs_ep_stall_set+0x46>
			USB_CLR_EP_RX_DTOG(addr);
 8001d2e:	f64c 708f 	movw	r0, #53135	; 0xcf8f
 8001d32:	680a      	ldr	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001d34:	f44f 5340 	mov.w	r3, #12288	; 0x3000
			USB_CLR_EP_RX_DTOG(addr);
 8001d38:	4002      	ands	r2, r0
 8001d3a:	600a      	str	r2, [r1, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001d3c:	680a      	ldr	r2, [r1, #0]
 8001d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d46:	b292      	uxth	r2, r2
 8001d48:	e7d4      	b.n	8001cf4 <st_usbfs_ep_stall_set+0x44>
			USB_CLR_EP_TX_DTOG(addr);
 8001d4a:	f648 72cf 	movw	r2, #36815	; 0x8fcf
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001d4e:	f083 0320 	eor.w	r3, r3, #32
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	600b      	str	r3, [r1, #0]
			USB_CLR_EP_TX_DTOG(addr);
 8001d60:	680b      	ldr	r3, [r1, #0]
}
 8001d62:	bc10      	pop	{r4}
			USB_CLR_EP_TX_DTOG(addr);
 8001d64:	4013      	ands	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40005c00 	.word	0x40005c00

08001d70 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 8001d70:	060b      	lsls	r3, r1, #24
 8001d72:	d40d      	bmi.n	8001d90 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8001d74:	0089      	lsls	r1, r1, #2
 8001d76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001d7a:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001d7e:	6808      	ldr	r0, [r1, #0]
 8001d80:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
			return 1;
 8001d84:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8001d88:	fab0 f080 	clz	r0, r0
 8001d8c:	0940      	lsrs	r0, r0, #5
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 8001d8e:	4770      	bx	lr
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 8001d90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001d94:	0089      	lsls	r1, r1, #2
 8001d96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001d9a:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001d9e:	6808      	ldr	r0, [r1, #0]
 8001da0:	f000 0030 	and.w	r0, r0, #48	; 0x30
			return 1;
 8001da4:	f1a0 0010 	sub.w	r0, r0, #16
 8001da8:	fab0 f080 	clz	r0, r0
 8001dac:	0940      	lsrs	r0, r0, #5
 8001dae:	4770      	bx	lr

08001db0 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001db0:	060b      	lsls	r3, r1, #24
 8001db2:	d414      	bmi.n	8001dde <st_usbfs_ep_nak_set+0x2e>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <st_usbfs_ep_nak_set+0x40>)
 8001db6:	0088      	lsls	r0, r1, #2
 8001db8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001dbc:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8001dc0:	545a      	strb	r2, [r3, r1]

	if (nak) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001dc2:	6803      	ldr	r3, [r0, #0]
 8001dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dcc:	b29b      	uxth	r3, r3
	if (nak) {
 8001dce:	b93a      	cbnz	r2, 8001de0 <st_usbfs_ep_nak_set+0x30>
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001dd0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	6003      	str	r3, [r0, #0]
	}
}
 8001dde:	4770      	bx	lr
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001de0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6003      	str	r3, [r0, #0]
 8001dee:	4770      	bx	lr
 8001df0:	20000ba0 	.word	0x20000ba0

08001df4 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)dev;
	addr &= 0x7F;
 8001df8:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001dfc:	00b4      	lsls	r4, r6, #2
 8001dfe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001e02:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001e06:	6825      	ldr	r5, [r4, #0]
 8001e08:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8001e0c:	2d30      	cmp	r5, #48	; 0x30
 8001e0e:	d02e      	beq.n	8001e6e <st_usbfs_ep_write_packet+0x7a>
 8001e10:	461f      	mov	r7, r3
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8001e12:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001e78 <st_usbfs_ep_write_packet+0x84>
 8001e16:	4611      	mov	r1, r2
 8001e18:	f8d8 2000 	ldr.w	r2, [r8]
 8001e1c:	00f6      	lsls	r6, r6, #3
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	4432      	add	r2, r6
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e28:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8001e2c:	8810      	ldrh	r0, [r2, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	0040      	lsls	r0, r0, #1
 8001e32:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001e36:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001e3a:	f7ff f945 	bl	80010c8 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 8001e3e:	f8d8 1000 	ldr.w	r1, [r8]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <st_usbfs_ep_write_packet+0x80>)
 8001e44:	b289      	uxth	r1, r1
 8001e46:	440e      	add	r6, r1
 8001e48:	0076      	lsls	r6, r6, #1
 8001e4a:	4433      	add	r3, r6
 8001e4c:	601f      	str	r7, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001e4e:	6821      	ldr	r1, [r4, #0]

	return len;
 8001e50:	4638      	mov	r0, r7
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001e52:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001e56:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001e5a:	b289      	uxth	r1, r1
 8001e5c:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8001e60:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001e64:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001e68:	6021      	str	r1, [r4, #0]
}
 8001e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8001e6e:	2000      	movs	r0, #0
}
 8001e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e74:	40006004 	.word	0x40006004
 8001e78:	40005c50 	.word	0x40005c50

08001e7c <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8001e7e:	008c      	lsls	r4, r1, #2
 8001e80:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001e84:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001e88:	6826      	ldr	r6, [r4, #0]
 8001e8a:	f406 5640 	and.w	r6, r6, #12288	; 0x3000
 8001e8e:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 8001e92:	d043      	beq.n	8001f1c <st_usbfs_ep_read_packet+0xa0>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001e94:	4f23      	ldr	r7, [pc, #140]	; (8001f24 <st_usbfs_ep_read_packet+0xa8>)
 8001e96:	00ce      	lsls	r6, r1, #3
 8001e98:	683d      	ldr	r5, [r7, #0]
 8001e9a:	4823      	ldr	r0, [pc, #140]	; (8001f28 <st_usbfs_ep_read_packet+0xac>)
 8001e9c:	b2ad      	uxth	r5, r5
 8001e9e:	4435      	add	r5, r6
 8001ea0:	006d      	lsls	r5, r5, #1
 8001ea2:	4428      	add	r0, r5
 8001ea4:	6800      	ldr	r0, [r0, #0]
 8001ea6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	db2c      	blt.n	8001f08 <st_usbfs_ep_read_packet+0x8c>
 8001eae:	461d      	mov	r5, r3
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <st_usbfs_ep_read_packet+0xa8>)
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	4416      	add	r6, r2
 8001ebe:	0076      	lsls	r6, r6, #1
 8001ec0:	4433      	add	r3, r6
 8001ec2:	460f      	mov	r7, r1
 8001ec4:	8819      	ldrh	r1, [r3, #0]
 8001ec6:	462a      	mov	r2, r5
 8001ec8:	0049      	lsls	r1, r1, #1
 8001eca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001ece:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001ed2:	f7ff f90b 	bl	80010ec <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8001ed6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001eda:	6821      	ldr	r1, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <st_usbfs_ep_read_packet+0xb0>)
	USB_CLR_EP_RX_CTR(addr);
 8001ede:	400b      	ands	r3, r1
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	6023      	str	r3, [r4, #0]
	if (!st_usbfs_force_nak[addr]) {
 8001ee6:	5dd3      	ldrb	r3, [r2, r7]
 8001ee8:	b963      	cbnz	r3, 8001f04 <st_usbfs_ep_read_packet+0x88>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f02:	6023      	str	r3, [r4, #0]
	}

	return len;
}
 8001f04:	4628      	mov	r0, r5
 8001f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <st_usbfs_ep_read_packet+0xac>)
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4433      	add	r3, r6
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4418      	add	r0, r3
 8001f14:	6805      	ldr	r5, [r0, #0]
 8001f16:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001f1a:	e7c9      	b.n	8001eb0 <st_usbfs_ep_read_packet+0x34>
		return 0;
 8001f1c:	2500      	movs	r5, #0
}
 8001f1e:	4628      	mov	r0, r5
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40005c50 	.word	0x40005c50
 8001f28:	4000600c 	.word	0x4000600c
 8001f2c:	20000ba0 	.word	0x20000ba0

08001f30 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 8001f30:	4a36      	ldr	r2, [pc, #216]	; (800200c <st_usbfs_poll+0xdc>)
{
 8001f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8001f34:	6813      	ldr	r3, [r2, #0]
{
 8001f36:	4604      	mov	r4, r0

	if (istr & USB_ISTR_RESET) {
 8001f38:	0559      	lsls	r1, r3, #21
 8001f3a:	d449      	bmi.n	8001fd0 <st_usbfs_poll+0xa0>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	b29d      	uxth	r5, r3
 8001f40:	d422      	bmi.n	8001f88 <st_usbfs_poll+0x58>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 8001f42:	0528      	lsls	r0, r5, #20
 8001f44:	d506      	bpl.n	8001f54 <st_usbfs_poll+0x24>
		USB_CLR_ISTR_SUSP();
 8001f46:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <st_usbfs_poll+0xdc>)
		if (dev->user_callback_suspend) {
 8001f4c:	6a23      	ldr	r3, [r4, #32]
		USB_CLR_ISTR_SUSP();
 8001f4e:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_suspend) {
 8001f50:	b103      	cbz	r3, 8001f54 <st_usbfs_poll+0x24>
			dev->user_callback_suspend();
 8001f52:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 8001f54:	04e9      	lsls	r1, r5, #19
 8001f56:	d506      	bpl.n	8001f66 <st_usbfs_poll+0x36>
		USB_CLR_ISTR_WKUP();
 8001f58:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <st_usbfs_poll+0xdc>)
		if (dev->user_callback_resume) {
 8001f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		USB_CLR_ISTR_WKUP();
 8001f60:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_resume) {
 8001f62:	b103      	cbz	r3, 8001f66 <st_usbfs_poll+0x36>
			dev->user_callback_resume();
 8001f64:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 8001f66:	05aa      	lsls	r2, r5, #22
 8001f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f6a:	d506      	bpl.n	8001f7a <st_usbfs_poll+0x4a>
		USB_CLR_ISTR_SOF();
 8001f6c:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <st_usbfs_poll+0xdc>)
 8001f72:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_sof) {
 8001f74:	b333      	cbz	r3, 8001fc4 <st_usbfs_poll+0x94>
			dev->user_callback_sof();
 8001f76:	4798      	blx	r3
 8001f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}

	if (dev->user_callback_sof) {
 8001f7a:	b31b      	cbz	r3, 8001fc4 <st_usbfs_poll+0x94>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <st_usbfs_poll+0xe0>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f84:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001f88:	f003 070f 	and.w	r7, r3, #15
 8001f8c:	00be      	lsls	r6, r7, #2
 8001f8e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
		if (istr & USB_ISTR_DIR) {
 8001f92:	f013 0310 	ands.w	r3, r3, #16
 8001f96:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8001f9a:	d122      	bne.n	8001fe2 <st_usbfs_poll+0xb2>
			USB_CLR_EP_TX_CTR(ep);
 8001f9c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001fa0:	6831      	ldr	r1, [r6, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa8:	6032      	str	r2, [r6, #0]
		if (dev->user_callback_ctr[ep][type]) {
 8001faa:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	331a      	adds	r3, #26
 8001fb2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001fb6:	b30b      	cbz	r3, 8001ffc <st_usbfs_poll+0xcc>
			dev->user_callback_ctr[ep][type] (dev, ep);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4639      	mov	r1, r7
 8001fbc:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 8001fbe:	0528      	lsls	r0, r5, #20
 8001fc0:	d5c8      	bpl.n	8001f54 <st_usbfs_poll+0x24>
 8001fc2:	e7c0      	b.n	8001f46 <st_usbfs_poll+0x16>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <st_usbfs_poll+0xe0>)
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fcc:	6013      	str	r3, [r2, #0]
}
 8001fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dev->pm_top = USBD_PM_TOP;
 8001fd0:	2340      	movs	r3, #64	; 0x40
		USB_CLR_ISTR_RESET();
 8001fd2:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8001fd6:	6011      	str	r1, [r2, #0]
		dev->pm_top = USBD_PM_TOP;
 8001fd8:	8303      	strh	r3, [r0, #24]
}
 8001fda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_usbd_reset(dev);
 8001fde:	f7ff b8c9 	b.w	8001174 <_usbd_reset>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001fe2:	6833      	ldr	r3, [r6, #0]
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	d401      	bmi.n	8001fec <st_usbfs_poll+0xbc>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e7de      	b.n	8001faa <st_usbfs_poll+0x7a>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 8001fec:	2308      	movs	r3, #8
 8001fee:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8001ff2:	4639      	mov	r1, r7
 8001ff4:	f7ff ff42 	bl	8001e7c <st_usbfs_ep_read_packet>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e7d6      	b.n	8001faa <st_usbfs_poll+0x7a>
			USB_CLR_EP_RX_CTR(ep);
 8001ffc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002000:	6832      	ldr	r2, [r6, #0]
 8002002:	4013      	ands	r3, r2
 8002004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002008:	6033      	str	r3, [r6, #0]
 800200a:	e79a      	b.n	8001f42 <st_usbfs_poll+0x12>
 800200c:	40005c44 	.word	0x40005c44
 8002010:	40005c40 	.word	0x40005c40

08002014 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8002014:	2201      	movs	r2, #1
 8002016:	0943      	lsrs	r3, r0, #5
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800201e:	f000 001f 	and.w	r0, r0, #31
 8002022:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002026:	fa02 f000 	lsl.w	r0, r2, r0
 800202a:	6018      	str	r0, [r3, #0]
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8002030:	2901      	cmp	r1, #1
 8002032:	d016      	beq.n	8002062 <exti_set_trigger+0x32>
 8002034:	d30b      	bcc.n	800204e <exti_set_trigger+0x1e>
 8002036:	2902      	cmp	r1, #2
 8002038:	d108      	bne.n	800204c <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 800203a:	490f      	ldr	r1, [pc, #60]	; (8002078 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 800203c:	4a0f      	ldr	r2, [pc, #60]	; (800207c <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 800203e:	680b      	ldr	r3, [r1, #0]
 8002040:	4303      	orrs	r3, r0
 8002042:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	4318      	orrs	r0, r3
 8002048:	6010      	str	r0, [r2, #0]
		break;
	}
}
 800204a:	4770      	bx	lr
 800204c:	4770      	bx	lr
		EXTI_RTSR |= extis;
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <exti_set_trigger+0x48>)
		EXTI_FTSR &= ~extis;
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <exti_set_trigger+0x4c>)
		EXTI_RTSR |= extis;
 8002052:	680b      	ldr	r3, [r1, #0]
 8002054:	4303      	orrs	r3, r0
 8002056:	600b      	str	r3, [r1, #0]
		EXTI_FTSR &= ~extis;
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	ea23 0000 	bic.w	r0, r3, r0
 800205e:	6010      	str	r0, [r2, #0]
		break;
 8002060:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8002062:	4905      	ldr	r1, [pc, #20]	; (8002078 <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8002064:	4a05      	ldr	r2, [pc, #20]	; (800207c <exti_set_trigger+0x4c>)
		EXTI_RTSR &= ~extis;
 8002066:	680b      	ldr	r3, [r1, #0]
 8002068:	ea23 0300 	bic.w	r3, r3, r0
 800206c:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	4318      	orrs	r0, r3
 8002072:	6010      	str	r0, [r2, #0]
		break;
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40010408 	.word	0x40010408
 800207c:	4001040c 	.word	0x4001040c

08002080 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8002080:	4904      	ldr	r1, [pc, #16]	; (8002094 <exti_enable_request+0x14>)

	/* Enable events. */
	EXTI_EMR |= extis;
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <exti_enable_request+0x18>)
	EXTI_IMR |= extis;
 8002084:	680b      	ldr	r3, [r1, #0]
 8002086:	4303      	orrs	r3, r0
 8002088:	600b      	str	r3, [r1, #0]
	EXTI_EMR |= extis;
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	4318      	orrs	r0, r3
 800208e:	6010      	str	r0, [r2, #0]
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010400 	.word	0x40010400
 8002098:	40010404 	.word	0x40010404

0800209c <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 800209c:	4b01      	ldr	r3, [pc, #4]	; (80020a4 <exti_reset_request+0x8>)
 800209e:	6018      	str	r0, [r3, #0]
}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010414 	.word	0x40010414

080020a8 <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <rtc_enter_config_mode+0x14>)
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	069b      	lsls	r3, r3, #26
 80020ae:	d5fc      	bpl.n	80020aa <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40002804 	.word	0x40002804

080020c0 <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <rtc_exit_config_mode+0x14>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80020c2:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	f021 0110 	bic.w	r1, r1, #16
 80020ca:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	d5fc      	bpl.n	80020cc <rtc_exit_config_mode+0xc>
}
 80020d2:	4770      	bx	lr
 80020d4:	40002804 	.word	0x40002804

080020d8 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 80020d8:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <rtc_set_alarm_time+0x34>)
 80020dc:	6813      	ldr	r3, [r2, #0]
 80020de:	0699      	lsls	r1, r3, #26
 80020e0:	d5fc      	bpl.n	80020dc <rtc_set_alarm_time+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 80020e2:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 80020e4:	490a      	ldr	r1, [pc, #40]	; (8002110 <rtc_set_alarm_time+0x38>)
	RTC_ALRL = (alarm_time & 0x0000ffff);
 80020e6:	4c0b      	ldr	r4, [pc, #44]	; (8002114 <rtc_set_alarm_time+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 80020e8:	f043 0310 	orr.w	r3, r3, #16
	RTC_ALRL = (alarm_time & 0x0000ffff);
 80020ec:	b285      	uxth	r5, r0
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 80020ee:	0c00      	lsrs	r0, r0, #16
	RTC_CRL |= RTC_CRL_CNF;
 80020f0:	6013      	str	r3, [r2, #0]
	RTC_ALRL = (alarm_time & 0x0000ffff);
 80020f2:	6025      	str	r5, [r4, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 80020f4:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 80020f6:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80020f8:	391c      	subs	r1, #28
	RTC_CRL &= ~RTC_CRL_CNF;
 80020fa:	f023 0310 	bic.w	r3, r3, #16
 80020fe:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002100:	680b      	ldr	r3, [r1, #0]
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	d5fc      	bpl.n	8002100 <rtc_set_alarm_time+0x28>
	rtc_exit_config_mode();
}
 8002106:	bc30      	pop	{r4, r5}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40002804 	.word	0x40002804
 8002110:	40002820 	.word	0x40002820
 8002114:	40002824 	.word	0x40002824

08002118 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8002118:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <rtc_set_prescale_val+0x34>)
 800211c:	6813      	ldr	r3, [r2, #0]
 800211e:	0699      	lsls	r1, r3, #26
 8002120:	d5fc      	bpl.n	800211c <rtc_set_prescale_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 8002122:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8002124:	490a      	ldr	r1, [pc, #40]	; (8002150 <rtc_set_prescale_val+0x38>)
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8002126:	4c0b      	ldr	r4, [pc, #44]	; (8002154 <rtc_set_prescale_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8002128:	f043 0310 	orr.w	r3, r3, #16
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 800212c:	b285      	uxth	r5, r0
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 800212e:	f3c0 4003 	ubfx	r0, r0, #16, #4
	RTC_CRL |= RTC_CRL_CNF;
 8002132:	6013      	str	r3, [r2, #0]
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8002134:	6025      	str	r5, [r4, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8002136:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 8002138:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 800213a:	3904      	subs	r1, #4
	RTC_CRL &= ~RTC_CRL_CNF;
 800213c:	f023 0310 	bic.w	r3, r3, #16
 8002140:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002142:	680b      	ldr	r3, [r1, #0]
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	d5fc      	bpl.n	8002142 <rtc_set_prescale_val+0x2a>
	rtc_exit_config_mode();
}
 8002148:	bc30      	pop	{r4, r5}
 800214a:	4770      	bx	lr
 800214c:	40002804 	.word	0x40002804
 8002150:	40002808 	.word	0x40002808
 8002154:	4000280c 	.word	0x4000280c

08002158 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8002158:	4a03      	ldr	r2, [pc, #12]	; (8002168 <rtc_get_counter_val+0x10>)
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <rtc_get_counter_val+0x14>)
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40002818 	.word	0x40002818
 800216c:	4000281c 	.word	0x4000281c

08002170 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8002170:	b430      	push	{r4, r5}
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <rtc_set_counter_val+0x34>)
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	0699      	lsls	r1, r3, #26
 8002178:	d5fc      	bpl.n	8002174 <rtc_set_counter_val+0x4>
	RTC_CRL |= RTC_CRL_CNF;
 800217a:	6813      	ldr	r3, [r2, #0]
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 800217c:	490a      	ldr	r1, [pc, #40]	; (80021a8 <rtc_set_counter_val+0x38>)
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 800217e:	4c0b      	ldr	r4, [pc, #44]	; (80021ac <rtc_set_counter_val+0x3c>)
	RTC_CRL |= RTC_CRL_CNF;
 8002180:	f043 0310 	orr.w	r3, r3, #16
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8002184:	0c05      	lsrs	r5, r0, #16
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8002186:	b280      	uxth	r0, r0
	RTC_CRL |= RTC_CRL_CNF;
 8002188:	6013      	str	r3, [r2, #0]
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 800218a:	6025      	str	r5, [r4, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 800218c:	6008      	str	r0, [r1, #0]
	RTC_CRL &= ~RTC_CRL_CNF;
 800218e:	6813      	ldr	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002190:	3918      	subs	r1, #24
	RTC_CRL &= ~RTC_CRL_CNF;
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	6013      	str	r3, [r2, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002198:	680b      	ldr	r3, [r1, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	d5fc      	bpl.n	8002198 <rtc_set_counter_val+0x28>
	rtc_exit_config_mode();
}
 800219e:	bc30      	pop	{r4, r5}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40002804 	.word	0x40002804
 80021a8:	4000281c 	.word	0x4000281c
 80021ac:	40002818 	.word	0x40002818

080021b0 <rtc_interrupt_enable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <rtc_interrupt_enable+0x54>)
 80021b2:	6813      	ldr	r3, [r2, #0]
 80021b4:	0699      	lsls	r1, r3, #26
 80021b6:	d5fc      	bpl.n	80021b2 <rtc_interrupt_enable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 80021b8:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_enable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 80021ba:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 80021c2:	d018      	beq.n	80021f6 <rtc_interrupt_enable+0x46>
 80021c4:	d311      	bcc.n	80021ea <rtc_interrupt_enable+0x3a>
 80021c6:	2802      	cmp	r0, #2
 80021c8:	d009      	beq.n	80021de <rtc_interrupt_enable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <rtc_interrupt_enable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80021cc:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	f021 0110 	bic.w	r1, r1, #16
 80021d4:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80021d6:	6813      	ldr	r3, [r2, #0]
 80021d8:	069b      	lsls	r3, r3, #26
 80021da:	d5fc      	bpl.n	80021d6 <rtc_interrupt_enable+0x26>
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 80021dc:	4770      	bx	lr
		RTC_CRH |= RTC_CRH_OWIE;
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <rtc_interrupt_enable+0x58>)
 80021e0:	6813      	ldr	r3, [r2, #0]
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6013      	str	r3, [r2, #0]
		break;
 80021e8:	e7ef      	b.n	80021ca <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_SECIE;
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <rtc_interrupt_enable+0x58>)
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
		break;
 80021f4:	e7e9      	b.n	80021ca <rtc_interrupt_enable+0x1a>
		RTC_CRH |= RTC_CRH_ALRIE;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <rtc_interrupt_enable+0x58>)
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	6013      	str	r3, [r2, #0]
		break;
 8002200:	e7e3      	b.n	80021ca <rtc_interrupt_enable+0x1a>
 8002202:	bf00      	nop
 8002204:	40002804 	.word	0x40002804
 8002208:	40002800 	.word	0x40002800

0800220c <rtc_interrupt_disable>:
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <rtc_interrupt_disable+0x54>)
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	0699      	lsls	r1, r3, #26
 8002212:	d5fc      	bpl.n	800220e <rtc_interrupt_disable+0x2>
	RTC_CRL |= RTC_CRL_CNF;
 8002214:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_disable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8002216:	2801      	cmp	r0, #1
	RTC_CRL |= RTC_CRL_CNF;
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	6013      	str	r3, [r2, #0]
	switch (flag_val) {
 800221e:	d018      	beq.n	8002252 <rtc_interrupt_disable+0x46>
 8002220:	d311      	bcc.n	8002246 <rtc_interrupt_disable+0x3a>
 8002222:	2802      	cmp	r0, #2
 8002224:	d009      	beq.n	800223a <rtc_interrupt_disable+0x2e>
	RTC_CRL &= ~RTC_CRL_CNF;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <rtc_interrupt_disable+0x54>)
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002228:	461a      	mov	r2, r3
	RTC_CRL &= ~RTC_CRL_CNF;
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f021 0110 	bic.w	r1, r1, #16
 8002230:	6019      	str	r1, [r3, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	069b      	lsls	r3, r3, #26
 8002236:	d5fc      	bpl.n	8002232 <rtc_interrupt_disable+0x26>
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8002238:	4770      	bx	lr
		RTC_CRH &= ~RTC_CRH_OWIE;
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <rtc_interrupt_disable+0x58>)
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	6013      	str	r3, [r2, #0]
		break;
 8002244:	e7ef      	b.n	8002226 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_SECIE;
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <rtc_interrupt_disable+0x58>)
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	6013      	str	r3, [r2, #0]
		break;
 8002250:	e7e9      	b.n	8002226 <rtc_interrupt_disable+0x1a>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <rtc_interrupt_disable+0x58>)
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	6013      	str	r3, [r2, #0]
		break;
 800225c:	e7e3      	b.n	8002226 <rtc_interrupt_disable+0x1a>
 800225e:	bf00      	nop
 8002260:	40002804 	.word	0x40002804
 8002264:	40002800 	.word	0x40002800

08002268 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8002268:	2801      	cmp	r0, #1
 800226a:	d00f      	beq.n	800228c <rtc_clear_flag+0x24>
 800226c:	d308      	bcc.n	8002280 <rtc_clear_flag+0x18>
 800226e:	2802      	cmp	r0, #2
 8002270:	d105      	bne.n	800227e <rtc_clear_flag+0x16>
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
		break;
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <rtc_clear_flag+0x30>)
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800227c:	4770      	bx	lr
 800227e:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_SECF;
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <rtc_clear_flag+0x30>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6013      	str	r3, [r2, #0]
		break;
 800228a:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_ALRF;
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <rtc_clear_flag+0x30>)
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f023 0302 	bic.w	r3, r3, #2
 8002294:	6013      	str	r3, [r2, #0]
		break;
 8002296:	4770      	bx	lr
 8002298:	40002804 	.word	0x40002804

0800229c <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 800229c:	2801      	cmp	r0, #1
 800229e:	d00e      	beq.n	80022be <rtc_check_flag+0x22>
 80022a0:	d308      	bcc.n	80022b4 <rtc_check_flag+0x18>
 80022a2:	2802      	cmp	r0, #2
 80022a4:	d104      	bne.n	80022b0 <rtc_check_flag+0x14>
		break;
	case RTC_ALR:
		reg32 = RTC_CRL & RTC_CRL_ALRF;
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <rtc_check_flag+0x2c>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f000 0004 	and.w	r0, r0, #4
		break;
 80022ae:	4770      	bx	lr
	default:
		reg32 = 0;
 80022b0:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 80022b2:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <rtc_check_flag+0x2c>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f000 0001 	and.w	r0, r0, #1
		break;
 80022bc:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 80022be:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <rtc_check_flag+0x2c>)
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	f000 0002 	and.w	r0, r0, #2
		break;
 80022c6:	4770      	bx	lr
 80022c8:	40002804 	.word	0x40002804

080022cc <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop

080022d0 <os_init>:
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 80022d0:	23ff      	movs	r3, #255	; 0xff
    last_running_task = NO_TID;
    running = 0;
 80022d2:	2100      	movs	r1, #0
void os_init( void ) {
 80022d4:	b510      	push	{r4, lr}
    last_running_task = NO_TID;
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <os_init+0x28>)
    running = 0;
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <os_init+0x2c>)
	running_tid = NO_TID;
 80022da:	4c09      	ldr	r4, [pc, #36]	; (8002300 <os_init+0x30>)
    last_running_task = NO_TID;
 80022dc:	7003      	strb	r3, [r0, #0]
	running_tid = NO_TID;
 80022de:	7023      	strb	r3, [r4, #0]
    running = 0;
 80022e0:	7011      	strb	r1, [r2, #0]
    os_sem_init();
 80022e2:	f000 f85b 	bl	800239c <os_sem_init>
    os_event_init();
 80022e6:	f000 f955 	bl	8002594 <os_event_init>
    os_msgQ_init();
 80022ea:	f000 f815 	bl	8002318 <os_msgQ_init>
    os_task_init();
}
 80022ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_task_init();
 80022f2:	f000 b859 	b.w	80023a8 <os_task_init>
 80022f6:	bf00      	nop
 80022f8:	20000ca6 	.word	0x20000ca6
 80022fc:	20000ca5 	.word	0x20000ca5
 8002300:	20000ca4 	.word	0x20000ca4

08002304 <os_tick>:
*       
*/
/*********************************************************************************/
void os_tick( void ) {
    /* Master clock tick */
    os_task_tick( 0, 1 );
 8002304:	2101      	movs	r1, #1
 8002306:	2000      	movs	r0, #0
 8002308:	f000 b890 	b.w	800242c <os_task_tick>

0800230c <os_running>:
    }
}


uint8_t os_running( void ) {
    return running;
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <os_running+0x8>)
}
 800230e:	7818      	ldrb	r0, [r3, #0]
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000ca5 	.word	0x20000ca5

08002318 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8002318:	2300      	movs	r3, #0
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <os_msgQ_init+0x1c>)
    nQueues = 0;
 800231c:	4906      	ldr	r1, [pc, #24]	; (8002338 <os_msgQ_init+0x20>)
        msgQList[ i ].q.list = 0;
 800231e:	e9c2 3300 	strd	r3, r3, [r2]
    nQueues = 0;
 8002322:	700b      	strb	r3, [r1, #0]
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
 8002324:	7213      	strb	r3, [r2, #8]
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 8002326:	8193      	strh	r3, [r2, #12]
        msgQList[ i ].q.list = 0;
 8002328:	e9c2 3304 	strd	r3, r3, [r2, #16]
        msgQList[ i ].q.tail = 0;
 800232c:	7613      	strb	r3, [r2, #24]
        msgQList[ i ].taskId = 0;
 800232e:	8393      	strh	r3, [r2, #28]
        msgQList[ i ].change = 0;
    }
#endif
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000059c 	.word	0x2000059c
 8002338:	20000658 	.word	0x20000658

0800233c <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 800233e:	4d16      	ldr	r5, [pc, #88]	; (8002398 <os_msgQ_tick+0x5c>)
 8002340:	eb05 1500 	add.w	r5, r5, r0, lsl #4
 8002344:	79ec      	ldrb	r4, [r5, #7]
 8002346:	7a2a      	ldrb	r2, [r5, #8]
 8002348:	1c63      	adds	r3, r4, #1
 800234a:	fb93 f4f2 	sdiv	r4, r3, r2
 800234e:	fb02 3414 	mls	r4, r2, r4, r3

    uint8_t head = q->head;
 8002352:	79ae      	ldrb	r6, [r5, #6]
    nextMessage = (q->tail+1) % q->size;
 8002354:	b2e4      	uxtb	r4, r4
    uint16_t msgSz = q->messageSize;

    while ( nextMessage != head ) {
 8002356:	42b4      	cmp	r4, r6
    uint16_t msgSz = q->messageSize;
 8002358:	88af      	ldrh	r7, [r5, #4]
    while ( nextMessage != head ) {
 800235a:	d109      	bne.n	8002370 <os_msgQ_tick+0x34>
 800235c:	e01a      	b.n	8002394 <os_msgQ_tick+0x58>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 800235e:	7a2a      	ldrb	r2, [r5, #8]
 8002360:	3401      	adds	r4, #1
 8002362:	fb94 f3f2 	sdiv	r3, r4, r2
 8002366:	fb02 4413 	mls	r4, r2, r3, r4
 800236a:	b2e4      	uxtb	r4, r4
    while ( nextMessage != head ) {
 800236c:	42a6      	cmp	r6, r4
 800236e:	d011      	beq.n	8002394 <os_msgQ_tick+0x58>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	fb07 3304 	mla	r3, r7, r4, r3
        if ( pMsg->delay > 0 ) {
 8002376:	685a      	ldr	r2, [r3, #4]
            --(pMsg->delay);
 8002378:	1e51      	subs	r1, r2, #1
        if ( pMsg->delay > 0 ) {
 800237a:	2a00      	cmp	r2, #0
 800237c:	d0ef      	beq.n	800235e <os_msgQ_tick+0x22>
            --(pMsg->delay);
 800237e:	6059      	str	r1, [r3, #4]
            if ( pMsg->delay == 0 ) {
 8002380:	2900      	cmp	r1, #0
 8002382:	d1ec      	bne.n	800235e <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 8002384:	7b68      	ldrb	r0, [r5, #13]
 8002386:	f000 f90b 	bl	80025a0 <os_signal_event>
 800238a:	21fe      	movs	r1, #254	; 0xfe
 800238c:	7b68      	ldrb	r0, [r5, #13]
 800238e:	f000 f90d 	bl	80025ac <os_event_set_signaling_tid>
 8002392:	e7e4      	b.n	800235e <os_msgQ_tick+0x22>

    }
#endif    
}
 8002394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002396:	bf00      	nop
 8002398:	2000059c 	.word	0x2000059c

0800239c <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 800239c:	2200      	movs	r2, #0
 800239e:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <os_sem_init+0x8>)
 80023a0:	701a      	strb	r2, [r3, #0]
#endif
}
 80023a2:	4770      	bx	lr
 80023a4:	20000659 	.word	0x20000659

080023a8 <os_task_init>:
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 80023a8:	2100      	movs	r1, #0
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
 80023aa:	20ff      	movs	r0, #255	; 0xff
void os_task_init( void ) {
 80023ac:	b410      	push	{r4}
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <os_task_init+0x3c>)
    nTasks = 0;
 80023b0:	4c0d      	ldr	r4, [pc, #52]	; (80023e8 <os_task_init+0x40>)
        task->internal_state = 0xff;
        task->msgQ = 0;
 80023b2:	460a      	mov	r2, r1
    nTasks = 0;
 80023b4:	7021      	strb	r1, [r4, #0]
 80023b6:	f103 018c 	add.w	r1, r3, #140	; 0x8c
        task->clockId = 0xff;
 80023ba:	7518      	strb	r0, [r3, #20]
        task->internal_state = 0xff;
 80023bc:	80d8      	strh	r0, [r3, #6]
        task->msgQ = 0;
 80023be:	73da      	strb	r2, [r3, #15]
        task->waitQ = 0;
 80023c0:	741a      	strb	r2, [r3, #16]
        task->msgChangeEvent = 0;
 80023c2:	745a      	strb	r2, [r3, #17]
        task->msgResult = 0;
 80023c4:	749a      	strb	r2, [r3, #18]
        task->prio = 0;
 80023c6:	735a      	strb	r2, [r3, #13]
        task->savedState = SUSPENDED;
 80023c8:	715a      	strb	r2, [r3, #5]
        task->semaphore = NO_SEM;
 80023ca:	7398      	strb	r0, [r3, #14]
        task->state = SUSPENDED;
 80023cc:	711a      	strb	r2, [r3, #4]
        task->taskproc = 0;
 80023ce:	601a      	str	r2, [r3, #0]
        task->tid = NO_TID;
 80023d0:	7318      	strb	r0, [r3, #12]
        task->time = 0;
 80023d2:	609a      	str	r2, [r3, #8]
        task->waitSingleEvent = 0;
 80023d4:	74da      	strb	r2, [r3, #19]

        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
 80023d6:	7558      	strb	r0, [r3, #21]
        }
        task->data = 0;
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	331c      	adds	r3, #28
    for ( i = 0; i < N_TASKS; ++i ) {
 80023dc:	428b      	cmp	r3, r1
 80023de:	d1ec      	bne.n	80023ba <os_task_init+0x12>
    }
}
 80023e0:	bc10      	pop	{r4}
 80023e2:	4770      	bx	lr
 80023e4:	200005bc 	.word	0x200005bc
 80023e8:	2000065a 	.word	0x2000065a

080023ec <os_task_highest_prio_ready_task>:
void *task_get_data() {
  return task_list[ running_tid ].data;
}

/* Finds the task with highest prio that are ready to run - used for prio based scheduling */
uint8_t os_task_highest_prio_ready_task( void ) {
 80023ec:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t highest_prio_task = NO_TID;
    uint8_t highest_prio = 255;
    TaskState_t state;
    uint8_t prio;
    
    for ( index = 0; index != nTasks; ++index ) {
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <os_task_highest_prio_ready_task+0x38>)
 80023f0:	781e      	ldrb	r6, [r3, #0]
 80023f2:	b1a6      	cbz	r6, 800241e <os_task_highest_prio_ready_task+0x32>
    uint8_t highest_prio = 255;
 80023f4:	27ff      	movs	r7, #255	; 0xff
    for ( index = 0; index != nTasks; ++index ) {
 80023f6:	2200      	movs	r2, #0
    uint8_t highest_prio_task = NO_TID;
 80023f8:	4638      	mov	r0, r7
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <os_task_highest_prio_ready_task+0x3c>)
        task = &task_list[ index ];
        prio = task->prio;
        state = task->state;

        if ( READY == state ) {
 80023fc:	791c      	ldrb	r4, [r3, #4]
        prio = task->prio;
 80023fe:	7b5d      	ldrb	r5, [r3, #13]
        if ( READY == state ) {
 8002400:	2c05      	cmp	r4, #5
    for ( index = 0; index != nTasks; ++index ) {
 8002402:	f102 0101 	add.w	r1, r2, #1
 8002406:	f103 031c 	add.w	r3, r3, #28
        if ( READY == state ) {
 800240a:	d103      	bne.n	8002414 <os_task_highest_prio_ready_task+0x28>
            if ( prio < highest_prio ) {
 800240c:	42bd      	cmp	r5, r7
                highest_prio = prio;
                highest_prio_task = index;
 800240e:	bf3c      	itt	cc
 8002410:	462f      	movcc	r7, r5
 8002412:	b2d0      	uxtbcc	r0, r2
    for ( index = 0; index != nTasks; ++index ) {
 8002414:	b28a      	uxth	r2, r1
 8002416:	42b2      	cmp	r2, r6
 8002418:	d1f0      	bne.n	80023fc <os_task_highest_prio_ready_task+0x10>
            }
        }
    }

    return highest_prio_task;
}
 800241a:	bcf0      	pop	{r4, r5, r6, r7}
 800241c:	4770      	bx	lr
    uint8_t highest_prio_task = NO_TID;
 800241e:	20ff      	movs	r0, #255	; 0xff
}
 8002420:	bcf0      	pop	{r4, r5, r6, r7}
 8002422:	4770      	bx	lr
 8002424:	2000065a 	.word	0x2000065a
 8002428:	200005bc 	.word	0x200005bc

0800242c <os_task_tick>:
		task_waiting_event_set( task );
	}	
}


void os_task_tick( uint8_t id, uint32_t tickSize ) {
 800242c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t index;
    
    /* Search all tasks and decrement time for waiting tasks */
    for ( index = 0; index != nTasks; ++index ) {
 8002430:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80024c0 <os_task_tick+0x94>
 8002434:	f899 3000 	ldrb.w	r3, [r9]
 8002438:	b313      	cbz	r3, 8002480 <os_task_tick+0x54>
 800243a:	2400      	movs	r4, #0
 800243c:	460e      	mov	r6, r1
 800243e:	4682      	mov	sl, r0
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 8002440:	f04f 0805 	mov.w	r8, #5
            task_list[ index ].time = 0;
 8002444:	4627      	mov	r7, r4
 8002446:	4d1d      	ldr	r5, [pc, #116]	; (80024bc <os_task_tick+0x90>)
		state = task_list[ index ].state;
 8002448:	00e3      	lsls	r3, r4, #3
 800244a:	1b19      	subs	r1, r3, r4
 800244c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002450:	790a      	ldrb	r2, [r1, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 8002452:	2a02      	cmp	r2, #2
 8002454:	d01a      	beq.n	800248c <os_task_tick+0x60>
 8002456:	2a04      	cmp	r2, #4
 8002458:	d018      	beq.n	800248c <os_task_tick+0x60>
		else if ( state ==  WAITING_SEM ) {
 800245a:	2a01      	cmp	r2, #1
 800245c:	d012      	beq.n	8002484 <os_task_tick+0x58>
        if ( id == 0 ) {
 800245e:	f1ba 0f00 	cmp.w	sl, #0
 8002462:	d107      	bne.n	8002474 <os_task_tick+0x48>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 8002464:	1b1b      	subs	r3, r3, r4
 8002466:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800246a:	7bd8      	ldrb	r0, [r3, #15]
 800246c:	28ff      	cmp	r0, #255	; 0xff
 800246e:	d001      	beq.n	8002474 <os_task_tick+0x48>
                os_msgQ_tick( task_list[ index ].msgQ );
 8002470:	f7ff ff64 	bl	800233c <os_msgQ_tick>
    for ( index = 0; index != nTasks; ++index ) {
 8002474:	3401      	adds	r4, #1
 8002476:	f899 3000 	ldrb.w	r3, [r9]
 800247a:	b2e4      	uxtb	r4, r4
 800247c:	42a3      	cmp	r3, r4
 800247e:	d1e3      	bne.n	8002448 <os_task_tick+0x1c>
}
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			task_list[ index ].time++;
 8002484:	688a      	ldr	r2, [r1, #8]
 8002486:	3201      	adds	r2, #1
 8002488:	608a      	str	r2, [r1, #8]
 800248a:	e7e8      	b.n	800245e <os_task_tick+0x32>
        if ( task_list[ index ].clockId == id ) {
 800248c:	1b19      	subs	r1, r3, r4
 800248e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002492:	7d08      	ldrb	r0, [r1, #20]
 8002494:	4550      	cmp	r0, sl
 8002496:	d1e2      	bne.n	800245e <os_task_tick+0x32>
          if ( task_list[ index ].time <= tickSize ) {
 8002498:	6888      	ldr	r0, [r1, #8]
 800249a:	42b0      	cmp	r0, r6
 800249c:	d80b      	bhi.n	80024b6 <os_task_tick+0x8a>
            if ( state == WAITING_EVENT_TIMEOUT ) {
 800249e:	2a04      	cmp	r2, #4
    task_list[ tid ].state = READY;
 80024a0:	eba3 0204 	sub.w	r2, r3, r4
 80024a4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
            task_list[ index ].time = 0;
 80024a8:	608f      	str	r7, [r1, #8]
    task->waitSingleEvent = 0;
 80024aa:	bf04      	itt	eq
 80024ac:	74cf      	strbeq	r7, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 80024ae:	754f      	strbeq	r7, [r1, #21]
    task_list[ tid ].state = READY;
 80024b0:	f882 8004 	strb.w	r8, [r2, #4]
 80024b4:	e7d3      	b.n	800245e <os_task_tick+0x32>
            task_list[ index ].time -= tickSize;
 80024b6:	1b80      	subs	r0, r0, r6
 80024b8:	6088      	str	r0, [r1, #8]
 80024ba:	e7d0      	b.n	800245e <os_task_tick+0x32>
 80024bc:	200005bc 	.word	0x200005bc
 80024c0:	2000065a 	.word	0x2000065a

080024c4 <os_task_signal_event>:
    for ( index = 0; index != nTasks; index++ ) {
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <os_task_signal_event+0x6c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b38b      	cbz	r3, 800252e <os_task_signal_event+0x6a>
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80024ca:	2201      	movs	r2, #1
void os_task_signal_event( Evt_t eventId ) {
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	08c4      	lsrs	r4, r0, #3
 80024d0:	f000 0007 	and.w	r0, r0, #7
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80024d4:	fa02 f000 	lsl.w	r0, r2, r0
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <os_task_signal_event+0x70>)
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	b240      	sxtb	r0, r0
 80024e0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80024e4:	f103 011c 	add.w	r1, r3, #28
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80024e8:	43c6      	mvns	r6, r0
    task->waitSingleEvent = 0;
 80024ea:	2500      	movs	r5, #0
    task_list[ tid ].state = READY;
 80024ec:	2705      	movs	r7, #5
 80024ee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80024f2:	e002      	b.n	80024fa <os_task_signal_event+0x36>
 80024f4:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 80024f6:	4299      	cmp	r1, r3
 80024f8:	d018      	beq.n	800252c <os_task_signal_event+0x68>
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 80024fa:	791a      	ldrb	r2, [r3, #4]
 80024fc:	3a03      	subs	r2, #3
 80024fe:	2a01      	cmp	r2, #1
 8002500:	d8f8      	bhi.n	80024f4 <os_task_signal_event+0x30>
 8002502:	eb03 0c04 	add.w	ip, r3, r4
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8002506:	f99c 2015 	ldrsb.w	r2, [ip, #21]
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 800250a:	4202      	tst	r2, r0
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 800250c:	ea06 0e02 	and.w	lr, r6, r2
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 8002510:	d0f0      	beq.n	80024f4 <os_task_signal_event+0x30>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 8002512:	f88c e015 	strb.w	lr, [ip, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 8002516:	7cda      	ldrb	r2, [r3, #19]
 8002518:	b912      	cbnz	r2, 8002520 <os_task_signal_event+0x5c>
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 800251a:	7d5a      	ldrb	r2, [r3, #21]
 800251c:	2a00      	cmp	r2, #0
 800251e:	d1e9      	bne.n	80024f4 <os_task_signal_event+0x30>
    task->waitSingleEvent = 0;
 8002520:	74dd      	strb	r5, [r3, #19]
        task->eventQueue.eventList[ event ] = 0;
 8002522:	755d      	strb	r5, [r3, #21]
    task_list[ tid ].state = READY;
 8002524:	711f      	strb	r7, [r3, #4]
 8002526:	331c      	adds	r3, #28
    for ( index = 0; index != nTasks; index++ ) {
 8002528:	4299      	cmp	r1, r3
 800252a:	d1e6      	bne.n	80024fa <os_task_signal_event+0x36>
}
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	4770      	bx	lr
 8002530:	2000065a 	.word	0x2000065a
 8002534:	200005bc 	.word	0x200005bc

08002538 <os_task_run>:
void os_task_run( void ) {
 8002538:	b510      	push	{r4, lr}
    os_assert( running_tid < nTasks );
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <os_task_run+0x28>)
 800253c:	4c09      	ldr	r4, [pc, #36]	; (8002564 <os_task_run+0x2c>)
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	7823      	ldrb	r3, [r4, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d804      	bhi.n	8002550 <os_task_run+0x18>
 8002546:	f44f 701c 	mov.w	r0, #624	; 0x270
 800254a:	f000 f80f 	bl	800256c <os_on_assert>
 800254e:	7823      	ldrb	r3, [r4, #0]
    task_list[ running_tid ].taskproc();
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <os_task_run+0x30>)
 8002552:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800255a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    task_list[ running_tid ].taskproc();
 800255e:	4718      	bx	r3
 8002560:	2000065a 	.word	0x2000065a
 8002564:	20000ca4 	.word	0x20000ca4
 8002568:	200005bc 	.word	0x200005bc

0800256c <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 800256c:	4604      	mov	r4, r0
 800256e:	b508      	push	{r3, lr}
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 8002570:	4806      	ldr	r0, [pc, #24]	; (800258c <os_on_assert+0x20>)
 8002572:	f001 fda9 	bl	80040c8 <debug_print>
 8002576:	4620      	mov	r0, r4
 8002578:	f001 fdc8 	bl	800410c <debug_print_unsigned>
 800257c:	f001 fd1a 	bl	8003fb4 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <os_on_assert+0x24>)
 8002582:	801c      	strh	r4, [r3, #0]
    l = l;
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	b292      	uxth	r2, r2
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e7fe      	b.n	800258a <os_on_assert+0x1e>
 800258c:	0800600c 	.word	0x0800600c
 8002590:	20000656 	.word	0x20000656

08002594 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8002594:	2200      	movs	r2, #0
 8002596:	4b01      	ldr	r3, [pc, #4]	; (800259c <os_event_init+0x8>)
 8002598:	701a      	strb	r2, [r3, #0]
#endif
}
 800259a:	4770      	bx	lr
 800259c:	2000065b 	.word	0x2000065b

080025a0 <os_signal_event>:
#endif
}


void os_signal_event( Evt_t ev ) {
	lastSignaledEvent = ev;
 80025a0:	4b01      	ldr	r3, [pc, #4]	; (80025a8 <os_signal_event+0x8>)
 80025a2:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 80025a4:	f7ff bf8e 	b.w	80024c4 <os_task_signal_event>
 80025a8:	20000054 	.word	0x20000054

080025ac <os_event_set_signaling_tid>:
}


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <os_event_set_signaling_tid+0xc>)
 80025ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80025b2:	7041      	strb	r1, [r0, #1]
#endif
}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000648 	.word	0x20000648

080025bc <__aeabi_drsub>:
 80025bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80025c0:	e002      	b.n	80025c8 <__adddf3>
 80025c2:	bf00      	nop

080025c4 <__aeabi_dsub>:
 80025c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080025c8 <__adddf3>:
 80025c8:	b530      	push	{r4, r5, lr}
 80025ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80025ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80025d2:	ea94 0f05 	teq	r4, r5
 80025d6:	bf08      	it	eq
 80025d8:	ea90 0f02 	teqeq	r0, r2
 80025dc:	bf1f      	itttt	ne
 80025de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80025e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80025e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80025ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80025ee:	f000 80e2 	beq.w	80027b6 <__adddf3+0x1ee>
 80025f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80025f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80025fa:	bfb8      	it	lt
 80025fc:	426d      	neglt	r5, r5
 80025fe:	dd0c      	ble.n	800261a <__adddf3+0x52>
 8002600:	442c      	add	r4, r5
 8002602:	ea80 0202 	eor.w	r2, r0, r2
 8002606:	ea81 0303 	eor.w	r3, r1, r3
 800260a:	ea82 0000 	eor.w	r0, r2, r0
 800260e:	ea83 0101 	eor.w	r1, r3, r1
 8002612:	ea80 0202 	eor.w	r2, r0, r2
 8002616:	ea81 0303 	eor.w	r3, r1, r3
 800261a:	2d36      	cmp	r5, #54	; 0x36
 800261c:	bf88      	it	hi
 800261e:	bd30      	pophi	{r4, r5, pc}
 8002620:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002624:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002628:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800262c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002630:	d002      	beq.n	8002638 <__adddf3+0x70>
 8002632:	4240      	negs	r0, r0
 8002634:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002638:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800263c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002640:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002644:	d002      	beq.n	800264c <__adddf3+0x84>
 8002646:	4252      	negs	r2, r2
 8002648:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800264c:	ea94 0f05 	teq	r4, r5
 8002650:	f000 80a7 	beq.w	80027a2 <__adddf3+0x1da>
 8002654:	f1a4 0401 	sub.w	r4, r4, #1
 8002658:	f1d5 0e20 	rsbs	lr, r5, #32
 800265c:	db0d      	blt.n	800267a <__adddf3+0xb2>
 800265e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002662:	fa22 f205 	lsr.w	r2, r2, r5
 8002666:	1880      	adds	r0, r0, r2
 8002668:	f141 0100 	adc.w	r1, r1, #0
 800266c:	fa03 f20e 	lsl.w	r2, r3, lr
 8002670:	1880      	adds	r0, r0, r2
 8002672:	fa43 f305 	asr.w	r3, r3, r5
 8002676:	4159      	adcs	r1, r3
 8002678:	e00e      	b.n	8002698 <__adddf3+0xd0>
 800267a:	f1a5 0520 	sub.w	r5, r5, #32
 800267e:	f10e 0e20 	add.w	lr, lr, #32
 8002682:	2a01      	cmp	r2, #1
 8002684:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002688:	bf28      	it	cs
 800268a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800268e:	fa43 f305 	asr.w	r3, r3, r5
 8002692:	18c0      	adds	r0, r0, r3
 8002694:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800269c:	d507      	bpl.n	80026ae <__adddf3+0xe6>
 800269e:	f04f 0e00 	mov.w	lr, #0
 80026a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80026a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80026aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80026ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80026b2:	d31b      	bcc.n	80026ec <__adddf3+0x124>
 80026b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80026b8:	d30c      	bcc.n	80026d4 <__adddf3+0x10c>
 80026ba:	0849      	lsrs	r1, r1, #1
 80026bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80026c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80026c4:	f104 0401 	add.w	r4, r4, #1
 80026c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80026cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80026d0:	f080 809a 	bcs.w	8002808 <__adddf3+0x240>
 80026d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80026d8:	bf08      	it	eq
 80026da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80026de:	f150 0000 	adcs.w	r0, r0, #0
 80026e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80026e6:	ea41 0105 	orr.w	r1, r1, r5
 80026ea:	bd30      	pop	{r4, r5, pc}
 80026ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80026f0:	4140      	adcs	r0, r0
 80026f2:	eb41 0101 	adc.w	r1, r1, r1
 80026f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80026fa:	f1a4 0401 	sub.w	r4, r4, #1
 80026fe:	d1e9      	bne.n	80026d4 <__adddf3+0x10c>
 8002700:	f091 0f00 	teq	r1, #0
 8002704:	bf04      	itt	eq
 8002706:	4601      	moveq	r1, r0
 8002708:	2000      	moveq	r0, #0
 800270a:	fab1 f381 	clz	r3, r1
 800270e:	bf08      	it	eq
 8002710:	3320      	addeq	r3, #32
 8002712:	f1a3 030b 	sub.w	r3, r3, #11
 8002716:	f1b3 0220 	subs.w	r2, r3, #32
 800271a:	da0c      	bge.n	8002736 <__adddf3+0x16e>
 800271c:	320c      	adds	r2, #12
 800271e:	dd08      	ble.n	8002732 <__adddf3+0x16a>
 8002720:	f102 0c14 	add.w	ip, r2, #20
 8002724:	f1c2 020c 	rsb	r2, r2, #12
 8002728:	fa01 f00c 	lsl.w	r0, r1, ip
 800272c:	fa21 f102 	lsr.w	r1, r1, r2
 8002730:	e00c      	b.n	800274c <__adddf3+0x184>
 8002732:	f102 0214 	add.w	r2, r2, #20
 8002736:	bfd8      	it	le
 8002738:	f1c2 0c20 	rsble	ip, r2, #32
 800273c:	fa01 f102 	lsl.w	r1, r1, r2
 8002740:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002744:	bfdc      	itt	le
 8002746:	ea41 010c 	orrle.w	r1, r1, ip
 800274a:	4090      	lslle	r0, r2
 800274c:	1ae4      	subs	r4, r4, r3
 800274e:	bfa2      	ittt	ge
 8002750:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002754:	4329      	orrge	r1, r5
 8002756:	bd30      	popge	{r4, r5, pc}
 8002758:	ea6f 0404 	mvn.w	r4, r4
 800275c:	3c1f      	subs	r4, #31
 800275e:	da1c      	bge.n	800279a <__adddf3+0x1d2>
 8002760:	340c      	adds	r4, #12
 8002762:	dc0e      	bgt.n	8002782 <__adddf3+0x1ba>
 8002764:	f104 0414 	add.w	r4, r4, #20
 8002768:	f1c4 0220 	rsb	r2, r4, #32
 800276c:	fa20 f004 	lsr.w	r0, r0, r4
 8002770:	fa01 f302 	lsl.w	r3, r1, r2
 8002774:	ea40 0003 	orr.w	r0, r0, r3
 8002778:	fa21 f304 	lsr.w	r3, r1, r4
 800277c:	ea45 0103 	orr.w	r1, r5, r3
 8002780:	bd30      	pop	{r4, r5, pc}
 8002782:	f1c4 040c 	rsb	r4, r4, #12
 8002786:	f1c4 0220 	rsb	r2, r4, #32
 800278a:	fa20 f002 	lsr.w	r0, r0, r2
 800278e:	fa01 f304 	lsl.w	r3, r1, r4
 8002792:	ea40 0003 	orr.w	r0, r0, r3
 8002796:	4629      	mov	r1, r5
 8002798:	bd30      	pop	{r4, r5, pc}
 800279a:	fa21 f004 	lsr.w	r0, r1, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	bd30      	pop	{r4, r5, pc}
 80027a2:	f094 0f00 	teq	r4, #0
 80027a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80027aa:	bf06      	itte	eq
 80027ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80027b0:	3401      	addeq	r4, #1
 80027b2:	3d01      	subne	r5, #1
 80027b4:	e74e      	b.n	8002654 <__adddf3+0x8c>
 80027b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80027ba:	bf18      	it	ne
 80027bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80027c0:	d029      	beq.n	8002816 <__adddf3+0x24e>
 80027c2:	ea94 0f05 	teq	r4, r5
 80027c6:	bf08      	it	eq
 80027c8:	ea90 0f02 	teqeq	r0, r2
 80027cc:	d005      	beq.n	80027da <__adddf3+0x212>
 80027ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80027d2:	bf04      	itt	eq
 80027d4:	4619      	moveq	r1, r3
 80027d6:	4610      	moveq	r0, r2
 80027d8:	bd30      	pop	{r4, r5, pc}
 80027da:	ea91 0f03 	teq	r1, r3
 80027de:	bf1e      	ittt	ne
 80027e0:	2100      	movne	r1, #0
 80027e2:	2000      	movne	r0, #0
 80027e4:	bd30      	popne	{r4, r5, pc}
 80027e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80027ea:	d105      	bne.n	80027f8 <__adddf3+0x230>
 80027ec:	0040      	lsls	r0, r0, #1
 80027ee:	4149      	adcs	r1, r1
 80027f0:	bf28      	it	cs
 80027f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80027f6:	bd30      	pop	{r4, r5, pc}
 80027f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80027fc:	bf3c      	itt	cc
 80027fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002802:	bd30      	popcc	{r4, r5, pc}
 8002804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002808:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800280c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	bd30      	pop	{r4, r5, pc}
 8002816:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800281a:	bf1a      	itte	ne
 800281c:	4619      	movne	r1, r3
 800281e:	4610      	movne	r0, r2
 8002820:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002824:	bf1c      	itt	ne
 8002826:	460b      	movne	r3, r1
 8002828:	4602      	movne	r2, r0
 800282a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800282e:	bf06      	itte	eq
 8002830:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002834:	ea91 0f03 	teqeq	r1, r3
 8002838:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800283c:	bd30      	pop	{r4, r5, pc}
 800283e:	bf00      	nop

08002840 <__aeabi_ui2d>:
 8002840:	f090 0f00 	teq	r0, #0
 8002844:	bf04      	itt	eq
 8002846:	2100      	moveq	r1, #0
 8002848:	4770      	bxeq	lr
 800284a:	b530      	push	{r4, r5, lr}
 800284c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002850:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002854:	f04f 0500 	mov.w	r5, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	e750      	b.n	8002700 <__adddf3+0x138>
 800285e:	bf00      	nop

08002860 <__aeabi_i2d>:
 8002860:	f090 0f00 	teq	r0, #0
 8002864:	bf04      	itt	eq
 8002866:	2100      	moveq	r1, #0
 8002868:	4770      	bxeq	lr
 800286a:	b530      	push	{r4, r5, lr}
 800286c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002870:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002874:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002878:	bf48      	it	mi
 800287a:	4240      	negmi	r0, r0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	e73e      	b.n	8002700 <__adddf3+0x138>
 8002882:	bf00      	nop

08002884 <__aeabi_f2d>:
 8002884:	0042      	lsls	r2, r0, #1
 8002886:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800288a:	ea4f 0131 	mov.w	r1, r1, rrx
 800288e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002892:	bf1f      	itttt	ne
 8002894:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002898:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800289c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80028a0:	4770      	bxne	lr
 80028a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80028a6:	bf08      	it	eq
 80028a8:	4770      	bxeq	lr
 80028aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80028ae:	bf04      	itt	eq
 80028b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80028b4:	4770      	bxeq	lr
 80028b6:	b530      	push	{r4, r5, lr}
 80028b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80028bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80028c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80028c4:	e71c      	b.n	8002700 <__adddf3+0x138>
 80028c6:	bf00      	nop

080028c8 <__aeabi_ul2d>:
 80028c8:	ea50 0201 	orrs.w	r2, r0, r1
 80028cc:	bf08      	it	eq
 80028ce:	4770      	bxeq	lr
 80028d0:	b530      	push	{r4, r5, lr}
 80028d2:	f04f 0500 	mov.w	r5, #0
 80028d6:	e00a      	b.n	80028ee <__aeabi_l2d+0x16>

080028d8 <__aeabi_l2d>:
 80028d8:	ea50 0201 	orrs.w	r2, r0, r1
 80028dc:	bf08      	it	eq
 80028de:	4770      	bxeq	lr
 80028e0:	b530      	push	{r4, r5, lr}
 80028e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80028e6:	d502      	bpl.n	80028ee <__aeabi_l2d+0x16>
 80028e8:	4240      	negs	r0, r0
 80028ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80028ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80028f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80028f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80028fa:	f43f aed8 	beq.w	80026ae <__adddf3+0xe6>
 80028fe:	f04f 0203 	mov.w	r2, #3
 8002902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002906:	bf18      	it	ne
 8002908:	3203      	addne	r2, #3
 800290a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800290e:	bf18      	it	ne
 8002910:	3203      	addne	r2, #3
 8002912:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002916:	f1c2 0320 	rsb	r3, r2, #32
 800291a:	fa00 fc03 	lsl.w	ip, r0, r3
 800291e:	fa20 f002 	lsr.w	r0, r0, r2
 8002922:	fa01 fe03 	lsl.w	lr, r1, r3
 8002926:	ea40 000e 	orr.w	r0, r0, lr
 800292a:	fa21 f102 	lsr.w	r1, r1, r2
 800292e:	4414      	add	r4, r2
 8002930:	e6bd      	b.n	80026ae <__adddf3+0xe6>
 8002932:	bf00      	nop

08002934 <__aeabi_d2f>:
 8002934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002938:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800293c:	bf24      	itt	cs
 800293e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8002942:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002946:	d90d      	bls.n	8002964 <__aeabi_d2f+0x30>
 8002948:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800294c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002950:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002958:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800295c:	bf08      	it	eq
 800295e:	f020 0001 	biceq.w	r0, r0, #1
 8002962:	4770      	bx	lr
 8002964:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002968:	d121      	bne.n	80029ae <__aeabi_d2f+0x7a>
 800296a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800296e:	bfbc      	itt	lt
 8002970:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002974:	4770      	bxlt	lr
 8002976:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800297a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800297e:	f1c2 0218 	rsb	r2, r2, #24
 8002982:	f1c2 0c20 	rsb	ip, r2, #32
 8002986:	fa10 f30c 	lsls.w	r3, r0, ip
 800298a:	fa20 f002 	lsr.w	r0, r0, r2
 800298e:	bf18      	it	ne
 8002990:	f040 0001 	orrne.w	r0, r0, #1
 8002994:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002998:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800299c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80029a0:	ea40 000c 	orr.w	r0, r0, ip
 80029a4:	fa23 f302 	lsr.w	r3, r3, r2
 80029a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80029ac:	e7cc      	b.n	8002948 <__aeabi_d2f+0x14>
 80029ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80029b2:	d107      	bne.n	80029c4 <__aeabi_d2f+0x90>
 80029b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80029b8:	bf1e      	ittt	ne
 80029ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80029be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80029c2:	4770      	bxne	lr
 80029c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80029c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80029cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop

080029d4 <__powidf2>:
 80029d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d8:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 80029dc:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
 80029e0:	4615      	mov	r5, r2
 80029e2:	07e2      	lsls	r2, r4, #31
 80029e4:	4606      	mov	r6, r0
 80029e6:	460f      	mov	r7, r1
 80029e8:	bf53      	iteet	pl
 80029ea:	f04f 0800 	movpl.w	r8, #0
 80029ee:	4680      	movmi	r8, r0
 80029f0:	4689      	movmi	r9, r1
 80029f2:	f8df 904c 	ldrpl.w	r9, [pc, #76]	; 8002a40 <__powidf2+0x6c>
 80029f6:	0864      	lsrs	r4, r4, #1
 80029f8:	d013      	beq.n	8002a22 <__powidf2+0x4e>
 80029fa:	463b      	mov	r3, r7
 80029fc:	4632      	mov	r2, r6
 80029fe:	4630      	mov	r0, r6
 8002a00:	4639      	mov	r1, r7
 8002a02:	f000 fb03 	bl	800300c <__wrap___aeabi_dmul>
 8002a06:	07e3      	lsls	r3, r4, #31
 8002a08:	4606      	mov	r6, r0
 8002a0a:	460f      	mov	r7, r1
 8002a0c:	d5f3      	bpl.n	80029f6 <__powidf2+0x22>
 8002a0e:	4640      	mov	r0, r8
 8002a10:	4649      	mov	r1, r9
 8002a12:	4632      	mov	r2, r6
 8002a14:	463b      	mov	r3, r7
 8002a16:	f000 faf9 	bl	800300c <__wrap___aeabi_dmul>
 8002a1a:	0864      	lsrs	r4, r4, #1
 8002a1c:	4680      	mov	r8, r0
 8002a1e:	4689      	mov	r9, r1
 8002a20:	d1eb      	bne.n	80029fa <__powidf2+0x26>
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	da07      	bge.n	8002a36 <__powidf2+0x62>
 8002a26:	4642      	mov	r2, r8
 8002a28:	464b      	mov	r3, r9
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4904      	ldr	r1, [pc, #16]	; (8002a40 <__powidf2+0x6c>)
 8002a2e:	f000 fad5 	bl	8002fdc <__wrap___aeabi_ddiv>
 8002a32:	4680      	mov	r8, r0
 8002a34:	4689      	mov	r9, r1
 8002a36:	4640      	mov	r0, r8
 8002a38:	4649      	mov	r1, r9
 8002a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a3e:	bf00      	nop
 8002a40:	3ff00000 	.word	0x3ff00000

08002a44 <xchxy>:
.global qfp_fsqrt_fast
.endif

@ exchange r0<->r1, r2<->r3
xchxy:
 push {r0,r2,r14}
 8002a44:	b505      	push	{r0, r2, lr}
 mov r0,r1
 8002a46:	4608      	mov	r0, r1
 mov r2,r3
 8002a48:	461a      	mov	r2, r3
 pop {r1,r3,r15}
 8002a4a:	bd0a      	pop	{r1, r3, pc}

08002a4c <unpackxy>:

@ IEEE single precision floats in r0,r1-> mantissae in r1,r0 exponents in r3,r2 *respectively*
@ trashes r4
unpackxy:
 push {r14}
 8002a4c:	b500      	push	{lr}
 bl unpackx
 8002a4e:	f000 f804 	bl	8002a5a <unpackx>
 bl xchxy
 8002a52:	f7ff fff7 	bl	8002a44 <xchxy>
 pop {r4}
 8002a56:	bc10      	pop	{r4}
 mov r14,r4
 8002a58:	46a6      	mov	lr, r4

08002a5a <unpackx>:

@ IEEE single in r0-> signed (two's complemennt) mantissa in r0 9Q23 (24 significant bits), signed exponent (bias removed) in r2
@ trashes r4; zero, denormal -> mantissa=+/-1, exponent=-380; Inf, NaN -> mantissa=+/-1, exponent=+640
unpackx:
 lsrs r2,r0,#23 @ save exponent and sign
 8002a5a:	0dc2      	lsrs	r2, r0, #23
 lsls r0,#9     @ extract mantissa
 8002a5c:	0240      	lsls	r0, r0, #9
 lsrs r0,#9
 8002a5e:	0a40      	lsrs	r0, r0, #9
 movs r4,#1
 8002a60:	2401      	movs	r4, #1
 lsls r4,#23
 8002a62:	05e4      	lsls	r4, r4, #23
 orrs r0,r4     @ reinstate implied leading 1
 8002a64:	4320      	orrs	r0, r4
 cmp r2,#255    @ test sign bit
 8002a66:	2aff      	cmp	r2, #255	; 0xff
 uxtb r2,r2     @ clear it
 8002a68:	b2d2      	uxtb	r2, r2
 bls 1f         @ branch on positive
 8002a6a:	d900      	bls.n	8002a6e <unpackx+0x14>
 rsbs r0,#0     @ negate mantissa
 8002a6c:	4240      	negs	r0, r0
1:
 subs r2,#1
 8002a6e:	3a01      	subs	r2, #1
 cmp r2,#254    @ zero/denormal/Inf/NaN?
 8002a70:	2afe      	cmp	r2, #254	; 0xfe
 bhs 2f
 8002a72:	d201      	bcs.n	8002a78 <unpackx+0x1e>
 subs r2,#126   @ remove exponent bias: can now be -126..+127
 8002a74:	3a7e      	subs	r2, #126	; 0x7e
 bx r14
 8002a76:	4770      	bx	lr

2:              @ here with special-case values
 cmp r0,#0
 8002a78:	2800      	cmp	r0, #0
 mov r0,r4      @ set mantissa to +1
 8002a7a:	4620      	mov	r0, r4
 bpl 3f
 8002a7c:	d500      	bpl.n	8002a80 <unpackx+0x26>
 rsbs r0,#0     @ zero/denormal/Inf/NaN: mantissa=+/-1
 8002a7e:	4240      	negs	r0, r0
3:
 subs r2,#126   @ zero/denormal: exponent -> -127; Inf, NaN: exponent -> 128
 8002a80:	3a7e      	subs	r2, #126	; 0x7e
 lsls r2,#2     @ zero/denormal: exponent -> -508; Inf, NaN: exponent -> 512
 8002a82:	0092      	lsls	r2, r2, #2
 adds r2,#128   @ zero/denormal: exponent -> -380; Inf, NaN: exponent -> 640
 8002a84:	3280      	adds	r2, #128	; 0x80
 bx r14
 8002a86:	4770      	bx	lr

08002a88 <packx>:

@ normalise and pack signed mantissa in r0 nominally 3Q29, signed exponent in r2-> IEEE single in r0
@ trashes r4, preserves r1,r3
@ r5: "sticky bits", must be zero iff all result bits below r0 are zero for correct rounding
packx:
 lsrs r4,r0,#31 @ save sign bit
 8002a88:	0fc4      	lsrs	r4, r0, #31
 lsls r4,r4,#31 @ sign now in b31
 8002a8a:	07e4      	lsls	r4, r4, #31
 bpl 2f         @ skip if positive
 8002a8c:	d504      	bpl.n	8002a98 <packx0+0x2>
 cmp r5,#0
 8002a8e:	2d00      	cmp	r5, #0
 beq 11f
 8002a90:	d000      	beq.n	8002a94 <packx+0xc>
 adds r0,#1     @ fiddle carry in to following rsb if sticky bits are non-zero
 8002a92:	3001      	adds	r0, #1
11:
 rsbs r0,#0     @ can now treat r0 as unsigned
 8002a94:	4240      	negs	r0, r0

08002a96 <packx0>:
packx0:
 bmi 3f         @ catch r0=0x80000000 case
 8002a96:	d403      	bmi.n	8002aa0 <packx0+0xa>
2:
 subs r2,#1     @ normalisation loop
 8002a98:	3a01      	subs	r2, #1
 adds r0,r0
 8002a9a:	1800      	adds	r0, r0, r0
 beq 1f         @ zero? special case
 8002a9c:	d012      	beq.n	8002ac4 <packx0+0x2e>
 bpl 2b         @ normalise so leading "1" in bit 31
 8002a9e:	d5fb      	bpl.n	8002a98 <packx0+0x2>
3:
 adds r2,#129   @ (mis-)offset exponent
 8002aa0:	3281      	adds	r2, #129	; 0x81
 bne 12f        @ special case: highest denormal can round to lowest normal
 8002aa2:	d101      	bne.n	8002aa8 <packx0+0x12>
 adds r0,#0x80  @ in special case, need to add 256 to r0 for rounding
 8002aa4:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required
 8002aa6:	d205      	bcs.n	8002ab4 <packx0+0x1e>
12:
 adds r0,#0x80  @ rounding
 8002aa8:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required (and result is even so can ignore sticky bits)
 8002aaa:	d203      	bcs.n	8002ab4 <packx0+0x1e>
 cmp r5,#0
 8002aac:	2d00      	cmp	r5, #0
 beq 7f         @ sticky bits zero?
 8002aae:	d00f      	beq.n	8002ad0 <packx0+0x3a>
8:
 lsls r0,#1     @ remove leading 1
 8002ab0:	0040      	lsls	r0, r0, #1
9:
 subs r2,#1     @ compensate exponent on this path
 8002ab2:	3a01      	subs	r2, #1
4:
 cmp r2,#254
 8002ab4:	2afe      	cmp	r2, #254	; 0xfe
 bge 5f         @ overflow?
 8002ab6:	da06      	bge.n	8002ac6 <packx0+0x30>
 adds r2,#1     @ correct exponent offset
 8002ab8:	3201      	adds	r2, #1
 ble 10f        @ denormal/underflow?
 8002aba:	dd07      	ble.n	8002acc <packx0+0x36>
 lsrs r0,#9     @ align mantissa
 8002abc:	0a40      	lsrs	r0, r0, #9
 lsls r2,#23    @ align exponent
 8002abe:	05d2      	lsls	r2, r2, #23
 orrs r0,r2     @ assemble exponent and mantissa
 8002ac0:	4310      	orrs	r0, r2
6:
 orrs r0,r4     @ apply sign
 8002ac2:	4320      	orrs	r0, r4
1:
 bx r14
 8002ac4:	4770      	bx	lr

5:
 movs r0,#0xff  @ create infinity
 8002ac6:	20ff      	movs	r0, #255	; 0xff
 lsls r0,#23
 8002ac8:	05c0      	lsls	r0, r0, #23
 b 6b
 8002aca:	e7fa      	b.n	8002ac2 <packx0+0x2c>

10:
 movs r0,#0     @ create zero
 8002acc:	2000      	movs	r0, #0
 bx r14
 8002ace:	4770      	bx	lr

7:              @ sticky bit rounding case
 lsls r5,r0,#24 @ check bottom 8 bits of r0
 8002ad0:	0605      	lsls	r5, r0, #24
 bne 8b         @ in rounding-tie case?
 8002ad2:	d1ed      	bne.n	8002ab0 <packx0+0x1a>
 lsrs r0,#9     @ ensure even result
 8002ad4:	0a40      	lsrs	r0, r0, #9
 lsls r0,#10
 8002ad6:	0280      	lsls	r0, r0, #10
 b 9b
 8002ad8:	e7eb      	b.n	8002ab2 <packx0+0x1c>

08002ada <unpackxyalign>:

@ unpack two arguments (r0,r1) and shift one down to have common exponent, returned in r2; note that arguments are exchanged
@ sticky bits shifted off bottom of smaller argument in r5
@ following code is unnecessarily general for fadd, but is shared with atan2
unpackxyalign:
 push {r14}
 8002ada:	b500      	push	{lr}
 bl unpackxy
 8002adc:	f7ff ffb6 	bl	8002a4c <unpackxy>
 lsls r0,r0,#6  @ Q29
 8002ae0:	0180      	lsls	r0, r0, #6
 lsls r1,r1,#6  @ Q29
 8002ae2:	0189      	lsls	r1, r1, #6
 subs r4,r2,r3  @ calculate shift
 8002ae4:	1ad4      	subs	r4, r2, r3
 bge 1f         @ x>=y?
 8002ae6:	da07      	bge.n	8002af8 <unpackxyalign+0x1e>
 mov r2,r3      @ no: take common exponent from y
 8002ae8:	461a      	mov	r2, r3
 mov r5,r0      @ potential sticky bits from x
 8002aea:	4605      	mov	r5, r0
 rsbs r4,#0     @ make shift positive
 8002aec:	4264      	negs	r4, r4
 asrs r0,r4
 8002aee:	4120      	asrs	r0, r4
 cmp r4,#32
 8002af0:	2c20      	cmp	r4, #32
 blo 2f
 8002af2:	d307      	bcc.n	8002b04 <unpackxyalign+0x2a>
 movs r0,#0    @ large shift, so all bits are sticky and result is zero
 8002af4:	2000      	movs	r0, #0
 pop {r15}
 8002af6:	bd00      	pop	{pc}
1:
 mov r5,r1     @ common exponent from x; potential sticky bits from y
 8002af8:	460d      	mov	r5, r1
 asrs r1,r4
 8002afa:	4121      	asrs	r1, r4
 cmp r4,#32
 8002afc:	2c20      	cmp	r4, #32
 blo 2f
 8002afe:	d301      	bcc.n	8002b04 <unpackxyalign+0x2a>
 movs r1,#0    @ large shift, so all bits are sticky and result is zero
 8002b00:	2100      	movs	r1, #0
 pop {r15}
 8002b02:	bd00      	pop	{pc}
2:
 rsbs r4,#0
 8002b04:	4264      	negs	r4, r4
 adds r4,#32
 8002b06:	3420      	adds	r4, #32
 lsls r5,r4    @ extract sticky bits
 8002b08:	40a5      	lsls	r5, r4
 pop {r15}
 8002b0a:	bd00      	pop	{pc}

08002b0c <qfp_fsub>:

.thumb_func
qfp_fsub:
 movs r2,#1    @ subtract: flip sign bit of second argument and fall through to fadd
 8002b0c:	2201      	movs	r2, #1
 lsls r2,#31
 8002b0e:	07d2      	lsls	r2, r2, #31
 eors r1,r2
 8002b10:	4051      	eors	r1, r2

08002b12 <qfp_fadd>:
.thumb_func
qfp_fadd:
 push {r4,r5,r14}
 8002b12:	b530      	push	{r4, r5, lr}
 bl unpackxyalign
 8002b14:	f7ff ffe1 	bl	8002ada <unpackxyalign>
 adds r0,r1    @ do addition
 8002b18:	1840      	adds	r0, r0, r1
 bne 2f        @ not in Inf-Inf case?
 8002b1a:	d103      	bne.n	8002b24 <packret>
 cmp r2,#200
 8002b1c:	2ac8      	cmp	r2, #200	; 0xc8
 blt 2f
 8002b1e:	db01      	blt.n	8002b24 <packret>
 movs r0,#1
 8002b20:	2001      	movs	r0, #1
 lsls r0,#29   @ for Inf-Inf, set mantissa to +1 to prevent zero result
 8002b22:	0740      	lsls	r0, r0, #29

08002b24 <packret>:
2:
packret:       @ common return point: "pack and return"
 bl packx
 8002b24:	f7ff ffb0 	bl	8002a88 <packx>
 pop {r4,r5,r15}
 8002b28:	bd30      	pop	{r4, r5, pc}

08002b2a <mul0>:

@ signed multiply r0 1Q23 by r1 4Q23, result in r0 7Q25, sticky bits in r5
@ trashes r3,r4
mul0:
 uxth r3,r0      @ Q23
 8002b2a:	b283      	uxth	r3, r0
 asrs r4,r1,#16  @ Q7
 8002b2c:	140c      	asrs	r4, r1, #16
 muls r3,r4      @ L*H, Q30 signed
 8002b2e:	4363      	muls	r3, r4
 asrs r4,r0,#16  @ Q7
 8002b30:	1404      	asrs	r4, r0, #16
 uxth r5,r1      @ Q23
 8002b32:	b28d      	uxth	r5, r1
 muls r4,r5      @ H*L, Q30 signed
 8002b34:	436c      	muls	r4, r5
 adds r3,r4      @ sum of middle partial products
 8002b36:	191b      	adds	r3, r3, r4
 uxth r4,r0
 8002b38:	b284      	uxth	r4, r0
 muls r4,r5      @ L*L, Q46 unsigned
 8002b3a:	436c      	muls	r4, r5
 lsls r5,r4,#16  @ initialise sticky bits from low half of low partial product
 8002b3c:	0425      	lsls	r5, r4, #16
 lsrs r4,#16     @ Q25
 8002b3e:	0c24      	lsrs	r4, r4, #16
 adds r3,r4      @ add high half of low partial product to sum of middle partial products
 8002b40:	191b      	adds	r3, r3, r4
                 @ (cannot generate carry by limits on input arguments)
 asrs r0,#16     @ Q7
 8002b42:	1400      	asrs	r0, r0, #16
 asrs r1,#16     @ Q7
 8002b44:	1409      	asrs	r1, r1, #16
 muls r0,r1      @ H*H, Q14 signed
 8002b46:	4348      	muls	r0, r1
 lsls r0,#11     @ high partial product Q25
 8002b48:	02c0      	lsls	r0, r0, #11
 lsls r1,r3,#27  @ sticky
 8002b4a:	06d9      	lsls	r1, r3, #27
 orrs r5,r1      @ collect further sticky bits
 8002b4c:	430d      	orrs	r5, r1
 asrs r1,r3,#5   @ middle partial products Q25
 8002b4e:	1159      	asrs	r1, r3, #5
 adds r0,r1      @ final result
 8002b50:	1840      	adds	r0, r0, r1
 bx r14
 8002b52:	4770      	bx	lr

08002b54 <qfp_fcmp>:

.thumb_func
qfp_fcmp:
 movs r2,#1      @ initialise result
 8002b54:	2201      	movs	r2, #1
 lsls r3,r2,#31  @ r3=0x80000000
 8002b56:	07d3      	lsls	r3, r2, #31
 tst r0,r3       @ check sign of first argument
 8002b58:	4218      	tst	r0, r3
 beq 1f
 8002b5a:	d000      	beq.n	8002b5e <qfp_fcmp+0xa>
 subs r0,r3,r0   @ convert to 2's complement form for direct comparison
 8002b5c:	1a18      	subs	r0, r3, r0
1:
 tst r1,r3       @ repeat for second argument
 8002b5e:	4219      	tst	r1, r3
 beq 2f
 8002b60:	d000      	beq.n	8002b64 <qfp_fcmp+0x10>
 subs r1,r3,r1
 8002b62:	1a59      	subs	r1, r3, r1
2:
 subs r0,r1     @ perform comparison
 8002b64:	1a40      	subs	r0, r0, r1
 beq 4f         @ equal? return 0
 8002b66:	d002      	beq.n	8002b6e <qfp_fcmp+0x1a>
 bgt 3f         @ r0>r1? return +1
 8002b68:	dc00      	bgt.n	8002b6c <qfp_fcmp+0x18>
 rsbs r2,#0     @ r0<r1: return -1
 8002b6a:	4252      	negs	r2, r2
3:
 mov r0,r2
 8002b6c:	4610      	mov	r0, r2
4:
 bx r14
 8002b6e:	4770      	bx	lr

08002b70 <qfp_fmul>:

.thumb_func
qfp_fmul:
 push {r4,r5,r14}
 8002b70:	b530      	push	{r4, r5, lr}
 bl unpackxy
 8002b72:	f7ff ff6b 	bl	8002a4c <unpackxy>
 add r2,r3      @ sum exponents
 8002b76:	441a      	add	r2, r3
 adds r2,#4     @ adjust exponent for pack which expects Q29
 8002b78:	3204      	adds	r2, #4

08002b7a <fmul0>:
fmul0:
 bl mul0
 8002b7a:	f7ff ffd6 	bl	8002b2a <mul0>
 b packret
 8002b7e:	e7d1      	b.n	8002b24 <packret>

08002b80 <qfp_fdiv>:

.thumb_func
qfp_fdiv:
 push {r4,r5,r14}
 8002b80:	b530      	push	{r4, r5, lr}

08002b82 <fdiv_n>:
fdiv_n:
 bl unpackxy
 8002b82:	f7ff ff63 	bl	8002a4c <unpackxy>
 movs r5,#1      @ result cannot fall exactly half-way between two representable numbers (exercise for reader - note that
 8002b86:	2501      	movs	r5, #1
                 @ we do not handle denormals) so there will always be sticky bits
 cmp r0,#0       @ check divisor sign
 8002b88:	2800      	cmp	r0, #0
 bpl 1f
 8002b8a:	d501      	bpl.n	8002b90 <fdiv_n+0xe>
 rsbs r0,#0      @ ensure divisor positive
 8002b8c:	4240      	negs	r0, r0
 rsbs r1,#0      @ preserve sign of result
 8002b8e:	4249      	negs	r1, r1
1:
 movs r4,#0
 8002b90:	2400      	movs	r4, #0
 cmp r1,#0       @ check sign of dividend
 8002b92:	2900      	cmp	r1, #0
 bpl 2f
 8002b94:	d501      	bpl.n	8002b9a <fdiv_n+0x18>
 rsbs r1,#0      @ result will be negative
 8002b96:	4249      	negs	r1, r1
 mvns r4,r4      @ save sign as 0x00000000 or 0xffffffff
 8002b98:	43e4      	mvns	r4, r4
2:               @ now do unsigned division on unpacked values {r1,r3}/{r0,r2}
 cmp r3,#200     @ dividend is an infinity? return it
 8002b9a:	2bc8      	cmp	r3, #200	; 0xc8
 bge 3f
 8002b9c:	da0e      	bge.n	8002bbc <infret+0x2>
 rsbs r2,#0
 8002b9e:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero? return infinity
 8002ba0:	2ac8      	cmp	r2, #200	; 0xc8
 bge 3f
 8002ba2:	da0b      	bge.n	8002bbc <infret+0x2>
 adds r2,r3      @ difference of exponents
 8002ba4:	18d2      	adds	r2, r2, r3
 movs r3,#0x40   @ termination marker (calculate enough bits to do rounding correctly)
 8002ba6:	2340      	movs	r3, #64	; 0x40
2:               @ division loop
 subs r1,r0      @ trial subtraction
 8002ba8:	1a09      	subs	r1, r1, r0
 bcs 1f
 8002baa:	d200      	bcs.n	8002bae <fdiv_n+0x2c>
 add r1,r0       @ restore if failed
 8002bac:	4401      	add	r1, r0
1:
 adcs r3,r3      @ shift in result bit
 8002bae:	415b      	adcs	r3, r3
 add r1,r1       @ shift up dividend
 8002bb0:	4409      	add	r1, r1
 bcc 2b          @ loop until marker appears in carry
 8002bb2:	d3f9      	bcc.n	8002ba8 <fdiv_n+0x26>
 lsls r0,r3,#4   @ align for packing
 8002bb4:	0118      	lsls	r0, r3, #4
4:
 eors r0,r4      @ apply sign
 8002bb6:	4060      	eors	r0, r4
 b packret
 8002bb8:	e7b4      	b.n	8002b24 <packret>

08002bba <infret>:
infret:
 movs r4,#0
 8002bba:	2400      	movs	r4, #0
3:
 mov r0,r1
 8002bbc:	4608      	mov	r0, r1
 movs r2,#255    @ return infinity
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 b 4b
 8002bc0:	e7f9      	b.n	8002bb6 <fdiv_n+0x34>

08002bc2 <qfp_fdiv_fast>:
@ cases the value is known to be very close to an integer (usually 1) and so the bits of greater significance do not need
@ to be stored.
@ The reciprocal calculation has been tested for all possible input mantissa values.
.thumb_func
qfp_fdiv_fast:
 push {r4,r5,r14}
 8002bc2:	b530      	push	{r4, r5, lr}

08002bc4 <fdiv_fast_n>:
fdiv_fast_n:
 bl unpackxy
 8002bc4:	f7ff ff42 	bl	8002a4c <unpackxy>
 cmp r0,#0
 8002bc8:	2800      	cmp	r0, #0
 bpl 1f
 8002bca:	d501      	bpl.n	8002bd0 <fdiv_fast_n+0xc>
 rsbs r0,#0
 8002bcc:	4240      	negs	r0, r0
 rsbs r1,#0      @ ensure divisor positive
 8002bce:	4249      	negs	r1, r1
1:
 cmp r3,#200
 8002bd0:	2bc8      	cmp	r3, #200	; 0xc8
 bge infret      @ dividend is an infinity? return it
 8002bd2:	daf2      	bge.n	8002bba <infret>
 rsbs r2,#0
 8002bd4:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero?
 8002bd6:	2ac8      	cmp	r2, #200	; 0xc8
 bge infret      @ return infinity
 8002bd8:	daef      	bge.n	8002bba <infret>
 adds r2,r3      @ difference of exponents
 8002bda:	18d2      	adds	r2, r2, r3
 adr r4,rcpapp-8 @ the first 8 elements of the table are never accessed because of the mantissa's leading 1
 8002bdc:	a423      	add	r4, pc, #140	; (adr r4, 8002c6c <qfp_fsqrt_fast+0x5a>)
 lsrs r3,r0,#20  @ y Q23; y>>20 Q7
 8002bde:	0d03      	lsrs	r3, r0, #20
 ldrb r4,[r4,r3] @ m=rcpapp[(y>>20)&7]; // Q8, .5<m<1
 8002be0:	5ce4      	ldrb	r4, [r4, r3]

 lsls r3,r4,#2   @ m<<2         // Q10  first Newton-Raphson iteration
 8002be2:	00a3      	lsls	r3, r4, #2
 muls r3,r0      @ s=y*(m<<2);  // Q33
 8002be4:	4343      	muls	r3, r0
 lsls r4,#8      @ m<<=8;       // Q16
 8002be6:	0224      	lsls	r4, r4, #8
 asrs r3,#21     @ s>>=21;      // Q12
 8002be8:	155b      	asrs	r3, r3, #21
 muls r3,r4      @ s*=m;        // Q28
 8002bea:	4363      	muls	r3, r4
 asrs r3,#12     @ s>>=12;      // Q16
 8002bec:	131b      	asrs	r3, r3, #12
 subs r4,r3      @ m=m-s;       // Q16
 8002bee:	1ae4      	subs	r4, r4, r3

 mov r3,r4       @ s=y*m        // Q39 second Newton-Raphson iteration
 8002bf0:	4623      	mov	r3, r4
 muls r4,r0      @ ...
 8002bf2:	4344      	muls	r4, r0
 asrs r4,#16     @ s>>=16;      // Q23
 8002bf4:	1424      	asrs	r4, r4, #16
 muls r4,r3      @ s*=m;        // Q39
 8002bf6:	435c      	muls	r4, r3
 lsls r3,#8      @ m<<=8;       // Q24
 8002bf8:	021b      	lsls	r3, r3, #8
 asrs r4,#15     @ s>>=15;      // Q24
 8002bfa:	13e4      	asrs	r4, r4, #15
 subs r3,r4      @ m=m-s;       // Q24
 8002bfc:	1b1b      	subs	r3, r3, r4

 lsls r4,r3,#7   @ \/ s=y*m;    // Q47 third Newton-Raphson iteration
 8002bfe:	01dc      	lsls	r4, r3, #7
 muls r3,r0      @ /\ m<<=7;    // Q31
 8002c00:	4343      	muls	r3, r0
 asrs r3,#15     @ s>>=15;      // Q32
 8002c02:	13db      	asrs	r3, r3, #15
 lsrs r0,r4,#16  @ s*=(m>>16);  // Q47
 8002c04:	0c20      	lsrs	r0, r4, #16
 muls r3,r0      @ ...
 8002c06:	4343      	muls	r3, r0
 asrs r3,#16     @ s>>=16;      // Q31
 8002c08:	141b      	asrs	r3, r3, #16
 subs r0,r4,r3   @ m=m-s;       // Q31
 8002c0a:	1ae0      	subs	r0, r4, r3

08002c0c <div0>:
div0:
 adds r0,#7      @ rounding; reduce systematic error
 8002c0c:	3007      	adds	r0, #7
 lsrs r0,#4      @ Q27
 8002c0e:	0900      	lsrs	r0, r0, #4
 b fmul0         @ drop into multiplication code to calculate result
 8002c10:	e7b3      	b.n	8002b7a <fmul0>

08002c12 <qfp_fsqrt_fast>:
@ Again, the fixed-point calculation is carefully implemented to preserve accuracy, and similar comments to those
@ made above on the fast division routine apply.
@ The reciprocal square root calculation has been tested for all possible (possibly shifted) input mantissa values.
.thumb_func
qfp_fsqrt_fast:
 push {r4,r5,r14}
 8002c12:	b530      	push	{r4, r5, lr}
 bl unpackx
 8002c14:	f7ff ff21 	bl	8002a5a <unpackx>
 movs r1,r0
 8002c18:	0001      	movs	r1, r0
 bmi infret       @ negative? return -Inf
 8002c1a:	d4ce      	bmi.n	8002bba <infret>
 asrs r0,r2,#1    @ check LSB of exponent
 8002c1c:	1050      	asrs	r0, r2, #1
 bcc 1f
 8002c1e:	d300      	bcc.n	8002c22 <qfp_fsqrt_fast+0x10>
 lsls r1,#1       @ was odd: double mantissa; mantissa y now 1..4 Q23
 8002c20:	0049      	lsls	r1, r1, #1
1:
 adds r2,#4       @ correction for packing
 8002c22:	3204      	adds	r2, #4
 adr r4,rsqrtapp-4@ first four table entries are never accessed because of the mantissa's leading 1
 8002c24:	a414      	add	r4, pc, #80	; (adr r4, 8002c78 <rcpapp+0x4>)
 lsrs r3,r1,#21   @ y>>21 Q2
 8002c26:	0d4b      	lsrs	r3, r1, #21
 ldrb r4,[r4,r3]  @ initial approximation to reciprocal square root m Q8
 8002c28:	5ce4      	ldrb	r4, [r4, r3]

 lsrs r0,r1,#7    @ y>>7             // Q16 first Newton-Raphson iteration
 8002c2a:	09c8      	lsrs	r0, r1, #7
 muls r0,r4       @ m*y
 8002c2c:	4360      	muls	r0, r4
 muls r0,r4       @ s=m*y*y          // Q32
 8002c2e:	4360      	muls	r0, r4
 asrs r0,#12      @ s>>12
 8002c30:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ m*s              // Q28
 8002c32:	4360      	muls	r0, r4
 asrs r0,#13      @ m*s              // Q15
 8002c34:	1340      	asrs	r0, r0, #13
 lsls r4,#8       @ m                // Q16
 8002c36:	0224      	lsls	r4, r4, #8
 subs r4,r0       @ m=(m<<8)-(s>>13) // Q16-Q15/2 -> Q16
 8002c38:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // second Newton-Raphson iteration
 8002c3a:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002c3c:	4340      	muls	r0, r0
 lsrs r0,#16      @ u>>16            // Q16
 8002c3e:	0c00      	lsrs	r0, r0, #16
 lsrs r3,r1,#7    @ y>>7             // Q16
 8002c40:	09cb      	lsrs	r3, r1, #7
 muls r0,r3       @ s=u*(y>>7)       // Q32
 8002c42:	4358      	muls	r0, r3
 asrs r0,#12      @ s>>12            // Q20
 8002c44:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ s*m              // Q36
 8002c46:	4360      	muls	r0, r4
 asrs r0,#21      @ s*m              // Q15
 8002c48:	1540      	asrs	r0, r0, #21
 subs r4,r0       @ m=m-s            // Q16-Q15/2
 8002c4a:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // third Newton-Raphson iteration
 8002c4c:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8002c4e:	4340      	muls	r0, r0
 lsrs r3,r0,#12   @ now multiply u and y in two parts: u>>12
 8002c50:	0b03      	lsrs	r3, r0, #12
 muls r3,r1       @ first partial product (u>>12)*y Q43
 8002c52:	434b      	muls	r3, r1
 lsls r0,#20
 8002c54:	0500      	lsls	r0, r0, #20
 lsrs r0,#20      @ u&0xfff
 8002c56:	0d00      	lsrs	r0, r0, #20
 lsrs r5,r1,#12   @ y>>12
 8002c58:	0b0d      	lsrs	r5, r1, #12
 muls r0,r5       @ second partial product (u&0xfff)*(y>>12) Q43
 8002c5a:	4368      	muls	r0, r5
 add r0,r3        @ s=u*y            // Q43
 8002c5c:	4418      	add	r0, r3
 asrs r0,#15      @ s>>15            // Q28
 8002c5e:	13c0      	asrs	r0, r0, #15
 muls r0,r4       @ (s>>15)*m        // Q44
 8002c60:	4360      	muls	r0, r4
 lsls r4,#13      @ m<<13            // Q29
 8002c62:	0364      	lsls	r4, r4, #13
 asrs r0,#16      @ s>>16            // Q28
 8002c64:	1400      	asrs	r0, r0, #16
 subs r0,r4,r0    @                  // Q29-Q28/2
 8002c66:	1a20      	subs	r0, r4, r0

 asrs r2,#1       @ halve exponent
 8002c68:	1052      	asrs	r2, r2, #1
 bcc div0         @ was y shifted?
 8002c6a:	d3cf      	bcc.n	8002c0c <div0>
 lsrs r0,#1
 8002c6c:	0840      	lsrs	r0, r0, #1
 lsls r1,#1       @ shift y back
 8002c6e:	0049      	lsls	r1, r1, #1
 b div0           @ round and complete with multiplication
 8002c70:	e7cc      	b.n	8002c0c <div0>
 8002c72:	46c0      	nop			; (mov r8, r8)

08002c74 <rcpapp>:
 8002c74:	b2c3d8f1 	.word	0xb2c3d8f1
 8002c78:	848d98a4 	.word	0x848d98a4

08002c7c <rsqrtapp>:
 8002c7c:	bbc9daf1 	.word	0xbbc9daf1
 8002c80:	979ea6b0 	.word	0x979ea6b0
 8002c84:	82868b91 	.word	0x82868b91

08002c88 <qfp_float2int>:
.if include_conversions

@ convert float to signed int, rounding towards -Inf, clamping
.thumb_func
qfp_float2int:
 movs r1,#0      @ fall through
 8002c88:	2100      	movs	r1, #0

08002c8a <qfp_float2fix>:

@ convert float in r0 to signed fixed point in r0, clamping
.thumb_func
qfp_float2fix:
 push {r4,r14}
 8002c8a:	b510      	push	{r4, lr}
 bl unpackx
 8002c8c:	f7ff fee5 	bl	8002a5a <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002c90:	440a      	add	r2, r1
 subs r2,#23     @ r2 is now amount of left shift required
 8002c92:	3a17      	subs	r2, #23
 blt 1f          @ requires right shift?
 8002c94:	db07      	blt.n	8002ca6 <qfp_float2fix+0x1c>
 cmp r2,#7       @ overflow?
 8002c96:	2a07      	cmp	r2, #7
 ble 4f
 8002c98:	dd17      	ble.n	8002cca <qfp_float2ufix+0x16>
3:               @ overflow
 asrs r1,r0,#31  @ +ve:0 -ve:0xffffffff
 8002c9a:	17c1      	asrs	r1, r0, #31
 mvns r1,r1      @ +ve:0xffffffff -ve:0
 8002c9c:	43c9      	mvns	r1, r1
 movs r0,#1
 8002c9e:	2001      	movs	r0, #1
 lsls r0,#31
 8002ca0:	07c0      	lsls	r0, r0, #31
5:
 eors r0,r1      @ +ve:0x7fffffff -ve:0x80000000 (unsigned path: 0xffffffff)
 8002ca2:	4048      	eors	r0, r1
 pop {r4,r15}
 8002ca4:	bd10      	pop	{r4, pc}
1:
 rsbs r2,#0      @ right shift for r0, >0
 8002ca6:	4252      	negs	r2, r2
 cmp r2,#32
 8002ca8:	2a20      	cmp	r2, #32
 blt 2f          @ more than 32 bits of right shift?
 8002caa:	db00      	blt.n	8002cae <qfp_float2fix+0x24>
 movs r2,#32
 8002cac:	2220      	movs	r2, #32
2:
 asrs r0,r0,r2
 8002cae:	4110      	asrs	r0, r2
 pop {r4,r15}
 8002cb0:	bd10      	pop	{r4, pc}

08002cb2 <qfp_float2uint>:

@ unsigned version
.thumb_func
qfp_float2uint:
 movs r1,#0      @ fall through
 8002cb2:	2100      	movs	r1, #0

08002cb4 <qfp_float2ufix>:
.thumb_func
qfp_float2ufix:
 push {r4,r14}
 8002cb4:	b510      	push	{r4, lr}
 bl unpackx
 8002cb6:	f7ff fed0 	bl	8002a5a <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8002cba:	440a      	add	r2, r1
 movs r1,r0
 8002cbc:	0001      	movs	r1, r0
 bmi 5b          @ negative? return zero
 8002cbe:	d4f0      	bmi.n	8002ca2 <qfp_float2fix+0x18>
 subs r2,#23     @ r2 is now amount of left shift required
 8002cc0:	3a17      	subs	r2, #23
 blt 1b          @ requires right shift?
 8002cc2:	dbf0      	blt.n	8002ca6 <qfp_float2fix+0x1c>
 mvns r1,r0      @ ready to return 0xffffffff
 8002cc4:	43c1      	mvns	r1, r0
 cmp r2,#8       @ overflow?
 8002cc6:	2a08      	cmp	r2, #8
 bgt 5b
 8002cc8:	dceb      	bgt.n	8002ca2 <qfp_float2fix+0x18>
4:
 lsls r0,r0,r2   @ result fits, left shifted
 8002cca:	4090      	lsls	r0, r2
 pop {r4,r15}
 8002ccc:	bd10      	pop	{r4, pc}

08002cce <qfp_int2float>:

@ convert signed int to float, rounding
.thumb_func
qfp_int2float:
 movs r1,#0      @ fall through
 8002cce:	2100      	movs	r1, #0

08002cd0 <qfp_fix2float>:

@ convert signed fix to float, rounding; number of r0 bits after point in r1
.thumb_func
qfp_fix2float:
 push {r4,r5,r14}
 8002cd0:	b530      	push	{r4, r5, lr}
1:
 movs r2,#29
 8002cd2:	221d      	movs	r2, #29
 subs r2,r1      @ fix exponent
 8002cd4:	1a52      	subs	r2, r2, r1

08002cd6 <packretns>:
packretns:       @ pack and return, sticky bits=0
 movs r5,#0
 8002cd6:	2500      	movs	r5, #0
 b packret
 8002cd8:	e724      	b.n	8002b24 <packret>

08002cda <qfp_uint2float>:

@ unsigned version
.thumb_func
qfp_uint2float:
 movs r1,#0      @ fall through
 8002cda:	2100      	movs	r1, #0

08002cdc <qfp_ufix2float>:
.thumb_func
qfp_ufix2float:
 push {r4,r5,r14}
 8002cdc:	b530      	push	{r4, r5, lr}
 cmp r0,#0
 8002cde:	2800      	cmp	r0, #0
 bge 1b          @ treat <2^31 as signed
 8002ce0:	daf7      	bge.n	8002cd2 <qfp_fix2float+0x2>
 movs r2,#30
 8002ce2:	221e      	movs	r2, #30
 subs r2,r1      @ fix exponent
 8002ce4:	1a52      	subs	r2, r2, r1
 lsls r5,r0,#31  @ one sticky bit
 8002ce6:	07c5      	lsls	r5, r0, #31
 lsrs r0,#1
 8002ce8:	0840      	lsrs	r0, r0, #1
 b packret
 8002cea:	e71b      	b.n	8002b24 <packret>

08002cec <cordic_start>:
@ r3: coefficient pointer
@ r4,r8: m
@ r5: i (shift)

cordic_start: @ initialisation
 mov r7,r8
 8002cec:	4647      	mov	r7, r8
 push {r7}
 8002cee:	b480      	push	{r7}
 movs r5,#0   @ initial shift=0
 8002cf0:	2500      	movs	r5, #0
 mov r8,r4
 8002cf2:	46a0      	mov	r8, r4
 b 5f
 8002cf4:	e00d      	b.n	8002d12 <cordic_rstep+0x16>

08002cf6 <cordic_vstep>:

cordic_vstep: @ one step of algorithm in vector mode
 cmp r1,#0    @ check sign of y
 8002cf6:	2900      	cmp	r1, #0
 bgt 4f
 8002cf8:	dc02      	bgt.n	8002d00 <cordic_rstep+0x4>
 b 1f
 8002cfa:	e005      	b.n	8002d08 <cordic_rstep+0xc>

08002cfc <cordic_rstep>:
cordic_rstep: @ one step of algorithm in rotation mode
 cmp r2,#0    @ check sign of angle
 8002cfc:	2a00      	cmp	r2, #0
 bge 1f
 8002cfe:	da03      	bge.n	8002d08 <cordic_rstep+0xc>
4:
 subs r1,r6   @ negative rotation: y=y-(x>>i)
 8002d00:	1b89      	subs	r1, r1, r6
 rsbs r7,#0
 8002d02:	427f      	negs	r7, r7
 adds r2,r4   @ accumulate angle
 8002d04:	1912      	adds	r2, r2, r4
 b 2f
 8002d06:	e001      	b.n	8002d0c <cordic_rstep+0x10>
1:
 adds r1,r6   @ positive rotation: y=y+(x>>i)
 8002d08:	1989      	adds	r1, r1, r6
 subs r2,r4   @ accumulate angle
 8002d0a:	1b12      	subs	r2, r2, r4
2:
 mov r4,r8
 8002d0c:	4644      	mov	r4, r8
 muls r7,r4   @ apply sign from m
 8002d0e:	4367      	muls	r7, r4
 subs r0,r7   @ finish rotation: x=x{+/-}(y>>i)
 8002d10:	1bc0      	subs	r0, r0, r7
5:
 ldr r4,[r3]  @ fetch next angle from table
 8002d12:	681c      	ldr	r4, [r3, #0]
 adds r3,#4   @ bump pointer
 8002d14:	3304      	adds	r3, #4
 lsrs r4,#1   @ repeated angle?
 8002d16:	0864      	lsrs	r4, r4, #1
 bcs 3f
 8002d18:	d200      	bcs.n	8002d1c <cordic_rstep+0x20>
 adds r5,#1   @ adjust shift if not
 8002d1a:	3501      	adds	r5, #1
3:
 mov r6,r0
 8002d1c:	4606      	mov	r6, r0
 asrs r6,r5   @ x>>i
 8002d1e:	412e      	asrs	r6, r5
 mov r7,r1
 8002d20:	460f      	mov	r7, r1
 asrs r7,r5   @ y>>i
 8002d22:	412f      	asrs	r7, r5
 lsrs r4,#1   @ shift end flag into carry
 8002d24:	0864      	lsrs	r4, r4, #1
 bx r14
 8002d26:	4770      	bx	lr

08002d28 <cordic_rot>:

@ CORDIC rotation mode
cordic_rot:
 push {r6,r7,r14}
 8002d28:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002d2a:	f7ff ffdf 	bl	8002cec <cordic_start>
1:
 bl cordic_rstep
 8002d2e:	f7ff ffe5 	bl	8002cfc <cordic_rstep>
 bcc 1b            @ step until table finished
 8002d32:	d3fc      	bcc.n	8002d2e <cordic_rot+0x6>
 asrs r6,r0,#14    @ remaining small rotations can be linearised: see IV.B of paper referenced above
 8002d34:	1386      	asrs	r6, r0, #14
 asrs r7,r1,#14
 8002d36:	138f      	asrs	r7, r1, #14
 asrs r2,#3
 8002d38:	10d2      	asrs	r2, r2, #3
 muls r6,r2        @ all remaining CORDIC steps in a multiplication
 8002d3a:	4356      	muls	r6, r2
 muls r7,r2
 8002d3c:	4357      	muls	r7, r2
 mov r4,r8
 8002d3e:	4644      	mov	r4, r8
 muls r7,r4
 8002d40:	4367      	muls	r7, r4
 asrs r6,#12
 8002d42:	1336      	asrs	r6, r6, #12
 asrs r7,#12
 8002d44:	133f      	asrs	r7, r7, #12
 subs r0,r7        @ x=x{+/-}(yz>>k)
 8002d46:	1bc0      	subs	r0, r0, r7
 adds r1,r6        @ y=y+(xz>>k)
 8002d48:	1989      	adds	r1, r1, r6

08002d4a <cordic_exit>:
cordic_exit:
 pop {r7}
 8002d4a:	bc80      	pop	{r7}
 mov r8,r7
 8002d4c:	46b8      	mov	r8, r7
 pop {r6,r7,r15}
 8002d4e:	bdc0      	pop	{r6, r7, pc}

08002d50 <cordic_vec>:

@ CORDIC vector mode
cordic_vec:
 push {r6,r7,r14}
 8002d50:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002d52:	f7ff ffcb 	bl	8002cec <cordic_start>
1:
 bl cordic_vstep
 8002d56:	f7ff ffce 	bl	8002cf6 <cordic_vstep>
 bcc 1b            @ step until table finished
 8002d5a:	d3fc      	bcc.n	8002d56 <cordic_vec+0x6>
4:
 cmp r1,#0         @ continue as in cordic_vstep but without using table; x is not affected as y is small
 8002d5c:	2900      	cmp	r1, #0
 bgt 2f            @ check sign of y
 8002d5e:	dc02      	bgt.n	8002d66 <cordic_vec+0x16>
 adds r1,r6        @ positive rotation: y=y+(x>>i)
 8002d60:	1989      	adds	r1, r1, r6
 subs r2,r4        @ accumulate angle
 8002d62:	1b12      	subs	r2, r2, r4
 b 3f
 8002d64:	e001      	b.n	8002d6a <cordic_vec+0x1a>
2:
 subs r1,r6        @ negative rotation: y=y-(x>>i)
 8002d66:	1b89      	subs	r1, r1, r6
 adds r2,r4        @ accumulate angle
 8002d68:	1912      	adds	r2, r2, r4
3:
 asrs r6,#1
 8002d6a:	1076      	asrs	r6, r6, #1
 asrs r4,#1        @ next "table entry"
 8002d6c:	1064      	asrs	r4, r4, #1
 bne 4b
 8002d6e:	d1f5      	bne.n	8002d5c <cordic_vec+0xc>
 b cordic_exit
 8002d70:	e7eb      	b.n	8002d4a <cordic_exit>

08002d72 <qfp_fsin>:

.thumb_func
qfp_fsin:            @ calculate sin and cos using CORDIC rotation method
 push {r4,r5,r14}
 8002d72:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002d74:	2118      	movs	r1, #24
 bl qfp_float2fix    @ range reduction by repeated subtraction/addition in fixed point
 8002d76:	f7ff ff88 	bl	8002c8a <qfp_float2fix>
 ldr r4,pi_q29
 8002d7a:	4c48      	ldr	r4, [pc, #288]	; (8002e9c <pi_q29>)
 lsrs r4,#4          @ 2pi Q24
 8002d7c:	0924      	lsrs	r4, r4, #4
1:
 subs r0,r4
 8002d7e:	1b00      	subs	r0, r0, r4
 bge 1b
 8002d80:	dafd      	bge.n	8002d7e <qfp_fsin+0xc>
1:
 adds r0,r4
 8002d82:	1900      	adds	r0, r0, r4
 bmi 1b              @ now in range 0..2pi
 8002d84:	d4fd      	bmi.n	8002d82 <qfp_fsin+0x10>
 lsls r2,r0,#2       @ z Q26
 8002d86:	0082      	lsls	r2, r0, #2
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 8002d88:	0065      	lsls	r5, r4, #1
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002d8a:	483e      	ldr	r0, [pc, #248]	; (8002e84 <qfp_fatan2+0x30>)
 movs r1,#0
 8002d8c:	2100      	movs	r1, #0
1:
 cmp r2,r4           @ >pi/2?
 8002d8e:	42a2      	cmp	r2, r4
 blt 2f
 8002d90:	db02      	blt.n	8002d98 <qfp_fsin+0x26>
 subs r2,r5          @ reduce range to -pi/2..pi/2
 8002d92:	1b52      	subs	r2, r2, r5
 rsbs r0,#0          @ rotate vector by pi
 8002d94:	4240      	negs	r0, r0
 b 1b
 8002d96:	e7fa      	b.n	8002d8e <qfp_fsin+0x1c>
2:
 lsls r2,#3          @ Q29
 8002d98:	00d2      	lsls	r2, r2, #3
 adr r3,tab_cc       @ circular coefficients
 8002d9a:	a340      	add	r3, pc, #256	; (adr r3, 8002e9c <pi_q29>)
 movs r4,#1          @ m=1
 8002d9c:	2401      	movs	r4, #1
 bl cordic_rot
 8002d9e:	f7ff ffc3 	bl	8002d28 <cordic_rot>
 adds r1,#9          @ fiddle factor to make sin(0)==0
 8002da2:	3109      	adds	r1, #9
 movs r2,#0          @ exponents to zero
 8002da4:	2200      	movs	r2, #0
 movs r3,#0
 8002da6:	2300      	movs	r3, #0
 movs r5,#0          @ no sticky bits
 8002da8:	2500      	movs	r5, #0
 bl packx            @ pack cosine
 8002daa:	f7ff fe6d 	bl	8002a88 <packx>
 bl xchxy
 8002dae:	f7ff fe49 	bl	8002a44 <xchxy>
 b packretns         @ pack sine
 8002db2:	e790      	b.n	8002cd6 <packretns>

08002db4 <qfp_fcos>:

.thumb_func
qfp_fcos:
 push {r14}
 8002db4:	b500      	push	{lr}
 bl qfp_fsin
 8002db6:	f7ff ffdc 	bl	8002d72 <qfp_fsin>
 mov r0,r1           @ extract cosine result
 8002dba:	4608      	mov	r0, r1
 pop {r15}
 8002dbc:	bd00      	pop	{pc}

08002dbe <qfp_ftan>:

.thumb_func
qfp_ftan:
 push {r4,r5,r14}
 8002dbe:	b530      	push	{r4, r5, lr}
 bl qfp_fsin         @ sine in r0/r2, cosine in r1/r3
 8002dc0:	f7ff ffd7 	bl	8002d72 <qfp_fsin>
.if include_faster
 b fdiv_fast_n       @ sin/cos
 8002dc4:	e6fe      	b.n	8002bc4 <fdiv_fast_n>

08002dc6 <qfp_fexp>:

.endif

.thumb_func
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 8002dc6:	b530      	push	{r4, r5, lr}
 movs r1,#24
 8002dc8:	2118      	movs	r1, #24
 bl qfp_float2fix    @ Q24: covers entire valid input range
 8002dca:	f7ff ff5e 	bl	8002c8a <qfp_float2fix>
 asrs r1,r0,#16      @ Q8
 8002dce:	1401      	asrs	r1, r0, #16
 ldr r2,=#5909       @ log_2(e) Q12
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <qfp_fatan2+0x34>)
 muls r1,r2          @ estimate exponent of result Q20
 8002dd2:	4351      	muls	r1, r2
 asrs r1,#19         @ Q1
 8002dd4:	14c9      	asrs	r1, r1, #19
 adds r1,#1          @ rounding
 8002dd6:	3101      	adds	r1, #1
 asrs r1,#1          @ rounded estimate of exponent of result
 8002dd8:	1049      	asrs	r1, r1, #1
 push {r1}           @ save for later
 8002dda:	b402      	push	{r1}
 lsls r2,r0,#5       @ Q29
 8002ddc:	0142      	lsls	r2, r0, #5
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002dde:	482b      	ldr	r0, [pc, #172]	; (8002e8c <qfp_fatan2+0x38>)
 muls r1,r0          @ accurate contribution of estimated exponent
 8002de0:	4341      	muls	r1, r0
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 8002de2:	1a52      	subs	r2, r2, r1
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002de4:	482a      	ldr	r0, [pc, #168]	; (8002e90 <qfp_fatan2+0x3c>)
 movs r1,#0
 8002de6:	2100      	movs	r1, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002de8:	a339      	add	r3, pc, #228	; (adr r3, 8002ed0 <tab_ch>)
 mvns r4,r1          @ m=-1
 8002dea:	43cc      	mvns	r4, r1
 bl cordic_rot       @ calculate cosh and sinh
 8002dec:	f7ff ff9c 	bl	8002d28 <cordic_rot>
 add r0,r1           @ exp=cosh+sinh
 8002df0:	4408      	add	r0, r1
 pop {r2}            @ recover exponent
 8002df2:	bc04      	pop	{r2}
 b packretns         @ pack result
 8002df4:	e76f      	b.n	8002cd6 <packretns>

08002df6 <qfp_fsqrt>:

.thumb_func
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 8002df6:	b530      	push	{r4, r5, lr}
 bl unpackx
 8002df8:	f7ff fe2f 	bl	8002a5a <unpackx>
 movs r1,r0          @ -ve argument?
 8002dfc:	0001      	movs	r1, r0
 bmi 3f              @ return -Inf, -Inf
 8002dfe:	d415      	bmi.n	8002e2c <qfp_fsqrt+0x36>
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002e00:	4924      	ldr	r1, [pc, #144]	; (8002e94 <qfp_fatan2+0x40>)
 bl mul0             @ Q29
 8002e02:	f7ff fe92 	bl	8002b2a <mul0>
 asrs r1,r2,#1       @ halve exponent
 8002e06:	1051      	asrs	r1, r2, #1
 bcc 1f
 8002e08:	d301      	bcc.n	8002e0e <qfp_fsqrt+0x18>
 adds r1,#1          @ was odd: add 1 and shift mantissa
 8002e0a:	3101      	adds	r1, #1
 asrs r0,#1
 8002e0c:	1040      	asrs	r0, r0, #1
1:
 push {r1}           @ save exponent/2 for later
 8002e0e:	b402      	push	{r1}
 mov r1,r0
 8002e10:	4601      	mov	r1, r0
 ldr r3,=#0x0593C2B9 @ re-use constant
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <qfp_fatan2+0x40>)
 lsls r3,#2
 8002e14:	009b      	lsls	r3, r3, #2
 adds r0,r3          @ "a+1"
 8002e16:	18c0      	adds	r0, r0, r3
 subs r1,r3          @ "a-1"
 8002e18:	1ac9      	subs	r1, r1, r3
 movs r2,#0
 8002e1a:	2200      	movs	r2, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002e1c:	a32c      	add	r3, pc, #176	; (adr r3, 8002ed0 <tab_ch>)
 mvns r4,r2          @ m=-1
 8002e1e:	43d4      	mvns	r4, r2
 bl cordic_vec
 8002e20:	f7ff ff96 	bl	8002d50 <cordic_vec>
 mov r1,r2           @ keep ln result
 8002e24:	4611      	mov	r1, r2
 pop {r2}            @ retrieve exponent/2
 8002e26:	bc04      	pop	{r2}
2:
 movs r3,r2
 8002e28:	0013      	movs	r3, r2
 b packretns         @ pack sqrt result
 8002e2a:	e754      	b.n	8002cd6 <packretns>

3:
 movs r2,#255
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 b 2b
 8002e2e:	e7fb      	b.n	8002e28 <qfp_fsqrt+0x32>

08002e30 <qfp_fln>:

.thumb_func
qfp_fln:
 push {r4,r5,r14}
 8002e30:	b530      	push	{r4, r5, lr}
 bl qfp_fsqrt            @ get unpacked ln in r1/r3; exponent has been halved
 8002e32:	f7ff ffe0 	bl	8002df6 <qfp_fsqrt>
 cmp r3,#70              @ ln(Inf)?
 8002e36:	2b46      	cmp	r3, #70	; 0x46
 bgt 2f                  @ return Inf
 8002e38:	dc0a      	bgt.n	8002e50 <qfp_fln+0x20>
 rsbs r3,#0
 8002e3a:	425b      	negs	r3, r3
 cmp r3,#70
 8002e3c:	2b46      	cmp	r3, #70	; 0x46
 bgt 1f                  @ ln(0)? return -Inf
 8002e3e:	dc06      	bgt.n	8002e4e <qfp_fln+0x1e>
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002e40:	4815      	ldr	r0, [pc, #84]	; (8002e98 <qfp_fatan2+0x44>)
 muls r0,r3              @ contribution from negated, halved exponent
 8002e42:	4358      	muls	r0, r3
 adds r1,#8              @ round result of ln
 8002e44:	3108      	adds	r1, #8
 asrs r1,#4              @ Q24
 8002e46:	1109      	asrs	r1, r1, #4
 subs r0,r1,r0           @ add in contribution from (negated) exponent
 8002e48:	1a08      	subs	r0, r1, r0
 movs r2,#5              @ pack expects Q29
 8002e4a:	2205      	movs	r2, #5
 b packretns
 8002e4c:	e743      	b.n	8002cd6 <packretns>
1:
 mvns r0,r0              @ make result -Inf
 8002e4e:	43c0      	mvns	r0, r0
2:
 movs r2,#255
 8002e50:	22ff      	movs	r2, #255	; 0xff
 b packretns
 8002e52:	e740      	b.n	8002cd6 <packretns>

08002e54 <qfp_fatan2>:

.thumb_func
qfp_fatan2:
 push {r4,r5,r14}
 8002e54:	b530      	push	{r4, r5, lr}
 bl unpackxyalign        @ convert to fixed point (ensure common exponent, which is discarded)
 8002e56:	f7ff fe40 	bl	8002ada <unpackxyalign>
 movs r2,#0              @ initial angle
 8002e5a:	2200      	movs	r2, #0
 cmp r0,#0               @ x negative
 8002e5c:	2800      	cmp	r0, #0
 bge 5f
 8002e5e:	da02      	bge.n	8002e66 <qfp_fatan2+0x12>
 rsbs r0,#0              @ rotate to 1st/4th quadrants
 8002e60:	4240      	negs	r0, r0
 rsbs r1,#0
 8002e62:	4249      	negs	r1, r1
 ldr r2,pi_q29           @ pi Q29
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <pi_q29>)
5:
 adr r3,tab_cc           @ circular coefficients
 8002e66:	a30d      	add	r3, pc, #52	; (adr r3, 8002e9c <pi_q29>)
 movs r4,#1              @ m=1
 8002e68:	2401      	movs	r4, #1
 bl cordic_vec           @ also produces magnitude (with scaling factor 1.646760119), which is discarded
 8002e6a:	f7ff ff71 	bl	8002d50 <cordic_vec>
 mov r0,r2               @ result here is -pi/2..3pi/2 Q29
 8002e6e:	4610      	mov	r0, r2
 ldr r2,pi_q29           @ pi Q29
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <pi_q29>)
 adds r4,r0,r2           @ attempt to fix -3pi/2..-pi case
 8002e72:	1884      	adds	r4, r0, r2
 bcs 6f                  @ -pi/2..0? leave result as is
 8002e74:	d202      	bcs.n	8002e7c <qfp_fatan2+0x28>
 subs r4,r0,r2           @ <pi? leave as is
 8002e76:	1a84      	subs	r4, r0, r2
 bmi 6f
 8002e78:	d400      	bmi.n	8002e7c <qfp_fatan2+0x28>
 subs r0,r4,r2           @ >pi: take off 2pi
 8002e7a:	1aa0      	subs	r0, r4, r2
6:
 subs r0,#1              @ fiddle factor so atan2(0,1)==0
 8002e7c:	3801      	subs	r0, #1
 movs r2,#0              @ exponent for pack
 8002e7e:	2200      	movs	r2, #0
 b packretns
 8002e80:	e729      	b.n	8002cd6 <packretns>
 8002e82:	46c0      	nop			; (mov r8, r8)
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002e84:	136e9db4 	.word	0x136e9db4
 ldr r2,=#5909       @ log_2(e) Q12
 8002e88:	00001715 	.word	0x00001715
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002e8c:	162e42ff 	.word	0x162e42ff
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002e90:	2c9e15ca 	.word	0x2c9e15ca
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 8002e94:	0593c2b9 	.word	0x0593c2b9
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002e98:	0162e430 	.word	0x0162e430

08002e9c <pi_q29>:
 8002e9c:	6487ed51 	.word	0x6487ed51
 8002ea0:	3b58ce0c 	.word	0x3b58ce0c
 8002ea4:	1f5b75f8 	.word	0x1f5b75f8
 8002ea8:	0feadd4c 	.word	0x0feadd4c
 8002eac:	07fd56ec 	.word	0x07fd56ec
 8002eb0:	03ffaab8 	.word	0x03ffaab8
 8002eb4:	01fff554 	.word	0x01fff554
 8002eb8:	00fffeac 	.word	0x00fffeac
 8002ebc:	007fffd4 	.word	0x007fffd4
 8002ec0:	003ffffc 	.word	0x003ffffc
 8002ec4:	001ffffc 	.word	0x001ffffc
 8002ec8:	00100000 	.word	0x00100000
 8002ecc:	00080002 	.word	0x00080002

08002ed0 <tab_ch>:
 8002ed0:	464fa9ec 	.word	0x464fa9ec
 8002ed4:	464fa9ed 	.word	0x464fa9ed
 8002ed8:	20b15df4 	.word	0x20b15df4
 8002edc:	1015891c 	.word	0x1015891c
 8002ee0:	0802ac44 	.word	0x0802ac44
 8002ee4:	0802ac45 	.word	0x0802ac45
 8002ee8:	04005564 	.word	0x04005564
 8002eec:	02000aac 	.word	0x02000aac
 8002ef0:	01000154 	.word	0x01000154
 8002ef4:	0080002c 	.word	0x0080002c
 8002ef8:	00400004 	.word	0x00400004
 8002efc:	00200004 	.word	0x00200004
 8002f00:	00100000 	.word	0x00100000
 8002f04:	00080000 	.word	0x00080000
 8002f08:	00080003 	.word	0x00080003

08002f0c <qfp_lib_end>:
 8002f0c:	00000000 	.word	0x00000000

08002f10 <acos>:

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ACOS]++;
 8002f12:	4d2f      	ldr	r5, [pc, #188]	; (8002fd0 <acos+0xc0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002f14:	4602      	mov	r2, r0
    float_usage[USAGE_ACOS]++;
 8002f16:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
    if (isnan(x)) { return NAN; }
 8002f1a:	460b      	mov	r3, r1
    float_usage[USAGE_ACOS]++;
 8002f1c:	3401      	adds	r4, #1
 8002f1e:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
double acos(double x) {
 8002f22:	4606      	mov	r6, r0
 8002f24:	460f      	mov	r7, r1
    if (isnan(x)) { return NAN; }
 8002f26:	f000 f937 	bl	8003198 <__wrap___aeabi_dcmpun>
 8002f2a:	b998      	cbnz	r0, 8002f54 <acos+0x44>

    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002f2c:	4639      	mov	r1, r7
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f7ff fd00 	bl	8002934 <__aeabi_d2f>
 8002f34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002f38:	4604      	mov	r4, r0
 8002f3a:	f7ff fe0b 	bl	8002b54 <qfp_fcmp>
 8002f3e:	b910      	cbnz	r0, 8002f46 <acos+0x36>
 8002f40:	2000      	movs	r0, #0
 8002f42:	2100      	movs	r1, #0
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 8002f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8002f46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7ff fe02 	bl	8002b54 <qfp_fcmp>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	dd02      	ble.n	8002f5a <acos+0x4a>
    if (isnan(x)) { return NAN; }
 8002f54:	2000      	movs	r0, #0
 8002f56:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <acos+0xc4>)
}
 8002f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002f5a:	491f      	ldr	r1, [pc, #124]	; (8002fd8 <acos+0xc8>)
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fdf9 	bl	8002b54 <qfp_fcmp>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	dbf6      	blt.n	8002f54 <acos+0x44>
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 8002f66:	491c      	ldr	r1, [pc, #112]	; (8002fd8 <acos+0xc8>)
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff fdf3 	bl	8002b54 <qfp_fcmp>
 8002f6e:	b918      	cbnz	r0, 8002f78 <acos+0x68>
 8002f70:	a115      	add	r1, pc, #84	; (adr r1, 8002fc8 <acos+0xb8>)
 8002f72:	e9d1 0100 	ldrd	r0, r1, [r1]
}
 8002f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            qfp_fsqrt_fast(
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f7ff fdf8 	bl	8002b70 <qfp_fmul>
 8002f80:	4601      	mov	r1, r0
 8002f82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f86:	f7ff fdc1 	bl	8002b0c <qfp_fsub>
 8002f8a:	f7ff fe42 	bl	8002c12 <qfp_fsqrt_fast>
            qfp_fadd( 1.0f , x )
 8002f8e:	4621      	mov	r1, r4
            qfp_fsqrt_fast(
 8002f90:	4606      	mov	r6, r0
            qfp_fadd( 1.0f , x )
 8002f92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f96:	f7ff fdbc 	bl	8002b12 <qfp_fadd>
        atan2(
 8002f9a:	f7ff fc73 	bl	8002884 <__aeabi_f2d>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7ff fc6e 	bl	8002884 <__aeabi_f2d>
 8002fa8:	4622      	mov	r2, r4
 8002faa:	462b      	mov	r3, r5
 8002fac:	f000 fa0e 	bl	80033cc <atan2>
    return qfp_fmul(
 8002fb0:	f7ff fcc0 	bl	8002934 <__aeabi_d2f>
 8002fb4:	4601      	mov	r1, r0
 8002fb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fba:	f7ff fdd9 	bl	8002b70 <qfp_fmul>
 8002fbe:	f7ff fc61 	bl	8002884 <__aeabi_f2d>
}
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	54442d18 	.word	0x54442d18
 8002fcc:	400921fb 	.word	0x400921fb
 8002fd0:	2000065c 	.word	0x2000065c
 8002fd4:	7ff80000 	.word	0x7ff80000
 8002fd8:	bf800000 	.word	0xbf800000

08002fdc <__wrap___aeabi_ddiv>:
double __wrap___aeabi_ddiv(double n, double d) { 
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DDIV]++;
 8002fde:	4d0a      	ldr	r5, [pc, #40]	; (8003008 <__wrap___aeabi_ddiv+0x2c>)
double __wrap___aeabi_ddiv(double n, double d) { 
 8002fe0:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DDIV]++;
 8002fe2:	786c      	ldrb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002fe4:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DDIV]++;
 8002fe6:	3401      	adds	r4, #1
double __wrap___aeabi_ddiv(double n, double d) { 
 8002fe8:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DDIV]++;
 8002fea:	706c      	strb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7ff fca1 	bl	8002934 <__aeabi_d2f>
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f7ff fc9c 	bl	8002934 <__aeabi_d2f>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	f7ff fde0 	bl	8002bc2 <qfp_fdiv_fast>
 8003002:	f7ff fc3f 	bl	8002884 <__aeabi_f2d>
}
 8003006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003008:	2000065c 	.word	0x2000065c

0800300c <__wrap___aeabi_dmul>:
double __wrap___aeabi_dmul(double x, double y) { 
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DMUL]++;
 800300e:	4d0a      	ldr	r5, [pc, #40]	; (8003038 <__wrap___aeabi_dmul+0x2c>)
double __wrap___aeabi_dmul(double x, double y) { 
 8003010:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DMUL]++;
 8003012:	78ac      	ldrb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8003014:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DMUL]++;
 8003016:	3401      	adds	r4, #1
double __wrap___aeabi_dmul(double x, double y) { 
 8003018:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DMUL]++;
 800301a:	70ac      	strb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 800301c:	4619      	mov	r1, r3
 800301e:	f7ff fc89 	bl	8002934 <__aeabi_d2f>
 8003022:	4604      	mov	r4, r0
 8003024:	4639      	mov	r1, r7
 8003026:	4630      	mov	r0, r6
 8003028:	f7ff fc84 	bl	8002934 <__aeabi_d2f>
 800302c:	4621      	mov	r1, r4
 800302e:	f7ff fd9f 	bl	8002b70 <qfp_fmul>
 8003032:	f7ff fc27 	bl	8002884 <__aeabi_f2d>
}
 8003036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003038:	2000065c 	.word	0x2000065c

0800303c <__wrap___aeabi_dadd>:
double __wrap___aeabi_dadd(double a, double b) {
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DADD]++;
 800303e:	4d0a      	ldr	r5, [pc, #40]	; (8003068 <__wrap___aeabi_dadd+0x2c>)
double __wrap___aeabi_dadd(double a, double b) {
 8003040:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DADD]++;
 8003042:	78ec      	ldrb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8003044:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DADD]++;
 8003046:	3401      	adds	r4, #1
double __wrap___aeabi_dadd(double a, double b) {
 8003048:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DADD]++;
 800304a:	70ec      	strb	r4, [r5, #3]
    return qfp_fadd( a , b );
 800304c:	4619      	mov	r1, r3
 800304e:	f7ff fc71 	bl	8002934 <__aeabi_d2f>
 8003052:	4604      	mov	r4, r0
 8003054:	4639      	mov	r1, r7
 8003056:	4630      	mov	r0, r6
 8003058:	f7ff fc6c 	bl	8002934 <__aeabi_d2f>
 800305c:	4621      	mov	r1, r4
 800305e:	f7ff fd58 	bl	8002b12 <qfp_fadd>
 8003062:	f7ff fc0f 	bl	8002884 <__aeabi_f2d>
}
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003068:	2000065c 	.word	0x2000065c

0800306c <__wrap___aeabi_dsub>:
double __wrap___aeabi_dsub(double a, double b) {
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DSUB]++;
 800306e:	4d0a      	ldr	r5, [pc, #40]	; (8003098 <__wrap___aeabi_dsub+0x2c>)
double __wrap___aeabi_dsub(double a, double b) {
 8003070:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DSUB]++;
 8003072:	792c      	ldrb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8003074:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DSUB]++;
 8003076:	3401      	adds	r4, #1
double __wrap___aeabi_dsub(double a, double b) {
 8003078:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DSUB]++;
 800307a:	712c      	strb	r4, [r5, #4]
    return qfp_fsub( a , b );
 800307c:	4619      	mov	r1, r3
 800307e:	f7ff fc59 	bl	8002934 <__aeabi_d2f>
 8003082:	4604      	mov	r4, r0
 8003084:	4639      	mov	r1, r7
 8003086:	4630      	mov	r0, r6
 8003088:	f7ff fc54 	bl	8002934 <__aeabi_d2f>
 800308c:	4621      	mov	r1, r4
 800308e:	f7ff fd3d 	bl	8002b0c <qfp_fsub>
 8003092:	f7ff fbf7 	bl	8002884 <__aeabi_f2d>
}
 8003096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003098:	2000065c 	.word	0x2000065c

0800309c <__wrap___aeabi_dcmpeq>:
int __wrap___aeabi_dcmpeq(double x, double y) {
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPEQ]++;
 800309e:	4d0b      	ldr	r5, [pc, #44]	; (80030cc <__wrap___aeabi_dcmpeq+0x30>)
int __wrap___aeabi_dcmpeq(double x, double y) {
 80030a0:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPEQ]++;
 80030a2:	796c      	ldrb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 80030a4:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPEQ]++;
 80030a6:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpeq(double x, double y) {
 80030a8:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPEQ]++;
 80030aa:	716c      	strb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7ff fc41 	bl	8002934 <__aeabi_d2f>
 80030b2:	4604      	mov	r4, r0
 80030b4:	4639      	mov	r1, r7
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff fc3c 	bl	8002934 <__aeabi_d2f>
 80030bc:	4621      	mov	r1, r4
 80030be:	f7ff fd49 	bl	8002b54 <qfp_fcmp>
}
 80030c2:	fab0 f080 	clz	r0, r0
 80030c6:	0940      	lsrs	r0, r0, #5
 80030c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000065c 	.word	0x2000065c

080030d0 <__wrap___aeabi_dcmplt>:
int __wrap___aeabi_dcmplt(double x, double y) {
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLT]++;
 80030d2:	4d0a      	ldr	r5, [pc, #40]	; (80030fc <__wrap___aeabi_dcmplt+0x2c>)
int __wrap___aeabi_dcmplt(double x, double y) {
 80030d4:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLT]++;
 80030d6:	79ac      	ldrb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 80030d8:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLT]++;
 80030da:	3401      	adds	r4, #1
int __wrap___aeabi_dcmplt(double x, double y) {
 80030dc:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLT]++;
 80030de:	71ac      	strb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 80030e0:	4619      	mov	r1, r3
 80030e2:	f7ff fc27 	bl	8002934 <__aeabi_d2f>
 80030e6:	4604      	mov	r4, r0
 80030e8:	4639      	mov	r1, r7
 80030ea:	4630      	mov	r0, r6
 80030ec:	f7ff fc22 	bl	8002934 <__aeabi_d2f>
 80030f0:	4621      	mov	r1, r4
 80030f2:	f7ff fd2f 	bl	8002b54 <qfp_fcmp>
}
 80030f6:	0fc0      	lsrs	r0, r0, #31
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000065c 	.word	0x2000065c

08003100 <__wrap___aeabi_dcmple>:
int __wrap___aeabi_dcmple(double x, double y) { 
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLE]++;
 8003102:	4d0b      	ldr	r5, [pc, #44]	; (8003130 <__wrap___aeabi_dcmple+0x30>)
int __wrap___aeabi_dcmple(double x, double y) { 
 8003104:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLE]++;
 8003106:	79ec      	ldrb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8003108:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPLE]++;
 800310a:	3401      	adds	r4, #1
int __wrap___aeabi_dcmple(double x, double y) { 
 800310c:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLE]++;
 800310e:	71ec      	strb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8003110:	4619      	mov	r1, r3
 8003112:	f7ff fc0f 	bl	8002934 <__aeabi_d2f>
 8003116:	4604      	mov	r4, r0
 8003118:	4639      	mov	r1, r7
 800311a:	4630      	mov	r0, r6
 800311c:	f7ff fc0a 	bl	8002934 <__aeabi_d2f>
 8003120:	4621      	mov	r1, r4
 8003122:	f7ff fd17 	bl	8002b54 <qfp_fcmp>
}
 8003126:	2800      	cmp	r0, #0
 8003128:	bfcc      	ite	gt
 800312a:	2000      	movgt	r0, #0
 800312c:	2001      	movle	r0, #1
 800312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003130:	2000065c 	.word	0x2000065c

08003134 <__wrap___aeabi_dcmpge>:
int __wrap___aeabi_dcmpge(double x, double y) { 
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGE]++;
 8003136:	4d0a      	ldr	r5, [pc, #40]	; (8003160 <__wrap___aeabi_dcmpge+0x2c>)
int __wrap___aeabi_dcmpge(double x, double y) { 
 8003138:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGE]++;
 800313a:	7a2c      	ldrb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 800313c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGE]++;
 800313e:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpge(double x, double y) { 
 8003140:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGE]++;
 8003142:	722c      	strb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8003144:	4619      	mov	r1, r3
 8003146:	f7ff fbf5 	bl	8002934 <__aeabi_d2f>
 800314a:	4604      	mov	r4, r0
 800314c:	4639      	mov	r1, r7
 800314e:	4630      	mov	r0, r6
 8003150:	f7ff fbf0 	bl	8002934 <__aeabi_d2f>
 8003154:	4621      	mov	r1, r4
 8003156:	f7ff fcfd 	bl	8002b54 <qfp_fcmp>
}
 800315a:	43c0      	mvns	r0, r0
 800315c:	0fc0      	lsrs	r0, r0, #31
 800315e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003160:	2000065c 	.word	0x2000065c

08003164 <__wrap___aeabi_dcmpgt>:
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGT]++;
 8003166:	4d0b      	ldr	r5, [pc, #44]	; (8003194 <__wrap___aeabi_dcmpgt+0x30>)
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8003168:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGT]++;
 800316a:	7a6c      	ldrb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 800316c:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPGT]++;
 800316e:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8003170:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGT]++;
 8003172:	726c      	strb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff fbdd 	bl	8002934 <__aeabi_d2f>
 800317a:	4604      	mov	r4, r0
 800317c:	4639      	mov	r1, r7
 800317e:	4630      	mov	r0, r6
 8003180:	f7ff fbd8 	bl	8002934 <__aeabi_d2f>
 8003184:	4621      	mov	r1, r4
 8003186:	f7ff fce5 	bl	8002b54 <qfp_fcmp>
}
 800318a:	2800      	cmp	r0, #0
 800318c:	bfd4      	ite	le
 800318e:	2000      	movle	r0, #0
 8003190:	2001      	movgt	r0, #1
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003194:	2000065c 	.word	0x2000065c

08003198 <__wrap___aeabi_dcmpun>:
int __wrap___aeabi_dcmpun(double x, double y) { 
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPUN]++;
 800319a:	4d0b      	ldr	r5, [pc, #44]	; (80031c8 <__wrap___aeabi_dcmpun+0x30>)
int __wrap___aeabi_dcmpun(double x, double y) { 
 800319c:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPUN]++;
 800319e:	7aac      	ldrb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 80031a0:	4610      	mov	r0, r2
    float_usage[USAGE_AEABI_DCMPUN]++;
 80031a2:	3401      	adds	r4, #1
int __wrap___aeabi_dcmpun(double x, double y) { 
 80031a4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPUN]++;
 80031a6:	72ac      	strb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7ff fbc3 	bl	8002934 <__aeabi_d2f>
 80031ae:	4604      	mov	r4, r0
 80031b0:	4639      	mov	r1, r7
 80031b2:	4630      	mov	r0, r6
 80031b4:	f7ff fbbe 	bl	8002934 <__aeabi_d2f>
 80031b8:	4621      	mov	r1, r4
 80031ba:	f7ff fccb 	bl	8002b54 <qfp_fcmp>
}
 80031be:	3000      	adds	r0, #0
 80031c0:	bf18      	it	ne
 80031c2:	2001      	movne	r0, #1
 80031c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000065c 	.word	0x2000065c

080031cc <__wrap___aeabi_d2iz>:
int __wrap___aeabi_d2iz(double x) { 
 80031cc:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2IZ]++;
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <__wrap___aeabi_d2iz+0x28>)
 80031d0:	7bd3      	ldrb	r3, [r2, #15]
 80031d2:	3301      	adds	r3, #1
 80031d4:	73d3      	strb	r3, [r2, #15]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 80031d6:	f7ff fbad 	bl	8002934 <__aeabi_d2f>
 80031da:	2100      	movs	r1, #0
 80031dc:	4604      	mov	r4, r0
 80031de:	f7ff fcb9 	bl	8002b54 <qfp_fcmp>
 80031e2:	b900      	cbnz	r0, 80031e6 <__wrap___aeabi_d2iz+0x1a>
}
 80031e4:	bd10      	pop	{r4, pc}
    int xfloored = qfp_float2int(x);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff fd4e 	bl	8002c88 <qfp_float2int>
    if (xfloored < 0) { return xfloored + 1; }
 80031ec:	2800      	cmp	r0, #0
 80031ee:	bfb8      	it	lt
 80031f0:	3001      	addlt	r0, #1
}
 80031f2:	bd10      	pop	{r4, pc}
 80031f4:	2000065c 	.word	0x2000065c

080031f8 <__wrap___aeabi_d2uiz>:
unsigned __wrap___aeabi_d2uiz(double x) { 
 80031f8:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2UIZ]++;
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <__wrap___aeabi_d2uiz+0x34>)
 80031fc:	7c13      	ldrb	r3, [r2, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	7413      	strb	r3, [r2, #16]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 8003202:	f7ff fb97 	bl	8002934 <__aeabi_d2f>
 8003206:	2100      	movs	r1, #0
 8003208:	4604      	mov	r4, r0
 800320a:	f7ff fca3 	bl	8002b54 <qfp_fcmp>
 800320e:	b908      	cbnz	r0, 8003214 <__wrap___aeabi_d2uiz+0x1c>
}
 8003210:	2000      	movs	r0, #0
 8003212:	bd10      	pop	{r4, pc}
    if (qfp_fcmp(x, 0) < 0) { return 0; }
 8003214:	2100      	movs	r1, #0
 8003216:	4620      	mov	r0, r4
 8003218:	f7ff fc9c 	bl	8002b54 <qfp_fcmp>
 800321c:	2800      	cmp	r0, #0
 800321e:	dbf7      	blt.n	8003210 <__wrap___aeabi_d2uiz+0x18>
    return qfp_float2uint(x); 
 8003220:	4620      	mov	r0, r4
}
 8003222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return qfp_float2uint(x); 
 8003226:	f7ff bd44 	b.w	8002cb2 <qfp_float2uint>
 800322a:	bf00      	nop
 800322c:	2000065c 	.word	0x2000065c

08003230 <sqrt>:
double sqrt(double x) { 
 8003230:	b508      	push	{r3, lr}
    float_usage[USAGE_SQRT]++;
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <sqrt+0x18>)
 8003234:	7d53      	ldrb	r3, [r2, #21]
 8003236:	3301      	adds	r3, #1
 8003238:	7553      	strb	r3, [r2, #21]
    return qfp_fsqrt_fast(x); 
 800323a:	f7ff fb7b 	bl	8002934 <__aeabi_d2f>
 800323e:	f7ff fce8 	bl	8002c12 <qfp_fsqrt_fast>
 8003242:	f7ff fb1f 	bl	8002884 <__aeabi_f2d>
}
 8003246:	bd08      	pop	{r3, pc}
 8003248:	2000065c 	.word	0x2000065c

0800324c <log>:
double log(double x) { 
 800324c:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG]++;
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <log+0x18>)
 8003250:	7d93      	ldrb	r3, [r2, #22]
 8003252:	3301      	adds	r3, #1
 8003254:	7593      	strb	r3, [r2, #22]
    return qfp_fln(x); 
 8003256:	f7ff fb6d 	bl	8002934 <__aeabi_d2f>
 800325a:	f7ff fde9 	bl	8002e30 <qfp_fln>
 800325e:	f7ff fb11 	bl	8002884 <__aeabi_f2d>
}
 8003262:	bd08      	pop	{r3, pc}
 8003264:	2000065c 	.word	0x2000065c

08003268 <exp>:
double exp(double x) { 
 8003268:	b508      	push	{r3, lr}
    float_usage[USAGE_EXP]++;
 800326a:	4a05      	ldr	r2, [pc, #20]	; (8003280 <exp+0x18>)
 800326c:	7dd3      	ldrb	r3, [r2, #23]
 800326e:	3301      	adds	r3, #1
 8003270:	75d3      	strb	r3, [r2, #23]
    return qfp_fexp(x); 
 8003272:	f7ff fb5f 	bl	8002934 <__aeabi_d2f>
 8003276:	f7ff fda6 	bl	8002dc6 <qfp_fexp>
 800327a:	f7ff fb03 	bl	8002884 <__aeabi_f2d>
}
 800327e:	bd08      	pop	{r3, pc}
 8003280:	2000065c 	.word	0x2000065c

08003284 <log2>:
double log2(double x) { 
 8003284:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG2]++;
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <log2+0x20>)
 8003288:	7e13      	ldrb	r3, [r2, #24]
 800328a:	3301      	adds	r3, #1
 800328c:	7613      	strb	r3, [r2, #24]
    return qfp_fmul(
 800328e:	f7ff fb51 	bl	8002934 <__aeabi_d2f>
 8003292:	f7ff fdcd 	bl	8002e30 <qfp_fln>
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <log2+0x24>)
 8003298:	f7ff fc6a 	bl	8002b70 <qfp_fmul>
 800329c:	f7ff faf2 	bl	8002884 <__aeabi_f2d>
}
 80032a0:	bd08      	pop	{r3, pc}
 80032a2:	bf00      	nop
 80032a4:	2000065c 	.word	0x2000065c
 80032a8:	3fb8aa3b 	.word	0x3fb8aa3b

080032ac <log10>:
double log10(double x) { 
 80032ac:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG10]++;
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <log10+0x20>)
 80032b0:	7e53      	ldrb	r3, [r2, #25]
 80032b2:	3301      	adds	r3, #1
 80032b4:	7653      	strb	r3, [r2, #25]
    return qfp_fmul(
 80032b6:	f7ff fb3d 	bl	8002934 <__aeabi_d2f>
 80032ba:	f7ff fdb9 	bl	8002e30 <qfp_fln>
 80032be:	4904      	ldr	r1, [pc, #16]	; (80032d0 <log10+0x24>)
 80032c0:	f7ff fc56 	bl	8002b70 <qfp_fmul>
 80032c4:	f7ff fade 	bl	8002884 <__aeabi_f2d>
}
 80032c8:	bd08      	pop	{r3, pc}
 80032ca:	bf00      	nop
 80032cc:	2000065c 	.word	0x2000065c
 80032d0:	3ede5bd9 	.word	0x3ede5bd9

080032d4 <pow>:
double pow(double b, double x) { 
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_POW]++;
 80032d6:	4c21      	ldr	r4, [pc, #132]	; (800335c <pow+0x88>)
double pow(double b, double x) { 
 80032d8:	461f      	mov	r7, r3
    float_usage[USAGE_POW]++;
 80032da:	7ea3      	ldrb	r3, [r4, #26]
double pow(double b, double x) { 
 80032dc:	4616      	mov	r6, r2
    float_usage[USAGE_POW]++;
 80032de:	3301      	adds	r3, #1
 80032e0:	76a3      	strb	r3, [r4, #26]
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 80032e2:	f7ff fb27 	bl	8002934 <__aeabi_d2f>
 80032e6:	2100      	movs	r1, #0
 80032e8:	4604      	mov	r4, r0
 80032ea:	f7ff fc33 	bl	8002b54 <qfp_fcmp>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	db10      	blt.n	8003314 <pow+0x40>
    return qfp_fexp(
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fd9c 	bl	8002e30 <qfp_fln>
 80032f8:	4639      	mov	r1, r7
 80032fa:	4604      	mov	r4, r0
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff fb19 	bl	8002934 <__aeabi_d2f>
 8003302:	4601      	mov	r1, r0
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff fc33 	bl	8002b70 <qfp_fmul>
 800330a:	f7ff fd5c 	bl	8002dc6 <qfp_fexp>
 800330e:	f7ff fab9 	bl	8002884 <__aeabi_f2d>
}
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 8003314:	4639      	mov	r1, r7
 8003316:	4630      	mov	r0, r6
 8003318:	f7ff fb0c 	bl	8002934 <__aeabi_d2f>
 800331c:	2100      	movs	r1, #0
 800331e:	4605      	mov	r5, r0
 8003320:	f7ff fc18 	bl	8002b54 <qfp_fcmp>
 8003324:	2800      	cmp	r0, #0
 8003326:	dae4      	bge.n	80032f2 <pow+0x1e>
        int xfloored = qfp_float2int(-x);
 8003328:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 800332c:	f7ff fcac 	bl	8002c88 <qfp_float2int>
        if (xfloored % 2 == 1) {
 8003330:	2800      	cmp	r0, #0
 8003332:	f000 0001 	and.w	r0, r0, #1
 8003336:	bfb8      	it	lt
 8003338:	4240      	neglt	r0, r0
 800333a:	2801      	cmp	r0, #1
 800333c:	d1d9      	bne.n	80032f2 <pow+0x1e>
            return -qfp_fexp(
 800333e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8003342:	f7ff fd75 	bl	8002e30 <qfp_fln>
 8003346:	4629      	mov	r1, r5
 8003348:	f7ff fc12 	bl	8002b70 <qfp_fmul>
 800334c:	f7ff fd3b 	bl	8002dc6 <qfp_fexp>
 8003350:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003354:	f7ff fa96 	bl	8002884 <__aeabi_f2d>
}
 8003358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335a:	bf00      	nop
 800335c:	2000065c 	.word	0x2000065c

08003360 <sin>:
double sin(double x) { 
 8003360:	b508      	push	{r3, lr}
    float_usage[USAGE_SIN]++;
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <sin+0x18>)
 8003364:	7f13      	ldrb	r3, [r2, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	7713      	strb	r3, [r2, #28]
    return qfp_fsin(x); 
 800336a:	f7ff fae3 	bl	8002934 <__aeabi_d2f>
 800336e:	f7ff fd00 	bl	8002d72 <qfp_fsin>
 8003372:	f7ff fa87 	bl	8002884 <__aeabi_f2d>
}
 8003376:	bd08      	pop	{r3, pc}
 8003378:	2000065c 	.word	0x2000065c

0800337c <cos>:
double cos(double x) { 
 800337c:	b510      	push	{r4, lr}
    float_usage[USAGE_COS]++;
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <cos+0x2c>)
 8003380:	7f53      	ldrb	r3, [r2, #29]
 8003382:	3301      	adds	r3, #1
 8003384:	7753      	strb	r3, [r2, #29]
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 8003386:	f7ff fad5 	bl	8002934 <__aeabi_d2f>
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <cos+0x30>)
 800338c:	4604      	mov	r4, r0
 800338e:	f7ff fbe1 	bl	8002b54 <qfp_fcmp>
 8003392:	b910      	cbnz	r0, 800339a <cos+0x1e>
 8003394:	2000      	movs	r0, #0
 8003396:	2100      	movs	r1, #0
}
 8003398:	bd10      	pop	{r4, pc}
    return qfp_fcos(x); 
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff fd0a 	bl	8002db4 <qfp_fcos>
 80033a0:	f7ff fa70 	bl	8002884 <__aeabi_f2d>
}
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	bf00      	nop
 80033a8:	2000065c 	.word	0x2000065c
 80033ac:	3fc90fdb 	.word	0x3fc90fdb

080033b0 <tan>:
double tan(double x) { 
 80033b0:	b508      	push	{r3, lr}
    float_usage[USAGE_TAN]++;
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <tan+0x18>)
 80033b4:	7f93      	ldrb	r3, [r2, #30]
 80033b6:	3301      	adds	r3, #1
 80033b8:	7793      	strb	r3, [r2, #30]
    return qfp_ftan(x); 
 80033ba:	f7ff fabb 	bl	8002934 <__aeabi_d2f>
 80033be:	f7ff fcfe 	bl	8002dbe <qfp_ftan>
 80033c2:	f7ff fa5f 	bl	8002884 <__aeabi_f2d>
}
 80033c6:	bd08      	pop	{r3, pc}
 80033c8:	2000065c 	.word	0x2000065c

080033cc <atan2>:
double atan2(double y, double x) { 
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATAN2]++;
 80033ce:	4c13      	ldr	r4, [pc, #76]	; (800341c <atan2+0x50>)
double atan2(double y, double x) { 
 80033d0:	461f      	mov	r7, r3
    float_usage[USAGE_ATAN2]++;
 80033d2:	7fe3      	ldrb	r3, [r4, #31]
double atan2(double y, double x) { 
 80033d4:	4616      	mov	r6, r2
    float_usage[USAGE_ATAN2]++;
 80033d6:	3301      	adds	r3, #1
 80033d8:	77e3      	strb	r3, [r4, #31]
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 80033da:	f7ff faab 	bl	8002934 <__aeabi_d2f>
 80033de:	2100      	movs	r1, #0
 80033e0:	4604      	mov	r4, r0
 80033e2:	f7ff fbb7 	bl	8002b54 <qfp_fcmp>
 80033e6:	b158      	cbz	r0, 8003400 <atan2+0x34>
 80033e8:	4630      	mov	r0, r6
 80033ea:	4639      	mov	r1, r7
 80033ec:	f7ff faa2 	bl	8002934 <__aeabi_d2f>
 80033f0:	4605      	mov	r5, r0
    return qfp_fatan2( y, x ); 
 80033f2:	4629      	mov	r1, r5
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff fd2d 	bl	8002e54 <qfp_fatan2>
 80033fa:	f7ff fa43 	bl	8002884 <__aeabi_f2d>
}
 80033fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 8003400:	4639      	mov	r1, r7
 8003402:	4630      	mov	r0, r6
 8003404:	f7ff fa96 	bl	8002934 <__aeabi_d2f>
 8003408:	2100      	movs	r1, #0
 800340a:	4605      	mov	r5, r0
 800340c:	f7ff fba2 	bl	8002b54 <qfp_fcmp>
 8003410:	2800      	cmp	r0, #0
 8003412:	d1ee      	bne.n	80033f2 <atan2+0x26>
 8003414:	2000      	movs	r0, #0
 8003416:	2100      	movs	r1, #0
}
 8003418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341a:	bf00      	nop
 800341c:	2000065c 	.word	0x2000065c

08003420 <atan>:
double atan(double y_over_x) {
 8003420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_ATAN]++;
 8003424:	4f24      	ldr	r7, [pc, #144]	; (80034b8 <atan+0x98>)
    if (isnan(y_over_x)) { return NAN; }
 8003426:	4602      	mov	r2, r0
    float_usage[USAGE_ATAN]++;
 8003428:	f897 6020 	ldrb.w	r6, [r7, #32]
    if (isnan(y_over_x)) { return NAN; }
 800342c:	460b      	mov	r3, r1
    float_usage[USAGE_ATAN]++;
 800342e:	3601      	adds	r6, #1
 8003430:	f887 6020 	strb.w	r6, [r7, #32]
double atan(double y_over_x) {
 8003434:	4604      	mov	r4, r0
 8003436:	460d      	mov	r5, r1
    if (isnan(y_over_x)) { return NAN; }
 8003438:	f7ff feae 	bl	8003198 <__wrap___aeabi_dcmpun>
 800343c:	bb70      	cbnz	r0, 800349c <atan+0x7c>
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }
 800343e:	4629      	mov	r1, r5
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fa77 	bl	8002934 <__aeabi_d2f>
 8003446:	2100      	movs	r1, #0
 8003448:	4607      	mov	r7, r0
 800344a:	f7ff fb83 	bl	8002b54 <qfp_fcmp>
 800344e:	b308      	cbz	r0, 8003494 <atan+0x74>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8003450:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003454:	4620      	mov	r0, r4
 8003456:	4631      	mov	r1, r6
 8003458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <atan+0x9c>)
 800345e:	f7ff fe9b 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003462:	b938      	cbnz	r0, 8003474 <atan+0x54>
 8003464:	4620      	mov	r0, r4
 8003466:	4631      	mov	r1, r6
 8003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <atan+0x9c>)
 800346e:	f7ff fe47 	bl	8003100 <__wrap___aeabi_dcmple>
 8003472:	b138      	cbz	r0, 8003484 <atan+0x64>
    return atan2( y_over_x, 1 ); 
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
}
 8003478:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return atan2( y_over_x, 1 ); 
 800347c:	2200      	movs	r2, #0
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <atan+0xa0>)
 8003480:	f7ff bfa4 	b.w	80033cc <atan2>
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8003484:	2100      	movs	r1, #0
 8003486:	4638      	mov	r0, r7
 8003488:	f7ff fb64 	bl	8002b54 <qfp_fcmp>
 800348c:	2800      	cmp	r0, #0
 800348e:	dd0b      	ble.n	80034a8 <atan+0x88>
 8003490:	4c0c      	ldr	r4, [pc, #48]	; (80034c4 <atan+0xa4>)
 8003492:	4d0d      	ldr	r5, [pc, #52]	; (80034c8 <atan+0xa8>)
}
 8003494:	4620      	mov	r0, r4
 8003496:	4629      	mov	r1, r5
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isnan(y_over_x)) { return NAN; }
 800349c:	2400      	movs	r4, #0
 800349e:	4d0b      	ldr	r5, [pc, #44]	; (80034cc <atan+0xac>)
}
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }
 80034a8:	4638      	mov	r0, r7
 80034aa:	2100      	movs	r1, #0
 80034ac:	f7ff fb52 	bl	8002b54 <qfp_fcmp>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	dadf      	bge.n	8003474 <atan+0x54>
 80034b4:	e7ec      	b.n	8003490 <atan+0x70>
 80034b6:	bf00      	nop
 80034b8:	2000065c 	.word	0x2000065c
 80034bc:	7fefffff 	.word	0x7fefffff
 80034c0:	3ff00000 	.word	0x3ff00000
 80034c4:	54442d18 	.word	0x54442d18
 80034c8:	3ff921fb 	.word	0x3ff921fb
 80034cc:	7ff80000 	.word	0x7ff80000

080034d0 <asin>:
double asin(double x) { 
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float_usage[USAGE_ASIN]++;
 80034d4:	4f20      	ldr	r7, [pc, #128]	; (8003558 <asin+0x88>)
    if (isnan(x)) { return NAN; }
 80034d6:	4602      	mov	r2, r0
    float_usage[USAGE_ASIN]++;
 80034d8:	f897 6021 	ldrb.w	r6, [r7, #33]	; 0x21
    if (isnan(x)) { return NAN; }
 80034dc:	460b      	mov	r3, r1
    float_usage[USAGE_ASIN]++;
 80034de:	3601      	adds	r6, #1
 80034e0:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
double asin(double x) { 
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80034e8:	f7ff fe56 	bl	8003198 <__wrap___aeabi_dcmpun>
 80034ec:	b998      	cbnz	r0, 8003516 <asin+0x46>
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80034ee:	4629      	mov	r1, r5
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff fa1f 	bl	8002934 <__aeabi_d2f>
 80034f6:	2100      	movs	r1, #0
 80034f8:	4606      	mov	r6, r0
 80034fa:	f7ff fb2b 	bl	8002b54 <qfp_fcmp>
 80034fe:	b918      	cbnz	r0, 8003508 <asin+0x38>
}
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 8003508:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800350c:	4630      	mov	r0, r6
 800350e:	f7ff fb21 	bl	8002b54 <qfp_fcmp>
 8003512:	2800      	cmp	r0, #0
 8003514:	dd05      	ble.n	8003522 <asin+0x52>
    if (isnan(x)) { return NAN; }
 8003516:	2400      	movs	r4, #0
 8003518:	4d10      	ldr	r5, [pc, #64]	; (800355c <asin+0x8c>)
}
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8003522:	490f      	ldr	r1, [pc, #60]	; (8003560 <asin+0x90>)
 8003524:	4630      	mov	r0, r6
 8003526:	f7ff fb15 	bl	8002b54 <qfp_fcmp>
 800352a:	2800      	cmp	r0, #0
 800352c:	dbf3      	blt.n	8003516 <asin+0x46>
        qfp_fsqrt_fast(
 800352e:	4631      	mov	r1, r6
 8003530:	4630      	mov	r0, r6
 8003532:	f7ff fb1d 	bl	8002b70 <qfp_fmul>
 8003536:	4601      	mov	r1, r0
 8003538:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800353c:	f7ff fae6 	bl	8002b0c <qfp_fsub>
 8003540:	f7ff fb67 	bl	8002c12 <qfp_fsqrt_fast>
    return atan2(
 8003544:	f7ff f99e 	bl	8002884 <__aeabi_f2d>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4620      	mov	r0, r4
 800354e:	4629      	mov	r1, r5
}
 8003550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return atan2(
 8003554:	f7ff bf3a 	b.w	80033cc <atan2>
 8003558:	2000065c 	.word	0x2000065c
 800355c:	7ff80000 	.word	0x7ff80000
 8003560:	bf800000 	.word	0xbf800000

08003564 <sinh>:

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 8003564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_SINH]++;
 8003568:	4f25      	ldr	r7, [pc, #148]	; (8003600 <sinh+0x9c>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800356a:	4602      	mov	r2, r0
    float_usage[USAGE_SINH]++;
 800356c:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
    if (isnan(x)) { return NAN; }
 8003570:	460b      	mov	r3, r1
    float_usage[USAGE_SINH]++;
 8003572:	3601      	adds	r6, #1
 8003574:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
double sinh(double x) {
 8003578:	4604      	mov	r4, r0
 800357a:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 800357c:	f7ff fe0c 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003580:	bbb8      	cbnz	r0, 80035f2 <sinh+0x8e>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003582:	4629      	mov	r1, r5
 8003584:	4620      	mov	r0, r4
 8003586:	f7ff f9d5 	bl	8002934 <__aeabi_d2f>
 800358a:	2100      	movs	r1, #0
 800358c:	4606      	mov	r6, r0
 800358e:	f7ff fae1 	bl	8002b54 <qfp_fcmp>
 8003592:	b188      	cbz	r0, 80035b8 <sinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8003594:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8003598:	4620      	mov	r0, r4
 800359a:	4639      	mov	r1, r7
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <sinh+0xa0>)
 80035a2:	f7ff fdf9 	bl	8003198 <__wrap___aeabi_dcmpun>
 80035a6:	b958      	cbnz	r0, 80035c0 <sinh+0x5c>
 80035a8:	4620      	mov	r0, r4
 80035aa:	4639      	mov	r1, r7
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <sinh+0xa0>)
 80035b2:	f7ff fda5 	bl	8003100 <__wrap___aeabi_dcmple>
 80035b6:	b918      	cbnz	r0, 80035c0 <sinh+0x5c>
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 80035b8:	4620      	mov	r0, r4
 80035ba:	4629      	mov	r1, r5
 80035bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7ff fc00 	bl	8002dc6 <qfp_fexp>
 80035c6:	4604      	mov	r4, r0
 80035c8:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80035cc:	f7ff fbfb 	bl	8002dc6 <qfp_fexp>
 80035d0:	4601      	mov	r1, r0
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff fa9a 	bl	8002b0c <qfp_fsub>
 80035d8:	4601      	mov	r1, r0
 80035da:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80035de:	f7ff fac7 	bl	8002b70 <qfp_fmul>
 80035e2:	f7ff f94f 	bl	8002884 <__aeabi_f2d>
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
}
 80035ea:	4620      	mov	r0, r4
 80035ec:	4629      	mov	r1, r5
 80035ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80035f2:	2400      	movs	r4, #0
 80035f4:	4d04      	ldr	r5, [pc, #16]	; (8003608 <sinh+0xa4>)
}
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035fe:	bf00      	nop
 8003600:	2000065c 	.word	0x2000065c
 8003604:	7fefffff 	.word	0x7fefffff
 8003608:	7ff80000 	.word	0x7ff80000

0800360c <cosh>:
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 800360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_COSH]++;
 8003610:	4f23      	ldr	r7, [pc, #140]	; (80036a0 <cosh+0x94>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003612:	4602      	mov	r2, r0
    float_usage[USAGE_COSH]++;
 8003614:	f897 6024 	ldrb.w	r6, [r7, #36]	; 0x24
    if (isnan(x)) { return NAN; }
 8003618:	460b      	mov	r3, r1
    float_usage[USAGE_COSH]++;
 800361a:	3601      	adds	r6, #1
 800361c:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
double cosh(double x) {
 8003620:	4605      	mov	r5, r0
 8003622:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 8003624:	f7ff fdb8 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003628:	bbb0      	cbnz	r0, 8003698 <cosh+0x8c>
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	f7ff f981 	bl	8002934 <__aeabi_d2f>
 8003632:	2100      	movs	r1, #0
 8003634:	4606      	mov	r6, r0
 8003636:	f7ff fa8d 	bl	8002b54 <qfp_fcmp>
 800363a:	b1a8      	cbz	r0, 8003668 <cosh+0x5c>

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞
 800363c:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003640:	4628      	mov	r0, r5
 8003642:	4639      	mov	r1, r7
 8003644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <cosh+0x98>)
 800364a:	f7ff fda5 	bl	8003198 <__wrap___aeabi_dcmpun>
 800364e:	b970      	cbnz	r0, 800366e <cosh+0x62>
 8003650:	4628      	mov	r0, r5
 8003652:	4639      	mov	r1, r7
 8003654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <cosh+0x98>)
 800365a:	f7ff fd51 	bl	8003100 <__wrap___aeabi_dcmple>
 800365e:	b930      	cbnz	r0, 800366e <cosh+0x62>
 8003660:	4628      	mov	r0, r5
 8003662:	4621      	mov	r1, r4
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8003664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 8003668:	490f      	ldr	r1, [pc, #60]	; (80036a8 <cosh+0x9c>)
}
 800366a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fmul(
 800366e:	4630      	mov	r0, r6
 8003670:	f7ff fba9 	bl	8002dc6 <qfp_fexp>
 8003674:	4604      	mov	r4, r0
 8003676:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 800367a:	f7ff fba4 	bl	8002dc6 <qfp_fexp>
 800367e:	4601      	mov	r1, r0
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fa46 	bl	8002b12 <qfp_fadd>
 8003686:	4601      	mov	r1, r0
 8003688:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800368c:	f7ff fa70 	bl	8002b70 <qfp_fmul>
 8003690:	f7ff f8f8 	bl	8002884 <__aeabi_f2d>
}
 8003694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003698:	2000      	movs	r0, #0
 800369a:	4904      	ldr	r1, [pc, #16]	; (80036ac <cosh+0xa0>)
}
 800369c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a0:	2000065c 	.word	0x2000065c
 80036a4:	7fefffff 	.word	0x7fefffff
 80036a8:	3ff00000 	.word	0x3ff00000
 80036ac:	7ff80000 	.word	0x7ff80000

080036b0 <tanh>:
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 80036b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TANH]++;
 80036b4:	4f28      	ldr	r7, [pc, #160]	; (8003758 <tanh+0xa8>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80036b6:	4602      	mov	r2, r0
    float_usage[USAGE_TANH]++;
 80036b8:	f897 6025 	ldrb.w	r6, [r7, #37]	; 0x25
    if (isnan(x)) { return NAN; }
 80036bc:	460b      	mov	r3, r1
    float_usage[USAGE_TANH]++;
 80036be:	3601      	adds	r6, #1
 80036c0:	f887 6025 	strb.w	r6, [r7, #37]	; 0x25
double tanh(double x) {
 80036c4:	4604      	mov	r4, r0
 80036c6:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80036c8:	f7ff fd66 	bl	8003198 <__wrap___aeabi_dcmpun>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d13e      	bne.n	800374e <tanh+0x9e>

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80036d0:	4629      	mov	r1, r5
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7ff f92e 	bl	8002934 <__aeabi_d2f>
 80036d8:	2100      	movs	r1, #0
 80036da:	4606      	mov	r6, r0
 80036dc:	f7ff fa3a 	bl	8002b54 <qfp_fcmp>
 80036e0:	b1a8      	cbz	r0, 800370e <tanh+0x5e>

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 80036e2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <tanh+0xac>)
 80036f0:	f7ff fd52 	bl	8003198 <__wrap___aeabi_dcmpun>
 80036f4:	b978      	cbnz	r0, 8003716 <tanh+0x66>
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <tanh+0xac>)
 8003700:	f7ff fcfe 	bl	8003100 <__wrap___aeabi_dcmple>
 8003704:	b938      	cbnz	r0, 8003716 <tanh+0x66>
 8003706:	4d16      	ldr	r5, [pc, #88]	; (8003760 <tanh+0xb0>)
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8003708:	4629      	mov	r1, r5
 800370a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 800370e:	4620      	mov	r0, r4
}
 8003710:	4629      	mov	r1, r5
 8003712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float e2x = qfp_fexp(  //  e^{2x}
 8003716:	4631      	mov	r1, r6
 8003718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800371c:	f7ff fa28 	bl	8002b70 <qfp_fmul>
 8003720:	f7ff fb51 	bl	8002dc6 <qfp_fexp>
    return qfp_fdiv_fast(
 8003724:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    float e2x = qfp_fexp(  //  e^{2x}
 8003728:	4605      	mov	r5, r0
    return qfp_fdiv_fast(
 800372a:	f7ff f9ef 	bl	8002b0c <qfp_fsub>
 800372e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003732:	4604      	mov	r4, r0
 8003734:	4628      	mov	r0, r5
 8003736:	f7ff f9ec 	bl	8002b12 <qfp_fadd>
 800373a:	4601      	mov	r1, r0
 800373c:	4620      	mov	r0, r4
 800373e:	f7ff fa40 	bl	8002bc2 <qfp_fdiv_fast>
 8003742:	f7ff f89f 	bl	8002884 <__aeabi_f2d>
 8003746:	460d      	mov	r5, r1
}
 8003748:	4629      	mov	r1, r5
 800374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 800374e:	4d05      	ldr	r5, [pc, #20]	; (8003764 <tanh+0xb4>)
 8003750:	2000      	movs	r0, #0
}
 8003752:	4629      	mov	r1, r5
 8003754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003758:	2000065c 	.word	0x2000065c
 800375c:	7fefffff 	.word	0x7fefffff
 8003760:	3ff00000 	.word	0x3ff00000
 8003764:	7ff80000 	.word	0x7ff80000

08003768 <asinh>:

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ASINH]++;
 800376c:	4f24      	ldr	r7, [pc, #144]	; (8003800 <asinh+0x98>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800376e:	4602      	mov	r2, r0
    float_usage[USAGE_ASINH]++;
 8003770:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    if (isnan(x)) { return NAN; }
 8003774:	460b      	mov	r3, r1
    float_usage[USAGE_ASINH]++;
 8003776:	3601      	adds	r6, #1
 8003778:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
double asinh(double x) {
 800377c:	4604      	mov	r4, r0
 800377e:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003780:	f7ff fd0a 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003784:	bbb0      	cbnz	r0, 80037f4 <asinh+0x8c>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003786:	4629      	mov	r1, r5
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff f8d3 	bl	8002934 <__aeabi_d2f>
 800378e:	2100      	movs	r1, #0
 8003790:	4607      	mov	r7, r0
 8003792:	f7ff f9df 	bl	8002b54 <qfp_fcmp>
 8003796:	b188      	cbz	r0, 80037bc <asinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8003798:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800379c:	4620      	mov	r0, r4
 800379e:	4631      	mov	r1, r6
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <asinh+0x9c>)
 80037a6:	f7ff fcf7 	bl	8003198 <__wrap___aeabi_dcmpun>
 80037aa:	b958      	cbnz	r0, 80037c4 <asinh+0x5c>
 80037ac:	4620      	mov	r0, r4
 80037ae:	4631      	mov	r1, r6
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <asinh+0x9c>)
 80037b6:	f7ff fca3 	bl	8003100 <__wrap___aeabi_dcmple>
 80037ba:	b918      	cbnz	r0, 80037c4 <asinh+0x5c>
                    1.0f
                )
            )
        )
    );
}
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 80037c4:	4639      	mov	r1, r7
 80037c6:	4638      	mov	r0, r7
 80037c8:	f7ff f9d2 	bl	8002b70 <qfp_fmul>
 80037cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037d0:	f7ff f99f 	bl	8002b12 <qfp_fadd>
 80037d4:	f7ff fa1d 	bl	8002c12 <qfp_fsqrt_fast>
 80037d8:	4601      	mov	r1, r0
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff f999 	bl	8002b12 <qfp_fadd>
 80037e0:	f7ff fb26 	bl	8002e30 <qfp_fln>
 80037e4:	f7ff f84e 	bl	8002884 <__aeabi_f2d>
 80037e8:	4604      	mov	r4, r0
 80037ea:	460d      	mov	r5, r1
}
 80037ec:	4620      	mov	r0, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80037f4:	2400      	movs	r4, #0
 80037f6:	4d04      	ldr	r5, [pc, #16]	; (8003808 <asinh+0xa0>)
}
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003800:	2000065c 	.word	0x2000065c
 8003804:	7fefffff 	.word	0x7fefffff
 8003808:	7ff80000 	.word	0x7ff80000

0800380c <acosh>:
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 800380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ACOSH]++;
 8003810:	4f26      	ldr	r7, [pc, #152]	; (80038ac <acosh+0xa0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003812:	4602      	mov	r2, r0
    float_usage[USAGE_ACOSH]++;
 8003814:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
    if (isnan(x)) { return NAN; }
 8003818:	460b      	mov	r3, r1
    float_usage[USAGE_ACOSH]++;
 800381a:	3601      	adds	r6, #1
 800381c:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
double acosh(double x) {
 8003820:	4605      	mov	r5, r0
 8003822:	460c      	mov	r4, r1
    if (isnan(x)) { return NAN; }
 8003824:	f7ff fcb8 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003828:	bb30      	cbnz	r0, 8003878 <acosh+0x6c>

    //  If the argument is less than 1, NaN is returned
    if (qfp_fcmp(x, 1) < 0) { return NAN; }
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff f881 	bl	8002934 <__aeabi_d2f>
 8003832:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003836:	4606      	mov	r6, r0
 8003838:	f7ff f98c 	bl	8002b54 <qfp_fcmp>
 800383c:	2800      	cmp	r0, #0
 800383e:	db1b      	blt.n	8003878 <acosh+0x6c>

    //  If the argument is 1, 0 is returned
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8003840:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003844:	4630      	mov	r0, r6
 8003846:	f7ff f985 	bl	8002b54 <qfp_fcmp>
 800384a:	b360      	cbz	r0, 80038a6 <acosh+0x9a>

    //  If the argument is +∞, it is returned unmodified
    if (isinf(x)) { return x; }
 800384c:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8003850:	4628      	mov	r0, r5
 8003852:	4639      	mov	r1, r7
 8003854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <acosh+0xa4>)
 800385a:	f7ff fc9d 	bl	8003198 <__wrap___aeabi_dcmpun>
 800385e:	b978      	cbnz	r0, 8003880 <acosh+0x74>
 8003860:	4628      	mov	r0, r5
 8003862:	4639      	mov	r1, r7
 8003864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <acosh+0xa4>)
 800386a:	f7ff fc49 	bl	8003100 <__wrap___aeabi_dcmple>
 800386e:	b938      	cbnz	r0, 8003880 <acosh+0x74>
 8003870:	4628      	mov	r0, r5
 8003872:	4621      	mov	r1, r4
                    1.0f
                )
            )
        )
    );
}
 8003874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003878:	2000      	movs	r0, #0
 800387a:	490e      	ldr	r1, [pc, #56]	; (80038b4 <acosh+0xa8>)
}
 800387c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return qfp_fln(
 8003880:	4631      	mov	r1, r6
 8003882:	4630      	mov	r0, r6
 8003884:	f7ff f974 	bl	8002b70 <qfp_fmul>
 8003888:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800388c:	f7ff f93e 	bl	8002b0c <qfp_fsub>
 8003890:	f7ff f9bf 	bl	8002c12 <qfp_fsqrt_fast>
 8003894:	4601      	mov	r1, r0
 8003896:	4630      	mov	r0, r6
 8003898:	f7ff f93b 	bl	8002b12 <qfp_fadd>
 800389c:	f7ff fac8 	bl	8002e30 <qfp_fln>
 80038a0:	f7fe fff0 	bl	8002884 <__aeabi_f2d>
 80038a4:	e7ea      	b.n	800387c <acosh+0x70>
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 80038a6:	4601      	mov	r1, r0
}
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ac:	2000065c 	.word	0x2000065c
 80038b0:	7fefffff 	.word	0x7fefffff
 80038b4:	7ff80000 	.word	0x7ff80000

080038b8 <atanh>:
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATANH]++;
 80038ba:	4f2c      	ldr	r7, [pc, #176]	; (800396c <atanh+0xb4>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80038bc:	4602      	mov	r2, r0
    float_usage[USAGE_ATANH]++;
 80038be:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
    if (isnan(x)) { return NAN; }
 80038c2:	460b      	mov	r3, r1
    float_usage[USAGE_ATANH]++;
 80038c4:	3601      	adds	r6, #1
 80038c6:	f887 6028 	strb.w	r6, [r7, #40]	; 0x28
double atanh(double x) {
 80038ca:	4604      	mov	r4, r0
 80038cc:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 80038ce:	f7ff fc63 	bl	8003198 <__wrap___aeabi_dcmpun>
 80038d2:	b9f0      	cbnz	r0, 8003912 <atanh+0x5a>

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80038d4:	4629      	mov	r1, r5
 80038d6:	4620      	mov	r0, r4
 80038d8:	f7ff f82c 	bl	8002934 <__aeabi_d2f>
 80038dc:	2100      	movs	r1, #0
 80038de:	4606      	mov	r6, r0
 80038e0:	f7ff f938 	bl	8002b54 <qfp_fcmp>
 80038e4:	b910      	cbnz	r0, 80038ec <atanh+0x34>
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 80038e6:	4620      	mov	r0, r4
 80038e8:	4629      	mov	r1, r5
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 80038ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038f0:	4630      	mov	r0, r6
 80038f2:	f7ff f92f 	bl	8002b54 <qfp_fcmp>
 80038f6:	b920      	cbnz	r0, 8003902 <atanh+0x4a>
 80038f8:	2400      	movs	r4, #0
 80038fa:	4d1d      	ldr	r5, [pc, #116]	; (8003970 <atanh+0xb8>)
}
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 8003902:	491c      	ldr	r1, [pc, #112]	; (8003974 <atanh+0xbc>)
 8003904:	4630      	mov	r0, r6
 8003906:	f7ff f925 	bl	8002b54 <qfp_fcmp>
 800390a:	b938      	cbnz	r0, 800391c <atanh+0x64>
 800390c:	2400      	movs	r4, #0
 800390e:	4d1a      	ldr	r5, [pc, #104]	; (8003978 <atanh+0xc0>)
 8003910:	e7e9      	b.n	80038e6 <atanh+0x2e>
    if (isnan(x)) { return NAN; }
 8003912:	2400      	movs	r4, #0
 8003914:	4d19      	ldr	r5, [pc, #100]	; (800397c <atanh+0xc4>)
}
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
 800391c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003920:	4630      	mov	r0, r6
 8003922:	f7ff f917 	bl	8002b54 <qfp_fcmp>
 8003926:	2800      	cmp	r0, #0
 8003928:	dcf3      	bgt.n	8003912 <atanh+0x5a>
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 800392a:	4912      	ldr	r1, [pc, #72]	; (8003974 <atanh+0xbc>)
 800392c:	4630      	mov	r0, r6
 800392e:	f7ff f911 	bl	8002b54 <qfp_fcmp>
 8003932:	2800      	cmp	r0, #0
 8003934:	dbed      	blt.n	8003912 <atanh+0x5a>
    return qfp_fmul(
 8003936:	4631      	mov	r1, r6
 8003938:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800393c:	f7ff f8e9 	bl	8002b12 <qfp_fadd>
 8003940:	4631      	mov	r1, r6
 8003942:	4604      	mov	r4, r0
 8003944:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003948:	f7ff f8e0 	bl	8002b0c <qfp_fsub>
 800394c:	4601      	mov	r1, r0
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff f937 	bl	8002bc2 <qfp_fdiv_fast>
 8003954:	f7ff fa6c 	bl	8002e30 <qfp_fln>
 8003958:	4601      	mov	r1, r0
 800395a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800395e:	f7ff f907 	bl	8002b70 <qfp_fmul>
 8003962:	f7fe ff8f 	bl	8002884 <__aeabi_f2d>
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	e7bc      	b.n	80038e6 <atanh+0x2e>
 800396c:	2000065c 	.word	0x2000065c
 8003970:	7ff00000 	.word	0x7ff00000
 8003974:	bf800000 	.word	0xbf800000
 8003978:	fff00000 	.word	0xfff00000
 800397c:	7ff80000 	.word	0x7ff80000

08003980 <trunc>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 8003980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TRUNC]++;
 8003984:	4f1e      	ldr	r7, [pc, #120]	; (8003a00 <trunc+0x80>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003986:	4602      	mov	r2, r0
    float_usage[USAGE_TRUNC]++;
 8003988:	f897 6029 	ldrb.w	r6, [r7, #41]	; 0x29
    if (isnan(x)) { return NAN; }
 800398c:	460b      	mov	r3, r1
    float_usage[USAGE_TRUNC]++;
 800398e:	3601      	adds	r6, #1
 8003990:	f887 6029 	strb.w	r6, [r7, #41]	; 0x29
double trunc(double x) { 
 8003994:	4604      	mov	r4, r0
 8003996:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003998:	f7ff fbfe 	bl	8003198 <__wrap___aeabi_dcmpun>
 800399c:	bb68      	cbnz	r0, 80039fa <trunc+0x7a>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 800399e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80039a2:	4620      	mov	r0, r4
 80039a4:	4631      	mov	r1, r6
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <trunc+0x84>)
 80039ac:	f7ff fbf4 	bl	8003198 <__wrap___aeabi_dcmpun>
 80039b0:	b958      	cbnz	r0, 80039ca <trunc+0x4a>
 80039b2:	4620      	mov	r0, r4
 80039b4:	4631      	mov	r1, r6
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <trunc+0x84>)
 80039bc:	f7ff fba0 	bl	8003100 <__wrap___aeabi_dcmple>
 80039c0:	b918      	cbnz	r0, 80039ca <trunc+0x4a>

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
    if (floored < 0) { return floored + 1; }
    return floored;
}
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80039ca:	4629      	mov	r1, r5
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7fe ffb1 	bl	8002934 <__aeabi_d2f>
 80039d2:	2100      	movs	r1, #0
 80039d4:	4606      	mov	r6, r0
 80039d6:	f7ff f8bd 	bl	8002b54 <qfp_fcmp>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d0f1      	beq.n	80039c2 <trunc+0x42>
    int floored = qfp_float2int(x);
 80039de:	4630      	mov	r0, r6
 80039e0:	f7ff f952 	bl	8002c88 <qfp_float2int>
    if (floored < 0) { return floored + 1; }
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	bfb8      	it	lt
 80039e8:	1c58      	addlt	r0, r3, #1
    return floored;
 80039ea:	f7fe ff39 	bl	8002860 <__aeabi_i2d>
 80039ee:	4604      	mov	r4, r0
 80039f0:	460d      	mov	r5, r1
}
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 80039fa:	2400      	movs	r4, #0
 80039fc:	4d02      	ldr	r5, [pc, #8]	; (8003a08 <trunc+0x88>)
 80039fe:	e7e0      	b.n	80039c2 <trunc+0x42>
 8003a00:	2000065c 	.word	0x2000065c
 8003a04:	7fefffff 	.word	0x7fefffff
 8003a08:	7ff80000 	.word	0x7ff80000

08003a0c <floor>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 8003a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_FLOOR]++;
 8003a10:	4f1d      	ldr	r7, [pc, #116]	; (8003a88 <floor+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003a12:	4602      	mov	r2, r0
    float_usage[USAGE_FLOOR]++;
 8003a14:	f897 602a 	ldrb.w	r6, [r7, #42]	; 0x2a
    if (isnan(x)) { return NAN; }
 8003a18:	460b      	mov	r3, r1
    float_usage[USAGE_FLOOR]++;
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
double floor(double x) { 
 8003a20:	4604      	mov	r4, r0
 8003a22:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003a24:	f7ff fbb8 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003a28:	bb50      	cbnz	r0, 8003a80 <floor+0x74>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8003a2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4631      	mov	r1, r6
 8003a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <floor+0x80>)
 8003a38:	f7ff fbae 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003a3c:	b958      	cbnz	r0, 8003a56 <floor+0x4a>
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4631      	mov	r1, r6
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <floor+0x80>)
 8003a48:	f7ff fb5a 	bl	8003100 <__wrap___aeabi_dcmple>
 8003a4c:	b918      	cbnz	r0, 8003a56 <floor+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
    return floored;
}
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003a56:	4629      	mov	r1, r5
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fe ff6b 	bl	8002934 <__aeabi_d2f>
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4606      	mov	r6, r0
 8003a62:	f7ff f877 	bl	8002b54 <qfp_fcmp>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d0f1      	beq.n	8003a4e <floor+0x42>
    int floored = qfp_float2int(x);
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff f90c 	bl	8002c88 <qfp_float2int>
    return floored;
 8003a70:	f7fe fef6 	bl	8002860 <__aeabi_i2d>
 8003a74:	4604      	mov	r4, r0
 8003a76:	460d      	mov	r5, r1
}
 8003a78:	4620      	mov	r0, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003a80:	2400      	movs	r4, #0
 8003a82:	4d03      	ldr	r5, [pc, #12]	; (8003a90 <floor+0x84>)
 8003a84:	e7e3      	b.n	8003a4e <floor+0x42>
 8003a86:	bf00      	nop
 8003a88:	2000065c 	.word	0x2000065c
 8003a8c:	7fefffff 	.word	0x7fefffff
 8003a90:	7ff80000 	.word	0x7ff80000

08003a94 <ceil>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_CEIL]++;
 8003a98:	4f1d      	ldr	r7, [pc, #116]	; (8003b10 <ceil+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8003a9a:	4602      	mov	r2, r0
    float_usage[USAGE_CEIL]++;
 8003a9c:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
    if (isnan(x)) { return NAN; }
 8003aa0:	460b      	mov	r3, r1
    float_usage[USAGE_CEIL]++;
 8003aa2:	3601      	adds	r6, #1
 8003aa4:	f887 602b 	strb.w	r6, [r7, #43]	; 0x2b
double ceil(double x) { 
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	460d      	mov	r5, r1
    if (isnan(x)) { return NAN; }
 8003aac:	f7ff fb74 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003ab0:	bb58      	cbnz	r0, 8003b0a <ceil+0x76>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8003ab2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4631      	mov	r1, r6
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <ceil+0x80>)
 8003ac0:	f7ff fb6a 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003ac4:	b958      	cbnz	r0, 8003ade <ceil+0x4a>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4631      	mov	r1, r6
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <ceil+0x80>)
 8003ad0:	f7ff fb16 	bl	8003100 <__wrap___aeabi_dcmple>
 8003ad4:	b918      	cbnz	r0, 8003ade <ceil+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
    return floored + 1;
}
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8003ade:	4629      	mov	r1, r5
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f7fe ff27 	bl	8002934 <__aeabi_d2f>
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4606      	mov	r6, r0
 8003aea:	f7ff f833 	bl	8002b54 <qfp_fcmp>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0f1      	beq.n	8003ad6 <ceil+0x42>
    int floored = qfp_float2int(x);
 8003af2:	4630      	mov	r0, r6
 8003af4:	f7ff f8c8 	bl	8002c88 <qfp_float2int>
    return floored + 1;
 8003af8:	3001      	adds	r0, #1
 8003afa:	f7fe feb1 	bl	8002860 <__aeabi_i2d>
 8003afe:	4604      	mov	r4, r0
 8003b00:	460d      	mov	r5, r1
}
 8003b02:	4620      	mov	r0, r4
 8003b04:	4629      	mov	r1, r5
 8003b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (isnan(x)) { return NAN; }
 8003b0a:	2400      	movs	r4, #0
 8003b0c:	4d02      	ldr	r5, [pc, #8]	; (8003b18 <ceil+0x84>)
 8003b0e:	e7e2      	b.n	8003ad6 <ceil+0x42>
 8003b10:	2000065c 	.word	0x2000065c
 8003b14:	7fefffff 	.word	0x7fefffff
 8003b18:	7ff80000 	.word	0x7ff80000

08003b1c <fmod>:
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
    float_usage[USAGE_FMOD]++;
 8003b1c:	f8df c134 	ldr.w	ip, [pc, #308]	; 8003c54 <fmod+0x138>
double fmod(double x, double y) { 
 8003b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_FMOD]++;
 8003b24:	f89c 602c 	ldrb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 8003b28:	4692      	mov	sl, r2
    float_usage[USAGE_FMOD]++;
 8003b2a:	3601      	adds	r6, #1
double fmod(double x, double y) { 
 8003b2c:	461f      	mov	r7, r3
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
    float_usage[USAGE_FMOD]++;
 8003b32:	f88c 602c 	strb.w	r6, [ip, #44]	; 0x2c
double fmod(double x, double y) { 
 8003b36:	4605      	mov	r5, r0
 8003b38:	460c      	mov	r4, r1
    if (isnan(x) || isnan(y)) { return NAN; }
 8003b3a:	f7ff fb2d 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003b3e:	bb10      	cbnz	r0, 8003b86 <fmod+0x6a>
 8003b40:	4652      	mov	r2, sl
 8003b42:	4650      	mov	r0, sl
 8003b44:	463b      	mov	r3, r7
 8003b46:	4639      	mov	r1, r7
 8003b48:	f7ff fb26 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003b4c:	b9d8      	cbnz	r0, 8003b86 <fmod+0x6a>

    // If x is ±0 and y is not zero, ±0 is returned
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7fe feef 	bl	8002934 <__aeabi_d2f>
 8003b56:	2100      	movs	r1, #0
 8003b58:	4680      	mov	r8, r0
 8003b5a:	f7fe fffb 	bl	8002b54 <qfp_fcmp>
 8003b5e:	4606      	mov	r6, r0
 8003b60:	b398      	cbz	r0, 8003bca <fmod+0xae>

    // If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
    if (isinf(x) && !isnan(y)) { return NAN; }
 8003b62:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8003b66:	4628      	mov	r0, r5
 8003b68:	4631      	mov	r1, r6
 8003b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <fmod+0x130>)
 8003b70:	f7ff fb12 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003b74:	b958      	cbnz	r0, 8003b8e <fmod+0x72>
 8003b76:	4628      	mov	r0, r5
 8003b78:	4631      	mov	r1, r6
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <fmod+0x130>)
 8003b80:	f7ff fabe 	bl	8003100 <__wrap___aeabi_dcmple>
 8003b84:	b918      	cbnz	r0, 8003b8e <fmod+0x72>
    if (isnan(x) || isnan(y)) { return NAN; }
 8003b86:	2000      	movs	r0, #0
 8003b88:	4931      	ldr	r1, [pc, #196]	; (8003c50 <fmod+0x134>)
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (qfp_fcmp(y, 0) == 0 && !isnan(x)) { return NAN; }
 8003b8e:	4639      	mov	r1, r7
 8003b90:	4650      	mov	r0, sl
 8003b92:	f7fe fecf 	bl	8002934 <__aeabi_d2f>
 8003b96:	2100      	movs	r1, #0
 8003b98:	f7fe ffdc 	bl	8002b54 <qfp_fcmp>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d0f2      	beq.n	8003b86 <fmod+0x6a>
    if (isinf(y) && !isinf(x)) { return x; }
 8003ba0:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	4639      	mov	r1, r7
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <fmod+0x130>)
 8003bae:	f7ff faf3 	bl	8003198 <__wrap___aeabi_dcmpun>
 8003bb2:	b9b8      	cbnz	r0, 8003be4 <fmod+0xc8>
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	4639      	mov	r1, r7
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <fmod+0x130>)
 8003bbe:	f7ff fa9f 	bl	8003100 <__wrap___aeabi_dcmple>
 8003bc2:	b978      	cbnz	r0, 8003be4 <fmod+0xc8>
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	e7df      	b.n	8003b8a <fmod+0x6e>
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8003bca:	4639      	mov	r1, r7
 8003bcc:	4650      	mov	r0, sl
 8003bce:	f7fe feb1 	bl	8002934 <__aeabi_d2f>
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f7fe ffbe 	bl	8002b54 <qfp_fcmp>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d0c2      	beq.n	8003b62 <fmod+0x46>
 8003bdc:	4630      	mov	r0, r6
 8003bde:	4631      	mov	r1, r6
}
 8003be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
 8003be4:	4628      	mov	r0, r5
 8003be6:	4631      	mov	r1, r6
 8003be8:	f7fe fea4 	bl	8002934 <__aeabi_d2f>
 8003bec:	4639      	mov	r1, r7
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4650      	mov	r0, sl
 8003bf2:	f7fe fe9f 	bl	8002934 <__aeabi_d2f>
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7fe ffe1 	bl	8002bc2 <qfp_fdiv_fast>
 8003c00:	f7fe fe40 	bl	8002884 <__aeabi_f2d>
 8003c04:	f7ff febc 	bl	8003980 <trunc>
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8003c08:	f7fe fe94 	bl	8002934 <__aeabi_d2f>
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fe ffaf 	bl	8002b70 <qfp_fmul>
 8003c12:	4601      	mov	r1, r0
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7fe ff79 	bl	8002b0c <qfp_fsub>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003c1a:	2100      	movs	r1, #0
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8003c1c:	4604      	mov	r4, r0
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003c1e:	f7fe ff99 	bl	8002b54 <qfp_fcmp>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	db0b      	blt.n	8003c3e <fmod+0x122>
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
 8003c26:	4640      	mov	r0, r8
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f7fe ff93 	bl	8002b54 <qfp_fcmp>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	bfb8      	it	lt
 8003c32:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7fe fe24 	bl	8002884 <__aeabi_f2d>
 8003c3c:	e7a5      	b.n	8003b8a <fmod+0x6e>
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8003c3e:	4620      	mov	r0, r4
 8003c40:	4629      	mov	r1, r5
 8003c42:	f7fe ff66 	bl	8002b12 <qfp_fadd>
 8003c46:	4604      	mov	r4, r0
 8003c48:	e7ed      	b.n	8003c26 <fmod+0x10a>
 8003c4a:	bf00      	nop
 8003c4c:	7fefffff 	.word	0x7fefffff
 8003c50:	7ff80000 	.word	0x7ff80000
 8003c54:	2000065c 	.word	0x2000065c

08003c58 <_strtol_l.isra.0>:

/*
 * Convert a string to a long integer.
 */
static long
_strtol_l (struct _reent *rptr, const char *__restrict nptr,
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	   char **__restrict endptr, int base, locale_t loc)
{
	register const unsigned char *s = (const unsigned char *)nptr;
 8003c5c:	460d      	mov	r5, r1
_strtol_l (struct _reent *rptr, const char *__restrict nptr,
 8003c5e:	4684      	mov	ip, r0
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace_l(c, loc));
 8003c60:	4837      	ldr	r0, [pc, #220]	; (8003d40 <_strtol_l.isra.0+0xe8>)
		c = *s++;
 8003c62:	462f      	mov	r7, r5
 8003c64:	f817 4b01 	ldrb.w	r4, [r7], #1
	} while (isspace_l(c, loc));
 8003c68:	5c26      	ldrb	r6, [r4, r0]
 8003c6a:	f016 0608 	ands.w	r6, r6, #8
 8003c6e:	d134      	bne.n	8003cda <_strtol_l.isra.0+0x82>
	if (c == '-') {
 8003c70:	2c2d      	cmp	r4, #45	; 0x2d
 8003c72:	d134      	bne.n	8003cde <_strtol_l.isra.0+0x86>
		neg = 1;
 8003c74:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
 8003c78:	786c      	ldrb	r4, [r5, #1]
 8003c7a:	1caf      	adds	r7, r5, #2
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <_strtol_l.isra.0+0xe0>
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d109      	bne.n	8003c98 <_strtol_l.isra.0+0x40>
 8003c84:	2c30      	cmp	r4, #48	; 0x30
 8003c86:	d107      	bne.n	8003c98 <_strtol_l.isra.0+0x40>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8003c88:	7838      	ldrb	r0, [r7, #0]
 8003c8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c8e:	2858      	cmp	r0, #88	; 0x58
 8003c90:	d14d      	bne.n	8003d2e <_strtol_l.isra.0+0xd6>
		c = s[1];
		s += 2;
		base = 16;
 8003c92:	2310      	movs	r3, #16
		c = s[1];
 8003c94:	787c      	ldrb	r4, [r7, #1]
		s += 2;
 8003c96:	3702      	adds	r7, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8003c98:	f1be 0f00 	cmp.w	lr, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8003ca2:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8003ca6:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
 8003ca8:	fbb8 f9f3 	udiv	r9, r8, r3
	for (acc = 0, any = 0;; c = *s++) {
 8003cac:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
 8003cae:	fb03 8a19 	mls	sl, r3, r9, r8
		if (c >= '0' && c <= '9')
 8003cb2:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8003cb6:	2d09      	cmp	r5, #9
 8003cb8:	d817      	bhi.n	8003cea <_strtol_l.isra.0+0x92>
			c -= '0';
 8003cba:	462c      	mov	r4, r5
			c -= 'A' - 10;
		else if (c >= 'a' && c <= 'z')
			c -= 'a' - 10;
		else
			break;
		if (c >= base)
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	dd23      	ble.n	8003d08 <_strtol_l.isra.0+0xb0>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
 8003cc0:	1c75      	adds	r5, r6, #1
 8003cc2:	d007      	beq.n	8003cd4 <_strtol_l.isra.0+0x7c>
 8003cc4:	4581      	cmp	r9, r0
 8003cc6:	d31c      	bcc.n	8003d02 <_strtol_l.isra.0+0xaa>
 8003cc8:	d101      	bne.n	8003cce <_strtol_l.isra.0+0x76>
 8003cca:	45a2      	cmp	sl, r4
 8003ccc:	db19      	blt.n	8003d02 <_strtol_l.isra.0+0xaa>
			any = -1;
		else {
			any = 1;
 8003cce:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
 8003cd0:	fb00 4003 	mla	r0, r0, r3, r4
	for (acc = 0, any = 0;; c = *s++) {
 8003cd4:	f817 4b01 	ldrb.w	r4, [r7], #1
 8003cd8:	e7eb      	b.n	8003cb2 <_strtol_l.isra.0+0x5a>
	} while (isspace_l(c, loc));
 8003cda:	463d      	mov	r5, r7
 8003cdc:	e7c1      	b.n	8003c62 <_strtol_l.isra.0+0xa>
	} else if (c == '+')
 8003cde:	2c2b      	cmp	r4, #43	; 0x2b
		c = *s++;
 8003ce0:	bf04      	itt	eq
 8003ce2:	1caf      	addeq	r7, r5, #2
 8003ce4:	786c      	ldrbeq	r4, [r5, #1]
	register int neg = 0, any, cutlim;
 8003ce6:	46b6      	mov	lr, r6
 8003ce8:	e7c8      	b.n	8003c7c <_strtol_l.isra.0+0x24>
		else if (c >= 'A' && c <= 'Z')
 8003cea:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8003cee:	2d19      	cmp	r5, #25
 8003cf0:	d801      	bhi.n	8003cf6 <_strtol_l.isra.0+0x9e>
			c -= 'A' - 10;
 8003cf2:	3c37      	subs	r4, #55	; 0x37
 8003cf4:	e7e2      	b.n	8003cbc <_strtol_l.isra.0+0x64>
		else if (c >= 'a' && c <= 'z')
 8003cf6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8003cfa:	2d19      	cmp	r5, #25
 8003cfc:	d804      	bhi.n	8003d08 <_strtol_l.isra.0+0xb0>
			c -= 'a' - 10;
 8003cfe:	3c57      	subs	r4, #87	; 0x57
 8003d00:	e7dc      	b.n	8003cbc <_strtol_l.isra.0+0x64>
			any = -1;
 8003d02:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003d06:	e7e5      	b.n	8003cd4 <_strtol_l.isra.0+0x7c>
		}
	}
	if (any < 0) {
 8003d08:	1c73      	adds	r3, r6, #1
 8003d0a:	d106      	bne.n	8003d1a <_strtol_l.isra.0+0xc2>
		acc = neg ? LONG_MIN : LONG_MAX;
		__errno_r(rptr) = ERANGE;
 8003d0c:	2322      	movs	r3, #34	; 0x22
		acc = neg ? LONG_MIN : LONG_MAX;
 8003d0e:	4640      	mov	r0, r8
		__errno_r(rptr) = ERANGE;
 8003d10:	f8cc 3000 	str.w	r3, [ip]
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
 8003d14:	b942      	cbnz	r2, 8003d28 <_strtol_l.isra.0+0xd0>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
	return (acc);
}
 8003d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (neg)
 8003d1a:	f1be 0f00 	cmp.w	lr, #0
 8003d1e:	d000      	beq.n	8003d22 <_strtol_l.isra.0+0xca>
		acc = -acc;
 8003d20:	4240      	negs	r0, r0
	if (endptr != 0)
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d0f7      	beq.n	8003d16 <_strtol_l.isra.0+0xbe>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
 8003d26:	b106      	cbz	r6, 8003d2a <_strtol_l.isra.0+0xd2>
 8003d28:	1e79      	subs	r1, r7, #1
 8003d2a:	6011      	str	r1, [r2, #0]
 8003d2c:	e7f3      	b.n	8003d16 <_strtol_l.isra.0+0xbe>
	if (base == 0)
 8003d2e:	2430      	movs	r4, #48	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1b1      	bne.n	8003c98 <_strtol_l.isra.0+0x40>
		base = c == '0' ? 8 : 10;
 8003d34:	2308      	movs	r3, #8
 8003d36:	e7af      	b.n	8003c98 <_strtol_l.isra.0+0x40>
	if ((base == 0 || base == 16) &&
 8003d38:	2c30      	cmp	r4, #48	; 0x30
 8003d3a:	d0a5      	beq.n	8003c88 <_strtol_l.isra.0+0x30>
		base = c == '0' ? 8 : 10;
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	e7ab      	b.n	8003c98 <_strtol_l.isra.0+0x40>
 8003d40:	08006027 	.word	0x08006027

08003d44 <strtol>:
long
strtol (const char *__restrict s,
	char **__restrict ptr,
	int base)
{
	return _strtol_l (_REENT, s, ptr, base, __get_current_locale ());
 8003d44:	4613      	mov	r3, r2
 8003d46:	460a      	mov	r2, r1
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4802      	ldr	r0, [pc, #8]	; (8003d54 <strtol+0x10>)
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f7ff bf83 	b.w	8003c58 <_strtol_l.isra.0>
 8003d52:	bf00      	nop
 8003d54:	20000468 	.word	0x20000468

08003d58 <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 8003d58:	440a      	add	r2, r1
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8003d5a:	4291      	cmp	r1, r2
 8003d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d60:	d100      	bne.n	8003d64 <memcpy+0xc>
 8003d62:	4770      	bx	lr
{
 8003d64:	b510      	push	{r4, lr}
    {
      *dst++ = *src++;
 8003d66:	f811 4b01 	ldrb.w	r4, [r1], #1
  while (len0--)
 8003d6a:	4291      	cmp	r1, r2
      *dst++ = *src++;
 8003d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (len0--)
 8003d70:	d1f9      	bne.n	8003d66 <memcpy+0xe>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <strcmp>:
	.syntax unified
def_fn strcmp
	.cfi_sections .debug_frame
	.cfi_startproc
1:
	ldrb	r2, [r0], #1
 8003d74:	f810 2b01 	ldrb.w	r2, [r0], #1
	ldrb	r3, [r1], #1
 8003d78:	f811 3b01 	ldrb.w	r3, [r1], #1
	cmp	r2, #1
 8003d7c:	2a01      	cmp	r2, #1
	it	cs
 8003d7e:	bf28      	it	cs
	cmpcs	r2, r3
 8003d80:	429a      	cmpcs	r2, r3
	beq	1b
 8003d82:	d0f7      	beq.n	8003d74 <strcmp>
2:
	subs	r0, r2, r3
 8003d84:	1ad0      	subs	r0, r2, r3
	bx	lr
 8003d86:	4770      	bx	lr

08003d88 <strlen>:
	.eabi_attribute Tag_ARM_ISA_use, 0
	.thumb
	.syntax unified

def_fn	strlen p2align=1
	mov     r3, r0
 8003d88:	4603      	mov	r3, r0
1:	ldrb.w  r2, [r3], #1
 8003d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
	cmp     r2, #0
 8003d8e:	2a00      	cmp	r2, #0
	bne	1b
 8003d90:	d1fb      	bne.n	8003d8a <strlen+0x2>
	subs    r0, r3, r0
 8003d92:	1a18      	subs	r0, r3, r0
	subs    r0, #1
 8003d94:	3801      	subs	r0, #1
	bx      lr
 8003d96:	4770      	bx	lr

08003d98 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 8003d98:	b530      	push	{r4, r5, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	42a2      	cmp	r2, r4
 8003d9e:	d101      	bne.n	8003da4 <memcmp+0xc>
	  return *s1 - *s2;
	}
      s1++;
      s2++;
    }
  return 0;
 8003da0:	2000      	movs	r0, #0
 8003da2:	e007      	b.n	8003db4 <memcmp+0x1c>
      if (*s1 != *s2)
 8003da4:	5d03      	ldrb	r3, [r0, r4]
 8003da6:	3401      	adds	r4, #1
 8003da8:	190d      	adds	r5, r1, r4
 8003daa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003dae:	42ab      	cmp	r3, r5
 8003db0:	d0f4      	beq.n	8003d9c <memcmp+0x4>
	  return *s1 - *s2;
 8003db2:	1b58      	subs	r0, r3, r5
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003db4:	bd30      	pop	{r4, r5, pc}

08003db6 <memmove>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = dst_void;
  const char *src = src_void;

  if (src < dst && dst < src + length)
 8003db6:	4288      	cmp	r0, r1
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	eb01 0302 	add.w	r3, r1, r2
  if (src < dst && dst < src + length)
 8003dbe:	d807      	bhi.n	8003dd0 <memmove+0x1a>
 8003dc0:	1e42      	subs	r2, r0, #1
	  *--dst = *--src;
	}
    }
  else
    {
      while (length--)
 8003dc2:	4299      	cmp	r1, r3
 8003dc4:	d00a      	beq.n	8003ddc <memmove+0x26>
	{
	  *dst++ = *src++;
 8003dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dce:	e7f8      	b.n	8003dc2 <memmove+0xc>
  if (src < dst && dst < src + length)
 8003dd0:	4283      	cmp	r3, r0
 8003dd2:	d9f5      	bls.n	8003dc0 <memmove+0xa>
      dst += length;
 8003dd4:	1881      	adds	r1, r0, r2
 8003dd6:	1ad2      	subs	r2, r2, r3
      while (length--)
 8003dd8:	42d3      	cmn	r3, r2
 8003dda:	d100      	bne.n	8003dde <memmove+0x28>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003ddc:	bd10      	pop	{r4, pc}
	  *--dst = *--src;
 8003dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003de2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003de6:	e7f7      	b.n	8003dd8 <memmove+0x22>

08003de8 <memset>:
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
  char *s = (char *) m;
 8003de8:	4603      	mov	r3, r0
 8003dea:	4402      	add	r2, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
    *s++ = (char) c;

  return m;
}
 8003df0:	4770      	bx	lr
    *s++ = (char) c;
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <strstr>:
    || CHAR_BIT > 8

/* Small and efficient strstr implementation.  */
char *
strstr (const char *hs, const char *ne)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t i;
  int c = ne[0];
 8003dfa:	780c      	ldrb	r4, [r1, #0]

  if (c == 0)
 8003dfc:	b164      	cbz	r4, 8003e18 <strstr+0x20>
 8003dfe:	4603      	mov	r3, r0
    return (char*)hs;

  for ( ; hs[0] != '\0'; hs++)
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	1c5e      	adds	r6, r3, #1
 8003e06:	b90a      	cbnz	r2, 8003e0c <strstr+0x14>
	  break;
      if (ne[i] == '\0')
	return (char*)hs;
    }

  return NULL;
 8003e08:	4610      	mov	r0, r2
 8003e0a:	e005      	b.n	8003e18 <strstr+0x20>
      if (hs[0] != c)
 8003e0c:	4294      	cmp	r4, r2
 8003e0e:	d108      	bne.n	8003e22 <strstr+0x2a>
 8003e10:	460d      	mov	r5, r1
      for (i = 1; ne[i] != 0; i++)
 8003e12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003e16:	b902      	cbnz	r2, 8003e1a <strstr+0x22>
}
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hs[i] != ne[i])
 8003e1a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003e1e:	4297      	cmp	r7, r2
 8003e20:	d0f7      	beq.n	8003e12 <strstr+0x1a>
{
 8003e22:	4633      	mov	r3, r6
 8003e24:	e7ec      	b.n	8003e00 <strstr+0x8>

08003e26 <strncpy>:

char *
strncpy (char *__restrict dst0,
	const char *__restrict src0,
	size_t count)
{
 8003e26:	b570      	push	{r4, r5, r6, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 8003e28:	4604      	mov	r4, r0
 8003e2a:	3901      	subs	r1, #1
  sscan = src0;
  while (count > 0)
 8003e2c:	b902      	cbnz	r2, 8003e30 <strncpy+0xa>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
      if ((*dscan++ = *sscan++) == '\0')
 8003e30:	4623      	mov	r3, r4
 8003e32:	f811 5f01 	ldrb.w	r5, [r1, #1]!
      --count;
 8003e36:	1e56      	subs	r6, r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 8003e38:	f803 5b01 	strb.w	r5, [r3], #1
 8003e3c:	b92d      	cbnz	r5, 8003e4a <strncpy+0x24>
 8003e3e:	4414      	add	r4, r2
  while (count-- > 0)
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	d0f4      	beq.n	8003e2e <strncpy+0x8>
    *dscan++ = '\0';
 8003e44:	f803 5b01 	strb.w	r5, [r3], #1
 8003e48:	e7fa      	b.n	8003e40 <strncpy+0x1a>
 8003e4a:	461c      	mov	r4, r3
      --count;
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	e7ed      	b.n	8003e2c <strncpy+0x6>

08003e50 <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8003e50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003e54:	d221      	bcs.n	8003e9a <_ZL12debug_appendPKcj+0x4a>
static void debug_append(const char *buffer, unsigned int length) {
 8003e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003e58:	4d10      	ldr	r5, [pc, #64]	; (8003e9c <_ZL12debug_appendPKcj+0x4c>)
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	882a      	ldrh	r2, [r5, #0]
 8003e5e:	4604      	mov	r4, r0
 8003e60:	440a      	add	r2, r1
 8003e62:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
        //  Erase the entire buffer.  Latest log is more important than old log.
        strcpy(debugBuffer, "[DROPPED]");
 8003e66:	4f0e      	ldr	r7, [pc, #56]	; (8003ea0 <_ZL12debug_appendPKcj+0x50>)
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8003e68:	d30b      	bcc.n	8003e82 <_ZL12debug_appendPKcj+0x32>
        debugBufferLength = 9;
 8003e6a:	2109      	movs	r1, #9
        strcpy(debugBuffer, "[DROPPED]");
 8003e6c:	463e      	mov	r6, r7
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <_ZL12debug_appendPKcj+0x54>)
        debugBufferLength = 9;
 8003e70:	8029      	strh	r1, [r5, #0]
        strcpy(debugBuffer, "[DROPPED]");
 8003e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e74:	c603      	stmia	r6!, {r0, r1}
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8003e76:	8829      	ldrh	r1, [r5, #0]
        strcpy(debugBuffer, "[DROPPED]");
 8003e78:	8032      	strh	r2, [r6, #0]
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8003e7a:	4419      	add	r1, r3
 8003e7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003e80:	d20a      	bcs.n	8003e98 <_ZL12debug_appendPKcj+0x48>
 8003e82:	4621      	mov	r1, r4
 8003e84:	461c      	mov	r4, r3
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8003e86:	8828      	ldrh	r0, [r5, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4438      	add	r0, r7
 8003e8c:	f7ff ff64 	bl	8003d58 <memcpy>
    debugBufferLength += length;
 8003e90:	882b      	ldrh	r3, [r5, #0]
 8003e92:	4423      	add	r3, r4
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	802b      	strh	r3, [r5, #0]
}
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9a:	4770      	bx	lr
 8003e9c:	200008a0 	.word	0x200008a0
 8003ea0:	2000068c 	.word	0x2000068c
 8003ea4:	0800613c 	.word	0x0800613c

08003ea8 <debug_print.part.3>:

void debug_write(uint8_t ch) {
	debug_append((const char *) &ch, 1);
}

void debug_print(const char *s) {
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4604      	mov	r4, r0
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
 8003eac:	f7ff ff6c 	bl	8003d88 <strlen>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4620      	mov	r0, r4
}
 8003eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	debug_append(s, strlen(s));
 8003eb8:	f7ff bfca 	b.w	8003e50 <_ZL12debug_appendPKcj>

08003ebc <_Z20debug_flush_internalb.part.2>:
void debug_flush_internal(bool forced) {
 8003ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!logEnabled) { return 0; }  //  Skip if log not enabled.
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <_Z20debug_flush_internalb.part.2+0x90>)
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003ec2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003f58 <_Z20debug_flush_internalb.part.2+0x9c>
    if (!logEnabled) { return 0; }  //  Skip if log not enabled.
 8003ec6:	781b      	ldrb	r3, [r3, #0]
void debug_flush_internal(bool forced) {
 8003ec8:	b085      	sub	sp, #20
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8003eca:	f8b8 5000 	ldrh.w	r5, [r8]
    if (!logEnabled) { return 0; }  //  Skip if log not enabled.
 8003ece:	b1d3      	cbz	r3, 8003f06 <_Z20debug_flush_internalb.part.2+0x4a>
 8003ed0:	b2ad      	uxth	r5, r5
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8003ed2:	2d3c      	cmp	r5, #60	; 0x3c
 8003ed4:	46a9      	mov	r9, r5
 8003ed6:	bf28      	it	cs
 8003ed8:	f04f 093c 	movcs.w	r9, #60	; 0x3c
    if (length == 0) { return 0; }
 8003edc:	b9b5      	cbnz	r5, 8003f0c <_Z20debug_flush_internalb.part.2+0x50>
 8003ede:	4c1c      	ldr	r4, [pc, #112]	; (8003f50 <_Z20debug_flush_internalb.part.2+0x94>)
            func(buf, outlen);
 8003ee0:	4f1c      	ldr	r7, [pc, #112]	; (8003f54 <_Z20debug_flush_internalb.part.2+0x98>)
 8003ee2:	f104 0610 	add.w	r6, r4, #16
        if (output_funcs[i]) {
 8003ee6:	f854 3b04 	ldr.w	r3, [r4], #4
 8003eea:	b113      	cbz	r3, 8003ef2 <_Z20debug_flush_internalb.part.2+0x36>
            func(buf, outlen);
 8003eec:	4649      	mov	r1, r9
 8003eee:	4638      	mov	r0, r7
 8003ef0:	4798      	blx	r3
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003ef2:	42b4      	cmp	r4, r6
 8003ef4:	d1f7      	bne.n	8003ee6 <_Z20debug_flush_internalb.part.2+0x2a>
    if (outlen == 0) {
 8003ef6:	b135      	cbz	r5, 8003f06 <_Z20debug_flush_internalb.part.2+0x4a>
    } else if (outlen >= debugBufferLength) {
 8003ef8:	f8b8 3000 	ldrh.w	r3, [r8]
 8003efc:	4599      	cmp	r9, r3
 8003efe:	d311      	bcc.n	8003f24 <_Z20debug_flush_internalb.part.2+0x68>
        debugBufferLength = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8a8 3000 	strh.w	r3, [r8]
}
 8003f06:	b005      	add	sp, #20
 8003f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    args[0] = (uint32_t)fh;
 8003f0c:	2202      	movs	r2, #2
    args[1] = (uint32_t)buffer;
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <_Z20debug_flush_internalb.part.2+0x98>)
    args[2] = (uint32_t)length;
 8003f10:	f8cd 900c 	str.w	r9, [sp, #12]
    args[1] = (uint32_t)buffer;
 8003f14:	e9cd 2301 	strd	r2, r3, [sp, #4]
	);
 8003f18:	2305      	movs	r3, #5
 8003f1a:	aa01      	add	r2, sp, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4611      	mov	r1, r2
 8003f20:	beab      	bkpt	0x00ab
 8003f22:	e7dc      	b.n	8003ede <_Z20debug_flush_internalb.part.2+0x22>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8003f24:	f8b8 2000 	ldrh.w	r2, [r8]
 8003f28:	480a      	ldr	r0, [pc, #40]	; (8003f54 <_Z20debug_flush_internalb.part.2+0x98>)
 8003f2a:	eba2 0209 	sub.w	r2, r2, r9
 8003f2e:	eb00 0109 	add.w	r1, r0, r9
 8003f32:	f7ff ff11 	bl	8003d58 <memcpy>
    debugBufferLength -= outlen;
 8003f36:	f8b8 3000 	ldrh.w	r3, [r8]
 8003f3a:	eba3 0909 	sub.w	r9, r3, r9
 8003f3e:	fa1f f989 	uxth.w	r9, r9
 8003f42:	f8a8 9000 	strh.w	r9, [r8]
}
 8003f46:	b005      	add	sp, #20
 8003f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f4c:	200008a2 	.word	0x200008a2
 8003f50:	20000890 	.word	0x20000890
 8003f54:	2000068c 	.word	0x2000068c
 8003f58:	200008a0 	.word	0x200008a0

08003f5c <enable_log>:
void enable_log(void) { logEnabled = true; }
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4b01      	ldr	r3, [pc, #4]	; (8003f64 <enable_log+0x8>)
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	4770      	bx	lr
 8003f64:	200008a2 	.word	0x200008a2

08003f68 <logger_add_output>:
    if (!func) { return -1; }
 8003f68:	b1f0      	cbz	r0, 8003fa8 <logger_add_output+0x40>
 8003f6a:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <logger_add_output+0x48>)
int logger_add_output(logger_output_func *func) {
 8003f6c:	b430      	push	{r4, r5}
    if (!func) { return -1; }
 8003f6e:	4613      	mov	r3, r2
 8003f70:	4615      	mov	r5, r2
 8003f72:	f102 0410 	add.w	r4, r2, #16
        if (output_funcs[i] == func) {
 8003f76:	f853 1b04 	ldr.w	r1, [r3], #4
 8003f7a:	4281      	cmp	r1, r0
 8003f7c:	d00c      	beq.n	8003f98 <logger_add_output+0x30>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	d1f9      	bne.n	8003f76 <logger_add_output+0xe>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003f82:	2300      	movs	r3, #0
        if (!output_funcs[i]) {
 8003f84:	f852 1b04 	ldr.w	r1, [r2], #4
 8003f88:	b149      	cbz	r1, 8003f9e <logger_add_output+0x36>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d1f9      	bne.n	8003f84 <logger_add_output+0x1c>
}
 8003f90:	bc30      	pop	{r4, r5}
    if (!func) { return -1; }
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003f96:	4770      	bx	lr
            return 0;  //  Already added.
 8003f98:	2000      	movs	r0, #0
}
 8003f9a:	bc30      	pop	{r4, r5}
 8003f9c:	4770      	bx	lr
            output_funcs[i] = func;
 8003f9e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
            return 0;
 8003fa2:	4608      	mov	r0, r1
}
 8003fa4:	bc30      	pop	{r4, r5}
 8003fa6:	4770      	bx	lr
    if (!func) { return -1; }
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000890 	.word	0x20000890

08003fb4 <debug_flush>:
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <debug_flush+0x1c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b123      	cbz	r3, 8003fc4 <debug_flush+0x10>
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <debug_flush+0x20>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	b91b      	cbnz	r3, 8003fca <debug_flush+0x16>
}
 8003fc2:	4770      	bx	lr
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003fc4:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <debug_flush+0x20>)
 8003fc6:	8013      	strh	r3, [r2, #0]
 8003fc8:	4770      	bx	lr
 8003fca:	f7ff bf77 	b.w	8003ebc <_Z20debug_flush_internalb.part.2>
 8003fce:	bf00      	nop
 8003fd0:	200008a2 	.word	0x200008a2
 8003fd4:	200008a0 	.word	0x200008a0

08003fd8 <debug_force_flush>:
void debug_force_flush(void) {
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	2464      	movs	r4, #100	; 0x64
 8003fdc:	4d0a      	ldr	r5, [pc, #40]	; (8004008 <debug_force_flush+0x30>)
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003fde:	4e0b      	ldr	r6, [pc, #44]	; (800400c <debug_force_flush+0x34>)
 8003fe0:	e002      	b.n	8003fe8 <debug_force_flush+0x10>
 8003fe2:	802b      	strh	r3, [r5, #0]
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8003fe4:	3c01      	subs	r4, #1
 8003fe6:	d00d      	beq.n	8004004 <debug_force_flush+0x2c>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8003fe8:	882b      	ldrh	r3, [r5, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	b153      	cbz	r3, 8004004 <debug_force_flush+0x2c>
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8003fee:	7833      	ldrb	r3, [r6, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f6      	beq.n	8003fe2 <debug_force_flush+0xa>
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8003ff4:	882b      	ldrh	r3, [r5, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f3      	beq.n	8003fe4 <debug_force_flush+0xc>
 8003ffc:	f7ff ff5e 	bl	8003ebc <_Z20debug_flush_internalb.part.2>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8004000:	3c01      	subs	r4, #1
 8004002:	d1f1      	bne.n	8003fe8 <debug_force_flush+0x10>
}
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 8004006:	bf00      	nop
 8004008:	200008a0 	.word	0x200008a0
 800400c:	200008a2 	.word	0x200008a2

08004010 <_Z11debug_printj>:
void debug_print(size_t l) {
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	210a      	movs	r1, #10
    int length = 0;
 8004014:	2500      	movs	r5, #0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <_Z11debug_printj+0x7c>)
 8004018:	4f1d      	ldr	r7, [pc, #116]	; (8004090 <_Z11debug_printj+0x80>)
void debug_print(size_t l) {
 800401a:	b085      	sub	sp, #20
        char digit = '0' + (char)(l / divisor);
 800401c:	fbb0 f4f2 	udiv	r4, r0, r2
 8004020:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8004024:	b2db      	uxtb	r3, r3
        if (digit > '9') {
 8004026:	2b39      	cmp	r3, #57	; 0x39
 8004028:	d82a      	bhi.n	8004080 <_Z11debug_printj+0x70>
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 800402a:	fba7 c602 	umull	ip, r6, r7, r2
        if (digit > '0' || length > 0 || prefixByZero) {
 800402e:	2b30      	cmp	r3, #48	; 0x30
        l = l % divisor;
 8004030:	fb02 0014 	mls	r0, r2, r4, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8004034:	ea4f 02d6 	mov.w	r2, r6, lsr #3
        if (digit > '0' || length > 0 || prefixByZero) {
 8004038:	d800      	bhi.n	800403c <_Z11debug_printj+0x2c>
 800403a:	b135      	cbz	r5, 800404a <_Z11debug_printj+0x3a>
            if (length < size) {
 800403c:	2d0a      	cmp	r5, #10
 800403e:	dc04      	bgt.n	800404a <_Z11debug_printj+0x3a>
                buffer[length++] = digit;
 8004040:	ac04      	add	r4, sp, #16
 8004042:	442c      	add	r4, r5
 8004044:	f804 3c0c 	strb.w	r3, [r4, #-12]
 8004048:	3501      	adds	r5, #1
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 800404a:	3901      	subs	r1, #1
 800404c:	d1e6      	bne.n	800401c <_Z11debug_printj+0xc>
    if (length == 0) { buffer[length++] = '0'; };
 800404e:	b9a5      	cbnz	r5, 800407a <_Z11debug_printj+0x6a>
 8004050:	2330      	movs	r3, #48	; 0x30
 8004052:	2501      	movs	r5, #1
 8004054:	f88d 3004 	strb.w	r3, [sp, #4]
    if (length < size) buffer[length] = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	aa04      	add	r2, sp, #16
 800405c:	4415      	add	r5, r2
 800405e:	f805 3c0c 	strb.w	r3, [r5, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8004062:	2300      	movs	r3, #0
    debug_append(buffer, strlen(buffer));
 8004064:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8004066:	f88d 300e 	strb.w	r3, [sp, #14]
    debug_append(buffer, strlen(buffer));
 800406a:	f7ff fe8d 	bl	8003d88 <strlen>
 800406e:	4601      	mov	r1, r0
 8004070:	a801      	add	r0, sp, #4
 8004072:	f7ff feed 	bl	8003e50 <_ZL12debug_appendPKcj>
}
 8004076:	b005      	add	sp, #20
 8004078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (length < size) buffer[length] = 0;
 800407a:	2d0a      	cmp	r5, #10
 800407c:	dcf1      	bgt.n	8004062 <_Z11debug_printj+0x52>
 800407e:	e7eb      	b.n	8004058 <_Z11debug_printj+0x48>
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <_Z11debug_printj+0x84>)
 8004082:	f7ff ff11 	bl	8003ea8 <debug_print.part.3>
}
 8004086:	b005      	add	sp, #20
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408a:	bf00      	nop
 800408c:	3b9aca00 	.word	0x3b9aca00
 8004090:	cccccccd 	.word	0xcccccccd
 8004094:	08006130 	.word	0x08006130

08004098 <_Z11debug_printi>:
    if (i == 0) { debug_append("0", 1); } 
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d00d      	beq.n	80040b8 <_Z11debug_printi+0x20>
    else if (i >= 0) { debug_print((size_t) i); }
 800409c:	db01      	blt.n	80040a2 <_Z11debug_printi+0xa>
        debug_print((size_t) -i);
 800409e:	f7ff bfb7 	b.w	8004010 <_Z11debug_printj>
void debug_print(int i) {
 80040a2:	b510      	push	{r4, lr}
 80040a4:	461c      	mov	r4, r3
        debug_append("-", 1);
 80040a6:	4806      	ldr	r0, [pc, #24]	; (80040c0 <_Z11debug_printi+0x28>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	f7ff fed1 	bl	8003e50 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 80040ae:	4260      	negs	r0, r4
}
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_print((size_t) -i);
 80040b4:	f7ff bfac 	b.w	8004010 <_Z11debug_printj>
    if (i == 0) { debug_append("0", 1); } 
 80040b8:	2101      	movs	r1, #1
 80040ba:	4802      	ldr	r0, [pc, #8]	; (80040c4 <_Z11debug_printi+0x2c>)
 80040bc:	f7ff bec8 	b.w	8003e50 <_ZL12debug_appendPKcj>
 80040c0:	0800612c 	.word	0x0800612c
 80040c4:	08006128 	.word	0x08006128

080040c8 <debug_print>:
    if (s[0] == 0) return;
 80040c8:	7803      	ldrb	r3, [r0, #0]
 80040ca:	b903      	cbnz	r3, 80040ce <debug_print+0x6>
}
 80040cc:	4770      	bx	lr
 80040ce:	f7ff beeb 	b.w	8003ea8 <debug_print.part.3>
 80040d2:	bf00      	nop

080040d4 <debug_println>:

void debug_println(const char *s) {
 80040d4:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 80040d6:	7803      	ldrb	r3, [r0, #0]
 80040d8:	b10b      	cbz	r3, 80040de <debug_println+0xa>
 80040da:	f7ff fee5 	bl	8003ea8 <debug_print.part.3>
    debug_append("\r\n", 2);
}
 80040de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 80040e2:	2102      	movs	r1, #2
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <debug_println+0x18>)
 80040e6:	f7ff beb3 	b.w	8003e50 <_ZL12debug_appendPKcj>
 80040ea:	bf00      	nop
 80040ec:	08006148 	.word	0x08006148

080040f0 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 80040f0:	b508      	push	{r3, lr}
    debug_print(i);
 80040f2:	f7ff ffd1 	bl	8004098 <_Z11debug_printi>
    debug_append("\r\n", 2);
}
 80040f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 80040fa:	2102      	movs	r1, #2
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <_Z13debug_printlni+0x14>)
 80040fe:	f7ff bea7 	b.w	8003e50 <_ZL12debug_appendPKcj>
 8004102:	bf00      	nop
 8004104:	08006148 	.word	0x08006148

08004108 <debug_print_int>:
void debug_println(float f) {
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
 8004108:	f7ff bfc6 	b.w	8004098 <_Z11debug_printi>

0800410c <debug_print_unsigned>:
void debug_print_unsigned(size_t l) { debug_print(l); }
 800410c:	f7ff bf80 	b.w	8004010 <_Z11debug_printj>

08004110 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8004110:	b500      	push	{lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8004112:	0903      	lsrs	r3, r0, #4
 8004114:	f103 0230 	add.w	r2, r3, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8004118:	2a39      	cmp	r2, #57	; 0x39
 800411a:	bfc8      	it	gt
 800411c:	f103 0257 	addgt.w	r2, r3, #87	; 0x57
void debug_printhex(uint8_t v) {
 8004120:	b083      	sub	sp, #12
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8004122:	bfc8      	it	gt
 8004124:	b252      	sxtbgt	r2, r2
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 8004126:	f88d 2004 	strb.w	r2, [sp, #4]
            }
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
 800412a:	2200      	movs	r2, #0
        char digit = '0' + (char)(v / divisor);
 800412c:	f000 000f 	and.w	r0, r0, #15
 8004130:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8004134:	2b39      	cmp	r3, #57	; 0x39
 8004136:	bfc4      	itt	gt
 8004138:	3057      	addgt	r0, #87	; 0x57
 800413a:	b243      	sxtbgt	r3, r0
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
 800413c:	a801      	add	r0, sp, #4
                buffer[length++] = digit;
 800413e:	f88d 3005 	strb.w	r3, [sp, #5]
    if (length < size) buffer[length] = 0;
 8004142:	f88d 2006 	strb.w	r2, [sp, #6]
    debug_append(buffer, strlen(buffer));
 8004146:	f7ff fe1f 	bl	8003d88 <strlen>
 800414a:	4601      	mov	r1, r0
 800414c:	a801      	add	r0, sp, #4
 800414e:	f7ff fe7f 	bl	8003e50 <_ZL12debug_appendPKcj>
}
 8004152:	b003      	add	sp, #12
 8004154:	f85d fb04 	ldr.w	pc, [sp], #4

08004158 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8004158:	b510      	push	{r4, lr}
 800415a:	4604      	mov	r4, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 800415c:	0e00      	lsrs	r0, r0, #24
 800415e:	f7ff ffd7 	bl	8004110 <debug_printhex>
 8004162:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8004166:	f7ff ffd3 	bl	8004110 <debug_printhex>
 800416a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800416e:	f7ff ffcf 	bl	8004110 <debug_printhex>
 8004172:	b2e0      	uxtb	r0, r4
    }
}
 8004174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_printhex(b);
 8004178:	f7ff bfca 	b.w	8004110 <debug_printhex>

0800417c <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 800417c:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 800417e:	f7fc ff23 	bl	8000fc8 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8004182:	f000 f831 	bl	80041e8 <led_setup>
	if (debugEnabled) {
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <platform_setup+0x44>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b1a3      	cbz	r3, 80041b6 <platform_setup+0x3a>
		led_on(); led_wait();
 800418c:	f000 f83c 	bl	8004208 <led_on>
 8004190:	f000 f84a 	bl	8004228 <led_wait>
		led_off(); led_wait();
 8004194:	f000 f840 	bl	8004218 <led_off>
 8004198:	f000 f846 	bl	8004228 <led_wait>
		led_on(); led_wait();
 800419c:	f000 f834 	bl	8004208 <led_on>
 80041a0:	f000 f842 	bl	8004228 <led_wait>
		led_off(); led_wait();
 80041a4:	f000 f838 	bl	8004218 <led_off>
 80041a8:	f000 f83e 	bl	8004228 <led_wait>
		//  This line will call ARM Semihosting and may hang until debugger is connected.
  		debug_println("----platform_setup");
 80041ac:	4805      	ldr	r0, [pc, #20]	; (80041c4 <platform_setup+0x48>)
 80041ae:	f7ff ff91 	bl	80040d4 <debug_println>
		led_on();
 80041b2:	f000 f829 	bl	8004208 <led_on>
	}

	////TODO
	test_codal();
}
 80041b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_codal();
 80041ba:	f7fc bd0b 	b.w	8000bd4 <test_codal>
 80041be:	bf00      	nop
 80041c0:	200008b4 	.word	0x200008b4
 80041c4:	0800614c 	.word	0x0800614c

080041c8 <enable_debug>:

void enable_debug(void) {
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 80041c8:	2201      	movs	r2, #1
 80041ca:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <enable_debug+0xc>)
 80041cc:	701a      	strb	r2, [r3, #0]
	enable_log();
 80041ce:	f7ff bec5 	b.w	8003f5c <enable_log>
 80041d2:	bf00      	nop
 80041d4:	200008b4 	.word	0x200008b4

080041d8 <__cxa_pure_virtual>:
//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 80041d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041dc:	f7fc bcd2 	b.w	8000b84 <target_panic>

080041e0 <_Znwj>:
}

// define new and delete.
extern "C" void *operator new(size_t objsize) {
    return malloc(objsize);
 80041e0:	f005 bb2e 	b.w	8009840 <malloc>

080041e4 <_ZdlPv>:
}

extern "C" void operator delete(void* obj) {
    free(obj);
 80041e4:	f005 ba54 	b.w	8009690 <free>

080041e8 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 80041e8:	b510      	push	{r4, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 80041ea:	f44f 7041 	mov.w	r0, #772	; 0x304
 80041ee:	f7fc fdf1 	bl	8000dd4 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
}
 80041f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 80041f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041fa:	2200      	movs	r2, #0
 80041fc:	2102      	movs	r1, #2
 80041fe:	4801      	ldr	r0, [pc, #4]	; (8004204 <led_setup+0x1c>)
 8004200:	f7fc be40 	b.w	8000e84 <gpio_set_mode>
 8004204:	40011000 	.word	0x40011000

08004208 <led_on>:

void led_on(void) {
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 8004208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <led_on+0xc>)
 800420e:	f7fc bdcd 	b.w	8000dac <gpio_clear>
 8004212:	bf00      	nop
 8004214:	40011000 	.word	0x40011000

08004218 <led_off>:
}

void led_off(void) {
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8004218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <led_off+0xc>)
 800421e:	f7fc bdc3 	b.w	8000da8 <gpio_set>
 8004222:	bf00      	nop
 8004224:	40011000 	.word	0x40011000

08004228 <led_wait>:
void led_toggle(void) {
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
 8004228:	4b02      	ldr	r3, [pc, #8]	; (8004234 <led_wait+0xc>)
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
		__asm__("nop");
 800422a:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 800422c:	3b01      	subs	r3, #1
 800422e:	d1fc      	bne.n	800422a <led_wait+0x2>
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	0016e360 	.word	0x0016e360

08004238 <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8004238:	b538      	push	{r3, r4, r5, lr}
	if (timerStarted) { return; }
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <platform_start_timer+0xf0>)
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 800423c:	4d3b      	ldr	r5, [pc, #236]	; (800432c <platform_start_timer+0xf4>)
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 800423e:	4a3c      	ldr	r2, [pc, #240]	; (8004330 <platform_start_timer+0xf8>)
	if (timerStarted) { return; }
 8004240:	781c      	ldrb	r4, [r3, #0]
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8004242:	6028      	str	r0, [r5, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8004244:	6011      	str	r1, [r2, #0]
	if (timerStarted) { return; }
 8004246:	b104      	cbz	r4, 800424a <platform_start_timer+0x12>
}
 8004248:	bd38      	pop	{r3, r4, r5, pc}
	timerStarted = true;
 800424a:	2501      	movs	r5, #1
	debug_println("platform_start_timer"); ////
 800424c:	4839      	ldr	r0, [pc, #228]	; (8004334 <platform_start_timer+0xfc>)
	timerStarted = true;
 800424e:	701d      	strb	r5, [r3, #0]
	debug_println("platform_start_timer"); ////
 8004250:	f7ff ff40 	bl	80040d4 <debug_println>
	rcc_enable_rtc_clock();
 8004254:	f7fc fe64 	bl	8000f20 <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8004258:	4620      	mov	r0, r4
 800425a:	f7fd ffd7 	bl	800220c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 800425e:	4628      	mov	r0, r5
 8004260:	f7fd ffd4 	bl	800220c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8004264:	2002      	movs	r0, #2
 8004266:	f7fd ffd1 	bl	800220c <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 800426a:	4833      	ldr	r0, [pc, #204]	; (8004338 <platform_start_timer+0x100>)
 800426c:	f7ff ff32 	bl	80040d4 <debug_println>
 8004270:	f7ff fea0 	bl	8003fb4 <debug_flush>
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8004274:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8004278:	f7fc fdac 	bl	8000dd4 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 800427c:	f240 309b 	movw	r0, #923	; 0x39b
 8004280:	f7fc fda8 	bl	8000dd4 <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8004284:	f7fc fd96 	bl	8000db4 <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8004288:	2005      	movs	r0, #5
 800428a:	f7fc fe51 	bl	8000f30 <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
	RTC_CRL = 0;
 800428e:	4d2b      	ldr	r5, [pc, #172]	; (800433c <platform_start_timer+0x104>)
	RTC_CRH = 0;
 8004290:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <platform_start_timer+0x108>)
 8004292:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8004294:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8004296:	f7fc fe43 	bl	8000f20 <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 800429a:	f7fd ff05 	bl	80020a8 <rtc_enter_config_mode>
	RTC_PRLH = 0;
	RTC_PRLL = 0;
	RTC_CNTH = 0;
	RTC_CNTL = 0;
	RTC_ALRH = 0xFFFF;
 800429e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	RTC_CNTH = 0;
 80042a2:	4a28      	ldr	r2, [pc, #160]	; (8004344 <platform_start_timer+0x10c>)
	RTC_PRLH = 0;
 80042a4:	4828      	ldr	r0, [pc, #160]	; (8004348 <platform_start_timer+0x110>)
	RTC_PRLL = 0;
 80042a6:	4929      	ldr	r1, [pc, #164]	; (800434c <platform_start_timer+0x114>)
	RTC_PRLH = 0;
 80042a8:	6004      	str	r4, [r0, #0]
	RTC_PRLL = 0;
 80042aa:	600c      	str	r4, [r1, #0]
	RTC_CNTH = 0;
 80042ac:	6014      	str	r4, [r2, #0]
	RTC_CNTL = 0;
 80042ae:	6144      	str	r4, [r0, #20]
	RTC_ALRH = 0xFFFF;
 80042b0:	614b      	str	r3, [r1, #20]
	RTC_ALRL = 0xFFFF;
 80042b2:	60d3      	str	r3, [r2, #12]
	rtc_exit_config_mode();
 80042b4:	f7fd ff04 	bl	80020c0 <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 80042b8:	462a      	mov	r2, r5
	RTC_CRL &= ~RTC_CRL_RSF;
 80042ba:	682b      	ldr	r3, [r5, #0]
 80042bc:	f023 0308 	bic.w	r3, r3, #8
 80042c0:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	d5fc      	bpl.n	80042c2 <platform_start_timer+0x8a>
	rtc_set_prescale_val(prescale);
 80042c8:	2020      	movs	r0, #32
 80042ca:	f7fd ff25 	bl	8002118 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 80042ce:	4820      	ldr	r0, [pc, #128]	; (8004350 <platform_start_timer+0x118>)
 80042d0:	f7ff ff00 	bl	80040d4 <debug_println>
 80042d4:	f7ff fe6e 	bl	8003fb4 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 80042d8:	2000      	movs	r0, #0
 80042da:	f7fd ff49 	bl	8002170 <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 80042de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e2:	f7fd fef9 	bl	80020d8 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 80042e6:	2100      	movs	r1, #0
 80042e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80042ec:	f7fd fea0 	bl	8002030 <exti_set_trigger>
	exti_enable_request(EXTI17);
 80042f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80042f4:	f7fd fec4 	bl	8002080 <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 80042f8:	2003      	movs	r0, #3
 80042fa:	f7fd fe8b 	bl	8002014 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 80042fe:	2029      	movs	r0, #41	; 0x29
 8004300:	f7fd fe88 	bl	8002014 <nvic_enable_irq>
 8004304:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fd ffae 	bl	8002268 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 800430c:	2001      	movs	r0, #1
 800430e:	f7fd ffab 	bl	8002268 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8004312:	2002      	movs	r0, #2
 8004314:	f7fd ffa8 	bl	8002268 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8004318:	2000      	movs	r0, #0
 800431a:	f7fd ff49 	bl	80021b0 <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 800431e:	2001      	movs	r0, #1
 8004320:	f7fd ff46 	bl	80021b0 <rtc_interrupt_enable>
	__asm__ volatile ("CPSIE I\n");
 8004324:	b662      	cpsie	i
}
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	200008b5 	.word	0x200008b5
 800432c:	200008a8 	.word	0x200008a8
 8004330:	200008ac 	.word	0x200008ac
 8004334:	08006168 	.word	0x08006168
 8004338:	08006180 	.word	0x08006180
 800433c:	40002804 	.word	0x40002804
 8004340:	40002800 	.word	0x40002800
 8004344:	40002818 	.word	0x40002818
 8004348:	40002808 	.word	0x40002808
 800434c:	4000280c 	.word	0x4000280c
 8004350:	08006190 	.word	0x08006190

08004354 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8004354:	b510      	push	{r4, lr}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <platform_set_alarm+0x2c>)
void platform_set_alarm(uint32_t millisec) {
 8004358:	b082      	sub	sp, #8
	if (!alarmFunc) { debug_print("alm? "); } ////
 800435a:	681b      	ldr	r3, [r3, #0]
void platform_set_alarm(uint32_t millisec) {
 800435c:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 800435e:	b15b      	cbz	r3, 8004378 <platform_set_alarm+0x24>
	volatile uint32_t now = rtc_get_counter_val();
 8004360:	f7fd fefa 	bl	8002158 <rtc_get_counter_val>
 8004364:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8004366:	f7fc fd25 	bl	8000db4 <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 800436a:	9801      	ldr	r0, [sp, #4]
 800436c:	4420      	add	r0, r4
}
 800436e:	b002      	add	sp, #8
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_set_alarm_time(now + millisec);
 8004374:	f7fd beb0 	b.w	80020d8 <rtc_set_alarm_time>
	if (!alarmFunc) { debug_print("alm? "); } ////
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <platform_set_alarm+0x30>)
 800437a:	f7ff fea5 	bl	80040c8 <debug_print>
 800437e:	e7ef      	b.n	8004360 <platform_set_alarm+0xc>
 8004380:	200008ac 	.word	0x200008ac
 8004384:	08006160 	.word	0x08006160

08004388 <millis>:
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 8004388:	f7fd bee6 	b.w	8002158 <rtc_get_counter_val>

0800438c <poll_restart_callback>:
    return 0;
}

static bool poll_restart_requested = false;

int poll_restart_callback(void) {
 800438c:	b508      	push	{r3, lr}
    //  Call this function when we need to restart during polling.
    debug_println("restart callback");  debug_flush(); 
 800438e:	4805      	ldr	r0, [pc, #20]	; (80043a4 <poll_restart_callback+0x18>)
 8004390:	f7ff fea0 	bl	80040d4 <debug_println>
 8004394:	f7ff fe0e 	bl	8003fb4 <debug_flush>
    poll_restart_requested = true;
 8004398:	2201      	movs	r2, #1
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <poll_restart_callback+0x1c>)
    return 0;
}
 800439c:	2000      	movs	r0, #0
    poll_restart_requested = true;
 800439e:	701a      	strb	r2, [r3, #0]
}
 80043a0:	bd08      	pop	{r3, pc}
 80043a2:	bf00      	nop
 80043a4:	0800621c 	.word	0x0800621c
 80043a8:	20000b90 	.word	0x20000b90

080043ac <bootloader_poll>:
int bootloader_poll(void) {
 80043ac:	b508      	push	{r3, lr}
    if (!usbd_dev) { return -1; }
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <bootloader_poll+0x24>)
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	b150      	cbz	r0, 80043ca <bootloader_poll+0x1e>
	usbd_poll(usbd_dev);
 80043b4:	f7fc fefa 	bl	80011ac <usbd_poll>
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 80043b8:	f000 fb82 	bl	8004ac0 <get_usb_status>
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <bootloader_poll+0x28>)
    last_status = status;
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <bootloader_poll+0x2c>)
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 80043c0:	6018      	str	r0, [r3, #0]
    last_status = status;
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	6011      	str	r1, [r2, #0]
    return status;  // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
 80043c6:	6818      	ldr	r0, [r3, #0]
}
 80043c8:	bd08      	pop	{r3, pc}
    if (!usbd_dev) { return -1; }
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80043ce:	bd08      	pop	{r3, pc}
 80043d0:	200008e0 	.word	0x200008e0
 80043d4:	200008d8 	.word	0x200008d8
 80043d8:	200008cc 	.word	0x200008cc

080043dc <prepare_baseloader>:
void prepare_baseloader(void) {
 80043dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    asm("msr msp, %0" : : "r" (topOfMainStack));
 80043e0:	4b76      	ldr	r3, [pc, #472]	; (80045bc <prepare_baseloader+0x1e0>)
 80043e2:	f383 8808 	msr	MSP, r3
    for (i = 0; i < sizeof(vector_table_t); i++) { flashBuf[i] = 0; }   //  Zero the temp vector table. Don't use any library functions here.
 80043e6:	2400      	movs	r4, #0
    tmp_vector_table = (vector_table_t *) flashBuf;
 80043e8:	4975      	ldr	r1, [pc, #468]	; (80045c0 <prepare_baseloader+0x1e4>)
 80043ea:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8004628 <prepare_baseloader+0x24c>
 80043ee:	1e4b      	subs	r3, r1, #1
 80043f0:	f8c8 1000 	str.w	r1, [r8]
 80043f4:	f201 124f 	addw	r2, r1, #335	; 0x14f
    for (i = 0; i < sizeof(vector_table_t); i++) { flashBuf[i] = 0; }   //  Zero the temp vector table. Don't use any library functions here.
 80043f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d1fb      	bne.n	80043f8 <prepare_baseloader+0x1c>
    baseloader_addr = NULL;
 8004400:	4f70      	ldr	r7, [pc, #448]	; (80045c4 <prepare_baseloader+0x1e8>)
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8004402:	4a71      	ldr	r2, [pc, #452]	; (80045c8 <prepare_baseloader+0x1ec>)
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8004404:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800462c <prepare_baseloader+0x250>
 8004408:	f8df a224 	ldr.w	sl, [pc, #548]	; 8004630 <prepare_baseloader+0x254>
 800440c:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004634 <prepare_baseloader+0x258>
    tmp_vector_table->reset = vector_table.reset;
 8004410:	e9d2 3200 	ldrd	r3, r2, [r2]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8004414:	4638      	mov	r0, r7
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8004416:	600b      	str	r3, [r1, #0]
    tmp_vector_table->reset = vector_table.reset;
 8004418:	604a      	str	r2, [r1, #4]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 800441a:	464b      	mov	r3, r9
 800441c:	4652      	mov	r2, sl
 800441e:	4659      	mov	r1, fp
    baseloader_addr = NULL;
 8004420:	603c      	str	r4, [r7, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8004422:	f7fc f989 	bl	8000738 <baseloader_fetch>
 8004426:	4d69      	ldr	r5, [pc, #420]	; (80045cc <prepare_baseloader+0x1f0>)
 8004428:	6028      	str	r0, [r5, #0]
	debug_print("----baseloader "); if (baseloader_status == 0) { 
 800442a:	4869      	ldr	r0, [pc, #420]	; (80045d0 <prepare_baseloader+0x1f4>)
 800442c:	f7ff fe4c 	bl	80040c8 <debug_print>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 808d 	bne.w	8004552 <prepare_baseloader+0x176>
        debug_print("found "); debug_printhex_unsigned((uint32_t) baseloader_addr); 
 8004438:	4866      	ldr	r0, [pc, #408]	; (80045d4 <prepare_baseloader+0x1f8>)
 800443a:	f7ff fe45 	bl	80040c8 <debug_print>
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	f7ff fe8a 	bl	8004158 <debug_printhex_unsigned>
		debug_print(", dest "); debug_printhex_unsigned((uint32_t) dest);
 8004444:	4864      	ldr	r0, [pc, #400]	; (80045d8 <prepare_baseloader+0x1fc>)
 8004446:	f7ff fe3f 	bl	80040c8 <debug_print>
 800444a:	f8db 0000 	ldr.w	r0, [fp]
 800444e:	f7ff fe83 	bl	8004158 <debug_printhex_unsigned>
		debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8004452:	4862      	ldr	r0, [pc, #392]	; (80045dc <prepare_baseloader+0x200>)
 8004454:	f7ff fe38 	bl	80040c8 <debug_print>
 8004458:	f8da 0000 	ldr.w	r0, [sl]
 800445c:	f7ff fe7c 	bl	8004158 <debug_printhex_unsigned>
		debug_print(", len "); debug_printhex_unsigned(byte_count); debug_force_flush();  
 8004460:	485f      	ldr	r0, [pc, #380]	; (80045e0 <prepare_baseloader+0x204>)
 8004462:	f7ff fe31 	bl	80040c8 <debug_print>
 8004466:	f8d9 0000 	ldr.w	r0, [r9]
 800446a:	f7ff fe75 	bl	8004158 <debug_printhex_unsigned>
 800446e:	f7ff fdb3 	bl	8003fd8 <debug_force_flush>
		debug_print(", *func "); debug_printhex_unsigned(*(uint32_t *) baseloader_addr); debug_force_flush();  
 8004472:	485c      	ldr	r0, [pc, #368]	; (80045e4 <prepare_baseloader+0x208>)
 8004474:	f7ff fe28 	bl	80040c8 <debug_print>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f7ff fe6c 	bl	8004158 <debug_printhex_unsigned>
 8004480:	f7ff fdaa 	bl	8003fd8 <debug_force_flush>
    }; debug_println(""); debug_force_flush();
 8004484:	4858      	ldr	r0, [pc, #352]	; (80045e8 <prepare_baseloader+0x20c>)
 8004486:	f7ff fe25 	bl	80040d4 <debug_println>
 800448a:	f7ff fda5 	bl	8003fd8 <debug_force_flush>
    if (baseloader_status != 0 || baseloader_addr == NULL) { return; }
 800448e:	682e      	ldr	r6, [r5, #0]
 8004490:	2e00      	cmp	r6, #0
 8004492:	f040 808e 	bne.w	80045b2 <prepare_baseloader+0x1d6>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 808a 	beq.w	80045b2 <prepare_baseloader+0x1d6>
    base_para.restart = 1;
 800449e:	2201      	movs	r2, #1
    base_para.dest = (uint32_t) dest;
 80044a0:	4c52      	ldr	r4, [pc, #328]	; (80045ec <prepare_baseloader+0x210>)
 80044a2:	f8db c000 	ldr.w	ip, [fp]
    base_para.src = (uint32_t) src;
 80044a6:	f8da 0000 	ldr.w	r0, [sl]
    base_para.byte_count = byte_count;
 80044aa:	f8d9 1000 	ldr.w	r1, [r9]
    base_para.dest = (uint32_t) dest;
 80044ae:	f8c4 c000 	str.w	ip, [r4]
    base_para.src = (uint32_t) src;
 80044b2:	6060      	str	r0, [r4, #4]
    base_para.byte_count = byte_count;
 80044b4:	60a1      	str	r1, [r4, #8]
    base_para.restart = 1;
 80044b6:	7366      	strb	r6, [r4, #13]
 80044b8:	73a6      	strb	r6, [r4, #14]
 80044ba:	73e6      	strb	r6, [r4, #15]
    base_para.preview = 1;
 80044bc:	7466      	strb	r6, [r4, #17]
 80044be:	74a6      	strb	r6, [r4, #18]
 80044c0:	74e6      	strb	r6, [r4, #19]
    base_para.restart = 1;
 80044c2:	7322      	strb	r2, [r4, #12]
    base_para.preview = 1;
 80044c4:	7422      	strb	r2, [r4, #16]
    baseloader_addr();
 80044c6:	4798      	blx	r3
    baseloader_status = base_para.result;  
 80044c8:	6963      	ldr	r3, [r4, #20]
    if (baseloader_status > 0) {
 80044ca:	2b00      	cmp	r3, #0
    baseloader_status = base_para.result;  
 80044cc:	602b      	str	r3, [r5, #0]
    if (baseloader_status > 0) {
 80044ce:	dd6e      	ble.n	80045ae <prepare_baseloader+0x1d2>
        debug_print("baseloader preview ok "); debug_printhex_unsigned(baseloader_status); 
 80044d0:	4847      	ldr	r0, [pc, #284]	; (80045f0 <prepare_baseloader+0x214>)
 80044d2:	f7ff fdf9 	bl	80040c8 <debug_print>
 80044d6:	6828      	ldr	r0, [r5, #0]
 80044d8:	f7ff fe3e 	bl	8004158 <debug_printhex_unsigned>
        debug_println(", call actual baseloader..."); debug_force_flush();
 80044dc:	4845      	ldr	r0, [pc, #276]	; (80045f4 <prepare_baseloader+0x218>)
 80044de:	f7ff fdf9 	bl	80040d4 <debug_println>
 80044e2:	f7ff fd79 	bl	8003fd8 <debug_force_flush>
    debug_print("switch system vector table "); debug_printhex_unsigned((uint32_t) tmp_vector_table); 
 80044e6:	4844      	ldr	r0, [pc, #272]	; (80045f8 <prepare_baseloader+0x21c>)
 80044e8:	f7ff fdee 	bl	80040c8 <debug_print>
 80044ec:	f8d8 0000 	ldr.w	r0, [r8]
 80044f0:	f7ff fe32 	bl	8004158 <debug_printhex_unsigned>
    debug_print(", len "); debug_printhex_unsigned(sizeof(vector_table_t)); 
 80044f4:	483a      	ldr	r0, [pc, #232]	; (80045e0 <prepare_baseloader+0x204>)
 80044f6:	f7ff fde7 	bl	80040c8 <debug_print>
 80044fa:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80044fe:	f7ff fe2b 	bl	8004158 <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8004502:	4839      	ldr	r0, [pc, #228]	; (80045e8 <prepare_baseloader+0x20c>)
 8004504:	f7ff fde6 	bl	80040d4 <debug_println>
 8004508:	f7ff fd66 	bl	8003fd8 <debug_force_flush>
    asm("dmb");
 800450c:	f3bf 8f5f 	dmb	sy
    SCB_VTOR = (uint32_t) tmp_vector_table;
 8004510:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <prepare_baseloader+0x220>)
 8004512:	f8d8 2000 	ldr.w	r2, [r8]
 8004516:	601a      	str	r2, [r3, #0]
    asm("dsb");
 8004518:	f3bf 8f4f 	dsb	sy
    baseloader_addr();  
 800451c:	683b      	ldr	r3, [r7, #0]
    base_para.preview = 0;
 800451e:	7426      	strb	r6, [r4, #16]
 8004520:	7466      	strb	r6, [r4, #17]
 8004522:	74a6      	strb	r6, [r4, #18]
 8004524:	74e6      	strb	r6, [r4, #19]
    baseloader_addr();  
 8004526:	4798      	blx	r3
    baseloader_status = base_para.result;  
 8004528:	6963      	ldr	r3, [r4, #20]
    debug_print("baseloader failed "); debug_print_int(baseloader_status); 
 800452a:	4835      	ldr	r0, [pc, #212]	; (8004600 <prepare_baseloader+0x224>)
    baseloader_status = base_para.result;  
 800452c:	602b      	str	r3, [r5, #0]
        debug_print("baseloader preview failed "); debug_print_int(baseloader_status);
 800452e:	f7ff fdcb 	bl	80040c8 <debug_print>
 8004532:	6828      	ldr	r0, [r5, #0]
 8004534:	f7ff fde8 	bl	8004108 <debug_print_int>
        debug_println(", fail "); debug_printhex_unsigned(base_para.fail); 
 8004538:	4832      	ldr	r0, [pc, #200]	; (8004604 <prepare_baseloader+0x228>)
 800453a:	f7ff fdcb 	bl	80040d4 <debug_println>
 800453e:	69a0      	ldr	r0, [r4, #24]
 8004540:	f7ff fe0a 	bl	8004158 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8004544:	4828      	ldr	r0, [pc, #160]	; (80045e8 <prepare_baseloader+0x20c>)
 8004546:	f7ff fdc5 	bl	80040d4 <debug_println>
}
 800454a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        debug_println(""); debug_force_flush();
 800454e:	f7ff bd43 	b.w	8003fd8 <debug_force_flush>
        debug_print("not found "); debug_print_int(baseloader_status); debug_print(" ");
 8004552:	482d      	ldr	r0, [pc, #180]	; (8004608 <prepare_baseloader+0x22c>)
 8004554:	f7ff fdb8 	bl	80040c8 <debug_print>
 8004558:	6828      	ldr	r0, [r5, #0]
 800455a:	f7ff fdd5 	bl	8004108 <debug_print_int>
 800455e:	482b      	ldr	r0, [pc, #172]	; (800460c <prepare_baseloader+0x230>)
 8004560:	f7ff fdb2 	bl	80040c8 <debug_print>
            (baseloader_status == -3) ? "too big " :
 8004564:	682b      	ldr	r3, [r5, #0]
        debug_print(
 8004566:	1cda      	adds	r2, r3, #3
 8004568:	d025      	beq.n	80045b6 <prepare_baseloader+0x1da>
            (baseloader_status == -3) ? "too big " :
 800456a:	4829      	ldr	r0, [pc, #164]	; (8004610 <prepare_baseloader+0x234>)
 800456c:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <prepare_baseloader+0x20c>)
 800456e:	f113 0f04 	cmn.w	r3, #4
 8004572:	bf18      	it	ne
 8004574:	4610      	movne	r0, r2
        debug_print(
 8004576:	f7ff fda7 	bl	80040c8 <debug_print>
        debug_printhex_unsigned(base_para.fail);
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <prepare_baseloader+0x210>)
 800457c:	6998      	ldr	r0, [r3, #24]
 800457e:	f7ff fdeb 	bl	8004158 <debug_printhex_unsigned>
        if (baseloader_status == -4) { 
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	3304      	adds	r3, #4
 8004586:	f47f af7d 	bne.w	8004484 <prepare_baseloader+0xa8>
            debug_print(", oldapp "); debug_printhex_unsigned((uint32_t) FLASH_ADDRESS(application_start)); 
 800458a:	4822      	ldr	r0, [pc, #136]	; (8004614 <prepare_baseloader+0x238>)
 800458c:	f7ff fd9c 	bl	80040c8 <debug_print>
 8004590:	4821      	ldr	r0, [pc, #132]	; (8004618 <prepare_baseloader+0x23c>)
 8004592:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8004596:	f020 0003 	bic.w	r0, r0, #3
 800459a:	f7ff fddd 	bl	8004158 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(byte_count); 
 800459e:	481f      	ldr	r0, [pc, #124]	; (800461c <prepare_baseloader+0x240>)
 80045a0:	f7ff fd92 	bl	80040c8 <debug_print>
 80045a4:	f8d9 0000 	ldr.w	r0, [r9]
 80045a8:	f7ff fdd6 	bl	8004158 <debug_printhex_unsigned>
 80045ac:	e76a      	b.n	8004484 <prepare_baseloader+0xa8>
        debug_print("baseloader preview failed "); debug_print_int(baseloader_status);
 80045ae:	481c      	ldr	r0, [pc, #112]	; (8004620 <prepare_baseloader+0x244>)
 80045b0:	e7bd      	b.n	800452e <prepare_baseloader+0x152>
}
 80045b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        debug_print(
 80045b6:	481b      	ldr	r0, [pc, #108]	; (8004624 <prepare_baseloader+0x248>)
 80045b8:	e7dd      	b.n	8004576 <prepare_baseloader+0x19a>
 80045ba:	bf00      	nop
 80045bc:	200047bc 	.word	0x200047bc
 80045c0:	200047bc 	.word	0x200047bc
 80045c4:	200008b8 	.word	0x200008b8
 80045c8:	08000000 	.word	0x08000000
 80045cc:	200008bc 	.word	0x200008bc
 80045d0:	08006240 	.word	0x08006240
 80045d4:	08006278 	.word	0x08006278
 80045d8:	08006250 	.word	0x08006250
 80045dc:	08006258 	.word	0x08006258
 80045e0:	08006260 	.word	0x08006260
 80045e4:	08006268 	.word	0x08006268
 80045e8:	08005fa8 	.word	0x08005fa8
 80045ec:	20000000 	.word	0x20000000
 80045f0:	08006298 	.word	0x08006298
 80045f4:	080062b0 	.word	0x080062b0
 80045f8:	080062cc 	.word	0x080062cc
 80045fc:	e000ed08 	.word	0xe000ed08
 8004600:	080062e8 	.word	0x080062e8
 8004604:	080062fc 	.word	0x080062fc
 8004608:	08006274 	.word	0x08006274
 800460c:	08006544 	.word	0x08006544
 8004610:	0800623c 	.word	0x0800623c
 8004614:	08006280 	.word	0x08006280
 8004618:	08007401 	.word	0x08007401
 800461c:	0800628c 	.word	0x0800628c
 8004620:	08006304 	.word	0x08006304
 8004624:	08006230 	.word	0x08006230
 8004628:	200008dc 	.word	0x200008dc
 800462c:	200008c0 	.word	0x200008c0
 8004630:	200008d4 	.word	0x200008d4
 8004634:	200008c8 	.word	0x200008c8

08004638 <bootloader_start>:
int bootloader_start(void) {
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (usbd_dev) { return 1; }  // Already started, quit.
 800463c:	4c49      	ldr	r4, [pc, #292]	; (8004764 <bootloader_start+0x12c>)
int bootloader_start(void) {
 800463e:	b089      	sub	sp, #36	; 0x24
    if (usbd_dev) { return 1; }  // Already started, quit.
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	b11b      	cbz	r3, 800464c <bootloader_start+0x14>
 8004644:	2001      	movs	r0, #1
}
 8004646:	b009      	add	sp, #36	; 0x24
 8004648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (boot_target_get_startup_mode() == BASELOADER_MODE) { 
 800464c:	f000 fdb6 	bl	80051bc <boot_target_get_startup_mode>
 8004650:	2801      	cmp	r0, #1
 8004652:	d02d      	beq.n	80046b0 <bootloader_start+0x78>
    debug_println("----bootloader");  // debug_flush();    
 8004654:	4844      	ldr	r0, [pc, #272]	; (8004768 <bootloader_start+0x130>)
 8004656:	f7ff fd3d 	bl	80040d4 <debug_println>
    boot_target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 800465a:	f000 fdc3 	bl	80051e4 <boot_target_gpio_setup>
    }
#endif  //  NOTUSED

static void get_serial_number(void) {
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 800465e:	2300      	movs	r3, #0
 8004660:	ad08      	add	r5, sp, #32
 8004662:	f805 3d1c 	strb.w	r3, [r5, #-28]!
    debug_println("boot_target_get_serial_number");  // debug_flush();
 8004666:	4841      	ldr	r0, [pc, #260]	; (800476c <bootloader_start+0x134>)
 8004668:	f7ff fd34 	bl	80040d4 <debug_println>
    boot_target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 800466c:	2118      	movs	r1, #24
 800466e:	4628      	mov	r0, r5
 8004670:	f000 fe48 	bl	8005304 <boot_target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8004674:	483e      	ldr	r0, [pc, #248]	; (8004770 <bootloader_start+0x138>)
 8004676:	f7ff fd2d 	bl	80040d4 <debug_println>
    usb_set_serial_number(serial);
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fa7c 	bl	8004b78 <usb_set_serial_number>
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) { 
 8004680:	f000 fd9c 	bl	80051bc <boot_target_get_startup_mode>
 8004684:	2802      	cmp	r0, #2
 8004686:	d102      	bne.n	800468e <bootloader_start+0x56>
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8004688:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <bootloader_start+0x13c>)
 800468a:	f383 8808 	msr	MSP, r3
    debug_println("usb_setup");  // debug_flush();
 800468e:	483a      	ldr	r0, [pc, #232]	; (8004778 <bootloader_start+0x140>)
 8004690:	f7ff fd20 	bl	80040d4 <debug_println>
    usbd_dev = usb_setup();
 8004694:	f000 f9be 	bl	8004a14 <usb_setup>
 8004698:	6020      	str	r0, [r4, #0]
    if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 800469a:	f000 fd8f 	bl	80051bc <boot_target_get_startup_mode>
 800469e:	2803      	cmp	r0, #3
 80046a0:	d109      	bne.n	80046b6 <bootloader_start+0x7e>
        target_set_bootloader_callback(bootloader_poll);
 80046a2:	4836      	ldr	r0, [pc, #216]	; (800477c <bootloader_start+0x144>)
 80046a4:	f7fc fade 	bl	8000c64 <target_set_bootloader_callback>
        return 0; 
 80046a8:	2000      	movs	r0, #0
}
 80046aa:	b009      	add	sp, #36	; 0x24
 80046ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        prepare_baseloader();
 80046b0:	f7ff fe94 	bl	80043dc <prepare_baseloader>
 80046b4:	e7ce      	b.n	8004654 <bootloader_start+0x1c>
    debug_println("usbd polling...");  debug_flush();  debug_flush();  // test_hf2(); test_backup();          //  Test backup.
 80046b6:	4832      	ldr	r0, [pc, #200]	; (8004780 <bootloader_start+0x148>)
 80046b8:	f7ff fd0c 	bl	80040d4 <debug_println>
 80046bc:	f7ff fc7a 	bl	8003fb4 <debug_flush>
 80046c0:	f7ff fc78 	bl	8003fb4 <debug_flush>
    boot_target_set_restart_callback(poll_restart_callback);
 80046c4:	482f      	ldr	r0, [pc, #188]	; (8004784 <bootloader_start+0x14c>)
 80046c6:	f000 fddb 	bl	8005280 <boot_target_set_restart_callback>
            cycleCount = 0;
 80046ca:	f04f 0900 	mov.w	r9, #0
            boot_target_set_led((msTimer++ % 500) < 50);
 80046ce:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 80046d2:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80047a0 <bootloader_start+0x168>
 80046d6:	4f2c      	ldr	r7, [pc, #176]	; (8004788 <bootloader_start+0x150>)
 80046d8:	4e2c      	ldr	r6, [pc, #176]	; (800478c <bootloader_start+0x154>)
 80046da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047a4 <bootloader_start+0x16c>
 80046de:	4d2c      	ldr	r5, [pc, #176]	; (8004790 <bootloader_start+0x158>)
        usbd_poll(usbd_dev);
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	f7fc fd63 	bl	80011ac <usbd_poll>
        cycleCount++;
 80046e6:	f8db 3000 	ldr.w	r3, [fp]
 80046ea:	3301      	adds	r3, #1
        if (cycleCount >= 700) {
 80046ec:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
        cycleCount++;
 80046f0:	f8cb 3000 	str.w	r3, [fp]
        if (cycleCount >= 700) {
 80046f4:	d3f4      	bcc.n	80046e0 <bootloader_start+0xa8>
            boot_target_set_led((msTimer++ % 500) < 50);
 80046f6:	683b      	ldr	r3, [r7, #0]
            cycleCount = 0;
 80046f8:	f8cb 9000 	str.w	r9, [fp]
            boot_target_set_led((msTimer++ % 500) < 50);
 80046fc:	fba5 2003 	umull	r2, r0, r5, r3
 8004700:	0940      	lsrs	r0, r0, #5
 8004702:	fb08 3010 	mls	r0, r8, r0, r3
 8004706:	2831      	cmp	r0, #49	; 0x31
 8004708:	f103 0301 	add.w	r3, r3, #1
 800470c:	bf8c      	ite	hi
 800470e:	2000      	movhi	r0, #0
 8004710:	2001      	movls	r0, #1
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	f000 fd5a 	bl	80051cc <boot_target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 8004718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800471c:	6832      	ldr	r2, [r6, #0]
 800471e:	fba5 0302 	umull	r0, r3, r5, r2
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	fb01 2313 	mls	r3, r1, r3, r2
 8004728:	3201      	adds	r2, #1
 800472a:	6032      	str	r2, [r6, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1d7      	bne.n	80046e0 <bootloader_start+0xa8>
 8004730:	f000 f9c6 	bl	8004ac0 <get_usb_status>
 8004734:	2800      	cmp	r0, #0
 8004736:	d1d3      	bne.n	80046e0 <bootloader_start+0xa8>
                debug_flush(); 
 8004738:	f7ff fc3c 	bl	8003fb4 <debug_flush>
                if (poll_restart_requested) {  //  Flush the log and restart.
 800473c:	f89a 3000 	ldrb.w	r3, [sl]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0cd      	beq.n	80046e0 <bootloader_start+0xa8>
                    debug_println("restarting...");
 8004744:	4813      	ldr	r0, [pc, #76]	; (8004794 <bootloader_start+0x15c>)
 8004746:	f7ff fcc5 	bl	80040d4 <debug_println>
                    debug_force_flush();
 800474a:	f7ff fc45 	bl	8003fd8 <debug_force_flush>
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <bootloader_start+0x160>)
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8004750:	bf00      	nop
 8004752:	3b01      	subs	r3, #1
 8004754:	d1fc      	bne.n	8004750 <bootloader_start+0x118>
                    debug_println("done");
 8004756:	4811      	ldr	r0, [pc, #68]	; (800479c <bootloader_start+0x164>)
 8004758:	f7ff fcbc 	bl	80040d4 <debug_println>
                    debug_force_flush();
 800475c:	f7ff fc3c 	bl	8003fd8 <debug_force_flush>
                    scb_reset_system();
 8004760:	f7fc fb1a 	bl	8000d98 <scb_reset_system>
 8004764:	200008e0 	.word	0x200008e0
 8004768:	080061a0 	.word	0x080061a0
 800476c:	080061b0 	.word	0x080061b0
 8004770:	080061d0 	.word	0x080061d0
 8004774:	200047bc 	.word	0x200047bc
 8004778:	080061e8 	.word	0x080061e8
 800477c:	080043ad 	.word	0x080043ad
 8004780:	080061f4 	.word	0x080061f4
 8004784:	0800438d 	.word	0x0800438d
 8004788:	200008d0 	.word	0x200008d0
 800478c:	2000046c 	.word	0x2000046c
 8004790:	10624dd3 	.word	0x10624dd3
 8004794:	08006204 	.word	0x08006204
 8004798:	00989680 	.word	0x00989680
 800479c:	08006214 	.word	0x08006214
 80047a0:	200008c4 	.word	0x200008c4
 80047a4:	20000b90 	.word	0x20000b90

080047a8 <bootloader_set_restart_callback>:
int bootloader_set_restart_callback(restart_callback_type *func) {
 80047a8:	b508      	push	{r3, lr}
    boot_target_set_restart_callback(func);
 80047aa:	f000 fd69 	bl	8005280 <boot_target_set_restart_callback>
}
 80047ae:	2000      	movs	r0, #0
 80047b0:	bd08      	pop	{r3, pc}
 80047b2:	bf00      	nop

080047b4 <flash_flush>:
    baseloader_start();
	int bytes_flashed = base_para.result;
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
}

void flash_flush(void) {
 80047b4:	b570      	push	{r4, r5, r6, lr}
    //  Flush the page of cached flashing data to ROM.
    lastFlush = ms;
 80047b6:	4b25      	ldr	r3, [pc, #148]	; (800484c <flash_flush+0x98>)
    if (flashAddr == NO_CACHE) { return; }
 80047b8:	4d25      	ldr	r5, [pc, #148]	; (8004850 <flash_flush+0x9c>)
    lastFlush = ms;
 80047ba:	681a      	ldr	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 80047bc:	6829      	ldr	r1, [r5, #0]
    lastFlush = ms;
 80047be:	4b25      	ldr	r3, [pc, #148]	; (8004854 <flash_flush+0xa0>)
 80047c0:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 80047c2:	1c4b      	adds	r3, r1, #1
 80047c4:	d00e      	beq.n	80047e4 <flash_flush+0x30>
    if (firstFlush) { firstFlush = false; }  //  TODO: disable bootloader or something
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <flash_flush+0xa4>)
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	b10a      	cbz	r2, 80047d0 <flash_flush+0x1c>
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 80047d0:	4e22      	ldr	r6, [pc, #136]	; (800485c <flash_flush+0xa8>)
 80047d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7ff fade 	bl	8003d98 <memcmp>
 80047dc:	b918      	cbnz	r0, 80047e6 <flash_flush+0x32>
        //  If the page contents are different, write to ROM.
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
    }
    flashAddr = NO_CACHE;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e2:	602b      	str	r3, [r5, #0]
}
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
 80047e6:	481e      	ldr	r0, [pc, #120]	; (8004860 <flash_flush+0xac>)
 80047e8:	f7ff fc6e 	bl	80040c8 <debug_print>
 80047ec:	6828      	ldr	r0, [r5, #0]
 80047ee:	f7ff fcb3 	bl	8004158 <debug_printhex_unsigned>
 80047f2:	481c      	ldr	r0, [pc, #112]	; (8004864 <flash_flush+0xb0>)
 80047f4:	f7ff fc68 	bl	80040c8 <debug_print>
    base_para.byte_count = half_word_count0 * 2;
 80047f8:	2300      	movs	r3, #0
 80047fa:	2204      	movs	r2, #4
    base_para.dest = (uint32_t) dest0;
 80047fc:	4c1a      	ldr	r4, [pc, #104]	; (8004868 <flash_flush+0xb4>)
 80047fe:	6829      	ldr	r1, [r5, #0]
    base_para.byte_count = half_word_count0 * 2;
 8004800:	7223      	strb	r3, [r4, #8]
    base_para.src = (uint32_t) src0;
 8004802:	6066      	str	r6, [r4, #4]
    base_para.byte_count = half_word_count0 * 2;
 8004804:	72a3      	strb	r3, [r4, #10]
 8004806:	72e3      	strb	r3, [r4, #11]
    base_para.restart = 0;
 8004808:	7323      	strb	r3, [r4, #12]
 800480a:	7363      	strb	r3, [r4, #13]
 800480c:	73a3      	strb	r3, [r4, #14]
 800480e:	73e3      	strb	r3, [r4, #15]
    base_para.preview = 0;
 8004810:	7423      	strb	r3, [r4, #16]
 8004812:	7463      	strb	r3, [r4, #17]
 8004814:	74a3      	strb	r3, [r4, #18]
 8004816:	74e3      	strb	r3, [r4, #19]
    base_para.dest = (uint32_t) dest0;
 8004818:	6021      	str	r1, [r4, #0]
    base_para.byte_count = half_word_count0 * 2;
 800481a:	7262      	strb	r2, [r4, #9]
    baseloader_start();
 800481c:	f7fb fca4 	bl	8000168 <baseloader_start>
	int bytes_flashed = base_para.result;
 8004820:	6964      	ldr	r4, [r4, #20]
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
 8004822:	2c00      	cmp	r4, #0
 8004824:	dd03      	ble.n	800482e <flash_flush+0x7a>
 8004826:	1064      	asrs	r4, r4, #1
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 8004828:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800482c:	d0d7      	beq.n	80047de <flash_flush+0x2a>
 800482e:	480f      	ldr	r0, [pc, #60]	; (800486c <flash_flush+0xb8>)
 8004830:	f7ff fc4a 	bl	80040c8 <debug_print>
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff fc67 	bl	8004108 <debug_print_int>
 800483a:	480d      	ldr	r0, [pc, #52]	; (8004870 <flash_flush+0xbc>)
 800483c:	f7ff fc4a 	bl	80040d4 <debug_println>
 8004840:	f7ff fbca 	bl	8003fd8 <debug_force_flush>
    flashAddr = NO_CACHE;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	e7cb      	b.n	80047e4 <flash_flush+0x30>
 800484c:	200008e8 	.word	0x200008e8
 8004850:	20000470 	.word	0x20000470
 8004854:	200008e4 	.word	0x200008e4
 8004858:	2000057c 	.word	0x2000057c
 800485c:	200047bc 	.word	0x200047bc
 8004860:	08006320 	.word	0x08006320
 8004864:	08006544 	.word	0x08006544
 8004868:	20000000 	.word	0x20000000
 800486c:	08006324 	.word	0x08006324
 8004870:	08005fa8 	.word	0x08005fa8

08004874 <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
    //  Write len bytes from src to ROM at address dst.  The writing is buffered in RAM until flash_flush() is called.    
    //  TODO: Support other memory sizes.
    int valid = 
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8004874:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
 8004878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	4604      	mov	r4, r0
 800487e:	460e      	mov	r6, r1
 8004880:	4615      	mov	r5, r2
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8004882:	d33f      	bcc.n	8004904 <flash_write+0x90>
 8004884:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <flash_write+0xc4>)
 8004886:	4402      	add	r2, r0
 8004888:	429a      	cmp	r2, r3
 800488a:	d83b      	bhi.n	8004904 <flash_write+0x90>
 800488c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8004890:	d338      	bcc.n	8004904 <flash_write+0x90>
        (
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 8004892:	186a      	adds	r2, r5, r1
 8004894:	429a      	cmp	r2, r3
 8004896:	d908      	bls.n	80048aa <flash_write+0x36>
 8004898:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800489c:	d332      	bcc.n	8004904 <flash_write+0x90>
            ((uint32_t) src >= 0x20000000 && ((uint32_t) src + byte_count) < 0x20005000)
 800489e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80048a2:	f5a3 4330 	sub.w	r3, r3, #45056	; 0xb000
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d82c      	bhi.n	8004904 <flash_write+0x90>
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
        return;
    }
    while (byte_count > 0) {
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	dd28      	ble.n	8004900 <flash_write+0x8c>
 80048ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800493c <flash_write+0xc8>
 80048b2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004950 <flash_write+0xdc>
        //  Copy one page at a time.
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80048b6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004954 <flash_write+0xe0>
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 80048ba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80048be:	462f      	mov	r7, r5
 80048c0:	bfa8      	it	ge
 80048c2:	f44f 6780 	movge.w	r7, #1024	; 0x400
        hadWrite = true;
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80048c6:	f8d8 2000 	ldr.w	r2, [r8]
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80048ca:	ea04 0b0a 	and.w	fp, r4, sl
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80048ce:	4593      	cmp	fp, r2
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
        memcpy(flashBuf + offset, src, len);
        //  Copy next page.
        dst += len;
        src += len;
        byte_count -= len;
 80048d0:	eba5 0507 	sub.w	r5, r5, r7
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80048d4:	d009      	beq.n	80048ea <flash_write+0x76>
            flash_flush();           //  Flush the previous cached page.
 80048d6:	f7ff ff6d 	bl	80047b4 <flash_flush>
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 80048da:	4659      	mov	r1, fp
 80048dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e0:	4816      	ldr	r0, [pc, #88]	; (800493c <flash_write+0xc8>)
            flashAddr = newAddr;
 80048e2:	f8c8 b000 	str.w	fp, [r8]
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 80048e6:	f7ff fa37 	bl	8003d58 <memcpy>
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
 80048ea:	f3c4 0009 	ubfx	r0, r4, #0, #10
        memcpy(flashBuf + offset, src, len);
 80048ee:	4631      	mov	r1, r6
 80048f0:	4448      	add	r0, r9
 80048f2:	463a      	mov	r2, r7
 80048f4:	f7ff fa30 	bl	8003d58 <memcpy>
    while (byte_count > 0) {
 80048f8:	2d00      	cmp	r5, #0
        dst += len;
 80048fa:	443c      	add	r4, r7
        src += len;
 80048fc:	443e      	add	r6, r7
    while (byte_count > 0) {
 80048fe:	dcdc      	bgt.n	80048ba <flash_write+0x46>
    }
}
 8004900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
 8004904:	480e      	ldr	r0, [pc, #56]	; (8004940 <flash_write+0xcc>)
 8004906:	f7ff fbdf 	bl	80040c8 <debug_print>
 800490a:	4620      	mov	r0, r4
 800490c:	f7ff fc24 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8004910:	480c      	ldr	r0, [pc, #48]	; (8004944 <flash_write+0xd0>)
 8004912:	f7ff fbd9 	bl	80040c8 <debug_print>
 8004916:	4630      	mov	r0, r6
 8004918:	f7ff fc1e 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 800491c:	480a      	ldr	r0, [pc, #40]	; (8004948 <flash_write+0xd4>)
 800491e:	f7ff fbd3 	bl	80040c8 <debug_print>
 8004922:	4628      	mov	r0, r5
 8004924:	f7ff fc18 	bl	8004158 <debug_printhex_unsigned>
 8004928:	4808      	ldr	r0, [pc, #32]	; (800494c <flash_write+0xd8>)
 800492a:	f7ff fbd3 	bl	80040d4 <debug_println>
}
 800492e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 8004932:	f7ff bb51 	b.w	8003fd8 <debug_force_flush>
 8004936:	bf00      	nop
 8004938:	0800ffff 	.word	0x0800ffff
 800493c:	200047bc 	.word	0x200047bc
 8004940:	08006340 	.word	0x08006340
 8004944:	08006258 	.word	0x08006258
 8004948:	08006260 	.word	0x08006260
 800494c:	08005fa8 	.word	0x08005fa8
 8004950:	20000470 	.word	0x20000470
 8004954:	fffffc00 	.word	0xfffffc00

08004958 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <hf2_connected+0xc>)
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	b90a      	cbnz	r2, 8004962 <hf2_connected+0xa>
    hf2_is_connected = 1;
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 8004962:	4770      	bx	lr
 8004964:	20000b92 	.word	0x20000b92

08004968 <usb_cdc_transmit>:
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <usb_cdc_transmit+0x28>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b16b      	cbz	r3, 800498a <usb_cdc_transmit+0x22>
	uint16_t len) {
 800496e:	b410      	push	{r4}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8004970:	4c08      	ldr	r4, [pc, #32]	; (8004994 <usb_cdc_transmit+0x2c>)
 8004972:	7824      	ldrb	r4, [r4, #0]
 8004974:	b12c      	cbz	r4, 8004982 <usb_cdc_transmit+0x1a>
    return cdcadm_transmit(usbd_dev, buf, len);
 8004976:	460a      	mov	r2, r1
}
 8004978:	bc10      	pop	{r4}
    return cdcadm_transmit(usbd_dev, buf, len);
 800497a:	4601      	mov	r1, r0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 bd31 	b.w	80053e4 <cdcadm_transmit>
}
 8004982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004986:	bc10      	pop	{r4}
 8004988:	4770      	bx	lr
 800498a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498e:	4770      	bx	lr
 8004990:	20000988 	.word	0x20000988
 8004994:	20000b91 	.word	0x20000b91

08004998 <sof_callback>:
static void sof_callback(void) {
 8004998:	b508      	push	{r3, lr}
    last_frame_time = millis();
 800499a:	f7ff fcf5 	bl	8004388 <millis>
 800499e:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <sof_callback+0xc>)
 80049a0:	6018      	str	r0, [r3, #0]
}
 80049a2:	bd08      	pop	{r3, pc}
 80049a4:	20000968 	.word	0x20000968

080049a8 <cdc_connected>:
    if (cdc_is_connected) { return; }
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <cdc_connected+0x14>)
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	b102      	cbz	r2, 80049b0 <cdc_connected+0x8>
}
 80049ae:	4770      	bx	lr
    cdc_is_connected = 1;
 80049b0:	2201      	movs	r2, #1
    logger_add_output(usb_cdc_transmit);
 80049b2:	4803      	ldr	r0, [pc, #12]	; (80049c0 <cdc_connected+0x18>)
    cdc_is_connected = 1;
 80049b4:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 80049b6:	f7ff bad7 	b.w	8003f68 <logger_add_output>
 80049ba:	bf00      	nop
 80049bc:	20000b91 	.word	0x20000b91
 80049c0:	08004969 	.word	0x08004969

080049c4 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80049c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ca:	4299      	cmp	r1, r3
  uint16_t wValue) {
 80049cc:	4605      	mov	r5, r0
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80049ce:	d00b      	beq.n	80049e8 <set_aggregate_callback+0x24>
 80049d0:	460e      	mov	r6, r1
 80049d2:	4c0d      	ldr	r4, [pc, #52]	; (8004a08 <set_aggregate_callback+0x44>)
 80049d4:	f104 0728 	add.w	r7, r4, #40	; 0x28
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
            if (!config_callback[i]) { break; }
 80049d8:	f854 3b04 	ldr.w	r3, [r4], #4
 80049dc:	b123      	cbz	r3, 80049e8 <set_aggregate_callback+0x24>
            (config_callback[i])(usbd_dev, wValue);
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80049e4:	42bc      	cmp	r4, r7
 80049e6:	d1f7      	bne.n	80049d8 <set_aggregate_callback+0x14>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80049e8:	2200      	movs	r2, #0
 80049ea:	4628      	mov	r0, r5
 80049ec:	4611      	mov	r1, r2
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <set_aggregate_callback+0x48>)
 80049f0:	f7fc fcc0 	bl	8001374 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80049f4:	2800      	cmp	r0, #0
 80049f6:	db00      	blt.n	80049fa <set_aggregate_callback+0x36>
}
 80049f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80049fa:	4805      	ldr	r0, [pc, #20]	; (8004a10 <set_aggregate_callback+0x4c>)
 80049fc:	f7ff fb6a 	bl	80040d4 <debug_println>
}
 8004a00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 8004a04:	f7ff bad6 	b.w	8003fb4 <debug_flush>
 8004a08:	200008ec 	.word	0x200008ec
 8004a0c:	08004d5d 	.word	0x08004d5d
 8004a10:	080065bc 	.word	0x080065bc

08004a14 <usb_setup>:
usbd_device* usb_setup(void) {
 8004a14:	b510      	push	{r4, lr}
 8004a16:	b084      	sub	sp, #16
    const usbd_driver* driver = boot_target_usb_init();
 8004a18:	f000 fc1c 	bl	8005254 <boot_target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 8004a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a20:	2209      	movs	r2, #9
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <usb_setup+0x7c>)
 8004a24:	9102      	str	r1, [sp, #8]
 8004a26:	e9cd 2300 	strd	r2, r3, [sp]
 8004a2a:	491a      	ldr	r1, [pc, #104]	; (8004a94 <usb_setup+0x80>)
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <usb_setup+0x84>)
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <usb_setup+0x88>)
 8004a30:	f7fc fb74 	bl	800111c <usbd_init>
 8004a34:	4c1a      	ldr	r4, [pc, #104]	; (8004aa0 <usb_setup+0x8c>)
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8004a36:	491b      	ldr	r1, [pc, #108]	; (8004aa4 <usb_setup+0x90>)
    usbd_dev = usbd_init(driver, &dev, &config, 
 8004a38:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8004a3a:	f7fc fb99 	bl	8001170 <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	4919      	ldr	r1, [pc, #100]	; (8004aa8 <usb_setup+0x94>)
 8004a42:	f000 fd1f 	bl	8005484 <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	4918      	ldr	r1, [pc, #96]	; (8004aac <usb_setup+0x98>)
 8004a4a:	f001 f93f 	bl	8005ccc <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <usb_setup+0x9c>)
 8004a52:	f001 fa01 	bl	8005e58 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 8004a56:	6820      	ldr	r0, [r4, #0]
 8004a58:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <usb_setup+0xa0>)
 8004a5a:	f000 fa45 	bl	8004ee8 <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	2100      	movs	r1, #0
 8004a62:	f000 faef 	bl	8005044 <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	4913      	ldr	r1, [pc, #76]	; (8004ab8 <usb_setup+0xa4>)
 8004a6a:	f7fc ffa5 	bl	80019b8 <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	db07      	blt.n	8004a82 <usb_setup+0x6e>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a78:	f7ff ffa4 	bl	80049c4 <set_aggregate_callback>
}
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8004a82:	480e      	ldr	r0, [pc, #56]	; (8004abc <usb_setup+0xa8>)
 8004a84:	f7ff fb26 	bl	80040d4 <debug_println>
 8004a88:	f7ff fa94 	bl	8003fb4 <debug_flush>
 8004a8c:	e7f1      	b.n	8004a72 <usb_setup+0x5e>
 8004a8e:	bf00      	nop
 8004a90:	20000a90 	.word	0x20000a90
 8004a94:	080064b4 	.word	0x080064b4
 8004a98:	2000047c 	.word	0x2000047c
 8004a9c:	0800646c 	.word	0x0800646c
 8004aa0:	20000988 	.word	0x20000988
 8004aa4:	08004999 	.word	0x08004999
 8004aa8:	080049a9 	.word	0x080049a9
 8004aac:	08004959 	.word	0x08004959
 8004ab0:	0800641c 	.word	0x0800641c
 8004ab4:	08006670 	.word	0x08006670
 8004ab8:	080049c5 	.word	0x080049c5
 8004abc:	0800668c 	.word	0x0800668c

08004ac0 <get_usb_status>:
volatile int get_usb_status(void) { 
 8004ac0:	b510      	push	{r4, lr}
    if (last_busy_time == 0) { return 0; }
 8004ac2:	4c09      	ldr	r4, [pc, #36]	; (8004ae8 <get_usb_status+0x28>)
volatile int get_usb_status(void) { 
 8004ac4:	b082      	sub	sp, #8
    if (last_busy_time == 0) { return 0; }
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	b160      	cbz	r0, 8004ae4 <get_usb_status+0x24>
    volatile uint32_t now = millis();
 8004aca:	f7ff fc5d 	bl	8004388 <millis>
 8004ace:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	9a01      	ldr	r2, [sp, #4]
 8004ad4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004ad8:	3308      	adds	r3, #8
 8004ada:	4293      	cmp	r3, r2
    last_busy_time = 0;
 8004adc:	bf96      	itet	ls
 8004ade:	2000      	movls	r0, #0
        return 1; 
 8004ae0:	2001      	movhi	r0, #1
    last_busy_time = 0;
 8004ae2:	6020      	strls	r0, [r4, #0]
}
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd10      	pop	{r4, pc}
 8004ae8:	20000964 	.word	0x20000964

08004aec <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <aggregate_register_config_callback+0x34>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004af0:	2300      	movs	r3, #0
 8004af2:	4622      	mov	r2, r4
		if (config_callback[i]) {
 8004af4:	f852 0b04 	ldr.w	r0, [r2], #4
 8004af8:	b178      	cbz	r0, 8004b1a <aggregate_register_config_callback+0x2e>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 8004afa:	4288      	cmp	r0, r1
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004afc:	f103 0301 	add.w	r3, r3, #1
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 8004b00:	d009      	beq.n	8004b16 <aggregate_register_config_callback+0x2a>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004b02:	2b0a      	cmp	r3, #10
 8004b04:	d1f6      	bne.n	8004af4 <aggregate_register_config_callback+0x8>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 8004b06:	4807      	ldr	r0, [pc, #28]	; (8004b24 <aggregate_register_config_callback+0x38>)
 8004b08:	f7ff fae4 	bl	80040d4 <debug_println>
 8004b0c:	f7ff fa52 	bl	8003fb4 <debug_flush>
	return -1;
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004b14:	bd10      	pop	{r4, pc}
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 8004b16:	2000      	movs	r0, #0
}
 8004b18:	bd10      	pop	{r4, pc}
		config_callback[i] = callback;
 8004b1a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	200008ec 	.word	0x200008ec
 8004b24:	080063f4 	.word	0x080063f4

08004b28 <aggregate_register_callback>:
    usbd_control_callback callback) {
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	4f11      	ldr	r7, [pc, #68]	; (8004b70 <aggregate_register_callback+0x48>)
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004b2c:	2500      	movs	r5, #0
 8004b2e:	463c      	mov	r4, r7
		if (control_callback[i].cb) { 
 8004b30:	6860      	ldr	r0, [r4, #4]
 8004b32:	b1b0      	cbz	r0, 8004b62 <aggregate_register_callback+0x3a>
            if (control_callback[i].type == type &&
 8004b34:	7826      	ldrb	r6, [r4, #0]
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004b36:	3501      	adds	r5, #1
            if (control_callback[i].type == type &&
 8004b38:	428e      	cmp	r6, r1
 8004b3a:	d104      	bne.n	8004b46 <aggregate_register_callback+0x1e>
 8004b3c:	7866      	ldrb	r6, [r4, #1]
 8004b3e:	4296      	cmp	r6, r2
 8004b40:	d101      	bne.n	8004b46 <aggregate_register_callback+0x1e>
                control_callback[i].type_mask == type_mask &&
 8004b42:	4298      	cmp	r0, r3
 8004b44:	d00b      	beq.n	8004b5e <aggregate_register_callback+0x36>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004b46:	2d0a      	cmp	r5, #10
 8004b48:	f104 0408 	add.w	r4, r4, #8
 8004b4c:	d1f0      	bne.n	8004b30 <aggregate_register_callback+0x8>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 8004b4e:	4809      	ldr	r0, [pc, #36]	; (8004b74 <aggregate_register_callback+0x4c>)
 8004b50:	f7ff fac0 	bl	80040d4 <debug_println>
 8004b54:	f7ff fa2e 	bl	8003fb4 <debug_flush>
	return -1;
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    return 0;
 8004b5e:	2000      	movs	r0, #0
}
 8004b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		control_callback[i].type_mask = type_mask;
 8004b62:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
		control_callback[i].type = type;
 8004b66:	f807 1035 	strb.w	r1, [r7, r5, lsl #3]
		control_callback[i].type_mask = type_mask;
 8004b6a:	7062      	strb	r2, [r4, #1]
		control_callback[i].cb = callback;
 8004b6c:	6063      	str	r3, [r4, #4]
}
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b70:	20000914 	.word	0x20000914
 8004b74:	080063cc 	.word	0x080063cc

08004b78 <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
 8004b78:	b510      	push	{r4, lr}
    serial_number[0] = '\0';
 8004b7a:	2400      	movs	r4, #0
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <usb_set_serial_number+0x18>)
 8004b7e:	701c      	strb	r4, [r3, #0]
    if (serial) {
 8004b80:	b128      	cbz	r0, 8004b8e <usb_set_serial_number+0x16>
 8004b82:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8004b84:	2218      	movs	r2, #24
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f94d 	bl	8003e26 <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 8004b8c:	7604      	strb	r4, [r0, #24]
    }
}
 8004b8e:	bd10      	pop	{r4, pc}
 8004b90:	2000096c 	.word	0x2000096c

08004b94 <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4615      	mov	r5, r2
 8004b98:	460c      	mov	r4, r1
    debug_print(msg); debug_print(" ");
 8004b9a:	f7ff fa95 	bl	80040c8 <debug_print>
 8004b9e:	480e      	ldr	r0, [pc, #56]	; (8004bd8 <dump_buffer+0x44>)
 8004ba0:	f7ff fa92 	bl	80040c8 <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff fab1 	bl	800410c <debug_print_unsigned>
 8004baa:	480c      	ldr	r0, [pc, #48]	; (8004bdc <dump_buffer+0x48>)
 8004bac:	f7ff fa8c 	bl	80040c8 <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	dd0b      	ble.n	8004bcc <dump_buffer+0x38>
 8004bb4:	3c01      	subs	r4, #1
        debug_printhex(buf[i]); debug_print(" "); 
 8004bb6:	4e08      	ldr	r6, [pc, #32]	; (8004bd8 <dump_buffer+0x44>)
 8004bb8:	4425      	add	r5, r4
 8004bba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004bbe:	f7ff faa7 	bl	8004110 <debug_printhex>
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7ff fa80 	bl	80040c8 <debug_print>
    for (i = 0; i < len; i++) { 
 8004bc8:	42ac      	cmp	r4, r5
 8004bca:	d1f6      	bne.n	8004bba <dump_buffer+0x26>
    }
    debug_println("");
}
 8004bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 8004bd0:	4803      	ldr	r0, [pc, #12]	; (8004be0 <dump_buffer+0x4c>)
 8004bd2:	f7ff ba7f 	b.w	80040d4 <debug_println>
 8004bd6:	bf00      	nop
 8004bd8:	08006544 	.word	0x08006544
 8004bdc:	080064c8 	.word	0x080064c8
 8004be0:	08005fa8 	.word	0x08005fa8

08004be4 <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	460c      	mov	r4, r1
    debug_print(msg);
 8004be8:	f7ff fa6e 	bl	80040c8 <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 8004bec:	4849      	ldr	r0, [pc, #292]	; (8004d14 <dump_usb_request+0x130>)
    uint8_t desc_type = usb_descriptor_type(req->wValue);
 8004bee:	8865      	ldrh	r5, [r4, #2]
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 8004bf0:	f7ff fa6a 	bl	80040c8 <debug_print>
 8004bf4:	7820      	ldrb	r0, [r4, #0]
 8004bf6:	f7ff fa8b 	bl	8004110 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 8004bfa:	4847      	ldr	r0, [pc, #284]	; (8004d18 <dump_usb_request+0x134>)
 8004bfc:	f7ff fa64 	bl	80040c8 <debug_print>
 8004c00:	7860      	ldrb	r0, [r4, #1]
 8004c02:	f7ff fa85 	bl	8004110 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 8004c06:	4845      	ldr	r0, [pc, #276]	; (8004d1c <dump_usb_request+0x138>)
 8004c08:	f7ff fa5e 	bl	80040c8 <debug_print>
 8004c0c:	8860      	ldrh	r0, [r4, #2]
	return wValue >> 8;
 8004c0e:	0a2e      	lsrs	r6, r5, #8
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 8004c10:	0a00      	lsrs	r0, r0, #8
 8004c12:	f7ff fa7d 	bl	8004110 <debug_printhex>
 8004c16:	8860      	ldrh	r0, [r4, #2]
 8004c18:	b2c0      	uxtb	r0, r0
 8004c1a:	f7ff fa79 	bl	8004110 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 8004c1e:	4840      	ldr	r0, [pc, #256]	; (8004d20 <dump_usb_request+0x13c>)
 8004c20:	f7ff fa52 	bl	80040c8 <debug_print>
 8004c24:	88a0      	ldrh	r0, [r4, #4]
 8004c26:	0a00      	lsrs	r0, r0, #8
 8004c28:	f7ff fa72 	bl	8004110 <debug_printhex>
 8004c2c:	88a0      	ldrh	r0, [r4, #4]
 8004c2e:	b2c0      	uxtb	r0, r0
 8004c30:	f7ff fa6e 	bl	8004110 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 8004c34:	483b      	ldr	r0, [pc, #236]	; (8004d24 <dump_usb_request+0x140>)
 8004c36:	f7ff fa47 	bl	80040c8 <debug_print>
 8004c3a:	88e0      	ldrh	r0, [r4, #6]
 8004c3c:	0a00      	lsrs	r0, r0, #8
 8004c3e:	f7ff fa67 	bl	8004110 <debug_printhex>
 8004c42:	88e0      	ldrh	r0, [r4, #6]
 8004c44:	b2c0      	uxtb	r0, r0
 8004c46:	f7ff fa63 	bl	8004110 <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8004c4a:	7823      	ldrb	r3, [r4, #0]
 8004c4c:	b9cb      	cbnz	r3, 8004c82 <dump_usb_request+0x9e>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 8004c4e:	7863      	ldrb	r3, [r4, #1]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d043      	beq.n	8004cdc <dump_usb_request+0xf8>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 8004c54:	2b09      	cmp	r3, #9
            debug_print(", SET_CFG    ");
 8004c56:	bf0c      	ite	eq
 8004c58:	4833      	ldreq	r0, [pc, #204]	; (8004d28 <dump_usb_request+0x144>)
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 8004c5a:	4834      	ldrne	r0, [pc, #208]	; (8004d2c <dump_usb_request+0x148>)
 8004c5c:	f7ff fa34 	bl	80040c8 <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8004c60:	4833      	ldr	r0, [pc, #204]	; (8004d30 <dump_usb_request+0x14c>)
 8004c62:	f7ff fa31 	bl	80040c8 <debug_print>
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff fa52 	bl	8004110 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8004c6c:	4831      	ldr	r0, [pc, #196]	; (8004d34 <dump_usb_request+0x150>)
 8004c6e:	f7ff fa2b 	bl	80040c8 <debug_print>
 8004c72:	b2e8      	uxtb	r0, r5
 8004c74:	f7ff fa4c 	bl	8004110 <debug_printhex>
    }
    debug_println("");
}
 8004c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 8004c7c:	482e      	ldr	r0, [pc, #184]	; (8004d38 <dump_usb_request+0x154>)
 8004c7e:	f7ff ba29 	b.w	80040d4 <debug_println>
    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d1f8      	bne.n	8004c78 <dump_usb_request+0x94>
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8004c86:	7863      	ldrb	r3, [r4, #1]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d1e3      	bne.n	8004c54 <dump_usb_request+0x70>
            debug_print(", GET_DES");
 8004c8c:	482b      	ldr	r0, [pc, #172]	; (8004d3c <dump_usb_request+0x158>)
 8004c8e:	f7ff fa1b 	bl	80040c8 <debug_print>
            switch(desc_type) {
 8004c92:	1e73      	subs	r3, r6, #1
 8004c94:	2b0e      	cmp	r3, #14
 8004c96:	d8e3      	bhi.n	8004c60 <dump_usb_request+0x7c>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <dump_usb_request+0xbc>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004d0d 	.word	0x08004d0d
 8004ca4:	08004d05 	.word	0x08004d05
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004cf5 	.word	0x08004cf5
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004c61 	.word	0x08004c61
 8004cb8:	08004c61 	.word	0x08004c61
 8004cbc:	08004c61 	.word	0x08004c61
 8004cc0:	08004c61 	.word	0x08004c61
 8004cc4:	08004c61 	.word	0x08004c61
 8004cc8:	08004c61 	.word	0x08004c61
 8004ccc:	08004c61 	.word	0x08004c61
 8004cd0:	08004c61 	.word	0x08004c61
 8004cd4:	08004c61 	.word	0x08004c61
 8004cd8:	08004ce5 	.word	0x08004ce5
            debug_print(", SET_ADR    ");
 8004cdc:	4818      	ldr	r0, [pc, #96]	; (8004d40 <dump_usb_request+0x15c>)
 8004cde:	f7ff f9f3 	bl	80040c8 <debug_print>
 8004ce2:	e7bd      	b.n	8004c60 <dump_usb_request+0x7c>
                case 15: debug_print("_BOS"); break;
 8004ce4:	4817      	ldr	r0, [pc, #92]	; (8004d44 <dump_usb_request+0x160>)
 8004ce6:	f7ff f9ef 	bl	80040c8 <debug_print>
 8004cea:	e7b9      	b.n	8004c60 <dump_usb_request+0x7c>
                case 5: debug_print("_ENP"); break;
 8004cec:	4816      	ldr	r0, [pc, #88]	; (8004d48 <dump_usb_request+0x164>)
 8004cee:	f7ff f9eb 	bl	80040c8 <debug_print>
 8004cf2:	e7b5      	b.n	8004c60 <dump_usb_request+0x7c>
                case 4: debug_print("_INF"); break;
 8004cf4:	4815      	ldr	r0, [pc, #84]	; (8004d4c <dump_usb_request+0x168>)
 8004cf6:	f7ff f9e7 	bl	80040c8 <debug_print>
 8004cfa:	e7b1      	b.n	8004c60 <dump_usb_request+0x7c>
                case 3: debug_print("_STR"); break;
 8004cfc:	4814      	ldr	r0, [pc, #80]	; (8004d50 <dump_usb_request+0x16c>)
 8004cfe:	f7ff f9e3 	bl	80040c8 <debug_print>
 8004d02:	e7ad      	b.n	8004c60 <dump_usb_request+0x7c>
                case 2: debug_print("_CFG"); break;
 8004d04:	4813      	ldr	r0, [pc, #76]	; (8004d54 <dump_usb_request+0x170>)
 8004d06:	f7ff f9df 	bl	80040c8 <debug_print>
 8004d0a:	e7a9      	b.n	8004c60 <dump_usb_request+0x7c>
                case 1: debug_print("_DEV"); break;
 8004d0c:	4812      	ldr	r0, [pc, #72]	; (8004d58 <dump_usb_request+0x174>)
 8004d0e:	f7ff f9db 	bl	80040c8 <debug_print>
 8004d12:	e7a5      	b.n	8004c60 <dump_usb_request+0x7c>
 8004d14:	080064cc 	.word	0x080064cc
 8004d18:	080064d4 	.word	0x080064d4
 8004d1c:	080064dc 	.word	0x080064dc
 8004d20:	080064e4 	.word	0x080064e4
 8004d24:	08006260 	.word	0x08006260
 8004d28:	08006538 	.word	0x08006538
 8004d2c:	08006548 	.word	0x08006548
 8004d30:	0800654c 	.word	0x0800654c
 8004d34:	08006550 	.word	0x08006550
 8004d38:	08005fa8 	.word	0x08005fa8
 8004d3c:	080064ec 	.word	0x080064ec
 8004d40:	08006528 	.word	0x08006528
 8004d44:	08006520 	.word	0x08006520
 8004d48:	08006518 	.word	0x08006518
 8004d4c:	08006510 	.word	0x08006510
 8004d50:	08006508 	.word	0x08006508
 8004d54:	08006500 	.word	0x08006500
 8004d58:	080064f8 	.word	0x080064f8

08004d5c <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8004d60:	780c      	ldrb	r4, [r1, #0]
	usbd_control_complete_callback *complete) {
 8004d62:	b083      	sub	sp, #12
 8004d64:	460e      	mov	r6, r1
 8004d66:	4681      	mov	r9, r0
 8004d68:	4692      	mov	sl, r2
 8004d6a:	4698      	mov	r8, r3
 8004d6c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8004d70:	b914      	cbnz	r4, 8004d78 <aggregate_callback+0x1c>
 8004d72:	784b      	ldrb	r3, [r1, #1]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d031      	beq.n	8004ddc <aggregate_callback+0x80>
 8004d78:	4c23      	ldr	r4, [pc, #140]	; (8004e08 <aggregate_callback+0xac>)
 8004d7a:	f104 0750 	add.w	r7, r4, #80	; 0x50
        if (control_callback[i].cb == NULL) { break; }
 8004d7e:	6865      	ldr	r5, [r4, #4]
 8004d80:	b195      	cbz	r5, 8004da8 <aggregate_callback+0x4c>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 8004d82:	7861      	ldrb	r1, [r4, #1]
 8004d84:	7833      	ldrb	r3, [r6, #0]
 8004d86:	7822      	ldrb	r2, [r4, #0]
 8004d88:	400b      	ands	r3, r1
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f104 0408 	add.w	r4, r4, #8
 8004d90:	d108      	bne.n	8004da4 <aggregate_callback+0x48>
            result = control_callback[i].cb(
 8004d92:	f8cd b000 	str.w	fp, [sp]
 8004d96:	4643      	mov	r3, r8
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4648      	mov	r0, r9
 8004d9e:	47a8      	blx	r5
            if (result == USBD_REQ_HANDLED ||
 8004da0:	2801      	cmp	r0, #1
 8004da2:	d914      	bls.n	8004dce <aggregate_callback+0x72>
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8004da4:	42bc      	cmp	r4, r7
 8004da6:	d1ea      	bne.n	8004d7e <aggregate_callback+0x22>
    last_busy_time = millis();
 8004da8:	f7ff faee 	bl	8004388 <millis>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <aggregate_callback+0xb0>)
    debug_print(".");
 8004db0:	4817      	ldr	r0, [pc, #92]	; (8004e10 <aggregate_callback+0xb4>)
    last_busy_time = millis();
 8004db2:	601a      	str	r2, [r3, #0]
    debug_print(".");
 8004db4:	f7ff f988 	bl	80040c8 <debug_print>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 8004db8:	7833      	ldrb	r3, [r6, #0]
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d102      	bne.n	8004dc4 <aggregate_callback+0x68>
 8004dbe:	7873      	ldrb	r3, [r6, #1]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d007      	beq.n	8004dd4 <aggregate_callback+0x78>
	    dump_usb_request(">> ", req);
 8004dc4:	4813      	ldr	r0, [pc, #76]	; (8004e14 <aggregate_callback+0xb8>)
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	f7ff ff0c 	bl	8004be4 <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 8004dcc:	2002      	movs	r0, #2
}
 8004dce:	b003      	add	sp, #12
 8004dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return USBD_REQ_NEXT_CALLBACK;
 8004dd4:	2002      	movs	r0, #2
}
 8004dd6:	b003      	add	sp, #12
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    last_busy_time = millis();
 8004ddc:	f7ff fad4 	bl	8004388 <millis>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <aggregate_callback+0xb0>)
    debug_print(".");
 8004de4:	480a      	ldr	r0, [pc, #40]	; (8004e10 <aggregate_callback+0xb4>)
    last_busy_time = millis();
 8004de6:	601a      	str	r2, [r3, #0]
    debug_print(".");
 8004de8:	f7ff f96e 	bl	80040c8 <debug_print>
        debug_println("SET_ADR");
 8004dec:	480a      	ldr	r0, [pc, #40]	; (8004e18 <aggregate_callback+0xbc>)
 8004dee:	f7ff f971 	bl	80040d4 <debug_println>
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8004df2:	4643      	mov	r3, r8
 8004df4:	4652      	mov	r2, sl
 8004df6:	4631      	mov	r1, r6
 8004df8:	4648      	mov	r0, r9
        *len = 0;          //  Return an empty message.
 8004dfa:	f8a8 4000 	strh.w	r4, [r8]
}
 8004dfe:	b003      	add	sp, #12
 8004e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8004e04:	f7fc bdf2 	b.w	80019ec <_usbd_standard_request_device>
 8004e08:	20000914 	.word	0x20000914
 8004e0c:	20000964 	.word	0x20000964
 8004e10:	08006210 	.word	0x08006210
 8004e14:	080063c8 	.word	0x080063c8
 8004e18:	080063c0 	.word	0x080063c0

08004e1c <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004e1c:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8004e1e:	227f      	movs	r2, #127	; 0x7f
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <webusb_set_config+0x20>)
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	f7ff fe80 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	db00      	blt.n	8004e2e <webusb_set_config+0x12>
}
 8004e2c:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8004e2e:	4804      	ldr	r0, [pc, #16]	; (8004e40 <webusb_set_config+0x24>)
 8004e30:	f7ff f950 	bl	80040d4 <debug_println>
}
 8004e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8004e38:	f7ff b8bc 	b.w	8003fb4 <debug_flush>
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	080066fc 	.word	0x080066fc

08004e44 <webusb_control_vendor_request>:
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004e44:	7808      	ldrb	r0, [r1, #0]
 8004e46:	3040      	adds	r0, #64	; 0x40
 8004e48:	b2c0      	uxtb	r0, r0
 8004e4a:	2801      	cmp	r0, #1
 8004e4c:	d81e      	bhi.n	8004e8c <webusb_control_vendor_request+0x48>
									 usbd_control_complete_callback* complete) {
 8004e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8004e52:	7848      	ldrb	r0, [r1, #1]
 8004e54:	460c      	mov	r4, r1
 8004e56:	2822      	cmp	r0, #34	; 0x22
 8004e58:	d115      	bne.n	8004e86 <webusb_control_vendor_request+0x42>
 8004e5a:	461d      	mov	r5, r3
	switch (req->wIndex) {
 8004e5c:	888b      	ldrh	r3, [r1, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d116      	bne.n	8004e90 <webusb_control_vendor_request+0x4c>
			uint16_t index = req->wValue;
 8004e62:	884c      	ldrh	r4, [r1, #2]
			if (index == 0) {
 8004e64:	b10c      	cbz	r4, 8004e6a <webusb_control_vendor_request+0x26>
			if (index == 1) {
 8004e66:	2c01      	cmp	r4, #1
 8004e68:	d017      	beq.n	8004e9a <webusb_control_vendor_request+0x56>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8004e6a:	481a      	ldr	r0, [pc, #104]	; (8004ed4 <webusb_control_vendor_request+0x90>)
 8004e6c:	f7ff f92c 	bl	80040c8 <debug_print>
 8004e70:	4620      	mov	r0, r4
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8004e72:	f7ff f94b 	bl	800410c <debug_print_unsigned>
 8004e76:	4818      	ldr	r0, [pc, #96]	; (8004ed8 <webusb_control_vendor_request+0x94>)
 8004e78:	f7ff f92c 	bl	80040d4 <debug_println>
 8004e7c:	f7ff f89a 	bl	8003fb4 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 8004e80:	2000      	movs	r0, #0
}
 8004e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004e86:	2002      	movs	r0, #2
}
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004e8c:	2002      	movs	r0, #2
}
 8004e8e:	4770      	bx	lr
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8004e90:	4812      	ldr	r0, [pc, #72]	; (8004edc <webusb_control_vendor_request+0x98>)
 8004e92:	f7ff f919 	bl	80040c8 <debug_print>
 8004e96:	88a0      	ldrh	r0, [r4, #4]
 8004e98:	e7eb      	b.n	8004e72 <webusb_control_vendor_request+0x2e>
				dump_usb_request("weburl", req); // debug_flush(); ////
 8004e9a:	4811      	ldr	r0, [pc, #68]	; (8004ee0 <webusb_control_vendor_request+0x9c>)
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 8004e9c:	6817      	ldr	r7, [r2, #0]
				dump_usb_request("weburl", req); // debug_flush(); ////
 8004e9e:	f7ff fea1 	bl	8004be4 <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <webusb_control_vendor_request+0xa0>)
 8004ea4:	f8d3 8000 	ldr.w	r8, [r3]
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	f7fe ff6d 	bl	8003d88 <strlen>
				url->bDescriptorType = WEBUSB_DT_URL;
 8004eae:	2303      	movs	r3, #3
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8004eb0:	18c6      	adds	r6, r0, r3
 8004eb2:	b2f6      	uxtb	r6, r6
				size_t url_len = strlen(webusb_https_url);
 8004eb4:	4602      	mov	r2, r0
				url->bDescriptorType = WEBUSB_DT_URL;
 8004eb6:	707b      	strb	r3, [r7, #1]
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8004eb8:	703e      	strb	r6, [r7, #0]
				memcpy(&url->URL, webusb_https_url, url_len);
 8004eba:	18f8      	adds	r0, r7, r3
 8004ebc:	4641      	mov	r1, r8
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 8004ebe:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 8004ec0:	f7fe ff4a 	bl	8003d58 <memcpy>
				*len = MIN(*len, url->bLength);
 8004ec4:	882b      	ldrh	r3, [r5, #0]
				status = USBD_REQ_HANDLED;
 8004ec6:	4620      	mov	r0, r4
				*len = MIN(*len, url->bLength);
 8004ec8:	429e      	cmp	r6, r3
 8004eca:	bf28      	it	cs
 8004ecc:	461e      	movcs	r6, r3
 8004ece:	802e      	strh	r6, [r5, #0]
 8004ed0:	e7da      	b.n	8004e88 <webusb_control_vendor_request+0x44>
 8004ed2:	bf00      	nop
 8004ed4:	080066a4 	.word	0x080066a4
 8004ed8:	08005fa8 	.word	0x08005fa8
 8004edc:	080066c8 	.word	0x080066c8
 8004ee0:	080066c0 	.word	0x080066c0
 8004ee4:	2000098c 	.word	0x2000098c

08004ee8 <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <webusb_setup+0x40>)
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8004eea:	b510      	push	{r4, lr}

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <webusb_setup+0x44>)
	webusb_https_url = https_url;
 8004eee:	6011      	str	r1, [r2, #0]
	int status = aggregate_register_callback(
 8004ef0:	227f      	movs	r2, #127	; 0x7f
 8004ef2:	2140      	movs	r1, #64	; 0x40
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8004ef4:	4604      	mov	r4, r0
	int status = aggregate_register_callback(
 8004ef6:	f7ff fe17 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004efa:	2800      	cmp	r0, #0
 8004efc:	db0d      	blt.n	8004f1a <webusb_setup+0x32>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 8004efe:	4620      	mov	r0, r4
 8004f00:	490b      	ldr	r1, [pc, #44]	; (8004f30 <webusb_setup+0x48>)
 8004f02:	f7ff fdf3 	bl	8004aec <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004f06:	2800      	cmp	r0, #0
 8004f08:	db00      	blt.n	8004f0c <webusb_setup+0x24>
}
 8004f0a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004f0c:	4809      	ldr	r0, [pc, #36]	; (8004f34 <webusb_setup+0x4c>)
 8004f0e:	f7ff f8e1 	bl	80040d4 <debug_println>
}
 8004f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004f16:	f7ff b84d 	b.w	8003fb4 <debug_flush>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8004f1a:	4806      	ldr	r0, [pc, #24]	; (8004f34 <webusb_setup+0x4c>)
 8004f1c:	f7ff f8da 	bl	80040d4 <debug_println>
 8004f20:	f7ff f848 	bl	8003fb4 <debug_flush>
 8004f24:	e7eb      	b.n	8004efe <webusb_setup+0x16>
 8004f26:	bf00      	nop
 8004f28:	2000098c 	.word	0x2000098c
 8004f2c:	08004e45 	.word	0x08004e45
 8004f30:	08004e1d 	.word	0x08004e1d
 8004f34:	0800671c 	.word	0x0800671c

08004f38 <winusb_control_vendor_request>:
}

static int winusb_control_vendor_request(usbd_device *usbd_dev,
					struct usb_setup_data *req,
					uint8_t **buf, uint16_t *len,
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004f3a:	780d      	ldrb	r5, [r1, #0]
 8004f3c:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8004f40:	b2c0      	uxtb	r0, r0
 8004f42:	2801      	cmp	r0, #1
 8004f44:	d80b      	bhi.n	8004f5e <winusb_control_vendor_request+0x26>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8004f46:	7848      	ldrb	r0, [r1, #1]
 8004f48:	2821      	cmp	r0, #33	; 0x21
 8004f4a:	d108      	bne.n	8004f5e <winusb_control_vendor_request+0x26>

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004f4c:	2dc0      	cmp	r5, #192	; 0xc0
 8004f4e:	461f      	mov	r7, r3
 8004f50:	4616      	mov	r6, r2
 8004f52:	888b      	ldrh	r3, [r1, #4]
 8004f54:	d105      	bne.n	8004f62 <winusb_control_vendor_request+0x2a>
 8004f56:	2b07      	cmp	r3, #7
 8004f58:	d024      	beq.n	8004fa4 <winusb_control_vendor_request+0x6c>
#ifdef NOTUSED
		uint8_t *b = (uint8_t*) &msos20_descriptor_set; int i;
		debug_print_unsigned(MSOS20_DESCRIPTOR_SET_SIZE); debug_print(" / ");
		for (i = 0; i < MSOS20_DESCRIPTOR_SET_SIZE; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d015      	beq.n	8004f8a <winusb_control_vendor_request+0x52>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8004f5e:	2002      	movs	r0, #2

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d1fb      	bne.n	8004f5e <winusb_control_vendor_request+0x26>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <winusb_control_vendor_request+0x84>)
 8004f68:	884b      	ldrh	r3, [r1, #2]
 8004f6a:	7c12      	ldrb	r2, [r2, #16]
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 8004f6c:	b2db      	uxtb	r3, r3
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d1f5      	bne.n	8004f5e <winusb_control_vendor_request+0x26>
		dump_usb_request("winprp", req); // debug_flush(); ////
 8004f72:	4813      	ldr	r0, [pc, #76]	; (8004fc0 <winusb_control_vendor_request+0x88>)
 8004f74:	f7ff fe36 	bl	8004be4 <dump_usb_request>
		*len = MIN(*len, guid.header.dwLength);
 8004f78:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*)(&guid);
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <winusb_control_vendor_request+0x8c>)
		*len = MIN(*len, guid.header.dwLength);
 8004f7c:	2b92      	cmp	r3, #146	; 0x92
 8004f7e:	bf28      	it	cs
 8004f80:	2392      	movcs	r3, #146	; 0x92
		*buf = (uint8_t*)(&guid);
 8004f82:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 8004f84:	2001      	movs	r0, #1
		*len = MIN(*len, guid.header.dwLength);
 8004f86:	803b      	strh	r3, [r7, #0]
}
 8004f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("winid", req); // debug_flush(); ////
 8004f8a:	480f      	ldr	r0, [pc, #60]	; (8004fc8 <winusb_control_vendor_request+0x90>)
 8004f8c:	f7ff fe2a 	bl	8004be4 <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <winusb_control_vendor_request+0x84>)
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	6811      	ldr	r1, [r2, #0]
		status = USBD_REQ_HANDLED;
 8004f96:	2001      	movs	r0, #1
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004f98:	428b      	cmp	r3, r1
 8004f9a:	bf28      	it	cs
 8004f9c:	460b      	movcs	r3, r1
		*buf = (uint8_t*)(&winusb_wcid);
 8004f9e:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8004fa0:	803b      	strh	r3, [r7, #0]
}
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dump_usb_request("windes", req); // debug_flush(); ////
 8004fa4:	4809      	ldr	r0, [pc, #36]	; (8004fcc <winusb_control_vendor_request+0x94>)
 8004fa6:	f7ff fe1d 	bl	8004be4 <dump_usb_request>
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004faa:	883b      	ldrh	r3, [r7, #0]
		*buf = (uint8_t*) &msos20_descriptor_set;
 8004fac:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <winusb_control_vendor_request+0x98>)
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004fae:	2bb2      	cmp	r3, #178	; 0xb2
 8004fb0:	bf28      	it	cs
 8004fb2:	23b2      	movcs	r3, #178	; 0xb2
		*buf = (uint8_t*) &msos20_descriptor_set;
 8004fb4:	6032      	str	r2, [r6, #0]
		status = USBD_REQ_HANDLED;
 8004fb6:	2001      	movs	r0, #1
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8004fb8:	803b      	strh	r3, [r7, #0]
}
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbc:	20000554 	.word	0x20000554
 8004fc0:	080067f4 	.word	0x080067f4
 8004fc4:	08006734 	.word	0x08006734
 8004fc8:	080067ec 	.word	0x080067ec
 8004fcc:	080067e4 	.word	0x080067e4
 8004fd0:	200004a0 	.word	0x200004a0

08004fd4 <winusb_set_config>:

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004fd4:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8004fd6:	2260      	movs	r2, #96	; 0x60
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <winusb_set_config+0x20>)
 8004fda:	2140      	movs	r1, #64	; 0x40
 8004fdc:	f7ff fda4 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	db00      	blt.n	8004fe6 <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 8004fe4:	bd08      	pop	{r3, pc}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8004fe6:	4804      	ldr	r0, [pc, #16]	; (8004ff8 <winusb_set_config+0x24>)
 8004fe8:	f7ff f874 	bl	80040d4 <debug_println>
}
 8004fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8004ff0:	f7fe bfe0 	b.w	8003fb4 <debug_flush>
 8004ff4:	08004f39 	.word	0x08004f39
 8004ff8:	08006804 	.word	0x08006804

08004ffc <winusb_descriptor_request>:
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 8004ffc:	b538      	push	{r3, r4, r5, lr}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8004ffe:	780c      	ldrb	r4, [r1, #0]
 8005000:	f014 0f60 	tst.w	r4, #96	; 0x60
 8005004:	d117      	bne.n	8005036 <winusb_descriptor_request+0x3a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8005006:	784c      	ldrb	r4, [r1, #1]
 8005008:	2c06      	cmp	r4, #6
 800500a:	d114      	bne.n	8005036 <winusb_descriptor_request+0x3a>
 800500c:	8848      	ldrh	r0, [r1, #2]
 800500e:	0a04      	lsrs	r4, r0, #8
 8005010:	2c03      	cmp	r4, #3
 8005012:	d110      	bne.n	8005036 <winusb_descriptor_request+0x3a>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8005014:	b2c0      	uxtb	r0, r0
 8005016:	28ee      	cmp	r0, #238	; 0xee
 8005018:	d10d      	bne.n	8005036 <winusb_descriptor_request+0x3a>
 800501a:	461c      	mov	r4, r3
			dump_usb_request("winee", req); // debug_flush(); ////
 800501c:	4807      	ldr	r0, [pc, #28]	; (800503c <winusb_descriptor_request+0x40>)
 800501e:	4615      	mov	r5, r2
 8005020:	f7ff fde0 	bl	8004be4 <dump_usb_request>
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8005024:	8823      	ldrh	r3, [r4, #0]
			*buf = (uint8_t*) &winusb_string_descriptor;
 8005026:	4a06      	ldr	r2, [pc, #24]	; (8005040 <winusb_descriptor_request+0x44>)
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8005028:	2b12      	cmp	r3, #18
 800502a:	bf28      	it	cs
 800502c:	2312      	movcs	r3, #18
			*buf = (uint8_t*) &winusb_string_descriptor;
 800502e:	602a      	str	r2, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8005030:	2001      	movs	r0, #1
 8005032:	8023      	strh	r3, [r4, #0]
}
 8005034:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8005036:	2002      	movs	r0, #2
}
 8005038:	bd38      	pop	{r3, r4, r5, pc}
 800503a:	bf00      	nop
 800503c:	080067fc 	.word	0x080067fc
 8005040:	0800683c 	.word	0x0800683c

08005044 <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <winusb_setup+0x48>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8005046:	b570      	push	{r4, r5, r6, lr}
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8005048:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 800504a:	4911      	ldr	r1, [pc, #68]	; (8005090 <winusb_setup+0x4c>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 800504c:	4604      	mov	r4, r0
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 800504e:	f7ff fd4d 	bl	8004aec <aggregate_register_config_callback>

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <winusb_setup+0x50>)
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8005054:	4605      	mov	r5, r0
	int status1 = aggregate_register_callback(
 8005056:	2260      	movs	r2, #96	; 0x60
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff fd64 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8005060:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <winusb_setup+0x54>)
	int status1 = aggregate_register_callback(
 8005062:	4606      	mov	r6, r0
	int status2 = aggregate_register_callback(
 8005064:	221f      	movs	r2, #31
 8005066:	4620      	mov	r0, r4
 8005068:	2100      	movs	r1, #0
 800506a:	f7ff fd5d 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 800506e:	2d00      	cmp	r5, #0
 8005070:	db04      	blt.n	800507c <winusb_setup+0x38>
 8005072:	2e00      	cmp	r6, #0
 8005074:	db02      	blt.n	800507c <winusb_setup+0x38>
 8005076:	2800      	cmp	r0, #0
 8005078:	db00      	blt.n	800507c <winusb_setup+0x38>
}
 800507a:	bd70      	pop	{r4, r5, r6, pc}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 800507c:	4807      	ldr	r0, [pc, #28]	; (800509c <winusb_setup+0x58>)
 800507e:	f7ff f829 	bl	80040d4 <debug_println>
}
 8005082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8005086:	f7fe bf95 	b.w	8003fb4 <debug_flush>
 800508a:	bf00      	nop
 800508c:	20000554 	.word	0x20000554
 8005090:	08004fd5 	.word	0x08004fd5
 8005094:	08004f39 	.word	0x08004f39
 8005098:	08004ffd 	.word	0x08004ffd
 800509c:	08006824 	.word	0x08006824

080050a0 <boot_target_get_startup_mode.part.0>:
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
    return false;
}

enum StartupMode boot_target_get_startup_mode(void) {
 80050a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 80050a2:	4d37      	ldr	r5, [pc, #220]	; (8005180 <boot_target_get_startup_mode.part.0+0xe0>)
 80050a4:	682c      	ldr	r4, [r5, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 80050a6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80050aa:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 80050ae:	d015      	beq.n	80050dc <boot_target_get_startup_mode.part.0+0x3c>
 80050b0:	f004 437f 	and.w	r3, r4, #4278190080	; 0xff000000
 80050b4:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 80050b8:	d010      	beq.n	80050dc <boot_target_get_startup_mode.part.0+0x3c>
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
 80050ba:	4832      	ldr	r0, [pc, #200]	; (8005184 <boot_target_get_startup_mode.part.0+0xe4>)
 80050bc:	f7ff f804 	bl	80040c8 <debug_print>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7ff f849 	bl	8004158 <debug_printhex_unsigned>
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
 80050c6:	4830      	ldr	r0, [pc, #192]	; (8005188 <boot_target_get_startup_mode.part.0+0xe8>)
 80050c8:	f7fe fffe 	bl	80040c8 <debug_print>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff f843 	bl	8004158 <debug_printhex_unsigned>
 80050d2:	482e      	ldr	r0, [pc, #184]	; (800518c <boot_target_get_startup_mode.part.0+0xec>)
 80050d4:	f7fe fffe 	bl	80040d4 <debug_println>
    return false;
 80050d8:	2500      	movs	r5, #0
 80050da:	e003      	b.n	80050e4 <boot_target_get_startup_mode.part.0+0x44>
        debug_println("app exists");
 80050dc:	482c      	ldr	r0, [pc, #176]	; (8005190 <boot_target_get_startup_mode.part.0+0xf0>)
 80050de:	f7fe fff9 	bl	80040d4 <debug_println>
        return true;
 80050e2:	2501      	movs	r5, #1
    //  return BOOTLOADER_MODE; ////
    
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
    bool appValid = validate_application();
    //  Check the RTC backup register for any boot request.
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 80050e4:	2000      	movs	r0, #0
 80050e6:	f000 feef 	bl	8005ec8 <backup_read>
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 80050ea:	2100      	movs	r1, #0
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 80050ec:	4604      	mov	r4, r0
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 80050ee:	4608      	mov	r0, r1
 80050f0:	f000 fece 	bl	8005e90 <backup_write>

    //  Remember the forced startup mode if we were forced before restarting.
    switch(cmd) {
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <boot_target_get_startup_mode.part.0+0xf4>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d034      	beq.n	8005164 <boot_target_get_startup_mode.part.0+0xc4>
 80050fa:	f103 230e 	add.w	r3, r3, #234884608	; 0xe000e00
 80050fe:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 8005102:	429c      	cmp	r4, r3
 8005104:	d024      	beq.n	8005150 <boot_target_get_startup_mode.part.0+0xb0>
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <boot_target_get_startup_mode.part.0+0xf8>)
 8005108:	429c      	cmp	r4, r3
 800510a:	d00b      	beq.n	8005124 <boot_target_get_startup_mode.part.0+0x84>
        case (int) CMD_BASE: forced_startup_mode = BASELOADER_MODE; backup_write(BKP0, CMD_BOOT); break;  //  Reboot as bootloader to complete.
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 800510c:	2300      	movs	r3, #0
 800510e:	4c23      	ldr	r4, [pc, #140]	; (800519c <boot_target_get_startup_mode.part.0+0xfc>)
 8005110:	7023      	strb	r3, [r4, #0]
        startup_mode = BASELOADER_MODE;
    } else if (cmd == CMD_BOOT) {
        //  Go to Bootloader Mode if we were requested by MakeCode to run as bootloader.
        debug_println("----bootloader mode (forced)");
        startup_mode = BOOTLOADER_MODE;
    } else if (!appValid) {
 8005112:	b965      	cbnz	r5, 800512e <boot_target_get_startup_mode.part.0+0x8e>
        //  Go to Bootloader Mode if no valid app exists.
        debug_println("----bootloader mode (no app)");
 8005114:	4822      	ldr	r0, [pc, #136]	; (80051a0 <boot_target_get_startup_mode.part.0+0x100>)
 8005116:	f7fe ffdd 	bl	80040d4 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 800511a:	2302      	movs	r3, #2
 800511c:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <boot_target_get_startup_mode.part.0+0x104>)
 800511e:	4618      	mov	r0, r3
 8005120:	7013      	strb	r3, [r2, #0]
        //  Else go to Application Mode.
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
        startup_mode = APPLICATION_MODE;
    }
    return startup_mode;
}
 8005122:	bd38      	pop	{r3, r4, r5, pc}
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
 8005124:	2303      	movs	r3, #3
 8005126:	4c1d      	ldr	r4, [pc, #116]	; (800519c <boot_target_get_startup_mode.part.0+0xfc>)
 8005128:	7023      	strb	r3, [r4, #0]
    } else if (!appValid) {
 800512a:	2d00      	cmp	r5, #0
 800512c:	d0f2      	beq.n	8005114 <boot_target_get_startup_mode.part.0+0x74>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 800512e:	481e      	ldr	r0, [pc, #120]	; (80051a8 <boot_target_get_startup_mode.part.0+0x108>)
 8005130:	f7fe ffca 	bl	80040c8 <debug_print>
 8005134:	7820      	ldrb	r0, [r4, #0]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <boot_target_get_startup_mode.part.0+0xec>)
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <boot_target_get_startup_mode.part.0+0x10c>)
 800513a:	2803      	cmp	r0, #3
 800513c:	bf14      	ite	ne
 800513e:	4610      	movne	r0, r2
 8005140:	4618      	moveq	r0, r3
 8005142:	f7fe ffc7 	bl	80040d4 <debug_println>
        startup_mode = APPLICATION_MODE;
 8005146:	2303      	movs	r3, #3
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <boot_target_get_startup_mode.part.0+0x104>)
 800514a:	4618      	mov	r0, r3
 800514c:	7013      	strb	r3, [r2, #0]
}
 800514e:	bd38      	pop	{r3, r4, r5, pc}
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8005150:	2402      	movs	r4, #2
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <boot_target_get_startup_mode.part.0+0xfc>)
        debug_println("----bootloader mode (forced)");
 8005154:	4816      	ldr	r0, [pc, #88]	; (80051b0 <boot_target_get_startup_mode.part.0+0x110>)
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8005156:	701c      	strb	r4, [r3, #0]
        debug_println("----bootloader mode (forced)");
 8005158:	f7fe ffbc 	bl	80040d4 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <boot_target_get_startup_mode.part.0+0x104>)
 800515e:	4620      	mov	r0, r4
 8005160:	701c      	strb	r4, [r3, #0]
}
 8005162:	bd38      	pop	{r3, r4, r5, pc}
        case (int) CMD_BASE: forced_startup_mode = BASELOADER_MODE; backup_write(BKP0, CMD_BOOT); break;  //  Reboot as bootloader to complete.
 8005164:	2401      	movs	r4, #1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <boot_target_get_startup_mode.part.0+0xfc>)
 8005168:	4912      	ldr	r1, [pc, #72]	; (80051b4 <boot_target_get_startup_mode.part.0+0x114>)
 800516a:	2000      	movs	r0, #0
 800516c:	701c      	strb	r4, [r3, #0]
 800516e:	f000 fe8f 	bl	8005e90 <backup_write>
        debug_println("----baseloader mode (forced)");
 8005172:	4811      	ldr	r0, [pc, #68]	; (80051b8 <boot_target_get_startup_mode.part.0+0x118>)
 8005174:	f7fe ffae 	bl	80040d4 <debug_println>
        startup_mode = BASELOADER_MODE;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <boot_target_get_startup_mode.part.0+0x104>)
 800517a:	4620      	mov	r0, r4
 800517c:	701c      	strb	r4, [r3, #0]
}
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	08007400 	.word	0x08007400
 8005184:	08006868 	.word	0x08006868
 8005188:	08006878 	.word	0x08006878
 800518c:	08005fa8 	.word	0x08005fa8
 8005190:	0800685c 	.word	0x0800685c
 8005194:	45534142 	.word	0x45534142
 8005198:	3f82722a 	.word	0x3f82722a
 800519c:	20000b93 	.word	0x20000b93
 80051a0:	080068bc 	.word	0x080068bc
 80051a4:	20000b94 	.word	0x20000b94
 80051a8:	080068dc 	.word	0x080068dc
 80051ac:	08006850 	.word	0x08006850
 80051b0:	0800689c 	.word	0x0800689c
 80051b4:	544f4f42 	.word	0x544f4f42
 80051b8:	0800687c 	.word	0x0800687c

080051bc <boot_target_get_startup_mode>:
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <boot_target_get_startup_mode+0xc>)
 80051be:	7818      	ldrb	r0, [r3, #0]
 80051c0:	b100      	cbz	r0, 80051c4 <boot_target_get_startup_mode+0x8>
}
 80051c2:	4770      	bx	lr
 80051c4:	f7ff bf6c 	b.w	80050a0 <boot_target_get_startup_mode.part.0>
 80051c8:	20000b94 	.word	0x20000b94

080051cc <boot_target_set_led>:
}

void boot_target_set_led(int on) {
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 80051cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 80051d0:	b910      	cbnz	r0, 80051d8 <boot_target_set_led+0xc>
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 80051d2:	4803      	ldr	r0, [pc, #12]	; (80051e0 <boot_target_set_led+0x14>)
 80051d4:	f7fb bde8 	b.w	8000da8 <gpio_set>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <boot_target_set_led+0x14>)
 80051da:	f7fb bde7 	b.w	8000dac <gpio_clear>
 80051de:	bf00      	nop
 80051e0:	40011000 	.word	0x40011000

080051e4 <boot_target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void boot_target_gpio_setup(void) {
 80051e4:	b508      	push	{r3, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 80051e6:	f240 3002 	movw	r0, #770	; 0x302
 80051ea:	f7fb fdf3 	bl	8000dd4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 80051ee:	f240 3003 	movw	r0, #771	; 0x303
 80051f2:	f7fb fdef 	bl	8000dd4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 80051f6:	f44f 7041 	mov.w	r0, #772	; 0x304
 80051fa:	f7fb fdeb 	bl	8000dd4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 80051fe:	f240 3097 	movw	r0, #919	; 0x397
 8005202:	f7fb fde7 	bl	8000dd4 <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8005206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800520a:	480f      	ldr	r0, [pc, #60]	; (8005248 <boot_target_gpio_setup+0x64>)
 800520c:	f7fb fdcc 	bl	8000da8 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 8005210:	2201      	movs	r2, #1
 8005212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005216:	4611      	mov	r1, r2
 8005218:	480b      	ldr	r0, [pc, #44]	; (8005248 <boot_target_gpio_setup+0x64>)
 800521a:	f7fb fe33 	bl	8000e84 <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 800521e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005222:	2200      	movs	r2, #0
 8005224:	2101      	movs	r1, #1
 8005226:	4809      	ldr	r0, [pc, #36]	; (800524c <boot_target_gpio_setup+0x68>)
 8005228:	f7fb fe2c 	bl	8000e84 <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 800522c:	2110      	movs	r1, #16
 800522e:	4806      	ldr	r0, [pc, #24]	; (8005248 <boot_target_gpio_setup+0x64>)
 8005230:	f7fb fdbc 	bl	8000dac <gpio_clear>
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 8005236:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8005238:	3b01      	subs	r3, #1
 800523a:	d1fc      	bne.n	8005236 <boot_target_gpio_setup+0x52>
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 800523e:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8005240:	3b01      	subs	r3, #1
 8005242:	d1fc      	bne.n	800523e <boot_target_gpio_setup+0x5a>
    sleep_us(20000);
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
}
 8005244:	bd08      	pop	{r3, pc}
 8005246:	bf00      	nop
 8005248:	40011000 	.word	0x40011000
 800524c:	40010800 	.word	0x40010800
 8005250:	00030d40 	.word	0x00030d40

08005254 <boot_target_usb_init>:

const usbd_driver* boot_target_usb_init(void) {
 8005254:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8005256:	f240 2017 	movw	r0, #535	; 0x217
 800525a:	f7fb fdc9 	bl	8000df0 <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 800525e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005262:	4804      	ldr	r0, [pc, #16]	; (8005274 <boot_target_usb_init+0x20>)
 8005264:	f7fb fda2 	bl	8000dac <gpio_clear>
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <boot_target_usb_init+0x24>)
    int i;
    for (i = 0; i < 800000; i++) {
        __asm__("nop");
 800526a:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 800526c:	3b01      	subs	r3, #1
 800526e:	d1fc      	bne.n	800526a <boot_target_usb_init+0x16>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 8005270:	4802      	ldr	r0, [pc, #8]	; (800527c <boot_target_usb_init+0x28>)
 8005272:	bd08      	pop	{r3, pc}
 8005274:	40010800 	.word	0x40010800
 8005278:	000c3500 	.word	0x000c3500
 800527c:	08005fd8 	.word	0x08005fd8

08005280 <boot_target_set_restart_callback>:

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 8005280:	b510      	push	{r4, lr}
 8005282:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <boot_target_set_restart_callback+0x1c>)
 8005286:	f7fe ff1f 	bl	80040c8 <debug_print>
 800528a:	4620      	mov	r0, r4
 800528c:	f7fe ff64 	bl	8004158 <debug_printhex_unsigned>
    restart_callback_func = func;
}
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <boot_target_set_restart_callback+0x20>)
 8005296:	f7fe bf1d 	b.w	80040d4 <debug_println>
 800529a:	bf00      	nop
 800529c:	08006920 	.word	0x08006920
 80052a0:	08005fa8 	.word	0x08005fa8

080052a4 <boot_target_manifest_app>:

void boot_target_manifest_app(void) {
 80052a4:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_println("boot app");
 80052a6:	4805      	ldr	r0, [pc, #20]	; (80052bc <boot_target_manifest_app+0x18>)
 80052a8:	f7fe ff14 	bl	80040d4 <debug_println>
    debug_force_flush(); ////
 80052ac:	f7fe fe94 	bl	8003fd8 <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <boot_target_manifest_app+0x1c>)
 80052b2:	2000      	movs	r0, #0
 80052b4:	f000 fdec 	bl	8005e90 <backup_write>
    scb_reset_system();  //  Restart now.
 80052b8:	f7fb fd6e 	bl	8000d98 <scb_reset_system>
 80052bc:	080068f4 	.word	0x080068f4
 80052c0:	3f82722a 	.word	0x3f82722a

080052c4 <boot_target_manifest_baseloader>:
}

void boot_target_manifest_baseloader(void) {
 80052c4:	b508      	push	{r3, lr}
    //  Restart into Baseloader Mode to update the bootloader ROM.
    debug_println("boot baseloader"); 
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <boot_target_manifest_baseloader+0x18>)
 80052c8:	f7fe ff04 	bl	80040d4 <debug_println>
    debug_force_flush(); ////
 80052cc:	f7fe fe84 	bl	8003fd8 <debug_force_flush>
    backup_write(BKP0, CMD_BASE);
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <boot_target_manifest_baseloader+0x1c>)
 80052d2:	2000      	movs	r0, #0
 80052d4:	f000 fddc 	bl	8005e90 <backup_write>
    scb_reset_system();  //  Restart now.
 80052d8:	f7fb fd5e 	bl	8000d98 <scb_reset_system>
 80052dc:	08006900 	.word	0x08006900
 80052e0:	45534142 	.word	0x45534142

080052e4 <boot_target_manifest_bootloader>:
}

void boot_target_manifest_bootloader(void) {
 80052e4:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_println("boot bootloader"); 
 80052e6:	4805      	ldr	r0, [pc, #20]	; (80052fc <boot_target_manifest_bootloader+0x18>)
 80052e8:	f7fe fef4 	bl	80040d4 <debug_println>
    debug_force_flush(); ////
 80052ec:	f7fe fe74 	bl	8003fd8 <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 80052f0:	4903      	ldr	r1, [pc, #12]	; (8005300 <boot_target_manifest_bootloader+0x1c>)
 80052f2:	2000      	movs	r0, #0
 80052f4:	f000 fdcc 	bl	8005e90 <backup_write>
    scb_reset_system();  //  Restart now.
 80052f8:	f7fb fd4e 	bl	8000d98 <scb_reset_system>
 80052fc:	08006910 	.word	0x08006910
 8005300:	544f4f42 	.word	0x544f4f42

08005304 <boot_target_get_serial_number>:
}

void boot_target_get_serial_number(char* dest, size_t max_chars) {
    desig_get_unique_id_as_string(dest, max_chars+1);
 8005304:	3101      	adds	r1, #1
 8005306:	f7fb bd85 	b.w	8000e14 <desig_get_unique_id_as_string>
 800530a:	bf00      	nop

0800530c <cdcacm_comm_cb>:
static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	//  Callback for the comm channel.
	debug_println("comm");
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <cdcacm_comm_cb+0x8>)
 800530e:	f7fe bee1 	b.w	80040d4 <debug_println>
 8005312:	bf00      	nop
 8005314:	08006950 	.word	0x08006950

08005318 <cdcacm_set_config>:
}

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8005318:	b510      	push	{r4, lr}
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <cdcacm_set_config+0x58>)
) {
 800531c:	b082      	sub	sp, #8
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	9200      	str	r2, [sp, #0]
 8005322:	2103      	movs	r1, #3
 8005324:	2202      	movs	r2, #2
) {
 8005326:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8005328:	f7fb ff44 	bl	80011b4 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 800532c:	2300      	movs	r3, #0
 800532e:	4620      	mov	r0, r4
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2202      	movs	r2, #2
 8005334:	2340      	movs	r3, #64	; 0x40
 8005336:	2183      	movs	r1, #131	; 0x83
 8005338:	f7fb ff3c 	bl	80011b4 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <cdcacm_set_config+0x5c>)
 800533e:	4620      	mov	r0, r4
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2203      	movs	r2, #3
 8005344:	2310      	movs	r3, #16
 8005346:	2184      	movs	r1, #132	; 0x84
 8005348:	f7fb ff34 	bl	80011b4 <usbd_ep_setup>
	int status = aggregate_register_callback(
 800534c:	4620      	mov	r0, r4
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <cdcacm_set_config+0x60>)
 8005350:	227f      	movs	r2, #127	; 0x7f
 8005352:	2121      	movs	r1, #33	; 0x21
 8005354:	f7ff fbe8 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8005358:	2800      	cmp	r0, #0
 800535a:	db01      	blt.n	8005360 <cdcacm_set_config+0x48>
}
 800535c:	b002      	add	sp, #8
 800535e:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8005360:	4806      	ldr	r0, [pc, #24]	; (800537c <cdcacm_set_config+0x64>)
 8005362:	f7fe feb7 	bl	80040d4 <debug_println>
}
 8005366:	b002      	add	sp, #8
 8005368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 800536c:	f7fe be22 	b.w	8003fb4 <debug_flush>
 8005370:	08005439 	.word	0x08005439
 8005374:	0800530d 	.word	0x0800530d
 8005378:	08005381 	.word	0x08005381
 800537c:	08006980 	.word	0x08006980

08005380 <cdcacm_control_request>:
) {
 8005380:	b510      	push	{r4, lr}
	switch (req->bRequest) {
 8005382:	7849      	ldrb	r1, [r1, #1]
 8005384:	2921      	cmp	r1, #33	; 0x21
 8005386:	d00a      	beq.n	800539e <cdcacm_control_request+0x1e>
 8005388:	2922      	cmp	r1, #34	; 0x22
 800538a:	d006      	beq.n	800539a <cdcacm_control_request+0x1a>
 800538c:	2920      	cmp	r1, #32
 800538e:	d001      	beq.n	8005394 <cdcacm_control_request+0x14>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 8005390:	2002      	movs	r0, #2
}
 8005392:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	2a06      	cmp	r2, #6
 8005398:	d90a      	bls.n	80053b0 <cdcacm_control_request+0x30>
			return USBD_REQ_HANDLED;
 800539a:	2001      	movs	r0, #1
}
 800539c:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 800539e:	8819      	ldrh	r1, [r3, #0]
 80053a0:	2906      	cmp	r1, #6
 80053a2:	d905      	bls.n	80053b0 <cdcacm_control_request+0x30>
			*len = sizeof(struct usb_cdc_line_coding);
 80053a4:	2107      	movs	r1, #7
			*buf = (uint8_t *) &line_coding;
 80053a6:	4c0b      	ldr	r4, [pc, #44]	; (80053d4 <cdcacm_control_request+0x54>)
			return USBD_REQ_HANDLED;
 80053a8:	2001      	movs	r0, #1
			*buf = (uint8_t *) &line_coding;
 80053aa:	6014      	str	r4, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 80053ac:	8019      	strh	r1, [r3, #0]
}
 80053ae:	bd10      	pop	{r4, pc}
 80053b0:	461c      	mov	r4, r3
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 80053b2:	4809      	ldr	r0, [pc, #36]	; (80053d8 <cdcacm_control_request+0x58>)
 80053b4:	f7fe fe88 	bl	80040c8 <debug_print>
 80053b8:	2007      	movs	r0, #7
 80053ba:	f7fe fea7 	bl	800410c <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 80053be:	4807      	ldr	r0, [pc, #28]	; (80053dc <cdcacm_control_request+0x5c>)
 80053c0:	f7fe fe82 	bl	80040c8 <debug_print>
 80053c4:	8820      	ldrh	r0, [r4, #0]
 80053c6:	f7fe fea1 	bl	800410c <debug_print_unsigned>
				debug_println("");
 80053ca:	4805      	ldr	r0, [pc, #20]	; (80053e0 <cdcacm_control_request+0x60>)
 80053cc:	f7fe fe82 	bl	80040d4 <debug_println>
				return USBD_REQ_NOTSUPP;
 80053d0:	2000      	movs	r0, #0
}
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	080069a0 	.word	0x080069a0
 80053d8:	08006958 	.word	0x08006958
 80053dc:	08006260 	.word	0x08006260
 80053e0:	08005fa8 	.word	0x08005fa8

080053e4 <cdcadm_transmit>:
) {
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <cdcadm_transmit+0x50>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	b303      	cbz	r3, 800542e <cdcadm_transmit+0x4a>
 80053ec:	4607      	mov	r7, r0
 80053ee:	b1f0      	cbz	r0, 800542e <cdcadm_transmit+0x4a>
 80053f0:	460e      	mov	r6, r1
 80053f2:	b1e1      	cbz	r1, 800542e <cdcadm_transmit+0x4a>
 80053f4:	4614      	mov	r4, r2
	if (len == 0) { return 0; }
 80053f6:	b192      	cbz	r2, 800541e <cdcadm_transmit+0x3a>
	if (len <= MAX_USB_PACKET_SIZE) {
 80053f8:	2a40      	cmp	r2, #64	; 0x40
 80053fa:	d912      	bls.n	8005422 <cdcadm_transmit+0x3e>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 80053fc:	2c40      	cmp	r4, #64	; 0x40
 80053fe:	4625      	mov	r5, r4
 8005400:	bf28      	it	cs
 8005402:	2540      	movcs	r5, #64	; 0x40
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8005404:	4632      	mov	r2, r6
 8005406:	462b      	mov	r3, r5
 8005408:	2183      	movs	r1, #131	; 0x83
 800540a:	4638      	mov	r0, r7
 800540c:	f7fb feda 	bl	80011c4 <usbd_ep_write_packet>
		len = len - tx_len;
 8005410:	1b64      	subs	r4, r4, r5
		if (status != tx_len) { return 0; }  //  Stop if error.
 8005412:	4285      	cmp	r5, r0
		len = len - tx_len;
 8005414:	b2a4      	uxth	r4, r4
		if (status != tx_len) { return 0; }  //  Stop if error.
 8005416:	d102      	bne.n	800541e <cdcadm_transmit+0x3a>
		buf = &buf[tx_len];
 8005418:	442e      	add	r6, r5
	while (len > 0) {
 800541a:	2c00      	cmp	r4, #0
 800541c:	d1ee      	bne.n	80053fc <cdcadm_transmit+0x18>
	if (len == 0) { return 0; }
 800541e:	2000      	movs	r0, #0
}
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8005422:	4613      	mov	r3, r2
 8005424:	460a      	mov	r2, r1
 8005426:	2183      	movs	r1, #131	; 0x83
 8005428:	f7fb fecc 	bl	80011c4 <usbd_ep_write_packet>
}
 800542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!connected || !usbd_dev || !buf) { return -1; }
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005434:	20000b95 	.word	0x20000b95

08005438 <cdcacm_data_rx_cb>:
) {
 8005438:	b570      	push	{r4, r5, r6, lr}
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 800543a:	4d0f      	ldr	r5, [pc, #60]	; (8005478 <cdcacm_data_rx_cb+0x40>)
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	462a      	mov	r2, r5
 8005440:	2103      	movs	r1, #3
) {
 8005442:	4606      	mov	r6, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8005444:	f7fb fec6 	bl	80011d4 <usbd_ep_read_packet>
    if (len == 0) { return; }
 8005448:	b1a8      	cbz	r0, 8005476 <cdcacm_data_rx_cb+0x3e>
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 800544a:	2840      	cmp	r0, #64	; 0x40
 800544c:	bf28      	it	cs
 800544e:	2040      	movcs	r0, #64	; 0x40
    rx_buf[pos] = 0;
 8005450:	2100      	movs	r1, #0
	if (!connected) {
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <cdcacm_data_rx_cb+0x44>)
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8005454:	b284      	uxth	r4, r0
	if (!connected) {
 8005456:	781a      	ldrb	r2, [r3, #0]
    rx_buf[pos] = 0;
 8005458:	5529      	strb	r1, [r5, r4]
	if (!connected) {
 800545a:	b92a      	cbnz	r2, 8005468 <cdcacm_data_rx_cb+0x30>
		connected = 1;
 800545c:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 800545e:	4a08      	ldr	r2, [pc, #32]	; (8005480 <cdcacm_data_rx_cb+0x48>)
		connected = 1;
 8005460:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	b103      	cbz	r3, 8005468 <cdcacm_data_rx_cb+0x30>
 8005466:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8005468:	4622      	mov	r2, r4
 800546a:	4630      	mov	r0, r6
}
 800546c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8005470:	4901      	ldr	r1, [pc, #4]	; (8005478 <cdcacm_data_rx_cb+0x40>)
 8005472:	f7ff bfb7 	b.w	80053e4 <cdcadm_transmit>
}
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	20000994 	.word	0x20000994
 800547c:	20000b95 	.word	0x20000b95
 8005480:	20000990 	.word	0x20000990

08005484 <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8005484:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <cdc_setup+0x20>)
 8005488:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 800548a:	4907      	ldr	r1, [pc, #28]	; (80054a8 <cdc_setup+0x24>)
 800548c:	f7ff fb2e 	bl	8004aec <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8005490:	2800      	cmp	r0, #0
 8005492:	db00      	blt.n	8005496 <cdc_setup+0x12>
}
 8005494:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8005496:	4805      	ldr	r0, [pc, #20]	; (80054ac <cdc_setup+0x28>)
 8005498:	f7fe fe1c 	bl	80040d4 <debug_println>
}
 800549c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 80054a0:	f7fe bd88 	b.w	8003fb4 <debug_flush>
 80054a4:	20000990 	.word	0x20000990
 80054a8:	08005319 	.word	0x08005319
 80054ac:	08006938 	.word	0x08006938

080054b0 <hf2_set_config>:
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
    }
}

static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	b082      	sub	sp, #8
    //  Setup the endpoints to be bulk & register the callbacks.
    LOG("hf2 set config");
 80054b6:	480a      	ldr	r0, [pc, #40]	; (80054e0 <hf2_set_config+0x30>)
 80054b8:	f7fe fe0c 	bl	80040d4 <debug_println>
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <hf2_set_config+0x34>)
 80054be:	4620      	mov	r0, r4
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2202      	movs	r2, #2
 80054c4:	2340      	movs	r3, #64	; 0x40
 80054c6:	2182      	movs	r1, #130	; 0x82
 80054c8:	f7fb fe74 	bl	80011b4 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 80054cc:	2202      	movs	r2, #2
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <hf2_set_config+0x38>)
 80054d0:	4620      	mov	r0, r4
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4611      	mov	r1, r2
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	f7fb fe6c 	bl	80011b4 <usbd_ep_setup>
}
 80054dc:	b002      	add	sp, #8
 80054de:	bd10      	pop	{r4, pc}
 80054e0:	08006b84 	.word	0x08006b84
 80054e4:	08005c71 	.word	0x08005c71
 80054e8:	080055e5 	.word	0x080055e5

080054ec <pokeSend>:
    uint8_t dataToSendFlag) {
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	9101      	str	r1, [sp, #4]
 80054f4:	4605      	mov	r5, r0
 80054f6:	4616      	mov	r6, r2
    memset(tx_buf, 0, sizeof(tx_buf));
 80054f8:	2100      	movs	r1, #0
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	482a      	ldr	r0, [pc, #168]	; (80055a8 <pokeSend+0xbc>)
 80054fe:	f7fe fc73 	bl	8003de8 <memset>
	__asm__ volatile ("CPSID I\n");
 8005502:	b672      	cpsid	i
    if (dataToSendLength) {
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	b91b      	cbnz	r3, 8005510 <pokeSend+0x24>
	__asm__ volatile ("CPSIE I\n");
 8005508:	b662      	cpsie	i
}
 800550a:	b002      	add	sp, #8
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((int) dataToSendLength < s) {
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	2b3e      	cmp	r3, #62	; 0x3e
 8005514:	dd34      	ble.n	8005580 <pokeSend+0x94>
 8005516:	243f      	movs	r4, #63	; 0x3f
            if (flag == HF2_FLAG_CMDPKT_LAST)
 8005518:	2e40      	cmp	r6, #64	; 0x40
 800551a:	bf08      	it	eq
 800551c:	4623      	moveq	r3, r4
    int s = sizeof(tx_buf) - 1;  //  63
 800551e:	4627      	mov	r7, r4
 8005520:	bf18      	it	ne
 8005522:	ea46 0304 	orrne.w	r3, r6, r4
        tx_buf[0] = flag | s;
 8005526:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80055a8 <pokeSend+0xbc>
        memcpy(tx_buf + 1, dataToSend, s);
 800552a:	4622      	mov	r2, r4
        tx_buf[0] = flag | s;
 800552c:	4640      	mov	r0, r8
        memcpy(tx_buf + 1, dataToSend, s);
 800552e:	4629      	mov	r1, r5
        tx_buf[0] = flag | s;
 8005530:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8005534:	f7fe fc10 	bl	8003d58 <memcpy>
        dataToSendLength -= s;
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	1b1b      	subs	r3, r3, r4
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	b662      	cpsie	i
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <pokeSend+0xc0>)
 8005542:	4642      	mov	r2, r8
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	2182      	movs	r1, #130	; 0x82
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	f7fb fe3b 	bl	80011c4 <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	b323      	cbz	r3, 800559c <pokeSend+0xb0>
            remDataToSend = dataToSend;
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <pokeSend+0xc4>)
        dataToSend += s;
 8005554:	442c      	add	r4, r5
            remDataToSend = dataToSend;
 8005556:	601c      	str	r4, [r3, #0]
            remDataToSendLength = dataToSendLength;
 8005558:	9901      	ldr	r1, [sp, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <pokeSend+0xc8>)
            remDataToSendFlag = dataToSendFlag;
 800555c:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <pokeSend+0xcc>)
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 800555e:	2f02      	cmp	r7, #2
            remDataToSendLength = dataToSendLength;
 8005560:	6011      	str	r1, [r2, #0]
            remDataToSendFlag = dataToSendFlag;
 8005562:	701e      	strb	r6, [r3, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8005564:	dd12      	ble.n	800558c <pokeSend+0xa0>
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8005566:	4815      	ldr	r0, [pc, #84]	; (80055bc <pokeSend+0xd0>)
 8005568:	f7fe fdae 	bl	80040c8 <debug_print>
 800556c:	1c78      	adds	r0, r7, #1
 800556e:	b2c0      	uxtb	r0, r0
 8005570:	f7fe fdce 	bl	8004110 <debug_printhex>
 8005574:	4812      	ldr	r0, [pc, #72]	; (80055c0 <pokeSend+0xd4>)
}
 8005576:	b002      	add	sp, #8
 8005578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 800557c:	f7fe bdaa 	b.w	80040d4 <debug_println>
            s = dataToSendLength;
 8005580:	9c01      	ldr	r4, [sp, #4]
 8005582:	ea46 0304 	orr.w	r3, r6, r4
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4627      	mov	r7, r4
 800558a:	e7cc      	b.n	8005526 <pokeSend+0x3a>
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 800558c:	4906      	ldr	r1, [pc, #24]	; (80055a8 <pokeSend+0xbc>)
 800558e:	480d      	ldr	r0, [pc, #52]	; (80055c4 <pokeSend+0xd8>)
 8005590:	1c7a      	adds	r2, r7, #1
}
 8005592:	b002      	add	sp, #8
 8005594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8005598:	f7ff bafc 	b.w	8004b94 <dump_buffer>
            remDataToSendLength = 0;  //  No more data to send.
 800559c:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <pokeSend+0xc8>)
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 800559e:	2f02      	cmp	r7, #2
            remDataToSendLength = 0;  //  No more data to send.
 80055a0:	6013      	str	r3, [r2, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 80055a2:	dce0      	bgt.n	8005566 <pokeSend+0x7a>
 80055a4:	e7f2      	b.n	800558c <pokeSend+0xa0>
 80055a6:	bf00      	nop
 80055a8:	20000a4c 	.word	0x20000a4c
 80055ac:	200009d8 	.word	0x200009d8
 80055b0:	20000a00 	.word	0x20000a00
 80055b4:	20000a04 	.word	0x20000a04
 80055b8:	20000b98 	.word	0x20000b98
 80055bc:	08006bcc 	.word	0x08006bcc
 80055c0:	08005fa8 	.word	0x08005fa8
 80055c4:	08006bc4 	.word	0x08006bc4

080055c8 <assert.part.0>:
    }
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); }
}

static void assert(bool assertion, const char *msg) {
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4604      	mov	r4, r0
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 80055cc:	4804      	ldr	r0, [pc, #16]	; (80055e0 <assert.part.0+0x18>)
 80055ce:	f7fe fd7b 	bl	80040c8 <debug_print>
 80055d2:	4620      	mov	r0, r4
 80055d4:	f7fe fd7e 	bl	80040d4 <debug_println>
}
 80055d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 80055dc:	f7fe bcfc 	b.w	8003fd8 <debug_force_flush>
 80055e0:	080069a8 	.word	0x080069a8

080055e4 <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 80055e8:	4cac      	ldr	r4, [pc, #688]	; (800589c <hf2_data_rx_cb+0x2b8>)
 80055ea:	2340      	movs	r3, #64	; 0x40
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 80055ec:	b08d      	sub	sp, #52	; 0x34
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 80055ee:	4622      	mov	r2, r4
 80055f0:	f7fb fdf0 	bl	80011d4 <usbd_ep_read_packet>
 80055f4:	4605      	mov	r5, r0
    rx_time = millis();
 80055f6:	f7fe fec7 	bl	8004388 <millis>
 80055fa:	4ba9      	ldr	r3, [pc, #676]	; (80058a0 <hf2_data_rx_cb+0x2bc>)
 80055fc:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 80055fe:	b1dd      	cbz	r5, 8005638 <hf2_data_rx_cb+0x54>
    if (!pkt) {
 8005600:	4da8      	ldr	r5, [pc, #672]	; (80058a4 <hf2_data_rx_cb+0x2c0>)
    uint8_t tag = rx_buf[0];
 8005602:	f894 8000 	ldrb.w	r8, [r4]
    if (!pkt) {
 8005606:	682c      	ldr	r4, [r5, #0]
 8005608:	b3b4      	cbz	r4, 8005678 <hf2_data_rx_cb+0x94>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800560a:	8820      	ldrh	r0, [r4, #0]
 800560c:	b9b8      	cbnz	r0, 800563e <hf2_data_rx_cb+0x5a>
 800560e:	f008 093f 	and.w	r9, r8, #63	; 0x3f
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 8005612:	1ca7      	adds	r7, r4, #2
 8005614:	4438      	add	r0, r7
 8005616:	464a      	mov	r2, r9
 8005618:	49a3      	ldr	r1, [pc, #652]	; (80058a8 <hf2_data_rx_cb+0x2c4>)
 800561a:	f7fe fb9d 	bl	8003d58 <memcpy>
    pkt->size += size;
 800561e:	8826      	ldrh	r6, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8005620:	f018 08c0 	ands.w	r8, r8, #192	; 0xc0
    pkt->size += size;
 8005624:	444e      	add	r6, r9
 8005626:	b2b6      	uxth	r6, r6
 8005628:	8026      	strh	r6, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 800562a:	d005      	beq.n	8005638 <hf2_data_rx_cb+0x54>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 800562c:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8005630:	d02b      	beq.n	800568a <hf2_data_rx_cb+0xa6>
        pkt->size = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	7023      	strb	r3, [r4, #0]
 8005636:	7063      	strb	r3, [r4, #1]
}
 8005638:	b00d      	add	sp, #52	; 0x34
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800563e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005642:	d10c      	bne.n	800565e <hf2_data_rx_cb+0x7a>
 8005644:	f008 093f 	and.w	r9, r8, #63	; 0x3f
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 8005648:	eb09 0300 	add.w	r3, r9, r0
    if (assertion) { return; }
 800564c:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8005650:	dddf      	ble.n	8005612 <hf2_data_rx_cb+0x2e>
 8005652:	4896      	ldr	r0, [pc, #600]	; (80058ac <hf2_data_rx_cb+0x2c8>)
 8005654:	f7ff ffb8 	bl	80055c8 <assert.part.0>
 8005658:	682c      	ldr	r4, [r5, #0]
 800565a:	8820      	ldrh	r0, [r4, #0]
 800565c:	e7d9      	b.n	8005612 <hf2_data_rx_cb+0x2e>
 800565e:	4893      	ldr	r0, [pc, #588]	; (80058ac <hf2_data_rx_cb+0x2c8>)
 8005660:	f7ff ffb2 	bl	80055c8 <assert.part.0>
 8005664:	682c      	ldr	r4, [r5, #0]
 8005666:	f008 093f 	and.w	r9, r8, #63	; 0x3f
 800566a:	8820      	ldrh	r0, [r4, #0]
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 800566c:	eb09 0300 	add.w	r3, r9, r0
    if (assertion) { return; }
 8005670:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8005674:	dced      	bgt.n	8005652 <hf2_data_rx_cb+0x6e>
 8005676:	e7cc      	b.n	8005612 <hf2_data_rx_cb+0x2e>
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8005678:	f7ff fda0 	bl	80051bc <boot_target_get_startup_mode>
            &hf2_buffer :
 800567c:	4c8c      	ldr	r4, [pc, #560]	; (80058b0 <hf2_data_rx_cb+0x2cc>)
 800567e:	4b8d      	ldr	r3, [pc, #564]	; (80058b4 <hf2_data_rx_cb+0x2d0>)
 8005680:	2802      	cmp	r0, #2
 8005682:	bf08      	it	eq
 8005684:	461c      	moveq	r4, r3
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8005686:	602c      	str	r4, [r5, #0]
 8005688:	e7bf      	b.n	800560a <hf2_data_rx_cb+0x26>
	if (!connected) {
 800568a:	4b8b      	ldr	r3, [pc, #556]	; (80058b8 <hf2_data_rx_cb+0x2d4>)
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	b932      	cbnz	r2, 800569e <hf2_data_rx_cb+0xba>
		connected = 1;
 8005690:	2101      	movs	r1, #1
		if (connected_func) { connected_func(); }
 8005692:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <hf2_data_rx_cb+0x2d8>)
		connected = 1;
 8005694:	7019      	strb	r1, [r3, #0]
		if (connected_func) { connected_func(); }
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	b10b      	cbz	r3, 800569e <hf2_data_rx_cb+0xba>
 800569a:	4798      	blx	r3
 800569c:	8826      	ldrh	r6, [r4, #0]
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 800569e:	2200      	movs	r2, #0
    uint32_t cmdId = cmd->command_id;
 80056a0:	f8d4 8002 	ldr.w	r8, [r4, #2]
    resp->tag = cmd->tag;
 80056a4:	88e1      	ldrh	r1, [r4, #6]
    switch (cmdId) {
 80056a6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 80056aa:	7122      	strb	r2, [r4, #4]
 80056ac:	7162      	strb	r2, [r4, #5]
    resp->tag = cmd->tag;
 80056ae:	8061      	strh	r1, [r4, #2]
    switch (cmdId) {
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	f200 8168 	bhi.w	8005986 <hf2_data_rx_cb+0x3a2>
 80056b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056ba:	012d      	.short	0x012d
 80056bc:	00c200d1 	.word	0x00c200d1
 80056c0:	009800ac 	.word	0x009800ac
 80056c4:	01660029 	.word	0x01660029
 80056c8:	0008      	.short	0x0008
        case HF2_CMD_READ_WORDS: { debug_println("hf2 >> read"); debug_force_flush(); ////
 80056ca:	487d      	ldr	r0, [pc, #500]	; (80058c0 <hf2_data_rx_cb+0x2dc>)
 80056cc:	f7fe fd02 	bl	80040d4 <debug_println>
 80056d0:	f7fe fc82 	bl	8003fd8 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 80056d4:	f7ff fd72 	bl	80051bc <boot_target_get_startup_mode>
 80056d8:	2803      	cmp	r0, #3
 80056da:	f000 81d6 	beq.w	8005a8a <hf2_data_rx_cb+0x4a6>
    if (assertion) { return; }
 80056de:	2e10      	cmp	r6, #16
 80056e0:	d002      	beq.n	80056e8 <hf2_data_rx_cb+0x104>
 80056e2:	4878      	ldr	r0, [pc, #480]	; (80058c4 <hf2_data_rx_cb+0x2e0>)
 80056e4:	f7ff ff70 	bl	80055c8 <assert.part.0>
            int num_words = cmd->read_words.num_words;
 80056e8:	f8d4 600e 	ldr.w	r6, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 80056ec:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80056f0:	00b6      	lsls	r6, r6, #2
 80056f2:	4632      	mov	r2, r6
 80056f4:	1da0      	adds	r0, r4, #6
    volatile uint32_t dataToSendLength = 4 + size;
 80056f6:	3604      	adds	r6, #4
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 80056f8:	f7fe fb2e 	bl	8003d58 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 80056fc:	9609      	str	r6, [sp, #36]	; 0x24
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80056fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005700:	4638      	mov	r0, r7
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	f7ff fef2 	bl	80054ec <pokeSend>
 8005708:	682c      	ldr	r4, [r5, #0]
 800570a:	e792      	b.n	8005632 <hf2_data_rx_cb+0x4e>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 800570c:	f7ff fd56 	bl	80051bc <boot_target_get_startup_mode>
 8005710:	2803      	cmp	r0, #3
 8005712:	f000 8196 	beq.w	8005a42 <hf2_data_rx_cb+0x45e>
    uint32_t target_addr = cmd->write_flash_page.target_addr;
 8005716:	f8d4 600a 	ldr.w	r6, [r4, #10]
    int sz = pkt->size;
 800571a:	f8b4 9000 	ldrh.w	r9, [r4]
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 800571e:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 8005722:	f0c0 818b 	bcc.w	8005a3c <hf2_data_rx_cb+0x458>
 8005726:	4968      	ldr	r1, [pc, #416]	; (80058c8 <hf2_data_rx_cb+0x2e4>)
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <hf2_data_rx_cb+0x2e8>)
 800572a:	4a69      	ldr	r2, [pc, #420]	; (80058d0 <hf2_data_rx_cb+0x2ec>)
 800572c:	f506 7b80 	add.w	fp, r6, #256	; 0x100
 8005730:	458b      	cmp	fp, r1
 8005732:	bf94      	ite	ls
 8005734:	469b      	movls	fp, r3
 8005736:	4693      	movhi	fp, r2
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8005738:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005904 <hf2_data_rx_cb+0x320>
    cmdId = cmd->command_id;
 800573c:	f8d4 2002 	ldr.w	r2, [r4, #2]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8005740:	f8d8 3000 	ldr.w	r3, [r8]
    cmdId = cmd->command_id;
 8005744:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8005908 <hf2_data_rx_cb+0x324>
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8005748:	429a      	cmp	r2, r3
 800574a:	bf14      	ite	ne
 800574c:	4861      	ldrne	r0, [pc, #388]	; (80058d4 <hf2_data_rx_cb+0x2f0>)
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 800574e:	4862      	ldreq	r0, [pc, #392]	; (80058d8 <hf2_data_rx_cb+0x2f4>)
    cmdId = cmd->command_id;
 8005750:	f8ca 2000 	str.w	r2, [sl]
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 8005754:	f7fe fcb8 	bl	80040c8 <debug_print>
 8005758:	4630      	mov	r0, r6
 800575a:	f7fe fcfd 	bl	8004158 <debug_printhex_unsigned>
 800575e:	4658      	mov	r0, fp
 8005760:	f7fe fcb2 	bl	80040c8 <debug_print>
    if (flush_count++ % 4 == 0) { debug_flush(); }
 8005764:	4a5d      	ldr	r2, [pc, #372]	; (80058dc <hf2_data_rx_cb+0x2f8>)
 8005766:	7813      	ldrb	r3, [r2, #0]
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	079b      	lsls	r3, r3, #30
 800576c:	7011      	strb	r1, [r2, #0]
 800576e:	f000 8189 	beq.w	8005a84 <hf2_data_rx_cb+0x4a0>
    volatile uint32_t dataToSendLength = 4 + size;
 8005772:	2304      	movs	r3, #4
 8005774:	930b      	str	r3, [sp, #44]	; 0x2c
    prevCmdId = cmdId; 
 8005776:	f8da 3000 	ldr.w	r3, [sl]
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 800577a:	f8df a190 	ldr.w	sl, [pc, #400]	; 800590c <hf2_data_rx_cb+0x328>
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800577e:	4638      	mov	r0, r7
 8005780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005782:	2240      	movs	r2, #64	; 0x40
    prevCmdId = cmdId; 
 8005784:	f8c8 3000 	str.w	r3, [r8]
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8005788:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005910 <hf2_data_rx_cb+0x32c>
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800578c:	f7ff feae 	bl	80054ec <pokeSend>
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 8005790:	f8da 7010 	ldr.w	r7, [sl, #16]
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8005794:	f8db 3000 	ldr.w	r3, [fp]
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 8005798:	f427 777f 	bic.w	r7, r7, #1020	; 0x3fc
 800579c:	f027 0703 	bic.w	r7, r7, #3
    const uint32_t old_app_start_offset = old_app_start - FLASH_BASE;  //  When writing Bootloader, shift by this offset so we don't overwrite the existing Bootloader.
 80057a0:	f107 4878 	add.w	r8, r7, #4160749568	; 0xf8000000
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8105 	beq.w	80059b4 <hf2_data_rx_cb+0x3d0>
 80057aa:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 80057ae:	f000 8101 	beq.w	80059b4 <hf2_data_rx_cb+0x3d0>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 80057b2:	4a4b      	ldr	r2, [pc, #300]	; (80058e0 <hf2_data_rx_cb+0x2fc>)
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	2900      	cmp	r1, #0
 80057b8:	f000 8118 	beq.w	80059ec <hf2_data_rx_cb+0x408>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 80057bc:	429e      	cmp	r6, r3
 80057be:	f0c0 8122 	bcc.w	8005a06 <hf2_data_rx_cb+0x422>
    } else if (new_base_vector && (target_addr == new_app_start) && !bootloader_changed) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 80057c2:	42b3      	cmp	r3, r6
 80057c4:	f000 8166 	beq.w	8005a94 <hf2_data_rx_cb+0x4b0>
    if (assertion) { return; }
 80057c8:	f5b9 7f86 	cmp.w	r9, #268	; 0x10c
 80057cc:	d002      	beq.n	80057d4 <hf2_data_rx_cb+0x1f0>
 80057ce:	483d      	ldr	r0, [pc, #244]	; (80058c4 <hf2_data_rx_cb+0x2e0>)
 80057d0:	f7ff fefa 	bl	80055c8 <assert.part.0>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) && !bootloader_changed) {
 80057d4:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 80057d8:	d305      	bcc.n	80057e6 <hf2_data_rx_cb+0x202>
 80057da:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <hf2_data_rx_cb+0x2e4>)
 80057dc:	f506 7280 	add.w	r2, r6, #256	; 0x100
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f240 811d 	bls.w	8005a20 <hf2_data_rx_cb+0x43c>
 80057e6:	682c      	ldr	r4, [r5, #0]
 80057e8:	e723      	b.n	8005632 <hf2_data_rx_cb+0x4e>
        case HF2_CMD_START_FLASH: { debug_println("hf2 >> start");
 80057ea:	483e      	ldr	r0, [pc, #248]	; (80058e4 <hf2_data_rx_cb+0x300>)
 80057ec:	f7fe fc72 	bl	80040d4 <debug_println>
    volatile uint32_t dataToSendLength = 4 + size;
 80057f0:	2304      	movs	r3, #4
 80057f2:	9306      	str	r3, [sp, #24]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80057f4:	9906      	ldr	r1, [sp, #24]
 80057f6:	4638      	mov	r0, r7
 80057f8:	2240      	movs	r2, #64	; 0x40
 80057fa:	f7ff fe77 	bl	80054ec <pokeSend>
            send_hf2_response(pkt, 0); debug_force_flush(); ////            
 80057fe:	f7fe fbeb 	bl	8003fd8 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8005802:	f7ff fcdb 	bl	80051bc <boot_target_get_startup_mode>
 8005806:	2803      	cmp	r0, #3
 8005808:	d1ed      	bne.n	80057e6 <hf2_data_rx_cb+0x202>
                boot_target_manifest_bootloader();  //  Never returns.
 800580a:	f7ff fd6b 	bl	80052e4 <boot_target_manifest_bootloader>
 800580e:	682c      	ldr	r4, [r5, #0]
 8005810:	e70f      	b.n	8005632 <hf2_data_rx_cb+0x4e>
            debug_println("hf2 >> boot");
 8005812:	4835      	ldr	r0, [pc, #212]	; (80058e8 <hf2_data_rx_cb+0x304>)
 8005814:	f7fe fc5e 	bl	80040d4 <debug_println>
            restart_request = bootloader_changed ? BASELOADER_MODE : BOOTLOADER_MODE;
 8005818:	4b34      	ldr	r3, [pc, #208]	; (80058ec <hf2_data_rx_cb+0x308>)
    volatile uint32_t dataToSendLength = 4 + size;
 800581a:	2204      	movs	r2, #4
            restart_request = bootloader_changed ? BASELOADER_MODE : BOOTLOADER_MODE;
 800581c:	681b      	ldr	r3, [r3, #0]
    volatile uint32_t dataToSendLength = 4 + size;
 800581e:	9203      	str	r2, [sp, #12]
            restart_request = bootloader_changed ? BASELOADER_MODE : BOOTLOADER_MODE;
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2402      	moveq	r4, #2
 8005826:	2401      	movne	r4, #1
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005828:	9903      	ldr	r1, [sp, #12]
            restart_request = bootloader_changed ? BASELOADER_MODE : BOOTLOADER_MODE;
 800582a:	4b31      	ldr	r3, [pc, #196]	; (80058f0 <hf2_data_rx_cb+0x30c>)
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800582c:	4638      	mov	r0, r7
 800582e:	2240      	movs	r2, #64	; 0x40
            restart_request = bootloader_changed ? BASELOADER_MODE : BOOTLOADER_MODE;
 8005830:	701c      	strb	r4, [r3, #0]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005832:	f7ff fe5b 	bl	80054ec <pokeSend>
            debug_force_flush(); ////
 8005836:	f7fe fbcf 	bl	8003fd8 <debug_force_flush>
 800583a:	682c      	ldr	r4, [r5, #0]
 800583c:	e6f9      	b.n	8005632 <hf2_data_rx_cb+0x4e>
        case HF2_CMD_RESET_INTO_APP: { debug_println("hf2 >> app");
 800583e:	482d      	ldr	r0, [pc, #180]	; (80058f4 <hf2_data_rx_cb+0x310>)
 8005840:	f7fe fc48 	bl	80040d4 <debug_println>
            flash_flush();  //  Flush any pending flash writes.
 8005844:	f7fe ffb6 	bl	80047b4 <flash_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 8005848:	2204      	movs	r2, #4
            restart_request = bootloader_changed ? BASELOADER_MODE : APPLICATION_MODE;
 800584a:	4b28      	ldr	r3, [pc, #160]	; (80058ec <hf2_data_rx_cb+0x308>)
    volatile uint32_t dataToSendLength = 4 + size;
 800584c:	9204      	str	r2, [sp, #16]
            restart_request = bootloader_changed ? BASELOADER_MODE : APPLICATION_MODE;
 800584e:	681b      	ldr	r3, [r3, #0]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005850:	9904      	ldr	r1, [sp, #16]
            restart_request = bootloader_changed ? BASELOADER_MODE : APPLICATION_MODE;
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf0c      	ite	eq
 8005856:	2403      	moveq	r4, #3
 8005858:	2401      	movne	r4, #1
 800585a:	e7e6      	b.n	800582a <hf2_data_rx_cb+0x246>
        case HF2_CMD_INFO: { debug_println("hf2 >> info");
 800585c:	4826      	ldr	r0, [pc, #152]	; (80058f8 <hf2_data_rx_cb+0x314>)
 800585e:	f7fe fc39 	bl	80040d4 <debug_println>
            int info_size = strlen(infoUf2File);
 8005862:	4826      	ldr	r0, [pc, #152]	; (80058fc <hf2_data_rx_cb+0x318>)
 8005864:	f7fe fa90 	bl	8003d88 <strlen>
    if (assertion) { return; }
 8005868:	4606      	mov	r6, r0
 800586a:	2800      	cmp	r0, #0
 800586c:	f000 8106 	beq.w	8005a7c <hf2_data_rx_cb+0x498>
 8005870:	2854      	cmp	r0, #84	; 0x54
 8005872:	d902      	bls.n	800587a <hf2_data_rx_cb+0x296>
 8005874:	4822      	ldr	r0, [pc, #136]	; (8005900 <hf2_data_rx_cb+0x31c>)
 8005876:	f7ff fea7 	bl	80055c8 <assert.part.0>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 800587a:	4632      	mov	r2, r6
 800587c:	1da0      	adds	r0, r4, #6
 800587e:	491f      	ldr	r1, [pc, #124]	; (80058fc <hf2_data_rx_cb+0x318>)
    volatile uint32_t dataToSendLength = 4 + size;
 8005880:	3604      	adds	r6, #4
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 8005882:	f7fe fa69 	bl	8003d58 <memcpy>
    volatile uint32_t dataToSendLength = 4 + size;
 8005886:	9608      	str	r6, [sp, #32]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005888:	9908      	ldr	r1, [sp, #32]
 800588a:	4638      	mov	r0, r7
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	f7ff fe2d 	bl	80054ec <pokeSend>
            send_hf2_response(pkt, info_size); debug_force_flush(); ////
 8005892:	f7fe fba1 	bl	8003fd8 <debug_force_flush>
 8005896:	682c      	ldr	r4, [r5, #0]
 8005898:	e6cb      	b.n	8005632 <hf2_data_rx_cb+0x4e>
 800589a:	bf00      	nop
 800589c:	20000a08 	.word	0x20000a08
 80058a0:	20000a48 	.word	0x20000a48
 80058a4:	200009f8 	.word	0x200009f8
 80058a8:	20000a09 	.word	0x20000a09
 80058ac:	080069b4 	.word	0x080069b4
 80058b0:	20000ca8 	.word	0x20000ca8
 80058b4:	20004bbc 	.word	0x20004bbc
 80058b8:	20000b96 	.word	0x20000b96
 80058bc:	200009e4 	.word	0x200009e4
 80058c0:	08006b68 	.word	0x08006b68
 80058c4:	08006b30 	.word	0x08006b30
 80058c8:	08010000 	.word	0x08010000
 80058cc:	08006544 	.word	0x08006544
 80058d0:	080069c0 	.word	0x080069c0
 80058d4:	08006a28 	.word	0x08006a28
 80058d8:	080063c8 	.word	0x080063c8
 80058dc:	20000b97 	.word	0x20000b97
 80058e0:	200009ec 	.word	0x200009ec
 80058e4:	08006a08 	.word	0x08006a08
 80058e8:	08006b5c 	.word	0x08006b5c
 80058ec:	200009dc 	.word	0x200009dc
 80058f0:	20000b99 	.word	0x20000b99
 80058f4:	08006b50 	.word	0x08006b50
 80058f8:	080069d8 	.word	0x080069d8
 80058fc:	08006368 	.word	0x08006368
 8005900:	080069f4 	.word	0x080069f4
 8005904:	200009fc 	.word	0x200009fc
 8005908:	200009e0 	.word	0x200009e0
 800590c:	08000150 	.word	0x08000150
 8005910:	200009e8 	.word	0x200009e8
        case HF2_CMD_BININFO: {  debug_println("hf2 >> bininfo");
 8005914:	48b9      	ldr	r0, [pc, #740]	; (8005bfc <hf2_data_rx_cb+0x618>)
 8005916:	f7fe fbdd 	bl	80040d4 <debug_println>
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 800591a:	f7ff fc4f 	bl	80051bc <boot_target_get_startup_mode>
    volatile uint32_t dataToSendLength = 4 + size;
 800591e:	2118      	movs	r1, #24
                HF2_MODE_BOOTLOADER :
 8005920:	2802      	cmp	r0, #2
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005922:	f04f 0300 	mov.w	r3, #0
                HF2_MODE_BOOTLOADER :
 8005926:	bf18      	it	ne
 8005928:	f04f 0802 	movne.w	r8, #2
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800592c:	2240      	movs	r2, #64	; 0x40
            resp->bininfo.uf2_family = UF2_FAMILY;
 800592e:	f04f 0e10 	mov.w	lr, #16
 8005932:	f06f 0c1d 	mvn.w	ip, #29
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005936:	f04f 0b01 	mov.w	fp, #1
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800593a:	f04f 0a04 	mov.w	sl, #4
            resp->bininfo.uf2_family = UF2_FAMILY;
 800593e:	f04f 0972 	mov.w	r9, #114	; 0x72
 8005942:	265e      	movs	r6, #94	; 0x5e
    volatile uint32_t dataToSendLength = 4 + size;
 8005944:	9107      	str	r1, [sp, #28]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005946:	72a3      	strb	r3, [r4, #10]
 8005948:	7323      	strb	r3, [r4, #12]
 800594a:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 800594c:	73a3      	strb	r3, [r4, #14]
 800594e:	7423      	strb	r3, [r4, #16]
 8005950:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8005952:	7523      	strb	r3, [r4, #20]
 8005954:	7563      	strb	r3, [r4, #21]
 8005956:	74a2      	strb	r2, [r4, #18]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005958:	f884 e017 	strb.w	lr, [r4, #23]
 800595c:	f884 c018 	strb.w	ip, [r4, #24]
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8005960:	f8c4 8006 	str.w	r8, [r4, #6]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005964:	9907      	ldr	r1, [sp, #28]
 8005966:	4638      	mov	r0, r7
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8005968:	f884 b00b 	strb.w	fp, [r4, #11]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 800596c:	f884 b00f 	strb.w	fp, [r4, #15]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8005970:	f884 a013 	strb.w	sl, [r4, #19]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8005974:	f884 9016 	strb.w	r9, [r4, #22]
 8005978:	7666      	strb	r6, [r4, #25]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800597a:	f7ff fdb7 	bl	80054ec <pokeSend>
            send_hf2_response(pkt, sizeof(resp->bininfo)); debug_force_flush(); ////
 800597e:	f7fe fb2b 	bl	8003fd8 <debug_force_flush>
 8005982:	682c      	ldr	r4, [r5, #0]
 8005984:	e655      	b.n	8005632 <hf2_data_rx_cb+0x4e>
        default: { debug_print("hf2 >> unknown "); debug_print_unsigned(cmdId); debug_println(""); debug_force_flush(); ////
 8005986:	489e      	ldr	r0, [pc, #632]	; (8005c00 <hf2_data_rx_cb+0x61c>)
 8005988:	f7fe fb9e 	bl	80040c8 <debug_print>
 800598c:	4640      	mov	r0, r8
 800598e:	f7fe fbbd 	bl	800410c <debug_print_unsigned>
 8005992:	489c      	ldr	r0, [pc, #624]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005994:	f7fe fb9e 	bl	80040d4 <debug_println>
 8005998:	f7fe fb1e 	bl	8003fd8 <debug_force_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 800599c:	2104      	movs	r1, #4
            resp->status16 = HF2_STATUS_INVALID_CMD;
 800599e:	2200      	movs	r2, #0
 80059a0:	2301      	movs	r3, #1
    volatile uint32_t dataToSendLength = 4 + size;
 80059a2:	9102      	str	r1, [sp, #8]
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80059a4:	7162      	strb	r2, [r4, #5]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80059a6:	9902      	ldr	r1, [sp, #8]
 80059a8:	4638      	mov	r0, r7
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80059aa:	7123      	strb	r3, [r4, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80059ac:	2240      	movs	r2, #64	; 0x40
 80059ae:	f7ff fd9d 	bl	80054ec <pokeSend>
 80059b2:	e718      	b.n	80057e6 <hf2_data_rx_cb+0x202>
        debug_println("find vector..."); debug_force_flush();
 80059b4:	4894      	ldr	r0, [pc, #592]	; (8005c08 <hf2_data_rx_cb+0x624>)
 80059b6:	f7fe fb8d 	bl	80040d4 <debug_println>
 80059ba:	f7fe fb0d 	bl	8003fd8 <debug_force_flush>
        new_base_vector = NULL;
 80059be:	2000      	movs	r0, #0
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 80059c0:	f8da 3010 	ldr.w	r3, [sl, #16]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 80059c4:	f8da 200c 	ldr.w	r2, [sl, #12]
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 80059c8:	f423 717f 	bic.w	r1, r3, #1020	; 0x3fc
 80059cc:	f021 0103 	bic.w	r1, r1, #3
 80059d0:	f8cb 1000 	str.w	r1, [fp]
        new_bootloader_size = (uint32_t) base_vector_table.application - FLASH_BASE;
 80059d4:	498d      	ldr	r1, [pc, #564]	; (8005c0c <hf2_data_rx_cb+0x628>)
 80059d6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80059da:	600b      	str	r3, [r1, #0]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 80059dc:	498c      	ldr	r1, [pc, #560]	; (8005c10 <hf2_data_rx_cb+0x62c>)
 80059de:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
        bootloader_changed = 0;
 80059e2:	4b8c      	ldr	r3, [pc, #560]	; (8005c14 <hf2_data_rx_cb+0x630>)
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 80059e4:	600a      	str	r2, [r1, #0]
        new_base_vector = NULL;
 80059e6:	4a8c      	ldr	r2, [pc, #560]	; (8005c18 <hf2_data_rx_cb+0x634>)
        bootloader_changed = 0;
 80059e8:	6018      	str	r0, [r3, #0]
        new_base_vector = NULL;
 80059ea:	6010      	str	r0, [r2, #0]
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 80059ec:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80059f0:	433b      	orrs	r3, r7
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	4989      	ldr	r1, [pc, #548]	; (8005c1c <hf2_data_rx_cb+0x638>)
 80059f6:	4288      	cmp	r0, r1
 80059f8:	f000 80ad 	beq.w	8005b56 <hf2_data_rx_cb+0x572>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 80059fc:	f8db 3000 	ldr.w	r3, [fp]
 8005a00:	429e      	cmp	r6, r3
 8005a02:	f4bf aee1 	bcs.w	80057c8 <hf2_data_rx_cb+0x1e4>
        target_addr += old_app_start_offset;
 8005a06:	4446      	add	r6, r8
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 8005a08:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 8005a0c:	d32a      	bcc.n	8005a64 <hf2_data_rx_cb+0x480>
 8005a0e:	4b84      	ldr	r3, [pc, #528]	; (8005c20 <hf2_data_rx_cb+0x63c>)
 8005a10:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d825      	bhi.n	8005a64 <hf2_data_rx_cb+0x480>
    if (assertion) { return; }
 8005a18:	f5b9 7f86 	cmp.w	r9, #268	; 0x10c
 8005a1c:	f47f aed7 	bne.w	80057ce <hf2_data_rx_cb+0x1ea>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) && !bootloader_changed) {
 8005a20:	4b7c      	ldr	r3, [pc, #496]	; (8005c14 <hf2_data_rx_cb+0x630>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f aede 	bne.w	80057e6 <hf2_data_rx_cb+0x202>
        flash_write(target_addr, data, HF2_PAGE_SIZE);
 8005a2a:	f104 010e 	add.w	r1, r4, #14
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a34:	f7fe ff1e 	bl	8004874 <flash_write>
 8005a38:	682c      	ldr	r4, [r5, #0]
 8005a3a:	e5fa      	b.n	8005632 <hf2_data_rx_cb+0x4e>
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 8005a3c:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005c6c <hf2_data_rx_cb+0x688>
 8005a40:	e67a      	b.n	8005738 <hf2_data_rx_cb+0x154>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 8005a42:	4878      	ldr	r0, [pc, #480]	; (8005c24 <hf2_data_rx_cb+0x640>)
 8005a44:	f7fe fb46 	bl	80040d4 <debug_println>
 8005a48:	f7fe fac6 	bl	8003fd8 <debug_force_flush>
    volatile uint32_t dataToSendLength = 4 + size;
 8005a4c:	2304      	movs	r3, #4
                restart_request = BOOTLOADER_MODE; 
 8005a4e:	2402      	movs	r4, #2
    volatile uint32_t dataToSendLength = 4 + size;
 8005a50:	9305      	str	r3, [sp, #20]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005a52:	9905      	ldr	r1, [sp, #20]
                restart_request = BOOTLOADER_MODE; 
 8005a54:	4b74      	ldr	r3, [pc, #464]	; (8005c28 <hf2_data_rx_cb+0x644>)
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005a56:	4638      	mov	r0, r7
 8005a58:	2240      	movs	r2, #64	; 0x40
                restart_request = BOOTLOADER_MODE; 
 8005a5a:	701c      	strb	r4, [r3, #0]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005a5c:	f7ff fd46 	bl	80054ec <pokeSend>
 8005a60:	682c      	ldr	r4, [r5, #0]
 8005a62:	e5e6      	b.n	8005632 <hf2_data_rx_cb+0x4e>
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 8005a64:	4871      	ldr	r0, [pc, #452]	; (8005c2c <hf2_data_rx_cb+0x648>)
 8005a66:	f7fe fb2f 	bl	80040c8 <debug_print>
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7fe fb74 	bl	8004158 <debug_printhex_unsigned>
 8005a70:	4864      	ldr	r0, [pc, #400]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005a72:	f7fe fb2f 	bl	80040d4 <debug_println>
 8005a76:	f7fe faaf 	bl	8003fd8 <debug_force_flush>
 8005a7a:	e6a5      	b.n	80057c8 <hf2_data_rx_cb+0x1e4>
 8005a7c:	486c      	ldr	r0, [pc, #432]	; (8005c30 <hf2_data_rx_cb+0x64c>)
 8005a7e:	f7ff fda3 	bl	80055c8 <assert.part.0>
 8005a82:	e6fa      	b.n	800587a <hf2_data_rx_cb+0x296>
    if (flush_count++ % 4 == 0) { debug_flush(); }
 8005a84:	f7fe fa96 	bl	8003fb4 <debug_flush>
 8005a88:	e673      	b.n	8005772 <hf2_data_rx_cb+0x18e>
    volatile uint32_t dataToSendLength = 4 + size;
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	930a      	str	r3, [sp, #40]	; 0x28
                restart_request = BOOTLOADER_MODE; 
 8005a8e:	2402      	movs	r4, #2
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8005a90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a92:	e7df      	b.n	8005a54 <hf2_data_rx_cb+0x470>
    } else if (new_base_vector && (target_addr == new_app_start) && !bootloader_changed) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8005a94:	4b5f      	ldr	r3, [pc, #380]	; (8005c14 <hf2_data_rx_cb+0x630>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f47f ae95 	bne.w	80057c8 <hf2_data_rx_cb+0x1e4>
        debug_println("wrote bootloader"); debug_force_flush();
 8005a9e:	4865      	ldr	r0, [pc, #404]	; (8005c34 <hf2_data_rx_cb+0x650>)
 8005aa0:	f7fe fb18 	bl	80040d4 <debug_println>
 8005aa4:	f7fe fa98 	bl	8003fd8 <debug_force_flush>
        flash_flush();  //  Flush the last Bootloader page.
 8005aa8:	f7fe fe84 	bl	80047b4 <flash_flush>
        bootloader_changed = handle_bootloader_update(old_app_start, old_app_start_offset, 
 8005aac:	4a57      	ldr	r2, [pc, #348]	; (8005c0c <hf2_data_rx_cb+0x628>)
 8005aae:	4b58      	ldr	r3, [pc, #352]	; (8005c10 <hf2_data_rx_cb+0x62c>)
 8005ab0:	f8d2 a000 	ldr.w	sl, [r2]
    debug_println("compare bootloader..."); debug_force_flush();
 8005ab4:	4860      	ldr	r0, [pc, #384]	; (8005c38 <hf2_data_rx_cb+0x654>)
        bootloader_changed = handle_bootloader_update(old_app_start, old_app_start_offset, 
 8005ab6:	f8d3 b000 	ldr.w	fp, [r3]
    debug_println("compare bootloader..."); debug_force_flush();
 8005aba:	f7fe fb0b 	bl	80040d4 <debug_println>
 8005abe:	f7fe fa8b 	bl	8003fd8 <debug_force_flush>
    int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7fe f965 	bl	8003d98 <memcmp>
    if (!bootloader_changed) {
 8005ace:	9000      	str	r0, [sp, #0]
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d07f      	beq.n	8005bd4 <hf2_data_rx_cb+0x5f0>
    debug_println("bootloader changed"); debug_force_flush();
 8005ad4:	4859      	ldr	r0, [pc, #356]	; (8005c3c <hf2_data_rx_cb+0x658>)
 8005ad6:	f7fe fafd 	bl	80040d4 <debug_println>
    uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 8005ada:	44b0      	add	r8, r6
    debug_println("bootloader changed"); debug_force_flush();
 8005adc:	f7fe fa7c 	bl	8003fd8 <debug_force_flush>
    debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 8005ae0:	4857      	ldr	r0, [pc, #348]	; (8005c40 <hf2_data_rx_cb+0x65c>)
 8005ae2:	f7fe faf1 	bl	80040c8 <debug_print>
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f7fe fb36 	bl	8004158 <debug_printhex_unsigned>
    debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 8005aec:	4855      	ldr	r0, [pc, #340]	; (8005c44 <hf2_data_rx_cb+0x660>)
 8005aee:	f7fe faeb 	bl	80040c8 <debug_print>
 8005af2:	4658      	mov	r0, fp
 8005af4:	f7fe fb30 	bl	8004158 <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8005af8:	4842      	ldr	r0, [pc, #264]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005afa:	f7fe faeb 	bl	80040d4 <debug_println>
 8005afe:	f7fe fa6b 	bl	8003fd8 <debug_force_flush>
    flash_write(new_baseloader_addr, (const uint8_t *) old_app_start, new_baseloader_size);
 8005b02:	465a      	mov	r2, fp
 8005b04:	4639      	mov	r1, r7
 8005b06:	4640      	mov	r0, r8
 8005b08:	f7fe feb4 	bl	8004874 <flash_write>
    flash_flush();
 8005b0c:	f7fe fe52 	bl	80047b4 <flash_flush>
    debug_print("restart to baseloader "); debug_printhex_unsigned(new_baseloader_addr);
 8005b10:	484d      	ldr	r0, [pc, #308]	; (8005c48 <hf2_data_rx_cb+0x664>)
 8005b12:	f7fe fad9 	bl	80040c8 <debug_print>
 8005b16:	4640      	mov	r0, r8
 8005b18:	f7fe fb1e 	bl	8004158 <debug_printhex_unsigned>
    debug_print(", baselen "); debug_printhex_unsigned(new_baseloader_size);
 8005b1c:	484b      	ldr	r0, [pc, #300]	; (8005c4c <hf2_data_rx_cb+0x668>)
 8005b1e:	f7fe fad3 	bl	80040c8 <debug_print>
 8005b22:	4658      	mov	r0, fp
 8005b24:	f7fe fb18 	bl	8004158 <debug_printhex_unsigned>
    debug_print(", oldapp "); debug_printhex_unsigned(old_app_start);
 8005b28:	4849      	ldr	r0, [pc, #292]	; (8005c50 <hf2_data_rx_cb+0x66c>)
 8005b2a:	f7fe facd 	bl	80040c8 <debug_print>
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7fe fb12 	bl	8004158 <debug_printhex_unsigned>
    debug_print(", bootlen "); debug_printhex_unsigned(new_bootloader_size);
 8005b34:	4847      	ldr	r0, [pc, #284]	; (8005c54 <hf2_data_rx_cb+0x670>)
 8005b36:	f7fe fac7 	bl	80040c8 <debug_print>
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f7fe fb0c 	bl	8004158 <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8005b40:	4830      	ldr	r0, [pc, #192]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005b42:	f7fe fac7 	bl	80040d4 <debug_println>
    return 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	9300      	str	r3, [sp, #0]
    debug_println(""); debug_force_flush();
 8005b4a:	f7fe fa45 	bl	8003fd8 <debug_force_flush>
 8005b4e:	9b00      	ldr	r3, [sp, #0]
        bootloader_changed = handle_bootloader_update(old_app_start, old_app_start_offset, 
 8005b50:	4a30      	ldr	r2, [pc, #192]	; (8005c14 <hf2_data_rx_cb+0x630>)
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e638      	b.n	80057c8 <hf2_data_rx_cb+0x1e4>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8005b56:	6958      	ldr	r0, [r3, #20]
 8005b58:	493f      	ldr	r1, [pc, #252]	; (8005c58 <hf2_data_rx_cb+0x674>)
 8005b5a:	4288      	cmp	r0, r1
 8005b5c:	f47f af4e 	bne.w	80059fc <hf2_data_rx_cb+0x418>
        new_base_vector = BASE_VECTOR_TABLE(old_app_start);
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	9201      	str	r2, [sp, #4]
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8005b64:	6919      	ldr	r1, [r3, #16]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8005b66:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8005c0c <hf2_data_rx_cb+0x628>
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8005b6a:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
 8005b6e:	f021 0103 	bic.w	r1, r1, #3
        new_bootloader_size = new_app_start - FLASH_BASE;
 8005b72:	f101 4078 	add.w	r0, r1, #4160749568	; 0xf8000000
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8005b76:	f8cb 1000 	str.w	r1, [fp]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8005b7a:	f8ca 0000 	str.w	r0, [sl]
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4923      	ldr	r1, [pc, #140]	; (8005c10 <hf2_data_rx_cb+0x62c>)
 8005b82:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8005b86:	4835      	ldr	r0, [pc, #212]	; (8005c5c <hf2_data_rx_cb+0x678>)
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8005b88:	600b      	str	r3, [r1, #0]
 8005b8a:	9100      	str	r1, [sp, #0]
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8005b8c:	f7fe fa9c 	bl	80040c8 <debug_print>
 8005b90:	f8db 0000 	ldr.w	r0, [fp]
 8005b94:	f7fe fae0 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", boot size "); debug_printhex_unsigned(new_bootloader_size);
 8005b98:	4831      	ldr	r0, [pc, #196]	; (8005c60 <hf2_data_rx_cb+0x67c>)
 8005b9a:	f7fe fa95 	bl	80040c8 <debug_print>
 8005b9e:	f8da 0000 	ldr.w	r0, [sl]
 8005ba2:	f7fe fad9 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", base size "); debug_printhex_unsigned(new_baseloader_size);
 8005ba6:	482f      	ldr	r0, [pc, #188]	; (8005c64 <hf2_data_rx_cb+0x680>)
 8005ba8:	f7fe fa8e 	bl	80040c8 <debug_print>
 8005bac:	9900      	ldr	r1, [sp, #0]
 8005bae:	6808      	ldr	r0, [r1, #0]
 8005bb0:	f7fe fad2 	bl	8004158 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8005bb4:	4813      	ldr	r0, [pc, #76]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005bb6:	f7fe fa8d 	bl	80040d4 <debug_println>
 8005bba:	f7fe fa0d 	bl	8003fd8 <debug_force_flush>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8005bbe:	f8db 3000 	ldr.w	r3, [fp]
 8005bc2:	9a01      	ldr	r2, [sp, #4]
 8005bc4:	429e      	cmp	r6, r3
 8005bc6:	f4ff af1e 	bcc.w	8005a06 <hf2_data_rx_cb+0x422>
    } else if (new_base_vector && (target_addr == new_app_start) && !bootloader_changed) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	f47f adf8 	bne.w	80057c2 <hf2_data_rx_cb+0x1de>
 8005bd2:	e5f9      	b.n	80057c8 <hf2_data_rx_cb+0x1e4>
        debug_print("bootloader identical "); debug_printhex_unsigned(old_app_start);
 8005bd4:	4824      	ldr	r0, [pc, #144]	; (8005c68 <hf2_data_rx_cb+0x684>)
 8005bd6:	f7fe fa77 	bl	80040c8 <debug_print>
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f7fe fabc 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 8005be0:	4818      	ldr	r0, [pc, #96]	; (8005c44 <hf2_data_rx_cb+0x660>)
 8005be2:	f7fe fa71 	bl	80040c8 <debug_print>
 8005be6:	4650      	mov	r0, sl
 8005be8:	f7fe fab6 	bl	8004158 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8005bec:	4805      	ldr	r0, [pc, #20]	; (8005c04 <hf2_data_rx_cb+0x620>)
 8005bee:	f7fe fa71 	bl	80040d4 <debug_println>
 8005bf2:	f7fe f9f1 	bl	8003fd8 <debug_force_flush>
 8005bf6:	9b00      	ldr	r3, [sp, #0]
 8005bf8:	e7aa      	b.n	8005b50 <hf2_data_rx_cb+0x56c>
 8005bfa:	bf00      	nop
 8005bfc:	080069c8 	.word	0x080069c8
 8005c00:	08006b74 	.word	0x08006b74
 8005c04:	08005fa8 	.word	0x08005fa8
 8005c08:	08006a38 	.word	0x08006a38
 8005c0c:	200009f4 	.word	0x200009f4
 8005c10:	200009f0 	.word	0x200009f0
 8005c14:	200009dc 	.word	0x200009dc
 8005c18:	200009ec 	.word	0x200009ec
 8005c1c:	22051969 	.word	0x22051969
 8005c20:	08010000 	.word	0x08010000
 8005c24:	08006a18 	.word	0x08006a18
 8005c28:	20000b99 	.word	0x20000b99
 8005c2c:	08006a7c 	.word	0x08006a7c
 8005c30:	080069e4 	.word	0x080069e4
 8005c34:	08006a98 	.word	0x08006a98
 8005c38:	08006aac 	.word	0x08006aac
 8005c3c:	08006ae4 	.word	0x08006ae4
 8005c40:	08006af8 	.word	0x08006af8
 8005c44:	08006adc 	.word	0x08006adc
 8005c48:	08006b0c 	.word	0x08006b0c
 8005c4c:	08006b24 	.word	0x08006b24
 8005c50:	08006280 	.word	0x08006280
 8005c54:	0800628c 	.word	0x0800628c
 8005c58:	19690522 	.word	0x19690522
 8005c5c:	08006a48 	.word	0x08006a48
 8005c60:	08006a5c 	.word	0x08006a5c
 8005c64:	08006a6c 	.word	0x08006a6c
 8005c68:	08006ac4 	.word	0x08006ac4
 8005c6c:	080069c0 	.word	0x080069c0

08005c70 <hf2_data_tx_cb>:
static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) { (void)usbd_dev; (void)ep;
 8005c70:	b510      	push	{r4, lr}
    if (remDataToSendLength > 0) {  //  If there is remaining data to be sent...
 8005c72:	4c12      	ldr	r4, [pc, #72]	; (8005cbc <hf2_data_tx_cb+0x4c>)
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	b963      	cbnz	r3, 8005c92 <hf2_data_tx_cb+0x22>
    if (remDataToSendLength == 0 && restart_request != UNKNOWN_MODE) {  //  If there is no more data to be sent...
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	b94b      	cbnz	r3, 8005c90 <hf2_data_tx_cb+0x20>
 8005c7c:	4910      	ldr	r1, [pc, #64]	; (8005cc0 <hf2_data_tx_cb+0x50>)
 8005c7e:	780a      	ldrb	r2, [r1, #0]
 8005c80:	b132      	cbz	r2, 8005c90 <hf2_data_tx_cb+0x20>
        switch(restart_request0) {
 8005c82:	2a02      	cmp	r2, #2
        restart_request = UNKNOWN_MODE;
 8005c84:	700b      	strb	r3, [r1, #0]
        switch(restart_request0) {
 8005c86:	d014      	beq.n	8005cb2 <hf2_data_tx_cb+0x42>
 8005c88:	2a03      	cmp	r2, #3
 8005c8a:	d00a      	beq.n	8005ca2 <hf2_data_tx_cb+0x32>
 8005c8c:	2a01      	cmp	r2, #1
 8005c8e:	d00c      	beq.n	8005caa <hf2_data_tx_cb+0x3a>
}
 8005c90:	bd10      	pop	{r4, pc}
        pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);  //  Send it.
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <hf2_data_tx_cb+0x54>)
 8005c94:	4a0c      	ldr	r2, [pc, #48]	; (8005cc8 <hf2_data_tx_cb+0x58>)
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	f7ff fc26 	bl	80054ec <pokeSend>
 8005ca0:	e7ea      	b.n	8005c78 <hf2_data_tx_cb+0x8>
}
 8005ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                boot_target_manifest_app();  //  Never returns.
 8005ca6:	f7ff bafd 	b.w	80052a4 <boot_target_manifest_app>
}
 8005caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                boot_target_manifest_baseloader();  //  Never returns.
 8005cae:	f7ff bb09 	b.w	80052c4 <boot_target_manifest_baseloader>
}
 8005cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                boot_target_manifest_bootloader();  //  Never returns.
 8005cb6:	f7ff bb15 	b.w	80052e4 <boot_target_manifest_bootloader>
 8005cba:	bf00      	nop
 8005cbc:	20000a04 	.word	0x20000a04
 8005cc0:	20000b99 	.word	0x20000b99
 8005cc4:	20000a00 	.word	0x20000a00
 8005cc8:	20000b98 	.word	0x20000b98

08005ccc <hf2_setup>:
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	460d      	mov	r5, r1
 8005cd0:	4604      	mov	r4, r0
    debug_print("flash allow "); debug_printhex_unsigned(USER_FLASH_START); debug_print(" to "); debug_printhex_unsigned(USER_FLASH_END); debug_println("");  //  Show the addresses that flashing is allowed.
 8005cd2:	4815      	ldr	r0, [pc, #84]	; (8005d28 <hf2_setup+0x5c>)
 8005cd4:	f7fe f9f8 	bl	80040c8 <debug_print>
 8005cd8:	4814      	ldr	r0, [pc, #80]	; (8005d2c <hf2_setup+0x60>)
 8005cda:	f7fe fa3d 	bl	8004158 <debug_printhex_unsigned>
 8005cde:	4814      	ldr	r0, [pc, #80]	; (8005d30 <hf2_setup+0x64>)
 8005ce0:	f7fe f9f2 	bl	80040c8 <debug_print>
 8005ce4:	4813      	ldr	r0, [pc, #76]	; (8005d34 <hf2_setup+0x68>)
 8005ce6:	f7fe fa37 	bl	8004158 <debug_printhex_unsigned>
 8005cea:	4813      	ldr	r0, [pc, #76]	; (8005d38 <hf2_setup+0x6c>)
 8005cec:	f7fe f9f2 	bl	80040d4 <debug_println>
    _usbd_dev = usbd_dev;
 8005cf0:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <hf2_setup+0x70>)
    connected_func = connected_func0;  //  test_hf2(); ////
 8005cf2:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <hf2_setup+0x74>)
    _usbd_dev = usbd_dev;
 8005cf4:	6014      	str	r4, [r2, #0]
    connected_func = connected_func0;  //  test_hf2(); ////
 8005cf6:	601d      	str	r5, [r3, #0]
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) {
 8005cf8:	f7ff fa60 	bl	80051bc <boot_target_get_startup_mode>
 8005cfc:	2802      	cmp	r0, #2
 8005cfe:	d00b      	beq.n	8005d18 <hf2_setup+0x4c>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 8005d00:	4620      	mov	r0, r4
 8005d02:	4910      	ldr	r1, [pc, #64]	; (8005d44 <hf2_setup+0x78>)
 8005d04:	f7fe fef2 	bl	8004aec <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	db00      	blt.n	8005d0e <hf2_setup+0x42>
}
 8005d0c:	bd38      	pop	{r3, r4, r5, pc}
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8005d0e:	480e      	ldr	r0, [pc, #56]	; (8005d48 <hf2_setup+0x7c>)
}
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8005d14:	f7fe b9de 	b.w	80040d4 <debug_println>
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 8005d18:	f240 4242 	movw	r2, #1090	; 0x442
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	480b      	ldr	r0, [pc, #44]	; (8005d4c <hf2_setup+0x80>)
 8005d20:	f7fe f862 	bl	8003de8 <memset>
 8005d24:	e7ec      	b.n	8005d00 <hf2_setup+0x34>
 8005d26:	bf00      	nop
 8005d28:	08006b94 	.word	0x08006b94
 8005d2c:	08007400 	.word	0x08007400
 8005d30:	08006ba4 	.word	0x08006ba4
 8005d34:	08010000 	.word	0x08010000
 8005d38:	08005fa8 	.word	0x08005fa8
 8005d3c:	200009d8 	.word	0x200009d8
 8005d40:	200009e4 	.word	0x200009e4
 8005d44:	080054b1 	.word	0x080054b1
 8005d48:	08006bac 	.word	0x08006bac
 8005d4c:	20004bbc 	.word	0x20004bbc

08005d50 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8005d50:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <usb21_set_config+0x20>)
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	f7fe fee6 	bl	8004b28 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	db00      	blt.n	8005d62 <usb21_set_config+0x12>
}
 8005d60:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8005d62:	4804      	ldr	r0, [pc, #16]	; (8005d74 <usb21_set_config+0x24>)
 8005d64:	f7fe f9b6 	bl	80040d4 <debug_println>
}
 8005d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8005d6c:	f7fe b922 	b.w	8003fb4 <debug_flush>
 8005d70:	08005d79 	.word	0x08005d79
 8005d74:	08006bd4 	.word	0x08006bd4

08005d78 <usb21_standard_get_descriptor>:
	int descr_type = req->wValue >> 8;
 8005d78:	8848      	ldrh	r0, [r1, #2]
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8005d7a:	0a00      	lsrs	r0, r0, #8
 8005d7c:	280f      	cmp	r0, #15
 8005d7e:	d10e      	bne.n	8005d9e <usb21_standard_get_descriptor+0x26>
											usbd_control_complete_callback* complete) {
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb21_bos) {
 8005d84:	4f31      	ldr	r7, [pc, #196]	; (8005e4c <usb21_standard_get_descriptor+0xd4>)
											usbd_control_complete_callback* complete) {
 8005d86:	b085      	sub	sp, #20
	if (!usb21_bos) {
 8005d88:	683d      	ldr	r5, [r7, #0]
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	b145      	cbz	r5, 8005da2 <usb21_standard_get_descriptor+0x2a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 8005d90:	784b      	ldrb	r3, [r1, #1]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d00c      	beq.n	8005db0 <usb21_standard_get_descriptor+0x38>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8005d96:	2002      	movs	r0, #2
}
 8005d98:	b005      	add	sp, #20
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8005d9e:	2002      	movs	r0, #2
}
 8005da0:	4770      	bx	lr
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 8005da2:	482b      	ldr	r0, [pc, #172]	; (8005e50 <usb21_standard_get_descriptor+0xd8>)
 8005da4:	f7fe f996 	bl	80040d4 <debug_println>
 8005da8:	f7fe f904 	bl	8003fb4 <debug_flush>
 8005dac:	4628      	mov	r0, r5
 8005dae:	e7f3      	b.n	8005d98 <usb21_standard_get_descriptor+0x20>
		dump_usb_request("bos", req); // debug_flush(); ////
 8005db0:	4828      	ldr	r0, [pc, #160]	; (8005e54 <usb21_standard_get_descriptor+0xdc>)
 8005db2:	f7fe ff17 	bl	8004be4 <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005db6:	f8d7 b000 	ldr.w	fp, [r7]
 8005dba:	9b01      	ldr	r3, [sp, #4]
	bytes_to_copy = MIN(len, bos->bLength);
 8005dbc:	f89b 8000 	ldrb.w	r8, [fp]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005dc0:	881c      	ldrh	r4, [r3, #0]
 8005dc2:	6830      	ldr	r0, [r6, #0]
	bytes_to_copy = MIN(len, bos->bLength);
 8005dc4:	45a0      	cmp	r8, r4
 8005dc6:	bf28      	it	cs
 8005dc8:	46a0      	movcs	r8, r4
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005dca:	4605      	mov	r5, r0
	memcpy(buf, bos, bytes_to_copy);
 8005dcc:	4642      	mov	r2, r8
 8005dce:	4659      	mov	r1, fp
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005dd0:	9403      	str	r4, [sp, #12]
 8005dd2:	9002      	str	r0, [sp, #8]
	memcpy(buf, bos, bytes_to_copy);
 8005dd4:	f7fd ffc0 	bl	8003d58 <memcpy>
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005dd8:	f89b 2004 	ldrb.w	r2, [fp, #4]
	len -= bytes_to_copy;
 8005ddc:	eba4 0708 	sub.w	r7, r4, r8
	buf += bytes_to_copy;
 8005de0:	eb05 0a08 	add.w	sl, r5, r8
	len -= bytes_to_copy;
 8005de4:	b2bf      	uxth	r7, r7
	totallen += bos->bLength;
 8005de6:	f89b 5000 	ldrb.w	r5, [fp]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005dea:	b302      	cbz	r2, 8005e2e <usb21_standard_get_descriptor+0xb6>
 8005dec:	2600      	movs	r6, #0
 8005dee:	46a9      	mov	r9, r5
			bos->capabilities[i];
 8005df0:	f8db 3005 	ldr.w	r3, [fp, #5]
		memcpy(buf, cap, bytes_to_copy);
 8005df4:	4650      	mov	r0, sl
		const struct usb_device_capability_descriptor *cap =
 8005df6:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8005dfa:	3601      	adds	r6, #1
		bytes_to_copy = MIN(len, cap->bLength);
 8005dfc:	782c      	ldrb	r4, [r5, #0]
		memcpy(buf, cap, bytes_to_copy);
 8005dfe:	4629      	mov	r1, r5
		bytes_to_copy = MIN(len, cap->bLength);
 8005e00:	42bc      	cmp	r4, r7
 8005e02:	bf28      	it	cs
 8005e04:	463c      	movcs	r4, r7
		memcpy(buf, cap, bytes_to_copy);
 8005e06:	4622      	mov	r2, r4
 8005e08:	f7fd ffa6 	bl	8003d58 <memcpy>
		totallen += cap->bLength;
 8005e0c:	782b      	ldrb	r3, [r5, #0]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005e0e:	f89b 2004 	ldrb.w	r2, [fp, #4]
		totallen += cap->bLength;
 8005e12:	eb09 0503 	add.w	r5, r9, r3
 8005e16:	b2b3      	uxth	r3, r6
		len -= bytes_to_copy;
 8005e18:	1b3f      	subs	r7, r7, r4
		total += bytes_to_copy;
 8005e1a:	44a0      	add	r8, r4
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005e1c:	429a      	cmp	r2, r3
		len -= bytes_to_copy;
 8005e1e:	b2bf      	uxth	r7, r7
		total += bytes_to_copy;
 8005e20:	fa1f f888 	uxth.w	r8, r8
		buf += bytes_to_copy;
 8005e24:	44a2      	add	sl, r4
		totallen += cap->bLength;
 8005e26:	fa1f f985 	uxth.w	r9, r5
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8005e2a:	d8e1      	bhi.n	8005df0 <usb21_standard_get_descriptor+0x78>
 8005e2c:	464d      	mov	r5, r9
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005e2e:	9b03      	ldr	r3, [sp, #12]
		return USBD_REQ_HANDLED;
 8005e30:	2001      	movs	r0, #1
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005e32:	4543      	cmp	r3, r8
 8005e34:	bf28      	it	cs
 8005e36:	4643      	movcs	r3, r8
 8005e38:	4698      	mov	r8, r3
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8005e3a:	9b02      	ldr	r3, [sp, #8]
 8005e3c:	805d      	strh	r5, [r3, #2]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	f8a3 8000 	strh.w	r8, [r3]
}
 8005e44:	b005      	add	sp, #20
 8005e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000a8c 	.word	0x20000a8c
 8005e50:	08006c08 	.word	0x08006c08
 8005e54:	08006c28 	.word	0x08006c28

08005e58 <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <usb21_setup+0x2c>)
 8005e5e:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 8005e60:	2100      	movs	r1, #0
 8005e62:	f7ff ff75 	bl	8005d50 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 8005e66:	4620      	mov	r0, r4
 8005e68:	4907      	ldr	r1, [pc, #28]	; (8005e88 <usb21_setup+0x30>)
 8005e6a:	f7fe fe3f 	bl	8004aec <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	db00      	blt.n	8005e74 <usb21_setup+0x1c>
}
 8005e72:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8005e74:	4805      	ldr	r0, [pc, #20]	; (8005e8c <usb21_setup+0x34>)
 8005e76:	f7fe f92d 	bl	80040d4 <debug_println>
}
 8005e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8005e7e:	f7fe b899 	b.w	8003fb4 <debug_flush>
 8005e82:	bf00      	nop
 8005e84:	20000a8c 	.word	0x20000a8c
 8005e88:	08005d51 	.word	0x08005d51
 8005e8c:	08006bf0 	.word	0x08006bf0

08005e90 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4605      	mov	r5, r0
 8005e94:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 8005e96:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8005e9a:	f7fa ff9b 	bl	8000dd4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 8005e9e:	f240 309b 	movw	r0, #923	; 0x39b
 8005ea2:	f7fa ff97 	bl	8000dd4 <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 8005ea6:	f7fa ff85 	bl	8000db4 <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8005eaa:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <backup_write+0x34>)
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8005eac:	006b      	lsls	r3, r5, #1
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8005eae:	b2a1      	uxth	r1, r4
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	0c24      	lsrs	r4, r4, #16
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8005eb4:	f822 1035 	strh.w	r1, [r2, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8005eb8:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    pwr_enable_backup_domain_write_protect();
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 8005ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pwr_enable_backup_domain_write_protect();
 8005ec0:	f7fa bf80 	b.w	8000dc4 <pwr_enable_backup_domain_write_protect>
 8005ec4:	40006c04 	.word	0x40006c04

08005ec8 <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <backup_read+0x14>)
 8005eca:	0043      	lsls	r3, r0, #1
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 8005ed2:	f832 0030 	ldrh.w	r0, [r2, r0, lsl #3]
    return value;
}
 8005ed6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005eda:	4770      	bx	lr
 8005edc:	40006c04 	.word	0x40006c04
 8005ee0:	202a2a2a 	.word	0x202a2a2a
 8005ee4:	206c6168 	.word	0x206c6168
 8005ee8:	2f737362 	.word	0x2f737362
 8005eec:	61746164 	.word	0x61746164
 8005ef0:	69616620 	.word	0x69616620
 8005ef4:	2c64656c 	.word	0x2c64656c
 8005ef8:	73736220 	.word	0x73736220
 8005efc:	7365745f 	.word	0x7365745f
 8005f00:	203d2074 	.word	0x203d2074
 8005f04:	00000000 	.word	0x00000000
 8005f08:	6164202c 	.word	0x6164202c
 8005f0c:	745f6174 	.word	0x745f6174
 8005f10:	20747365 	.word	0x20747365
 8005f14:	0000203d 	.word	0x0000203d
 8005f18:	00207b75 	.word	0x00207b75
 8005f1c:	0000207d 	.word	0x0000207d
 8005f20:	00203f61 	.word	0x00203f61
 8005f24:	2d2d2d2d 	.word	0x2d2d2d2d
 8005f28:	67726174 	.word	0x67726174
 8005f2c:	675f7465 	.word	0x675f7465
 8005f30:	735f7465 	.word	0x735f7465
 8005f34:	61697265 	.word	0x61697265
 8005f38:	0000006c 	.word	0x0000006c
 8005f3c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005f40:	7261742a 	.word	0x7261742a
 8005f44:	5f746567 	.word	0x5f746567
 8005f48:	696e6170 	.word	0x696e6170
 8005f4c:	00002063 	.word	0x00002063
 8005f50:	2d2d2d2d 	.word	0x2d2d2d2d
 8005f54:	67726174 	.word	0x67726174
 8005f58:	725f7465 	.word	0x725f7465
 8005f5c:	74657365 	.word	0x74657365
 8005f60:	00000000 	.word	0x00000000
 8005f64:	2d2d2d2d 	.word	0x2d2d2d2d
 8005f68:	67726174 	.word	0x67726174
 8005f6c:	735f7465 	.word	0x735f7465
 8005f70:	5f646565 	.word	0x5f646565
 8005f74:	646e6172 	.word	0x646e6172
 8005f78:	00006d6f 	.word	0x00006d6f
 8005f7c:	3c207477 	.word	0x3c207477
 8005f80:	00000000 	.word	0x00000000
 8005f84:	0000203e 	.word	0x0000203e
 8005f88:	70616568 	.word	0x70616568
 8005f8c:	61747320 	.word	0x61747320
 8005f90:	203a7472 	.word	0x203a7472
 8005f94:	00000000 	.word	0x00000000
 8005f98:	6e65202c 	.word	0x6e65202c
 8005f9c:	00203a64 	.word	0x00203a64
 8005fa0:	6973202c 	.word	0x6973202c
 8005fa4:	203a657a 	.word	0x203a657a
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	2c424b20 	.word	0x2c424b20
 8005fb0:	61747320 	.word	0x61747320
 8005fb4:	75206b63 	.word	0x75206b63
 8005fb8:	3a646573 	.word	0x3a646573
 8005fbc:	00000020 	.word	0x00000020
 8005fc0:	00424b20 	.word	0x00424b20
 8005fc4:	33323130 	.word	0x33323130
 8005fc8:	37363534 	.word	0x37363534
 8005fcc:	42413938 	.word	0x42413938
 8005fd0:	46454443 	.word	0x46454443
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <st_usbfs_v1_usb_driver>:
 8005fd8:	08001095 08001afd 08001b51 08001c69     ........Q...i...
 8005fe8:	08001cb1 08001db1 08001d71 08001df5     ........q.......
 8005ff8:	08001e7d 08001f31 00000000 00000000     }...1...........
 8006008:	00000000 202a2a2a 6f636f63 6120736f     ....*** cocoos a
 8006018:	72657373 61662074 64656c69               ssert failed .

08006026 <_ctype_>:
 8006026:	20202000 20202020 28282020 20282828     .         ((((( 
 8006036:	20202020 20202020 20202020 20202020                     
 8006046:	10108820 10101010 10101010 10101010      ...............
 8006056:	04040410 04040404 10040404 10101010     ................
 8006066:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8006076:	01010101 01010101 01010101 10101010     ................
 8006086:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8006096:	02020202 02020202 02020202 10101010     ................
 80060a6:	00000020 00000000 00000000 00000000      ...............
	...
 8006126:	00300000 002d0000 4f280000 66726576     ..0...-...(Overf
 8006136:	29776f6c 445b0000 50504f52 005d4445     low)..[DROPPED].
 8006146:	0a0d0000 2d2d0000 6c702d2d 6f667461     ......----platfo
 8006156:	735f6d72 70757465 6c610000 00203f6d     rm_setup..alm? .
 8006166:	6c700000 6f667461 735f6d72 74726174     ..platform_start
 8006176:	6d69745f 00007265 74720000 77612063     _timer....rtc aw
 8006186:	2e656b61 00002e2e 74720000 77612063     ake.......rtc aw
 8006196:	20656b61 00006b6f 2d2d0000 6f622d2d     ake ok....----bo
 80061a6:	6f6c746f 72656461 6f620000 745f746f     otloader..boot_t
 80061b6:	65677261 65675f74 65735f74 6c616972     arget_get_serial
 80061c6:	6d756e5f 00726562 73750000 65735f62     _number...usb_se
 80061d6:	65735f74 6c616972 6d756e5f 00726562     t_serial_number.
 80061e6:	73750000 65735f62 00707574 73750000     ..usb_setup...us
 80061f6:	70206462 696c6c6f 2e2e676e 6572002e     bd polling....re
 8006206:	72617473 676e6974 002e2e2e 6f640000     starting......do
 8006216:	0000656e 65720000 72617473 61632074     ne....restart ca
 8006226:	61626c6c 00006b63 6f740000 6962206f     llback....too bi
 8006236:	00002067 74610000 2d2d0020 61622d2d     g ....at .----ba
 8006246:	6f6c6573 72656461 202c0020 74736564     seloader ., dest
 8006256:	202c0020 20637273 202c0000 206e656c      ., src .., len 
 8006266:	202c0000 6e75662a 00002063 6f6e0000     .., *func ....no
 8006276:	6f662074 20646e75 202c0000 61646c6f     t found .., olda
 8006286:	00207070 202c0000 746f6f62 206e656c     pp ..., bootlen 
 8006296:	61620000 6f6c6573 72656461 65727020     ..baseloader pre
 80062a6:	77656976 206b6f20 202c0000 6c6c6163     view ok .., call
 80062b6:	74636120 206c6175 65736162 64616f6c      actual baseload
 80062c6:	2e2e7265 7773002e 68637469 73797320     er....switch sys
 80062d6:	206d6574 74636576 7420726f 656c6261     tem vector table
 80062e6:	61620020 6f6c6573 72656461 69616620      .baseloader fai
 80062f6:	2064656c 202c0000 6c696166 61620020     led .., fail .ba
 8006306:	6f6c6573 72656461 65727020 77656976     seloader preview
 8006316:	69616620 2064656c 3e2d0000 2a2a0020      failed ..-> .**
 8006326:	5245202a 3a524f52 616c4620 66206873     * ERROR: Flash f
 8006336:	656c6961 00002064 2a2a0000 45202a2a     ailed ....**** E
 8006346:	524f5252 6e49203a 696c6176 6c662064     RROR: Invalid fl
 8006356:	20687361 74697277 64202c65 00207473     ash write, dst .
	...

08006368 <infoUf2File>:
 8006368:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 8006378:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 8006388:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 8006398:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 80063a8:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 80063b8:	0a0d3076 00000000 5f544553 00524441     v0......SET_ADR.
 80063c8:	00203e3e 202a2a2a 4f525245 54203a52     >> .*** ERROR: T
 80063d8:	6d206f6f 20796e61 746e6f63 206c6f72     oo many control 
 80063e8:	6c6c6163 6b636162 00000073 202a2a2a     callbacks...*** 
 80063f8:	4f525245 54203a52 6d206f6f 20796e61     ERROR: Too many 
 8006408:	666e6f63 63206769 626c6c61 736b6361     config callbacks
 8006418:	00000000                                ....

0800641c <bos_descriptor>:
 800641c:	00000f05 00047402 00000020              .....t.. ...

08006428 <cdc_iface_assoc>:
 8006428:	02010b08 06010202                       ........

08006430 <cdcacm_functional_descriptors>:
 8006430:	10002405 01240501 24040200 24050002     .$....$....$...$
 8006440:	00020106                                ....

08006444 <comm_endp>:
 8006444:	03840507 00ff0010 00000000 00000000     ................

08006454 <comm_iface>:
 8006454:	00010409 01020201 00644407 00643008     .........Dd..0d.
 8006464:	00001308 00000000                       ........

0800646c <config>:
 800646c:	00000209 80000103 00658cfa 00000008     ..........e.....

0800647c <data_endp>:
 800647c:	02030507 00010040 00000000 07000000     ....@...........
 800648c:	40028305 00000100 00000000 00000000     ...@............

0800649c <data_iface>:
 800649c:	00020409 00000a02 00647c08 00000008     .........|d.....
	...

080064b4 <dev>:
 80064b4:	02100112 400102ef db421209 02010221     .......@..B.!...
 80064c4:	00000103 00202f20 70797420 00000020     .... / . typ ...
 80064d4:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 80064e4:	6469202c 00002078 4547202c 45445f54     , idx .., GET_DE
 80064f4:	00000053 5645445f 00000000 4746435f     S..._DEV...._CFG
 8006504:	00000000 5254535f 00000000 464e495f     ...._STR...._INF
 8006514:	00000000 504e455f 00000000 534f425f     ...._ENP...._BOS
 8006524:	00000000 4553202c 44415f54 20202052     ...., SET_ADR   
 8006534:	00000020 4553202c 46435f54 20202047      ..., SET_CFG   
 8006544:	00000020 0000002c 00207420 00206920      ...,... t . i .

08006554 <hf2_endp>:
 8006554:	02020507 00000040 00000000 07000000     ....@...........
 8006564:	40028205 00000000 00000000 00000000     ...@............

08006574 <hf2_iface>:
 8006574:	00000409 012aff02 00655409 00000008     ......*..Te.....
	...

0800658c <interfaces>:
 800658c:	00000000 00000001 00000000 08006574     ............te..
 800659c:	00000000 00000001 08006428 08006454     ........(d..Td..
 80065ac:	00000000 00000001 00000000 0800649c     .............d..
 80065bc:	202a2a2a 4f525245 73203a52 615f7465     *** ERROR: set_a
 80065cc:	65726767 65746167 6c61635f 6361626c     ggregate_callbac
 80065dc:	6166206b 64656c69 00000000 61766544     k failed....Deva
 80065ec:	6372616e 00007968 42504144 20746f6f     narchy..DAPBoot 
 80065fc:	20554644 746f6f42 64616f6c 00007265     DFU Bootloader..
 800660c:	42504144 20746f6f 00554644 65756c42     DAPBoot DFU.Blue
 800661c:	6c695020 534d206c 00000043 65756c42      Pill MSC...Blue
 800662c:	6c695020 6553206c 6c616972 726f5020      Pill Serial Por
 800663c:	00000074 65756c42 6c695020 4f43206c     t...Blue Pill CO
 800664c:	00004d4d 65756c42 6c695020 4144206c     MM..Blue Pill DA
 800665c:	00004154 65756c42 6c695020 4648206c     TA..Blue Pill HF
 800666c:	00000032 75736976 6c626c61 69706575     2...visualbluepi
 800667c:	672e6c6c 75687469 6f692e62 00000000     ll.github.io....
 800668c:	202a2a2a 5f627375 75746573 61662070     *** usb_setup fa
 800669c:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 80066ac:	6e206273 7573746f 69207070 7865646e     sb notsupp index
 80066bc:	00000020 75626577 00006c72 202a2a2a      ...weburl..*** 
 80066cc:	75626577 6e206273 7573746f 77207070     webusb notsupp w
 80066dc:	65646e49 00002078                       Index ..

080066e4 <webusb_platform_capability_descriptor>:
 80066e4:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 80066f4:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8006704:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 8006714:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8006724:	735f6273 70757465 69616620 0064656c     sb_setup failed.

08006734 <guid>:
 8006734:	00000092 00050100 00880001 00070000     ................
 8006744:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 8006754:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 8006764:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8006774:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8006784:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8006794:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 80067a4:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 80067b4:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 80067c4:	00000000                                ....

080067c8 <microsoft_platform_capability_descriptor>:
 80067c8:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 80067d8:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 80067e8:	00007365 696e6977 00000064 706e6977     es..winid...winp
 80067f8:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8006808:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 8006818:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 8006828:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 8006838:	0064656c                                led.

0800683c <winusb_string_descriptor>:
 800683c:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 800684c:	00000021 6f662820 64656372 00000029     !... (forced)...
 800685c:	20707061 73697865 00007374 20707061     app exists..app 
 800686c:	7373696d 20676e69 00000000 00203d20     missing .... = .
 800687c:	2d2d2d2d 65736162 64616f6c 6d207265     ----baseloader m
 800688c:	2065646f 726f6628 29646563 00000000     ode (forced)....
 800689c:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 80068ac:	2065646f 726f6628 29646563 00000000     ode (forced)....
 80068bc:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 80068cc:	2065646f 206f6e28 29707061 00000000     ode (no app)....
 80068dc:	2d2d2d2d 6c707061 74616369 206e6f69     ----application 
 80068ec:	65646f6d 00000000 746f6f62 70706120     mode....boot app
 80068fc:	00000000 746f6f62 73616220 616f6c65     ....boot baseloa
 800690c:	00726564 746f6f62 6f6f6220 616f6c74     der.boot bootloa
 800691c:	00726564 20746573 74736572 20747261     der.set restart 
 800692c:	6c6c6163 6b636162 00000020 202a2a2a     callback ...*** 
 800693c:	5f636463 75746573 61662070 64656c69     cdc_setup failed
 800694c:	00000000 6d6d6f63 00000000 202a2a2a     ....comm....*** 
 800695c:	61636463 635f6d63 72746e6f 6e206c6f     cdcacm_control n
 800696c:	7573746f 6c207070 5f656e69 69646f63     otsupp line_codi
 800697c:	0020676e 202a2a2a 61636463 735f6d63     ng .*** cdcacm_s
 800698c:	635f7465 69666e6f 61662067 64656c69     et_config failed
 800699c:	00000000                                ....

080069a0 <line_coding>:
 80069a0:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 80069b0:	00203a52                                R: .

080069b4 <bad_packet_message>:
 80069b4:	20646162 6b636170 00007465 21212120     bad packet.. !!!
 80069c4:	00000020 20326668 62203e3e 6e696e69      ...hf2 >> binin
 80069d4:	00006f66 20326668 69203e3e 006f666e     fo..hf2 >> info.
 80069e4:	74706d65 66682079 6e692032 00006f66     empty hf2 info..
 80069f4:	20326668 20667562 206f6f74 6c616d73     hf2 buf too smal
 8006a04:	0000006c 20326668 73203e3e 74726174     l...hf2 >> start
 8006a14:	00000000 20326668 66203e3e 6873616c     ....hf2 >> flash
 8006a24:	00000000 20326668 66203e3e 6873616c     ....hf2 >> flash
 8006a34:	00000020 646e6966 63657620 2e726f74      ...find vector.
 8006a44:	00002e2e 6e756f66 65762064 726f7463     ....found vector
 8006a54:	7061202c 00002070 6f62202c 7320746f     , app .., boot s
 8006a64:	20657a69 00000000 6162202c 73206573     ize ...., base s
 8006a74:	20657a69 00000000 202a2a2a 4f525245     ize ....*** ERRO
 8006a84:	49203a52 6c61766e 61206469 20726464     R: Invalid addr 
 8006a94:	00000000 746f7277 6f622065 6f6c746f     ....wrote bootlo
 8006aa4:	72656461 00000000 706d6f63 20657261     ader....compare 
 8006ab4:	746f6f62 64616f6c 2e2e7265 0000002e     bootloader......
 8006ac4:	746f6f62 64616f6c 69207265 746e6564     bootloader ident
 8006ad4:	6c616369 00000020 6973202c 0020657a     ical ..., size .
 8006ae4:	746f6f62 64616f6c 63207265 676e6168     bootloader chang
 8006af4:	00006465 79706f63 73616220 616f6c65     ed..copy baseloa
 8006b04:	20726564 00206f74 74736572 20747261     der to .restart 
 8006b14:	62206f74 6c657361 6564616f 00002072     to baseloader ..
 8006b24:	6162202c 656c6573 0000206e 202a2a2a     , baselen ..*** 
 8006b34:	4f525245 63203a52 6b636568 61746144     ERROR: checkData
 8006b44:	657a6953 69616620 0064656c 20326668     Size failed.hf2 
 8006b54:	61203e3e 00007070 20326668 62203e3e     >> app..hf2 >> b
 8006b64:	00746f6f 20326668 72203e3e 00646165     oot.hf2 >> read.
 8006b74:	20326668 75203e3e 6f6e6b6e 00206e77     hf2 >> unknown .
 8006b84:	20326668 20746573 666e6f63 00006769     hf2 set config..
 8006b94:	73616c66 6c612068 20776f6c 00000000     flash allow ....
 8006ba4:	206f7420 00000000 202a2a2a 5f326668      to ....*** hf2_
 8006bb4:	75746573 61662070 64656c69 00000000     setup failed....
 8006bc4:	20326668 00003c3c 20326668 00203c3c     hf2 <<..hf2 << .
 8006bd4:	202a2a2a 32627375 65735f31 6f635f74     *** usb21_set_co
 8006be4:	6769666e 69616620 0064656c 202a2a2a     nfig failed.*** 
 8006bf4:	32627375 65735f31 20707574 6c696166     usb21_setup fail
 8006c04:	00006465 202a2a2a 32627375 65645f31     ed..*** usb21_de
 8006c14:	69726373 726f7470 206f6e20 20736f62     scriptor no bos 
 8006c24:	00000000 00736f62                       ....bos.

Disassembly of section .text:

08007400 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8007400:	b538      	push	{r3, r4, r5, lr}
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
	while (dest < &_edata) {
 8007402:	4a36      	ldr	r2, [pc, #216]	; (80074dc <application_start+0xdc>)
 8007404:	4c36      	ldr	r4, [pc, #216]	; (80074e0 <application_start+0xe0>)
 8007406:	42a2      	cmp	r2, r4
 8007408:	d20f      	bcs.n	800742a <application_start+0x2a>
 800740a:	43d3      	mvns	r3, r2
	volatile uint32_t *dest = &_data;
 800740c:	4615      	mov	r5, r2
 800740e:	4423      	add	r3, r4
 8007410:	4934      	ldr	r1, [pc, #208]	; (80074e4 <application_start+0xe4>)
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	3304      	adds	r3, #4
	volatile uint32_t *src = &_data_loadaddr;
 8007418:	4608      	mov	r0, r1
 800741a:	4419      	add	r1, r3
		*dest = *src;
 800741c:	f850 4b04 	ldr.w	r4, [r0], #4
	while (dest < &_edata) {
 8007420:	4288      	cmp	r0, r1
		*dest = *src;
 8007422:	f845 4b04 	str.w	r4, [r5], #4
	while (dest < &_edata) {
 8007426:	d1f9      	bne.n	800741c <application_start+0x1c>
 8007428:	441a      	add	r2, r3
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 800742a:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <application_start+0xe8>)
 800742c:	429a      	cmp	r2, r3
 800742e:	d20d      	bcs.n	800744c <application_start+0x4c>
 8007430:	3303      	adds	r3, #3
 8007432:	1d11      	adds	r1, r2, #4
 8007434:	1a5b      	subs	r3, r3, r1
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	3304      	adds	r3, #4
 800743c:	2000      	movs	r0, #0
 800743e:	4413      	add	r3, r2
 8007440:	e000      	b.n	8007444 <application_start+0x44>
 8007442:	3104      	adds	r1, #4
 8007444:	4299      	cmp	r1, r3
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	460a      	mov	r2, r1
 800744a:	d1fa      	bne.n	8007442 <application_start+0x42>
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 800744c:	4d27      	ldr	r5, [pc, #156]	; (80074ec <application_start+0xec>)
 800744e:	4c28      	ldr	r4, [pc, #160]	; (80074f0 <application_start+0xf0>)
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b91b      	cbnz	r3, 800745c <application_start+0x5c>
 8007454:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <application_start+0xf4>)
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d00c      	beq.n	8007476 <application_start+0x76>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 800745c:	4826      	ldr	r0, [pc, #152]	; (80074f8 <application_start+0xf8>)
 800745e:	f7fc fe33 	bl	80040c8 <debug_print>
 8007462:	6828      	ldr	r0, [r5, #0]
 8007464:	f7fc fe78 	bl	8004158 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8007468:	4824      	ldr	r0, [pc, #144]	; (80074fc <application_start+0xfc>)
 800746a:	f7fc fe2d 	bl	80040c8 <debug_print>
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	f7fc fe72 	bl	8004158 <debug_printhex_unsigned>
 8007474:	e7fe      	b.n	8007474 <application_start+0x74>

	//  Call any init functions here.
	pre_main();
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007476:	4c22      	ldr	r4, [pc, #136]	; (8007500 <application_start+0x100>)
 8007478:	4922      	ldr	r1, [pc, #136]	; (8007504 <application_start+0x104>)
 800747a:	428c      	cmp	r4, r1
 800747c:	d20b      	bcs.n	8007496 <application_start+0x96>
 800747e:	43e3      	mvns	r3, r4
 8007480:	440b      	add	r3, r1
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	3304      	adds	r3, #4
 8007488:	4625      	mov	r5, r4
 800748a:	441c      	add	r4, r3
		(*fp)();
 800748c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007490:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007492:	42a5      	cmp	r5, r4
 8007494:	d1fa      	bne.n	800748c <application_start+0x8c>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007496:	4c1c      	ldr	r4, [pc, #112]	; (8007508 <application_start+0x108>)
 8007498:	491c      	ldr	r1, [pc, #112]	; (800750c <application_start+0x10c>)
 800749a:	428c      	cmp	r4, r1
 800749c:	d20b      	bcs.n	80074b6 <application_start+0xb6>
 800749e:	43e3      	mvns	r3, r4
 80074a0:	440b      	add	r3, r1
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	3304      	adds	r3, #4
 80074a8:	4625      	mov	r5, r4
 80074aa:	441c      	add	r4, r3
		(*fp)();
 80074ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b0:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80074b2:	42a5      	cmp	r5, r4
 80074b4:	d1fa      	bne.n	80074ac <application_start+0xac>
	}

	//  Call the application's entry point.
	main();
 80074b6:	f000 f82f 	bl	8007518 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80074ba:	4c15      	ldr	r4, [pc, #84]	; (8007510 <application_start+0x110>)
 80074bc:	4915      	ldr	r1, [pc, #84]	; (8007514 <application_start+0x114>)
 80074be:	428c      	cmp	r4, r1
 80074c0:	d20b      	bcs.n	80074da <application_start+0xda>
 80074c2:	43e3      	mvns	r3, r4
 80074c4:	440b      	add	r3, r1
 80074c6:	f023 0303 	bic.w	r3, r3, #3
 80074ca:	3304      	adds	r3, #4
 80074cc:	4625      	mov	r5, r4
 80074ce:	441c      	add	r4, r3
		(*fp)();
 80074d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d4:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80074d6:	42ac      	cmp	r4, r5
 80074d8:	d1fa      	bne.n	80074d0 <application_start+0xd0>
	}
}
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20001000 	.word	0x20001000
 80074e0:	2000100c 	.word	0x2000100c
 80074e4:	0800dae4 	.word	0x0800dae4
 80074e8:	20001678 	.word	0x20001678
 80074ec:	2000165c 	.word	0x2000165c
 80074f0:	20001004 	.word	0x20001004
 80074f4:	12345678 	.word	0x12345678
 80074f8:	0800d7e4 	.word	0x0800d7e4
 80074fc:	0800d80c 	.word	0x0800d80c
 8007500:	0800dad8 	.word	0x0800dad8
 8007504:	0800dad8 	.word	0x0800dad8
 8007508:	0800dad8 	.word	0x0800dad8
 800750c:	0800dae4 	.word	0x0800dae4
 8007510:	0800dae4 	.word	0x0800dae4
 8007514:	0800dae4 	.word	0x0800dae4

08007518 <main>:

#include "pxt.h"
#ifdef PXT_MAIN
PXT_MAIN
 8007518:	b508      	push	{r3, lr}
 800751a:	f002 fd9f 	bl	800a05c <_ZN3pxt5startEv>
 800751e:	2000      	movs	r0, #0
 8007520:	bd08      	pop	{r3, pc}
 8007522:	bf00      	nop
 8007524:	0000      	movs	r0, r0
	...

08007528 <_ZN6numops5mycvtEdPc>:
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (d < 0) {
 800752c:	2300      	movs	r3, #0
void mycvt(NUMBER d, char *buf) {
 800752e:	b083      	sub	sp, #12
 8007530:	4616      	mov	r6, r2
    if (d < 0) {
 8007532:	2200      	movs	r2, #0
void mycvt(NUMBER d, char *buf) {
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
    if (d < 0) {
 8007538:	f7fb fdca 	bl	80030d0 <__wrap___aeabi_dcmplt>
 800753c:	b120      	cbz	r0, 8007548 <_ZN6numops5mycvtEdPc+0x20>
        *buf++ = '-';
 800753e:	232d      	movs	r3, #45	; 0x2d
        d = -d;
 8007540:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        *buf++ = '-';
 8007544:	7033      	strb	r3, [r6, #0]
 8007546:	3601      	adds	r6, #1
    }

    if (!d) {
 8007548:	4628      	mov	r0, r5
 800754a:	4621      	mov	r1, r4
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	f7fb fda4 	bl	800309c <__wrap___aeabi_dcmpeq>
 8007554:	b130      	cbz	r0, 8007564 <_ZN6numops5mycvtEdPc+0x3c>
        *buf++ = '0';
 8007556:	2230      	movs	r2, #48	; 0x30
        *buf++ = 0;
 8007558:	2300      	movs	r3, #0
        *buf++ = '0';
 800755a:	7032      	strb	r2, [r6, #0]
        *buf++ = 0;
 800755c:	7073      	strb	r3, [r6, #1]
        *buf++ = 'e';
        itoa(e, buf);
    } else {
        *buf = 0;
    }
}
 800755e:	b003      	add	sp, #12
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pw = (int)log10(d);
 8007564:	4628      	mov	r0, r5
 8007566:	4621      	mov	r1, r4
 8007568:	f7fb fea0 	bl	80032ac <log10>
 800756c:	f7fb fe2e 	bl	80031cc <__wrap___aeabi_d2iz>
    if (0.000001 <= d && d < 1e21) {
 8007570:	a345      	add	r3, pc, #276	; (adr r3, 8007688 <_ZN6numops5mycvtEdPc+0x160>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
    int pw = (int)log10(d);
 8007576:	4607      	mov	r7, r0
 8007578:	9001      	str	r0, [sp, #4]
    if (0.000001 <= d && d < 1e21) {
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f7fb fdd9 	bl	8003134 <__wrap___aeabi_dcmpge>
 8007582:	2800      	cmp	r0, #0
 8007584:	d157      	bne.n	8007636 <_ZN6numops5mycvtEdPc+0x10e>
        d /= p10(pw);
 8007586:	9a01      	ldr	r2, [sp, #4]
 8007588:	2000      	movs	r0, #0
 800758a:	4943      	ldr	r1, [pc, #268]	; (8007698 <_ZN6numops5mycvtEdPc+0x170>)
 800758c:	f7fb fa22 	bl	80029d4 <__powidf2>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4628      	mov	r0, r5
 8007596:	4621      	mov	r1, r4
 8007598:	f7fb fd20 	bl	8002fdc <__wrap___aeabi_ddiv>
    int beforeDot = 1;
 800759c:	2701      	movs	r7, #1
        d /= p10(pw);
 800759e:	4605      	mov	r5, r0
 80075a0:	460c      	mov	r4, r1
    int sig = 0;
 80075a2:	f04f 0a00 	mov.w	sl, #0
        d = (d - c) * 10;
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8007698 <_ZN6numops5mycvtEdPc+0x170>
        int c = (int)d;
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7fb fe0b 	bl	80031cc <__wrap___aeabi_d2iz>
        *buf++ = '0' + c;
 80075b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80075ba:	7033      	strb	r3, [r6, #0]
        int c = (int)d;
 80075bc:	4683      	mov	fp, r0
        d = (d - c) * 10;
 80075be:	f7fb f94f 	bl	8002860 <__aeabi_i2d>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4628      	mov	r0, r5
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7fb fd4f 	bl	800306c <__wrap___aeabi_dsub>
 80075ce:	464b      	mov	r3, r9
 80075d0:	4642      	mov	r2, r8
 80075d2:	f7fb fd1b 	bl	800300c <__wrap___aeabi_dmul>
        if (--beforeDot == 0)
 80075d6:	3f01      	subs	r7, #1
            *buf++ = '.';
 80075d8:	bf08      	it	eq
 80075da:	232e      	moveq	r3, #46	; 0x2e
        d = (d - c) * 10;
 80075dc:	4605      	mov	r5, r0
            *buf++ = '.';
 80075de:	bf08      	it	eq
 80075e0:	7073      	strbeq	r3, [r6, #1]
        d = (d - c) * 10;
 80075e2:	460c      	mov	r4, r1
        *buf++ = '0' + c;
 80075e4:	bf14      	ite	ne
 80075e6:	3601      	addne	r6, #1
            *buf++ = '.';
 80075e8:	3602      	addeq	r6, #2
        if (sig || c)
 80075ea:	f1ba 0f00 	cmp.w	sl, #0
 80075ee:	d106      	bne.n	80075fe <_ZN6numops5mycvtEdPc+0xd6>
 80075f0:	f1bb 0f00 	cmp.w	fp, #0
 80075f4:	bf0c      	ite	eq
 80075f6:	46da      	moveq	sl, fp
 80075f8:	f04f 0a01 	movne.w	sl, #1
 80075fc:	e7d7      	b.n	80075ae <_ZN6numops5mycvtEdPc+0x86>
 80075fe:	f10a 0a01 	add.w	sl, sl, #1
    while (sig < 17 || beforeDot > 0) {
 8007602:	f1ba 0f10 	cmp.w	sl, #16
 8007606:	ddd2      	ble.n	80075ae <_ZN6numops5mycvtEdPc+0x86>
 8007608:	2f00      	cmp	r7, #0
 800760a:	dcd0      	bgt.n	80075ae <_ZN6numops5mycvtEdPc+0x86>
    while (*buf == '0')
 800760c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
    buf--;
 8007610:	3e01      	subs	r6, #1
    while (*buf == '0')
 8007612:	2b30      	cmp	r3, #48	; 0x30
 8007614:	d103      	bne.n	800761e <_ZN6numops5mycvtEdPc+0xf6>
 8007616:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 800761a:	2b30      	cmp	r3, #48	; 0x30
 800761c:	d0fb      	beq.n	8007616 <_ZN6numops5mycvtEdPc+0xee>
    if (e != 1) {
 800761e:	9801      	ldr	r0, [sp, #4]
    if (*buf == '.')
 8007620:	2b2e      	cmp	r3, #46	; 0x2e
        buf--;
 8007622:	bf08      	it	eq
 8007624:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    if (e != 1) {
 8007628:	2801      	cmp	r0, #1
 800762a:	d120      	bne.n	800766e <_ZN6numops5mycvtEdPc+0x146>
        *buf = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	7073      	strb	r3, [r6, #1]
}
 8007630:	b003      	add	sp, #12
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (0.000001 <= d && d < 1e21) {
 8007636:	a316      	add	r3, pc, #88	; (adr r3, 8007690 <_ZN6numops5mycvtEdPc+0x168>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	4628      	mov	r0, r5
 800763e:	4621      	mov	r1, r4
 8007640:	f7fb fd46 	bl	80030d0 <__wrap___aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	d09e      	beq.n	8007586 <_ZN6numops5mycvtEdPc+0x5e>
        if (pw > 0) {
 8007648:	2f00      	cmp	r7, #0
 800764a:	dd18      	ble.n	800767e <_ZN6numops5mycvtEdPc+0x156>
            d /= p10(pw);
 800764c:	463a      	mov	r2, r7
 800764e:	2000      	movs	r0, #0
 8007650:	4911      	ldr	r1, [pc, #68]	; (8007698 <_ZN6numops5mycvtEdPc+0x170>)
 8007652:	f7fb f9bf 	bl	80029d4 <__powidf2>
 8007656:	460b      	mov	r3, r1
 8007658:	4602      	mov	r2, r0
 800765a:	4621      	mov	r1, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f7fb fcbd 	bl	8002fdc <__wrap___aeabi_ddiv>
    int e = 1;
 8007662:	2301      	movs	r3, #1
            beforeDot = 1 + pw;
 8007664:	3701      	adds	r7, #1
            d /= p10(pw);
 8007666:	4605      	mov	r5, r0
 8007668:	460c      	mov	r4, r1
    int e = 1;
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	e799      	b.n	80075a2 <_ZN6numops5mycvtEdPc+0x7a>
        *buf++ = 'e';
 800766e:	2365      	movs	r3, #101	; 0x65
        itoa(e, buf);
 8007670:	1cb1      	adds	r1, r6, #2
        *buf++ = 'e';
 8007672:	7073      	strb	r3, [r6, #1]
}
 8007674:	b003      	add	sp, #12
 8007676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        itoa(e, buf);
 800767a:	f003 b9e3 	b.w	800aa44 <_ZN5codal4itoaEiPc>
    int beforeDot = 1;
 800767e:	2701      	movs	r7, #1
    int e = 1;
 8007680:	9701      	str	r7, [sp, #4]
 8007682:	e78e      	b.n	80075a2 <_ZN6numops5mycvtEdPc+0x7a>
 8007684:	f3af 8000 	nop.w
 8007688:	a0b5ed8d 	.word	0xa0b5ed8d
 800768c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007690:	d6e2ef50 	.word	0xd6e2ef50
 8007694:	444b1ae4 	.word	0x444b1ae4
 8007698:	40240000 	.word	0x40240000
 800769c:	00000000 	.word	0x00000000

080076a0 <_ZN5Math_12randomDoubleEv>:
//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
 80076a0:	b570      	push	{r4, r5, r6, lr}
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a6:	f000 fb9d 	bl	8007de4 <_ZN3pxt9getRandomEj>
 80076aa:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80076ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80076b0:	f000 fb98 	bl	8007de4 <_ZN3pxt9getRandomEj>
 80076b4:	4606      	mov	r6, r0
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7fb f8c2 	bl	8002840 <__aeabi_ui2d>
 80076bc:	2200      	movs	r2, #0
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <_ZN5Math_12randomDoubleEv+0x50>)
 80076c0:	f7fb fca4 	bl	800300c <__wrap___aeabi_dmul>
 80076c4:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80076c6:	4630      	mov	r0, r6
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 80076c8:	460d      	mov	r5, r1
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 80076ca:	f7fb f8b9 	bl	8002840 <__aeabi_ui2d>
 80076ce:	a306      	add	r3, pc, #24	; (adr r3, 80076e8 <_ZN5Math_12randomDoubleEv+0x48>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7fb fc82 	bl	8002fdc <__wrap___aeabi_ddiv>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7fb fcac 	bl	800303c <__wrap___aeabi_dadd>
}
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	bf00      	nop
 80076e8:	dfe00000 	.word	0xdfe00000
 80076ec:	436fffff 	.word	0x436fffff
 80076f0:	3df00000 	.word	0x3df00000

080076f4 <_ZN5Math_4log2EPN3pxt12TValueStructE>:
#define SINGLE(op) return fromDouble(::op(toDouble(x)));

namespace Math_ {

//
TNumber log2(TNumber x){SINGLE(log2)}
 80076f4:	b508      	push	{r3, lr}
 80076f6:	f000 ff39 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80076fa:	f7fb fdc3 	bl	8003284 <log2>
 80076fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007702:	f000 bd01 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8007706:	bf00      	nop

08007708 <_ZN5Math_3expEPN3pxt12TValueStructE>:
//
TNumber exp(TNumber x){SINGLE(exp)}
 8007708:	b508      	push	{r3, lr}
 800770a:	f000 ff2f 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800770e:	f7fb fdab 	bl	8003268 <exp>
 8007712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007716:	f000 bcf7 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800771a:	bf00      	nop

0800771c <_ZN5Math_4tanhEPN3pxt12TValueStructE>:
//
TNumber tanh(TNumber x){SINGLE(tanh)}
 800771c:	b508      	push	{r3, lr}
 800771e:	f000 ff25 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007722:	f7fb ffc5 	bl	80036b0 <tanh>
 8007726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800772a:	f000 bced 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800772e:	bf00      	nop

08007730 <_ZN5Math_4sinhEPN3pxt12TValueStructE>:
//
TNumber sinh(TNumber x){SINGLE(sinh)}
 8007730:	b508      	push	{r3, lr}
 8007732:	f000 ff1b 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007736:	f7fb ff15 	bl	8003564 <sinh>
 800773a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800773e:	f000 bce3 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8007742:	bf00      	nop

08007744 <_ZN5Math_4coshEPN3pxt12TValueStructE>:
//
TNumber cosh(TNumber x){SINGLE(cosh)}
 8007744:	b508      	push	{r3, lr}
 8007746:	f000 ff11 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800774a:	f7fb ff5f 	bl	800360c <cosh>
 800774e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007752:	f000 bcd9 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8007756:	bf00      	nop

08007758 <_ZN5Math_5atanhEPN3pxt12TValueStructE>:
//
TNumber atanh(TNumber x){SINGLE(atanh)}
 8007758:	b508      	push	{r3, lr}
 800775a:	f000 ff07 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800775e:	f7fc f8ab 	bl	80038b8 <atanh>
 8007762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007766:	f000 bccf 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800776a:	bf00      	nop

0800776c <_ZN5Math_5asinhEPN3pxt12TValueStructE>:
//
TNumber asinh(TNumber x){SINGLE(asinh)}
 800776c:	b508      	push	{r3, lr}
 800776e:	f000 fefd 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007772:	f7fb fff9 	bl	8003768 <asinh>
 8007776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800777a:	f000 bcc5 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800777e:	bf00      	nop

08007780 <_ZN5Math_5acoshEPN3pxt12TValueStructE>:
//
TNumber acosh(TNumber x){SINGLE(acosh)}
 8007780:	b508      	push	{r3, lr}
 8007782:	f000 fef3 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8007786:	f7fc f841 	bl	800380c <acosh>
 800778a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800778e:	f000 bcbb 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8007792:	bf00      	nop

08007794 <_ZN3pxtL9readBytesEPhS0_ibi>:
    }

    return 0;
}

static int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	9e04      	ldr	r6, [sp, #16]
 8007798:	460c      	mov	r4, r1
    if (szLeft < length) {
 800779a:	4296      	cmp	r6, r2
 800779c:	db24      	blt.n	80077e8 <_ZN3pxtL9readBytesEPhS0_ibi+0x54>
 800779e:	4615      	mov	r5, r2
        memset(dst, 0, length);
        return -1;
    }

    if (swapBytes) {
 80077a0:	b96b      	cbnz	r3, 80077be <_ZN3pxtL9readBytesEPhS0_ibi+0x2a>
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
 80077a2:	2a04      	cmp	r2, #4
 80077a4:	d019      	beq.n	80077da <_ZN3pxtL9readBytesEPhS0_ibi+0x46>
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)src & 1) == 0)
 80077a6:	2a02      	cmp	r2, #2
 80077a8:	d102      	bne.n	80077b0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
 80077aa:	f010 0301 	ands.w	r3, r0, #1
 80077ae:	d010      	beq.n	80077d2 <_ZN3pxtL9readBytesEPhS0_ibi+0x3e>
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 80077b0:	4601      	mov	r1, r0
 80077b2:	462a      	mov	r2, r5
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7fc facf 	bl	8003d58 <memcpy>
 80077ba:	2000      	movs	r0, #0
    }

    return 0;
}
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t *p = src + length;
 80077be:	4410      	add	r0, r2
 80077c0:	440d      	add	r5, r1
            dst[i] = *--p;
 80077c2:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 80077c6:	f801 3b01 	strb.w	r3, [r1], #1
        for (int i = 0; i < length; ++i)
 80077ca:	428d      	cmp	r5, r1
 80077cc:	d1f9      	bne.n	80077c2 <_ZN3pxtL9readBytesEPhS0_ibi+0x2e>
    return 0;
 80077ce:	2000      	movs	r0, #0
}
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
            *(uint16_t *)dst = *(uint16_t *)src;
 80077d2:	8802      	ldrh	r2, [r0, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	800a      	strh	r2, [r1, #0]
}
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
        if (length == 4 && ((uint32_t)src & 3) == 0)
 80077da:	f010 0303 	ands.w	r3, r0, #3
 80077de:	d1e7      	bne.n	80077b0 <_ZN3pxtL9readBytesEPhS0_ibi+0x1c>
            *(uint32_t *)dst = *(uint32_t *)src;
 80077e0:	6802      	ldr	r2, [r0, #0]
    return 0;
 80077e2:	4618      	mov	r0, r3
            *(uint32_t *)dst = *(uint32_t *)src;
 80077e4:	600a      	str	r2, [r1, #0]
}
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
        memset(dst, 0, length);
 80077e8:	4608      	mov	r0, r1
 80077ea:	2100      	movs	r1, #0
 80077ec:	f7fc fafc 	bl	8003de8 <memset>
        return -1;
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	bf00      	nop

080077f8 <_ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE>:
}
 80077f8:	3008      	adds	r0, #8
 80077fa:	4770      	bx	lr

080077fc <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi>:
    if (buf && 0 <= off && off < buf->length)
 80077fc:	b140      	cbz	r0, 8007810 <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x14>
 80077fe:	2900      	cmp	r1, #0
 8007800:	db05      	blt.n	800780e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
 8007802:	6843      	ldr	r3, [r0, #4]
 8007804:	428b      	cmp	r3, r1
 8007806:	dd02      	ble.n	800780e <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x12>
        return buf->data[off];
 8007808:	4408      	add	r0, r1
 800780a:	7a00      	ldrb	r0, [r0, #8]
 800780c:	4770      	bx	lr
    return 0;
 800780e:	2000      	movs	r0, #0
}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii>:
    if (buf && 0 <= off && off < buf->length)
 8007814:	b130      	cbz	r0, 8007824 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 8007816:	2900      	cmp	r1, #0
 8007818:	db04      	blt.n	8007824 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 800781a:	6843      	ldr	r3, [r0, #4]
 800781c:	428b      	cmp	r3, r1
        buf->data[off] = v;
 800781e:	bfc4      	itt	gt
 8007820:	1840      	addgt	r0, r0, r1
 8007822:	7202      	strbgt	r2, [r0, #8]
}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>:
int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
 800782a:	2b00      	cmp	r3, #0
 800782c:	db20      	blt.n	8007870 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 800782e:	2900      	cmp	r1, #0
 8007830:	db1e      	blt.n	8007870 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
 8007832:	6846      	ldr	r6, [r0, #4]
 8007834:	428e      	cmp	r6, r1
 8007836:	db1b      	blt.n	8007870 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    length = min(src->length - srcOffset, buf->length - dstOffset);
 8007838:	6854      	ldr	r4, [r2, #4]
 800783a:	1a76      	subs	r6, r6, r1
 800783c:	1ae5      	subs	r5, r4, r3
 800783e:	42b5      	cmp	r5, r6
 8007840:	bfa8      	it	ge
 8007842:	4635      	movge	r5, r6
    if (length < 0)
 8007844:	2d00      	cmp	r5, #0
 8007846:	db13      	blt.n	8007870 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x48>
    if (buf == src) {
 8007848:	4282      	cmp	r2, r0
 800784a:	f102 0708 	add.w	r7, r2, #8
 800784e:	460c      	mov	r4, r1
 8007850:	f100 0608 	add.w	r6, r0, #8
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8007854:	462a      	mov	r2, r5
    if (buf == src) {
 8007856:	d005      	beq.n	8007864 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x3c>
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
 8007858:	18f9      	adds	r1, r7, r3
 800785a:	1930      	adds	r0, r6, r4
 800785c:	f7fc fa7c 	bl	8003d58 <memcpy>
    return 0;
 8007860:	2000      	movs	r0, #0
}
 8007862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8007864:	18f1      	adds	r1, r6, r3
 8007866:	1938      	adds	r0, r7, r4
 8007868:	f7fc faa5 	bl	8003db6 <memmove>
    return 0;
 800786c:	2000      	movs	r0, #0
}
 800786e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 8007870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007876:	bf00      	nop

08007878 <_ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE>:
}
 8007878:	6840      	ldr	r0, [r0, #4]
 800787a:	4770      	bx	lr

0800787c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>:
void fill(Buffer buf, int value, int offset = 0, int length = -1) {
 800787c:	b410      	push	{r4}
    if (offset < 0 || offset > buf->length)
 800787e:	1e14      	subs	r4, r2, #0
 8007880:	db0f      	blt.n	80078a2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8007882:	6842      	ldr	r2, [r0, #4]
 8007884:	42a2      	cmp	r2, r4
 8007886:	db0c      	blt.n	80078a2 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8007888:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800788c:	bf28      	it	cs
 800788e:	4613      	movcs	r3, r2
    length = min(length, buf->length - offset);
 8007890:	1b12      	subs	r2, r2, r4
    memset(buf->data + offset, value, length);
 8007892:	3008      	adds	r0, #8
 8007894:	429a      	cmp	r2, r3
 8007896:	4420      	add	r0, r4
 8007898:	bfa8      	it	ge
 800789a:	461a      	movge	r2, r3
}
 800789c:	bc10      	pop	{r4}
    memset(buf->data + offset, value, length);
 800789e:	f7fc baa3 	b.w	8003de8 <memset>
}
 80078a2:	bc10      	pop	{r4}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop

080078a8 <_ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii>:
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
 80078a8:	b410      	push	{r4}
    offset = min((int)buf->length, offset);
 80078aa:	6843      	ldr	r3, [r0, #4]
    return mkBuffer(buf->data + offset, length);
 80078ac:	3008      	adds	r0, #8
 80078ae:	428b      	cmp	r3, r1
 80078b0:	461c      	mov	r4, r3
 80078b2:	bfa8      	it	ge
 80078b4:	460c      	movge	r4, r1
        length = buf->length;
 80078b6:	ea32 0122 	bics.w	r1, r2, r2, asr #32
 80078ba:	bf28      	it	cs
 80078bc:	4619      	movcs	r1, r3
    length = min(length, buf->length - offset);
 80078be:	1b1b      	subs	r3, r3, r4
    return mkBuffer(buf->data + offset, length);
 80078c0:	4299      	cmp	r1, r3
 80078c2:	4420      	add	r0, r4
 80078c4:	bfa8      	it	ge
 80078c6:	4619      	movge	r1, r3
}
 80078c8:	bc10      	pop	{r4}
    return mkBuffer(buf->data + offset, length);
 80078ca:	f000 ba69 	b.w	8007da0 <_ZN3pxt8mkBufferEPKhi>
 80078ce:	bf00      	nop

080078d0 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii>:
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80078d0:	b570      	push	{r4, r5, r6, lr}
    if (length < 0)
 80078d2:	2b00      	cmp	r3, #0
        length = buf->length - start;
 80078d4:	bfb8      	it	lt
 80078d6:	6843      	ldrlt	r3, [r0, #4]
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80078d8:	460e      	mov	r6, r1
        length = buf->length - start;
 80078da:	bfb8      	it	lt
 80078dc:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 80078de:	2a00      	cmp	r2, #0
 80078e0:	db20      	blt.n	8007924 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80078e2:	6844      	ldr	r4, [r0, #4]
 80078e4:	1899      	adds	r1, r3, r2
 80078e6:	42a1      	cmp	r1, r4
 80078e8:	dc1c      	bgt.n	8007924 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80078ea:	4291      	cmp	r1, r2
 80078ec:	db1a      	blt.n	8007924 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80078ee:	b1cb      	cbz	r3, 8007924 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
        offset == 0 || offset == INT_MIN)
 80078f0:	f036 4100 	bics.w	r1, r6, #2147483648	; 0x80000000
 80078f4:	d016      	beq.n	8007924 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
    if (offset <= -length || offset >= length) {
 80078f6:	4259      	negs	r1, r3
 80078f8:	42b1      	cmp	r1, r6
 80078fa:	da14      	bge.n	8007926 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
 80078fc:	42b3      	cmp	r3, r6
 80078fe:	dd12      	ble.n	8007926 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
    uint8_t *data = buf->data + start;
 8007900:	3008      	adds	r0, #8
    if (offset < 0) {
 8007902:	2e00      	cmp	r6, #0
    uint8_t *data = buf->data + start;
 8007904:	eb00 0502 	add.w	r5, r0, r2
    if (offset < 0) {
 8007908:	db15      	blt.n	8007936 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x66>
        length = length - offset;
 800790a:	1b9c      	subs	r4, r3, r6
        memmove(data, data + offset, length);
 800790c:	4622      	mov	r2, r4
 800790e:	19a9      	adds	r1, r5, r6
 8007910:	4628      	mov	r0, r5
 8007912:	f7fc fa50 	bl	8003db6 <memmove>
        memset(data + length, 0, offset);
 8007916:	4632      	mov	r2, r6
 8007918:	1928      	adds	r0, r5, r4
 800791a:	2100      	movs	r1, #0
}
 800791c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data + length, 0, offset);
 8007920:	f7fc ba62 	b.w	8003de8 <memset>
}
 8007924:	bd70      	pop	{r4, r5, r6, pc}
        fill(buf, 0);
 8007926:	2200      	movs	r2, #0
}
 8007928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fill(buf, 0);
 800792c:	4611      	mov	r1, r2
 800792e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007932:	f7ff bfa3 	b.w	800787c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>
        offset = -offset;
 8007936:	4274      	negs	r4, r6
        memmove(data + offset, data, length - offset);
 8007938:	199a      	adds	r2, r3, r6
 800793a:	4629      	mov	r1, r5
 800793c:	1928      	adds	r0, r5, r4
 800793e:	f7fc fa3a 	bl	8003db6 <memmove>
        memset(data, 0, offset);
 8007942:	4622      	mov	r2, r4
 8007944:	4628      	mov	r0, r5
}
 8007946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(data, 0, offset);
 800794a:	2100      	movs	r1, #0
 800794c:	f7fc ba4c 	b.w	8003de8 <memset>

08007950 <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE>:
String toHex(Buffer buf) {
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	4605      	mov	r5, r0
    auto res = mkString(NULL, buf->length * 2);
 8007954:	6841      	ldr	r1, [r0, #4]
 8007956:	2000      	movs	r0, #0
 8007958:	0049      	lsls	r1, r1, #1
 800795a:	f000 f9fb 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
    for (int i = 0; i < buf->length; ++i) {
 800795e:	686b      	ldr	r3, [r5, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd12      	ble.n	800798a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3a>
 8007964:	4602      	mov	r2, r0
 8007966:	4e09      	ldr	r6, [pc, #36]	; (800798c <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3c>)
 8007968:	1deb      	adds	r3, r5, #7
        res->data[i << 1] = hex[buf->data[i] >> 4];
 800796a:	785c      	ldrb	r4, [r3, #1]
 800796c:	1f99      	subs	r1, r3, #6
 800796e:	1124      	asrs	r4, r4, #4
 8007970:	5d34      	ldrb	r4, [r6, r4]
 8007972:	1b49      	subs	r1, r1, r5
 8007974:	7194      	strb	r4, [r2, #6]
        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];
 8007976:	785c      	ldrb	r4, [r3, #1]
 8007978:	3202      	adds	r2, #2
 800797a:	f004 040f 	and.w	r4, r4, #15
 800797e:	5d34      	ldrb	r4, [r6, r4]
 8007980:	3301      	adds	r3, #1
 8007982:	7154      	strb	r4, [r2, #5]
    for (int i = 0; i < buf->length; ++i) {
 8007984:	686c      	ldr	r4, [r5, #4]
 8007986:	428c      	cmp	r4, r1
 8007988:	dcef      	bgt.n	800796a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x1a>
}
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	0800d0f4 	.word	0x0800d0f4

08007990 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii>:
    if (length < 0)
 8007990:	2b00      	cmp	r3, #0
        length = buf->length - start;
 8007992:	bfbc      	itt	lt
 8007994:	6843      	ldrlt	r3, [r0, #4]
 8007996:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8007998:	2a00      	cmp	r2, #0
 800799a:	db2f      	blt.n	80079fc <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6c>
void rotate(Buffer buf, int offset, int start = 0, int length = -1) {
 800799c:	b470      	push	{r4, r5, r6}
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 800799e:	6845      	ldr	r5, [r0, #4]
 80079a0:	189c      	adds	r4, r3, r2
 80079a2:	42ac      	cmp	r4, r5
 80079a4:	dc28      	bgt.n	80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80079a6:	4294      	cmp	r4, r2
 80079a8:	db26      	blt.n	80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80079aa:	b32b      	cbz	r3, 80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        offset == 0 || offset == INT_MIN)
 80079ac:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80079b0:	d022      	beq.n	80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
    if (offset < 0)
 80079b2:	2900      	cmp	r1, #0
        offset += length << 8; // try to make it positive
 80079b4:	bfb8      	it	lt
 80079b6:	eb01 2103 	addlt.w	r1, r1, r3, lsl #8
    offset %= length;
 80079ba:	fb91 f4f3 	sdiv	r4, r1, r3
 80079be:	fb03 1114 	mls	r1, r3, r4, r1
    uint8_t *data = buf->data + start;
 80079c2:	3008      	adds	r0, #8
    if (offset < 0)
 80079c4:	2900      	cmp	r1, #0
        offset += length;
 80079c6:	bfb8      	it	lt
 80079c8:	18c9      	addlt	r1, r1, r3
    uint8_t *data = buf->data + start;
 80079ca:	4402      	add	r2, r0
    uint8_t *n_first = data + offset;
 80079cc:	4411      	add	r1, r2
    while (first != next) {
 80079ce:	428a      	cmp	r2, r1
    uint8_t *last = data + length;
 80079d0:	4413      	add	r3, r2
    while (first != next) {
 80079d2:	d011      	beq.n	80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80079d4:	460c      	mov	r4, r1
 80079d6:	e004      	b.n	80079e2 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x52>
        } else if (first == n_first) {
 80079d8:	428a      	cmp	r2, r1
 80079da:	4604      	mov	r4, r0
 80079dc:	d00f      	beq.n	80079fe <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6e>
    while (first != next) {
 80079de:	4294      	cmp	r4, r2
 80079e0:	d00a      	beq.n	80079f8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        *first++ = *next;
 80079e2:	4620      	mov	r0, r4
 80079e4:	f810 6b01 	ldrb.w	r6, [r0], #1
        uint8_t tmp = *first;
 80079e8:	7815      	ldrb	r5, [r2, #0]
        if (next == last) {
 80079ea:	4283      	cmp	r3, r0
        *first++ = *next;
 80079ec:	f802 6b01 	strb.w	r6, [r2], #1
        *next++ = tmp;
 80079f0:	7025      	strb	r5, [r4, #0]
        if (next == last) {
 80079f2:	d1f1      	bne.n	80079d8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x48>
 80079f4:	460c      	mov	r4, r1
 80079f6:	e7f2      	b.n	80079de <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
}
 80079f8:	bc70      	pop	{r4, r5, r6}
 80079fa:	4770      	bx	lr
 80079fc:	4770      	bx	lr
        } else if (first == n_first) {
 80079fe:	4601      	mov	r1, r0
 8007a00:	e7ed      	b.n	80079de <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
 8007a02:	bf00      	nop

08007a04 <_ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_>:
void write(Buffer buf, int dstOffset, Buffer src) {
 8007a04:	b510      	push	{r4, lr}
    writeBuffer(buf, dstOffset, src, 0, -1);
 8007a06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
void write(Buffer buf, int dstOffset, Buffer src) {
 8007a0a:	b082      	sub	sp, #8
    writeBuffer(buf, dstOffset, src, 0, -1);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9400      	str	r4, [sp, #0]
 8007a10:	f7ff ff0a 	bl	8007828 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>
}
 8007a14:	b002      	add	sp, #8
 8007a16:	bd10      	pop	{r4, pc}

08007a18 <_ZN7control12createBufferEi>:
    return mkBuffer(NULL, size);
 8007a18:	4601      	mov	r1, r0
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f000 b9c0 	b.w	8007da0 <_ZN3pxt8mkBufferEPKhi>

08007a20 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>:

void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8007a20:	b530      	push	{r4, r5, lr}
#define WRITEBYTES(isz, swap, toInt)                                                               \
    isz = toInt(value);                                                                            \
    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \
    break

    switch (format) {
 8007a22:	3a01      	subs	r2, #1
void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 8007a24:	b083      	sub	sp, #12
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
    switch (format) {
 8007a2a:	2a0f      	cmp	r2, #15
 8007a2c:	d813      	bhi.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8007a2e:	e8df f002 	tbb	[pc, r2]
 8007a32:	1414      	.short	0x1414
 8007a34:	14610808 	.word	0x14610808
 8007a38:	731b1b14 	.word	0x731b1b14
 8007a3c:	6754254a 	.word	0x6754254a
 8007a40:	385a      	.short	0x385a
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fe26 	bl	8008694 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007a48:	2d01      	cmp	r5, #1
 8007a4a:	dd04      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, false, toInt);
 8007a4c:	b280      	uxth	r0, r0
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
 8007a4e:	07e2      	lsls	r2, r4, #31
            *(uint16_t *)dst = *(uint16_t *)src;
 8007a50:	bf54      	ite	pl
 8007a52:	8020      	strhpl	r0, [r4, #0]
            memcpy(dst, src, length);
 8007a54:	8020      	strhmi	r0, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8007a56:	b003      	add	sp, #12
 8007a58:	bd30      	pop	{r4, r5, pc}
        WRITEBYTES(u8, true, toInt);
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fe1a 	bl	8008694 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	ddf8      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u8, true, toInt);
 8007a64:	7020      	strb	r0, [r4, #0]
 8007a66:	e7f6      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u16, true, toInt);
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fe13 	bl	8008694 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007a6e:	2d01      	cmp	r5, #1
 8007a70:	ddf1      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8007a72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007a76:	7060      	strb	r0, [r4, #1]
 8007a78:	7023      	strb	r3, [r4, #0]
 8007a7a:	e7ec      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, true, toUInt);
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fda5 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007a82:	2d03      	cmp	r5, #3
        WRITEBYTES(u32, true, toUInt);
 8007a84:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8007a86:	dde6      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            *--p = src[i];
 8007a88:	f89d 0000 	ldrb.w	r0, [sp]
 8007a8c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8007a90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007a94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a98:	70e0      	strb	r0, [r4, #3]
 8007a9a:	70a1      	strb	r1, [r4, #2]
 8007a9c:	7062      	strb	r2, [r4, #1]
 8007a9e:	7023      	strb	r3, [r4, #0]
 8007aa0:	e7d9      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, true, toDouble);
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fd62 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 8007aa8:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, true, toDouble);
 8007aaa:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 8007aae:	ddd2      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8007ab0:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
        uint8_t *p = dst + length;
 8007ab4:	f104 0308 	add.w	r3, r4, #8
            *--p = src[i];
 8007ab8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007abc:	f803 1d01 	strb.w	r1, [r3, #-1]!
        for (int i = 0; i < length; ++i)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d1f9      	bne.n	8007ab8 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x98>
 8007ac4:	e7c7      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(u32, false, toUInt);
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fd80 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007acc:	2d03      	cmp	r5, #3
 8007ace:	ddc2      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        if (length == 4 && ((uint32_t)dst & 3) == 0)
 8007ad0:	07a3      	lsls	r3, r4, #30
            *(uint32_t *)dst = *(uint32_t *)src;
 8007ad2:	bf0c      	ite	eq
 8007ad4:	6020      	streq	r0, [r4, #0]
            memcpy(dst, src, length);
 8007ad6:	6020      	strne	r0, [r4, #0]
 8007ad8:	e7bd      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, false, toFloat);
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 fe6c 	bl	80087b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 8007ae0:	2d03      	cmp	r5, #3
 8007ae2:	dcf5      	bgt.n	8007ad0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 8007ae4:	e7b7      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f32, true, toFloat);
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fe66 	bl	80087b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>
    if (szLeft < length) {
 8007aec:	2d03      	cmp	r5, #3
        WRITEBYTES(f32, true, toFloat);
 8007aee:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8007af0:	dcca      	bgt.n	8007a88 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 8007af2:	e7b0      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, false, toInt);
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fdcd 	bl	8008694 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007afa:	2d03      	cmp	r5, #3
 8007afc:	dce8      	bgt.n	8007ad0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xb0>
 8007afe:	e7aa      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(f64, false, toDouble);
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fd33 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
    if (szLeft < length) {
 8007b06:	2d07      	cmp	r5, #7
        WRITEBYTES(f64, false, toDouble);
 8007b08:	e9cd 0100 	strd	r0, r1, [sp]
    if (szLeft < length) {
 8007b0c:	dda3      	ble.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
            memcpy(dst, src, length);
 8007b0e:	466b      	mov	r3, sp
 8007b10:	cb03      	ldmia	r3!, {r0, r1}
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	6061      	str	r1, [r4, #4]
 8007b16:	e79e      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
        WRITEBYTES(i32, true, toInt);
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fdbb 	bl	8008694 <_ZN3pxt5toIntEPNS_12TValueStructE>
    if (szLeft < length) {
 8007b1e:	2d03      	cmp	r5, #3
        WRITEBYTES(i32, true, toInt);
 8007b20:	9000      	str	r0, [sp, #0]
    if (szLeft < length) {
 8007b22:	dcb1      	bgt.n	8007a88 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 8007b24:	e797      	b.n	8007a56 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x36>
 8007b26:	bf00      	nop

08007b28 <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE>:
void setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {
 8007b28:	b430      	push	{r4, r5}
    if (offset < 0)
 8007b2a:	1e14      	subs	r4, r2, #0
 8007b2c:	db07      	blt.n	8007b3e <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE+0x16>
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 8007b2e:	6845      	ldr	r5, [r0, #4]
 8007b30:	3008      	adds	r0, #8
 8007b32:	460a      	mov	r2, r1
 8007b34:	4420      	add	r0, r4
 8007b36:	1b29      	subs	r1, r5, r4
}
 8007b38:	bc30      	pop	{r4, r5}
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 8007b3a:	f7ff bf71 	b.w	8007a20 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>
}
 8007b3e:	bc30      	pop	{r4, r5}
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop

08007b44 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>:

TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8007b44:	b500      	push	{lr}
// Assume little endian
#define READBYTES(isz, swap, conv)                                                                 \
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
 8007b46:	3a01      	subs	r2, #1
TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8007b48:	b085      	sub	sp, #20
    switch (format) {
 8007b4a:	2a0f      	cmp	r2, #15
 8007b4c:	f200 8088 	bhi.w	8007c60 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x11c>
 8007b50:	e8df f002 	tbb	[pc, r2]
 8007b54:	3d302316 	.word	0x3d302316
 8007b58:	5c59564a 	.word	0x5c59564a
 8007b5c:	7165625f 	.word	0x7165625f
 8007b60:	08838074 	.word	0x08838074
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
    case NumberFormat::Float64LE:
        READBYTES(f64, false, fromDouble);
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
 8007b64:	2301      	movs	r3, #1
 8007b66:	9100      	str	r1, [sp, #0]
 8007b68:	2208      	movs	r2, #8
 8007b6a:	eb0d 0102 	add.w	r1, sp, r2
 8007b6e:	f7ff fe11 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b76:	f000 fac7 	bl	8008108 <_ZN3pxt10fromDoubleEd>
    }

    return 0;
}
 8007b7a:	b005      	add	sp, #20
 8007b7c:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, false, fromInt);
 8007b80:	2300      	movs	r3, #0
 8007b82:	9100      	str	r1, [sp, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	a902      	add	r1, sp, #8
 8007b88:	f7ff fe04 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007b8c:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8007b90:	f000 fb7e 	bl	8008290 <_ZN3pxt7fromIntEi>
}
 8007b94:	b005      	add	sp, #20
 8007b96:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u8, false, fromInt);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9100      	str	r1, [sp, #0]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	a902      	add	r1, sp, #8
 8007ba2:	f7ff fdf7 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007ba6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8007baa:	f000 fb71 	bl	8008290 <_ZN3pxt7fromIntEi>
}
 8007bae:	b005      	add	sp, #20
 8007bb0:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i16, false, fromInt);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9100      	str	r1, [sp, #0]
        READBYTES(i16, true, fromInt);
 8007bb8:	2202      	movs	r2, #2
 8007bba:	a902      	add	r1, sp, #8
 8007bbc:	f7ff fdea 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007bc0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8007bc4:	f000 fb64 	bl	8008290 <_ZN3pxt7fromIntEi>
}
 8007bc8:	b005      	add	sp, #20
 8007bca:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u16, false, fromInt);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9100      	str	r1, [sp, #0]
        READBYTES(u16, true, fromInt);
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	a902      	add	r1, sp, #8
 8007bd6:	f7ff fddd 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007bda:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8007bde:	f000 fb57 	bl	8008290 <_ZN3pxt7fromIntEi>
}
 8007be2:	b005      	add	sp, #20
 8007be4:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i32, false, fromInt);
 8007be8:	2300      	movs	r3, #0
 8007bea:	9100      	str	r1, [sp, #0]
        READBYTES(i32, true, fromInt);
 8007bec:	2204      	movs	r2, #4
 8007bee:	a902      	add	r1, sp, #8
 8007bf0:	f7ff fdd0 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007bf4:	9802      	ldr	r0, [sp, #8]
 8007bf6:	f000 fb4b 	bl	8008290 <_ZN3pxt7fromIntEi>
}
 8007bfa:	b005      	add	sp, #20
 8007bfc:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i8, true, fromInt);
 8007c00:	2301      	movs	r3, #1
 8007c02:	9100      	str	r1, [sp, #0]
 8007c04:	e7be      	b.n	8007b84 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x40>
        READBYTES(u8, true, fromInt);
 8007c06:	2301      	movs	r3, #1
 8007c08:	9100      	str	r1, [sp, #0]
 8007c0a:	e7c8      	b.n	8007b9e <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x5a>
        READBYTES(i16, true, fromInt);
 8007c0c:	9100      	str	r1, [sp, #0]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e7d2      	b.n	8007bb8 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x74>
        READBYTES(u16, true, fromInt);
 8007c12:	9100      	str	r1, [sp, #0]
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7dc      	b.n	8007bd2 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x8e>
        READBYTES(i32, true, fromInt);
 8007c18:	9100      	str	r1, [sp, #0]
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e7e6      	b.n	8007bec <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xa8>
        READBYTES(u32, false, fromUInt);
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9100      	str	r1, [sp, #0]
        READBYTES(u32, true, fromUInt);
 8007c22:	2204      	movs	r2, #4
 8007c24:	a902      	add	r1, sp, #8
 8007c26:	f7ff fdb5 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007c2a:	9802      	ldr	r0, [sp, #8]
 8007c2c:	f000 fb3a 	bl	80082a4 <_ZN3pxt8fromUIntEj>
}
 8007c30:	b005      	add	sp, #20
 8007c32:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(u32, true, fromUInt);
 8007c36:	9100      	str	r1, [sp, #0]
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e7f2      	b.n	8007c22 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xde>
        READBYTES(f32, false, fromFloat);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9100      	str	r1, [sp, #0]
        READBYTES(f32, true, fromFloat);
 8007c40:	2204      	movs	r2, #4
 8007c42:	a902      	add	r1, sp, #8
 8007c44:	f7ff fda6 	bl	8007794 <_ZN3pxtL9readBytesEPhS0_ibi>
 8007c48:	9802      	ldr	r0, [sp, #8]
 8007c4a:	f000 fb19 	bl	8008280 <_ZN3pxt9fromFloatEf>
}
 8007c4e:	b005      	add	sp, #20
 8007c50:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(f64, false, fromDouble);
 8007c54:	9100      	str	r1, [sp, #0]
 8007c56:	2300      	movs	r3, #0
 8007c58:	e786      	b.n	8007b68 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x24>
        READBYTES(f32, true, fromFloat);
 8007c5a:	9100      	str	r1, [sp, #0]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e7ef      	b.n	8007c40 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xfc>
    return 0;
 8007c60:	2000      	movs	r0, #0
 8007c62:	e78a      	b.n	8007b7a <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x36>

08007c64 <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi>:
    if (offset < 0)
 8007c64:	1e13      	subs	r3, r2, #0
 8007c66:	db08      	blt.n	8007c7a <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi+0x16>
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
 8007c68:	b410      	push	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 8007c6a:	6844      	ldr	r4, [r0, #4]
 8007c6c:	3008      	adds	r0, #8
 8007c6e:	460a      	mov	r2, r1
 8007c70:	4418      	add	r0, r3
 8007c72:	1ae1      	subs	r1, r4, r3
}
 8007c74:	bc10      	pop	{r4}
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 8007c76:	f7ff bf65 	b.w	8007b44 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>
        return fromInt(0);
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f000 bb08 	b.w	8008290 <_ZN3pxt7fromIntEi>

08007c80 <_ZN7control6millisEv>:
//
//
//
//
    int millis() {
        return current_time_ms();
 8007c80:	f002 bb7c 	b.w	800a37c <_ZN3pxt15current_time_msEv>

08007c84 <_ZN7control15internalOnEventEiiPN3pxt12TValueStructEi>:
//
//
//
//
    void internalOnEvent(int src, int value, Action handler, int flags = 16) {
        registerWithDal(src, value, handler, flags);
 8007c84:	f002 bc1e 	b.w	800a4c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08007c88 <_ZN7control5resetEv>:
//
//
//
//
    void reset() {
        target_reset();
 8007c88:	f7f8 bf5a 	b.w	8000b40 <target_reset>

08007c8c <_ZN7control10waitMicrosEi>:
//
//
//
//
    void waitMicros(int micros) {
        sleep_us(micros);
 8007c8c:	17c1      	asrs	r1, r0, #31
 8007c8e:	f002 baa3 	b.w	800a1d8 <_ZN3pxt8sleep_usEy>
 8007c92:	bf00      	nop

08007c94 <_ZN7control13runInParallelEPN3pxt12TValueStructE>:
//
//
//
//
    void runInParallel(Action a) {
        pxt::runInParallel(a);
 8007c94:	f002 bab4 	b.w	800a200 <_ZN3pxt13runInParallelEPNS_12TValueStructE>

08007c98 <_ZN7control12waitForEventEii>:
//
//
//
//
    void waitForEvent(int src, int value) {
        pxt::waitForEvent(src, value);
 8007c98:	f002 bac4 	b.w	800a224 <_ZN3pxt12waitForEventEii>

08007c9c <_ZN7control18deviceSerialNumberEv>:
//
//
//
//
    int deviceSerialNumber() {
        return pxt::getSerialNumber();
 8007c9c:	f002 bb6c 	b.w	800a378 <_ZN3pxt15getSerialNumberEv>

08007ca0 <_ZN7control5__logEiPN3pxt11BoxedStringE>:
//
//
//
//
    void __log(int prority, String text) {
        if (NULL == text) return;
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	b119      	cbz	r1, 8007cac <_ZN7control5__logEiPN3pxt11BoxedStringE+0xc>
        pxt::sendSerial(text->data, text->length);
 8007ca4:	8889      	ldrh	r1, [r1, #4]
 8007ca6:	3006      	adds	r0, #6
 8007ca8:	f002 be7e 	b.w	800a9a8 <_ZN3pxt10sendSerialEPKci>
    }
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <_ZN7control10dmesgValueEPN3pxt12TValueStructE>:
//
//
//
//
    void dmesgValue(TValue v) {
        anyPrint(v);
 8007cb0:	f001 b9da 	b.w	8009068 <_ZN3pxt8anyPrintEPNS_12TValueStructE>

08007cb4 <_ZN7control2gcEv>:
//
//
//
//
    void gc() {
        pxt::gc(1);
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f001 bb53 	b.w	8009360 <_ZN3pxt2gcEi>
 8007cba:	bf00      	nop

08007cbc <_ZN7control8heapDumpEv>:

//
//
//
//
    void heapDump() {
 8007cbc:	b508      	push	{r3, lr}
        pxt::gc(2);
 8007cbe:	2002      	movs	r0, #2
 8007cc0:	f001 fb4e 	bl	8009360 <_ZN3pxt2gcEi>
        target_panic(PANIC_HEAP_DUMPED);
    }
 8007cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        target_panic(PANIC_HEAP_DUMPED);
 8007cc8:	f240 3093 	movw	r0, #915	; 0x393
 8007ccc:	f7f8 bf5a 	b.w	8000b84 <target_panic>

08007cd0 <_ZN7control16profilingEnabledEv>:
#ifdef PXT_PROFILE
        return true;
#else
        return false;
#endif
    }
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	4770      	bx	lr

08007cd4 <_ZN3pxtL13dtorDoNothingEv>:
        decr((TValue)s);
#endif
    }
}

static void dtorDoNothing() {}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <_ZN3pxtL11string_sizeEPNS_11BoxedStringE>:
#else
#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \
    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint)
#endif

PRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)
 8007cd8:	8880      	ldrh	r0, [r0, #4]
 8007cda:	300c      	adds	r0, #12
 8007cdc:	0880      	lsrs	r0, r0, #2
 8007cde:	4770      	bx	lr

08007ce0 <_ZN3pxtL11number_sizeEPNS_11BoxedNumberE>:
PRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)
 8007ce0:	2003      	movs	r0, #3
 8007ce2:	4770      	bx	lr

08007ce4 <_ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE>:
PRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)
 8007ce4:	6840      	ldr	r0, [r0, #4]
 8007ce6:	300b      	adds	r0, #11
 8007ce8:	0880      	lsrs	r0, r0, #2
 8007cea:	4770      	bx	lr

08007cec <_ZN3pxt11findBindingEii>:
    for (auto p = handlerBindings; p; p = p->next) {
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <_ZN3pxt11findBindingEii+0x18>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	b12b      	cbz	r3, 8007cfe <_ZN3pxt11findBindingEii+0x12>
        if (p->source == source && p->value == value) {
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4282      	cmp	r2, r0
 8007cf6:	d1fa      	bne.n	8007cee <_ZN3pxt11findBindingEii+0x2>
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	d1f7      	bne.n	8007cee <_ZN3pxt11findBindingEii+0x2>
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	2000100c 	.word	0x2000100c

08007d08 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>:
void setBinding(int source, int value, Action act) {
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (auto p = handlerBindings; p; p = p->next) {
 8007d0c:	4f10      	ldr	r7, [pc, #64]	; (8007d50 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x48>)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	b913      	cbnz	r3, 8007d18 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x10>
 8007d12:	e00a      	b.n	8007d2a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	b143      	cbz	r3, 8007d2a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
        if (p->source == source && p->value == value) {
 8007d18:	685c      	ldr	r4, [r3, #4]
 8007d1a:	42a0      	cmp	r0, r4
 8007d1c:	d1fa      	bne.n	8007d14 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
 8007d1e:	689c      	ldr	r4, [r3, #8]
 8007d20:	42a1      	cmp	r1, r4
 8007d22:	d1f7      	bne.n	8007d14 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
        curr->action = act;
 8007d24:	60da      	str	r2, [r3, #12]
}
 8007d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2a:	4604      	mov	r4, r0
    curr = new HandlerBinding();
 8007d2c:	2010      	movs	r0, #16
 8007d2e:	4690      	mov	r8, r2
 8007d30:	460d      	mov	r5, r1
 8007d32:	f7fc fa55 	bl	80041e0 <_Znwj>
 8007d36:	4606      	mov	r6, r0
    curr->next = handlerBindings;
 8007d38:	683b      	ldr	r3, [r7, #0]
    curr->source = source;
 8007d3a:	6044      	str	r4, [r0, #4]
    curr->value = value;
 8007d3c:	6085      	str	r5, [r0, #8]
    curr->next = handlerBindings;
 8007d3e:	6003      	str	r3, [r0, #0]
    registerGC(&curr->action);
 8007d40:	2101      	movs	r1, #1
    curr->action = act;
 8007d42:	f840 8f0c 	str.w	r8, [r0, #12]!
    registerGC(&curr->action);
 8007d46:	f001 fe0b 	bl	8009960 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
    handlerBindings = curr;
 8007d4a:	603e      	str	r6, [r7, #0]
}
 8007d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d50:	2000100c 	.word	0x2000100c

08007d54 <_ZN3pxt8mkStringEPKci>:
String mkString(const char *data, int len) {
 8007d54:	b570      	push	{r4, r5, r6, lr}
    if (len < 0)
 8007d56:	1e0c      	subs	r4, r1, #0
String mkString(const char *data, int len) {
 8007d58:	4606      	mov	r6, r0
    if (len < 0)
 8007d5a:	db03      	blt.n	8007d64 <_ZN3pxt8mkStringEPKci+0x10>
    if (len == 0)
 8007d5c:	b93c      	cbnz	r4, 8007d6e <_ZN3pxt8mkStringEPKci+0x1a>
        return (String)emptyString;
 8007d5e:	4d0e      	ldr	r5, [pc, #56]	; (8007d98 <_ZN3pxt8mkStringEPKci+0x44>)
}
 8007d60:	4628      	mov	r0, r5
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
        len = strlen(data);
 8007d64:	f7fc f810 	bl	8003d88 <strlen>
 8007d68:	4604      	mov	r4, r0
    if (len == 0)
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	d0f7      	beq.n	8007d5e <_ZN3pxt8mkStringEPKci+0xa>
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 8007d6e:	f104 0009 	add.w	r0, r4, #9
 8007d72:	f001 fcb1 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 8007d76:	4605      	mov	r5, r0
 8007d78:	b108      	cbz	r0, 8007d7e <_ZN3pxt8mkStringEPKci+0x2a>
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8007d7a:	4b08      	ldr	r3, [pc, #32]	; (8007d9c <_ZN3pxt8mkStringEPKci+0x48>)
 8007d7c:	6003      	str	r3, [r0, #0]
    r->length = len;
 8007d7e:	80ac      	strh	r4, [r5, #4]
    if (data)
 8007d80:	b126      	cbz	r6, 8007d8c <_ZN3pxt8mkStringEPKci+0x38>
        memcpy(r->data, data, len);
 8007d82:	4631      	mov	r1, r6
 8007d84:	4622      	mov	r2, r4
 8007d86:	1da8      	adds	r0, r5, #6
 8007d88:	f7fb ffe6 	bl	8003d58 <memcpy>
    r->data[len] = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	442c      	add	r4, r5
 8007d90:	71a3      	strb	r3, [r4, #6]
}
 8007d92:	4628      	mov	r0, r5
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	bf00      	nop
 8007d98:	0800d1cc 	.word	0x0800d1cc
 8007d9c:	0800d010 	.word	0x0800d010

08007da0 <_ZN3pxt8mkBufferEPKhi>:
Buffer mkBuffer(const uint8_t *data, int len) {
 8007da0:	b570      	push	{r4, r5, r6, lr}
    if (len <= 0)
 8007da2:	1e0d      	subs	r5, r1, #0
 8007da4:	dd12      	ble.n	8007dcc <_ZN3pxt8mkBufferEPKhi+0x2c>
 8007da6:	4606      	mov	r6, r0
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
 8007da8:	f105 0008 	add.w	r0, r5, #8
 8007dac:	f001 fc94 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 8007db0:	4604      	mov	r4, r0
 8007db2:	b108      	cbz	r0, 8007db8 <_ZN3pxt8mkBufferEPKhi+0x18>
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <_ZN3pxt8mkBufferEPKhi+0x3c>)
 8007db6:	6003      	str	r3, [r0, #0]
    r->length = len;
 8007db8:	6065      	str	r5, [r4, #4]
 8007dba:	f104 0008 	add.w	r0, r4, #8
        memcpy(r->data, data, len);
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4631      	mov	r1, r6
    if (data)
 8007dc2:	b136      	cbz	r6, 8007dd2 <_ZN3pxt8mkBufferEPKhi+0x32>
        memcpy(r->data, data, len);
 8007dc4:	f7fb ffc8 	bl	8003d58 <memcpy>
}
 8007dc8:	4620      	mov	r0, r4
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
        return (Buffer)emptyBuffer;
 8007dcc:	4c04      	ldr	r4, [pc, #16]	; (8007de0 <_ZN3pxt8mkBufferEPKhi+0x40>)
}
 8007dce:	4620      	mov	r0, r4
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
        memset(r->data, 0, len);
 8007dd2:	f7fc f809 	bl	8003de8 <memset>
}
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	bd70      	pop	{r4, r5, r6, pc}
 8007dda:	bf00      	nop
 8007ddc:	0800cfb0 	.word	0x0800cfb0
 8007de0:	0800d1c0 	.word	0x0800d1c0

08007de4 <_ZN3pxt9getRandomEj>:
unsigned getRandom(unsigned max) {
 8007de4:	b430      	push	{r4, r5}
 8007de6:	4604      	mov	r4, r0
 8007de8:	4d0d      	ldr	r5, [pc, #52]	; (8007e20 <_ZN3pxt9getRandomEj+0x3c>)
 8007dea:	682a      	ldr	r2, [r5, #0]
        m = (unsigned)max;
 8007dec:	4621      	mov	r1, r4
        result = 0;
 8007dee:	2000      	movs	r0, #0
            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |
 8007df0:	0993      	lsrs	r3, r2, #6
 8007df2:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 8007df6:	4053      	eors	r3, r2
 8007df8:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 8007dfc:	ea83 0392 	eor.w	r3, r3, r2, lsr #2
 8007e00:	0852      	lsrs	r2, r2, #1
 8007e02:	4053      	eors	r3, r2
 8007e04:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
            result = ((result << 1) | (r & 0x00000001));
 8007e08:	f002 0301 	and.w	r3, r2, #1
        } while (m >>= 1);
 8007e0c:	0849      	lsrs	r1, r1, #1
            result = ((result << 1) | (r & 0x00000001));
 8007e0e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
        } while (m >>= 1);
 8007e12:	d1ed      	bne.n	8007df0 <_ZN3pxt9getRandomEj+0xc>
    } while (result > (unsigned)max);
 8007e14:	4284      	cmp	r4, r0
 8007e16:	d3e9      	bcc.n	8007dec <_ZN3pxt9getRandomEj+0x8>
 8007e18:	602a      	str	r2, [r5, #0]
}
 8007e1a:	bc30      	pop	{r4, r5}
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20001000 	.word	0x20001000

08007e24 <_ZN7String_7mkEmptyEv>:
    return mkString("", 0);
 8007e24:	2100      	movs	r1, #0
 8007e26:	4801      	ldr	r0, [pc, #4]	; (8007e2c <_ZN7String_7mkEmptyEv+0x8>)
 8007e28:	f7ff bf94 	b.w	8007d54 <_ZN3pxt8mkStringEPKci>
 8007e2c:	0800d5f4 	.word	0x0800d5f4

08007e30 <_ZN7String_12fromCharCodeEi>:
    char buf[] = {(char)code, 0};
 8007e30:	2200      	movs	r2, #0
String fromCharCode(int code) {
 8007e32:	b500      	push	{lr}
 8007e34:	b083      	sub	sp, #12
    char buf[] = {(char)code, 0};
 8007e36:	ab02      	add	r3, sp, #8
 8007e38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007e3c:	f803 0d04 	strb.w	r0, [r3, #-4]!
    return mkString(buf, 1);
 8007e40:	4618      	mov	r0, r3
 8007e42:	2101      	movs	r1, #1
 8007e44:	f7ff ff86 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
}
 8007e48:	b003      	add	sp, #12
 8007e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e4e:	bf00      	nop

08007e50 <_ZN7String_6charAtEPN3pxt11BoxedStringEi>:
String charAt(String s, int pos) {
 8007e50:	b510      	push	{r4, lr}
 8007e52:	b082      	sub	sp, #8
    if (s && 0 <= pos && pos < s->length) {
 8007e54:	b120      	cbz	r0, 8007e60 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8007e56:	2900      	cmp	r1, #0
 8007e58:	db02      	blt.n	8007e60 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8007e5a:	8883      	ldrh	r3, [r0, #4]
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	dc05      	bgt.n	8007e6c <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x1c>
    return mkString("", 0);
 8007e60:	2100      	movs	r1, #0
 8007e62:	4809      	ldr	r0, [pc, #36]	; (8007e88 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x38>)
 8007e64:	f7ff ff76 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
}
 8007e68:	b002      	add	sp, #8
 8007e6a:	bd10      	pop	{r4, pc}
    char buf[] = {(char)code, 0};
 8007e6c:	2400      	movs	r4, #0
        return fromCharCode(s->data[pos]);
 8007e6e:	4401      	add	r1, r0
 8007e70:	798a      	ldrb	r2, [r1, #6]
    char buf[] = {(char)code, 0};
 8007e72:	ab02      	add	r3, sp, #8
 8007e74:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007e78:	f803 2d04 	strb.w	r2, [r3, #-4]!
    return mkString(buf, 1);
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	2101      	movs	r1, #1
 8007e80:	f7ff ff68 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
}
 8007e84:	b002      	add	sp, #8
 8007e86:	bd10      	pop	{r4, pc}
 8007e88:	0800d5f4 	.word	0x0800d5f4

08007e8c <_ZN7String_6concatEPN3pxt11BoxedStringES2_>:
String concat(String s, String other) {
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	460d      	mov	r5, r1
    if (!s)
 8007e90:	b150      	cbz	r0, 8007ea8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x1c>
 8007e92:	4604      	mov	r4, r0
 8007e94:	8881      	ldrh	r1, [r0, #4]
    if (!other)
 8007e96:	b11d      	cbz	r5, 8007ea0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x14>
    if (s->length == 0)
 8007e98:	bb31      	cbnz	r1, 8007ee8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x5c>
 8007e9a:	462e      	mov	r6, r5
}
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
    if (s->length == 0)
 8007ea0:	b961      	cbnz	r1, 8007ebc <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x30>
        other = (String)sNull;
 8007ea2:	4e14      	ldr	r6, [pc, #80]	; (8007ef4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
}
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
    if (!other)
 8007ea8:	b301      	cbz	r1, 8007eec <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x60>
 8007eaa:	f44f 5169 	mov.w	r1, #14912	; 0x3a40
        s = (String)sNull;
 8007eae:	4e11      	ldr	r6, [pc, #68]	; (8007ef4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    if (other->length == 0)
 8007eb0:	88ab      	ldrh	r3, [r5, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f2      	beq.n	8007e9c <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x10>
 8007eb6:	4634      	mov	r4, r6
 8007eb8:	4419      	add	r1, r3
 8007eba:	e002      	b.n	8007ec2 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x36>
 8007ebc:	f501 5169 	add.w	r1, r1, #14912	; 0x3a40
        other = (String)sNull;
 8007ec0:	4d0c      	ldr	r5, [pc, #48]	; (8007ef4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    String r = mkString(NULL, s->length + other->length);
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7ff ff46 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
    memcpy(r->data, s->data, s->length);
 8007ec8:	1d83      	adds	r3, r0, #6
    String r = mkString(NULL, s->length + other->length);
 8007eca:	4606      	mov	r6, r0
    memcpy(r->data, s->data, s->length);
 8007ecc:	88a2      	ldrh	r2, [r4, #4]
 8007ece:	1da1      	adds	r1, r4, #6
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fb ff41 	bl	8003d58 <memcpy>
 8007ed6:	4603      	mov	r3, r0
    memcpy(r->data + s->length, other->data, other->length);
 8007ed8:	88a0      	ldrh	r0, [r4, #4]
 8007eda:	88aa      	ldrh	r2, [r5, #4]
 8007edc:	4418      	add	r0, r3
 8007ede:	1da9      	adds	r1, r5, #6
 8007ee0:	f7fb ff3a 	bl	8003d58 <memcpy>
}
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	4606      	mov	r6, r0
 8007eea:	e7e1      	b.n	8007eb0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x24>
    if (!other)
 8007eec:	f44f 41e9 	mov.w	r1, #29824	; 0x7480
        s = (String)sNull;
 8007ef0:	4c00      	ldr	r4, [pc, #0]	; (8007ef4 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
 8007ef2:	e7e5      	b.n	8007ec0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x34>
 8007ef4:	0800d220 	.word	0x0800d220

08007ef8 <_ZN7String_7compareEPN3pxt11BoxedStringES2_>:
    if (a == b)
 8007ef8:	4288      	cmp	r0, r1
 8007efa:	d00a      	beq.n	8007f12 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1a>
int compare(String a, String b) {
 8007efc:	b508      	push	{r3, lr}
    int compareResult = strcmp(a->data, b->data);
 8007efe:	3106      	adds	r1, #6
 8007f00:	3006      	adds	r0, #6
 8007f02:	f7fb ff37 	bl	8003d74 <strcmp>
    if (compareResult < 0)
 8007f06:	2800      	cmp	r0, #0
 8007f08:	db05      	blt.n	8007f16 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1e>
    else if (compareResult > 0)
 8007f0a:	bf14      	ite	ne
 8007f0c:	2001      	movne	r0, #1
 8007f0e:	2000      	moveq	r0, #0
}
 8007f10:	bd08      	pop	{r3, pc}
        return 0;
 8007f12:	2000      	movs	r0, #0
}
 8007f14:	4770      	bx	lr
        return -1;
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007f1a:	bd08      	pop	{r3, pc}

08007f1c <_ZN7String_6lengthEPN3pxt11BoxedStringE>:
}
 8007f1c:	8880      	ldrh	r0, [r0, #4]
 8007f1e:	4770      	bx	lr

08007f20 <_ZN7String_8mystrtodEPKcPPc>:
NUMBER mystrtod(const char *p, char **endp) {
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (isspace(*p))
 8007f24:	7803      	ldrb	r3, [r0, #0]
NUMBER mystrtod(const char *p, char **endp) {
 8007f26:	b083      	sub	sp, #12
    while (isspace(*p))
 8007f28:	2b20      	cmp	r3, #32
NUMBER mystrtod(const char *p, char **endp) {
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	460f      	mov	r7, r1
    while (isspace(*p))
 8007f2e:	d103      	bne.n	8007f38 <_ZN7String_8mystrtodEPKcPPc+0x18>
 8007f30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d0fb      	beq.n	8007f30 <_ZN7String_8mystrtodEPKcPPc+0x10>
    if (*p == '+')
 8007f38:	2b2b      	cmp	r3, #43	; 0x2b
        p++;
 8007f3a:	bf08      	it	eq
 8007f3c:	3401      	addeq	r4, #1
    if (*p == '-') {
 8007f3e:	7823      	ldrb	r3, [r4, #0]
 8007f40:	2b2d      	cmp	r3, #45	; 0x2d
 8007f42:	d05c      	beq.n	8007ffe <_ZN7String_8mystrtodEPKcPPc+0xde>
    NUMBER m = 1;
 8007f44:	2100      	movs	r1, #0
 8007f46:	4a4d      	ldr	r2, [pc, #308]	; (800807c <_ZN7String_8mystrtodEPKcPPc+0x15c>)
 8007f48:	e9cd 1200 	strd	r1, r2, [sp]
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d043      	beq.n	8007fd8 <_ZN7String_8mystrtodEPKcPPc+0xb8>
    while (*p) {
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 808d 	beq.w	8008070 <_ZN7String_8mystrtodEPKcPPc+0x150>
        m = -1;
 8007f56:	2600      	movs	r6, #0
 8007f58:	f04f 0800 	mov.w	r8, #0
 8007f5c:	f04f 0900 	mov.w	r9, #0
            v *= 10;
 8007f60:	f04f 0a00 	mov.w	sl, #0
 8007f64:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8008084 <_ZN7String_8mystrtodEPKcPPc+0x164>
 8007f68:	e01c      	b.n	8007fa4 <_ZN7String_8mystrtodEPKcPPc+0x84>
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	465b      	mov	r3, fp
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7fb f84b 	bl	800300c <__wrap___aeabi_dmul>
 8007f76:	4680      	mov	r8, r0
 8007f78:	4689      	mov	r9, r1
            v += c;
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7fa fc70 	bl	8002860 <__aeabi_i2d>
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	f7fb f85a 	bl	800303c <__wrap___aeabi_dadd>
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4689      	mov	r9, r1
            if (dot)
 8007f8c:	b13e      	cbz	r6, 8007f9e <_ZN7String_8mystrtodEPKcPPc+0x7e>
                m /= 10;
 8007f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f92:	4652      	mov	r2, sl
 8007f94:	465b      	mov	r3, fp
 8007f96:	f7fb f821 	bl	8002fdc <__wrap___aeabi_ddiv>
 8007f9a:	e9cd 0100 	strd	r0, r1, [sp]
    while (*p) {
 8007f9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007fa2:	b15b      	cbz	r3, 8007fbc <_ZN7String_8mystrtodEPKcPPc+0x9c>
        int c = *p - '0';
 8007fa4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
        if (0 <= c && c <= 9) {
 8007fa8:	2d09      	cmp	r5, #9
 8007faa:	d9de      	bls.n	8007f6a <_ZN7String_8mystrtodEPKcPPc+0x4a>
        } else if (!dot && *p == '.') {
 8007fac:	bb76      	cbnz	r6, 800800c <_ZN7String_8mystrtodEPKcPPc+0xec>
 8007fae:	2b2e      	cmp	r3, #46	; 0x2e
 8007fb0:	d12c      	bne.n	800800c <_ZN7String_8mystrtodEPKcPPc+0xec>
    while (*p) {
 8007fb2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            dot = 1;
 8007fb6:	2601      	movs	r6, #1
    while (*p) {
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f3      	bne.n	8007fa4 <_ZN7String_8mystrtodEPKcPPc+0x84>
    v *= m;
 8007fbc:	4640      	mov	r0, r8
 8007fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7fb f822 	bl	800300c <__wrap___aeabi_dmul>
 8007fc8:	4680      	mov	r8, r0
 8007fca:	4689      	mov	r9, r1
        *endp = (char *)p;
 8007fcc:	603c      	str	r4, [r7, #0]
}
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	b003      	add	sp, #12
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8007fd8:	7862      	ldrb	r2, [r4, #1]
 8007fda:	f042 0220 	orr.w	r2, r2, #32
 8007fde:	2a78      	cmp	r2, #120	; 0x78
 8007fe0:	d1b9      	bne.n	8007f56 <_ZN7String_8mystrtodEPKcPPc+0x36>
        return m * strtol(p, endp, 16);
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7fb feac 	bl	8003d44 <strtol>
 8007fec:	f7fa fc38 	bl	8002860 <__aeabi_i2d>
 8007ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff4:	f7fb f80a 	bl	800300c <__wrap___aeabi_dmul>
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4689      	mov	r9, r1
 8007ffc:	e7e7      	b.n	8007fce <_ZN7String_8mystrtodEPKcPPc+0xae>
        m = -1;
 8007ffe:	2100      	movs	r1, #0
 8008000:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <_ZN7String_8mystrtodEPKcPPc+0x160>)
 8008002:	7863      	ldrb	r3, [r4, #1]
 8008004:	e9cd 1200 	strd	r1, r2, [sp]
        p++;
 8008008:	3401      	adds	r4, #1
 800800a:	e79f      	b.n	8007f4c <_ZN7String_8mystrtodEPKcPPc+0x2c>
        } else if (*p == 'e' || *p == 'E') {
 800800c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008010:	2b45      	cmp	r3, #69	; 0x45
 8008012:	7825      	ldrb	r5, [r4, #0]
 8008014:	d122      	bne.n	800805c <_ZN7String_8mystrtodEPKcPPc+0x13c>
    v *= m;
 8008016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800801a:	4642      	mov	r2, r8
 800801c:	464b      	mov	r3, r9
 800801e:	f7fa fff5 	bl	800300c <__wrap___aeabi_dmul>
 8008022:	4680      	mov	r8, r0
 8008024:	4689      	mov	r9, r1
    if (*p) {
 8008026:	2d00      	cmp	r5, #0
 8008028:	d0d0      	beq.n	8007fcc <_ZN7String_8mystrtodEPKcPPc+0xac>
        int pw = strtol(p, endp, 10);
 800802a:	4639      	mov	r1, r7
 800802c:	1c60      	adds	r0, r4, #1
 800802e:	220a      	movs	r2, #10
 8008030:	f7fb fe88 	bl	8003d44 <strtol>
        v *= p10(pw);
 8008034:	4913      	ldr	r1, [pc, #76]	; (8008084 <_ZN7String_8mystrtodEPKcPPc+0x164>)
 8008036:	4602      	mov	r2, r0
 8008038:	2000      	movs	r0, #0
 800803a:	f7fa fccb 	bl	80029d4 <__powidf2>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7fa ffe1 	bl	800300c <__wrap___aeabi_dmul>
 800804a:	4680      	mov	r8, r0
 800804c:	4689      	mov	r9, r1
}
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	b003      	add	sp, #12
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (isspace(*p))
 8008058:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800805c:	2d20      	cmp	r5, #32
 800805e:	d0fb      	beq.n	8008058 <_ZN7String_8mystrtodEPKcPPc+0x138>
            if (*p)
 8008060:	b90d      	cbnz	r5, 8008066 <_ZN7String_8mystrtodEPKcPPc+0x146>
 8008062:	7825      	ldrb	r5, [r4, #0]
 8008064:	e7d7      	b.n	8008016 <_ZN7String_8mystrtodEPKcPPc+0xf6>
                return NAN;
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8008088 <_ZN7String_8mystrtodEPKcPPc+0x168>
 800806e:	e7ae      	b.n	8007fce <_ZN7String_8mystrtodEPKcPPc+0xae>
    while (*p) {
 8008070:	f04f 0800 	mov.w	r8, #0
 8008074:	f04f 0900 	mov.w	r9, #0
 8008078:	e7a0      	b.n	8007fbc <_ZN7String_8mystrtodEPKcPPc+0x9c>
 800807a:	bf00      	nop
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	bff00000 	.word	0xbff00000
 8008084:	40240000 	.word	0x40240000
 8008088:	7ff80000 	.word	0x7ff80000

0800808c <_ZN7String_6substrEPN3pxt11BoxedStringEii>:
String substr(String s, int start, int length) {
 800808c:	460b      	mov	r3, r1
    if (length <= 0)
 800808e:	1e11      	subs	r1, r2, #0
 8008090:	dd10      	ble.n	80080b4 <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x28>
String substr(String s, int start, int length) {
 8008092:	b410      	push	{r4}
 8008094:	8884      	ldrh	r4, [r0, #4]
    if (start < 0)
 8008096:	2b00      	cmp	r3, #0
        start = max(s->length + start, 0);
 8008098:	bfbc      	itt	lt
 800809a:	191b      	addlt	r3, r3, r4
 800809c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
    length = min(length, s->length - start);
 80080a0:	1ae4      	subs	r4, r4, r3
    return mkString(s->data + start, length);
 80080a2:	42a1      	cmp	r1, r4
 80080a4:	f100 0006 	add.w	r0, r0, #6
 80080a8:	bfa8      	it	ge
 80080aa:	4621      	movge	r1, r4
 80080ac:	4418      	add	r0, r3
}
 80080ae:	bc10      	pop	{r4}
    return mkString(s->data + start, length);
 80080b0:	f7ff be50 	b.w	8007d54 <_ZN3pxt8mkStringEPKci>
    return mkString("", 0);
 80080b4:	2100      	movs	r1, #0
 80080b6:	4801      	ldr	r0, [pc, #4]	; (80080bc <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x30>)
 80080b8:	f7ff be4c 	b.w	8007d54 <_ZN3pxt8mkStringEPKci>
 80080bc:	0800d5f4 	.word	0x0800d5f4

080080c0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>:
    if (!s || !searchString)
 80080c0:	b180      	cbz	r0, 80080e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
 80080c2:	b179      	cbz	r1, 80080e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
    if (start < 0 || start + searchString->length > s->length)
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	db0d      	blt.n	80080e4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
int indexOf(String s, String searchString, int start) {
 80080c8:	b510      	push	{r4, lr}
    if (start < 0 || start + searchString->length > s->length)
 80080ca:	888b      	ldrh	r3, [r1, #4]
 80080cc:	8884      	ldrh	r4, [r0, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	dc0a      	bgt.n	80080ea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    const char *match = strstr(((const char *)s->data + start), searchString->data);
 80080d4:	1d84      	adds	r4, r0, #6
 80080d6:	18a0      	adds	r0, r4, r2
 80080d8:	3106      	adds	r1, #6
 80080da:	f7fb fe8d 	bl	8003df8 <strstr>
    if (NULL == match)
 80080de:	b120      	cbz	r0, 80080ea <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
    return match - s->data;
 80080e0:	1b00      	subs	r0, r0, r4
}
 80080e2:	bd10      	pop	{r4, pc}
        return -1;
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80080e8:	4770      	bx	lr
        return -1;
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80080ee:	bd10      	pop	{r4, pc}

080080f0 <_ZN7String_8includesEPN3pxt11BoxedStringES2_i>:
int includes(String s, String searchString, int start) {
 80080f0:	b508      	push	{r3, lr}
    return -1 != indexOf(s, searchString, start);
 80080f2:	f7ff ffe5 	bl	80080c0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>
}
 80080f6:	3001      	adds	r0, #1
 80080f8:	bf18      	it	ne
 80080fa:	2001      	movne	r0, #1
 80080fc:	bd08      	pop	{r3, pc}
 80080fe:	bf00      	nop

08008100 <_ZN8Boolean_4bangEi>:
}
 8008100:	fab0 f080 	clz	r0, r0
 8008104:	0940      	lsrs	r0, r0, #5
 8008106:	4770      	bx	lr

08008108 <_ZN3pxt10fromDoubleEd>:
    if (cnv.word1 == 0 && cnv.word0 == 0)
 8008108:	1e0a      	subs	r2, r1, #0
TNumber fromDouble(NUMBER r) {
 800810a:	b538      	push	{r3, r4, r5, lr}
    if (cnv.word1 == 0 && cnv.word0 == 0)
 800810c:	d111      	bne.n	8008132 <_ZN3pxt10fromDoubleEd+0x2a>
 800810e:	b338      	cbz	r0, 8008160 <_ZN3pxt10fromDoubleEd+0x58>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4605      	mov	r5, r0
 8008116:	460c      	mov	r4, r1
 8008118:	f7fb f83e 	bl	8003198 <__wrap___aeabi_dcmpun>
 800811c:	2800      	cmp	r0, #0
 800811e:	d141      	bne.n	80081a4 <_ZN3pxt10fromDoubleEd+0x9c>
    BoxedNumber *p = NEW_GC(BoxedNumber);
 8008120:	200c      	movs	r0, #12
 8008122:	f001 fad9 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 8008126:	b108      	cbz	r0, 800812c <_ZN3pxt10fromDoubleEd+0x24>
 8008128:	4b1f      	ldr	r3, [pc, #124]	; (80081a8 <_ZN3pxt10fromDoubleEd+0xa0>)
 800812a:	6003      	str	r3, [r0, #0]
    p->num = r;
 800812c:	e9c0 5401 	strd	r5, r4, [r0, #4]
}
 8008130:	bd38      	pop	{r3, r4, r5, pc}
    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;
 8008132:	f3c2 540a 	ubfx	r4, r2, #20, #11
 8008136:	f2a4 33ff 	subw	r3, r4, #1023	; 0x3ff
    if (ex < 0 || ex > 29) {
 800813a:	2b1d      	cmp	r3, #29
 800813c:	d812      	bhi.n	8008164 <_ZN3pxt10fromDoubleEd+0x5c>
    if (ex <= 20) {
 800813e:	2b14      	cmp	r3, #20
 8008140:	4605      	mov	r5, r0
 8008142:	dc18      	bgt.n	8008176 <_ZN3pxt10fromDoubleEd+0x6e>
        if (cnv.word0)
 8008144:	2800      	cmp	r0, #0
 8008146:	d1e3      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
        if (cnv.word1 << (ex + 12))
 8008148:	f2a4 34f3 	subw	r4, r4, #1011	; 0x3f3
 800814c:	fa12 f404 	lsls.w	r4, r2, r4
 8008150:	d1de      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8008152:	02d0      	lsls	r0, r2, #11
 8008154:	f1c3 031f 	rsb	r3, r3, #31
 8008158:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800815c:	40d8      	lsrs	r0, r3
 800815e:	e01a      	b.n	8008196 <_ZN3pxt10fromDoubleEd+0x8e>
        return TAG_NUMBER(0);
 8008160:	2001      	movs	r0, #1
}
 8008162:	bd38      	pop	{r3, r4, r5, pc}
        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)
 8008164:	2b1e      	cmp	r3, #30
 8008166:	d1d3      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
 8008168:	2800      	cmp	r0, #0
 800816a:	d1d1      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
 800816c:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <_ZN3pxt10fromDoubleEd+0xa4>)
 800816e:	429a      	cmp	r2, r3
 8008170:	d1ce      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
            return (TValue)(0x80000001);
 8008172:	480f      	ldr	r0, [pc, #60]	; (80081b0 <_ZN3pxt10fromDoubleEd+0xa8>)
}
 8008174:	bd38      	pop	{r3, r4, r5, pc}
        if (cnv.word0 << (ex - 20))
 8008176:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
 800817a:	fa10 f404 	lsls.w	r4, r0, r4
 800817e:	d1c7      	bne.n	8008110 <_ZN3pxt10fromDoubleEd+0x8>
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8008180:	02d0      	lsls	r0, r2, #11
 8008182:	f1c3 011f 	rsb	r1, r3, #31
 8008186:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
        r |= cnv.word0 >> (32 - (ex - 20));
 800818a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 800818e:	40c8      	lsrs	r0, r1
        r |= cnv.word0 >> (32 - (ex - 20));
 8008190:	fa25 f303 	lsr.w	r3, r5, r3
 8008194:	4318      	orrs	r0, r3
    if (cnv.word1 >> 31)
 8008196:	2a00      	cmp	r2, #0
        return TAG_NUMBER(-r);
 8008198:	bfb8      	it	lt
 800819a:	4240      	neglt	r0, r0
        return TAG_NUMBER(r);
 800819c:	0040      	lsls	r0, r0, #1
 800819e:	f040 0001 	orr.w	r0, r0, #1
}
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
        return TAG_NAN;
 80081a4:	200e      	movs	r0, #14
}
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	0800cfe0 	.word	0x0800cfe0
 80081ac:	c1d00000 	.word	0xc1d00000
 80081b0:	80000001 	.word	0x80000001

080081b4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>:
TNumber toNumber(String s) {
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	4607      	mov	r7, r0
 80081b8:	b083      	sub	sp, #12
    NUMBER v = mystrtod(s->data, &endptr);
 80081ba:	1d84      	adds	r4, r0, #6
 80081bc:	4620      	mov	r0, r4
 80081be:	a901      	add	r1, sp, #4
 80081c0:	f7ff feae 	bl	8007f20 <_ZN7String_8mystrtodEPKcPPc>
    if (endptr != s->data + s->length)
 80081c4:	88ba      	ldrh	r2, [r7, #4]
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	4414      	add	r4, r2
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	d007      	beq.n	80081de <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x2a>
        v = NAN;
 80081ce:	2500      	movs	r5, #0
 80081d0:	4e1e      	ldr	r6, [pc, #120]	; (800824c <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x98>)
    return fromDouble(v);
 80081d2:	4628      	mov	r0, r5
 80081d4:	4631      	mov	r1, r6
 80081d6:	f7ff ff97 	bl	8008108 <_ZN3pxt10fromDoubleEd>
}
 80081da:	b003      	add	sp, #12
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (v == 0.0 || v == -0.0)
 80081de:	2200      	movs	r2, #0
 80081e0:	2300      	movs	r3, #0
 80081e2:	4605      	mov	r5, r0
 80081e4:	460e      	mov	r6, r1
 80081e6:	f7fa ff59 	bl	800309c <__wrap___aeabi_dcmpeq>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1f1      	bne.n	80081d2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }
 80081ee:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80081f2:	4628      	mov	r0, r5
 80081f4:	4621      	mov	r1, r4
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081fa:	4b15      	ldr	r3, [pc, #84]	; (8008250 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 80081fc:	f04f 0701 	mov.w	r7, #1
 8008200:	f7fa ffca 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008204:	b940      	cbnz	r0, 8008218 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8008206:	4628      	mov	r0, r5
 8008208:	4621      	mov	r1, r4
 800820a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
 8008210:	f7fa ffa8 	bl	8003164 <__wrap___aeabi_dcmpgt>
 8008214:	b900      	cbnz	r0, 8008218 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x64>
 8008216:	4607      	mov	r7, r0
    else if (!isnormal(v))
 8008218:	f017 0fff 	tst.w	r7, #255	; 0xff
 800821c:	d1d7      	bne.n	80081ce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 800821e:	4628      	mov	r0, r5
 8008220:	4621      	mov	r1, r4
 8008222:	2200      	movs	r2, #0
 8008224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008228:	f04f 0701 	mov.w	r7, #1
 800822c:	f7fa ffb4 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008230:	b940      	cbnz	r0, 8008244 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8008232:	4628      	mov	r0, r5
 8008234:	4621      	mov	r1, r4
 8008236:	2200      	movs	r2, #0
 8008238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800823c:	f7fa ff48 	bl	80030d0 <__wrap___aeabi_dcmplt>
 8008240:	b900      	cbnz	r0, 8008244 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x90>
 8008242:	4607      	mov	r7, r0
 8008244:	f017 0fff 	tst.w	r7, #255	; 0xff
 8008248:	d0c3      	beq.n	80081d2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
 800824a:	e7c0      	b.n	80081ce <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 800824c:	7ff80000 	.word	0x7ff80000
 8008250:	7fefffff 	.word	0x7fefffff

08008254 <_ZN3pxt7fromIntEi.part.7>:
TNumber fromInt(int v) {
 8008254:	b508      	push	{r3, lr}
    return fromDouble(v);
 8008256:	f7fa fb03 	bl	8002860 <__aeabi_i2d>
}
 800825a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 800825e:	f7ff bf53 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008262:	bf00      	nop

08008264 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi>:
    if (s && 0 <= pos && pos < s->length) {
 8008264:	b150      	cbz	r0, 800827c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8008266:	2900      	cmp	r1, #0
 8008268:	db08      	blt.n	800827c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 800826a:	8883      	ldrh	r3, [r0, #4]
 800826c:	428b      	cmp	r3, r1
 800826e:	dd05      	ble.n	800827c <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
        return fromInt(s->data[pos]);
 8008270:	4408      	add	r0, r1
 8008272:	7980      	ldrb	r0, [r0, #6]
    return (v << 1) >> 1 == v;
 8008274:	0040      	lsls	r0, r0, #1
        return TAG_NUMBER(v);
 8008276:	f040 0001 	orr.w	r0, r0, #1
 800827a:	4770      	bx	lr
        return TAG_NAN;
 800827c:	200e      	movs	r0, #14
}
 800827e:	4770      	bx	lr

08008280 <_ZN3pxt9fromFloatEf>:
TNumber fromFloat(float r) {
 8008280:	b508      	push	{r3, lr}
    return fromDouble(r);
 8008282:	f7fa faff 	bl	8002884 <__aeabi_f2d>
}
 8008286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(r);
 800828a:	f7ff bf3d 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800828e:	bf00      	nop

08008290 <_ZN3pxt7fromIntEi>:
 8008290:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8008292:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008296:	d001      	beq.n	800829c <_ZN3pxt7fromIntEi+0xc>
 8008298:	f7ff bfdc 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 800829c:	f043 0001 	orr.w	r0, r3, #1
}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <_ZN3pxt8fromUIntEj>:
    if (v <= 0x3fffffff)
 80082a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
TNumber fromUInt(unsigned v) {
 80082a8:	b508      	push	{r3, lr}
    if (v <= 0x3fffffff)
 80082aa:	d203      	bcs.n	80082b4 <_ZN3pxt8fromUIntEj+0x10>
        return TAG_NUMBER(v);
 80082ac:	0040      	lsls	r0, r0, #1
 80082ae:	f040 0001 	orr.w	r0, r0, #1
}
 80082b2:	bd08      	pop	{r3, pc}
    return fromDouble(v);
 80082b4:	f7fa fac4 	bl	8002840 <__aeabi_ui2d>
}
 80082b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(v);
 80082bc:	f7ff bf24 	b.w	8008108 <_ZN3pxt10fromDoubleEd>

080082c0 <_ZN3pxt8fromBoolEb>:
    if (v)
 80082c0:	2800      	cmp	r0, #0
}
 80082c2:	bf14      	ite	ne
 80082c4:	2042      	movne	r0, #66	; 0x42
 80082c6:	200a      	moveq	r0, #10
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <_ZN5Math_6randomEv>:
TNumber random() {
 80082cc:	b508      	push	{r3, lr}
    return fromDouble(randomDouble());
 80082ce:	f7ff f9e7 	bl	80076a0 <_ZN5Math_12randomDoubleEv>
}
 80082d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(randomDouble());
 80082d6:	f7ff bf17 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 80082da:	bf00      	nop

080082dc <_ZN5Math_4imulEii>:
}
 80082dc:	fb01 f000 	mul.w	r0, r1, r0
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <_ZN5Math_4idivEii>:
}
 80082e4:	fb90 f0f1 	sdiv	r0, r0, r1
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <_ZN6Array_2mkEv>:
RefCollection *mk() {
 80082ec:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefCollection);
 80082ee:	200c      	movs	r0, #12
 80082f0:	f001 f9f2 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 80082f4:	4604      	mov	r4, r0
 80082f6:	b108      	cbz	r0, 80082fc <_ZN6Array_2mkEv+0x10>
 80082f8:	f001 fdbe 	bl	8009e78 <_ZN3pxt13RefCollectionC1Ev>
}
 80082fc:	4620      	mov	r0, r4
 80082fe:	bd10      	pop	{r4, pc}

08008300 <_ZN6Array_6lengthEPN3pxt13RefCollectionE>:
}
 8008300:	8900      	ldrh	r0, [r0, #8]
 8008302:	4770      	bx	lr

08008304 <_ZN6Array_9setLengthEPN3pxt13RefCollectionEi>:
    static void scan(RefCollection *coll);
    static unsigned gcsize(RefCollection *coll);
    static void print(RefCollection *coll);

    unsigned length() { return head.getLength(); }
    void setLength(unsigned newLength) { head.setLength(newLength); }
 8008304:	3004      	adds	r0, #4
 8008306:	f001 bd27 	b.w	8009d58 <_ZN3pxt7Segment9setLengthEj>
 800830a:	bf00      	nop

0800830c <_ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
void push(RefCollection *c, TValue x) {
 800830c:	4603      	mov	r3, r0
    void push(TValue value) { set(length, value); }
 800830e:	460a      	mov	r2, r1
 8008310:	3004      	adds	r0, #4
 8008312:	8919      	ldrh	r1, [r3, #8]
 8008314:	f001 bd00 	b.w	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08008318 <_ZN6Array_3popEPN3pxt13RefCollectionE>:
    return c->head.pop();
 8008318:	3004      	adds	r0, #4
 800831a:	f001 bd2d 	b.w	8009d78 <_ZN3pxt7Segment3popEv>
 800831e:	bf00      	nop

08008320 <_ZN6Array_5getAtEPN3pxt13RefCollectionEi>:
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8008320:	8903      	ldrh	r3, [r0, #8]
    return c->head.get(x);
 8008322:	6842      	ldr	r2, [r0, #4]
 8008324:	4299      	cmp	r1, r3
 8008326:	bf34      	ite	cc
 8008328:	f852 0021 	ldrcc.w	r0, [r2, r1, lsl #2]
 800832c:	2000      	movcs	r0, #0
}
 800832e:	4770      	bx	lr

08008330 <_ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.set(x, y);
 8008330:	3004      	adds	r0, #4
 8008332:	f001 bcf1 	b.w	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 8008336:	bf00      	nop

08008338 <_ZN6Array_8removeAtEPN3pxt13RefCollectionEi>:
    return c->head.remove(x);
 8008338:	3004      	adds	r0, #4
 800833a:	f001 bd2b 	b.w	8009d94 <_ZN3pxt7Segment6removeEj>
 800833e:	bf00      	nop

08008340 <_ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
    c->head.insert(x, value);
 8008340:	3004      	adds	r0, #4
 8008342:	f001 bd4b 	b.w	8009ddc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>
 8008346:	bf00      	nop

08008348 <_ZN3pxt11programSizeEv>:
    return bytecode[17] * 8;
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <_ZN3pxt11programSizeEv+0xc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 800834e:	00c0      	lsls	r0, r0, #3
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20001034 	.word	0x20001034

08008358 <_ZN3pxt9getConfigEii>:
    cfgData = *(int **)&bytecode[18];
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <_ZN3pxt9getConfigEii+0x34>)
int getConfig(int key, int defl) {
 800835a:	b410      	push	{r4}
    cfgData = *(int **)&bytecode[18];
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        if (cfgData[i] == key)
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	4298      	cmp	r0, r3
 8008364:	d010      	beq.n	8008388 <_ZN3pxt9getConfigEii+0x30>
        if (cfgData[i] == 0)
 8008366:	b163      	cbz	r3, 8008382 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 8008368:	2300      	movs	r3, #0
 800836a:	e000      	b.n	800836e <_ZN3pxt9getConfigEii+0x16>
        if (cfgData[i] == 0)
 800836c:	b14a      	cbz	r2, 8008382 <_ZN3pxt9getConfigEii+0x2a>
    for (int i = 0;; i += 2) {
 800836e:	3302      	adds	r3, #2
        if (cfgData[i] == key)
 8008370:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8008374:	4282      	cmp	r2, r0
 8008376:	d1f9      	bne.n	800836c <_ZN3pxt9getConfigEii+0x14>
 8008378:	3301      	adds	r3, #1
 800837a:	009b      	lsls	r3, r3, #2
            return cfgData[i + 1];
 800837c:	58e0      	ldr	r0, [r4, r3]
}
 800837e:	bc10      	pop	{r4}
 8008380:	4770      	bx	lr
            return defl;
 8008382:	4608      	mov	r0, r1
}
 8008384:	bc10      	pop	{r4}
 8008386:	4770      	bx	lr
        if (cfgData[i] == key)
 8008388:	2304      	movs	r3, #4
 800838a:	e7f7      	b.n	800837c <_ZN3pxt9getConfigEii+0x24>
 800838c:	20001034 	.word	0x20001034

08008390 <_ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE>:
}
 8008390:	6840      	ldr	r0, [r0, #4]
 8008392:	4770      	bx	lr

08008394 <_ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE>:
    r->v = v;
 8008394:	6041      	str	r1, [r0, #4]
}
 8008396:	4770      	bx	lr

08008398 <_ZN5pxtrt8mklocRefEv>:
RefRefLocal *mklocRef() {
 8008398:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefRefLocal);
 800839a:	2008      	movs	r0, #8
 800839c:	f001 f99c 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 80083a0:	4604      	mov	r4, r0
 80083a2:	b108      	cbz	r0, 80083a8 <_ZN5pxtrt8mklocRefEv+0x10>
 80083a4:	f001 fd70 	bl	8009e88 <_ZN3pxt11RefRefLocalC1Ev>
}
 80083a8:	4620      	mov	r0, r4
 80083aa:	bd10      	pop	{r4, pc}

080083ac <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE>:
RefAction *stclo(RefAction *a, int idx, TValue v) {
 80083ac:	b570      	push	{r4, r5, r6, lr}

    RefAction();

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
 80083ae:	1e0c      	subs	r4, r1, #0
 80083b0:	4605      	mov	r5, r0
 80083b2:	4616      	mov	r6, r2
 80083b4:	db0e      	blt.n	80083d4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 80083b6:	8883      	ldrh	r3, [r0, #4]
 80083b8:	429c      	cmp	r4, r3
 80083ba:	da0b      	bge.n	80083d4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x28>
 80083bc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    if (!cond)
 80083c0:	68e3      	ldr	r3, [r4, #12]
 80083c2:	b123      	cbz	r3, 80083ce <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x22>
        error(code, subcode);
 80083c4:	210b      	movs	r1, #11
 80083c6:	f240 3086 	movw	r0, #902	; 0x386
 80083ca:	f001 fda3 	bl	8009f14 <_ZN3pxt5errorENS_9PXT_PANICEi>
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
        fields[idx] = v;
 80083ce:	60e6      	str	r6, [r4, #12]
}
 80083d0:	4628      	mov	r0, r5
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
        error(code, subcode);
 80083d4:	210a      	movs	r1, #10
 80083d6:	f240 3086 	movw	r0, #902	; 0x386
 80083da:	f001 fd9b 	bl	8009f14 <_ZN3pxt5errorENS_9PXT_PANICEi>
 80083de:	e7ed      	b.n	80083bc <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x10>

080083e0 <_ZN5pxtrt5panicEi>:
    target_panic(code);
 80083e0:	f7f8 bbd0 	b.w	8000b84 <target_panic>

080083e4 <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE>:
    if (!s || s->length == 0)
 80083e4:	b118      	cbz	r0, 80083ee <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE+0xa>
 80083e6:	8883      	ldrh	r3, [r0, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bf08      	it	eq
 80083ec:	2000      	moveq	r0, #0
}
 80083ee:	4770      	bx	lr

080083f0 <_ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE>:
}
 80083f0:	3000      	adds	r0, #0
 80083f2:	bf18      	it	ne
 80083f4:	2001      	movne	r0, #1
 80083f6:	4770      	bx	lr

080083f8 <_ZN5pxtrt5mkMapEv>:
RefMap *mkMap() {
 80083f8:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefMap);
 80083fa:	2014      	movs	r0, #20
 80083fc:	f001 f96c 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 8008400:	4604      	mov	r4, r0
 8008402:	b108      	cbz	r0, 8008408 <_ZN5pxtrt5mkMapEv+0x10>
 8008404:	f001 fd48 	bl	8009e98 <_ZN3pxt6RefMapC1Ev>
}
 8008408:	4620      	mov	r0, r4
 800840a:	bd10      	pop	{r4, pc}

0800840c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>:
TValue mapGetByString(RefMap *map, String key) {
 800840c:	b510      	push	{r4, lr}
 800840e:	4604      	mov	r4, r0
    int i = map->findIdx(key);
 8008410:	f001 fd4c 	bl	8009eac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 8008414:	2800      	cmp	r0, #0
 8008416:	db06      	blt.n	8008426 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8008418:	8a23      	ldrh	r3, [r4, #16]
    TValue r = incr(map->values.get(i));
 800841a:	68e2      	ldr	r2, [r4, #12]
 800841c:	4298      	cmp	r0, r3
 800841e:	d202      	bcs.n	8008426 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
 8008420:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
}
 8008424:	bd10      	pop	{r4, pc}
        return 0;
 8008426:	2000      	movs	r0, #0
}
 8008428:	bd10      	pop	{r4, pc}
 800842a:	bf00      	nop

0800842c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE>:
int lookupMapKey(String key) {
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    auto arr = *(uintptr_t **)&bytecode[22];
 8008430:	4b1f      	ldr	r3, [pc, #124]	; (80084b0 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x84>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8008436:	e9d7 3200 	ldrd	r3, r2, [r7]
 800843a:	4282      	cmp	r2, r0
    auto r = len - 1;
 800843c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    auto len = *arr++;
 8008440:	f107 0704 	add.w	r7, r7, #4
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8008444:	d806      	bhi.n	8008454 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x28>
 8008446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800844a:	3b01      	subs	r3, #1
 800844c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008450:	4283      	cmp	r3, r0
 8008452:	d21e      	bcs.n	8008492 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x66>
 8008454:	2600      	movs	r6, #0
 8008456:	4680      	mov	r8, r0
    int compareResult = strcmp(a->data, b->data);
 8008458:	f100 0906 	add.w	r9, r0, #6
 800845c:	e003      	b.n	8008466 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    else if (compareResult > 0)
 800845e:	d015      	beq.n	800848c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                r = m - 1;
 8008460:	1e65      	subs	r5, r4, #1
        while (l <= r) {
 8008462:	42ae      	cmp	r6, r5
 8008464:	d80f      	bhi.n	8008486 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5a>
            auto m = (l + r) >> 1;
 8008466:	1974      	adds	r4, r6, r5
 8008468:	0864      	lsrs	r4, r4, #1
            auto cmp = String_::compare((String)arr[m], key);
 800846a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    if (a == b)
 800846e:	4543      	cmp	r3, r8
    int compareResult = strcmp(a->data, b->data);
 8008470:	f103 0006 	add.w	r0, r3, #6
    if (a == b)
 8008474:	d00a      	beq.n	800848c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
    int compareResult = strcmp(a->data, b->data);
 8008476:	4649      	mov	r1, r9
 8008478:	f7fb fc7c 	bl	8003d74 <strcmp>
    if (compareResult < 0)
 800847c:	2800      	cmp	r0, #0
 800847e:	daee      	bge.n	800845e <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x32>
                l = m + 1;
 8008480:	1c66      	adds	r6, r4, #1
        while (l <= r) {
 8008482:	42ae      	cmp	r6, r5
 8008484:	d9ef      	bls.n	8008466 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x3a>
    return 0;
 8008486:	2000      	movs	r0, #0
}
 8008488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return m;
 800848c:	4620      	mov	r0, r4
}
 800848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    auto l = 0U;
 8008492:	2300      	movs	r3, #0
            auto m = (l + r) >> 1;
 8008494:	195c      	adds	r4, r3, r5
 8008496:	0864      	lsrs	r4, r4, #1
            if (arr[m] == ikey)
 8008498:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 800849c:	4282      	cmp	r2, r0
 800849e:	d0f5      	beq.n	800848c <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x60>
                l = m + 1;
 80084a0:	bf34      	ite	cc
 80084a2:	1c63      	addcc	r3, r4, #1
                r = m - 1;
 80084a4:	f104 35ff 	addcs.w	r5, r4, #4294967295	; 0xffffffff
        while (l <= r) {
 80084a8:	429d      	cmp	r5, r3
 80084aa:	d2f3      	bcs.n	8008494 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x68>
    return 0;
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7eb      	b.n	8008488 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5c>
 80084b0:	20001034 	.word	0x20001034

080084b4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj>:
    auto arr = *(String **)&bytecode[22];
 80084b4:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj+0x10>)
    auto r = mapGetByString(map, arr[key + 1]);
 80084b6:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 80084b8:	681b      	ldr	r3, [r3, #0]
    auto r = mapGetByString(map, arr[key + 1]);
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80084c0:	f7ff bfa4 	b.w	800840c <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>
 80084c4:	20001034 	.word	0x20001034

080084c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>:
void mapSetByString(RefMap *map, String key, TValue val) {
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	4616      	mov	r6, r2
    int i = map->findIdx(key);
 80084d0:	f001 fcec 	bl	8009eac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 80084d4:	1e01      	subs	r1, r0, #0
 80084d6:	f104 050c 	add.w	r5, r4, #12
 80084da:	db05      	blt.n	80084e8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE+0x20>
        map->values.set(i, val);
 80084dc:	4632      	mov	r2, r6
 80084de:	4628      	mov	r0, r5
}
 80084e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        map->values.set(i, val);
 80084e4:	f001 bc18 	b.w	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
    void push(TValue value) { set(length, value); }
 80084e8:	463a      	mov	r2, r7
 80084ea:	8921      	ldrh	r1, [r4, #8]
 80084ec:	1d20      	adds	r0, r4, #4
 80084ee:	f001 fc13 	bl	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 80084f2:	4632      	mov	r2, r6
 80084f4:	8a21      	ldrh	r1, [r4, #16]
 80084f6:	4628      	mov	r0, r5
}
 80084f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084fc:	f001 bc0c 	b.w	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08008500 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE>:
    auto arr = *(String **)&bytecode[22];
 8008500:	4b03      	ldr	r3, [pc, #12]	; (8008510 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE+0x10>)
    mapSetByString(map, arr[key + 1], val);
 8008502:	3101      	adds	r1, #1
    auto arr = *(String **)&bytecode[22];
 8008504:	681b      	ldr	r3, [r3, #0]
    mapSetByString(map, arr[key + 1], val);
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800850c:	f7ff bfdc 	b.w	80084c8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>
 8008510:	20001034 	.word	0x20001034

08008514 <_ZN5pxtrt13getGlobalsPtrEv>:
    return globals;
 8008514:	4b01      	ldr	r3, [pc, #4]	; (800851c <_ZN5pxtrt13getGlobalsPtrEv+0x8>)
}
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20001030 	.word	0x20001030

08008520 <_ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE>:
}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8008524:	0782      	lsls	r2, r0, #30
ValType valType(TValue v) {
 8008526:	b508      	push	{r3, lr}
 8008528:	d108      	bne.n	800853c <_ZN3pxt7valTypeEPNS_12TValueStructE+0x18>
 800852a:	b130      	cbz	r0, 800853a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 800852c:	6803      	ldr	r3, [r0, #0]
 800852e:	f023 0301 	bic.w	r3, r3, #1
        if (vt->magic == VTABLE_MAGIC)
 8008532:	78da      	ldrb	r2, [r3, #3]
 8008534:	2af9      	cmp	r2, #249	; 0xf9
 8008536:	d113      	bne.n	8008560 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
            return vt->objectType;
 8008538:	7898      	ldrb	r0, [r3, #2]
}
 800853a:	bd08      	pop	{r3, pc}
        if (!v)
 800853c:	2800      	cmp	r0, #0
 800853e:	d0fc      	beq.n	800853a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
        if (isNumber(v) || v == TAG_NAN)
 8008540:	07c3      	lsls	r3, r0, #31
 8008542:	d40f      	bmi.n	8008564 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
 8008544:	280e      	cmp	r0, #14
 8008546:	d00d      	beq.n	8008564 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
        if (v == TAG_TRUE || v == TAG_FALSE)
 8008548:	2842      	cmp	r0, #66	; 0x42
 800854a:	d00d      	beq.n	8008568 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
 800854c:	280a      	cmp	r0, #10
 800854e:	d00b      	beq.n	8008568 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
        else if (v == TAG_NULL)
 8008550:	2806      	cmp	r0, #6
 8008552:	d005      	beq.n	8008560 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
    target_panic(800 + subcode);
 8008554:	f240 3021 	movw	r0, #801	; 0x321
 8008558:	f7f8 fb14 	bl	8000b84 <target_panic>
 800855c:	2004      	movs	r0, #4
}
 800855e:	bd08      	pop	{r3, pc}
            return ValType::Object;
 8008560:	2004      	movs	r0, #4
}
 8008562:	bd08      	pop	{r3, pc}
            return ValType::Number;
 8008564:	2002      	movs	r0, #2
}
 8008566:	bd08      	pop	{r3, pc}
            return ValType::Boolean;
 8008568:	2001      	movs	r0, #1
}
 800856a:	bd08      	pop	{r3, pc}

0800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>:
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800856c:	280e      	cmp	r0, #14
 800856e:	d026      	beq.n	80085be <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x52>
NUMBER toDouble(TNumber v) {
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 8008574:	b968      	cbnz	r0, 8008592 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x26>
 8008576:	e018      	b.n	80085aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    ValType t = valType(v);
 8008578:	f7ff ffd4 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::Number) {
 800857c:	2802      	cmp	r0, #2
 800857e:	d019      	beq.n	80085b4 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x48>
    } else if (t == ValType::String) {
 8008580:	2803      	cmp	r0, #3
 8008582:	d112      	bne.n	80085aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
        auto tmp = String_::toNumber((String)v);
 8008584:	4620      	mov	r0, r4
 8008586:	f7ff fe15 	bl	80081b4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800858a:	280e      	cmp	r0, #14
        auto tmp = String_::toNumber((String)v);
 800858c:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800858e:	d00c      	beq.n	80085aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
 8008590:	b15c      	cbz	r4, 80085aa <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x3e>
    return ((intptr_t)v & 3) || !v;
 8008592:	07a3      	lsls	r3, r4, #30
    return (int)toUInt(v);
 8008594:	4620      	mov	r0, r4
 8008596:	d0ef      	beq.n	8008578 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0xc>
 8008598:	f000 f818 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        return toInt(v);
 800859c:	f7fa f960 	bl	8002860 <__aeabi_i2d>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
}
 80085a4:	4610      	mov	r0, r2
 80085a6:	4619      	mov	r1, r3
 80085a8:	bd10      	pop	{r4, pc}
        return NAN;
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80085ae:	4610      	mov	r0, r2
 80085b0:	4619      	mov	r1, r3
 80085b2:	bd10      	pop	{r4, pc}
        return p->num;
 80085b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
}
 80085b8:	4610      	mov	r0, r2
 80085ba:	4619      	mov	r1, r3
 80085bc:	bd10      	pop	{r4, pc}
        return NAN;
 80085be:	2200      	movs	r2, #0
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE+0x5c>)
}
 80085c2:	4610      	mov	r0, r2
 80085c4:	4619      	mov	r1, r3
 80085c6:	4770      	bx	lr
 80085c8:	7ff80000 	.word	0x7ff80000

080085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>:
    if (isNumber(v))
 80085cc:	07c1      	lsls	r1, r0, #31
unsigned toUInt(TNumber v) {
 80085ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d0:	4603      	mov	r3, r0
    if (isNumber(v))
 80085d2:	d44f      	bmi.n	8008674 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa8>
    if (isSpecial(v)) {
 80085d4:	0782      	lsls	r2, r0, #30
 80085d6:	d504      	bpl.n	80085e2 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x16>
        if ((intptr_t)v >> 6)
 80085d8:	099b      	lsrs	r3, r3, #6
 80085da:	bf14      	ite	ne
 80085dc:	2001      	movne	r0, #1
 80085de:	2000      	moveq	r0, #0
}
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!v)
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d044      	beq.n	8008670 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    NUMBER num = toDouble(v);
 80085e6:	f7ff ffc1 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80085ea:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80085ee:	460e      	mov	r6, r1
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f4:	4629      	mov	r1, r5
 80085f6:	4b25      	ldr	r3, [pc, #148]	; (800868c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 80085f8:	4604      	mov	r4, r0
 80085fa:	f04f 0701 	mov.w	r7, #1
 80085fe:	f7fa fdcb 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008602:	b940      	cbnz	r0, 8008616 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800860c:	4b1f      	ldr	r3, [pc, #124]	; (800868c <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc0>)
 800860e:	f7fa fda9 	bl	8003164 <__wrap___aeabi_dcmpgt>
 8008612:	b900      	cbnz	r0, 8008616 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4a>
 8008614:	4607      	mov	r7, r0
    if (!isnormal(num))
 8008616:	f017 0fff 	tst.w	r7, #255	; 0xff
 800861a:	d129      	bne.n	8008670 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	2200      	movs	r2, #0
 8008622:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008626:	f04f 0701 	mov.w	r7, #1
 800862a:	f7fa fdb5 	bl	8003198 <__wrap___aeabi_dcmpun>
 800862e:	b940      	cbnz	r0, 8008642 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	2200      	movs	r2, #0
 8008636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800863a:	f7fa fd49 	bl	80030d0 <__wrap___aeabi_dcmplt>
 800863e:	b900      	cbnz	r0, 8008642 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8008640:	4607      	mov	r7, r0
 8008642:	f017 0fff 	tst.w	r7, #255	; 0xff
 8008646:	d113      	bne.n	8008670 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
    double rem = fmod(trunc(num), 4294967296.0);
 8008648:	4620      	mov	r0, r4
 800864a:	4631      	mov	r1, r6
 800864c:	f7fb f998 	bl	8003980 <trunc>
 8008650:	2200      	movs	r2, #0
 8008652:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8008654:	f7fb fa62 	bl	8003b1c <fmod>
    if (rem < 0.0)
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
    double rem = fmod(trunc(num), 4294967296.0);
 800865c:	4604      	mov	r4, r0
 800865e:	460d      	mov	r5, r1
    if (rem < 0.0)
 8008660:	f7fa fd36 	bl	80030d0 <__wrap___aeabi_dcmplt>
 8008664:	b940      	cbnz	r0, 8008678 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xac>
    return (unsigned)rem;
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	f7fa fdc5 	bl	80031f8 <__wrap___aeabi_d2uiz>
}
 800866e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008670:	2000      	movs	r0, #0
}
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (intptr_t)n >> 1;
 8008674:	1040      	asrs	r0, r0, #1
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rem += 4294967296.0;
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	2200      	movs	r2, #0
 800867e:	4b04      	ldr	r3, [pc, #16]	; (8008690 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8008680:	f7fa fcdc 	bl	800303c <__wrap___aeabi_dadd>
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	e7ed      	b.n	8008666 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x9a>
 800868a:	bf00      	nop
 800868c:	7fefffff 	.word	0x7fefffff
 8008690:	41f00000 	.word	0x41f00000

08008694 <_ZN3pxt5toIntEPNS_12TValueStructE>:
    return (int)toUInt(v);
 8008694:	f7ff bf9a 	b.w	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>

08008698 <_ZN6numops4lslsEPN3pxt12TValueStructES2_>:
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 800869c:	f7ff ff96 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80086a0:	4604      	mov	r4, r0
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7ff ff92 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80086a8:	fa04 f000 	lsl.w	r0, r4, r0
    return (v << 1) >> 1 == v;
 80086ac:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80086ae:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80086b2:	d003      	beq.n	80086bc <_ZN6numops4lslsEPN3pxt12TValueStructES2_+0x24>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80086b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b8:	f7ff bdcc 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80086bc:	f043 0001 	orr.w	r0, r3, #1
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop

080086c4 <_ZN6numops4asrsEPN3pxt12TValueStructES2_>:
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	460d      	mov	r5, r1
    return (int)toUInt(v);
 80086c8:	f7ff ff80 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80086cc:	4604      	mov	r4, r0
 80086ce:	4628      	mov	r0, r5
 80086d0:	f7ff ff7c 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80086d4:	fa44 f000 	asr.w	r0, r4, r0
 80086d8:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80086da:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80086de:	d003      	beq.n	80086e8 <_ZN6numops4asrsEPN3pxt12TValueStructES2_+0x24>
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80086e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e4:	f7ff bdb6 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80086e8:	f043 0001 	orr.w	r0, r3, #1
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop

080086f0 <_ZN6numops4eorsEPN3pxt12TValueStructES2_>:
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	460d      	mov	r5, r1
    return (int)toUInt(v);
 80086f4:	f7ff ff6a 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80086f8:	4604      	mov	r4, r0
 80086fa:	4628      	mov	r0, r5
 80086fc:	f7ff ff66 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8008700:	4060      	eors	r0, r4
 8008702:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8008704:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008708:	d003      	beq.n	8008712 <_ZN6numops4eorsEPN3pxt12TValueStructES2_+0x22>
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 800870a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870e:	f7ff bda1 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008712:	f043 0001 	orr.w	r0, r3, #1
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8008716:	bd38      	pop	{r3, r4, r5, pc}

08008718 <_ZN6numops4orrsEPN3pxt12TValueStructES2_>:
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	460d      	mov	r5, r1
    return (int)toUInt(v);
 800871c:	f7ff ff56 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008720:	4604      	mov	r4, r0
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff ff52 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008728:	4320      	orrs	r0, r4
 800872a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800872c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008730:	d003      	beq.n	800873a <_ZN6numops4orrsEPN3pxt12TValueStructES2_+0x22>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8008732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008736:	f7ff bd8d 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 800873a:	f043 0001 	orr.w	r0, r3, #1
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 800873e:	bd38      	pop	{r3, r4, r5, pc}

08008740 <_ZN6numops4bnotEPN3pxt12TValueStructE>:
TNumber bnot(TNumber a) {
 8008740:	b508      	push	{r3, lr}
    return (int)toUInt(v);
 8008742:	f7ff ff43 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    return fromInt(~toInt(a));
 8008746:	43c0      	mvns	r0, r0
 8008748:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800874a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 800874e:	d003      	beq.n	8008758 <_ZN6numops4bnotEPN3pxt12TValueStructE+0x18>
}
 8008750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008754:	f7ff bd7e 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008758:	f043 0001 	orr.w	r0, r3, #1
}
 800875c:	bd08      	pop	{r3, pc}
 800875e:	bf00      	nop

08008760 <_ZN6numops4andsEPN3pxt12TValueStructES2_>:
TNumber ands(TNumber a, TNumber b) {
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	460d      	mov	r5, r1
    return (int)toUInt(v);
 8008764:	f7ff ff32 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008768:	4604      	mov	r4, r0
 800876a:	4628      	mov	r0, r5
 800876c:	f7ff ff2e 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
    BITOP(&)
 8008770:	4020      	ands	r0, r4
 8008772:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 8008774:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008778:	d003      	beq.n	8008782 <_ZN6numops4andsEPN3pxt12TValueStructES2_+0x22>
}
 800877a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877e:	f7ff bd69 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 8008782:	f043 0001 	orr.w	r0, r3, #1
}
 8008786:	bd38      	pop	{r3, r4, r5, pc}

08008788 <_ZN6numops4lsrsEPN3pxt12TValueStructES2_>:
TNumber lsrs(TNumber a, TNumber b) {
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	460d      	mov	r5, r1
    return fromUInt(toUInt(a) >> toUInt(b));
 800878c:	f7ff ff1e 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008790:	4604      	mov	r4, r0
 8008792:	4628      	mov	r0, r5
 8008794:	f7ff ff1a 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8008798:	fa24 f000 	lsr.w	r0, r4, r0
    if (v <= 0x3fffffff)
 800879c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80087a0:	d203      	bcs.n	80087aa <_ZN6numops4lsrsEPN3pxt12TValueStructES2_+0x22>
        return TAG_NUMBER(v);
 80087a2:	0040      	lsls	r0, r0, #1
 80087a4:	f040 0001 	orr.w	r0, r0, #1
}
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
    return fromDouble(v);
 80087aa:	f7fa f849 	bl	8002840 <__aeabi_ui2d>
}
 80087ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return fromDouble(v);
 80087b2:	f7ff bca9 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 80087b6:	bf00      	nop

080087b8 <_ZN3pxt7toFloatEPNS_12TValueStructE>:
float toFloat(TNumber v) {
 80087b8:	b508      	push	{r3, lr}
    return (float)toDouble(v);
 80087ba:	f7ff fed7 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80087be:	f7fa f8b9 	bl	8002934 <__aeabi_d2f>
}
 80087c2:	bd08      	pop	{r3, pc}

080087c4 <_ZN6numops4addsEPN3pxt12TValueStructES2_>:
TNumber adds(TNumber a, TNumber b){NUMOP(+)}
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	460e      	mov	r6, r1
 80087c8:	f7ff fed0 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80087cc:	4604      	mov	r4, r0
 80087ce:	4630      	mov	r0, r6
 80087d0:	460d      	mov	r5, r1
 80087d2:	f7ff fecb 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7fa fc2d 	bl	800303c <__wrap___aeabi_dadd>
 80087e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087e6:	f7ff bc8f 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 80087ea:	bf00      	nop

080087ec <_ZN6numops4subsEPN3pxt12TValueStructES2_>:
TNumber subs(TNumber a, TNumber b){NUMOP(-)}
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	460e      	mov	r6, r1
 80087f0:	f7ff febc 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80087f4:	4604      	mov	r4, r0
 80087f6:	4630      	mov	r0, r6
 80087f8:	460d      	mov	r5, r1
 80087fa:	f7ff feb7 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4620      	mov	r0, r4
 8008804:	4629      	mov	r1, r5
 8008806:	f7fa fc31 	bl	800306c <__wrap___aeabi_dsub>
 800880a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800880e:	f7ff bc7b 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008812:	bf00      	nop

08008814 <_ZN6numops4mulsEPN3pxt12TValueStructES2_>:
    return (intptr_t)a & (intptr_t)b & 1;
 8008814:	f001 0301 	and.w	r3, r1, #1
    if (bothNumbers(a, b)) {
 8008818:	4218      	tst	r0, r3
 800881a:	d003      	beq.n	8008824 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 800881c:	13c3      	asrs	r3, r0, #15
 800881e:	3301      	adds	r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	d912      	bls.n	800884a <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x36>
TNumber muls(TNumber a, TNumber b) {
 8008824:	b5d0      	push	{r4, r6, r7, lr}
 8008826:	460c      	mov	r4, r1
    NUMOP(*)
 8008828:	f7ff fea0 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800882c:	4606      	mov	r6, r0
 800882e:	4620      	mov	r0, r4
 8008830:	460f      	mov	r7, r1
 8008832:	f7ff fe9b 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7fa fbe5 	bl	800300c <__wrap___aeabi_dmul>
}
 8008842:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    NUMOP(*)
 8008846:	f7ff bc5f 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 800884a:	13cb      	asrs	r3, r1, #15
 800884c:	3301      	adds	r3, #1
 800884e:	2b01      	cmp	r3, #1
 8008850:	d8e8      	bhi.n	8008824 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
            return fromInt((aa >> 1) * (bb >> 1));
 8008852:	1043      	asrs	r3, r0, #1
 8008854:	1048      	asrs	r0, r1, #1
 8008856:	fb00 f003 	mul.w	r0, r0, r3
    return (v << 1) >> 1 == v;
 800885a:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 800885c:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8008860:	d102      	bne.n	8008868 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x54>
        return TAG_NUMBER(v);
 8008862:	f043 0001 	orr.w	r0, r3, #1
}
 8008866:	4770      	bx	lr
 8008868:	f7ff bcf4 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>

0800886c <_ZN6numops3divEPN3pxt12TValueStructES2_>:
TNumber div(TNumber a, TNumber b){NUMOP(/)}
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	460e      	mov	r6, r1
 8008870:	f7ff fe7c 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008874:	4604      	mov	r4, r0
 8008876:	4630      	mov	r0, r6
 8008878:	460d      	mov	r5, r1
 800887a:	f7ff fe77 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	f7fa fba9 	bl	8002fdc <__wrap___aeabi_ddiv>
 800888a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800888e:	f7ff bc3b 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008892:	bf00      	nop

08008894 <_ZN6numops3modEPN3pxt12TValueStructES2_>:
TNumber mod(TNumber a, TNumber b) {
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	460c      	mov	r4, r1
    if (isNumber(a) && isNumber(b) && numValue(b))
 8008898:	07c1      	lsls	r1, r0, #31
TNumber mod(TNumber a, TNumber b) {
 800889a:	4603      	mov	r3, r0
    if (isNumber(a) && isNumber(b) && numValue(b))
 800889c:	d503      	bpl.n	80088a6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 800889e:	07e2      	lsls	r2, r4, #31
 80088a0:	d501      	bpl.n	80088a6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 80088a2:	0862      	lsrs	r2, r4, #1
 80088a4:	d111      	bne.n	80088ca <_ZN6numops3modEPN3pxt12TValueStructES2_+0x36>
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fe60 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80088ac:	4606      	mov	r6, r0
 80088ae:	4620      	mov	r0, r4
 80088b0:	460f      	mov	r7, r1
 80088b2:	f7ff fe5b 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80088b6:	460b      	mov	r3, r1
 80088b8:	4602      	mov	r2, r0
 80088ba:	4639      	mov	r1, r7
 80088bc:	4630      	mov	r0, r6
 80088be:	f7fb f92d 	bl	8003b1c <fmod>
}
 80088c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80088c6:	f7ff bc1f 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
    return (int)toUInt(v);
 80088ca:	f7ff fe7f 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80088ce:	4605      	mov	r5, r0
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7ff fe7b 	bl	80085cc <_ZN3pxt6toUIntEPNS_12TValueStructE>
        BITOP(%)
 80088d6:	fb95 f3f0 	sdiv	r3, r5, r0
 80088da:	fb03 5010 	mls	r0, r3, r0, r5
 80088de:	0043      	lsls	r3, r0, #1
    if (canBeTagged(v))
 80088e0:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80088e4:	d003      	beq.n	80088ee <_ZN6numops3modEPN3pxt12TValueStructES2_+0x5a>
}
 80088e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088ea:	f7ff bcb3 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        return TAG_NUMBER(v);
 80088ee:	f043 0001 	orr.w	r0, r3, #1
}
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088f4 <_ZN5Math_3powEPN3pxt12TValueStructES2_>:
TNumber pow(TNumber x, TNumber y) {
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	460e      	mov	r6, r1
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 80088f8:	f7ff fe38 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80088fc:	4604      	mov	r4, r0
 80088fe:	4630      	mov	r0, r6
 8008900:	460d      	mov	r5, r1
 8008902:	f7ff fe33 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4620      	mov	r0, r4
 800890c:	4629      	mov	r1, r5
 800890e:	f7fa fce1 	bl	80032d4 <pow>
}
 8008912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8008916:	f7ff bbf7 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 800891a:	bf00      	nop

0800891c <_ZN5Math_5atan2EPN3pxt12TValueStructES2_>:
TNumber atan2(TNumber y, TNumber x) {
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	460e      	mov	r6, r1
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 8008920:	f7ff fe24 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008924:	4604      	mov	r4, r0
 8008926:	4630      	mov	r0, r6
 8008928:	460d      	mov	r5, r1
 800892a:	f7ff fe1f 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4620      	mov	r0, r4
 8008934:	4629      	mov	r1, r5
 8008936:	f7fa fd49 	bl	80033cc <atan2>
}
 800893a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 800893e:	f7ff bbe3 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008942:	bf00      	nop

08008944 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_>:
    if (isNumber(min) && isNumber(max)) {
 8008944:	07c2      	lsls	r2, r0, #31
TNumber randomRange(TNumber min, TNumber max) {
 8008946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800894a:	460c      	mov	r4, r1
    if (isNumber(min) && isNumber(max)) {
 800894c:	d511      	bpl.n	8008972 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
 800894e:	07cb      	lsls	r3, r1, #31
 8008950:	d50f      	bpl.n	8008972 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x2e>
    return (intptr_t)n >> 1;
 8008952:	1040      	asrs	r0, r0, #1
 8008954:	104d      	asrs	r5, r1, #1
        if (mini > maxi) {
 8008956:	4285      	cmp	r5, r0
 8008958:	da44      	bge.n	80089e4 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa0>
            return fromInt(mini + getRandom(maxi - mini));
 800895a:	1b40      	subs	r0, r0, r5
 800895c:	f7ff fa42 	bl	8007de4 <_ZN3pxt9getRandomEj>
 8008960:	4428      	add	r0, r5
    return (v << 1) >> 1 == v;
 8008962:	0044      	lsls	r4, r0, #1
    if (canBeTagged(v))
 8008964:	ebb0 0f64 	cmp.w	r0, r4, asr #1
 8008968:	d03d      	beq.n	80089e6 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xa2>
}
 800896a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896e:	f7ff bc71 	b.w	8008254 <_ZN3pxt7fromIntEi.part.7>
        auto mind = toDouble(min);
 8008972:	f7ff fdfb 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008976:	4606      	mov	r6, r0
        auto maxd = toDouble(max);
 8008978:	4620      	mov	r0, r4
        auto mind = toDouble(min);
 800897a:	460f      	mov	r7, r1
        auto maxd = toDouble(max);
 800897c:	f7ff fdf6 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008980:	4604      	mov	r4, r0
 8008982:	460d      	mov	r5, r1
        if (mind > maxd) {
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7fa fbea 	bl	8003164 <__wrap___aeabi_dcmpgt>
 8008990:	b990      	cbnz	r0, 80089b8 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x74>
        if (maxd == mind)
 8008992:	4622      	mov	r2, r4
 8008994:	462b      	mov	r3, r5
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7fa fb7f 	bl	800309c <__wrap___aeabi_dcmpeq>
 800899e:	b128      	cbz	r0, 80089ac <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x68>
            return fromDouble(mind);
 80089a0:	4630      	mov	r0, r6
 80089a2:	4639      	mov	r1, r7
}
 80089a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind);
 80089a8:	f7ff bbae 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 80089ac:	4622      	mov	r2, r4
 80089ae:	462b      	mov	r3, r5
        auto mind = toDouble(min);
 80089b0:	4634      	mov	r4, r6
 80089b2:	463d      	mov	r5, r7
        auto maxd = toDouble(max);
 80089b4:	4616      	mov	r6, r2
 80089b6:	461f      	mov	r7, r3
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80089b8:	f7fe fe72 	bl	80076a0 <_ZN5Math_12randomDoubleEv>
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	4622      	mov	r2, r4
 80089c2:	462b      	mov	r3, r5
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7fa fb50 	bl	800306c <__wrap___aeabi_dsub>
 80089cc:	4642      	mov	r2, r8
 80089ce:	464b      	mov	r3, r9
 80089d0:	f7fa fb1c 	bl	800300c <__wrap___aeabi_dmul>
 80089d4:	4622      	mov	r2, r4
 80089d6:	462b      	mov	r3, r5
 80089d8:	f7fa fb30 	bl	800303c <__wrap___aeabi_dadd>
}
 80089dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80089e0:	f7ff bb92 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
        if (maxi == mini)
 80089e4:	d103      	bne.n	80089ee <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xaa>
        return TAG_NUMBER(v);
 80089e6:	f044 0001 	orr.w	r0, r4, #1
}
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	462b      	mov	r3, r5
 80089f0:	4605      	mov	r5, r0
 80089f2:	4618      	mov	r0, r3
 80089f4:	e7b1      	b.n	800895a <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x16>
 80089f6:	bf00      	nop

080089f8 <_ZN5Math_3logEPN3pxt12TValueStructE>:
TNumber log(TNumber x){SINGLE(log)}
 80089f8:	b508      	push	{r3, lr}
 80089fa:	f7ff fdb7 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80089fe:	f7fa fc25 	bl	800324c <log>
 8008a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a06:	f7ff bb7f 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a0a:	bf00      	nop

08008a0c <_ZN5Math_5log10EPN3pxt12TValueStructE>:
TNumber log10(TNumber x){SINGLE(log10)}
 8008a0c:	b508      	push	{r3, lr}
 8008a0e:	f7ff fdad 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a12:	f7fa fc4b 	bl	80032ac <log10>
 8008a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a1a:	f7ff bb75 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a1e:	bf00      	nop

08008a20 <_ZN5Math_3tanEPN3pxt12TValueStructE>:
TNumber tan(TNumber x){SINGLE(tan)}
 8008a20:	b508      	push	{r3, lr}
 8008a22:	f7ff fda3 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a26:	f7fa fcc3 	bl	80033b0 <tan>
 8008a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a2e:	f7ff bb6b 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a32:	bf00      	nop

08008a34 <_ZN5Math_3sinEPN3pxt12TValueStructE>:
TNumber sin(TNumber x){SINGLE(sin)}
 8008a34:	b508      	push	{r3, lr}
 8008a36:	f7ff fd99 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a3a:	f7fa fc91 	bl	8003360 <sin>
 8008a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a42:	f7ff bb61 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a46:	bf00      	nop

08008a48 <_ZN5Math_3cosEPN3pxt12TValueStructE>:
TNumber cos(TNumber x){SINGLE(cos)}
 8008a48:	b508      	push	{r3, lr}
 8008a4a:	f7ff fd8f 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a4e:	f7fa fc95 	bl	800337c <cos>
 8008a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a56:	f7ff bb57 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a5a:	bf00      	nop

08008a5c <_ZN5Math_4atanEPN3pxt12TValueStructE>:
TNumber atan(TNumber x){SINGLE(atan)}
 8008a5c:	b508      	push	{r3, lr}
 8008a5e:	f7ff fd85 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a62:	f7fa fcdd 	bl	8003420 <atan>
 8008a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a6a:	f7ff bb4d 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a6e:	bf00      	nop

08008a70 <_ZN5Math_4asinEPN3pxt12TValueStructE>:
TNumber asin(TNumber x){SINGLE(asin)}
 8008a70:	b508      	push	{r3, lr}
 8008a72:	f7ff fd7b 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a76:	f7fa fd2b 	bl	80034d0 <asin>
 8008a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a7e:	f7ff bb43 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a82:	bf00      	nop

08008a84 <_ZN5Math_4acosEPN3pxt12TValueStructE>:
TNumber acos(TNumber x){SINGLE(acos)}
 8008a84:	b508      	push	{r3, lr}
 8008a86:	f7ff fd71 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a8a:	f7fa fa41 	bl	8002f10 <acos>
 8008a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a92:	f7ff bb39 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008a96:	bf00      	nop

08008a98 <_ZN5Math_4sqrtEPN3pxt12TValueStructE>:
TNumber sqrt(TNumber x){SINGLE(sqrt)}
 8008a98:	b508      	push	{r3, lr}
 8008a9a:	f7ff fd67 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008a9e:	f7fa fbc7 	bl	8003230 <sqrt>
 8008aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008aa6:	f7ff bb2f 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008aaa:	bf00      	nop

08008aac <_ZN5Math_5floorEPN3pxt12TValueStructE>:
TNumber floor(TNumber x){SINGLE(floor)}
 8008aac:	b508      	push	{r3, lr}
 8008aae:	f7ff fd5d 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008ab2:	f7fa ffab 	bl	8003a0c <floor>
 8008ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008aba:	f7ff bb25 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008abe:	bf00      	nop

08008ac0 <_ZN5Math_4ceilEPN3pxt12TValueStructE>:
TNumber ceil(TNumber x){SINGLE(ceil)}
 8008ac0:	b508      	push	{r3, lr}
 8008ac2:	f7ff fd53 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008ac6:	f7fa ffe5 	bl	8003a94 <ceil>
 8008aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ace:	f7ff bb1b 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008ad2:	bf00      	nop

08008ad4 <_ZN5Math_5truncEPN3pxt12TValueStructE>:
TNumber trunc(TNumber x){SINGLE(trunc)}
 8008ad4:	b508      	push	{r3, lr}
 8008ad6:	f7ff fd49 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008ada:	f7fa ff51 	bl	8003980 <trunc>
 8008ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ae2:	f7ff bb11 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008ae6:	bf00      	nop

08008ae8 <_ZN5Math_5roundEPN3pxt12TValueStructE>:
TNumber round(TNumber x) {
 8008ae8:	b508      	push	{r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 8008aea:	f7ff fd3f 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <_ZN5Math_5roundEPN3pxt12TValueStructE+0x1c>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7fa faa3 	bl	800303c <__wrap___aeabi_dadd>
 8008af6:	f7fa ff89 	bl	8003a0c <floor>
}
 8008afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return fromDouble(::floor(toDouble(x) + 0.5));
 8008afe:	f7ff bb03 	b.w	8008108 <_ZN3pxt10fromDoubleEd>
 8008b02:	bf00      	nop
 8008b04:	3fe00000 	.word	0x3fe00000

08008b08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8008b08:	280e      	cmp	r0, #14
 8008b0a:	d00b      	beq.n	8008b24 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
 8008b0c:	290e      	cmp	r1, #14
 8008b0e:	d009      	beq.n	8008b24 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
    if (a == b)
 8008b10:	4288      	cmp	r0, r1
bool eqq_bool(TValue a, TValue b) {
 8008b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b14:	4604      	mov	r4, r0
    if (a == b)
 8008b16:	d007      	beq.n	8008b28 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x20>
    return (intptr_t)a & (intptr_t)b & 1;
 8008b18:	f001 0201 	and.w	r2, r1, #1
    if (bothNumbers(a, b))
 8008b1c:	4210      	tst	r0, r2
 8008b1e:	d005      	beq.n	8008b2c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x24>
        return false;
 8008b20:	2000      	movs	r0, #0
}
 8008b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8008b24:	2000      	movs	r0, #0
}
 8008b26:	4770      	bx	lr
        return true;
 8008b28:	2001      	movs	r0, #1
}
 8008b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2c:	460d      	mov	r5, r1
    ValType ta = valType(a);
 8008b2e:	f7ff fcf9 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008b32:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8008b34:	4628      	mov	r0, r5
 8008b36:	f7ff fcf5 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta != tb)
 8008b3a:	4286      	cmp	r6, r0
 8008b3c:	d1f0      	bne.n	8008b20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if ((aa | bb) & 3)
 8008b3e:	ea44 0305 	orr.w	r3, r4, r5
 8008b42:	079b      	lsls	r3, r3, #30
 8008b44:	d1ec      	bne.n	8008b20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
    if (ta == ValType::String)
 8008b46:	2e03      	cmp	r6, #3
 8008b48:	d015      	beq.n	8008b76 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6e>
    else if (ta == ValType::Number)
 8008b4a:	2e02      	cmp	r6, #2
 8008b4c:	d1e8      	bne.n	8008b20 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
        return toDouble(a) == toDouble(b);
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff fd0c 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008b54:	4606      	mov	r6, r0
 8008b56:	4628      	mov	r0, r5
 8008b58:	460f      	mov	r7, r1
 8008b5a:	f7ff fd07 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4602      	mov	r2, r0
 8008b62:	4639      	mov	r1, r7
 8008b64:	4630      	mov	r0, r6
 8008b66:	f7fa fa99 	bl	800309c <__wrap___aeabi_dcmpeq>
 8008b6a:	f04f 0301 	mov.w	r3, #1
 8008b6e:	b900      	cbnz	r0, 8008b72 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6a>
 8008b70:	4603      	mov	r3, r0
 8008b72:	b2d8      	uxtb	r0, r3
}
 8008b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int compareResult = strcmp(a->data, b->data);
 8008b76:	1da9      	adds	r1, r5, #6
 8008b78:	1da0      	adds	r0, r4, #6
 8008b7a:	f7fb f8fb 	bl	8003d74 <strcmp>
 8008b7e:	fab0 f080 	clz	r0, r0
 8008b82:	0940      	lsrs	r0, r0, #5
}
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	bf00      	nop

08008b88 <_ZN6numops3eqqEPN3pxt12TValueStructES2_>:
TNumber eqq(TNumber a, TNumber b) {
 8008b88:	b508      	push	{r3, lr}
    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8008b8a:	f7ff ffbd 	bl	8008b08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 8008b8e:	2800      	cmp	r0, #0
}
 8008b90:	bf14      	ite	ne
 8008b92:	2042      	movne	r0, #66	; 0x42
 8008b94:	200a      	moveq	r0, #10
 8008b96:	bd08      	pop	{r3, pc}

08008b98 <_ZN6numops4neqqEPN3pxt12TValueStructES2_>:
TNumber neqq(TNumber a, TNumber b) {
 8008b98:	b508      	push	{r3, lr}
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8008b9a:	f7ff ffb5 	bl	8008b08 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 8008b9e:	2800      	cmp	r0, #0
}
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2042      	moveq	r0, #66	; 0x42
 8008ba4:	200a      	movne	r0, #10
 8008ba6:	bd08      	pop	{r3, pc}

08008ba8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8008ba8:	280e      	cmp	r0, #14
 8008baa:	d01a      	beq.n	8008be2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3a>
 8008bac:	290e      	cmp	r1, #14
bool eq_bool(TValue a, TValue b) {
 8008bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb0:	460c      	mov	r4, r1
    if (a == TAG_NAN || b == TAG_NAN)
 8008bb2:	d014      	beq.n	8008bde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 8008bb4:	2806      	cmp	r0, #6
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	d015      	beq.n	8008be6 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x3e>
    if (v == TAG_TRUE)
 8008bba:	2842      	cmp	r0, #66	; 0x42
 8008bbc:	d03f      	beq.n	8008c3e <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x96>
    if (v == TAG_FALSE)
 8008bbe:	280a      	cmp	r0, #10
 8008bc0:	d01c      	beq.n	8008bfc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x54>
    if (v == TAG_NULL)
 8008bc2:	2906      	cmp	r1, #6
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f000 8085 	beq.w	8008cd4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x12c>
    if (v == TAG_TRUE)
 8008bca:	2c42      	cmp	r4, #66	; 0x42
 8008bcc:	d011      	beq.n	8008bf2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4a>
    if (v == TAG_FALSE)
 8008bce:	2c0a      	cmp	r4, #10
 8008bd0:	d037      	beq.n	8008c42 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9a>
    if (eqFixup(a) == eqFixup(b))
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	d010      	beq.n	8008bf8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
 8008bd6:	f004 0301 	and.w	r3, r4, #1
    if (bothNumbers(a, b))
 8008bda:	421d      	tst	r5, r3
 8008bdc:	d011      	beq.n	8008c02 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return false;
 8008bde:	2000      	movs	r0, #0
}
 8008be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8008be2:	2000      	movs	r0, #0
}
 8008be4:	4770      	bx	lr
    if (v == TAG_NULL)
 8008be6:	2906      	cmp	r1, #6
 8008be8:	d006      	beq.n	8008bf8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    if (v == TAG_TRUE)
 8008bea:	2c42      	cmp	r4, #66	; 0x42
        return TAG_UNDEFINED;
 8008bec:	f04f 0300 	mov.w	r3, #0
    if (v == TAG_TRUE)
 8008bf0:	d1ed      	bne.n	8008bce <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x26>
        return TAG_NUMBER(1);
 8008bf2:	2203      	movs	r2, #3
    if (eqFixup(a) == eqFixup(b))
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d104      	bne.n	8008c02 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return true;
 8008bf8:	2001      	movs	r0, #1
}
 8008bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(0);
 8008bfc:	2301      	movs	r3, #1
    if (v == TAG_NULL)
 8008bfe:	2c06      	cmp	r4, #6
 8008c00:	d1e3      	bne.n	8008bca <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x22>
    ValType ta = valType(a);
 8008c02:	4628      	mov	r0, r5
 8008c04:	f7ff fc8e 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008c08:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fc8a 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if ((ta == ValType::String && tb == ValType::Number) ||
 8008c10:	2e03      	cmp	r6, #3
 8008c12:	d022      	beq.n	8008c5a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb2>
 8008c14:	2803      	cmp	r0, #3
 8008c16:	d02f      	beq.n	8008c78 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xd0>
    if (ta == ValType::Boolean) {
 8008c18:	2e01      	cmp	r6, #1
 8008c1a:	d014      	beq.n	8008c46 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9e>
    if (tb == ValType::Boolean) {
 8008c1c:	2801      	cmp	r0, #1
 8008c1e:	d021      	beq.n	8008c64 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xbc>
    if (ta != tb)
 8008c20:	4286      	cmp	r6, r0
 8008c22:	d1dc      	bne.n	8008bde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if ((aa | bb) & 3)
 8008c24:	ea45 0304 	orr.w	r3, r5, r4
 8008c28:	079b      	lsls	r3, r3, #30
 8008c2a:	d1d8      	bne.n	8008bde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (ta == ValType::String)
 8008c2c:	2803      	cmp	r0, #3
 8008c2e:	d047      	beq.n	8008cc0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x118>
    else if (ta == ValType::Number)
 8008c30:	2802      	cmp	r0, #2
 8008c32:	d028      	beq.n	8008c86 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
        return a == b;
 8008c34:	1b60      	subs	r0, r4, r5
 8008c36:	fab0 f080 	clz	r0, r0
 8008c3a:	0940      	lsrs	r0, r0, #5
}
 8008c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_NUMBER(1);
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e7dd      	b.n	8008bfe <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>
        return TAG_NUMBER(0);
 8008c42:	2201      	movs	r2, #1
 8008c44:	e7d6      	b.n	8008bf4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>
    if (v == TAG_NULL)
 8008c46:	2d06      	cmp	r5, #6
 8008c48:	d033      	beq.n	8008cb2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x10a>
    if (v == TAG_TRUE)
 8008c4a:	2d42      	cmp	r5, #66	; 0x42
        ta = ValType::Number;
 8008c4c:	f04f 0602 	mov.w	r6, #2
    if (v == TAG_TRUE)
 8008c50:	d034      	beq.n	8008cbc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x114>
    if (v == TAG_FALSE)
 8008c52:	2d0a      	cmp	r5, #10
 8008c54:	d1e2      	bne.n	8008c1c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(0);
 8008c56:	2501      	movs	r5, #1
 8008c58:	e7e0      	b.n	8008c1c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if ((ta == ValType::String && tb == ValType::Number) ||
 8008c5a:	2802      	cmp	r0, #2
 8008c5c:	d013      	beq.n	8008c86 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
 8008c5e:	2803      	cmp	r0, #3
 8008c60:	d1dc      	bne.n	8008c1c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
 8008c62:	e7df      	b.n	8008c24 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x7c>
    if (v == TAG_NULL)
 8008c64:	2c06      	cmp	r4, #6
        tb = ValType::Number;
 8008c66:	f04f 0002 	mov.w	r0, #2
    if (v == TAG_NULL)
 8008c6a:	d020      	beq.n	8008cae <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x106>
    if (v == TAG_TRUE)
 8008c6c:	2c42      	cmp	r4, #66	; 0x42
 8008c6e:	d023      	beq.n	8008cb8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x110>
    if (v == TAG_FALSE)
 8008c70:	2c0a      	cmp	r4, #10
 8008c72:	d1d5      	bne.n	8008c20 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        return TAG_NUMBER(0);
 8008c74:	2401      	movs	r4, #1
 8008c76:	e7d3      	b.n	8008c20 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        (tb == ValType::String && ta == ValType::Number))
 8008c78:	2e02      	cmp	r6, #2
 8008c7a:	d004      	beq.n	8008c86 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xde>
    if (ta == ValType::Boolean) {
 8008c7c:	2e01      	cmp	r6, #1
 8008c7e:	d1ae      	bne.n	8008bde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
    if (v == TAG_NULL)
 8008c80:	2d06      	cmp	r5, #6
 8008c82:	d1e2      	bne.n	8008c4a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xa2>
 8008c84:	e7ab      	b.n	8008bde <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x36>
        return toDouble(a) == toDouble(b);
 8008c86:	4628      	mov	r0, r5
 8008c88:	f7ff fc70 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	4620      	mov	r0, r4
 8008c90:	460f      	mov	r7, r1
 8008c92:	f7ff fc6b 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	f7fa f9fd 	bl	800309c <__wrap___aeabi_dcmpeq>
 8008ca2:	f04f 0401 	mov.w	r4, #1
 8008ca6:	b900      	cbnz	r0, 8008caa <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x102>
 8008ca8:	4604      	mov	r4, r0
 8008caa:	b2e0      	uxtb	r0, r4
}
 8008cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 8008cae:	2400      	movs	r4, #0
 8008cb0:	e7b6      	b.n	8008c20 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
        ta = ValType::Number;
 8008cb2:	2602      	movs	r6, #2
        return TAG_UNDEFINED;
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	e7b1      	b.n	8008c1c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
        return TAG_NUMBER(1);
 8008cb8:	2403      	movs	r4, #3
 8008cba:	e7b1      	b.n	8008c20 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x78>
 8008cbc:	2503      	movs	r5, #3
 8008cbe:	e7ad      	b.n	8008c1c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x74>
    if (a == b)
 8008cc0:	42ac      	cmp	r4, r5
 8008cc2:	d099      	beq.n	8008bf8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x50>
    int compareResult = strcmp(a->data, b->data);
 8008cc4:	1da1      	adds	r1, r4, #6
 8008cc6:	1da8      	adds	r0, r5, #6
 8008cc8:	f7fb f854 	bl	8003d74 <strcmp>
 8008ccc:	fab0 f080 	clz	r0, r0
 8008cd0:	0940      	lsrs	r0, r0, #5
}
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TAG_UNDEFINED;
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	e78d      	b.n	8008bf4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x4c>

08008cd8 <_ZN3pxt9switch_eqEPNS_12TValueStructES1_>:
    if (eq_bool(a, b)) {
 8008cd8:	f7ff bf66 	b.w	8008ba8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>

08008cdc <_ZN6numops2eqEPN3pxt12TValueStructES2_>:
TNumber eq(TNumber a, TNumber b) {
 8008cdc:	b508      	push	{r3, lr}
    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8008cde:	f7ff ff63 	bl	8008ba8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 8008ce2:	2800      	cmp	r0, #0
}
 8008ce4:	bf14      	ite	ne
 8008ce6:	2042      	movne	r0, #66	; 0x42
 8008ce8:	200a      	moveq	r0, #10
 8008cea:	bd08      	pop	{r3, pc}

08008cec <_ZN6numops3neqEPN3pxt12TValueStructES2_>:
TNumber neq(TNumber a, TNumber b) {
 8008cec:	b508      	push	{r3, lr}
    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8008cee:	f7ff ff5b 	bl	8008ba8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 8008cf2:	2800      	cmp	r0, #0
}
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2042      	moveq	r0, #66	; 0x42
 8008cf8:	200a      	movne	r0, #10
 8008cfa:	bd08      	pop	{r3, pc}

08008cfc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>:
int indexOf(RefCollection *c, TValue x, int start) {
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned getLength() { return length; };
 8008cfe:	8907      	ldrh	r7, [r0, #8]
    auto data = c->head.getData();
 8008d00:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
 8008d02:	b17f      	cbz	r7, 8008d24 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
 8008d04:	460e      	mov	r6, r1
 8008d06:	2400      	movs	r4, #0
 8008d08:	3d04      	subs	r5, #4
 8008d0a:	e002      	b.n	8008d12 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x16>
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	42a7      	cmp	r7, r4
 8008d10:	d008      	beq.n	8008d24 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
        if (pxt::eq_bool(data[i], x)) {
 8008d12:	4631      	mov	r1, r6
 8008d14:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8008d18:	f7ff ff46 	bl	8008ba8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d0f5      	beq.n	8008d0c <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x10>
            return (int)i;
 8008d20:	4620      	mov	r0, r4
}
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return -1;
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d2a:	bf00      	nop

08008d2c <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
bool removeElement(RefCollection *c, TValue x) {
 8008d2c:	b510      	push	{r4, lr}
    int idx = indexOf(c, x, 0);
 8008d2e:	2200      	movs	r2, #0
bool removeElement(RefCollection *c, TValue x) {
 8008d30:	4604      	mov	r4, r0
    int idx = indexOf(c, x, 0);
 8008d32:	f7ff ffe3 	bl	8008cfc <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>
    if (idx >= 0) {
 8008d36:	1e01      	subs	r1, r0, #0
 8008d38:	db04      	blt.n	8008d44 <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE+0x18>
    return c->head.remove(x);
 8008d3a:	1d20      	adds	r0, r4, #4
 8008d3c:	f001 f82a 	bl	8009d94 <_ZN3pxt7Segment6removeEj>
        return 1;
 8008d40:	2001      	movs	r0, #1
}
 8008d42:	bd10      	pop	{r4, pc}
    return 0;
 8008d44:	2000      	movs	r0, #0
}
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <_ZN6numops6toBoolEPN3pxt12TValueStructE>:
int toBool(TValue v) {
 8008d48:	b538      	push	{r3, r4, r5, lr}
    return ((intptr_t)v & 3) || !v;
 8008d4a:	0783      	lsls	r3, r0, #30
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	d10d      	bne.n	8008d6c <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x24>
 8008d50:	b150      	cbz	r0, 8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
    ValType t = valType(v);
 8008d52:	f7ff fbe7 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008d56:	2803      	cmp	r0, #3
 8008d58:	d003      	beq.n	8008d62 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x1a>
    } else if (t == ValType::Number) {
 8008d5a:	2802      	cmp	r0, #2
 8008d5c:	d013      	beq.n	8008d86 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x3e>
    return 1;
 8008d5e:	2001      	movs	r0, #1
}
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
        if (s->length == 0)
 8008d62:	88a3      	ldrh	r3, [r4, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1fa      	bne.n	8008d5e <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x16>
            return 0;
 8008d68:	2000      	movs	r0, #0
}
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||
 8008d6c:	280a      	cmp	r0, #10
 8008d6e:	d0fb      	beq.n	8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0f9      	beq.n	8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008d74:	280e      	cmp	r0, #14
 8008d76:	d0f7      	beq.n	8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008d78:	2806      	cmp	r0, #6
 8008d7a:	d0f5      	beq.n	8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
 8008d7c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8008d80:	bf18      	it	ne
 8008d82:	2001      	movne	r0, #1
}
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
        auto x = toDouble(v);
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff fbf0 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isnan(__x); }
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	f7fa fa00 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1e5      	bne.n	8008d68 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x20>
        if (isnan(x) || x == 0.0 || x == -0.0)
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	2200      	movs	r2, #0
 8008da2:	2300      	movs	r3, #0
 8008da4:	f7fa f97a 	bl	800309c <__wrap___aeabi_dcmpeq>
 8008da8:	fab0 f080 	clz	r0, r0
 8008dac:	0940      	lsrs	r0, r0, #5
}
 8008dae:	bd38      	pop	{r3, r4, r5, pc}

08008db0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE>:
    if (v == TAG_TRUE)
 8008db0:	2842      	cmp	r0, #66	; 0x42
 8008db2:	d005      	beq.n	8008dc0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0x10>
    if (v == TAG_FALSE)
 8008db4:	280a      	cmp	r0, #10
 8008db6:	d001      	beq.n	8008dbc <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0xc>
    int r = toBool(v);
 8008db8:	f7ff bfc6 	b.w	8008d48 <_ZN6numops6toBoolEPN3pxt12TValueStructE>
        return 0;
 8008dbc:	2000      	movs	r0, #0
}
 8008dbe:	4770      	bx	lr
        return 1;
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	4770      	bx	lr

08008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>:
    if (a == TAG_NAN || b == TAG_NAN)
 8008dc4:	280e      	cmp	r0, #14
 8008dc6:	d04d      	beq.n	8008e64 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
 8008dc8:	290e      	cmp	r1, #14
 8008dca:	d04b      	beq.n	8008e64 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
static int valCompare(TValue a, TValue b) {
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4605      	mov	r5, r0
    ValType ta = valType(a);
 8008dd2:	f7ff fba7 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8008dd6:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f7ff fba3 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (ta == ValType::String && tb == ValType::String)
 8008dde:	2e03      	cmp	r6, #3
 8008de0:	d02c      	beq.n	8008e3c <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x78>
    if (a == b)
 8008de2:	42a5      	cmp	r5, r4
 8008de4:	d028      	beq.n	8008e38 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    auto da = toDouble(a);
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7ff fbc0 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008dec:	4606      	mov	r6, r0
    auto db = toDouble(b);
 8008dee:	4620      	mov	r0, r4
    auto da = toDouble(a);
 8008df0:	460f      	mov	r7, r1
    auto db = toDouble(b);
 8008df2:	f7ff fbbb 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8008df6:	4632      	mov	r2, r6
 8008df8:	4604      	mov	r4, r0
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7fa f9c9 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008e06:	bb38      	cbnz	r0, 8008e58 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
 8008e08:	4622      	mov	r2, r4
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7fa f9c2 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008e14:	bb00      	cbnz	r0, 8008e58 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
    if (da < db)
 8008e16:	4622      	mov	r2, r4
 8008e18:	462b      	mov	r3, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	f7fa f957 	bl	80030d0 <__wrap___aeabi_dcmplt>
 8008e22:	b9e0      	cbnz	r0, 8008e5e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (da > db)
 8008e24:	4622      	mov	r2, r4
 8008e26:	462b      	mov	r3, r5
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7fa f99a 	bl	8003164 <__wrap___aeabi_dcmpgt>
 8008e30:	3000      	adds	r0, #0
 8008e32:	bf18      	it	ne
 8008e34:	2001      	movne	r0, #1
}
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8008e38:	2000      	movs	r0, #0
}
 8008e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ta == ValType::String && tb == ValType::String)
 8008e3c:	2803      	cmp	r0, #3
 8008e3e:	d1d0      	bne.n	8008de2 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x1e>
    if (a == b)
 8008e40:	42a5      	cmp	r5, r4
 8008e42:	d0f9      	beq.n	8008e38 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
    int compareResult = strcmp(a->data, b->data);
 8008e44:	1da1      	adds	r1, r4, #6
 8008e46:	1da8      	adds	r0, r5, #6
 8008e48:	f7fa ff94 	bl	8003d74 <strcmp>
    if (compareResult < 0)
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	db06      	blt.n	8008e5e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
    else if (compareResult > 0)
 8008e50:	bf14      	ite	ne
 8008e52:	2001      	movne	r0, #1
 8008e54:	2000      	moveq	r0, #0
}
 8008e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008e58:	f06f 0001 	mvn.w	r0, #1
}
 8008e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
 8008e64:	f06f 0001 	mvn.w	r0, #1
}
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop

08008e6c <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_>:
bool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}
 8008e6c:	b538      	push	{r3, r4, r5, lr}
    return (intptr_t)a & (intptr_t)b & 1;
 8008e6e:	f001 0301 	and.w	r3, r1, #1
 8008e72:	ea13 0400 	ands.w	r4, r3, r0
 8008e76:	d004      	beq.n	8008e82 <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_+0x16>
 8008e78:	4288      	cmp	r0, r1
 8008e7a:	bfac      	ite	ge
 8008e7c:	2000      	movge	r0, #0
 8008e7e:	2001      	movlt	r0, #1
 8008e80:	bd38      	pop	{r3, r4, r5, pc}
 8008e82:	f7ff ff9f 	bl	8008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008e86:	1c83      	adds	r3, r0, #2
 8008e88:	bf14      	ite	ne
 8008e8a:	0fc0      	lsrne	r0, r0, #31
 8008e8c:	4620      	moveq	r0, r4
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}

08008e90 <_ZN6numops2leEPN3pxt12TValueStructES2_>:
TNumber le(TNumber a, TNumber b){CMPOP(<=)}
 8008e90:	b510      	push	{r4, lr}
 8008e92:	f001 0401 	and.w	r4, r1, #1
 8008e96:	4220      	tst	r0, r4
 8008e98:	d003      	beq.n	8008ea2 <_ZN6numops2leEPN3pxt12TValueStructES2_+0x12>
 8008e9a:	4288      	cmp	r0, r1
 8008e9c:	dc07      	bgt.n	8008eae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 8008e9e:	2042      	movs	r0, #66	; 0x42
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	f7ff ff8f 	bl	8008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008ea6:	1c83      	adds	r3, r0, #2
 8008ea8:	d001      	beq.n	8008eae <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	ddf7      	ble.n	8008e9e <_ZN6numops2leEPN3pxt12TValueStructES2_+0xe>
 8008eae:	200a      	movs	r0, #10
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	bf00      	nop

08008eb4 <_ZN6numops2ltEPN3pxt12TValueStructES2_>:
TNumber lt(TNumber a, TNumber b){CMPOP(<)}
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	f001 0401 	and.w	r4, r1, #1
 8008eba:	4220      	tst	r0, r4
 8008ebc:	d003      	beq.n	8008ec6 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x12>
 8008ebe:	4288      	cmp	r0, r1
 8008ec0:	da07      	bge.n	8008ed2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 8008ec2:	2042      	movs	r0, #66	; 0x42
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	f7ff ff7d 	bl	8008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008eca:	1c83      	adds	r3, r0, #2
 8008ecc:	d001      	beq.n	8008ed2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	dbf7      	blt.n	8008ec2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0xe>
 8008ed2:	200a      	movs	r0, #10
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	bf00      	nop

08008ed8 <_ZN6numops2geEPN3pxt12TValueStructES2_>:
TNumber ge(TNumber a, TNumber b){CMPOP(>=)}
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	f001 0401 	and.w	r4, r1, #1
 8008ede:	4220      	tst	r0, r4
 8008ee0:	d003      	beq.n	8008eea <_ZN6numops2geEPN3pxt12TValueStructES2_+0x12>
 8008ee2:	4288      	cmp	r0, r1
 8008ee4:	db05      	blt.n	8008ef2 <_ZN6numops2geEPN3pxt12TValueStructES2_+0x1a>
 8008ee6:	2042      	movs	r0, #66	; 0x42
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	f7ff ff6b 	bl	8008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	daf9      	bge.n	8008ee6 <_ZN6numops2geEPN3pxt12TValueStructES2_+0xe>
 8008ef2:	200a      	movs	r0, #10
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	bf00      	nop

08008ef8 <_ZN6numops2gtEPN3pxt12TValueStructES2_>:
TNumber gt(TNumber a, TNumber b){CMPOP(>)}
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	f001 0401 	and.w	r4, r1, #1
 8008efe:	4220      	tst	r0, r4
 8008f00:	d003      	beq.n	8008f0a <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x12>
 8008f02:	4288      	cmp	r0, r1
 8008f04:	dd05      	ble.n	8008f12 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x1a>
 8008f06:	2042      	movs	r0, #66	; 0x42
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	f7ff ff5b 	bl	8008dc4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dcf9      	bgt.n	8008f06 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0xe>
 8008f12:	200a      	movs	r0, #10
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop

08008f18 <_ZN6numops8toStringEPN3pxt12TValueStructE>:
String toString(TValue v) {
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	b090      	sub	sp, #64	; 0x40
 8008f1c:	4604      	mov	r4, r0
    ValType t = valType(v);
 8008f1e:	f7ff fb01 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 8008f22:	2803      	cmp	r0, #3
 8008f24:	d03d      	beq.n	8008fa2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8a>
    } else if (t == ValType::Number) {
 8008f26:	2802      	cmp	r0, #2
 8008f28:	d00f      	beq.n	8008f4a <_ZN6numops8toStringEPN3pxt12TValueStructE+0x32>
    } else if (t == ValType::Function) {
 8008f2a:	2805      	cmp	r0, #5
 8008f2c:	d048      	beq.n	8008fc0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa8>
        if (v == TAG_UNDEFINED)
 8008f2e:	2c00      	cmp	r4, #0
 8008f30:	d04c      	beq.n	8008fcc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb4>
        else if (v == TAG_FALSE)
 8008f32:	2c0a      	cmp	r4, #10
 8008f34:	d042      	beq.n	8008fbc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xa4>
        else if (v == TAG_NAN)
 8008f36:	2c0e      	cmp	r4, #14
 8008f38:	d045      	beq.n	8008fc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        else if (v == TAG_TRUE)
 8008f3a:	2c42      	cmp	r4, #66	; 0x42
 8008f3c:	d055      	beq.n	8008fea <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd2>
        return (String)(void *)sObject;
 8008f3e:	4b2c      	ldr	r3, [pc, #176]	; (8008ff0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd8>)
 8008f40:	482c      	ldr	r0, [pc, #176]	; (8008ff4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xdc>)
 8008f42:	2c06      	cmp	r4, #6
 8008f44:	bf08      	it	eq
 8008f46:	4618      	moveq	r0, r3
 8008f48:	e02c      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        if (isNumber(v)) {
 8008f4a:	07e3      	lsls	r3, r4, #31
 8008f4c:	d42c      	bmi.n	8008fa8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x90>
        if (v == TAG_NAN)
 8008f4e:	2c0e      	cmp	r4, #14
 8008f50:	d039      	beq.n	8008fc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        auto x = toDouble(v);
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fb0a 	bl	800856c <_ZN3pxt8toDoubleEPNS_12TValueStructE>
  { return __builtin_isinf(__x); }
 8008f58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008f5c:	460d      	mov	r5, r1
        if (isinf(x)) {
 8008f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f62:	4631      	mov	r1, r6
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
        auto x = toDouble(v);
 8008f66:	4604      	mov	r4, r0
        if (isinf(x)) {
 8008f68:	f7fa f916 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008f6c:	b938      	cbnz	r0, 8008f7e <_ZN6numops8toStringEPN3pxt12TValueStructE+0x66>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4631      	mov	r1, r6
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f76:	4b20      	ldr	r3, [pc, #128]	; (8008ff8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
 8008f78:	f7fa f8c2 	bl	8003100 <__wrap___aeabi_dcmple>
 8008f7c:	b340      	cbz	r0, 8008fd0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb8>
  { return __builtin_isnan(__x); }
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4620      	mov	r0, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7fa f907 	bl	8003198 <__wrap___aeabi_dcmpun>
 8008f8a:	b9e0      	cbnz	r0, 8008fc6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        mycvt(x, buf);
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	466a      	mov	r2, sp
 8008f92:	f7fe fac9 	bl	8007528 <_ZN6numops5mycvtEdPc>
        return mkString(buf);
 8008f96:	4668      	mov	r0, sp
 8008f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f9c:	f7fe feda 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
 8008fa0:	e000      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 8008fa2:	4620      	mov	r0, r4
}
 8008fa4:	b010      	add	sp, #64	; 0x40
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
            itoa(numValue(v), buf);
 8008fa8:	4669      	mov	r1, sp
 8008faa:	1060      	asrs	r0, r4, #1
 8008fac:	f001 fd4a 	bl	800aa44 <_ZN5codal4itoaEiPc>
            return mkString(buf);
 8008fb0:	4668      	mov	r0, sp
 8008fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008fb6:	f7fe fecd 	bl	8007d54 <_ZN3pxt8mkStringEPKci>
 8008fba:	e7f3      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sFalse;
 8008fbc:	480f      	ldr	r0, [pc, #60]	; (8008ffc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe4>)
 8008fbe:	e7f1      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
        return (String)(void *)sFunction;
 8008fc0:	480f      	ldr	r0, [pc, #60]	; (8009000 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe8>)
}
 8008fc2:	b010      	add	sp, #64	; 0x40
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sNaN;
 8008fc6:	480f      	ldr	r0, [pc, #60]	; (8009004 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xec>)
}
 8008fc8:	b010      	add	sp, #64	; 0x40
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
            return (String)(void *)sUndefined;
 8008fcc:	480e      	ldr	r0, [pc, #56]	; (8009008 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf0>)
 8008fce:	e7e9      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            if (x < 0)
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f7fa f87a 	bl	80030d0 <__wrap___aeabi_dcmplt>
                return (String)(void *)sInf;
 8008fdc:	4c0b      	ldr	r4, [pc, #44]	; (800900c <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf4>)
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf8>)
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	bf14      	ite	ne
 8008fe4:	4620      	movne	r0, r4
 8008fe6:	4618      	moveq	r0, r3
 8008fe8:	e7dc      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
            return (String)(void *)sTrue;
 8008fea:	480a      	ldr	r0, [pc, #40]	; (8009014 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xfc>)
 8008fec:	e7da      	b.n	8008fa4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x8c>
 8008fee:	bf00      	nop
 8008ff0:	0800d220 	.word	0x0800d220
 8008ff4:	0800d244 	.word	0x0800d244
 8008ff8:	7fefffff 	.word	0x7fefffff
 8008ffc:	0800d238 	.word	0x0800d238
 8009000:	0800d254 	.word	0x0800d254
 8009004:	0800d204 	.word	0x0800d204
 8009008:	0800d1b0 	.word	0x0800d1b0
 800900c:	0800d210 	.word	0x0800d210
 8009010:	0800d1f4 	.word	0x0800d1f4
 8009014:	0800d22c 	.word	0x0800d22c

08009018 <_ZN3pxt6typeOfEPNS_12TValueStructE>:
String typeOf(TValue v) {
 8009018:	b508      	push	{r3, lr}
    switch (valType(v)) {
 800901a:	f7ff fa83 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 800901e:	2805      	cmp	r0, #5
 8009020:	d810      	bhi.n	8009044 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x2c>
 8009022:	e8df f000 	tbb	[pc, r0]
 8009026:	0503      	.short	0x0503
 8009028:	0d0b0907 	.word	0x0d0b0907
        return (String)sUndefinedTp;
 800902c:	4808      	ldr	r0, [pc, #32]	; (8009050 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x38>)
}
 800902e:	bd08      	pop	{r3, pc}
        return (String)sBooleanTp;
 8009030:	4808      	ldr	r0, [pc, #32]	; (8009054 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x3c>)
}
 8009032:	bd08      	pop	{r3, pc}
        return (String)sNumberTp;
 8009034:	4808      	ldr	r0, [pc, #32]	; (8009058 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x40>)
}
 8009036:	bd08      	pop	{r3, pc}
        return (String)sStringTp;
 8009038:	4808      	ldr	r0, [pc, #32]	; (800905c <_ZN3pxt6typeOfEPNS_12TValueStructE+0x44>)
}
 800903a:	bd08      	pop	{r3, pc}
        return (String)sObjectTp;
 800903c:	4808      	ldr	r0, [pc, #32]	; (8009060 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x48>)
}
 800903e:	bd08      	pop	{r3, pc}
        return (String)sFunctionTp;
 8009040:	4808      	ldr	r0, [pc, #32]	; (8009064 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x4c>)
}
 8009042:	bd08      	pop	{r3, pc}
    target_panic(800 + subcode);
 8009044:	f240 3022 	movw	r0, #802	; 0x322
 8009048:	f7f7 fd9c 	bl	8000b84 <target_panic>
        return 0;
 800904c:	2000      	movs	r0, #0
}
 800904e:	bd08      	pop	{r3, pc}
 8009050:	0800d1e4 	.word	0x0800d1e4
 8009054:	0800d1a0 	.word	0x0800d1a0
 8009058:	0800d268 	.word	0x0800d268
 800905c:	0800d288 	.word	0x0800d288
 8009060:	0800d278 	.word	0x0800d278
 8009064:	0800d1d4 	.word	0x0800d1d4

08009068 <_ZN3pxt8anyPrintEPNS_12TValueStructE>:
void anyPrint(TValue v) {
 8009068:	b530      	push	{r4, r5, lr}
 800906a:	b083      	sub	sp, #12
 800906c:	4604      	mov	r4, r0
    if (valType(v) == ValType::Object) {
 800906e:	f7ff fa59 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8009072:	2804      	cmp	r0, #4
 8009074:	d116      	bne.n	80090a4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x3c>
    return ((intptr_t)v & 3) || !v;
 8009076:	f014 0103 	ands.w	r1, r4, #3
 800907a:	d10c      	bne.n	8009096 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
 800907c:	b15c      	cbz	r4, 8009096 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 800907e:	6822      	ldr	r2, [r4, #0]
            if ((void *)meth == (void *)&anyPrint)
 8009080:	4d14      	ldr	r5, [pc, #80]	; (80090d4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x6c>)
 8009082:	f022 0001 	bic.w	r0, r2, #1
            auto meth = ((RefObjectMethod)vt->methods[1]);
 8009086:	6943      	ldr	r3, [r0, #20]
            if ((void *)meth == (void *)&anyPrint)
 8009088:	42ab      	cmp	r3, r5
 800908a:	d01b      	beq.n	80090c4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x5c>
                meth(o);
 800908c:	4620      	mov	r0, r4
}
 800908e:	b003      	add	sp, #12
 8009090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                meth(o);
 8009094:	4718      	bx	r3
            DMESG("[Native %p]", v);
 8009096:	4621      	mov	r1, r4
 8009098:	480f      	ldr	r0, [pc, #60]	; (80090d8 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x70>)
}
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            DMESG("[Native %p]", v);
 80090a0:	f001 becc 	b.w	800ae3c <codal_dmesg>
        String s = numops::toString(v);
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7ff ff37 	bl	8008f18 <_ZN6numops8toStringEPN3pxt12TValueStructE>
 80090aa:	4605      	mov	r5, r0
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7ff ffb3 	bl	8009018 <_ZN3pxt6typeOfEPNS_12TValueStructE>
 80090b2:	4622      	mov	r2, r4
 80090b4:	1d81      	adds	r1, r0, #6
 80090b6:	4809      	ldr	r0, [pc, #36]	; (80090dc <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x74>)
 80090b8:	1dab      	adds	r3, r5, #6
}
 80090ba:	b003      	add	sp, #12
 80090bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 80090c0:	f001 bebc 	b.w	800ae3c <codal_dmesg>
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
 80090c4:	8903      	ldrh	r3, [r0, #8]
 80090c6:	8800      	ldrh	r0, [r0, #0]
 80090c8:	9000      	str	r0, [sp, #0]
 80090ca:	4805      	ldr	r0, [pc, #20]	; (80090e0 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x78>)
 80090cc:	f001 feb6 	bl	800ae3c <codal_dmesg>
}
 80090d0:	b003      	add	sp, #12
 80090d2:	bd30      	pop	{r4, r5, pc}
 80090d4:	08009069 	.word	0x08009069
 80090d8:	0800d184 	.word	0x0800d184
 80090dc:	0800d190 	.word	0x0800d190
 80090e0:	0800d15c 	.word	0x0800d15c

080090e4 <_ZN3pxt10failedCastEPNS_12TValueStructE>:
// PRIM_VTABLE(action, ValType::Function, RefAction, )

void failedCast(TValue v) {
 80090e4:	b510      	push	{r4, lr}
 80090e6:	4604      	mov	r4, r0
    DMESG("failed type check for %p", v);
 80090e8:	4811      	ldr	r0, [pc, #68]	; (8009130 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x4c>)
 80090ea:	4621      	mov	r1, r4
 80090ec:	f001 fea6 	bl	800ae3c <codal_dmesg>
    return ((intptr_t)v & 3) || !v;
 80090f0:	07a3      	lsls	r3, r4, #30
 80090f2:	d106      	bne.n	8009102 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 80090f4:	b16c      	cbz	r4, 8009112 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
    return (VTable *)(r->vtable & ~1);
 80090f6:	6821      	ldr	r1, [r4, #0]
 80090f8:	f021 0101 	bic.w	r1, r1, #1
    if (vt->magic == VTABLE_MAGIC)
 80090fc:	78cb      	ldrb	r3, [r1, #3]
 80090fe:	2bf9      	cmp	r3, #249	; 0xf9
 8009100:	d010      	beq.n	8009124 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x40>
    if (vt) {
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
    }

    int code;
    if (v == TAG_NULL)
 8009102:	2c06      	cmp	r4, #6
 8009104:	d105      	bne.n	8009112 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
}
 8009106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FROM_NULL;
 800910a:	f240 30dd 	movw	r0, #989	; 0x3dd
    target_panic(code);
 800910e:	f7f7 bd39 	b.w	8000b84 <target_panic>
        code = PANIC_CAST_FIRST + (int)valType(v);
 8009112:	4620      	mov	r0, r4
 8009114:	f7ff fa06 	bl	8008524 <_ZN3pxt7valTypeEPNS_12TValueStructE>
}
 8009118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        code = PANIC_CAST_FIRST + (int)valType(v);
 800911c:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
    target_panic(code);
 8009120:	f7f7 bd30 	b.w	8000b84 <target_panic>
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
 8009124:	890b      	ldrh	r3, [r1, #8]
 8009126:	788a      	ldrb	r2, [r1, #2]
 8009128:	4802      	ldr	r0, [pc, #8]	; (8009134 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x50>)
 800912a:	f001 fe87 	bl	800ae3c <codal_dmesg>
 800912e:	e7e8      	b.n	8009102 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 8009130:	0800d108 	.word	0x0800d108
 8009134:	0800d124 	.word	0x0800d124

08009138 <_ZN3pxt15missingPropertyEPNS_12TValueStructE>:

void missingProperty(TValue v) {
 8009138:	b508      	push	{r3, lr}
    DMESG("missing property on %p", v);
 800913a:	4601      	mov	r1, r0
 800913c:	4804      	ldr	r0, [pc, #16]	; (8009150 <_ZN3pxt15missingPropertyEPNS_12TValueStructE+0x18>)
 800913e:	f001 fe7d 	bl	800ae3c <codal_dmesg>
    target_panic(PANIC_MISSING_PROPERTY);
}
 8009142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    target_panic(PANIC_MISSING_PROPERTY);
 8009146:	f44f 7064 	mov.w	r0, #912	; 0x390
 800914a:	f7f7 bd1b 	b.w	8000b84 <target_panic>
 800914e:	bf00      	nop
 8009150:	0800d144 	.word	0x0800d144

08009154 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>:
    for (unsigned i = 0; i < len; ++i) {
        gcProcess(*data++);
    }
}

static uint32_t getObjectSize(RefObject *o) {
 8009154:	b538      	push	{r3, r4, r5, lr}
    auto vt = o->vtable & ~ANY_MARKED_MASK;
 8009156:	6804      	ldr	r4, [r0, #0]
static uint32_t getObjectSize(RefObject *o) {
 8009158:	4605      	mov	r5, r0
    uint32_t r;
    GC_CHECK(vt != 0, 49);
 800915a:	f034 0403 	bics.w	r4, r4, #3
 800915e:	d011      	beq.n	8009184 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x30>
    if (IS_VAR_BLOCK(vt)) {
 8009160:	0fa3      	lsrs	r3, r4, #30
 8009162:	d114      	bne.n	800918e <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x3a>
        r = VAR_BLOCK_WORDS(vt);
    } else {
        auto sz = getSizeMethod(vt);
        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);
        r = sz(o);
 8009164:	4628      	mov	r0, r5
 8009166:	69e3      	ldr	r3, [r4, #28]
 8009168:	4798      	blx	r3
 800916a:	4605      	mov	r5, r0
    }
    GC_CHECK(1 <= r && (r <= (GC_MAX_ALLOC_SIZE >> 2) || IS_FREE(vt)), 48);
 800916c:	b125      	cbz	r5, 8009178 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x24>
 800916e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009172:	d905      	bls.n	8009180 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
 8009174:	2c00      	cmp	r4, #0
 8009176:	db03      	blt.n	8009180 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
    target_panic(800 + subcode);
 8009178:	f44f 7054 	mov.w	r0, #848	; 0x350
 800917c:	f7f7 fd02 	bl	8000b84 <target_panic>
    return r;
}
 8009180:	4628      	mov	r0, r5
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	f240 3051 	movw	r0, #849	; 0x351
 8009188:	f7f7 fcfc 	bl	8000b84 <target_panic>
 800918c:	e7ea      	b.n	8009164 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x10>
        r = VAR_BLOCK_WORDS(vt);
 800918e:	f3c4 0591 	ubfx	r5, r4, #2, #18
 8009192:	e7eb      	b.n	800916c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x18>

08009194 <_ZN3pxtL9removePtrEPNS_12TValueStructE>:
        else
            oops(44);
    }
}

static void removePtr(TValue v) {
 8009194:	b538      	push	{r3, r4, r5, lr}
    auto len = gcRoots.getLength();
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
    unsigned getLength() { return length; };
 8009198:	889d      	ldrh	r5, [r3, #4]
    auto data = gcRoots.getData();
 800919a:	681c      	ldr	r4, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 800919c:	b175      	cbz	r5, 80091bc <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x28>
        if (data[i] == v) {
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	4298      	cmp	r0, r3
 80091a2:	d011      	beq.n	80091c8 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x34>
    for (unsigned i = 0; i < len; ++i) {
 80091a4:	2300      	movs	r3, #0
 80091a6:	1d22      	adds	r2, r4, #4
 80091a8:	e005      	b.n	80091b6 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x22>
        if (data[i] == v) {
 80091aa:	6811      	ldr	r1, [r2, #0]
 80091ac:	4614      	mov	r4, r2
 80091ae:	4281      	cmp	r1, r0
 80091b0:	f102 0204 	add.w	r2, r2, #4
 80091b4:	d009      	beq.n	80091ca <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x36>
    for (unsigned i = 0; i < len; ++i) {
 80091b6:	3301      	adds	r3, #1
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	d1f6      	bne.n	80091aa <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x16>
    target_panic(800 + subcode);
 80091bc:	f44f 7052 	mov.w	r0, #840	; 0x348
            }
            return;
        }
    }
    oops(40);
}
 80091c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c4:	f7f7 bcde 	b.w	8000b84 <target_panic>
    for (unsigned i = 0; i < len; ++i) {
 80091c8:	2300      	movs	r3, #0
            if (i == len - 1) {
 80091ca:	3d01      	subs	r5, #1
 80091cc:	429d      	cmp	r5, r3
                gcRoots.pop();
 80091ce:	4805      	ldr	r0, [pc, #20]	; (80091e4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
            if (i == len - 1) {
 80091d0:	d003      	beq.n	80091da <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x46>
                data[i] = gcRoots.pop();
 80091d2:	f000 fd4b 	bl	8009c6c <_ZN3pxt9LLSegment3popEv>
 80091d6:	6020      	str	r0, [r4, #0]
}
 80091d8:	bd38      	pop	{r3, r4, r5, pc}
 80091da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                gcRoots.pop();
 80091de:	f000 bd45 	b.w	8009c6c <_ZN3pxt9LLSegment3popEv>
 80091e2:	bf00      	nop
 80091e4:	20001018 	.word	0x20001018

080091e8 <_ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	f023 0301 	bic.w	r3, r3, #1
    return tbl->numbytes >> 2;
 80091ee:	8818      	ldrh	r0, [r3, #0]
}
 80091f0:	0880      	lsrs	r0, r0, #2
 80091f2:	4770      	bx	lr

080091f4 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE>:
    if (!ctx)
 80091f4:	b330      	cbz	r0, 8009244 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x50>
void popThreadContext(ThreadContext *ctx) {
 80091f6:	b538      	push	{r3, r4, r5, lr}
    auto n = ctx->stack.next;
 80091f8:	68c5      	ldr	r5, [r0, #12]
 80091fa:	4604      	mov	r4, r0
    if (n) {
 80091fc:	b1a5      	cbz	r5, 8009228 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x34>
        ctx->stack.top = n->top;
 80091fe:	e955 3101 	ldrd	r3, r1, [r5, #-4]
        ctx->stack.bottom = n->bottom;
 8009202:	6868      	ldr	r0, [r5, #4]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8009204:	0f5a      	lsrs	r2, r3, #29
        ctx->stack.top = n->top;
 8009206:	6061      	str	r1, [r4, #4]
        ctx->stack.next = n->next;
 8009208:	68a9      	ldr	r1, [r5, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 800920a:	2a03      	cmp	r2, #3
        ctx->stack.next = n->next;
 800920c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8009210:	d005      	beq.n	800921e <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x2a>
    target_panic(800 + subcode);
 8009212:	f240 3049 	movw	r0, #841	; 0x349
 8009216:	f7f7 fcb5 	bl	8000b84 <target_panic>
 800921a:	f855 3c04 	ldr.w	r3, [r5, #-4]
    r[-1] |= FREE_MASK;
 800921e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009222:	f845 3c04 	str.w	r3, [r5, #-4]
}
 8009226:	bd38      	pop	{r3, r4, r5, pc}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 8009228:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800922c:	0f5a      	lsrs	r2, r3, #29
 800922e:	2a03      	cmp	r2, #3
 8009230:	d109      	bne.n	8009246 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x52>
    r[-1] |= FREE_MASK;
 8009232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009236:	f844 3c04 	str.w	r3, [r4, #-4]
        setThreadContext(NULL);
 800923a:	2000      	movs	r0, #0
}
 800923c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        setThreadContext(NULL);
 8009240:	f001 b8a4 	b.w	800a38c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 8009244:	4770      	bx	lr
 8009246:	f240 3049 	movw	r0, #841	; 0x349
 800924a:	f7f7 fc9b 	bl	8000b84 <target_panic>
 800924e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009252:	e7ee      	b.n	8009232 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x3e>

08009254 <_ZN3pxt6gcScanEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009254:	0783      	lsls	r3, r0, #30
 8009256:	d109      	bne.n	800926c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8009258:	b140      	cbz	r0, 800926c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    return isTagged(v) || !((uint32_t)v >> 28);
 800925a:	0f03      	lsrs	r3, r0, #28
 800925c:	d006      	beq.n	800926c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
    if (SKIP_PROCESSING(v))
 800925e:	6803      	ldr	r3, [r0, #0]
 8009260:	4a08      	ldr	r2, [pc, #32]	; (8009284 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x30>)
 8009262:	4213      	tst	r3, r2
 8009264:	d102      	bne.n	800926c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8009266:	78da      	ldrb	r2, [r3, #3]
 8009268:	2af9      	cmp	r2, #249	; 0xf9
 800926a:	d000      	beq.n	800926e <_ZN3pxt6gcScanEPNS_12TValueStructE+0x1a>
 800926c:	4770      	bx	lr
void gcScan(TValue v) {
 800926e:	b410      	push	{r4}
    void push(TValue value) { set(length, value); }
 8009270:	4c05      	ldr	r4, [pc, #20]	; (8009288 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x34>)
    MARK(v);
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	6003      	str	r3, [r0, #0]
 8009278:	4602      	mov	r2, r0
 800927a:	88a1      	ldrh	r1, [r4, #4]
 800927c:	4620      	mov	r0, r4
}
 800927e:	bc10      	pop	{r4}
 8009280:	f000 bcdc 	b.w	8009c3c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8009284:	40000003 	.word	0x40000003
 8009288:	20001028 	.word	0x20001028

0800928c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>:
    for (unsigned i = 0; i < len; ++i) {
 800928c:	b1e1      	cbz	r1, 80092c8 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x3c>
void gcScanMany(TValue *data, unsigned len) {
 800928e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009290:	1f04      	subs	r4, r0, #4
        if (SKIP_PROCESSING(v))
 8009292:	4e0e      	ldr	r6, [pc, #56]	; (80092cc <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x40>)
 8009294:	4f0e      	ldr	r7, [pc, #56]	; (80092d0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8009296:	eb04 0581 	add.w	r5, r4, r1, lsl #2
        auto v = data[i];
 800929a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    return ((intptr_t)v & 3) || !v;
 800929e:	0793      	lsls	r3, r2, #30
 80092a0:	d10f      	bne.n	80092c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 80092a2:	b172      	cbz	r2, 80092c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
    return isTagged(v) || !((uint32_t)v >> 28);
 80092a4:	0f13      	lsrs	r3, r2, #28
 80092a6:	d00c      	beq.n	80092c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        if (SKIP_PROCESSING(v))
 80092a8:	6813      	ldr	r3, [r2, #0]
 80092aa:	4233      	tst	r3, r6
 80092ac:	d109      	bne.n	80092c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 80092ae:	78d9      	ldrb	r1, [r3, #3]
 80092b0:	29f9      	cmp	r1, #249	; 0xf9
 80092b2:	d106      	bne.n	80092c2 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
        MARK(v);
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	6013      	str	r3, [r2, #0]
    void push(TValue value) { set(length, value); }
 80092ba:	88b9      	ldrh	r1, [r7, #4]
 80092bc:	4804      	ldr	r0, [pc, #16]	; (80092d0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 80092be:	f000 fcbd 	bl	8009c3c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 80092c2:	42ac      	cmp	r4, r5
 80092c4:	d1e9      	bne.n	800929a <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0xe>
}
 80092c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40000003 	.word	0x40000003
 80092d0:	20001028 	.word	0x20001028

080092d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>:
void gcScanSegment(Segment &seg) {
 80092d4:	b538      	push	{r3, r4, r5, lr}
    auto data = seg.getData();
 80092d6:	6804      	ldr	r4, [r0, #0]
    if (!data)
 80092d8:	b1ac      	cbz	r4, 8009306 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x32>
    GC_CHECK(!IS_MARKED(VT(segBl)), 47);
 80092da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80092de:	4605      	mov	r5, r0
 80092e0:	07da      	lsls	r2, r3, #31
 80092e2:	d409      	bmi.n	80092f8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x24>
    MARK(segBl);
 80092e4:	f043 0301 	orr.w	r3, r3, #1
 80092e8:	f844 3c04 	str.w	r3, [r4, #-4]
    gcScanMany(data, seg.getLength());
 80092ec:	88a9      	ldrh	r1, [r5, #4]
 80092ee:	4620      	mov	r0, r4
}
 80092f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gcScanMany(data, seg.getLength());
 80092f4:	f7ff bfca 	b.w	800928c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
    target_panic(800 + subcode);
 80092f8:	f240 304f 	movw	r0, #847	; 0x34f
 80092fc:	f7f7 fc42 	bl	8000b84 <target_panic>
 8009300:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009304:	e7ee      	b.n	80092e4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x10>
}
 8009306:	bd38      	pop	{r3, r4, r5, pc}

08009308 <_ZN3pxt9gcProcessEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009308:	0782      	lsls	r2, r0, #30
 800930a:	d10b      	bne.n	8009324 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1c>
void gcProcess(TValue v) {
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	b140      	cbz	r0, 8009322 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    return isTagged(v) || !((uint32_t)v >> 28);
 8009310:	0f02      	lsrs	r2, r0, #28
 8009312:	d006      	beq.n	8009322 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
    if (SKIP_PROCESSING(v))
 8009314:	6802      	ldr	r2, [r0, #0]
 8009316:	4910      	ldr	r1, [pc, #64]	; (8009358 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x50>)
 8009318:	420a      	tst	r2, r1
 800931a:	d102      	bne.n	8009322 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1a>
 800931c:	78d1      	ldrb	r1, [r2, #3]
 800931e:	29f9      	cmp	r1, #249	; 0xf9
 8009320:	d001      	beq.n	8009326 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x1e>
}
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	4770      	bx	lr
    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);
 8009326:	f022 0103 	bic.w	r1, r2, #3
 800932a:	6989      	ldr	r1, [r1, #24]
    MARK(v);
 800932c:	f042 0201 	orr.w	r2, r2, #1
 8009330:	6002      	str	r2, [r0, #0]
    if (scan)
 8009332:	b101      	cbz	r1, 8009336 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x2e>
        scan((RefObject *)v);
 8009334:	4788      	blx	r1
 8009336:	4c09      	ldr	r4, [pc, #36]	; (800935c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x54>)
        auto curr = (RefObject *)workQueue.pop();
 8009338:	4625      	mov	r5, r4
 800933a:	e007      	b.n	800934c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 800933c:	4628      	mov	r0, r5
 800933e:	f000 fc95 	bl	8009c6c <_ZN3pxt9LLSegment3popEv>
        scan = getScanMethod(curr->vtable & ~ANY_MARKED_MASK);
 8009342:	6803      	ldr	r3, [r0, #0]
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	699b      	ldr	r3, [r3, #24]
        if (scan)
 800934a:	b91b      	cbnz	r3, 8009354 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x4c>
    while (workQueue.getLength()) {
 800934c:	88a3      	ldrh	r3, [r4, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f4      	bne.n	800933c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x34>
}
 8009352:	bd38      	pop	{r3, r4, r5, pc}
            scan(curr);
 8009354:	4798      	blx	r3
 8009356:	e7f9      	b.n	800934c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x44>
 8009358:	40000003 	.word	0x40000003
 800935c:	20001028 	.word	0x20001028

08009360 <_ZN3pxt2gcEi>:
void gc(int flags) {
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8009364:	4b89      	ldr	r3, [pc, #548]	; (800958c <_ZN3pxt2gcEi+0x22c>)
void gc(int flags) {
 8009366:	b083      	sub	sp, #12
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 8009368:	781b      	ldrb	r3, [r3, #0]
void gc(int flags) {
 800936a:	9001      	str	r0, [sp, #4]
    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);
 800936c:	079a      	lsls	r2, r3, #30
 800936e:	d505      	bpl.n	800937c <_ZN3pxt2gcEi+0x1c>
    target_panic(800 + subcode);
 8009370:	f44f 7052 	mov.w	r0, #840	; 0x348
 8009374:	f7f7 fc06 	bl	8000b84 <target_panic>
 8009378:	4b84      	ldr	r3, [pc, #528]	; (800958c <_ZN3pxt2gcEi+0x22c>)
 800937a:	781b      	ldrb	r3, [r3, #0]
    inGC |= IN_GC_COLLECT;
 800937c:	4983      	ldr	r1, [pc, #524]	; (800958c <_ZN3pxt2gcEi+0x22c>)
 800937e:	f043 0302 	orr.w	r3, r3, #2
 8009382:	700b      	strb	r3, [r1, #0]
    if (flags & 2) {
 8009384:	9b01      	ldr	r3, [sp, #4]
    auto data = gcRoots.getData();
 8009386:	4a82      	ldr	r2, [pc, #520]	; (8009590 <_ZN3pxt2gcEi+0x230>)
    if (flags & 2) {
 8009388:	f013 0602 	ands.w	r6, r3, #2
    auto data = gcRoots.getData();
 800938c:	6814      	ldr	r4, [r2, #0]
    unsigned getLength() { return length; };
 800938e:	8895      	ldrh	r5, [r2, #4]
    if (flags & 2) {
 8009390:	f040 80e2 	bne.w	8009558 <_ZN3pxt2gcEi+0x1f8>
    for (unsigned i = 0; i < len; ++i) {
 8009394:	b165      	cbz	r5, 80093b0 <_ZN3pxt2gcEi+0x50>
 8009396:	eb04 0585 	add.w	r5, r4, r5, lsl #2
        auto d = data[i];
 800939a:	f854 0b04 	ldr.w	r0, [r4], #4
        if ((uint32_t)d & 1) {
 800939e:	07c7      	lsls	r7, r0, #31
            d = *(TValue *)((uint32_t)d & ~1);
 80093a0:	bf44      	itt	mi
 80093a2:	f020 0001 	bicmi.w	r0, r0, #1
 80093a6:	6800      	ldrmi	r0, [r0, #0]
        gcProcess(d);
 80093a8:	f7ff ffae 	bl	8009308 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 80093ac:	42a5      	cmp	r5, r4
 80093ae:	d1f4      	bne.n	800939a <_ZN3pxt2gcEi+0x3a>
    if (globals) {
 80093b0:	4c78      	ldr	r4, [pc, #480]	; (8009594 <_ZN3pxt2gcEi+0x234>)
    gcProcessStacks(flags);
 80093b2:	9801      	ldr	r0, [sp, #4]
 80093b4:	f000 fff0 	bl	800a398 <_ZN3pxt15gcProcessStacksEi>
    if (globals) {
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	b1b3      	cbz	r3, 80093ea <_ZN3pxt2gcEi+0x8a>
        auto nonPtrs = bytecode[21];
 80093bc:	4b76      	ldr	r3, [pc, #472]	; (8009598 <_ZN3pxt2gcEi+0x238>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
        len = getNumGlobals() - nonPtrs;
 80093c4:	f000 fdc0 	bl	8009f48 <_ZN3pxt13getNumGlobalsEv>
        data = globals + nonPtrs;
 80093c8:	6825      	ldr	r5, [r4, #0]
        len = getNumGlobals() - nonPtrs;
 80093ca:	eba0 0708 	sub.w	r7, r0, r8
        data = globals + nonPtrs;
 80093ce:	eb05 0588 	add.w	r5, r5, r8, lsl #2
        if (flags & 2)
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	f040 80ce 	bne.w	8009574 <_ZN3pxt2gcEi+0x214>
        for (unsigned i = 0; i < len; ++i) {
 80093d8:	b13f      	cbz	r7, 80093ea <_ZN3pxt2gcEi+0x8a>
 80093da:	2400      	movs	r4, #0
 80093dc:	3401      	adds	r4, #1
            gcProcess(*data++);
 80093de:	f855 0b04 	ldr.w	r0, [r5], #4
 80093e2:	f7ff ff91 	bl	8009308 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
        for (unsigned i = 0; i < len; ++i) {
 80093e6:	42a7      	cmp	r7, r4
 80093e8:	d1f8      	bne.n	80093dc <_ZN3pxt2gcEi+0x7c>
    len = tempRootLen;
 80093ea:	4a6c      	ldr	r2, [pc, #432]	; (800959c <_ZN3pxt2gcEi+0x23c>)
    data = tempRoot;
 80093ec:	4b6c      	ldr	r3, [pc, #432]	; (80095a0 <_ZN3pxt2gcEi+0x240>)
    len = tempRootLen;
 80093ee:	7816      	ldrb	r6, [r2, #0]
    data = tempRoot;
 80093f0:	681d      	ldr	r5, [r3, #0]
    for (unsigned i = 0; i < len; ++i) {
 80093f2:	b13e      	cbz	r6, 8009404 <_ZN3pxt2gcEi+0xa4>
 80093f4:	2400      	movs	r4, #0
 80093f6:	3401      	adds	r4, #1
        gcProcess(*data++);
 80093f8:	f855 0b04 	ldr.w	r0, [r5], #4
 80093fc:	f7ff ff84 	bl	8009308 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
    for (unsigned i = 0; i < len; ++i) {
 8009400:	42a6      	cmp	r6, r4
 8009402:	d1f8      	bne.n	80093f6 <_ZN3pxt2gcEi+0x96>
    firstFree = NULL;
 8009404:	2700      	movs	r7, #0
    for (auto h = firstBlock; h; h = h->next) {
 8009406:	4b67      	ldr	r3, [pc, #412]	; (80095a4 <_ZN3pxt2gcEi+0x244>)
 8009408:	f8d3 8000 	ldr.w	r8, [r3]
    firstFree = NULL;
 800940c:	4b66      	ldr	r3, [pc, #408]	; (80095a8 <_ZN3pxt2gcEi+0x248>)
 800940e:	601f      	str	r7, [r3, #0]
    for (auto h = firstBlock; h; h = h->next) {
 8009410:	f1b8 0f00 	cmp.w	r8, #0
 8009414:	f000 80b7 	beq.w	8009586 <_ZN3pxt2gcEi+0x226>
    RefBlock *prevFreePtr = NULL;
 8009418:	46ba      	mov	sl, r7
    uint32_t totalSize = 0;
 800941a:	46bb      	mov	fp, r7
 800941c:	4647      	mov	r7, r8
 800941e:	46d0      	mov	r8, sl
        auto words = h->blockSize >> 2;
 8009420:	687b      	ldr	r3, [r7, #4]
        auto d = h->data;
 8009422:	f107 0508 	add.w	r5, r7, #8
        auto words = h->blockSize >> 2;
 8009426:	089b      	lsrs	r3, r3, #2
        auto end = d + words;
 8009428:	eb05 0683 	add.w	r6, r5, r3, lsl #2
        while (d < end) {
 800942c:	42b5      	cmp	r5, r6
        totalSize += words;
 800942e:	449b      	add	fp, r3
        while (d < end) {
 8009430:	d243      	bcs.n	80094ba <_ZN3pxt2gcEi+0x15a>
 8009432:	9700      	str	r7, [sp, #0]
            if (IS_LIVE(d->vtable)) {
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	07d8      	lsls	r0, r3, #31
 8009438:	d46a      	bmi.n	8009510 <_ZN3pxt2gcEi+0x1b0>
 800943a:	0f1a      	lsrs	r2, r3, #28
 800943c:	2a06      	cmp	r2, #6
 800943e:	d067      	beq.n	8009510 <_ZN3pxt2gcEi+0x1b0>
                while (d < end) {
 8009440:	42ae      	cmp	r6, r5
 8009442:	f240 8085 	bls.w	8009550 <_ZN3pxt2gcEi+0x1f0>
 8009446:	462c      	mov	r4, r5
 8009448:	e000      	b.n	800944c <_ZN3pxt2gcEi+0xec>
 800944a:	6823      	ldr	r3, [r4, #0]
                    if (IS_FREE(d->vtable)) {
 800944c:	2b00      	cmp	r3, #0
                    } else if (IS_LIVE(d->vtable)) {
 800944e:	ea4f 7213 	mov.w	r2, r3, lsr #28
                    if (IS_FREE(d->vtable)) {
 8009452:	db0f      	blt.n	8009474 <_ZN3pxt2gcEi+0x114>
                    } else if (IS_LIVE(d->vtable)) {
 8009454:	07d9      	lsls	r1, r3, #31
 8009456:	d464      	bmi.n	8009522 <_ZN3pxt2gcEi+0x1c2>
 8009458:	2a06      	cmp	r2, #6
 800945a:	d062      	beq.n	8009522 <_ZN3pxt2gcEi+0x1c2>
                    } else if (IS_ARRAY(d->vtable)) {
 800945c:	005a      	lsls	r2, r3, #1
 800945e:	d409      	bmi.n	8009474 <_ZN3pxt2gcEi+0x114>
                        GC_CHECK(((VTable *)d->vtable)->magic == VTABLE_MAGIC, 41);
 8009460:	78db      	ldrb	r3, [r3, #3]
 8009462:	2bf9      	cmp	r3, #249	; 0xf9
 8009464:	d003      	beq.n	800946e <_ZN3pxt2gcEi+0x10e>
    target_panic(800 + subcode);
 8009466:	f240 3049 	movw	r0, #841	; 0x349
 800946a:	f7f7 fb8b 	bl	8000b84 <target_panic>
                        d->destroyVT();
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fbcc 	bl	8009c0c <_ZN3pxt9RefObject9destroyVTEv>
                    d += getObjectSize(d);
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff fe6d 	bl	8009154 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800947a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                while (d < end) {
 800947e:	42a6      	cmp	r6, r4
 8009480:	d8e3      	bhi.n	800944a <_ZN3pxt2gcEi+0xea>
 8009482:	1b67      	subs	r7, r4, r5
 8009484:	ea4f 0ca7 	mov.w	ip, r7, asr #2
 8009488:	ea4f 098c 	mov.w	r9, ip, lsl #2
                memset(start, 0xff, sz << 2);
 800948c:	464a      	mov	r2, r9
 800948e:	21ff      	movs	r1, #255	; 0xff
 8009490:	4628      	mov	r0, r5
 8009492:	44e0      	add	r8, ip
 8009494:	f7fa fca8 	bl	8003de8 <memset>
                start->vtable = (sz << 2) | FREE_MASK;
 8009498:	f049 4200 	orr.w	r2, r9, #2147483648	; 0x80000000
                if (sz > 1) {
 800949c:	2f04      	cmp	r7, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800949e:	602a      	str	r2, [r5, #0]
                if (sz > 1) {
 80094a0:	dd0a      	ble.n	80094b8 <_ZN3pxt2gcEi+0x158>
                    start->nextFree = NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	606b      	str	r3, [r5, #4]
                    if (!prevFreePtr) {
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	d04c      	beq.n	8009546 <_ZN3pxt2gcEi+0x1e6>
                        prevFreePtr->nextFree = start;
 80094ac:	f8ca 5004 	str.w	r5, [sl, #4]
 80094b0:	46aa      	mov	sl, r5
 80094b2:	4625      	mov	r5, r4
        while (d < end) {
 80094b4:	42ae      	cmp	r6, r5
 80094b6:	d8bd      	bhi.n	8009434 <_ZN3pxt2gcEi+0xd4>
 80094b8:	9f00      	ldr	r7, [sp, #0]
    for (auto h = firstBlock; h; h = h->next) {
 80094ba:	683f      	ldr	r7, [r7, #0]
 80094bc:	2f00      	cmp	r7, #0
 80094be:	d1af      	bne.n	8009420 <_ZN3pxt2gcEi+0xc0>
 80094c0:	4647      	mov	r7, r8
    if (midPtr) {
 80094c2:	4d3a      	ldr	r5, [pc, #232]	; (80095ac <_ZN3pxt2gcEi+0x24c>)
 80094c4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	00b9      	lsls	r1, r7, #2
 80094cc:	b193      	cbz	r3, 80094f4 <_ZN3pxt2gcEi+0x194>
        for (auto p = firstFree; p; p = p->nextFree) {
 80094ce:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <_ZN3pxt2gcEi+0x248>)
        auto limit = freeSize >> 1;
 80094d0:	087f      	lsrs	r7, r7, #1
        for (auto p = firstFree; p; p = p->nextFree) {
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	b173      	cbz	r3, 80094f4 <_ZN3pxt2gcEi+0x194>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80094d6:	681c      	ldr	r4, [r3, #0]
 80094d8:	f3c4 0491 	ubfx	r4, r4, #2, #18
            if (currFree > limit) {
 80094dc:	42bc      	cmp	r4, r7
 80094de:	d906      	bls.n	80094ee <_ZN3pxt2gcEi+0x18e>
 80094e0:	e043      	b.n	800956a <_ZN3pxt2gcEi+0x20a>
            currFree += VAR_BLOCK_WORDS(p->vtable);
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	f3c0 0091 	ubfx	r0, r0, #2, #18
 80094e8:	4404      	add	r4, r0
            if (currFree > limit) {
 80094ea:	42a7      	cmp	r7, r4
 80094ec:	d33d      	bcc.n	800956a <_ZN3pxt2gcEi+0x20a>
        for (auto p = firstFree; p; p = p->nextFree) {
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f6      	bne.n	80094e2 <_ZN3pxt2gcEi+0x182>
    if (flags & 1)
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	07db      	lsls	r3, r3, #31
 80094f8:	d502      	bpl.n	8009500 <_ZN3pxt2gcEi+0x1a0>
        DMESG("GC %d/%d free", freeSize, totalSize);
 80094fa:	482d      	ldr	r0, [pc, #180]	; (80095b0 <_ZN3pxt2gcEi+0x250>)
 80094fc:	f001 fc9e 	bl	800ae3c <codal_dmesg>
    inGC &= ~IN_GC_COLLECT;
 8009500:	4a22      	ldr	r2, [pc, #136]	; (800958c <_ZN3pxt2gcEi+0x22c>)
 8009502:	7813      	ldrb	r3, [r2, #0]
 8009504:	f023 0302 	bic.w	r3, r3, #2
 8009508:	7013      	strb	r3, [r2, #0]
}
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                d->vtable &= ~MARKED_MASK;
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	602b      	str	r3, [r5, #0]
                d += getObjectSize(d);
 8009516:	4628      	mov	r0, r5
 8009518:	f7ff fe1c 	bl	8009154 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 800951c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8009520:	e7c8      	b.n	80094b4 <_ZN3pxt2gcEi+0x154>
 8009522:	eba4 0905 	sub.w	r9, r4, r5
 8009526:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800952a:	009a      	lsls	r2, r3, #2
                memset(start, 0xff, sz << 2);
 800952c:	21ff      	movs	r1, #255	; 0xff
 800952e:	4628      	mov	r0, r5
 8009530:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
 8009534:	4498      	add	r8, r3
 8009536:	f7fa fc57 	bl	8003de8 <memset>
                if (sz > 1) {
 800953a:	f1b9 0f04 	cmp.w	r9, #4
                start->vtable = (sz << 2) | FREE_MASK;
 800953e:	602f      	str	r7, [r5, #0]
                if (sz > 1) {
 8009540:	dcaf      	bgt.n	80094a2 <_ZN3pxt2gcEi+0x142>
 8009542:	4625      	mov	r5, r4
 8009544:	e7b6      	b.n	80094b4 <_ZN3pxt2gcEi+0x154>
                        firstFree = start;
 8009546:	4b18      	ldr	r3, [pc, #96]	; (80095a8 <_ZN3pxt2gcEi+0x248>)
 8009548:	46aa      	mov	sl, r5
 800954a:	601d      	str	r5, [r3, #0]
 800954c:	4625      	mov	r5, r4
 800954e:	e7b1      	b.n	80094b4 <_ZN3pxt2gcEi+0x154>
                start->vtable = (sz << 2) | FREE_MASK;
 8009550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	e7ad      	b.n	80094b4 <_ZN3pxt2gcEi+0x154>
        DMESG("--MARK");
 8009558:	4816      	ldr	r0, [pc, #88]	; (80095b4 <_ZN3pxt2gcEi+0x254>)
 800955a:	f001 fc6f 	bl	800ae3c <codal_dmesg>
        DMESG("RP:%p/%d", data, len);
 800955e:	462a      	mov	r2, r5
 8009560:	4621      	mov	r1, r4
 8009562:	4815      	ldr	r0, [pc, #84]	; (80095b8 <_ZN3pxt2gcEi+0x258>)
 8009564:	f001 fc6a 	bl	800ae3c <codal_dmesg>
 8009568:	e714      	b.n	8009394 <_ZN3pxt2gcEi+0x34>
                midPtr = (uint8_t *)p + ((currFree - limit) << 2);
 800956a:	1be7      	subs	r7, r4, r7
 800956c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7bf      	b.n	80094f4 <_ZN3pxt2gcEi+0x194>
            DMESG("RG:%p/%d", data, len);
 8009574:	463a      	mov	r2, r7
 8009576:	4629      	mov	r1, r5
 8009578:	4810      	ldr	r0, [pc, #64]	; (80095bc <_ZN3pxt2gcEi+0x25c>)
 800957a:	f001 fc5f 	bl	800ae3c <codal_dmesg>
        for (unsigned i = 0; i < len; ++i) {
 800957e:	2f00      	cmp	r7, #0
 8009580:	f47f af2b 	bne.w	80093da <_ZN3pxt2gcEi+0x7a>
 8009584:	e731      	b.n	80093ea <_ZN3pxt2gcEi+0x8a>
    for (auto h = firstBlock; h; h = h->next) {
 8009586:	4642      	mov	r2, r8
 8009588:	4641      	mov	r1, r8
 800958a:	e7b3      	b.n	80094f4 <_ZN3pxt2gcEi+0x194>
 800958c:	2000166c 	.word	0x2000166c
 8009590:	20001018 	.word	0x20001018
 8009594:	20001030 	.word	0x20001030
 8009598:	20001034 	.word	0x20001034
 800959c:	2000166d 	.word	0x2000166d
 80095a0:	20001020 	.word	0x20001020
 80095a4:	20001010 	.word	0x20001010
 80095a8:	20001024 	.word	0x20001024
 80095ac:	20001014 	.word	0x20001014
 80095b0:	0800d2b8 	.word	0x0800d2b8
 80095b4:	0800d298 	.word	0x0800d298
 80095b8:	0800d2a0 	.word	0x0800d2a0
 80095bc:	0800d2ac 	.word	0x0800d2ac

080095c0 <_ZN3pxtL13allocateBlockEv>:
__attribute__((noinline)) static void allocateBlock() {
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (firstBlock) {
 80095c2:	4e30      	ldr	r6, [pc, #192]	; (8009684 <_ZN3pxtL13allocateBlockEv+0xc4>)
 80095c4:	6833      	ldr	r3, [r6, #0]
 80095c6:	b12b      	cbz	r3, 80095d4 <_ZN3pxtL13allocateBlockEv+0x14>
        gc(2); // dump roots
 80095c8:	2002      	movs	r0, #2
 80095ca:	f7ff fec9 	bl	8009360 <_ZN3pxt2gcEi>
        target_panic(PANIC_GC_OOM);
 80095ce:	2015      	movs	r0, #21
 80095d0:	f7f7 fad8 	bl	8000b84 <target_panic>
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80095d4:	2100      	movs	r1, #0
 80095d6:	20cf      	movs	r0, #207	; 0xcf
 80095d8:	f7fe febe 	bl	8008358 <_ZN3pxt9getConfigEii>
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80095dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);
 80095e0:	4607      	mov	r7, r0
    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);
 80095e2:	20ce      	movs	r0, #206	; 0xce
 80095e4:	f7fe feb8 	bl	8008358 <_ZN3pxt9getConfigEii>
 80095e8:	4604      	mov	r4, r0
    auto heapSize = GC_GET_HEAP_SIZE();
 80095ea:	2000      	movs	r0, #0
 80095ec:	f002 f8fc 	bl	800b7e8 <_Z16device_heap_sizeh>
    sz = heapSize - sysHeapSize;
 80095f0:	1b04      	subs	r4, r0, r4
    if (lowMem) {
 80095f2:	b15f      	cbz	r7, 800960c <_ZN3pxtL13allocateBlockEv+0x4c>
        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;
 80095f4:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 80095f8:	307f      	adds	r0, #127	; 0x7f
 80095fa:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80095fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
        int fillerSize = memSize - lowMem * 1024;
 8009602:	eba3 2787 	sub.w	r7, r3, r7, lsl #10
        if (fillerSize > 0) {
 8009606:	2f00      	cmp	r7, #0
 8009608:	dc24      	bgt.n	8009654 <_ZN3pxtL13allocateBlockEv+0x94>
 800960a:	2700      	movs	r7, #0
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 800960c:	4620      	mov	r0, r4
 800960e:	f002 f945 	bl	800b89c <device_malloc>
    curr->blockSize = sz - sizeof(GCBlock);
 8009612:	f1a4 0208 	sub.w	r2, r4, #8
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 8009616:	0793      	lsls	r3, r2, #30
    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);
 8009618:	4605      	mov	r5, r0
    curr->blockSize = sz - sizeof(GCBlock);
 800961a:	6042      	str	r2, [r0, #4]
    GC_CHECK((curr->blockSize & 3) == 0, 40);
 800961c:	d120      	bne.n	8009660 <_ZN3pxtL13allocateBlockEv+0xa0>
    curr->next = NULL;
 800961e:	2000      	movs	r0, #0
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009620:	4b19      	ldr	r3, [pc, #100]	; (8009688 <_ZN3pxtL13allocateBlockEv+0xc8>)
    curr->data[4].vtable = (uint32_t)dummy;
 8009622:	61af      	str	r7, [r5, #24]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009624:	6819      	ldr	r1, [r3, #0]
    firstFree = (RefBlock *)curr->data;
 8009626:	f105 0708 	add.w	r7, r5, #8
    if (!firstBlock) {
 800962a:	6834      	ldr	r4, [r6, #0]
    firstFree = (RefBlock *)curr->data;
 800962c:	601f      	str	r7, [r3, #0]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 800962e:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    curr->next = NULL;
 8009632:	6028      	str	r0, [r5, #0]
    ((RefBlock *)curr->data)[0].nextFree = firstFree;
 8009634:	60e9      	str	r1, [r5, #12]
    curr->data[0].vtable = FREE_MASK | curr->blockSize;
 8009636:	60ab      	str	r3, [r5, #8]
    if (!firstBlock) {
 8009638:	b90c      	cbnz	r4, 800963e <_ZN3pxtL13allocateBlockEv+0x7e>
 800963a:	e017      	b.n	800966c <_ZN3pxtL13allocateBlockEv+0xac>
 800963c:	461c      	mov	r4, r3
            if (!p->next) {
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1fb      	bne.n	800963c <_ZN3pxtL13allocateBlockEv+0x7c>
                GC_CHECK(p < curr, 40); // required by midPtr stuff
 8009644:	42a5      	cmp	r5, r4
 8009646:	d917      	bls.n	8009678 <_ZN3pxtL13allocateBlockEv+0xb8>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009648:	4b10      	ldr	r3, [pc, #64]	; (800968c <_ZN3pxtL13allocateBlockEv+0xcc>)
 800964a:	eb07 0292 	add.w	r2, r7, r2, lsr #2
                p->next = curr;
 800964e:	6025      	str	r5, [r4, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009650:	601a      	str	r2, [r3, #0]
}
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            dummy = GC_ALLOC_BLOCK(fillerSize);
 8009654:	4638      	mov	r0, r7
 8009656:	f002 f921 	bl	800b89c <device_malloc>
            sz -= fillerSize;
 800965a:	1be4      	subs	r4, r4, r7
 800965c:	4607      	mov	r7, r0
 800965e:	e7d5      	b.n	800960c <_ZN3pxtL13allocateBlockEv+0x4c>
 8009660:	f44f 7052 	mov.w	r0, #840	; 0x348
 8009664:	f7f7 fa8e 	bl	8000b84 <target_panic>
 8009668:	686a      	ldr	r2, [r5, #4]
 800966a:	e7d8      	b.n	800961e <_ZN3pxtL13allocateBlockEv+0x5e>
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <_ZN3pxtL13allocateBlockEv+0xcc>)
 800966e:	eb07 0292 	add.w	r2, r7, r2, lsr #2
        firstBlock = curr;
 8009672:	6035      	str	r5, [r6, #0]
    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;
 8009674:	601a      	str	r2, [r3, #0]
}
 8009676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009678:	f44f 7052 	mov.w	r0, #840	; 0x348
 800967c:	f7f7 fa82 	bl	8000b84 <target_panic>
 8009680:	686a      	ldr	r2, [r5, #4]
 8009682:	e7e1      	b.n	8009648 <_ZN3pxtL13allocateBlockEv+0x88>
 8009684:	20001010 	.word	0x20001010
 8009688:	20001024 	.word	0x20001024
 800968c:	20001014 	.word	0x20001014

08009690 <free>:
    if (!ptr)
 8009690:	b1f0      	cbz	r0, 80096d0 <free+0x40>
    for (auto block = firstBlock; block; block = block->next) {
 8009692:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <free+0x44>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	b1cb      	cbz	r3, 80096cc <free+0x3c>
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8009698:	f103 0208 	add.w	r2, r3, #8
 800969c:	4290      	cmp	r0, r2
 800969e:	d9f9      	bls.n	8009694 <free+0x4>
 80096a0:	6859      	ldr	r1, [r3, #4]
 80096a2:	440a      	add	r2, r1
 80096a4:	4290      	cmp	r0, r2
 80096a6:	d2f5      	bcs.n	8009694 <free+0x4>
    GC_CHECK((r[-1] >> 29) == 3, 41);
 80096a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
extern "C" void free(void *ptr) {
 80096ac:	b510      	push	{r4, lr}
    GC_CHECK((r[-1] >> 29) == 3, 41);
 80096ae:	0f5a      	lsrs	r2, r3, #29
 80096b0:	2a03      	cmp	r2, #3
 80096b2:	4604      	mov	r4, r0
 80096b4:	d005      	beq.n	80096c2 <free+0x32>
 80096b6:	f240 3049 	movw	r0, #841	; 0x349
 80096ba:	f7f7 fa63 	bl	8000b84 <target_panic>
 80096be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    r[-1] |= FREE_MASK;
 80096c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096c6:	f844 3c04 	str.w	r3, [r4, #-4]
}
 80096ca:	bd10      	pop	{r4, pc}
        xfree(ptr);
 80096cc:	f002 b90c 	b.w	800b8e8 <device_free>
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20001010 	.word	0x20001010

080096d8 <_ZN3pxt10gcAllocateEi>:
void *gcAllocate(int numbytes) {
 80096d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (numbytes > GC_MAX_ALLOC_SIZE)
 80096dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    size_t numwords = (numbytes + 3) >> 2;
 80096e0:	f100 0703 	add.w	r7, r0, #3
 80096e4:	ea4f 07a7 	mov.w	r7, r7, asr #2
    if (numbytes > GC_MAX_ALLOC_SIZE)
 80096e8:	dc73      	bgt.n	80097d2 <_ZN3pxt10gcAllocateEi+0xfa>
    if (PXT_IN_ISR() || (inGC & IN_GC_ALLOC))
 80096ea:	f7f7 f891 	bl	8000810 <target_in_isr>
 80096ee:	f8df a108 	ldr.w	sl, [pc, #264]	; 80097f8 <_ZN3pxt10gcAllocateEi+0x120>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d13e      	bne.n	8009774 <_ZN3pxt10gcAllocateEi+0x9c>
 80096f6:	f89a 3000 	ldrb.w	r3, [sl]
 80096fa:	07da      	lsls	r2, r3, #31
 80096fc:	d43a      	bmi.n	8009774 <_ZN3pxt10gcAllocateEi+0x9c>
    inGC |= IN_GC_ALLOC;
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	f88a 3000 	strb.w	r3, [sl]
        auto curr = getThreadContext();
 8009706:	f000 fe3b 	bl	800a380 <_ZN3pxt16getThreadContextEv>
        if (curr && !curr->stack.top)
 800970a:	b110      	cbz	r0, 8009712 <_ZN3pxt10gcAllocateEi+0x3a>
 800970c:	6843      	ldr	r3, [r0, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d06c      	beq.n	80097ec <_ZN3pxt10gcAllocateEi+0x114>
void *gcAllocate(int numbytes) {
 8009712:	2600      	movs	r6, #0
 8009714:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80097fc <_ZN3pxt10gcAllocateEi+0x124>
            if (i == 0 && (uint8_t *)p > midPtr)
 8009718:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009800 <_ZN3pxt10gcAllocateEi+0x128>
        for (auto p = firstFree; p; p = p->nextFree) {
 800971c:	f8db 4000 	ldr.w	r4, [fp]
 8009720:	b1fc      	cbz	r4, 8009762 <_ZN3pxt10gcAllocateEi+0x8a>
        RefBlock *prev = NULL;
 8009722:	f04f 0800 	mov.w	r8, #0
            if (i == 0 && (uint8_t *)p > midPtr)
 8009726:	b91e      	cbnz	r6, 8009730 <_ZN3pxt10gcAllocateEi+0x58>
 8009728:	f8d9 3000 	ldr.w	r3, [r9]
 800972c:	42a3      	cmp	r3, r4
 800972e:	d349      	bcc.n	80097c4 <_ZN3pxt10gcAllocateEi+0xec>
    return ((intptr_t)v & 3) || !v;
 8009730:	07a3      	lsls	r3, r4, #30
 8009732:	d101      	bne.n	8009738 <_ZN3pxt10gcAllocateEi+0x60>
    return isTagged(v) || !((uint32_t)v >> 28);
 8009734:	0f23      	lsrs	r3, r4, #28
 8009736:	d103      	bne.n	8009740 <_ZN3pxt10gcAllocateEi+0x68>
    target_panic(800 + subcode);
 8009738:	f240 3051 	movw	r0, #849	; 0x351
 800973c:	f7f7 fa22 	bl	8000b84 <target_panic>
            auto vt = p->vtable;
 8009740:	6825      	ldr	r5, [r4, #0]
            if (!IS_FREE(vt))
 8009742:	2d00      	cmp	r5, #0
 8009744:	db03      	blt.n	800974e <_ZN3pxt10gcAllocateEi+0x76>
 8009746:	f240 304b 	movw	r0, #843	; 0x34b
 800974a:	f7f7 fa1b 	bl	8000b84 <target_panic>
            int left = VAR_BLOCK_WORDS(vt) - numwords;
 800974e:	f3c5 0591 	ubfx	r5, r5, #2, #18
 8009752:	1bed      	subs	r5, r5, r7
            if (left >= 0) {
 8009754:	2d00      	cmp	r5, #0
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	da13      	bge.n	8009782 <_ZN3pxt10gcAllocateEi+0xaa>
 800975a:	46a0      	mov	r8, r4
        for (auto p = firstFree; p; p = p->nextFree) {
 800975c:	461c      	mov	r4, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e1      	bne.n	8009726 <_ZN3pxt10gcAllocateEi+0x4e>
        if (i == 0)
 8009762:	b37e      	cbz	r6, 80097c4 <_ZN3pxt10gcAllocateEi+0xec>
        else if (i == 1)
 8009764:	2e01      	cmp	r6, #1
 8009766:	d031      	beq.n	80097cc <_ZN3pxt10gcAllocateEi+0xf4>
 8009768:	f44f 7053 	mov.w	r0, #844	; 0x34c
 800976c:	f7f7 fa0a 	bl	8000b84 <target_panic>
    for (int i = 0;; ++i) {
 8009770:	3601      	adds	r6, #1
    }
 8009772:	e7d3      	b.n	800971c <_ZN3pxt10gcAllocateEi+0x44>
        target_panic(PANIC_CALLED_FROM_ISR);
 8009774:	f240 3092 	movw	r0, #914	; 0x392
 8009778:	f7f7 fa04 	bl	8000b84 <target_panic>
 800977c:	f89a 3000 	ldrb.w	r3, [sl]
 8009780:	e7bd      	b.n	80096fe <_ZN3pxt10gcAllocateEi+0x26>
                if (left)
 8009782:	d00a      	beq.n	800979a <_ZN3pxt10gcAllocateEi+0xc2>
                    nf->vtable = (left << 2) | FREE_MASK;
 8009784:	00aa      	lsls	r2, r5, #2
 8009786:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800978a:	f844 2027 	str.w	r2, [r4, r7, lsl #2]
                if (left >= 2) {
 800978e:	2d01      	cmp	r5, #1
                auto nf = (RefBlock *)((void **)p + numwords);
 8009790:	eb04 0787 	add.w	r7, r4, r7, lsl #2
                    nf->nextFree = nextFree;
 8009794:	bf1c      	itt	ne
 8009796:	607b      	strne	r3, [r7, #4]
 8009798:	463b      	movne	r3, r7
                if (prev)
 800979a:	f1b8 0f00 	cmp.w	r8, #0
 800979e:	d01d      	beq.n	80097dc <_ZN3pxt10gcAllocateEi+0x104>
                    prev->nextFree = nf;
 80097a0:	f8c8 3004 	str.w	r3, [r8, #4]
                p->vtable = 0;
 80097a4:	2200      	movs	r2, #0
 80097a6:	6022      	str	r2, [r4, #0]
                GC_CHECK(!nf || !nf->nextFree || ((uint32_t)nf->nextFree) >> 20, 48);
 80097a8:	b11b      	cbz	r3, 80097b2 <_ZN3pxt10gcAllocateEi+0xda>
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	b10b      	cbz	r3, 80097b2 <_ZN3pxt10gcAllocateEi+0xda>
 80097ae:	0d1b      	lsrs	r3, r3, #20
 80097b0:	d017      	beq.n	80097e2 <_ZN3pxt10gcAllocateEi+0x10a>
                inGC &= ~IN_GC_ALLOC;
 80097b2:	f89a 3000 	ldrb.w	r3, [sl]
}
 80097b6:	4620      	mov	r0, r4
                inGC &= ~IN_GC_ALLOC;
 80097b8:	f023 0301 	bic.w	r3, r3, #1
 80097bc:	f88a 3000 	strb.w	r3, [sl]
}
 80097c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gc(0);
 80097c4:	2000      	movs	r0, #0
 80097c6:	f7ff fdcb 	bl	8009360 <_ZN3pxt2gcEi>
 80097ca:	e7d1      	b.n	8009770 <_ZN3pxt10gcAllocateEi+0x98>
            allocateBlock();
 80097cc:	f7ff fef8 	bl	80095c0 <_ZN3pxtL13allocateBlockEv>
 80097d0:	e7ce      	b.n	8009770 <_ZN3pxt10gcAllocateEi+0x98>
 80097d2:	f240 304d 	movw	r0, #845	; 0x34d
 80097d6:	f7f7 f9d5 	bl	8000b84 <target_panic>
 80097da:	e786      	b.n	80096ea <_ZN3pxt10gcAllocateEi+0x12>
                    firstFree = nf;
 80097dc:	f8cb 3000 	str.w	r3, [fp]
 80097e0:	e7e0      	b.n	80097a4 <_ZN3pxt10gcAllocateEi+0xcc>
 80097e2:	f44f 7054 	mov.w	r0, #848	; 0x350
 80097e6:	f7f7 f9cd 	bl	8000b84 <target_panic>
 80097ea:	e7e2      	b.n	80097b2 <_ZN3pxt10gcAllocateEi+0xda>
 80097ec:	f240 304e 	movw	r0, #846	; 0x34e
 80097f0:	f7f7 f9c8 	bl	8000b84 <target_panic>
 80097f4:	e78d      	b.n	8009712 <_ZN3pxt10gcAllocateEi+0x3a>
 80097f6:	bf00      	nop
 80097f8:	2000166c 	.word	0x2000166c
 80097fc:	20001024 	.word	0x20001024
 8009800:	20001014 	.word	0x20001014

08009804 <_ZN3pxt15gcAllocateArrayEi>:
void *gcAllocateArray(int numbytes) {
 8009804:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8009806:	1cc4      	adds	r4, r0, #3
 8009808:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 800980c:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 800980e:	4620      	mov	r0, r4
 8009810:	f7ff ff62 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
    *r = ARRAY_MASK | numbytes;
 8009814:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8009818:	f840 4b04 	str.w	r4, [r0], #4
}
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop

08009820 <app_alloc>:
    if (!numbytes)
 8009820:	b160      	cbz	r0, 800983c <app_alloc+0x1c>
void *app_alloc(int numbytes) {
 8009822:	b510      	push	{r4, lr}
    numbytes = (numbytes + 3) & ~3;
 8009824:	1cc4      	adds	r4, r0, #3
 8009826:	f024 0403 	bic.w	r4, r4, #3
    numbytes += 4;
 800982a:	3404      	adds	r4, #4
    auto r = (uint32_t *)gcAllocate(numbytes);
 800982c:	4620      	mov	r0, r4
 800982e:	f7ff ff53 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8009832:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8009836:	6004      	str	r4, [r0, #0]
    return r + 1;
 8009838:	3004      	adds	r0, #4
}
 800983a:	bd10      	pop	{r4, pc}
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop

08009840 <malloc>:
extern "C" void *malloc(size_t sz) {
 8009840:	b510      	push	{r4, lr}
 8009842:	4604      	mov	r4, r0
    if (PXT_IN_ISR() || inGC)
 8009844:	f7f6 ffe4 	bl	8000810 <target_in_isr>
 8009848:	b910      	cbnz	r0, 8009850 <malloc+0x10>
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <malloc+0x24>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b123      	cbz	r3, 800985a <malloc+0x1a>
        return xmalloc(sz);
 8009850:	4620      	mov	r0, r4
}
 8009852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return xmalloc(sz);
 8009856:	f002 b821 	b.w	800b89c <device_malloc>
        return app_alloc(sz);
 800985a:	4620      	mov	r0, r4
}
 800985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return app_alloc(sz);
 8009860:	f7ff bfde 	b.w	8009820 <app_alloc>
 8009864:	2000166c 	.word	0x2000166c

08009868 <realloc>:
    for (auto block = firstBlock; block; block = block->next) {
 8009868:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <realloc+0x70>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	b393      	cbz	r3, 80098d4 <realloc+0x6c>
extern "C" void *realloc(void *ptr, size_t size) {
 800986e:	b570      	push	{r4, r5, r6, lr}
        if ((void *)block->data < ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))
 8009870:	f103 0408 	add.w	r4, r3, #8
 8009874:	42a0      	cmp	r0, r4
 8009876:	d903      	bls.n	8009880 <realloc+0x18>
 8009878:	685d      	ldr	r5, [r3, #4]
 800987a:	442c      	add	r4, r5
 800987c:	42a0      	cmp	r0, r4
 800987e:	d306      	bcc.n	800988e <realloc+0x26>
    for (auto block = firstBlock; block; block = block->next) {
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f4      	bne.n	8009870 <realloc+0x8>
}
 8009886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return device_realloc(ptr, size);
 800988a:	f002 b85d 	b.w	800b948 <device_realloc>
 800988e:	4604      	mov	r4, r0
        void *mem = malloc(size);
 8009890:	4608      	mov	r0, r1
 8009892:	460d      	mov	r5, r1
 8009894:	f7ff ffd4 	bl	8009840 <malloc>
 8009898:	4606      	mov	r6, r0
        if (ptr != NULL && mem != NULL) {
 800989a:	b194      	cbz	r4, 80098c2 <realloc+0x5a>
 800989c:	b18e      	cbz	r6, 80098c2 <realloc+0x5a>
            GC_CHECK((r[-1] >> 29) == 3, 41);
 800989e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80098a2:	0f5a      	lsrs	r2, r3, #29
 80098a4:	2a03      	cmp	r2, #3
 80098a6:	d10e      	bne.n	80098c6 <realloc+0x5e>
            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);
 80098a8:	f3c3 0391 	ubfx	r3, r3, #2, #18
            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));
 80098ac:	009a      	lsls	r2, r3, #2
 80098ae:	42aa      	cmp	r2, r5
 80098b0:	bf28      	it	cs
 80098b2:	462a      	movcs	r2, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7fa fa4e 	bl	8003d58 <memcpy>
            free(ptr);
 80098bc:	4620      	mov	r0, r4
 80098be:	f7ff fee7 	bl	8009690 <free>
}
 80098c2:	4630      	mov	r0, r6
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	f240 3049 	movw	r0, #841	; 0x349
 80098ca:	f7f7 f95b 	bl	8000b84 <target_panic>
 80098ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80098d2:	e7e9      	b.n	80098a8 <realloc+0x40>
        return device_realloc(ptr, size);
 80098d4:	f002 b838 	b.w	800b948 <device_realloc>
 80098d8:	20001010 	.word	0x20001010

080098dc <_ZN3pxt17pushThreadContextEPvS0_>:
ThreadContext *pushThreadContext(void *sp, void *endSP) {
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	4606      	mov	r6, r0
 80098e0:	460f      	mov	r7, r1
    if (PXT_IN_ISR())
 80098e2:	f7f6 ff95 	bl	8000810 <target_in_isr>
 80098e6:	bb58      	cbnz	r0, 8009940 <_ZN3pxt17pushThreadContextEPvS0_+0x64>
    auto curr = getThreadContext();
 80098e8:	f000 fd4a 	bl	800a380 <_ZN3pxt16getThreadContextEv>
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 80098ec:	4d17      	ldr	r5, [pc, #92]	; (800994c <_ZN3pxt17pushThreadContextEPvS0_+0x70>)
 80098ee:	1bf3      	subs	r3, r6, r7
    tempRoot = (TValue *)endSP;
 80098f0:	4a17      	ldr	r2, [pc, #92]	; (8009950 <_ZN3pxt17pushThreadContextEPvS0_+0x74>)
    tempRootLen = (uint32_t *)sp - (uint32_t *)endSP;
 80098f2:	109b      	asrs	r3, r3, #2
 80098f4:	702b      	strb	r3, [r5, #0]
    if (curr) {
 80098f6:	4604      	mov	r4, r0
    tempRoot = (TValue *)endSP;
 80098f8:	6017      	str	r7, [r2, #0]
    if (curr) {
 80098fa:	b190      	cbz	r0, 8009922 <_ZN3pxt17pushThreadContextEPvS0_+0x46>
    auto r = (uint32_t *)gcAllocate(numbytes);
 80098fc:	2010      	movs	r0, #16
 80098fe:	f7ff feeb 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
    r[-1] |= PERMA_MASK;
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <_ZN3pxt17pushThreadContextEPvS0_+0x78>)
        seg->top = curr->stack.top;
 8009904:	6862      	ldr	r2, [r4, #4]
    r[-1] |= PERMA_MASK;
 8009906:	6003      	str	r3, [r0, #0]
        seg->bottom = curr->stack.bottom;
 8009908:	68a3      	ldr	r3, [r4, #8]
        seg->top = curr->stack.top;
 800990a:	6042      	str	r2, [r0, #4]
        seg->next = curr->stack.next;
 800990c:	68e2      	ldr	r2, [r4, #12]
        seg->bottom = curr->stack.bottom;
 800990e:	6083      	str	r3, [r0, #8]
    return r + 1;
 8009910:	1d03      	adds	r3, r0, #4
        seg->next = curr->stack.next;
 8009912:	60c2      	str	r2, [r0, #12]
        curr->stack.next = seg;
 8009914:	60e3      	str	r3, [r4, #12]
    tempRootLen = 0;
 8009916:	2300      	movs	r3, #0
    curr->stack.bottom = sp;
 8009918:	60a6      	str	r6, [r4, #8]
    tempRootLen = 0;
 800991a:	702b      	strb	r3, [r5, #0]
    curr->stack.top = NULL;
 800991c:	6063      	str	r3, [r4, #4]
}
 800991e:	4620      	mov	r0, r4
 8009920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    auto r = (uint32_t *)gcAllocate(numbytes);
 8009922:	2014      	movs	r0, #20
 8009924:	f7ff fed8 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
        curr->stack.next = NULL;
 8009928:	2300      	movs	r3, #0
        curr->globals = globals;
 800992a:	4a0b      	ldr	r2, [pc, #44]	; (8009958 <_ZN3pxt17pushThreadContextEPvS0_+0x7c>)
    r[-1] |= PERMA_MASK;
 800992c:	490b      	ldr	r1, [pc, #44]	; (800995c <_ZN3pxt17pushThreadContextEPvS0_+0x80>)
        curr->globals = globals;
 800992e:	6812      	ldr	r2, [r2, #0]
    return r + 1;
 8009930:	1d04      	adds	r4, r0, #4
    r[-1] |= PERMA_MASK;
 8009932:	6001      	str	r1, [r0, #0]
        curr->globals = globals;
 8009934:	6042      	str	r2, [r0, #4]
        curr->stack.next = NULL;
 8009936:	6103      	str	r3, [r0, #16]
        setThreadContext(curr);
 8009938:	4620      	mov	r0, r4
 800993a:	f000 fd27 	bl	800a38c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 800993e:	e7ea      	b.n	8009916 <_ZN3pxt17pushThreadContextEPvS0_+0x3a>
        target_panic(PANIC_CALLED_FROM_ISR);
 8009940:	f240 3092 	movw	r0, #914	; 0x392
 8009944:	f7f7 f91e 	bl	8000b84 <target_panic>
 8009948:	e7ce      	b.n	80098e8 <_ZN3pxt17pushThreadContextEPvS0_+0xc>
 800994a:	bf00      	nop
 800994c:	2000166d 	.word	0x2000166d
 8009950:	20001020 	.word	0x20001020
 8009954:	60000010 	.word	0x60000010
 8009958:	20001030 	.word	0x20001030
 800995c:	60000014 	.word	0x60000014

08009960 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>:

void registerGC(TValue *root, int numwords) {
    if (!numwords)
 8009960:	b161      	cbz	r1, 800997c <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1c>
        return;

    if (numwords > 1) {
 8009962:	2901      	cmp	r1, #1
void registerGC(TValue *root, int numwords) {
 8009964:	b538      	push	{r3, r4, r5, lr}
    if (numwords > 1) {
 8009966:	dd0a      	ble.n	800997e <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1e>
        while (numwords-- > 0) {
 8009968:	1e4c      	subs	r4, r1, #1
 800996a:	3c01      	subs	r4, #1
            registerGC(root++, 1);
 800996c:	2101      	movs	r1, #1
 800996e:	1d05      	adds	r5, r0, #4
 8009970:	f7ff fff6 	bl	8009960 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
        while (numwords-- > 0) {
 8009974:	1c63      	adds	r3, r4, #1
            registerGC(root++, 1);
 8009976:	4628      	mov	r0, r5
        while (numwords-- > 0) {
 8009978:	d1f7      	bne.n	800996a <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0xa>
        }
        return;
    }

    gcRoots.push((TValue)((uint32_t)root | 1));
}
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 800997e:	4b04      	ldr	r3, [pc, #16]	; (8009990 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x30>)
 8009980:	f040 0201 	orr.w	r2, r0, #1
 8009984:	8899      	ldrh	r1, [r3, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800998c:	f000 b956 	b.w	8009c3c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8009990:	20001018 	.word	0x20001018

08009994 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 8009994:	0783      	lsls	r3, r0, #30
 8009996:	d102      	bne.n	800999e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
 8009998:	b108      	cbz	r0, 800999e <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
    return isTagged(v) || !((uint32_t)v >> 28);
 800999a:	0f03      	lsrs	r3, r0, #28
 800999c:	d100      	bne.n	80099a0 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xc>

void registerGCPtr(TValue ptr) {
    if (isReadOnly(ptr))
        return;
    gcRoots.push(ptr);
}
 800999e:	4770      	bx	lr
    void push(TValue value) { set(length, value); }
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0x18>)
 80099a2:	4602      	mov	r2, r0
 80099a4:	8899      	ldrh	r1, [r3, #4]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 b948 	b.w	8009c3c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 80099ac:	20001018 	.word	0x20001018

080099b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 80099b0:	0782      	lsls	r2, r0, #30

void unregisterGCPtr(TValue ptr) {
 80099b2:	4603      	mov	r3, r0
 80099b4:	d102      	bne.n	80099bc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
 80099b6:	b108      	cbz	r0, 80099bc <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
    return isTagged(v) || !((uint32_t)v >> 28);
 80099b8:	0f1b      	lsrs	r3, r3, #28
 80099ba:	d100      	bne.n	80099be <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xe>
    if (isReadOnly(ptr))
        return;
    removePtr(ptr);
}
 80099bc:	4770      	bx	lr
    removePtr(ptr);
 80099be:	f7ff bbe9 	b.w	8009194 <_ZN3pxtL9removePtrEPNS_12TValueStructE>
 80099c2:	bf00      	nop

080099c4 <_ZN3pxt13RefCollection4scanEPS0_>:
void RefImage::scan(RefImage *t) {
    gcScan((TValue)t->buffer());
}

void RefCollection::scan(RefCollection *t) {
    gcScanSegment(t->head);
 80099c4:	3004      	adds	r0, #4
 80099c6:	f7ff bc85 	b.w	80092d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80099ca:	bf00      	nop

080099cc <_ZN3pxt9RefAction4scanEPS0_>:
}

void RefAction::scan(RefAction *t) {
    gcScanMany(t->fields, t->len);
 80099cc:	8881      	ldrh	r1, [r0, #4]
 80099ce:	300c      	adds	r0, #12
 80099d0:	f7ff bc5c 	b.w	800928c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>

080099d4 <_ZN3pxt11RefRefLocal4scanEPS0_>:
}

void RefRefLocal::scan(RefRefLocal *t) {
    gcScan(t->v);
 80099d4:	6840      	ldr	r0, [r0, #4]
 80099d6:	f7ff bc3d 	b.w	8009254 <_ZN3pxt6gcScanEPNS_12TValueStructE>
 80099da:	bf00      	nop

080099dc <_ZN3pxt6RefMap4scanEPS0_>:
}

void RefMap::scan(RefMap *t) {
 80099dc:	b510      	push	{r4, lr}
 80099de:	4604      	mov	r4, r0
    gcScanSegment(t->keys);
 80099e0:	3004      	adds	r0, #4
 80099e2:	f7ff fc77 	bl	80092d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
    gcScanSegment(t->values);
 80099e6:	f104 000c 	add.w	r0, r4, #12
}
 80099ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gcScanSegment(t->values);
 80099ee:	f7ff bc71 	b.w	80092d4 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80099f2:	bf00      	nop

080099f4 <_ZN3pxt14RefRecord_scanEPNS_9RefRecordE>:
    return (VTable *)(r->vtable & ~1);
 80099f4:	f850 3b04 	ldr.w	r3, [r0], #4
 80099f8:	f023 0301 	bic.w	r3, r3, #1

void RefRecord_scan(RefRecord *r) {
    VTable *tbl = getVTable(r);
    gcScanMany(r->fields, (tbl->numbytes - sizeof(RefRecord)) >> 2);
 80099fc:	8819      	ldrh	r1, [r3, #0]
 80099fe:	3904      	subs	r1, #4
 8009a00:	0889      	lsrs	r1, r1, #2
 8009a02:	f7ff bc43 	b.w	800928c <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
 8009a06:	bf00      	nop

08009a08 <_ZN3pxt13RefCollection6gcsizeEPS0_>:
    return SIZE(t->length());
}

unsigned RefCollection::gcsize(RefCollection *t) {
    return SIZE(0);
}
 8009a08:	2003      	movs	r0, #3
 8009a0a:	4770      	bx	lr

08009a0c <_ZN3pxt9RefAction6gcsizeEPS0_>:

unsigned RefAction::gcsize(RefAction *t) {
    return SIZE(t->len << 2);
 8009a0c:	8880      	ldrh	r0, [r0, #4]
 8009a0e:	0080      	lsls	r0, r0, #2
 8009a10:	300f      	adds	r0, #15
}
 8009a12:	0880      	lsrs	r0, r0, #2
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop

08009a18 <_ZN3pxt11RefRefLocal6gcsizeEPS0_>:

unsigned RefRefLocal::gcsize(RefRefLocal *t) {
    return SIZE(0);
}
 8009a18:	2002      	movs	r0, #2
 8009a1a:	4770      	bx	lr

08009a1c <_ZN3pxt6RefMap6gcsizeEPS0_>:

unsigned RefMap::gcsize(RefMap *t) {
    return SIZE(0);
}
 8009a1c:	2005      	movs	r0, #5
 8009a1e:	4770      	bx	lr

08009a20 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    LLSegment() : data(nullptr), length(0), size(0) {}
 8009a20:	2300      	movs	r3, #0
 8009a22:	4903      	ldr	r1, [pc, #12]	; (8009a30 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x10>)
 8009a24:	4a03      	ldr	r2, [pc, #12]	; (8009a34 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x14>)
 8009a26:	e9c1 3300 	strd	r3, r3, [r1]
 8009a2a:	e9c2 3300 	strd	r3, r3, [r2]

#endif

} // namespace pxt
 8009a2e:	4770      	bx	lr
 8009a30:	20001018 	.word	0x20001018
 8009a34:	20001028 	.word	0x20001028

08009a38 <_ZN5loops7foreverEPN3pxt12TValueStructE>:
//
//
//
//
void forever(Action a) {
    runForever(a);
 8009a38:	f000 bbd0 	b.w	800a1dc <_ZN3pxt10runForeverEPNS_12TValueStructE>

08009a3c <_ZN5loops5pauseEi>:
//
//
//
//
void pause(int ms) {
    if (ms < 0) return;
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	db01      	blt.n	8009a44 <_ZN5loops5pauseEi+0x8>
    sleep_ms(ms);
 8009a40:	f000 bbc8 	b.w	800a1d4 <_ZN3pxt8sleep_msEj>
}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop

08009a48 <_ZN3pxt17RefRecord_destroyEPNS_9RefRecordE>:
    for (int i = 0; i < len; ++i) {
        decr(r->fields[i]);
        r->fields[i] = 0;
    }
#endif
}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop

08009a4c <_ZN3pxt13RefCollection7destroyEPS0_>:
#ifdef DEBUG_BUILD
    DMESG("In Segment::destroy");
    this->print();
#endif
    length = size = 0;
    data = nullptr;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    for (unsigned i = 0; i < len; i++) {
        decr(data[i]);
    }
#endif
    t->head.destroy();
}
 8009a52:	4770      	bx	lr

08009a54 <_ZN3pxt6RefMap7destroyEPS0_>:
    data = nullptr;
 8009a54:	2300      	movs	r3, #0
 8009a56:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009a5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
        keys[i] = nullptr;
    }
#endif
    t->keys.destroy();
    t->values.destroy();
}
 8009a5e:	4770      	bx	lr

08009a60 <_ZN3pxt9RefAction5printEPS0_>:
void RefAction::print(RefAction *t) {
 8009a60:	4601      	mov	r1, r0
 8009a62:	b500      	push	{lr}
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <_ZN3pxt9RefAction5printEPS0_+0x20>)
 8009a66:	6880      	ldr	r0, [r0, #8]
 8009a68:	888a      	ldrh	r2, [r1, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
void RefAction::print(RefAction *t) {
 8009a6c:	b083      	sub	sp, #12
    DMESG("RefAction %p r=%d pc=%X size=%d", t, REFCNT(t),
 8009a6e:	1ac3      	subs	r3, r0, r3
 8009a70:	9200      	str	r2, [sp, #0]
 8009a72:	4804      	ldr	r0, [pc, #16]	; (8009a84 <_ZN3pxt9RefAction5printEPS0_+0x24>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	f001 f9e1 	bl	800ae3c <codal_dmesg>
}
 8009a7a:	b003      	add	sp, #12
 8009a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a80:	20001034 	.word	0x20001034
 8009a84:	0800d484 	.word	0x0800d484

08009a88 <_ZN3pxt11RefRefLocal5printEPS0_>:
void RefRefLocal::print(RefRefLocal *t) {
 8009a88:	4601      	mov	r1, r0
    DMESG("RefRefLocal %p r=%d v=%p", t, REFCNT(t), (void *)t->v);
 8009a8a:	6843      	ldr	r3, [r0, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4801      	ldr	r0, [pc, #4]	; (8009a94 <_ZN3pxt11RefRefLocal5printEPS0_+0xc>)
 8009a90:	f001 b9d4 	b.w	800ae3c <codal_dmesg>
 8009a94:	0800d2c8 	.word	0x0800d2c8

08009a98 <_ZN3pxt6RefMap5printEPS0_>:
    }

    return -1;
}

void RefMap::print(RefMap *t) {
 8009a98:	4601      	mov	r1, r0
    DMESG("RefMap %p r=%d size=%d", t, REFCNT(t), t->keys.getLength());
 8009a9a:	8903      	ldrh	r3, [r0, #8]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <_ZN3pxt6RefMap5printEPS0_+0xc>)
 8009aa0:	f001 b9cc 	b.w	800ae3c <codal_dmesg>
 8009aa4:	0800d418 	.word	0x0800d418

08009aa8 <_ZN3pxt9LLSegment9setLengthEj.part.5>:
void LLSegment::setLength(unsigned newLen) {
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (newLen > size) {
 8009aaa:	88c3      	ldrh	r3, [r0, #6]
void LLSegment::setLength(unsigned newLen) {
 8009aac:	4605      	mov	r5, r0
    if (newLen > size) {
 8009aae:	428b      	cmp	r3, r1
void LLSegment::setLength(unsigned newLen) {
 8009ab0:	460e      	mov	r6, r1
    if (newLen > size) {
 8009ab2:	d225      	bcs.n	8009b00 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x58>
    if (size == 0) {
 8009ab4:	b39b      	cbz	r3, 8009b1e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x76>
    if (size < 64) {
 8009ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ab8:	dd2f      	ble.n	8009b1a <_ZN3pxt9LLSegment9setLengthEj.part.5+0x72>
    if (size < 512) {
 8009aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009abe:	db36      	blt.n	8009b2e <_ZN3pxt9LLSegment9setLengthEj.part.5+0x86>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
        return size + 256;
 8009ac4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009ac8:	f503 7380 	add.w	r3, r3, #256	; 0x100
        return size + 256;
 8009acc:	4293      	cmp	r3, r2
 8009ace:	bf98      	it	ls
 8009ad0:	461c      	movls	r4, r3
 8009ad2:	42b4      	cmp	r4, r6
 8009ad4:	bfb8      	it	lt
 8009ad6:	4634      	movlt	r4, r6
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 8009ad8:	00a0      	lsls	r0, r4, #2
 8009ada:	f001 fedf 	bl	800b89c <device_malloc>
        if (size) {
 8009ade:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));
 8009ae0:	4607      	mov	r7, r0
        if (size) {
 8009ae2:	b9f3      	cbnz	r3, 8009b22 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x7a>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 8009ae4:	1ae2      	subs	r2, r4, r3
 8009ae6:	0092      	lsls	r2, r2, #2
 8009ae8:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8009aec:	2100      	movs	r1, #0
 8009aee:	f7fa f97b 	bl	8003de8 <memset>
        xfree(data);
 8009af2:	6828      	ldr	r0, [r5, #0]
 8009af4:	f001 fef8 	bl	800b8e8 <device_free>
        data = tmp;
 8009af8:	602f      	str	r7, [r5, #0]
        size = newSize;
 8009afa:	80ec      	strh	r4, [r5, #6]
    length = newLen;
 8009afc:	80ae      	strh	r6, [r5, #4]
}
 8009afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (newLen < length) {
 8009b00:	8882      	ldrh	r2, [r0, #4]
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d2fa      	bcs.n	8009afc <_ZN3pxt9LLSegment9setLengthEj.part.5+0x54>
        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));
 8009b06:	6800      	ldr	r0, [r0, #0]
 8009b08:	1a52      	subs	r2, r2, r1
 8009b0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	2100      	movs	r1, #0
 8009b12:	f7fa f969 	bl	8003de8 <memset>
    length = newLen;
 8009b16:	80ae      	strh	r6, [r5, #4]
}
 8009b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return size * 2; // Double
 8009b1a:	005c      	lsls	r4, r3, #1
 8009b1c:	e7d9      	b.n	8009ad2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
        return 4;
 8009b1e:	2404      	movs	r4, #4
 8009b20:	e7d7      	b.n	8009ad2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
            memcpy(tmp, data, size * sizeof(TValue));
 8009b22:	009a      	lsls	r2, r3, #2
 8009b24:	6829      	ldr	r1, [r5, #0]
 8009b26:	f7fa f917 	bl	8003d58 <memcpy>
 8009b2a:	88eb      	ldrh	r3, [r5, #6]
 8009b2c:	e7da      	b.n	8009ae4 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x3c>
        return size * 5 / 3; // Grow by 1.66 rate
 8009b2e:	4c03      	ldr	r4, [pc, #12]	; (8009b3c <_ZN3pxt9LLSegment9setLengthEj.part.5+0x94>)
 8009b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009b34:	fba4 3403 	umull	r3, r4, r4, r3
 8009b38:	0864      	lsrs	r4, r4, #1
 8009b3a:	e7ca      	b.n	8009ad2 <_ZN3pxt9LLSegment9setLengthEj.part.5+0x2a>
 8009b3c:	aaaaaaab 	.word	0xaaaaaaab

08009b40 <_ZN3pxt8checkStrEbPKc.part.6>:
}

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
 8009b40:	4604      	mov	r4, r0
 8009b42:	b508      	push	{r3, lr}
    if (!cond) {
        ////  Show a message when check fails.
        debug_print("***** Check Failed: "); debug_println(msg); debug_flush();  //// TODO
 8009b44:	4804      	ldr	r0, [pc, #16]	; (8009b58 <_ZN3pxt8checkStrEbPKc.part.6+0x18>)
 8009b46:	f7fa fabf 	bl	80040c8 <debug_print>
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7fa fac2 	bl	80040d4 <debug_println>
 8009b50:	f7fa fa30 	bl	8003fb4 <debug_flush>
 8009b54:	e7fe      	b.n	8009b54 <_ZN3pxt8checkStrEbPKc.part.6+0x14>
 8009b56:	bf00      	nop
 8009b58:	0800d45c 	.word	0x0800d45c

08009b5c <_ZN3pxt9RefAction7destroyEPS0_>:
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop

08009b60 <_ZN3pxt11RefRefLocal7destroyEPS0_>:
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop

08009b64 <_ZN3pxt8mkActionEiPNS_9RefActionE>:
    return (VTable *)(r->vtable & ~1);
 8009b64:	680b      	ldr	r3, [r1, #0]
Action mkAction(int totallen, RefAction *act) {
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	f023 0301 	bic.w	r3, r3, #1
    if (!cond)
 8009b6c:	891b      	ldrh	r3, [r3, #8]
 8009b6e:	460c      	mov	r4, r1
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	4605      	mov	r5, r0
 8009b74:	d102      	bne.n	8009b7c <_ZN3pxt8mkActionEiPNS_9RefActionE+0x18>
    if (totallen == 0) {
 8009b76:	b96d      	cbnz	r5, 8009b94 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x30>
}
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
    DMESG("Error: %d [%d]", code, subcode);
 8009b7c:	4810      	ldr	r0, [pc, #64]	; (8009bc0 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x5c>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f240 3185 	movw	r1, #901	; 0x385
 8009b84:	f001 f95a 	bl	800ae3c <codal_dmesg>
    target_panic(code);
 8009b88:	f240 3085 	movw	r0, #901	; 0x385
 8009b8c:	f7f6 fffa 	bl	8000b84 <target_panic>
    if (totallen == 0) {
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	d0f1      	beq.n	8009b78 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x14>
    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(unsigned));
 8009b94:	1ce8      	adds	r0, r5, #3
 8009b96:	0080      	lsls	r0, r0, #2
 8009b98:	f7ff fd9e 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
    RefAction *r = new (ptr) RefAction();
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	b108      	cbz	r0, 8009ba4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x40>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009ba0:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x60>)
 8009ba2:	6003      	str	r3, [r0, #0]
    r->func = act->func;
 8009ba4:	68a3      	ldr	r3, [r4, #8]
    return (Action)r;
 8009ba6:	4634      	mov	r4, r6
    memset(r->fields, 0, r->len * sizeof(unsigned));
 8009ba8:	b2aa      	uxth	r2, r5
    r->func = act->func;
 8009baa:	60b3      	str	r3, [r6, #8]
    r->len = totallen;
 8009bac:	80b5      	strh	r5, [r6, #4]
    memset(r->fields, 0, r->len * sizeof(unsigned));
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	f106 000c 	add.w	r0, r6, #12
 8009bb6:	f7fa f917 	bl	8003de8 <memset>
}
 8009bba:	4620      	mov	r0, r4
 8009bbc:	bd70      	pop	{r4, r5, r6, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800d474 	.word	0x0800d474
 8009bc4:	0800d040 	.word	0x0800d040

08009bc8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE>:
RefRecord *mkClassInstance(VTable *vtable) {
 8009bc8:	b538      	push	{r3, r4, r5, lr}
    if (!cond)
 8009bca:	6902      	ldr	r2, [r0, #16]
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x3c>)
 8009bce:	4605      	mov	r5, r0
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d009      	beq.n	8009be8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x20>
    DMESG("Error: %d [%d]", code, subcode);
 8009bd4:	480c      	ldr	r0, [pc, #48]	; (8009c08 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x40>)
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	f44f 7162 	mov.w	r1, #904	; 0x388
 8009bdc:	f001 f92e 	bl	800ae3c <codal_dmesg>
    target_panic(code);
 8009be0:	f44f 7062 	mov.w	r0, #904	; 0x388
 8009be4:	f7f6 ffce 	bl	8000b84 <target_panic>
    void *ptr = gcAllocate(vtable->numbytes);
 8009be8:	8828      	ldrh	r0, [r5, #0]
 8009bea:	f7ff fd75 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
    RefRecord *r = new (ptr) RefRecord(vtable);
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b100      	cbz	r0, 8009bf4 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x2c>
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009bf2:	6005      	str	r5, [r0, #0]
    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));
 8009bf4:	882a      	ldrh	r2, [r5, #0]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	3a04      	subs	r2, #4
 8009bfa:	1d20      	adds	r0, r4, #4
 8009bfc:	f7fa f8f4 	bl	8003de8 <memset>
}
 8009c00:	4620      	mov	r0, r4
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	08009a49 	.word	0x08009a49
 8009c08:	0800d474 	.word	0x0800d474

08009c0c <_ZN3pxt9RefObject9destroyVTEv>:
    return (VTable *)(r->vtable & ~1);
 8009c0c:	6803      	ldr	r3, [r0, #0]
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
    ((RefObjectMethod)getVTable(this)->methods[0])(this);
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	4718      	bx	r3
 8009c16:	bf00      	nop

08009c18 <_ZN3pxt15deleteRefObjectEPNS_9RefObjectE>:
 8009c18:	6803      	ldr	r3, [r0, #0]
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	4718      	bx	r3
 8009c22:	bf00      	nop

08009c24 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE>:
 8009c24:	6803      	ldr	r3, [r0, #0]
void RefRecord_print(RefRecord *r) {
 8009c26:	4601      	mov	r1, r0
 8009c28:	f023 0301 	bic.w	r3, r3, #1
    DMESG("RefRecord %p r=%d size=%d bytes", r, REFCNT(r), getVTable(r)->numbytes);
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE+0x14>)
 8009c32:	f001 b903 	b.w	800ae3c <codal_dmesg>
 8009c36:	bf00      	nop
 8009c38:	0800d3f8 	.word	0x0800d3f8

08009c3c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>:
    if (idx >= Segment::MaxSize)
 8009c3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d80a      	bhi.n	8009c5a <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x1e>
    if (idx >= length)
 8009c44:	8883      	ldrh	r3, [r0, #4]
void LLSegment::set(unsigned idx, TValue v) {
 8009c46:	b570      	push	{r4, r5, r6, lr}
    if (idx >= length)
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	460c      	mov	r4, r1
 8009c50:	d904      	bls.n	8009c5c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x20>
    data[idx] = v;
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009c58:	bd70      	pop	{r4, r5, r6, pc}
 8009c5a:	4770      	bx	lr
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	f7ff ff23 	bl	8009aa8 <_ZN3pxt9LLSegment9setLengthEj.part.5>
    data[idx] = v;
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	bf00      	nop

08009c6c <_ZN3pxt9LLSegment3popEv>:
    if (length > 0) {
 8009c6c:	8883      	ldrh	r3, [r0, #4]
 8009c6e:	b14b      	cbz	r3, 8009c84 <_ZN3pxt9LLSegment3popEv+0x18>
        data[length] = 0;
 8009c70:	2100      	movs	r1, #0
        TValue value = data[length];
 8009c72:	6802      	ldr	r2, [r0, #0]
        --length;
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 8009c7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = 0;
 8009c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 8009c82:	4770      	bx	lr
    return 0;
 8009c84:	4618      	mov	r0, r3
}
 8009c86:	4770      	bx	lr

08009c88 <_ZN3pxt7Segment9growByMinEt>:
    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));
 8009c88:	88c3      	ldrh	r3, [r0, #6]
void Segment::growByMin(ramint_t minSize) {
 8009c8a:	b570      	push	{r4, r5, r6, lr}
    if (size == 0) {
 8009c8c:	b34b      	cbz	r3, 8009ce2 <_ZN3pxt7Segment9growByMinEt+0x5a>
    if (size < 64) {
 8009c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8009c90:	dd0f      	ble.n	8009cb2 <_ZN3pxt7Segment9growByMinEt+0x2a>
    if (size < 512) {
 8009c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c96:	db2c      	blt.n	8009cf2 <_ZN3pxt7Segment9growByMinEt+0x6a>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009c98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c9c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8009ca0:	4294      	cmp	r4, r2
 8009ca2:	d823      	bhi.n	8009cec <_ZN3pxt7Segment9growByMinEt+0x64>
 8009ca4:	b2a4      	uxth	r4, r4
 8009ca6:	428c      	cmp	r4, r1
 8009ca8:	bf38      	it	cc
 8009caa:	460c      	movcc	r4, r1
    if (size < newSize) {
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d307      	bcc.n	8009cc0 <_ZN3pxt7Segment9growByMinEt+0x38>
}
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
        return size * 2; // Double
 8009cb2:	005c      	lsls	r4, r3, #1
 8009cb4:	b2a4      	uxth	r4, r4
 8009cb6:	428c      	cmp	r4, r1
 8009cb8:	bf38      	it	cc
 8009cba:	460c      	movcc	r4, r1
    if (size < newSize) {
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d2f7      	bcs.n	8009cb0 <_ZN3pxt7Segment9growByMinEt+0x28>
 8009cc0:	4605      	mov	r5, r0
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 8009cc2:	00a0      	lsls	r0, r4, #2
 8009cc4:	f7ff fd9e 	bl	8009804 <_ZN3pxt15gcAllocateArrayEi>
        if (size)
 8009cc8:	88eb      	ldrh	r3, [r5, #6]
        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));
 8009cca:	4606      	mov	r6, r0
        if (size)
 8009ccc:	b9e3      	cbnz	r3, 8009d08 <_ZN3pxt7Segment9growByMinEt+0x80>
        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));
 8009cce:	1ae2      	subs	r2, r4, r3
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f7fa f886 	bl	8003de8 <memset>
        data = tmp;
 8009cdc:	602e      	str	r6, [r5, #0]
        size = newSize;
 8009cde:	80ec      	strh	r4, [r5, #6]
}
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
 8009ce2:	2904      	cmp	r1, #4
 8009ce4:	bf38      	it	cc
 8009ce6:	2104      	movcc	r1, #4
 8009ce8:	460c      	mov	r4, r1
 8009cea:	e7e7      	b.n	8009cbc <_ZN3pxt7Segment9growByMinEt+0x34>
    if ((unsigned)size + 256 < Segment::MaxSize)
 8009cec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8009cf0:	e7e4      	b.n	8009cbc <_ZN3pxt7Segment9growByMinEt+0x34>
        return size * 5 / 3; // Grow by 1.66 rate
 8009cf2:	4a08      	ldr	r2, [pc, #32]	; (8009d14 <_ZN3pxt7Segment9growByMinEt+0x8c>)
 8009cf4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8009cf8:	fba2 2404 	umull	r2, r4, r2, r4
 8009cfc:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8009d00:	428c      	cmp	r4, r1
 8009d02:	bf38      	it	cc
 8009d04:	460c      	movcc	r4, r1
 8009d06:	e7d9      	b.n	8009cbc <_ZN3pxt7Segment9growByMinEt+0x34>
            memcpy(tmp, data, size * sizeof(TValue));
 8009d08:	009a      	lsls	r2, r3, #2
 8009d0a:	6829      	ldr	r1, [r5, #0]
 8009d0c:	f7fa f824 	bl	8003d58 <memcpy>
 8009d10:	88eb      	ldrh	r3, [r5, #6]
 8009d12:	e7dc      	b.n	8009cce <_ZN3pxt7Segment9growByMinEt+0x46>
 8009d14:	aaaaaaab 	.word	0xaaaaaaab

08009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>:
void Segment::set(unsigned i, TValue value) {
 8009d18:	b530      	push	{r4, r5, lr}
    if (i < size) {
 8009d1a:	88c3      	ldrh	r3, [r0, #6]
void Segment::set(unsigned i, TValue value) {
 8009d1c:	b083      	sub	sp, #12
    if (i < size) {
 8009d1e:	428b      	cmp	r3, r1
void Segment::set(unsigned i, TValue value) {
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
    if (i < size) {
 8009d24:	d909      	bls.n	8009d3a <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x22>
        data[i] = value;
 8009d26:	6803      	ldr	r3, [r0, #0]
 8009d28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    if (length <= i) {
 8009d2c:	88ab      	ldrh	r3, [r5, #4]
 8009d2e:	429c      	cmp	r4, r3
        length = i + 1;
 8009d30:	bf24      	itt	cs
 8009d32:	3401      	addcs	r4, #1
 8009d34:	80ac      	strhcs	r4, [r5, #4]
}
 8009d36:	b003      	add	sp, #12
 8009d38:	bd30      	pop	{r4, r5, pc}
    } else if (i < Segment::MaxSize) {
 8009d3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	d8f9      	bhi.n	8009d36 <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x1e>
        growByMin(i + 1);
 8009d42:	3101      	adds	r1, #1
 8009d44:	b289      	uxth	r1, r1
 8009d46:	9201      	str	r2, [sp, #4]
 8009d48:	f7ff ff9e 	bl	8009c88 <_ZN3pxt7Segment9growByMinEt>
        data[i] = value;
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	9a01      	ldr	r2, [sp, #4]
 8009d50:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009d54:	e7ea      	b.n	8009d2c <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x14>
 8009d56:	bf00      	nop

08009d58 <_ZN3pxt7Segment9setLengthEj>:
void Segment::setLength(unsigned newLength) {
 8009d58:	b538      	push	{r3, r4, r5, lr}
    if (newLength > size) {
 8009d5a:	88c3      	ldrh	r3, [r0, #6]
void Segment::setLength(unsigned newLength) {
 8009d5c:	4604      	mov	r4, r0
    if (newLength > size) {
 8009d5e:	428b      	cmp	r3, r1
void Segment::setLength(unsigned newLength) {
 8009d60:	460d      	mov	r5, r1
    if (newLength > size) {
 8009d62:	d202      	bcs.n	8009d6a <_ZN3pxt7Segment9setLengthEj+0x12>
        ensure(length);
 8009d64:	8881      	ldrh	r1, [r0, #4]
    if (newSize < size) {
 8009d66:	428b      	cmp	r3, r1
 8009d68:	d901      	bls.n	8009d6e <_ZN3pxt7Segment9setLengthEj+0x16>
    length = newLength;
 8009d6a:	80a5      	strh	r5, [r4, #4]
}
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
    growByMin(newSize);
 8009d6e:	f7ff ff8b 	bl	8009c88 <_ZN3pxt7Segment9growByMinEt>
    length = newLength;
 8009d72:	80a5      	strh	r5, [r4, #4]
}
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop

08009d78 <_ZN3pxt7Segment3popEv>:
    if (length > 0) {
 8009d78:	8883      	ldrh	r3, [r0, #4]
 8009d7a:	b14b      	cbz	r3, 8009d90 <_ZN3pxt7Segment3popEv+0x18>
        data[length] = Segment::DefaultValue;
 8009d7c:	2100      	movs	r1, #0
        TValue value = data[length];
 8009d7e:	6802      	ldr	r2, [r0, #0]
        --length;
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	8083      	strh	r3, [r0, #4]
        TValue value = data[length];
 8009d86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        data[length] = Segment::DefaultValue;
 8009d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return value;
 8009d8e:	4770      	bx	lr
    return Segment::DefaultValue;
 8009d90:	4618      	mov	r0, r3
}
 8009d92:	4770      	bx	lr

08009d94 <_ZN3pxt7Segment6removeEj>:
TValue Segment::remove(unsigned i) {
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (i < length) {
 8009d96:	8883      	ldrh	r3, [r0, #4]
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	d91d      	bls.n	8009dd8 <_ZN3pxt7Segment6removeEj+0x44>
        TValue ret = data[i];
 8009d9c:	6805      	ldr	r5, [r0, #0]
        if (i + 1 < length) {
 8009d9e:	1c4a      	adds	r2, r1, #1
        TValue ret = data[i];
 8009da0:	008f      	lsls	r7, r1, #2
        if (i + 1 < length) {
 8009da2:	4293      	cmp	r3, r2
 8009da4:	4604      	mov	r4, r0
        TValue ret = data[i];
 8009da6:	f855 6021 	ldr.w	r6, [r5, r1, lsl #2]
 8009daa:	eb05 0007 	add.w	r0, r5, r7
        if (i + 1 < length) {
 8009dae:	d807      	bhi.n	8009dc0 <_ZN3pxt7Segment6removeEj+0x2c>
        data[length] = Segment::DefaultValue;
 8009db0:	2200      	movs	r2, #0
        length--;
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	80a3      	strh	r3, [r4, #4]
        data[length] = Segment::DefaultValue;
 8009db8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
}
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(unsigned));
 8009dc0:	1a5a      	subs	r2, r3, r1
 8009dc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	1d39      	adds	r1, r7, #4
 8009dca:	4429      	add	r1, r5
 8009dcc:	0092      	lsls	r2, r2, #2
 8009dce:	f7f9 fff2 	bl	8003db6 <memmove>
 8009dd2:	88a3      	ldrh	r3, [r4, #4]
 8009dd4:	6825      	ldr	r5, [r4, #0]
 8009dd6:	e7eb      	b.n	8009db0 <_ZN3pxt7Segment6removeEj+0x1c>
    return Segment::DefaultValue;
 8009dd8:	2600      	movs	r6, #0
 8009dda:	e7ef      	b.n	8009dbc <_ZN3pxt7Segment6removeEj+0x28>

08009ddc <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>:
    if (i < length) {
 8009ddc:	8883      	ldrh	r3, [r0, #4]
 8009dde:	428b      	cmp	r3, r1
 8009de0:	d91c      	bls.n	8009e1c <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x40>
void Segment::insert(unsigned i, TValue value) {
 8009de2:	b570      	push	{r4, r5, r6, lr}
 8009de4:	460e      	mov	r6, r1
 8009de6:	4615      	mov	r5, r2
        ensure(length + 1);
 8009de8:	1c59      	adds	r1, r3, #1
    if (newSize < size) {
 8009dea:	88c2      	ldrh	r2, [r0, #6]
        ensure(length + 1);
 8009dec:	b289      	uxth	r1, r1
    if (newSize < size) {
 8009dee:	428a      	cmp	r2, r1
 8009df0:	4604      	mov	r4, r0
 8009df2:	d90f      	bls.n	8009e14 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x38>
        memmove(data + i + 1, data + i, (length - i) * sizeof(unsigned));
 8009df4:	1c70      	adds	r0, r6, #1
 8009df6:	6821      	ldr	r1, [r4, #0]
 8009df8:	0080      	lsls	r0, r0, #2
 8009dfa:	1b9b      	subs	r3, r3, r6
 8009dfc:	1f06      	subs	r6, r0, #4
 8009dfe:	009a      	lsls	r2, r3, #2
 8009e00:	4408      	add	r0, r1
 8009e02:	4431      	add	r1, r6
 8009e04:	f7f9 ffd7 	bl	8003db6 <memmove>
        length++;
 8009e08:	88a3      	ldrh	r3, [r4, #4]
        data[i] = value;
 8009e0a:	6822      	ldr	r2, [r4, #0]
        length++;
 8009e0c:	3301      	adds	r3, #1
        data[i] = value;
 8009e0e:	5195      	str	r5, [r2, r6]
        length++;
 8009e10:	80a3      	strh	r3, [r4, #4]
}
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 8009e14:	f7ff ff38 	bl	8009c88 <_ZN3pxt7Segment9growByMinEt>
 8009e18:	88a3      	ldrh	r3, [r4, #4]
 8009e1a:	e7eb      	b.n	8009df4 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x18>
        set(i, value);
 8009e1c:	f7ff bf7c 	b.w	8009d18 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08009e20 <_ZN3pxt7Segment5printEv>:
void Segment::print() {
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	4605      	mov	r5, r0
    DMESG("Segment: %p, length: %d, size: %d", data, (unsigned)length, (unsigned)size);
 8009e24:	480a      	ldr	r0, [pc, #40]	; (8009e50 <_ZN3pxt7Segment5printEv+0x30>)
 8009e26:	88eb      	ldrh	r3, [r5, #6]
 8009e28:	88aa      	ldrh	r2, [r5, #4]
 8009e2a:	6829      	ldr	r1, [r5, #0]
 8009e2c:	f001 f806 	bl	800ae3c <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009e30:	88eb      	ldrh	r3, [r5, #6]
 8009e32:	b15b      	cbz	r3, 8009e4c <_ZN3pxt7Segment5printEv+0x2c>
 8009e34:	2400      	movs	r4, #0
        DMESG("-> %d", (unsigned)(uintptr_t)data[i]);
 8009e36:	4e07      	ldr	r6, [pc, #28]	; (8009e54 <_ZN3pxt7Segment5printEv+0x34>)
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009e40:	f000 fffc 	bl	800ae3c <codal_dmesg>
    for (unsigned i = 0; i < size; i++) {
 8009e44:	88eb      	ldrh	r3, [r5, #6]
 8009e46:	3401      	adds	r4, #1
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d8f5      	bhi.n	8009e38 <_ZN3pxt7Segment5printEv+0x18>
}
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	bf00      	nop
 8009e50:	0800d430 	.word	0x0800d430
 8009e54:	0800d454 	.word	0x0800d454

08009e58 <_ZN3pxt13RefCollection5printEPS0_>:
void RefCollection::print(RefCollection *t) {
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	4604      	mov	r4, r0
    DMESG("RefCollection %p r=%d size=%d", t, REFCNT(t), t->head.getLength());
 8009e5c:	8903      	ldrh	r3, [r0, #8]
 8009e5e:	4601      	mov	r1, r0
 8009e60:	2200      	movs	r2, #0
 8009e62:	4804      	ldr	r0, [pc, #16]	; (8009e74 <_ZN3pxt13RefCollection5printEPS0_+0x1c>)
 8009e64:	f000 ffea 	bl	800ae3c <codal_dmesg>
    t->head.print();
 8009e68:	1d20      	adds	r0, r4, #4
}
 8009e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    t->head.print();
 8009e6e:	f7ff bfd7 	b.w	8009e20 <_ZN3pxt7Segment5printEv>
 8009e72:	bf00      	nop
 8009e74:	0800d3d8 	.word	0x0800d3d8

08009e78 <_ZN3pxt13RefCollectionC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009e78:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009e7a:	4902      	ldr	r1, [pc, #8]	; (8009e84 <_ZN3pxt13RefCollectionC1Ev+0xc>)
    Segment() : data(nullptr), length(0), size(0) {}
 8009e7c:	6082      	str	r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009e7e:	e9c0 1200 	strd	r1, r2, [r0]
PXT_VTABLE_CTOR(RefCollection) {}
 8009e82:	4770      	bx	lr
 8009e84:	0800d0d0 	.word	0x0800d0d0

08009e88 <_ZN3pxt11RefRefLocalC1Ev>:
    v = 0;
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4a02      	ldr	r2, [pc, #8]	; (8009e94 <_ZN3pxt11RefRefLocalC1Ev+0xc>)
 8009e8c:	e9c0 2100 	strd	r2, r1, [r0]
}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	0800d0a0 	.word	0x0800d0a0

08009e98 <_ZN3pxt6RefMapC1Ev>:
    Segment() : data(nullptr), length(0), size(0) {}
 8009e98:	2200      	movs	r2, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009e9a:	4903      	ldr	r1, [pc, #12]	; (8009ea8 <_ZN3pxt6RefMapC1Ev+0x10>)
    Segment() : data(nullptr), length(0), size(0) {}
 8009e9c:	e9c0 2202 	strd	r2, r2, [r0, #8]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8009ea0:	e9c0 1200 	strd	r1, r2, [r0]
    Segment() : data(nullptr), length(0), size(0) {}
 8009ea4:	6102      	str	r2, [r0, #16]
PXT_VTABLE_CTOR(RefMap) {}
 8009ea6:	4770      	bx	lr
 8009ea8:	0800d070 	.word	0x0800d070

08009eac <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>:
int RefMap::findIdx(String key) {
 8009eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned getLength() { return length; };
 8009eb0:	8906      	ldrh	r6, [r0, #8]
    auto data = (String *)keys.getData();
 8009eb2:	6845      	ldr	r5, [r0, #4]
    for (unsigned i = 0; i < len; ++i) {
 8009eb4:	b31e      	cbz	r6, 8009efe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
        if (data[i] == key)
 8009eb6:	6828      	ldr	r0, [r5, #0]
 8009eb8:	4281      	cmp	r1, r0
 8009eba:	d027      	beq.n	8009f0c <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x60>
    for (unsigned i = 0; i < len; ++i) {
 8009ebc:	2300      	movs	r3, #0
        if (data[i] == key)
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	e003      	b.n	8009eca <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x1e>
 8009ec2:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8009ec6:	428c      	cmp	r4, r1
 8009ec8:	d01d      	beq.n	8009f06 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x5a>
    for (unsigned i = 0; i < len; ++i) {
 8009eca:	3301      	adds	r3, #1
 8009ecc:	42b3      	cmp	r3, r6
 8009ece:	d1f8      	bne.n	8009ec2 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x16>
    auto keylen = key->length;
 8009ed0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 8009ed4:	1d8f      	adds	r7, r1, #6
    for (unsigned i = 0; i < len; ++i) {
 8009ed6:	2400      	movs	r4, #0
 8009ed8:	e004      	b.n	8009ee4 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x38>
 8009eda:	3401      	adds	r4, #1
 8009edc:	42b4      	cmp	r4, r6
 8009ede:	d00e      	beq.n	8009efe <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
 8009ee0:	f855 0f04 	ldr.w	r0, [r5, #4]!
        if (s->length == keylen && memcmp(s->data, key->data, keylen) == 0)
 8009ee4:	8883      	ldrh	r3, [r0, #4]
 8009ee6:	4543      	cmp	r3, r8
 8009ee8:	d1f7      	bne.n	8009eda <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
 8009eea:	3006      	adds	r0, #6
 8009eec:	4642      	mov	r2, r8
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f9 ff52 	bl	8003d98 <memcmp>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1f0      	bne.n	8009eda <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
            return i;
 8009ef8:	4620      	mov	r0, r4
}
 8009efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f06:	4618      	mov	r0, r3
 8009f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data[i] == key)
 8009f0c:	2000      	movs	r0, #0
            return i;
 8009f0e:	e7f8      	b.n	8009f02 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x56>

08009f10 <_ZN3pxt13debugMemLeaksEv>:
void debugMemLeaks() {}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop

08009f14 <_ZN3pxt5errorENS_9PXT_PANICEi>:
void error(PXT_PANIC code, int subcode) {
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
    DMESG("Error: %d [%d]", code, subcode);
 8009f18:	460a      	mov	r2, r1
 8009f1a:	4804      	ldr	r0, [pc, #16]	; (8009f2c <_ZN3pxt5errorENS_9PXT_PANICEi+0x18>)
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	f000 ff8d 	bl	800ae3c <codal_dmesg>
    target_panic(code);
 8009f22:	4620      	mov	r0, r4
}
 8009f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_panic(code);
 8009f28:	f7f6 be2c 	b.w	8000b84 <target_panic>
 8009f2c:	0800d474 	.word	0x0800d474

08009f30 <_ZN3pxt12templateHashEv>:
        }
    }
}

int templateHash() {
    return ((int *)bytecode)[4];
 8009f30:	4b01      	ldr	r3, [pc, #4]	; (8009f38 <_ZN3pxt12templateHashEv+0x8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
}
 8009f34:	6918      	ldr	r0, [r3, #16]
 8009f36:	4770      	bx	lr
 8009f38:	20001034 	.word	0x20001034

08009f3c <_ZN3pxt11programHashEv>:

int programHash() {
    return ((int *)bytecode)[6];
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <_ZN3pxt11programHashEv+0x8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
}
 8009f40:	6998      	ldr	r0, [r3, #24]
 8009f42:	4770      	bx	lr
 8009f44:	20001034 	.word	0x20001034

08009f48 <_ZN3pxt13getNumGlobalsEv>:

int getNumGlobals() {
    return bytecode[16];
 8009f48:	4b01      	ldr	r3, [pc, #4]	; (8009f50 <_ZN3pxt13getNumGlobalsEv+0x8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
}
 8009f4c:	8c18      	ldrh	r0, [r3, #32]
 8009f4e:	4770      	bx	lr
 8009f50:	20001034 	.word	0x20001034

08009f54 <_ZN3pxt11exec_binaryEPj>:

#ifndef X86_64
void exec_binary(unsigned *pc) {
 8009f54:	b570      	push	{r4, r5, r6, lr}

    ////  If the runtime version fails, then we are probably running an empty executable e.g.
    ////  pxt-maker/libs/stm32bluepill/built/dockercodal/build/STM32_BLUE_PILL.bin
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
 8009f56:	4604      	mov	r4, r0
 8009f58:	f854 6b03 	ldr.w	r6, [r4], #3
void exec_binary(unsigned *pc) {
 8009f5c:	4605      	mov	r5, r0
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
 8009f5e:	4831      	ldr	r0, [pc, #196]	; (800a024 <_ZN3pxt11exec_binaryEPj+0xd0>)
 8009f60:	f7fa f8b2 	bl	80040c8 <debug_print>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7fa f8f7 	bl	8004158 <debug_printhex_unsigned>
 8009f6a:	482f      	ldr	r0, [pc, #188]	; (800a028 <_ZN3pxt11exec_binaryEPj+0xd4>)
 8009f6c:	f7fa f8ac 	bl	80040c8 <debug_print>
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7fa f8f1 	bl	8004158 <debug_printhex_unsigned>
 8009f76:	482d      	ldr	r0, [pc, #180]	; (800a02c <_ZN3pxt11exec_binaryEPj+0xd8>)
 8009f78:	f7fa f8ac 	bl	80040d4 <debug_println>
 8009f7c:	f7fa f81a 	bl	8003fb4 <debug_flush>
    if (!cond) {
 8009f80:	f244 2310 	movw	r3, #16912	; 0x4210
 8009f84:	429e      	cmp	r6, r3
 8009f86:	d149      	bne.n	800a01c <_ZN3pxt11exec_binaryEPj+0xc8>
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO
 8009f88:	4829      	ldr	r0, [pc, #164]	; (800a030 <_ZN3pxt11exec_binaryEPj+0xdc>)
 8009f8a:	f7fa f8a3 	bl	80040d4 <debug_println>
 8009f8e:	f7fa f811 	bl	8003fb4 <debug_flush>

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009f92:	686b      	ldr	r3, [r5, #4]
 8009f94:	4c27      	ldr	r4, [pc, #156]	; (800a034 <_ZN3pxt11exec_binaryEPj+0xe0>)
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009f96:	8c18      	ldrh	r0, [r3, #32]
    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8009f98:	6023      	str	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009f9a:	0080      	lsls	r0, r0, #2
 8009f9c:	f7ff fc40 	bl	8009820 <app_alloc>
    return bytecode[16];
 8009fa0:	6823      	ldr	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009fa2:	4e25      	ldr	r6, [pc, #148]	; (800a038 <_ZN3pxt11exec_binaryEPj+0xe4>)
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8009fa4:	8c1a      	ldrh	r2, [r3, #32]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	0092      	lsls	r2, r2, #2
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8009faa:	6030      	str	r0, [r6, #0]
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8009fac:	f7f9 ff1c 	bl	8003de8 <memset>
    debug_println("---exec_binary compare"); debug_flush();  //// TODO
 8009fb0:	4822      	ldr	r0, [pc, #136]	; (800a03c <_ZN3pxt11exec_binaryEPj+0xe8>)
 8009fb2:	f7fa f88f 	bl	80040d4 <debug_println>
 8009fb6:	f7f9 fffd 	bl	8003fb4 <debug_flush>
    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	4a20      	ldr	r2, [pc, #128]	; (800a040 <_ZN3pxt11exec_binaryEPj+0xec>)
 8009fbe:	6819      	ldr	r1, [r3, #0]
    globals[0] = (TValue)&globals;
 8009fc0:	6830      	ldr	r0, [r6, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009fc2:	4291      	cmp	r1, r2
    globals[0] = (TValue)&globals;
 8009fc4:	6006      	str	r6, [r0, #0]
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8009fc6:	d126      	bne.n	800a016 <_ZN3pxt11exec_binaryEPj+0xc2>
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68ab      	ldr	r3, [r5, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d122      	bne.n	800a016 <_ZN3pxt11exec_binaryEPj+0xc2>
             ":( Failed partial flash");
    debug_println("---exec_binary initPerfCounters"); debug_flush();  //// TODO
 8009fd0:	481c      	ldr	r0, [pc, #112]	; (800a044 <_ZN3pxt11exec_binaryEPj+0xf0>)
 8009fd2:	f7fa f87f 	bl	80040d4 <debug_println>
 8009fd6:	f7f9 ffed 	bl	8003fb4 <debug_flush>
    uintptr_t startptr = (uintptr_t)bytecode;

    startptr += 64; // header

    initPerfCounters();
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8009fda:	481b      	ldr	r0, [pc, #108]	; (800a048 <_ZN3pxt11exec_binaryEPj+0xf4>)
    uintptr_t startptr = (uintptr_t)bytecode;
 8009fdc:	6825      	ldr	r5, [r4, #0]
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8009fde:	f7fa f879 	bl	80040d4 <debug_println>
 8009fe2:	f7f9 ffe7 	bl	8003fb4 <debug_flush>

    initRuntime();
 8009fe6:	f000 f921 	bl	800a22c <_ZN3pxt11initRuntimeEv>
    debug_println("---exec_binary runAction0"); debug_flush();  //// TODO
 8009fea:	4818      	ldr	r0, [pc, #96]	; (800a04c <_ZN3pxt11exec_binaryEPj+0xf8>)
 8009fec:	f7fa f872 	bl	80040d4 <debug_println>
 8009ff0:	f7f9 ffe0 	bl	8003fb4 <debug_flush>
    return asmRunAction3(a, 0, 0, 0);
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009ffc:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800a000:	461a      	mov	r2, r3
 800a002:	47a0      	blx	r4

    runAction0((Action)startptr);
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO
 800a004:	4812      	ldr	r0, [pc, #72]	; (800a050 <_ZN3pxt11exec_binaryEPj+0xfc>)
 800a006:	f7fa f865 	bl	80040d4 <debug_println>
 800a00a:	f7f9 ffd3 	bl	8003fb4 <debug_flush>

    pxt::releaseFiber();
}
 800a00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pxt::releaseFiber();
 800a012:	f000 b8dd 	b.w	800a1d0 <_ZN3pxt12releaseFiberEv>
 800a016:	480f      	ldr	r0, [pc, #60]	; (800a054 <_ZN3pxt11exec_binaryEPj+0x100>)
 800a018:	f7ff fd92 	bl	8009b40 <_ZN3pxt8checkStrEbPKc.part.6>
 800a01c:	480e      	ldr	r0, [pc, #56]	; (800a058 <_ZN3pxt11exec_binaryEPj+0x104>)
 800a01e:	f7ff fd8f 	bl	8009b40 <_ZN3pxt8checkStrEbPKc.part.6>
 800a022:	bf00      	nop
 800a024:	0800d2e4 	.word	0x0800d2e4
 800a028:	0800d2fc 	.word	0x0800d2fc
 800a02c:	0800d5f4 	.word	0x0800d5f4
 800a030:	0800d31c 	.word	0x0800d31c
 800a034:	20001034 	.word	0x20001034
 800a038:	20001030 	.word	0x20001030
 800a03c:	0800d334 	.word	0x0800d334
 800a040:	923b8e70 	.word	0x923b8e70
 800a044:	0800d34c 	.word	0x0800d34c
 800a048:	0800d36c 	.word	0x0800d36c
 800a04c:	0800d388 	.word	0x0800d388
 800a050:	0800d3a4 	.word	0x0800d3a4
 800a054:	0800d3c0 	.word	0x0800d3c0
 800a058:	0800d304 	.word	0x0800d304

0800a05c <_ZN3pxt5startEv>:

void start() {
    exec_binary((unsigned *)functionsAndBytecode);
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <_ZN3pxt5startEv+0x8>)
 800a05e:	f7ff bf79 	b.w	8009f54 <_ZN3pxt11exec_binaryEPj>
 800a062:	bf00      	nop
 800a064:	0800cc80 	.word	0x0800cc80

0800a068 <_ZN6Array_7isArrayEPN3pxt12TValueStructE>:
    return ((intptr_t)v & 3) || !v;
 800a068:	f010 0303 	ands.w	r3, r0, #3
 800a06c:	d108      	bne.n	800a080 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x18>
 800a06e:	b130      	cbz	r0, 800a07e <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x16>
    return (VTable *)(r->vtable & ~1);
 800a070:	6802      	ldr	r2, [r0, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
    if (vt->magic == VTABLE_MAGIC)
 800a076:	78d1      	ldrb	r1, [r2, #3]
 800a078:	29f9      	cmp	r1, #249	; 0xf9
 800a07a:	d003      	beq.n	800a084 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x1c>

namespace Array_ {
//
bool isArray(TValue arr) {
    auto vt = getAnyVTable(arr);
    return vt && vt->classNo == BuiltInType::RefCollection;
 800a07c:	4618      	mov	r0, r3
}
 800a07e:	4770      	bx	lr
    return vt && vt->classNo == BuiltInType::RefCollection;
 800a080:	2000      	movs	r0, #0
 800a082:	4770      	bx	lr
 800a084:	8910      	ldrh	r0, [r2, #8]
 800a086:	f1a0 0006 	sub.w	r0, r0, #6
 800a08a:	fab0 f080 	clz	r0, r0
 800a08e:	0940      	lsrs	r0, r0, #5
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop

0800a094 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE>:
} // namespace Array_

namespace pxtrt {
//
RefCollection *keysOf(TValue v) {
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4605      	mov	r5, r0
    auto r = NEW_GC(RefCollection);
 800a098:	200c      	movs	r0, #12
 800a09a:	f7ff fb1d 	bl	80096d8 <_ZN3pxt10gcAllocateEi>
 800a09e:	4604      	mov	r4, r0
 800a0a0:	b120      	cbz	r0, 800a0ac <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x18>
    Segment() : data(nullptr), length(0), size(0) {}
 800a0a2:	2300      	movs	r3, #0
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800a0a4:	4a13      	ldr	r2, [pc, #76]	; (800a0f4 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x60>)
    Segment() : data(nullptr), length(0), size(0) {}
 800a0a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 800a0aa:	6002      	str	r2, [r0, #0]
    return ((intptr_t)v & 3) || !v;
 800a0ac:	07ab      	lsls	r3, r5, #30
 800a0ae:	d106      	bne.n	800a0be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
 800a0b0:	b12d      	cbz	r5, 800a0be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    return (VTable *)(r->vtable & ~1);
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	f023 0301 	bic.w	r3, r3, #1
    if (vt->magic == VTABLE_MAGIC)
 800a0b8:	78da      	ldrb	r2, [r3, #3]
 800a0ba:	2af9      	cmp	r2, #249	; 0xf9
 800a0bc:	d001      	beq.n	800a0c2 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2e>
    auto dst = r->getData();
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
    for (unsigned i = 0; i < len; ++i)
        incr(dst[i]);
    return r;
}
 800a0be:	4620      	mov	r0, r4
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
    if (getAnyVTable(v) != &RefMap_vtable)
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x64>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d1fa      	bne.n	800a0be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    auto len = rm->keys.getLength();
 800a0c8:	892e      	ldrh	r6, [r5, #8]
    if (!len)
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	d0f7      	beq.n	800a0be <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    if (newLength > size) {
 800a0ce:	8963      	ldrh	r3, [r4, #10]
 800a0d0:	429e      	cmp	r6, r3
 800a0d2:	d902      	bls.n	800a0da <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
        ensure(length);
 800a0d4:	8921      	ldrh	r1, [r4, #8]
    if (newSize < size) {
 800a0d6:	428b      	cmp	r3, r1
 800a0d8:	d907      	bls.n	800a0ea <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x56>
    length = newLength;
 800a0da:	8126      	strh	r6, [r4, #8]
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
 800a0dc:	00b2      	lsls	r2, r6, #2
 800a0de:	6869      	ldr	r1, [r5, #4]
 800a0e0:	6860      	ldr	r0, [r4, #4]
 800a0e2:	f7f9 fe39 	bl	8003d58 <memcpy>
}
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	bd70      	pop	{r4, r5, r6, pc}
    growByMin(newSize);
 800a0ea:	1d20      	adds	r0, r4, #4
 800a0ec:	f7ff fdcc 	bl	8009c88 <_ZN3pxt7Segment9growByMinEt>
 800a0f0:	e7f3      	b.n	800a0da <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x46>
 800a0f2:	bf00      	nop
 800a0f4:	0800d0d0 	.word	0x0800d0d0
 800a0f8:	0800d070 	.word	0x0800d070

0800a0fc <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 800a0fc:	4800      	ldr	r0, [pc, #0]	; (800a100 <_ZN5codal14CodalComponent4initEv+0x4>)
 800a0fe:	4770      	bx	lr
 800a100:	fffffc16 	.word	0xfffffc16

0800a104 <_ZN3pxtL10runAction0EPNS_12TValueStructE>:
    return asmRunAction3(a, 0, 0, 0);
 800a104:	2300      	movs	r3, #0
 800a106:	4904      	ldr	r1, [pc, #16]	; (800a118 <_ZN3pxtL10runAction0EPNS_12TValueStructE+0x14>)
static inline TValue runAction0(Action a) {
 800a108:	b410      	push	{r4}
    return asmRunAction3(a, 0, 0, 0);
 800a10a:	680c      	ldr	r4, [r1, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800a110:	4619      	mov	r1, r3
 800a112:	46a4      	mov	ip, r4
}
 800a114:	bc10      	pop	{r4}
    return asmRunAction3(a, 0, 0, 0);
 800a116:	4760      	bx	ip
 800a118:	20001034 	.word	0x20001034

0800a11c <_ZN3pxt13dispatchEventEN5codal5EventE>:
// ---------------------------------------------------------------------------

// We have the invariant that if [dispatchEvent] is registered against the DAL
// for a given event, then [handlersMap] contains a valid entry for that
// event.
void dispatchEvent(Event e) {
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	466b      	mov	r3, sp
 800a122:	e883 0003 	stmia.w	r3, {r0, r1}
    lastEvent = e;
 800a126:	4a17      	ldr	r2, [pc, #92]	; (800a184 <_ZN3pxt13dispatchEventEN5codal5EventE+0x68>)
 800a128:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800a12c:	f8bd 4000 	ldrh.w	r4, [sp]
 800a130:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a134:	e882 0003 	stmia.w	r2, {r0, r1}

    auto curr = findBinding(e.source, e.value);
 800a138:	4629      	mov	r1, r5
 800a13a:	4620      	mov	r0, r4
 800a13c:	f7fd fdd6 	bl	8007cec <_ZN3pxt11findBindingEii>
 800a140:	4606      	mov	r6, r0
    auto value = fromInt(e.value);
 800a142:	4628      	mov	r0, r5
 800a144:	f7fe f8a4 	bl	8008290 <_ZN3pxt7fromIntEi>
 800a148:	4605      	mov	r5, r0
    if (curr)
 800a14a:	b13e      	cbz	r6, 800a15c <_ZN3pxt13dispatchEventEN5codal5EventE+0x40>
    return asmRunAction3(a, arg0, 0, 0);
 800a14c:	2300      	movs	r3, #0
 800a14e:	4a0e      	ldr	r2, [pc, #56]	; (800a188 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 800a150:	68f0      	ldr	r0, [r6, #12]
 800a152:	6811      	ldr	r1, [r2, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800a158:	4629      	mov	r1, r5
 800a15a:	47b0      	blx	r6
        runAction1(curr->action, value);

    curr = findBinding(e.source, DEVICE_EVT_ANY);
 800a15c:	4620      	mov	r0, r4
 800a15e:	2100      	movs	r1, #0
 800a160:	f7fd fdc4 	bl	8007cec <_ZN3pxt11findBindingEii>
    if (curr)
 800a164:	b158      	cbz	r0, 800a17e <_ZN3pxt13dispatchEventEN5codal5EventE+0x62>
 800a166:	2300      	movs	r3, #0
 800a168:	4a07      	ldr	r2, [pc, #28]	; (800a188 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 800a16a:	4629      	mov	r1, r5
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	68c0      	ldr	r0, [r0, #12]
 800a170:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a172:	461a      	mov	r2, r3
 800a174:	46a4      	mov	ip, r4
        runAction1(curr->action, value);
}
 800a176:	b002      	add	sp, #8
 800a178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a17c:	4760      	bx	ip
 800a17e:	b002      	add	sp, #8
 800a180:	bd70      	pop	{r4, r5, r6, pc}
 800a182:	bf00      	nop
 800a184:	20001084 	.word	0x20001084
 800a188:	20001034 	.word	0x20001034

0800a18c <_ZN3pxt9fiberDoneEPv>:
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
}

void fiberDone(void *a) {
 800a18c:	b508      	push	{r3, lr}
    decr((Action)a);
    unregisterGCPtr((Action)a);
 800a18e:	f7ff fc0f 	bl	80099b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>
    release_fiber();
}
 800a192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    release_fiber();
 800a196:	f001 ba75 	b.w	800b684 <_ZN5codal13release_fiberEv>
 800a19a:	bf00      	nop

0800a19c <_ZN3pxt12forever_stubEPv>:

void sleep_us(uint64_t us) {
    target_wait_us(us);
}

void forever_stub(void *a) {
 800a19c:	4606      	mov	r6, r0
 800a19e:	b508      	push	{r3, lr}
 800a1a0:	4d05      	ldr	r5, [pc, #20]	; (800a1b8 <_ZN3pxt12forever_stubEPv+0x1c>)
    return asmRunAction3(a, 0, 0, 0);
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6828      	ldr	r0, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	47a0      	blx	r4
    while (true) {
        runAction0((Action)a);
        fiber_sleep(20);
 800a1b0:	2014      	movs	r0, #20
 800a1b2:	f001 f9ed 	bl	800b590 <_ZN5codal11fiber_sleepEm>
 800a1b6:	e7f4      	b.n	800a1a2 <_ZN3pxt12forever_stubEPv+0x6>
 800a1b8:	20001034 	.word	0x20001034

0800a1bc <_ZN5codal3_cm5TimerD1Ev>:

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <_ZN5codal3_cm5TimerD1Ev+0x10>)
 800a1c2:	6003      	str	r3, [r0, #0]
 800a1c4:	f001 fd24 	bl	800bc10 <_ZN5codal5TimerD1Ev>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	bd10      	pop	{r4, pc}
 800a1cc:	0800d7d4 	.word	0x0800d7d4

0800a1d0 <_ZN3pxt12releaseFiberEv>:
    release_fiber();
 800a1d0:	f001 ba58 	b.w	800b684 <_ZN5codal13release_fiberEv>

0800a1d4 <_ZN3pxt8sleep_msEj>:
    fiber_sleep(ms);
 800a1d4:	f001 b9dc 	b.w	800b590 <_ZN5codal11fiber_sleepEm>

0800a1d8 <_ZN3pxt8sleep_usEy>:
    target_wait_us(us);
 800a1d8:	f7f6 bca2 	b.w	8000b20 <target_wait_us>

0800a1dc <_ZN3pxt10runForeverEPNS_12TValueStructE>:
    }
}

void runForever(Action a) {
    if (a != 0) {
 800a1dc:	b150      	cbz	r0, 800a1f4 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x18>
void runForever(Action a) {
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 800a1e2:	f7ff fbd7 	bl	8009994 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber(forever_stub, (void *)a);
 800a1e6:	4621      	mov	r1, r4
    }
}
 800a1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber(forever_stub, (void *)a);
 800a1ec:	4a02      	ldr	r2, [pc, #8]	; (800a1f8 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x1c>)
 800a1ee:	4803      	ldr	r0, [pc, #12]	; (800a1fc <_ZN3pxt10runForeverEPNS_12TValueStructE+0x20>)
 800a1f0:	f001 b8c2 	b.w	800b378 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	0800b6b9 	.word	0x0800b6b9
 800a1fc:	0800a19d 	.word	0x0800a19d

0800a200 <_ZN3pxt13runInParallelEPNS_12TValueStructE>:

void runInParallel(Action a) {
    if (a != 0) {
 800a200:	b150      	cbz	r0, 800a218 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x18>
void runInParallel(Action a) {
 800a202:	b510      	push	{r4, lr}
 800a204:	4604      	mov	r4, r0
        incr(a);
        registerGCPtr(a);
 800a206:	f7ff fbc5 	bl	8009994 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 800a20a:	4621      	mov	r1, r4
    }
}
 800a20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 800a210:	4a02      	ldr	r2, [pc, #8]	; (800a21c <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x1c>)
 800a212:	4803      	ldr	r0, [pc, #12]	; (800a220 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x20>)
 800a214:	f001 b8b0 	b.w	800b378 <_ZN5codal12create_fiberEPFvPvES0_S2_>
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	0800a18d 	.word	0x0800a18d
 800a220:	0800a105 	.word	0x0800a105

0800a224 <_ZN3pxt12waitForEventEii>:

void waitForEvent(int id, int event) {
    fiber_wait_for_event(id, event);
 800a224:	b289      	uxth	r1, r1
 800a226:	b280      	uxth	r0, r0
 800a228:	f001 b9d8 	b.w	800b5dc <_ZN5codal20fiber_wait_for_eventEtt>

0800a22c <_ZN3pxt11initRuntimeEv>:
}

void initRuntime() {
 800a22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 800a22e:	483f      	ldr	r0, [pc, #252]	; (800a32c <_ZN3pxt11initRuntimeEv+0x100>)
void initRuntime() {
 800a230:	b083      	sub	sp, #12
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 800a232:	f7f9 ff4f 	bl	80040d4 <debug_println>
 800a236:	f7f9 febd 	bl	8003fb4 <debug_flush>
    cpu_clock_init();
 800a23a:	f000 fb1d 	bl	800a878 <_Z14cpu_clock_initv>
    debug_println("---initCodal commInit"); debug_flush();  //// TODO
 800a23e:	483c      	ldr	r0, [pc, #240]	; (800a330 <_ZN3pxt11initRuntimeEv+0x104>)
 800a240:	f7f9 ff48 	bl	80040d4 <debug_println>
 800a244:	f7f9 feb6 	bl	8003fb4 <debug_flush>
    int commSize = bytecode[20];
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <_ZN3pxt11initRuntimeEv+0x108>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
    if (!commSize)
 800a24e:	b35f      	cbz	r7, 800a2a8 <_ZN3pxt11initRuntimeEv+0x7c>
    FreeList *head = NULL;
 800a250:	2400      	movs	r4, #0
        if (p == commBase) {
 800a252:	4e39      	ldr	r6, [pc, #228]	; (800a338 <_ZN3pxt11initRuntimeEv+0x10c>)
 800a254:	e004      	b.n	800a260 <_ZN3pxt11initRuntimeEv+0x34>
 800a256:	42b5      	cmp	r5, r6
 800a258:	d012      	beq.n	800a280 <_ZN3pxt11initRuntimeEv+0x54>
        if (p > commBase)
 800a25a:	d862      	bhi.n	800a322 <_ZN3pxt11initRuntimeEv+0xf6>
        f->next = head;
 800a25c:	602c      	str	r4, [r5, #0]
 800a25e:	462c      	mov	r4, r5
        void *p = xmalloc(4);
 800a260:	2004      	movs	r0, #4
 800a262:	f001 fb1b 	bl	800b89c <device_malloc>
        volatile unsigned hp = (unsigned)p;
 800a266:	9001      	str	r0, [sp, #4]
        if (hp & 4) {
 800a268:	9b01      	ldr	r3, [sp, #4]
        void *p = xmalloc(4);
 800a26a:	4605      	mov	r5, r0
        if (hp & 4) {
 800a26c:	075b      	lsls	r3, r3, #29
 800a26e:	d5f2      	bpl.n	800a256 <_ZN3pxt11initRuntimeEv+0x2a>
            xfree(p);
 800a270:	f001 fb3a 	bl	800b8e8 <device_free>
            p = xmalloc(8);
 800a274:	2008      	movs	r0, #8
 800a276:	f001 fb11 	bl	800b89c <device_malloc>
 800a27a:	4605      	mov	r5, r0
        if (p == commBase) {
 800a27c:	42b5      	cmp	r5, r6
 800a27e:	d1ec      	bne.n	800a25a <_ZN3pxt11initRuntimeEv+0x2e>
            xfree(p);
 800a280:	4628      	mov	r0, r5
 800a282:	f001 fb31 	bl	800b8e8 <device_free>
            p = xmalloc(commSize);
 800a286:	4638      	mov	r0, r7
 800a288:	f001 fb08 	bl	800b89c <device_malloc>
            if (p != commBase)
 800a28c:	4285      	cmp	r5, r0
 800a28e:	d003      	beq.n	800a298 <_ZN3pxt11initRuntimeEv+0x6c>
    target_panic(800 + subcode);
 800a290:	f240 302a 	movw	r0, #810	; 0x32a
 800a294:	f7f6 fc76 	bl	8000b84 <target_panic>
    while (head) {
 800a298:	b134      	cbz	r4, 800a2a8 <_ZN3pxt11initRuntimeEv+0x7c>
        head = head->next;
 800a29a:	6825      	ldr	r5, [r4, #0]
        xfree(p);
 800a29c:	4620      	mov	r0, r4
    while (head) {
 800a29e:	462c      	mov	r4, r5
        xfree(p);
 800a2a0:	f001 fb22 	bl	800b8e8 <device_free>
    while (head) {
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	d1f8      	bne.n	800a29a <_ZN3pxt11initRuntimeEv+0x6e>
    debug_println("---initCodal scheduler_init"); debug_flush();  //// TODO
 800a2a8:	4824      	ldr	r0, [pc, #144]	; (800a33c <_ZN3pxt11initRuntimeEv+0x110>)
 800a2aa:	f7f9 ff13 	bl	80040d4 <debug_println>
 800a2ae:	4c24      	ldr	r4, [pc, #144]	; (800a340 <_ZN3pxt11initRuntimeEv+0x114>)
 800a2b0:	f7f9 fe80 	bl	8003fb4 <debug_flush>
    scheduler_init(devMessageBus);
 800a2b4:	4823      	ldr	r0, [pc, #140]	; (800a344 <_ZN3pxt11initRuntimeEv+0x118>)
 800a2b6:	f000 ff29 	bl	800b10c <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("---initCodal components.init"); debug_flush();  //// TODO
 800a2ba:	4823      	ldr	r0, [pc, #140]	; (800a348 <_ZN3pxt11initRuntimeEv+0x11c>)
 800a2bc:	f7f9 ff0a 	bl	80040d4 <debug_println>
 800a2c0:	4e22      	ldr	r6, [pc, #136]	; (800a34c <_ZN3pxt11initRuntimeEv+0x120>)
 800a2c2:	f7f9 fe77 	bl	8003fb4 <debug_flush>
 800a2c6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800a2ca:	e001      	b.n	800a2d0 <_ZN3pxt11initRuntimeEv+0xa4>
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 800a2cc:	42a5      	cmp	r5, r4
 800a2ce:	d00a      	beq.n	800a2e6 <_ZN3pxt11initRuntimeEv+0xba>
        if (CodalComponent::components[i])
 800a2d0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d0f9      	beq.n	800a2cc <_ZN3pxt11initRuntimeEv+0xa0>
            CodalComponent::components[i]->init();
 800a2d8:	6803      	ldr	r3, [r0, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	42b3      	cmp	r3, r6
 800a2de:	d0f5      	beq.n	800a2cc <_ZN3pxt11initRuntimeEv+0xa0>
 800a2e0:	4798      	blx	r3
    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 800a2e2:	42a5      	cmp	r5, r4
 800a2e4:	d1f4      	bne.n	800a2d0 <_ZN3pxt11initRuntimeEv+0xa4>
    debug_println("---initCodal usb_init"); debug_flush();  //// TODO
 800a2e6:	481a      	ldr	r0, [pc, #104]	; (800a350 <_ZN3pxt11initRuntimeEv+0x124>)
 800a2e8:	f7f9 fef4 	bl	80040d4 <debug_println>
 800a2ec:	f7f9 fe62 	bl	8003fb4 <debug_flush>
    usb_init();
 800a2f0:	f000 fb58 	bl	800a9a4 <_ZN3pxt8usb_initEv>
    debug_println("---initCodal done"); debug_flush();  //// TODO
 800a2f4:	4817      	ldr	r0, [pc, #92]	; (800a354 <_ZN3pxt11initRuntimeEv+0x128>)
 800a2f6:	f7f9 feed 	bl	80040d4 <debug_println>
 800a2fa:	f7f9 fe5b 	bl	8003fb4 <debug_flush>
    auto led = LOOKUP_PIN(LED);
 800a2fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a302:	200d      	movs	r0, #13
 800a304:	f7fe f828 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a308:	b2c0      	uxtb	r0, r0
 800a30a:	f000 f9fd 	bl	800a708 <_ZN3pxt9lookupPinEi>
    if (led) {
 800a30e:	b118      	cbz	r0, 800a318 <_ZN3pxt11initRuntimeEv+0xec>
        led->setDigitalValue(0);
 800a310:	6803      	ldr	r3, [r0, #0]
 800a312:	2100      	movs	r1, #0
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4798      	blx	r3
    initCodal();
    platform_init();
}
 800a318:	b003      	add	sp, #12
 800a31a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    platform_init();
 800a31e:	f000 ba9f 	b.w	800a860 <_ZN3pxt13platform_initEv>
 800a322:	f240 302b 	movw	r0, #811	; 0x32b
 800a326:	f7f6 fc2d 	bl	8000b84 <target_panic>
 800a32a:	e797      	b.n	800a25c <_ZN3pxt11initRuntimeEv+0x30>
 800a32c:	0800d4a4 	.word	0x0800d4a4
 800a330:	0800d4c0 	.word	0x0800d4c0
 800a334:	20001034 	.word	0x20001034
 800a338:	20001000 	.word	0x20001000
 800a33c:	0800d4d8 	.word	0x0800d4d8
 800a340:	20001118 	.word	0x20001118
 800a344:	20001038 	.word	0x20001038
 800a348:	0800d4f4 	.word	0x0800d4f4
 800a34c:	0800a0fd 	.word	0x0800a0fd
 800a350:	0800d514 	.word	0x0800d514
 800a354:	0800d52c 	.word	0x0800d52c

0800a358 <_ZN3pxt16afterProgramPageEv>:

//
unsigned afterProgramPage() {
    unsigned ptr = (unsigned)&bytecode[0];
 800a358:	4b06      	ldr	r3, [pc, #24]	; (800a374 <_ZN3pxt16afterProgramPageEv+0x1c>)
unsigned afterProgramPage() {
 800a35a:	b510      	push	{r4, lr}
    unsigned ptr = (unsigned)&bytecode[0];
 800a35c:	681c      	ldr	r4, [r3, #0]
    ptr += programSize();
 800a35e:	f7fd fff3 	bl	8008348 <_ZN3pxt11programSizeEv>
    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
 800a362:	f204 34ff 	addw	r4, r4, #1023	; 0x3ff
 800a366:	4420      	add	r0, r4
    return ptr;
}
 800a368:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800a36c:	f020 0003 	bic.w	r0, r0, #3
 800a370:	bd10      	pop	{r4, pc}
 800a372:	bf00      	nop
 800a374:	20001034 	.word	0x20001034

0800a378 <_ZN3pxt15getSerialNumberEv>:
          * Determines a unique 32 bit ID for this device, if provided by the hardware.
          * @return A 32 bit unique identifier.
          */
        virtual uint32_t getSerialNumber()
        {
            return target_get_serial();
 800a378:	f7f6 bbf8 	b.w	8000b6c <target_get_serial>

0800a37c <_ZN3pxt15current_time_msEv>:
int getSerialNumber() {
    return device.getSerialNumber();
}

int current_time_ms() {
    return system_timer_current_time();
 800a37c:	f001 bc4a 	b.w	800bc14 <_ZN5codal25system_timer_current_timeEv>

0800a380 <_ZN3pxt16getThreadContextEv>:
}

#ifdef PXT_GC
ThreadContext *getThreadContext() {
    return (ThreadContext *)currentFiber->user_data;
 800a380:	4b01      	ldr	r3, [pc, #4]	; (800a388 <_ZN3pxt16getThreadContextEv+0x8>)
 800a382:	681b      	ldr	r3, [r3, #0]
}
 800a384:	6a18      	ldr	r0, [r3, #32]
 800a386:	4770      	bx	lr
 800a388:	20001620 	.word	0x20001620

0800a38c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>:

void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
 800a38c:	4b01      	ldr	r3, [pc, #4]	; (800a394 <_ZN3pxt16setThreadContextEPNS_13ThreadContextE+0x8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6218      	str	r0, [r3, #32]
}
 800a392:	4770      	bx	lr
 800a394:	20001620 	.word	0x20001620

0800a398 <_ZN3pxt15gcProcessStacksEi>:
    if (fib == currentFiber)
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
}

void gcProcessStacks(int flags) {
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4682      	mov	sl, r0
 800a39e:	b085      	sub	sp, #20
    int numFibers = codal::list_fibers(NULL);
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f000 fd91 	bl	800aec8 <_ZN5codal11list_fibersEPPNS_5FiberE>
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 800a3a6:	0085      	lsls	r5, r0, #2
    int numFibers = codal::list_fibers(NULL);
 800a3a8:	4604      	mov	r4, r0
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f001 fa76 	bl	800b89c <device_malloc>
 800a3b0:	9003      	str	r0, [sp, #12]
    int num2 = codal::list_fibers(fibers);
 800a3b2:	f000 fd89 	bl	800aec8 <_ZN5codal11list_fibersEPPNS_5FiberE>
    if (numFibers != num2)
 800a3b6:	4284      	cmp	r4, r0
 800a3b8:	d003      	beq.n	800a3c2 <_ZN3pxt15gcProcessStacksEi+0x2a>
 800a3ba:	f44f 704b 	mov.w	r0, #812	; 0x32c
 800a3be:	f7f6 fbe1 	bl	8000b84 <target_panic>
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	dd3a      	ble.n	800a43c <_ZN3pxt15gcProcessStacksEi+0xa4>
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800a468 <_ZN3pxt15gcProcessStacksEi+0xd0>
 800a3d0:	3b04      	subs	r3, #4
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	442b      	add	r3, r5
 800a3d6:	f00a 0a02 	and.w	sl, sl, #2
 800a3da:	9302      	str	r3, [sp, #8]
        auto fib = fibers[i];
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	f853 7f04 	ldr.w	r7, [r3, #4]!
        auto ctx = (ThreadContext *)fib->user_data;
 800a3e2:	6a3e      	ldr	r6, [r7, #32]
        auto fib = fibers[i];
 800a3e4:	9301      	str	r3, [sp, #4]
        if (!ctx)
 800a3e6:	b32e      	cbz	r6, 800a434 <_ZN3pxt15gcProcessStacksEi+0x9c>
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 800a3e8:	3604      	adds	r6, #4
    if (fib == currentFiber)
 800a3ea:	f8d9 3000 	ldr.w	r3, [r9]
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
 800a3ee:	6834      	ldr	r4, [r6, #0]
    if (fib == currentFiber)
 800a3f0:	429f      	cmp	r7, r3
 800a3f2:	d029      	beq.n	800a448 <_ZN3pxt15gcProcessStacksEi+0xb0>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a3f4:	6838      	ldr	r0, [r7, #0]
 800a3f6:	68bd      	ldr	r5, [r7, #8]
 800a3f8:	f7f6 fbe2 	bl	8000bc0 <tcb_get_stack_base>
    if (fib == currentFiber)
 800a3fc:	f8d9 3000 	ldr.w	r3, [r9]
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a400:	1a28      	subs	r0, r5, r0
    if (fib == currentFiber)
 800a402:	429f      	cmp	r7, r3
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a404:	4404      	add	r4, r0
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 800a406:	6875      	ldr	r5, [r6, #4]
    if (fib == currentFiber)
 800a408:	d007      	beq.n	800a41a <_ZN3pxt15gcProcessStacksEi+0x82>
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800a410:	f7f6 fbd6 	bl	8000bc0 <tcb_get_stack_base>
 800a414:	ebab 0000 	sub.w	r0, fp, r0
 800a418:	4405      	add	r5, r0
            if (flags & 2)
 800a41a:	f1ba 0f00 	cmp.w	sl, #0
 800a41e:	d004      	beq.n	800a42a <_ZN3pxt15gcProcessStacksEi+0x92>
 800a420:	e016      	b.n	800a450 <_ZN3pxt15gcProcessStacksEi+0xb8>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
            // VLOG("mark: %p - %p", ptr, end);
            while (ptr < end) {
                gcProcess(*ptr++);
 800a422:	f854 0b04 	ldr.w	r0, [r4], #4
 800a426:	f7fe ff6f 	bl	8009308 <_ZN3pxt9gcProcessEPNS_12TValueStructE>
            while (ptr < end) {
 800a42a:	42ac      	cmp	r4, r5
 800a42c:	d3f9      	bcc.n	800a422 <_ZN3pxt15gcProcessStacksEi+0x8a>
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 800a42e:	68b6      	ldr	r6, [r6, #8]
 800a430:	2e00      	cmp	r6, #0
 800a432:	d1da      	bne.n	800a3ea <_ZN3pxt15gcProcessStacksEi+0x52>
    for (int i = 0; i < numFibers; ++i) {
 800a434:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a438:	4293      	cmp	r3, r2
 800a43a:	d1cf      	bne.n	800a3dc <_ZN3pxt15gcProcessStacksEi+0x44>
            }
        }
    }
    xfree(fibers);
 800a43c:	9803      	ldr	r0, [sp, #12]
}
 800a43e:	b005      	add	sp, #20
 800a440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    xfree(fibers);
 800a444:	f001 ba50 	b.w	800b8e8 <device_free>
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 800a448:	6875      	ldr	r5, [r6, #4]
            if (flags & 2)
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	d0ec      	beq.n	800a42a <_ZN3pxt15gcProcessStacksEi+0x92>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
 800a450:	1b2b      	subs	r3, r5, r4
 800a452:	4641      	mov	r1, r8
 800a454:	109b      	asrs	r3, r3, #2
 800a456:	4622      	mov	r2, r4
 800a458:	4802      	ldr	r0, [pc, #8]	; (800a464 <_ZN3pxt15gcProcessStacksEi+0xcc>)
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	f000 fced 	bl	800ae3c <codal_dmesg>
 800a462:	e7e2      	b.n	800a42a <_ZN3pxt15gcProcessStacksEi+0x92>
 800a464:	0800d540 	.word	0x0800d540
 800a468:	20001620 	.word	0x20001620

0800a46c <_GLOBAL__sub_I__ZN3pxt8devTimerE>:
#endif

} // namespace pxt
 800a46c:	b570      	push	{r4, r5, r6, lr}
CODAL_TIMER devTimer;
 800a46e:	4e0d      	ldr	r6, [pc, #52]	; (800a4a4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x38>)
 800a470:	4d0d      	ldr	r5, [pc, #52]	; (800a4a8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x3c>)
 800a472:	4630      	mov	r0, r6
 800a474:	f002 f97e 	bl	800c774 <_ZN5codal3_cm5TimerC1Ev>
MessageBus devMessageBus;
 800a478:	4c0c      	ldr	r4, [pc, #48]	; (800a4ac <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x40>)
CODAL_TIMER devTimer;
 800a47a:	462a      	mov	r2, r5
 800a47c:	490c      	ldr	r1, [pc, #48]	; (800a4b0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x44>)
 800a47e:	4630      	mov	r0, r6
 800a480:	f7f6 fbe2 	bl	8000c48 <__aeabi_atexit>
Event lastEvent;
 800a484:	480b      	ldr	r0, [pc, #44]	; (800a4b4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x48>)
 800a486:	f001 ff03 	bl	800c290 <_ZN5codal5EventC1Ev>
MessageBus devMessageBus;
 800a48a:	4620      	mov	r0, r4
 800a48c:	f001 fd86 	bl	800bf9c <_ZN5codal10MessageBusC1Ev>
 800a490:	462a      	mov	r2, r5
 800a492:	4620      	mov	r0, r4
 800a494:	4908      	ldr	r1, [pc, #32]	; (800a4b8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x4c>)
 800a496:	f7f6 fbd7 	bl	8000c48 <__aeabi_atexit>
        {
 800a49a:	4b08      	ldr	r3, [pc, #32]	; (800a4bc <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x50>)
 800a49c:	4a08      	ldr	r2, [pc, #32]	; (800a4c0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x54>)
 800a49e:	601a      	str	r2, [r3, #0]
} // namespace pxt
 800a4a0:	bd70      	pop	{r4, r5, r6, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20001060 	.word	0x20001060
 800a4a8:	20000594 	.word	0x20000594
 800a4ac:	20001038 	.word	0x20001038
 800a4b0:	0800a1bd 	.word	0x0800a1bd
 800a4b4:	20001084 	.word	0x20001084
 800a4b8:	0800bef5 	.word	0x0800bef5
 800a4bc:	2000105c 	.word	0x2000105c
 800a4c0:	0800d604 	.word	0x0800d604

0800a4c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>:
void registerWithDal(int id, int event, Action a, int flags) {
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	4616      	mov	r6, r2
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
    if (!findBinding(id, event))
 800a4d2:	f7fd fc0b 	bl	8007cec <_ZN3pxt11findBindingEii>
 800a4d6:	b138      	cbz	r0, 800a4e8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x24>
    setBinding(id, event, a);
 800a4d8:	4632      	mov	r2, r6
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4620      	mov	r0, r4
}
 800a4de:	b002      	add	sp, #8
 800a4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    setBinding(id, event, a);
 800a4e4:	f7fd bc10 	b.w	8007d08 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>
        int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 800a4e8:	2c0f      	cmp	r4, #15
        devMessageBus.listen(id, event, dispatchEvent, flags);
 800a4ea:	b2bf      	uxth	r7, r7
 800a4ec:	d101      	bne.n	800a4f2 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x2e>
 800a4ee:	2fc0      	cmp	r7, #192	; 0xc0
 800a4f0:	d1f2      	bne.n	800a4d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 800a4f2:	2020      	movs	r0, #32
 800a4f4:	f7f9 fe74 	bl	80041e0 <_Znwj>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	b2a1      	uxth	r1, r4
 800a4fc:	9700      	str	r7, [sp, #0]
 800a4fe:	4b08      	ldr	r3, [pc, #32]	; (800a520 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x5c>)
 800a500:	b2aa      	uxth	r2, r5
 800a502:	f001 fa39 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 800a506:	4641      	mov	r1, r8
 800a508:	4806      	ldr	r0, [pc, #24]	; (800a524 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x60>)
 800a50a:	f001 fc41 	bl	800bd90 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d0e2      	beq.n	800a4d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_OK;

            delete newListener;
 800a512:	4640      	mov	r0, r8
 800a514:	f001 fa48 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800a518:	4640      	mov	r0, r8
 800a51a:	f7f9 fe63 	bl	80041e4 <_ZdlPv>
 800a51e:	e7db      	b.n	800a4d8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
 800a520:	0800a11d 	.word	0x0800a11d
 800a524:	20001038 	.word	0x20001038

0800a528 <_ZN7control10raiseEventEii>:
//
//
//
//
//
void raiseEvent(int src, int value) {
 800a528:	b500      	push	{lr}
 800a52a:	b083      	sub	sp, #12
    Event evt(src, value);
 800a52c:	b28a      	uxth	r2, r1
 800a52e:	2301      	movs	r3, #1
 800a530:	b281      	uxth	r1, r0
 800a532:	4668      	mov	r0, sp
 800a534:	f001 fe92 	bl	800c25c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 800a538:	b003      	add	sp, #12
 800a53a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a53e:	bf00      	nop

0800a540 <_ZN7control16deviceDalVersionEv>:
//
//
//
//
String deviceDalVersion() {
    return mkString(device.getVersion());
 800a540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <_ZN7control16deviceDalVersionEv+0xc>)
 800a546:	f7fd bc05 	b.w	8007d54 <_ZN3pxt8mkStringEPKci>
 800a54a:	bf00      	nop
 800a54c:	0800d54c 	.word	0x0800d54c

0800a550 <_ZN7control19allocateNotifyEventEv>:

//
//
//
//
int allocateNotifyEvent() {
 800a550:	b508      	push	{r3, lr}
    return ::allocateNotifyEvent();
 800a552:	f001 fe65 	bl	800c220 <_ZN5codal19allocateNotifyEventEv>
}
 800a556:	bd08      	pop	{r3, pc}

0800a558 <_ZN7control5dmesgEPN3pxt11BoxedStringE>:

//
//
void dmesg(String s) {
    DMESG("# %s", s->data);
 800a558:	1d81      	adds	r1, r0, #6
 800a55a:	4801      	ldr	r0, [pc, #4]	; (800a560 <_ZN7control5dmesgEPN3pxt11BoxedStringE+0x8>)
 800a55c:	f000 bc6e 	b.w	800ae3c <codal_dmesg>
 800a560:	0800d554 	.word	0x0800d554

0800a564 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv>:
}

//
//
void dmesgPtr(String str, Object_ ptr) {
    DMESG("# %s: %p", str->data, ptr);
 800a564:	460a      	mov	r2, r1
 800a566:	1d81      	adds	r1, r0, #6
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv+0xc>)
 800a56a:	f000 bc67 	b.w	800ae3c <codal_dmesg>
 800a56e:	bf00      	nop
 800a570:	0800d55c 	.word	0x0800d55c

0800a574 <_ZN4pinsL7initI2CEv.part.0>:
#include "ErrorNo.h"

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
 800a574:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));
 800a576:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a57a:	2019      	movs	r0, #25
 800a57c:	f7fd feec 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a580:	b2c0      	uxtb	r0, r0
 800a582:	f000 f8c1 	bl	800a708 <_ZN3pxt9lookupPinEi>
 800a586:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a58a:	4605      	mov	r5, r0
 800a58c:	2018      	movs	r0, #24
 800a58e:	f7fd fee3 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a592:	b2c0      	uxtb	r0, r0
 800a594:	f000 f8b8 	bl	800a708 <_ZN3pxt9lookupPinEi>
 800a598:	4606      	mov	r6, r0
 800a59a:	2010      	movs	r0, #16
 800a59c:	f7f9 fe20 	bl	80041e0 <_Znwj>
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	4632      	mov	r2, r6
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	f001 feb3 	bl	800c310 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 800a5aa:	4b01      	ldr	r3, [pc, #4]	; (800a5b0 <_ZN4pinsL7initI2CEv.part.0+0x3c>)
 800a5ac:	601c      	str	r4, [r3, #0]
      }
    }
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	2000108c 	.word	0x2000108c

0800a5b4 <_ZN4pins13i2cReadBufferEiib>:
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 800a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if (NULL == i2c) {
 800a5b8:	4f10      	ldr	r7, [pc, #64]	; (800a5fc <_ZN4pins13i2cReadBufferEiib+0x48>)
    {
 800a5ba:	b082      	sub	sp, #8
      if (NULL == i2c) {
 800a5bc:	683b      	ldr	r3, [r7, #0]
    {
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460e      	mov	r6, r1
 800a5c2:	4690      	mov	r8, r2
      if (NULL == i2c) {
 800a5c4:	b1b3      	cbz	r3, 800a5f4 <_ZN4pins13i2cReadBufferEiib+0x40>
      initI2C();
      Buffer buf = mkBuffer(NULL, size);
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f7fd fbe9 	bl	8007da0 <_ZN3pxt8mkBufferEPKhi>
 800a5ce:	4605      	mov	r5, r0
      int status = i2c->read(address << 1, buf->data, size, repeat);
 800a5d0:	6838      	ldr	r0, [r7, #0]
 800a5d2:	0061      	lsls	r1, r4, #1
 800a5d4:	6804      	ldr	r4, [r0, #0]
 800a5d6:	f8cd 8000 	str.w	r8, [sp]
 800a5da:	b289      	uxth	r1, r1
 800a5dc:	4633      	mov	r3, r6
 800a5de:	69e4      	ldr	r4, [r4, #28]
 800a5e0:	f105 0208 	add.w	r2, r5, #8
 800a5e4:	47a0      	blx	r4
      if (status != ErrorCode::DEVICE_OK) {
 800a5e6:	2800      	cmp	r0, #0
        decrRC(buf);
        buf = 0;
      }
      return buf;
    }
 800a5e8:	bf0c      	ite	eq
 800a5ea:	4628      	moveq	r0, r5
 800a5ec:	2000      	movne	r0, #0
 800a5ee:	b002      	add	sp, #8
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	f7ff ffbe 	bl	800a574 <_ZN4pinsL7initI2CEv.part.0>
 800a5f8:	e7e5      	b.n	800a5c6 <_ZN4pins13i2cReadBufferEiib+0x12>
 800a5fa:	bf00      	nop
 800a5fc:	2000108c 	.word	0x2000108c

0800a600 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb>:
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 800a600:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
 800a602:	4e0b      	ldr	r6, [pc, #44]	; (800a630 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x30>)
    {
 800a604:	4604      	mov	r4, r0
      if (NULL == i2c) {
 800a606:	6830      	ldr	r0, [r6, #0]
    {
 800a608:	b084      	sub	sp, #16
 800a60a:	460d      	mov	r5, r1
      if (NULL == i2c) {
 800a60c:	b150      	cbz	r0, 800a624 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x24>
      initI2C();
      return i2c->write(address << 1, buf->data, buf->length, repeat);
 800a60e:	0061      	lsls	r1, r4, #1
 800a610:	6804      	ldr	r4, [r0, #0]
 800a612:	686b      	ldr	r3, [r5, #4]
 800a614:	9200      	str	r2, [sp, #0]
 800a616:	b289      	uxth	r1, r1
 800a618:	6964      	ldr	r4, [r4, #20]
 800a61a:	f105 0208 	add.w	r2, r5, #8
 800a61e:	47a0      	blx	r4
    }
 800a620:	b004      	add	sp, #16
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	9203      	str	r2, [sp, #12]
 800a626:	f7ff ffa5 	bl	800a574 <_ZN4pinsL7initI2CEv.part.0>
 800a62a:	6830      	ldr	r0, [r6, #0]
 800a62c:	9a03      	ldr	r2, [sp, #12]
 800a62e:	e7ee      	b.n	800a60e <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0xe>
 800a630:	2000108c 	.word	0x2000108c

0800a634 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a634:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop

0800a63c <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a63c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop

0800a644 <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a644:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop

0800a64c <_ZN3pxt6getPinEi>:
static uint8_t numPinPtrs;
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
    if (id < 0 || id >= DEV_NUM_PINS)
 800a64c:	287f      	cmp	r0, #127	; 0x7f
DevicePin *getPin(int id) {
 800a64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a652:	4604      	mov	r4, r0
    if (id < 0 || id >= DEV_NUM_PINS)
 800a654:	d83f      	bhi.n	800a6d6 <_ZN3pxt6getPinEi+0x8a>
        target_panic(PANIC_NO_SUCH_PIN);

    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
 800a656:	4e22      	ldr	r6, [pc, #136]	; (800a6e0 <_ZN3pxt6getPinEi+0x94>)
 800a658:	4d22      	ldr	r5, [pc, #136]	; (800a6e4 <_ZN3pxt6getPinEi+0x98>)
 800a65a:	5d33      	ldrb	r3, [r6, r4]
 800a65c:	6828      	ldr	r0, [r5, #0]
    if (ptr == 0) {
 800a65e:	bb9b      	cbnz	r3, 800a6c8 <_ZN3pxt6getPinEi+0x7c>
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
 800a660:	4f21      	ldr	r7, [pc, #132]	; (800a6e8 <_ZN3pxt6getPinEi+0x9c>)
 800a662:	7839      	ldrb	r1, [r7, #0]
 800a664:	3101      	adds	r1, #1
 800a666:	0089      	lsls	r1, r1, #2
 800a668:	f7ff f8fe 	bl	8009868 <realloc>
 800a66c:	6028      	str	r0, [r5, #0]
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 800a66e:	2020      	movs	r0, #32
 800a670:	f7f9 fdb6 	bl	80041e0 <_Znwj>
        bool isAnalog = IS_ANALOG_PIN(id);
 800a674:	213f      	movs	r1, #63	; 0x3f
 800a676:	2300      	movs	r3, #0
 800a678:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a6f0 <_ZN3pxt6getPinEi+0xa4>
 800a67c:	f1c4 0e20 	rsb	lr, r4, #32
 800a680:	fa01 fe0e 	lsl.w	lr, r1, lr
 800a684:	fa2c f904 	lsr.w	r9, ip, r4
 800a688:	f1a4 0c20 	sub.w	ip, r4, #32
 800a68c:	fa21 fc0c 	lsr.w	ip, r1, ip
 800a690:	ea49 090e 	orr.w	r9, r9, lr
 800a694:	ea49 090c 	orr.w	r9, r9, ip
 800a698:	f009 0201 	and.w	r2, r9, #1
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 800a69c:	4313      	orrs	r3, r2
        //  Codal constructor.  Called by pxt-maker.
        STM32BluePillPin(
            int id,              //  e.g. DEVICE_ID_IO_P0 + CM_PIN_PC13
            PinName       name,  //  e.g. CM_PIN_PC13
            PinCapability capability  //  e.g. PIN_CAPABILITY_DIGITAL
        ): codal::_cm::Pin(id, name, capability) {}
 800a69e:	bf0c      	ite	eq
 800a6a0:	2301      	moveq	r3, #1
 800a6a2:	2303      	movne	r3, #3
 800a6a4:	b2e2      	uxtb	r2, r4
 800a6a6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	f001 ff2a 	bl	800c504 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>
        pinPtrs[numPinPtrs++] =
 800a6b0:	7839      	ldrb	r1, [r7, #0]
 800a6b2:	6828      	ldr	r0, [r5, #0]
 800a6b4:	1c4a      	adds	r2, r1, #1
 800a6b6:	b2d2      	uxtb	r2, r2
        ptr = numPinPtrs;
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	4d0c      	ldr	r5, [pc, #48]	; (800a6ec <_ZN3pxt6getPinEi+0xa0>)
        pinPtrs[numPinPtrs++] =
 800a6bc:	703a      	strb	r2, [r7, #0]
 800a6be:	f8c8 5000 	str.w	r5, [r8]
        pinPos[id] = ptr;
 800a6c2:	5532      	strb	r2, [r6, r4]
        pinPtrs[numPinPtrs++] =
 800a6c4:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
    }
    return pinPtrs[ptr - 1];
 800a6c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6cc:	3b01      	subs	r3, #1
}
 800a6ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        target_panic(PANIC_NO_SUCH_PIN);
 800a6d6:	f44f 7063 	mov.w	r0, #908	; 0x38c
 800a6da:	f7f6 fa53 	bl	8000b84 <target_panic>
 800a6de:	e7ba      	b.n	800a656 <_ZN3pxt6getPinEi+0xa>
 800a6e0:	20001090 	.word	0x20001090
 800a6e4:	20001110 	.word	0x20001110
 800a6e8:	2000166e 	.word	0x2000166e
 800a6ec:	0800d570 	.word	0x0800d570
 800a6f0:	e0030fff 	.word	0xe0030fff

0800a6f4 <_ZN3pxt9getPinCfgEi>:

//
DevicePin *getPinCfg(int key) {
 800a6f4:	b508      	push	{r3, lr}
    return getPin(getConfig(key));
 800a6f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a6fa:	f7fd fe2d 	bl	8008358 <_ZN3pxt9getConfigEii>
}
 800a6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return getPin(getConfig(key));
 800a702:	f7ff bfa3 	b.w	800a64c <_ZN3pxt6getPinEi>
 800a706:	bf00      	nop

0800a708 <_ZN3pxt9lookupPinEi>:
    pinPos[from] = pinPos[to];
}

//
DevicePin *lookupPin(int pinName) {
    if (pinName < 0 || pinName == 0xff)
 800a708:	1e03      	subs	r3, r0, #0
 800a70a:	db03      	blt.n	800a714 <_ZN3pxt9lookupPinEi+0xc>
 800a70c:	2bff      	cmp	r3, #255	; 0xff
 800a70e:	d001      	beq.n	800a714 <_ZN3pxt9lookupPinEi+0xc>
        return NULL;
    return getPin(pinName);
 800a710:	f7ff bf9c 	b.w	800a64c <_ZN3pxt6getPinEi>
}
 800a714:	2000      	movs	r0, #0
 800a716:	4770      	bx	lr

0800a718 <_ZN4pins12createBufferEi>:
//
//
//
//
Buffer createBuffer(int size) {
    return mkBuffer(NULL, size);
 800a718:	4601      	mov	r1, r0
 800a71a:	2000      	movs	r0, #0
 800a71c:	f7fd bb40 	b.w	8007da0 <_ZN3pxt8mkBufferEPKhi>

0800a720 <_ZN4pins13pulseDurationEv>:
//
//
//
//
int pulseDuration() {
    return pxt::lastEvent.timestamp;
 800a720:	4b01      	ldr	r3, [pc, #4]	; (800a728 <_ZN4pins13pulseDurationEv+0x8>)
}
 800a722:	6858      	ldr	r0, [r3, #4]
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	20001084 	.word	0x20001084

0800a72c <_ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
int analogRead(AnalogInPin name) {
    return PINOP(getAnalogValue());
 800a72c:	6803      	ldr	r3, [r0, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	4718      	bx	r3
 800a732:	bf00      	nop

0800a734 <_ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogWrite(AnalogOutPin name, int value) {
    PINOP(setAnalogValue(value));
 800a734:	6803      	ldr	r3, [r0, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	4718      	bx	r3
 800a73a:	bf00      	nop

0800a73c <_ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
//
bool digitalRead(DigitalInOutPin name) {
 800a73c:	b508      	push	{r3, lr}
    return PINOP(getDigitalValue()) != 0;
 800a73e:	6803      	ldr	r3, [r0, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	4798      	blx	r3
}
 800a744:	3000      	adds	r0, #0
 800a746:	bf18      	it	ne
 800a748:	2001      	movne	r0, #1
 800a74a:	bd08      	pop	{r3, pc}

0800a74c <_ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb>:
//
//
//
//
void digitalWrite(DigitalInOutPin name, bool value) {
    PINOP(setDigitalValue(value));
 800a74c:	6803      	ldr	r3, [r0, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4718      	bx	r3
 800a752:	bf00      	nop

0800a754 <_ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE>:
//
//
//
//
//
void onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4604      	mov	r4, r0
 800a758:	460d      	mov	r5, r1
 800a75a:	4616      	mov	r6, r2
    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 800a75c:	6803      	ldr	r3, [r0, #0]
 800a75e:	2102      	movs	r1, #2
 800a760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a762:	4798      	blx	r3
    registerWithDal(pin->id, (int)pulse, body);
 800a764:	4632      	mov	r2, r6
 800a766:	4629      	mov	r1, r5
 800a768:	89e0      	ldrh	r0, [r4, #14]
 800a76a:	2310      	movs	r3, #16
}
 800a76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    registerWithDal(pin->id, (int)pulse, body);
 800a770:	f7ff bea8 	b.w	800a4c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

0800a774 <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE>:
//
//
//
//
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
    switch(event) {
 800a774:	1e8b      	subs	r3, r1, #2
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
 800a776:	b570      	push	{r4, r5, r6, lr}
 800a778:	460d      	mov	r5, r1
 800a77a:	4604      	mov	r4, r0
 800a77c:	4616      	mov	r6, r2
    switch(event) {
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d813      	bhi.n	800a7aa <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x36>
 800a782:	e8df f003 	tbb	[pc, r3]
 800a786:	0f0f      	.short	0x0f0f
 800a788:	0202      	.short	0x0202
        case PinEvent::PulseHigh:
        case PinEvent::PulseLow:
            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 800a78a:	2102      	movs	r1, #2
 800a78c:	6803      	ldr	r3, [r0, #0]
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 800a78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a790:	4620      	mov	r0, r4
 800a792:	4798      	blx	r3
            registerWithDal(pin->id, (int)event, body);
 800a794:	4632      	mov	r2, r6
 800a796:	4629      	mov	r1, r5
 800a798:	89e0      	ldrh	r0, [r4, #14]
 800a79a:	2310      	movs	r3, #16
            break;    
    }    
}
 800a79c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            registerWithDal(pin->id, (int)event, body);
 800a7a0:	f7ff be90 	b.w	800a4c4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 800a7a4:	6803      	ldr	r3, [r0, #0]
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	e7f1      	b.n	800a78e <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x1a>
}
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}

0800a7ac <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei>:
//
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 800a7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int pulse = PulseValue::High == value ? 1 : 0;
 800a7b0:	f1a1 0904 	sub.w	r9, r1, #4
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	4680      	mov	r8, r0
    int pulse = PulseValue::High == value ? 1 : 0;
 800a7b8:	fab9 f989 	clz	r9, r9
    uint64_t tick = system_timer_current_time_us();
 800a7bc:	f001 fa38 	bl	800bc30 <_ZN5codal28system_timer_current_time_usEv>
    int pulse = PulseValue::High == value ? 1 : 0;
 800a7c0:	ea4f 1959 	mov.w	r9, r9, lsr #5
    uint64_t maxd = (uint64_t)maxDuration;
 800a7c4:	17e5      	asrs	r5, r4, #31
    uint64_t tick = system_timer_current_time_us();
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	2700      	movs	r7, #0
 800a7ca:	e009      	b.n	800a7e0 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x34>
    while (pin->getDigitalValue() != pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 800a7cc:	f001 fa30 	bl	800bc30 <_ZN5codal28system_timer_current_time_usEv>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	1b82      	subs	r2, r0, r6
 800a7d4:	eb63 0307 	sbc.w	r3, r3, r7
 800a7d8:	429d      	cmp	r5, r3
 800a7da:	bf08      	it	eq
 800a7dc:	4294      	cmpeq	r4, r2
 800a7de:	d322      	bcc.n	800a826 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() != pulse) {
 800a7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	4798      	blx	r3
 800a7ea:	4548      	cmp	r0, r9
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	d1ed      	bne.n	800a7cc <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x20>
            return 0;
    }

    uint64_t start = system_timer_current_time_us();
 800a7f0:	f001 fa1e 	bl	800bc30 <_ZN5codal28system_timer_current_time_usEv>
 800a7f4:	4681      	mov	r9, r0
 800a7f6:	e009      	b.n	800a80c <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x60>
    while (pin->getDigitalValue() == pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 800a7f8:	f001 fa1a 	bl	800bc30 <_ZN5codal28system_timer_current_time_usEv>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	1b82      	subs	r2, r0, r6
 800a800:	eb63 0307 	sbc.w	r3, r3, r7
 800a804:	429d      	cmp	r5, r3
 800a806:	bf08      	it	eq
 800a808:	4294      	cmpeq	r4, r2
 800a80a:	d30c      	bcc.n	800a826 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x7a>
    while (pin->getDigitalValue() == pulse) {
 800a80c:	f8d8 3000 	ldr.w	r3, [r8]
 800a810:	4640      	mov	r0, r8
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4798      	blx	r3
 800a816:	4582      	cmp	sl, r0
 800a818:	d0ee      	beq.n	800a7f8 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x4c>
            return 0;
    }
    uint64_t end = system_timer_current_time_us();
 800a81a:	f001 fa09 	bl	800bc30 <_ZN5codal28system_timer_current_time_usEv>
    return end - start;
 800a81e:	eba0 0009 	sub.w	r0, r0, r9
}
 800a822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 800a826:	2000      	movs	r0, #0
}
 800a828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a82c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode>:
//
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800a82c:	b131      	cbz	r1, 800a83c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode+0x10>
                                                                        ? PullMode::Up
                                                                        : PullMode::None;
    PINOP(setPull(m));
 800a82e:	6803      	ldr	r3, [r0, #0]
                                                                        ? PullMode::Up
 800a830:	2901      	cmp	r1, #1
 800a832:	bf0c      	ite	eq
 800a834:	2102      	moveq	r1, #2
 800a836:	2100      	movne	r1, #0
    PINOP(setPull(m));
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	4718      	bx	r3
 800a83c:	6803      	ldr	r3, [r0, #0]
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800a83e:	2101      	movs	r1, #1
    PINOP(setPull(m));
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	4718      	bx	r3

0800a844 <_ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogSetPeriod(PwmOnlyPin name, int period) {
    PINOP(setAnalogPeriodUs(period));
 800a844:	f001 be80 	b.w	800c548 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>

0800a848 <_ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
    PINOP(setServoValue(value));
 800a848:	6802      	ldr	r2, [r0, #0]
void servoWrite(PwmOnlyPin name, int value) {
 800a84a:	b410      	push	{r4}
    PINOP(setServoValue(value));
 800a84c:	6914      	ldr	r4, [r2, #16]
 800a84e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a852:	46a4      	mov	ip, r4
 800a854:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
}
 800a858:	bc10      	pop	{r4}
    PINOP(setServoValue(value));
 800a85a:	4760      	bx	ip

0800a85c <_ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoSetPulse(PwmOnlyPin name, int duration) {
    PINOP(setServoPulseUs(duration));
 800a85c:	f001 be72 	b.w	800c544 <_ZN5codal3_cm3Pin15setServoPulseUsEi>

0800a860 <_ZN3pxt13platform_initEv>:

    void platformSendSerial(const char *data, int len) {
        debug_println("---pxt::platformSendSerial"); 
    }

    void platform_init() {
 800a860:	b508      	push	{r3, lr}
        //   This is called after cpu_clock_init.  CODAL scheduler is already started.
        debug_println("---pxt::platform_init");
 800a862:	4804      	ldr	r0, [pc, #16]	; (800a874 <_ZN3pxt13platform_initEv+0x14>)
 800a864:	f7f9 fc36 	bl	80040d4 <debug_println>

        //  Start the background tasks to flush the log and wait for restart requests.
        start_background_tasks();
 800a868:	f002 f838 	bl	800c8dc <start_background_tasks>

        initRandomSeed();
        debug_force_flush(); ////
        //  TODO: setSendToUART(platformSendSerial);
    }
 800a86c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        debug_force_flush(); ////
 800a870:	f7f9 bbb2 	b.w	8003fd8 <debug_force_flush>
 800a874:	0800d5d4 	.word	0x0800d5d4

0800a878 <_Z14cpu_clock_initv>:
}

void cpu_clock_init() {
 800a878:	b508      	push	{r3, lr}
    //  This is called before platform_init().  CODAL scheduler is not started yet.  Starting background tasks will fail.
    debug_println("---pxt::cpu_clock_init");
 800a87a:	4804      	ldr	r0, [pc, #16]	; (800a88c <_Z14cpu_clock_initv+0x14>)
 800a87c:	f7f9 fc2a 	bl	80040d4 <debug_println>

    //  Init the CODAL timer.
    devTimer.init();
}
 800a880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    devTimer.init();
 800a884:	4802      	ldr	r0, [pc, #8]	; (800a890 <_Z14cpu_clock_initv+0x18>)
 800a886:	f001 bf8f 	b.w	800c7a8 <_ZN5codal3_cm5Timer4initEv>
 800a88a:	bf00      	nop
 800a88c:	0800d5bc 	.word	0x0800d5bc
 800a890:	20001060 	.word	0x20001060

0800a894 <_ZN4pinsL7initSPIEv.part.0>:
#include "pxt.h"
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (NULL == spi)
            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));
 800a896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a89a:	2013      	movs	r0, #19
 800a89c:	f7fd fd5c 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a8a0:	b2c0      	uxtb	r0, r0
 800a8a2:	f7ff ff31 	bl	800a708 <_ZN3pxt9lookupPinEi>
 800a8a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	2012      	movs	r0, #18
 800a8ae:	f7fd fd53 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a8b2:	b2c0      	uxtb	r0, r0
 800a8b4:	f7ff ff28 	bl	800a708 <_ZN3pxt9lookupPinEi>
 800a8b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a8bc:	4606      	mov	r6, r0
 800a8be:	2017      	movs	r0, #23
 800a8c0:	f7fd fd4a 	bl	8008358 <_ZN3pxt9getConfigEii>
 800a8c4:	b2c0      	uxtb	r0, r0
 800a8c6:	f7ff ff1f 	bl	800a708 <_ZN3pxt9lookupPinEi>
 800a8ca:	4607      	mov	r7, r0
 800a8cc:	2028      	movs	r0, #40	; 0x28
 800a8ce:	f7f9 fc87 	bl	80041e0 <_Znwj>
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f001 fec7 	bl	800c66c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>
 800a8de:	4b01      	ldr	r3, [pc, #4]	; (800a8e4 <_ZN4pinsL7initSPIEv.part.0+0x50>)
 800a8e0:	601c      	str	r4, [r3, #0]
    }
 800a8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e4:	20001114 	.word	0x20001114

0800a8e8 <_ZN4pins8spiWriteEi>:
//
//
//
//
//
    int spiWrite(int value) {
 800a8e8:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a8ea:	4c08      	ldr	r4, [pc, #32]	; (800a90c <_ZN4pins8spiWriteEi+0x24>)
    int spiWrite(int value) {
 800a8ec:	4601      	mov	r1, r0
        if (NULL == spi)
 800a8ee:	6820      	ldr	r0, [r4, #0]
    int spiWrite(int value) {
 800a8f0:	b082      	sub	sp, #8
        if (NULL == spi)
 800a8f2:	b128      	cbz	r0, 800a900 <_ZN4pins8spiWriteEi+0x18>
        initSPI();
        return spi->write(value);
 800a8f4:	6802      	ldr	r2, [r0, #0]
 800a8f6:	6892      	ldr	r2, [r2, #8]
    }
 800a8f8:	b002      	add	sp, #8
 800a8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return spi->write(value);
 800a8fe:	4710      	bx	r2
 800a900:	9101      	str	r1, [sp, #4]
 800a902:	f7ff ffc7 	bl	800a894 <_ZN4pinsL7initSPIEv.part.0>
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	9901      	ldr	r1, [sp, #4]
 800a90a:	e7f3      	b.n	800a8f4 <_ZN4pins8spiWriteEi+0xc>
 800a90c:	20001114 	.word	0x20001114

0800a910 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_>:
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 800a910:	b570      	push	{r4, r5, r6, lr}
        if (NULL == spi)
 800a912:	4e0e      	ldr	r6, [pc, #56]	; (800a94c <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x3c>)
    void spiTransfer(Buffer command, Buffer response) {
 800a914:	4605      	mov	r5, r0
        if (NULL == spi)
 800a916:	6830      	ldr	r0, [r6, #0]
    void spiTransfer(Buffer command, Buffer response) {
 800a918:	b082      	sub	sp, #8
 800a91a:	460c      	mov	r4, r1
        if (NULL == spi)
 800a91c:	b190      	cbz	r0, 800a944 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x34>
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
 800a91e:	b175      	cbz	r5, 800a93e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2e>
 800a920:	686a      	ldr	r2, [r5, #4]
 800a922:	f105 0108 	add.w	r1, r5, #8
        auto clength = NULL == command ? 0 : command->length;
        auto rdata = NULL == response ? NULL : response->data;
 800a926:	b144      	cbz	r4, 800a93a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2a>
 800a928:	f104 0308 	add.w	r3, r4, #8
 800a92c:	6864      	ldr	r4, [r4, #4]
        auto rlength = NULL == response ? 0 : response->length;
        spi->transfer(cdata, clength, rdata, rlength);
 800a92e:	6805      	ldr	r5, [r0, #0]
 800a930:	9400      	str	r4, [sp, #0]
 800a932:	68ec      	ldr	r4, [r5, #12]
 800a934:	47a0      	blx	r4
    }
 800a936:	b002      	add	sp, #8
 800a938:	bd70      	pop	{r4, r5, r6, pc}
        auto rdata = NULL == response ? NULL : response->data;
 800a93a:	4623      	mov	r3, r4
 800a93c:	e7f7      	b.n	800a92e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x1e>
 800a93e:	462a      	mov	r2, r5
        auto cdata = NULL == command ? NULL : command->data;
 800a940:	4629      	mov	r1, r5
 800a942:	e7f0      	b.n	800a926 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x16>
 800a944:	f7ff ffa6 	bl	800a894 <_ZN4pinsL7initSPIEv.part.0>
 800a948:	6830      	ldr	r0, [r6, #0]
 800a94a:	e7e8      	b.n	800a91e <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0xe>
 800a94c:	20001114 	.word	0x20001114

0800a950 <_ZN4pins12spiFrequencyEi>:
//
//
//
//
//
    void spiFrequency(int frequency) {
 800a950:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a952:	4c08      	ldr	r4, [pc, #32]	; (800a974 <_ZN4pins12spiFrequencyEi+0x24>)
    void spiFrequency(int frequency) {
 800a954:	4601      	mov	r1, r0
        if (NULL == spi)
 800a956:	6820      	ldr	r0, [r4, #0]
    void spiFrequency(int frequency) {
 800a958:	b082      	sub	sp, #8
        if (NULL == spi)
 800a95a:	b128      	cbz	r0, 800a968 <_ZN4pins12spiFrequencyEi+0x18>
        initSPI();
        spi->setFrequency(frequency);
 800a95c:	6802      	ldr	r2, [r0, #0]
 800a95e:	6812      	ldr	r2, [r2, #0]
    }
 800a960:	b002      	add	sp, #8
 800a962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setFrequency(frequency);
 800a966:	4710      	bx	r2
 800a968:	9101      	str	r1, [sp, #4]
 800a96a:	f7ff ff93 	bl	800a894 <_ZN4pinsL7initSPIEv.part.0>
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	9901      	ldr	r1, [sp, #4]
 800a972:	e7f3      	b.n	800a95c <_ZN4pins12spiFrequencyEi+0xc>
 800a974:	20001114 	.word	0x20001114

0800a978 <_ZN4pins7spiModeEi>:
//
//
//
//
//
    void spiMode(int mode) {
 800a978:	b510      	push	{r4, lr}
        if (NULL == spi)
 800a97a:	4c09      	ldr	r4, [pc, #36]	; (800a9a0 <_ZN4pins7spiModeEi+0x28>)
    void spiMode(int mode) {
 800a97c:	4601      	mov	r1, r0
        if (NULL == spi)
 800a97e:	6820      	ldr	r0, [r4, #0]
    void spiMode(int mode) {
 800a980:	b082      	sub	sp, #8
        if (NULL == spi)
 800a982:	b138      	cbz	r0, 800a994 <_ZN4pins7spiModeEi+0x1c>
        initSPI();
        spi->setMode(mode);        
 800a984:	6802      	ldr	r2, [r0, #0]
 800a986:	6854      	ldr	r4, [r2, #4]
 800a988:	2208      	movs	r2, #8
 800a98a:	4623      	mov	r3, r4
    }
 800a98c:	b002      	add	sp, #8
 800a98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spi->setMode(mode);        
 800a992:	4718      	bx	r3
 800a994:	9101      	str	r1, [sp, #4]
 800a996:	f7ff ff7d 	bl	800a894 <_ZN4pinsL7initSPIEv.part.0>
 800a99a:	6820      	ldr	r0, [r4, #0]
 800a99c:	9901      	ldr	r1, [sp, #4]
 800a99e:	e7f1      	b.n	800a984 <_ZN4pins7spiModeEi+0xc>
 800a9a0:	20001114 	.word	0x20001114

0800a9a4 <_ZN3pxt8usb_initEv>:
    create_fiber(start_usb);
}


#else
void usb_init() {}
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop

0800a9a8 <_ZN3pxt10sendSerialEPKci>:
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <_ZN3pxt10sendSerialEPKci+0xc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	b103      	cbz	r3, 800a9b0 <_ZN3pxt10sendSerialEPKci+0x8>
        pSendToUART(data, len);
 800a9ae:	4718      	bx	r3
}
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20001118 	.word	0x20001118

0800a9b8 <_ZN3pxt9dumpDmesgEv>:

void dumpDmesg() {
 800a9b8:	b510      	push	{r4, lr}
    if (pSendToUART)
 800a9ba:	4c0a      	ldr	r4, [pc, #40]	; (800a9e4 <_ZN3pxt9dumpDmesgEv+0x2c>)
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	b17b      	cbz	r3, 800a9e0 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 800a9c0:	2108      	movs	r1, #8
 800a9c2:	4809      	ldr	r0, [pc, #36]	; (800a9e8 <_ZN3pxt9dumpDmesgEv+0x30>)
 800a9c4:	4798      	blx	r3
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 800a9c6:	4809      	ldr	r0, [pc, #36]	; (800a9ec <_ZN3pxt9dumpDmesgEv+0x34>)
    if (pSendToUART)
 800a9c8:	6823      	ldr	r3, [r4, #0]
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 800a9ca:	6801      	ldr	r1, [r0, #0]
    if (pSendToUART)
 800a9cc:	b143      	cbz	r3, 800a9e0 <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 800a9ce:	3004      	adds	r0, #4
 800a9d0:	4798      	blx	r3
 800a9d2:	6823      	ldr	r3, [r4, #0]
    if (pSendToUART)
 800a9d4:	b123      	cbz	r3, 800a9e0 <_ZN3pxt9dumpDmesgEv+0x28>
    sendSerial("\n\n", 2);
}
 800a9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pSendToUART(data, len);
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4804      	ldr	r0, [pc, #16]	; (800a9f0 <_ZN3pxt9dumpDmesgEv+0x38>)
 800a9de:	4718      	bx	r3
}
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20001118 	.word	0x20001118
 800a9e8:	0800d5ec 	.word	0x0800d5ec
 800a9ec:	2000121c 	.word	0x2000121c
 800a9f0:	0800d5f8 	.word	0x0800d5f8

0800a9f4 <_ZN3pxt4incrEPNS_12TValueStructE>:
}
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop

0800a9f8 <_ZN3pxt4decrEPNS_12TValueStructE>:
inline void decr(TValue e) {}
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop

0800a9fc <_ZN3pxt12ptrOfLiteralEi>:
    return &bytecode[offset];
 800a9fc:	4b02      	ldr	r3, [pc, #8]	; (800aa08 <_ZN3pxt12ptrOfLiteralEi+0xc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
}
 800aa00:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20001034 	.word	0x20001034

0800aa0c <_ZN3pxt16startPerfCounterENS_12PerfCountersE>:
//
void startPerfCounter(PerfCounters n);
//
void stopPerfCounter(PerfCounters n);
#else
inline void startPerfCounter(PerfCounters n) {}
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop

0800aa10 <_ZN3pxt15stopPerfCounterENS_12PerfCountersE>:
inline void stopPerfCounter(PerfCounters n) {}
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop

0800aa14 <_ZN3pxt16dumpPerfCountersEv>:
inline void initPerfCounters() {}
inline void dumpPerfCounters() {}
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop

0800aa18 <_ZN5codal14string_reverseEPc>:
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
    //sanity check...
    if(s == NULL)
 800aa18:	b188      	cbz	r0, 800aa3e <_ZN5codal14string_reverseEPc+0x26>
{
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	4604      	mov	r4, r0
        return DEVICE_INVALID_PARAMETER;

    char *j;
    int c;

    j = s + strlen(s) - 1;
 800aa1e:	f7f9 f9b3 	bl	8003d88 <strlen>
 800aa22:	3801      	subs	r0, #1
 800aa24:	4420      	add	r0, r4

    while(s < j)
 800aa26:	4284      	cmp	r4, r0
 800aa28:	d207      	bcs.n	800aa3a <_ZN5codal14string_reverseEPc+0x22>
    {
        c = *s;
 800aa2a:	7823      	ldrb	r3, [r4, #0]
        *s++ = *j;
 800aa2c:	7802      	ldrb	r2, [r0, #0]
 800aa2e:	f804 2b01 	strb.w	r2, [r4], #1
        *j-- = c;
 800aa32:	f800 3901 	strb.w	r3, [r0], #-1
    while(s < j)
 800aa36:	4284      	cmp	r4, r0
 800aa38:	d3f7      	bcc.n	800aa2a <_ZN5codal14string_reverseEPc+0x12>
    }

    return DEVICE_OK;
 800aa3a:	2000      	movs	r0, #0
}
 800aa3c:	bd10      	pop	{r4, pc}
        return DEVICE_INVALID_PARAMETER;
 800aa3e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800aa42:	4770      	bx	lr

0800aa44 <_ZN5codal4itoaEiPc>:
  * @param s A pointer to the buffer where the resulting string will be stored.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::itoa(int n, char *s)
{
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 800aa46:	b349      	cbz	r1, 800aa9c <_ZN5codal4itoaEiPc+0x58>
 800aa48:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 800aa4c:	ebc4 74e0 	rsb	r4, r4, r0, asr #31
 800aa50:	1e4f      	subs	r7, r1, #1
 800aa52:	2500      	movs	r5, #0
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 800aa54:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800aaa4 <_ZN5codal4itoaEiPc+0x60>
 800aa58:	e000      	b.n	800aa5c <_ZN5codal4itoaEiPc+0x18>
 800aa5a:	461d      	mov	r5, r3
 800aa5c:	fb8c 2304 	smull	r2, r3, ip, r4
 800aa60:	17e2      	asrs	r2, r4, #31
 800aa62:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800aa66:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800aa6a:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
 800aa6e:	3330      	adds	r3, #48	; 0x30
    } while (abs(n /= 10) > 0);
 800aa70:	4256      	negs	r6, r2
         s[i++] = abs(n % 10) + '0';
 800aa72:	f807 3f01 	strb.w	r3, [r7, #1]!
    } while (abs(n /= 10) > 0);
 800aa76:	4614      	mov	r4, r2
         s[i++] = abs(n % 10) + '0';
 800aa78:	1c6b      	adds	r3, r5, #1
    } while (abs(n /= 10) > 0);
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	d1ed      	bne.n	800aa5a <_ZN5codal4itoaEiPc+0x16>

    // Add a negative sign as needed
    if (!positive)
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	eb01 0203 	add.w	r2, r1, r3
 800aa84:	da03      	bge.n	800aa8e <_ZN5codal4itoaEiPc+0x4a>
        s[i++] = '-';
 800aa86:	202d      	movs	r0, #45	; 0x2d
 800aa88:	3502      	adds	r5, #2
 800aa8a:	194a      	adds	r2, r1, r5
 800aa8c:	54c8      	strb	r0, [r1, r3]

    // Terminate the string.
    s[i] = '\0';
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4608      	mov	r0, r1
 800aa92:	7013      	strb	r3, [r2, #0]

    // Flip the order.
    string_reverse(s);
 800aa94:	f7ff ffc0 	bl	800aa18 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
}
 800aa98:	4630      	mov	r0, r6
 800aa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 800aa9c:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 800aaa0:	e7fa      	b.n	800aa98 <_ZN5codal4itoaEiPc+0x54>
 800aaa2:	bf00      	nop
 800aaa4:	66666667 	.word	0x66666667

0800aaa8 <_ZN5codal14CodalComponent16periodicCallbackEv>:

        /**
          * Implement this function to receive a callback every SCHEDULER_TICK_PERIOD_MS.
          */
        virtual void periodicCallback() {}
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop

0800aaac <_ZN5codal14CodalComponent12idleCallbackEv>:

        /**
          * Implement this function to receive a callback when the device is idling.
          */
        virtual void idleCallback() {}
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop

0800aab0 <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 800aab0:	4800      	ldr	r0, [pc, #0]	; (800aab4 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 800aab2:	4770      	bx	lr
 800aab4:	fffffc16 	.word	0xfffffc16

0800aab8 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	ab02      	add	r3, sp, #8
 800aabe:	e903 0003 	stmdb	r3, {r0, r1}
 800aac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d018      	beq.n	800aafc <_Z18component_callbackN5codal5EventE+0x44>

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d114      	bne.n	800aaf8 <_Z18component_callbackN5codal5EventE+0x40>
 800aace:	4c15      	ldr	r4, [pc, #84]	; (800ab24 <_Z18component_callbackN5codal5EventE+0x6c>)
 800aad0:	4e15      	ldr	r6, [pc, #84]	; (800ab28 <_Z18component_callbackN5codal5EventE+0x70>)
 800aad2:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800aad6:	e001      	b.n	800aadc <_Z18component_callbackN5codal5EventE+0x24>
    {
        while(i < DEVICE_COMPONENT_COUNT)
 800aad8:	42ac      	cmp	r4, r5
 800aada:	d00d      	beq.n	800aaf8 <_Z18component_callbackN5codal5EventE+0x40>
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 800aadc:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0f9      	beq.n	800aad8 <_Z18component_callbackN5codal5EventE+0x20>
 800aae4:	88c3      	ldrh	r3, [r0, #6]
 800aae6:	045b      	lsls	r3, r3, #17
 800aae8:	d5f6      	bpl.n	800aad8 <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->idleCallback();
 800aaea:	6803      	ldr	r3, [r0, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	42b3      	cmp	r3, r6
 800aaf0:	d0f2      	beq.n	800aad8 <_Z18component_callbackN5codal5EventE+0x20>
 800aaf2:	4798      	blx	r3
        while(i < DEVICE_COMPONENT_COUNT)
 800aaf4:	42ac      	cmp	r4, r5
 800aaf6:	d1f1      	bne.n	800aadc <_Z18component_callbackN5codal5EventE+0x24>

            i++;
        }
    }
}
 800aaf8:	b002      	add	sp, #8
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	4c09      	ldr	r4, [pc, #36]	; (800ab24 <_Z18component_callbackN5codal5EventE+0x6c>)
 800aafe:	4e0b      	ldr	r6, [pc, #44]	; (800ab2c <_Z18component_callbackN5codal5EventE+0x74>)
 800ab00:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800ab04:	e001      	b.n	800ab0a <_Z18component_callbackN5codal5EventE+0x52>
        while(i < DEVICE_COMPONENT_COUNT)
 800ab06:	42a5      	cmp	r5, r4
 800ab08:	d0f6      	beq.n	800aaf8 <_Z18component_callbackN5codal5EventE+0x40>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 800ab0a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0f9      	beq.n	800ab06 <_Z18component_callbackN5codal5EventE+0x4e>
 800ab12:	88c3      	ldrh	r3, [r0, #6]
 800ab14:	049a      	lsls	r2, r3, #18
 800ab16:	d5f6      	bpl.n	800ab06 <_Z18component_callbackN5codal5EventE+0x4e>
                CodalComponent::components[i]->periodicCallback();
 800ab18:	6803      	ldr	r3, [r0, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	42b3      	cmp	r3, r6
 800ab1e:	d0f2      	beq.n	800ab06 <_Z18component_callbackN5codal5EventE+0x4e>
 800ab20:	4798      	blx	r3
 800ab22:	e7f0      	b.n	800ab06 <_Z18component_callbackN5codal5EventE+0x4e>
 800ab24:	20001118 	.word	0x20001118
 800ab28:	0800aaad 	.word	0x0800aaad
 800ab2c:	0800aaa9 	.word	0x0800aaa9

0800ab30 <_ZN5codal14CodalComponent12addComponentEv>:

/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	4c30      	ldr	r4, [pc, #192]	; (800abf8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 800ab36:	b082      	sub	sp, #8
 800ab38:	4622      	mov	r2, r4
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e002      	b.n	800ab44 <_ZN5codal14CodalComponent12addComponentEv+0x14>
 800ab3e:	3301      	adds	r3, #1
    uint8_t i = 0;

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 800ab40:	2b40      	cmp	r3, #64	; 0x40
 800ab42:	d005      	beq.n	800ab50 <_ZN5codal14CodalComponent12addComponentEv+0x20>
    {
        if(components[i] == NULL)
 800ab44:	f852 1b04 	ldr.w	r1, [r2], #4
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d1f8      	bne.n	800ab3e <_ZN5codal14CodalComponent12addComponentEv+0xe>
        {
            components[i] = this;
 800ab4c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        }

        i++;
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 800ab50:	4c2a      	ldr	r4, [pc, #168]	; (800abfc <_ZN5codal14CodalComponent12addComponentEv+0xcc>)
 800ab52:	7823      	ldrb	r3, [r4, #0]
 800ab54:	07db      	lsls	r3, r3, #31
 800ab56:	d409      	bmi.n	800ab6c <_ZN5codal14CodalComponent12addComponentEv+0x3c>
 800ab58:	4d29      	ldr	r5, [pc, #164]	; (800ac00 <_ZN5codal14CodalComponent12addComponentEv+0xd0>)
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	b133      	cbz	r3, 800ab6c <_ZN5codal14CodalComponent12addComponentEv+0x3c>
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 800ab5e:	2201      	movs	r2, #1
 800ab60:	2110      	movs	r1, #16
 800ab62:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800ab66:	f001 f871 	bl	800bc4c <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 800ab6a:	b110      	cbz	r0, 800ab72 <_ZN5codal14CodalComponent12addComponentEv+0x42>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 800ab6c:	b002      	add	sp, #8
 800ab6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            Listener *newListener = new Listener(id, value, handler, flags);
 800ab72:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800ab74:	f8d5 8000 	ldr.w	r8, [r5]
 800ab78:	f7f9 fb32 	bl	80041e0 <_Znwj>
 800ab7c:	22c0      	movs	r2, #192	; 0xc0
 800ab7e:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 800ab80:	9200      	str	r2, [sp, #0]
 800ab82:	2110      	movs	r1, #16
 800ab84:	2201      	movs	r2, #1
 800ab86:	4607      	mov	r7, r0
 800ab88:	f000 fef6 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	4e1d      	ldr	r6, [pc, #116]	; (800ac08 <_ZN5codal14CodalComponent12addComponentEv+0xd8>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	42b3      	cmp	r3, r6
 800ab96:	d122      	bne.n	800abde <_ZN5codal14CodalComponent12addComponentEv+0xae>
            delete newListener;
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f000 ff05 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800ab9e:	4638      	mov	r0, r7
 800aba0:	f7f9 fb20 	bl	80041e4 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 800aba4:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800aba6:	682f      	ldr	r7, [r5, #0]
 800aba8:	f7f9 fb1a 	bl	80041e0 <_Znwj>
 800abac:	22c0      	movs	r2, #192	; 0xc0
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 800abb0:	9200      	str	r2, [sp, #0]
 800abb2:	210f      	movs	r1, #15
 800abb4:	2202      	movs	r2, #2
 800abb6:	4605      	mov	r5, r0
 800abb8:	f000 fede 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	42b3      	cmp	r3, r6
 800abc2:	d112      	bne.n	800abea <_ZN5codal14CodalComponent12addComponentEv+0xba>
            delete newListener;
 800abc4:	4628      	mov	r0, r5
 800abc6:	f000 feef 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800abca:	4628      	mov	r0, r5
 800abcc:	f7f9 fb0a 	bl	80041e4 <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 800abd0:	7823      	ldrb	r3, [r4, #0]
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	7023      	strb	r3, [r4, #0]
}
 800abd8:	b002      	add	sp, #8
 800abda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 800abde:	4640      	mov	r0, r8
 800abe0:	4639      	mov	r1, r7
 800abe2:	4798      	blx	r3
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d0dd      	beq.n	800aba4 <_ZN5codal14CodalComponent12addComponentEv+0x74>
 800abe8:	e7d6      	b.n	800ab98 <_ZN5codal14CodalComponent12addComponentEv+0x68>
 800abea:	4638      	mov	r0, r7
 800abec:	4629      	mov	r1, r5
 800abee:	4798      	blx	r3
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d0ed      	beq.n	800abd0 <_ZN5codal14CodalComponent12addComponentEv+0xa0>
 800abf4:	e7e6      	b.n	800abc4 <_ZN5codal14CodalComponent12addComponentEv+0x94>
 800abf6:	bf00      	nop
 800abf8:	2000111c 	.word	0x2000111c
 800abfc:	2000166f 	.word	0x2000166f
 800ac00:	2000164c 	.word	0x2000164c
 800ac04:	0800aab9 	.word	0x0800aab9
 800ac08:	0800aab1 	.word	0x0800aab1

0800ac0c <_ZN5codal14CodalComponent15removeComponentEv>:

/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
 800ac0c:	b410      	push	{r4}
 800ac0e:	4c08      	ldr	r4, [pc, #32]	; (800ac30 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4622      	mov	r2, r4
 800ac14:	e002      	b.n	800ac1c <_ZN5codal14CodalComponent15removeComponentEv+0x10>
 800ac16:	3301      	adds	r3, #1
    uint8_t i = 0;

    while(i < DEVICE_COMPONENT_COUNT)
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d006      	beq.n	800ac2a <_ZN5codal14CodalComponent15removeComponentEv+0x1e>
    {
        if(components[i] == this)
 800ac1c:	f852 1b04 	ldr.w	r1, [r2], #4
 800ac20:	4281      	cmp	r1, r0
 800ac22:	d1f8      	bne.n	800ac16 <_ZN5codal14CodalComponent15removeComponentEv+0xa>
        {
            components[i] = NULL;
 800ac24:	2200      	movs	r2, #0
 800ac26:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            return;
        }

        i++;
    }
}
 800ac2a:	bc10      	pop	{r4}
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	2000111c 	.word	0x2000111c

0800ac34 <_ZN5codal11CodalDevice10getVersionEv>:
        }
 800ac34:	4800      	ldr	r0, [pc, #0]	; (800ac38 <_ZN5codal11CodalDevice10getVersionEv+0x4>)
 800ac36:	4770      	bx	lr
 800ac38:	0800d54c 	.word	0x0800d54c

0800ac3c <_ZN5codal11CodalDevice5sleepEm>:

using namespace codal;

void CodalDevice::sleep(unsigned long milliseconds)
{
    fiber_sleep(milliseconds);
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	f000 bca7 	b.w	800b590 <_ZN5codal11fiber_sleepEm>
 800ac42:	bf00      	nop

0800ac44 <_ZN5codal11CodalDevice10seedRandomEm>:
         * @param seed an unsigned 32 bit value used to seed codal's lightweight Galois LFSR.
         * @return DEVICE_OK on success
         */
        virtual int seedRandom(uint32_t seed)
        {
            return target_seed_random(seed);
 800ac44:	4608      	mov	r0, r1
 800ac46:	f7f5 bf89 	b.w	8000b5c <target_seed_random>
 800ac4a:	bf00      	nop

0800ac4c <_ZN5codal11CodalDevice5panicEi>:
            target_panic(statusCode);
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	f7f5 bf99 	b.w	8000b84 <target_panic>
 800ac52:	bf00      	nop

0800ac54 <_ZN5codal11CodalDevice15getSerialNumberEv>:
            return target_get_serial();
 800ac54:	f7f5 bf8a 	b.w	8000b6c <target_get_serial>

0800ac58 <_ZN5codal11CodalDevice4waitEm>:
            target_wait(milliseconds);
 800ac58:	4608      	mov	r0, r1
 800ac5a:	f7f5 bf57 	b.w	8000b0c <target_wait>
 800ac5e:	bf00      	nop

0800ac60 <_ZN5codal11CodalDevice5resetEv>:
            target_reset();
 800ac60:	f7f5 bf6e 	b.w	8000b40 <target_reset>

0800ac64 <_ZL9logwritenPKci>:
using namespace codal;

static void logwrite(const char *msg);

static void logwriten(const char *msg, int l)
{
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	f8df a070 	ldr.w	sl, [pc, #112]	; 800acdc <_ZL9logwritenPKci+0x78>
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	4656      	mov	r6, sl
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 800ac70:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800ace0 <_ZL9logwritenPKci+0x7c>
 800ac74:	f856 4b04 	ldr.w	r4, [r6], #4
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800ac78:	f50a 7982 	add.w	r9, sl, #260	; 0x104
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
 800ac7c:	190b      	adds	r3, r1, r4
 800ac7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac82:	460d      	mov	r5, r1
 800ac84:	d20f      	bcs.n	800aca6 <_ZL9logwritenPKci+0x42>
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
 800ac86:	462a      	mov	r2, r5
 800ac88:	4639      	mov	r1, r7
 800ac8a:	1930      	adds	r0, r6, r4
 800ac8c:	f7f9 f864 	bl	8003d58 <memcpy>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800ac90:	2200      	movs	r2, #0
    codalLogStore.ptr += l;
 800ac92:	f8da 3000 	ldr.w	r3, [sl]
 800ac96:	441d      	add	r5, r3
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800ac98:	eb0a 0305 	add.w	r3, sl, r5
 800ac9c:	711a      	strb	r2, [r3, #4]
    codalLogStore.ptr += l;
 800ac9e:	f8ca 5000 	str.w	r5, [sl]
}
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        codalLogStore.ptr -= jump;
 800aca6:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800acaa:	4622      	mov	r2, r4
 800acac:	4649      	mov	r1, r9
 800acae:	480a      	ldr	r0, [pc, #40]	; (800acd8 <_ZL9logwritenPKci+0x74>)
        codalLogStore.ptr -= jump;
 800acb0:	f8ca 4000 	str.w	r4, [sl]
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 800acb4:	f7f9 f87f 	bl	8003db6 <memmove>
        memset(codalLogStore.buffer + codalLogStore.ptr, 0, sizeof(codalLogStore.buffer) - codalLogStore.ptr);
 800acb8:	f5c4 6280 	rsb	r2, r4, #1024	; 0x400
 800acbc:	1930      	adds	r0, r6, r4
 800acbe:	2100      	movs	r1, #0
 800acc0:	f7f9 f892 	bl	8003de8 <memset>
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800acc4:	f8da 4000 	ldr.w	r4, [sl]
    logwriten(msg, strlen(msg));
 800acc8:	2115      	movs	r1, #21
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 800acca:	192b      	adds	r3, r5, r4
 800accc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd0:	d3d9      	bcc.n	800ac86 <_ZL9logwritenPKci+0x22>
    logwriten(msg, strlen(msg));
 800acd2:	4647      	mov	r7, r8
 800acd4:	e7d2      	b.n	800ac7c <_ZL9logwritenPKci+0x18>
 800acd6:	bf00      	nop
 800acd8:	20001220 	.word	0x20001220
 800acdc:	2000121c 	.word	0x2000121c
 800ace0:	0800d624 	.word	0x0800d624

0800ace4 <_ZL11logwritenummbb>:
    }
    buf[i] = 0;
}

static void logwritenum(uint32_t n, bool full, bool hex)
{
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	b087      	sub	sp, #28
    char buff[20];

    if (hex)
 800ace8:	b962      	cbnz	r2, 800ad04 <_ZL11logwritenummbb+0x20>
        writeNum(buff, n, full);
        logwrite("0x");
    }
    else
    {
        itoa(n, buff);
 800acea:	ac01      	add	r4, sp, #4
 800acec:	4621      	mov	r1, r4
 800acee:	f7ff fea9 	bl	800aa44 <_ZN5codal4itoaEiPc>
    logwriten(msg, strlen(msg));
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7f9 f848 	bl	8003d88 <strlen>
 800acf8:	4601      	mov	r1, r0
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7ff ffb2 	bl	800ac64 <_ZL9logwritenPKci>
    }

    logwrite(buff);
}
 800ad00:	b007      	add	sp, #28
 800ad02:	bd30      	pop	{r4, r5, pc}
 800ad04:	4605      	mov	r5, r0
    int i = 0;
 800ad06:	2400      	movs	r4, #0
    int sh = 28;
 800ad08:	221c      	movs	r2, #28
 800ad0a:	e00d      	b.n	800ad28 <_ZL11logwritenummbb+0x44>
        if (full || d || sh == 0 || i)
 800ad0c:	b993      	cbnz	r3, 800ad34 <_ZL11logwritenummbb+0x50>
 800ad0e:	b312      	cbz	r2, 800ad56 <_ZL11logwritenummbb+0x72>
 800ad10:	b13c      	cbz	r4, 800ad22 <_ZL11logwritenummbb+0x3e>
 800ad12:	4608      	mov	r0, r1
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800ad14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad18:	a806      	add	r0, sp, #24
 800ad1a:	4420      	add	r0, r4
 800ad1c:	f800 3c14 	strb.w	r3, [r0, #-20]
 800ad20:	3401      	adds	r4, #1
        sh -= 4;
 800ad22:	3a04      	subs	r2, #4
    while (sh >= 0)
 800ad24:	1d13      	adds	r3, r2, #4
 800ad26:	d00b      	beq.n	800ad40 <_ZL11logwritenummbb+0x5c>
        int d = (n >> sh) & 0xf;
 800ad28:	fa25 f302 	lsr.w	r3, r5, r2
 800ad2c:	f003 030f 	and.w	r3, r3, #15
        if (full || d || sh == 0 || i)
 800ad30:	2900      	cmp	r1, #0
 800ad32:	d0eb      	beq.n	800ad0c <_ZL11logwritenummbb+0x28>
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800ad34:	2b09      	cmp	r3, #9
 800ad36:	b258      	sxtb	r0, r3
 800ad38:	ddec      	ble.n	800ad14 <_ZL11logwritenummbb+0x30>
 800ad3a:	f100 0337 	add.w	r3, r0, #55	; 0x37
 800ad3e:	e7eb      	b.n	800ad18 <_ZL11logwritenummbb+0x34>
    buf[i] = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	aa06      	add	r2, sp, #24
 800ad44:	4414      	add	r4, r2
 800ad46:	f804 3c14 	strb.w	r3, [r4, #-20]
    logwriten(msg, strlen(msg));
 800ad4a:	2102      	movs	r1, #2
 800ad4c:	4803      	ldr	r0, [pc, #12]	; (800ad5c <_ZL11logwritenummbb+0x78>)
 800ad4e:	ac01      	add	r4, sp, #4
 800ad50:	f7ff ff88 	bl	800ac64 <_ZL9logwritenPKci>
 800ad54:	e7cd      	b.n	800acf2 <_ZL11logwritenummbb+0xe>
        if (full || d || sh == 0 || i)
 800ad56:	4610      	mov	r0, r2
 800ad58:	e7dc      	b.n	800ad14 <_ZL11logwritenummbb+0x30>
 800ad5a:	bf00      	nop
 800ad5c:	0800d620 	.word	0x0800d620

0800ad60 <codal_vdmesg>:
    if (dmesg_flush_fn)
        dmesg_flush_fn();
}

void codal_vdmesg(const char *format, va_list ap)
{
 800ad60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad64:	460e      	mov	r6, r1
 800ad66:	b083      	sub	sp, #12
 800ad68:	4605      	mov	r5, r0
    const char *end = format;

    target_disable_irq();
 800ad6a:	f7f5 fef5 	bl	8000b58 <target_disable_irq>
    logwriten(msg, strlen(msg));
 800ad6e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800ae38 <codal_vdmesg+0xd8>
 800ad72:	4f2f      	ldr	r7, [pc, #188]	; (800ae30 <codal_vdmesg+0xd0>)
 800ad74:	3e04      	subs	r6, #4
 800ad76:	4629      	mov	r1, r5
 800ad78:	e002      	b.n	800ad80 <codal_vdmesg+0x20>
    while (*end)
    {
        if (*end++ == '%')
 800ad7a:	2a25      	cmp	r2, #37	; 0x25
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	d012      	beq.n	800ada6 <codal_vdmesg+0x46>
    while (*end)
 800ad80:	460b      	mov	r3, r1
 800ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad86:	460c      	mov	r4, r1
 800ad88:	2a00      	cmp	r2, #0
 800ad8a:	d1f6      	bne.n	800ad7a <codal_vdmesg+0x1a>
                break;
            }
            format = end;
        }
    }
    logwriten(format, end - format);
 800ad8c:	1b49      	subs	r1, r1, r5
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f7ff ff68 	bl	800ac64 <_ZL9logwritenPKci>
    logwriten(msg, strlen(msg));
 800ad94:	2102      	movs	r1, #2
 800ad96:	4827      	ldr	r0, [pc, #156]	; (800ae34 <codal_vdmesg+0xd4>)
 800ad98:	f7ff ff64 	bl	800ac64 <_ZL9logwritenPKci>
    logwrite("\r\n");
    target_enable_irq();
 800ad9c:	f7f5 feda 	bl	8000b54 <target_enable_irq>
}
 800ada0:	b003      	add	sp, #12
 800ada2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            logwriten(format, end - format - 1);
 800ada6:	43eb      	mvns	r3, r5
 800ada8:	4628      	mov	r0, r5
 800adaa:	4419      	add	r1, r3
 800adac:	f7ff ff5a 	bl	800ac64 <_ZL9logwritenPKci>
            switch (*end++)
 800adb0:	7863      	ldrb	r3, [r4, #1]
            uint32_t val = va_arg(ap, uint32_t);
 800adb2:	f856 9f04 	ldr.w	r9, [r6, #4]!
            switch (*end++)
 800adb6:	2b64      	cmp	r3, #100	; 0x64
            uint32_t val = va_arg(ap, uint32_t);
 800adb8:	f8cd 9004 	str.w	r9, [sp, #4]
            switch (*end++)
 800adbc:	f104 0502 	add.w	r5, r4, #2
 800adc0:	d027      	beq.n	800ae12 <codal_vdmesg+0xb2>
 800adc2:	d80a      	bhi.n	800adda <codal_vdmesg+0x7a>
 800adc4:	2b58      	cmp	r3, #88	; 0x58
 800adc6:	d019      	beq.n	800adfc <codal_vdmesg+0x9c>
 800adc8:	2b63      	cmp	r3, #99	; 0x63
 800adca:	d010      	beq.n	800adee <codal_vdmesg+0x8e>
 800adcc:	2b25      	cmp	r3, #37	; 0x25
 800adce:	d01b      	beq.n	800ae08 <codal_vdmesg+0xa8>
    logwriten(msg, strlen(msg));
 800add0:	2103      	movs	r1, #3
 800add2:	4640      	mov	r0, r8
 800add4:	f7ff ff46 	bl	800ac64 <_ZL9logwritenPKci>
 800add8:	e7cd      	b.n	800ad76 <codal_vdmesg+0x16>
            switch (*end++)
 800adda:	2b73      	cmp	r3, #115	; 0x73
 800addc:	d01f      	beq.n	800ae1e <codal_vdmesg+0xbe>
 800adde:	2b78      	cmp	r3, #120	; 0x78
 800ade0:	d10a      	bne.n	800adf8 <codal_vdmesg+0x98>
                logwritenum(val, false, true);
 800ade2:	4648      	mov	r0, r9
 800ade4:	2201      	movs	r2, #1
 800ade6:	2100      	movs	r1, #0
 800ade8:	f7ff ff7c 	bl	800ace4 <_ZL11logwritenummbb>
                break;
 800adec:	e7c3      	b.n	800ad76 <codal_vdmesg+0x16>
                logwriten((const char *)&val, 1);
 800adee:	2101      	movs	r1, #1
 800adf0:	a801      	add	r0, sp, #4
 800adf2:	f7ff ff37 	bl	800ac64 <_ZL9logwritenPKci>
                break;
 800adf6:	e7be      	b.n	800ad76 <codal_vdmesg+0x16>
            switch (*end++)
 800adf8:	2b70      	cmp	r3, #112	; 0x70
 800adfa:	d1e9      	bne.n	800add0 <codal_vdmesg+0x70>
                logwritenum(val, true, true);
 800adfc:	2201      	movs	r2, #1
 800adfe:	4648      	mov	r0, r9
 800ae00:	4611      	mov	r1, r2
 800ae02:	f7ff ff6f 	bl	800ace4 <_ZL11logwritenummbb>
                break;
 800ae06:	e7b6      	b.n	800ad76 <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800ae08:	2101      	movs	r1, #1
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f7ff ff2a 	bl	800ac64 <_ZL9logwritenPKci>
 800ae10:	e7b1      	b.n	800ad76 <codal_vdmesg+0x16>
                logwritenum(val, false, false);
 800ae12:	2200      	movs	r2, #0
 800ae14:	4648      	mov	r0, r9
 800ae16:	4611      	mov	r1, r2
 800ae18:	f7ff ff64 	bl	800ace4 <_ZL11logwritenummbb>
                break;
 800ae1c:	e7ab      	b.n	800ad76 <codal_vdmesg+0x16>
    logwriten(msg, strlen(msg));
 800ae1e:	4648      	mov	r0, r9
 800ae20:	f7f8 ffb2 	bl	8003d88 <strlen>
 800ae24:	4601      	mov	r1, r0
 800ae26:	4648      	mov	r0, r9
 800ae28:	f7ff ff1c 	bl	800ac64 <_ZL9logwritenPKci>
 800ae2c:	e7a3      	b.n	800ad76 <codal_vdmesg+0x16>
 800ae2e:	bf00      	nop
 800ae30:	0800d63c 	.word	0x0800d63c
 800ae34:	0800d644 	.word	0x0800d644
 800ae38:	0800d640 	.word	0x0800d640

0800ae3c <codal_dmesg>:
{
 800ae3c:	b40f      	push	{r0, r1, r2, r3}
 800ae3e:	b500      	push	{lr}
 800ae40:	b083      	sub	sp, #12
 800ae42:	ab04      	add	r3, sp, #16
 800ae44:	f853 0b04 	ldr.w	r0, [r3], #4
    codal_vdmesg(format, arg);
 800ae48:	4619      	mov	r1, r3
    va_start(arg, format);
 800ae4a:	9301      	str	r3, [sp, #4]
    codal_vdmesg(format, arg);
 800ae4c:	f7ff ff88 	bl	800ad60 <codal_vdmesg>
}
 800ae50:	b003      	add	sp, #12
 800ae52:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae56:	b004      	add	sp, #16
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 800ae5c:	4800      	ldr	r0, [pc, #0]	; (800ae60 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 800ae5e:	4770      	bx	lr
 800ae60:	fffffc16 	.word	0xfffffc16

0800ae64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>:

using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
 800ae64:	b1b2      	cbz	r2, 800ae94 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x30>
{
 800ae66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (queue && queue->prev) target_panic(30);
 800ae68:	69d3      	ldr	r3, [r2, #28]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	4614      	mov	r4, r2
 800ae70:	b113      	cbz	r3, 800ae78 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x14>
 800ae72:	201e      	movs	r0, #30
 800ae74:	f7f5 fe86 	bl	8000b84 <target_panic>
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	3201      	adds	r2, #1
    while (queue) {
        if (*dest)
 800ae7c:	682b      	ldr	r3, [r5, #0]
            *(*dest)++ = queue;
        (*sum)++;
 800ae7e:	4616      	mov	r6, r2
        if (*dest)
 800ae80:	b113      	cbz	r3, 800ae88 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x24>
            *(*dest)++ = queue;
 800ae82:	1d18      	adds	r0, r3, #4
 800ae84:	6028      	str	r0, [r5, #0]
 800ae86:	601c      	str	r4, [r3, #0]
        queue = queue->next;
 800ae88:	69a4      	ldr	r4, [r4, #24]
 800ae8a:	3201      	adds	r2, #1
    while (queue) {
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d1f5      	bne.n	800ae7c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x18>
 800ae90:	603e      	str	r6, [r7, #0]
    }
}
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop

0800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>:
/**
  * Utility function to the given fiber from whichever queue it is currently stored on.
  *
  * @param f the fiber to remove.
  */
void codal::dequeue_fiber(Fiber *f)
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
    // If this fiber is already dequeued, nothing the there's nothing to do.
    if (f->queue == NULL)
        return;

    // Remove this fiber fromm whichever queue it is on.
    target_disable_irq();
 800ae9c:	f7f5 fe5c 	bl	8000b58 <target_disable_irq>

    if (f->prev != NULL)
        f->prev->next = f->next;
 800aea0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    if (f->prev != NULL)
 800aea4:	b163      	cbz	r3, 800aec0 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x28>
        f->prev->next = f->next;
 800aea6:	619a      	str	r2, [r3, #24]
    else
        *(f->queue) = f->next;

    if(f->next)
 800aea8:	69a3      	ldr	r3, [r4, #24]
 800aeaa:	b10b      	cbz	r3, 800aeb0 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x18>
        f->next->prev = f->prev;
 800aeac:	69e2      	ldr	r2, [r4, #28]
 800aeae:	61da      	str	r2, [r3, #28]

    f->next = NULL;
 800aeb0:	2300      	movs	r3, #0
    f->prev = NULL;
 800aeb2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    f->queue = NULL;
 800aeb6:	6163      	str	r3, [r4, #20]

    target_enable_irq();
}
 800aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_enable_irq();
 800aebc:	f7f5 be4a 	b.w	8000b54 <target_enable_irq>
        *(f->queue) = f->next;
 800aec0:	6963      	ldr	r3, [r4, #20]
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e7f0      	b.n	800aea8 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0+0x10>
 800aec6:	bf00      	nop

0800aec8 <_ZN5codal11list_fibersEPPNS_5FiberE>:
    int sum = 0;
 800aec8:	2300      	movs	r3, #0
{
 800aeca:	b510      	push	{r4, lr}
 800aecc:	b084      	sub	sp, #16
    int sum = 0;
 800aece:	ac04      	add	r4, sp, #16
 800aed0:	f844 3d04 	str.w	r3, [r4, #-4]!
{
 800aed4:	9001      	str	r0, [sp, #4]
    target_disable_irq();
 800aed6:	f7f5 fe3f 	bl	8000b58 <target_disable_irq>
    get_fibers_from(&dest, &sum, runQueue);
 800aeda:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <_ZN5codal11list_fibersEPPNS_5FiberE+0x4c>)
 800aedc:	4621      	mov	r1, r4
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	a801      	add	r0, sp, #4
 800aee2:	f7ff ffbf 	bl	800ae64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, sleepQueue);
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <_ZN5codal11list_fibersEPPNS_5FiberE+0x50>)
 800aee8:	4621      	mov	r1, r4
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	a801      	add	r0, sp, #4
 800aeee:	f7ff ffb9 	bl	800ae64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, waitQueue);
 800aef2:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <_ZN5codal11list_fibersEPPNS_5FiberE+0x54>)
 800aef4:	4621      	mov	r1, r4
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	a801      	add	r0, sp, #4
 800aefa:	f7ff ffb3 	bl	800ae64 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    target_enable_irq();
 800aefe:	f7f5 fe29 	bl	8000b54 <target_enable_irq>
    if (dest)
 800af02:	9b01      	ldr	r3, [sp, #4]
 800af04:	b113      	cbz	r3, 800af0c <_ZN5codal11list_fibersEPPNS_5FiberE+0x44>
        *dest++ = idleFiber;
 800af06:	4a06      	ldr	r2, [pc, #24]	; (800af20 <_ZN5codal11list_fibersEPPNS_5FiberE+0x58>)
 800af08:	6812      	ldr	r2, [r2, #0]
 800af0a:	601a      	str	r2, [r3, #0]
    sum++;
 800af0c:	9803      	ldr	r0, [sp, #12]
}
 800af0e:	3001      	adds	r0, #1
 800af10:	b004      	add	sp, #16
 800af12:	bd10      	pop	{r4, pc}
 800af14:	20001630 	.word	0x20001630
 800af18:	20001628 	.word	0x20001628
 800af1c:	2000163c 	.word	0x2000163c
 800af20:	20001638 	.word	0x20001638

0800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	460d      	mov	r5, r1
 800af28:	4604      	mov	r4, r0
    target_disable_irq();
 800af2a:	f7f5 fe15 	bl	8000b58 <target_disable_irq>
    if (*queue == NULL)
 800af2e:	682a      	ldr	r2, [r5, #0]
    f->queue = queue;
 800af30:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 800af32:	b90a      	cbnz	r2, 800af38 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x14>
 800af34:	e00a      	b.n	800af4c <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
 800af36:	461a      	mov	r2, r3
        while (last->next != NULL)
 800af38:	6993      	ldr	r3, [r2, #24]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1fb      	bne.n	800af36 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x12>
        last->next = f;
 800af3e:	6194      	str	r4, [r2, #24]
        f->next = NULL;
 800af40:	e9c4 3206 	strd	r3, r2, [r4, #24]
}
 800af44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800af48:	f7f5 be04 	b.w	8000b54 <target_enable_irq>
        f->prev = NULL;
 800af4c:	e9c4 2206 	strd	r2, r2, [r4, #24]
        *queue = f;
 800af50:	602c      	str	r4, [r5, #0]
}
 800af52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800af56:	f7f5 bdfd 	b.w	8000b54 <target_enable_irq>
 800af5a:	bf00      	nop

0800af5c <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 800af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    Fiber *f = sleepQueue;
 800af5e:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
{
 800af60:	b083      	sub	sp, #12
    Fiber *f = sleepQueue;
 800af62:	681c      	ldr	r4, [r3, #0]
{
 800af64:	aa02      	add	r2, sp, #8
 800af66:	e902 0003 	stmdb	r2, {r0, r1}
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 800af6a:	b18c      	cbz	r4, 800af90 <_ZN5codal14scheduler_tickENS_5EventE+0x34>
 800af6c:	9e01      	ldr	r6, [sp, #4]

        if (evt.timestamp >= f->context)
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800af6e:	4f0a      	ldr	r7, [pc, #40]	; (800af98 <_ZN5codal14scheduler_tickENS_5EventE+0x3c>)
        if (evt.timestamp >= f->context)
 800af70:	68e3      	ldr	r3, [r4, #12]
        t = f->next;
 800af72:	69a5      	ldr	r5, [r4, #24]
        if (evt.timestamp >= f->context)
 800af74:	42b3      	cmp	r3, r6
 800af76:	d808      	bhi.n	800af8a <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    if (f->queue == NULL)
 800af78:	6963      	ldr	r3, [r4, #20]
 800af7a:	b113      	cbz	r3, 800af82 <_ZN5codal14scheduler_tickENS_5EventE+0x26>
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff ff8b 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
            queue_fiber(f,&runQueue);
 800af82:	4620      	mov	r0, r4
 800af84:	4639      	mov	r1, r7
 800af86:	f7ff ffcd 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    while (f != NULL)
 800af8a:	462c      	mov	r4, r5
 800af8c:	2d00      	cmp	r5, #0
 800af8e:	d1ef      	bne.n	800af70 <_ZN5codal14scheduler_tickENS_5EventE+0x14>
        }

        f = t;
    }
}
 800af90:	b003      	add	sp, #12
 800af92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af94:	20001628 	.word	0x20001628
 800af98:	20001630 	.word	0x20001630

0800af9c <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 800afa0:	4f33      	ldr	r7, [pc, #204]	; (800b070 <_ZN5codal15scheduler_eventENS_5EventE+0xd4>)
{
 800afa2:	b08f      	sub	sp, #60	; 0x3c
    if (messageBus == NULL)
 800afa4:	683a      	ldr	r2, [r7, #0]
{
 800afa6:	ab04      	add	r3, sp, #16
 800afa8:	e883 0003 	stmia.w	r3, {r0, r1}
    if (messageBus == NULL)
 800afac:	2a00      	cmp	r2, #0
 800afae:	d032      	beq.n	800b016 <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
    Fiber *f = waitQueue;
 800afb0:	4b30      	ldr	r3, [pc, #192]	; (800b074 <_ZN5codal15scheduler_eventENS_5EventE+0xd8>)
 800afb2:	f8bd a010 	ldrh.w	sl, [sp, #16]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	f8bd 5012 	ldrh.w	r5, [sp, #18]
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
 800afbc:	b1b2      	cbz	r2, 800afec <_ZN5codal15scheduler_eventENS_5EventE+0x50>
    int notifyOneComplete = 0;
 800afbe:	f04f 0900 	mov.w	r9, #0
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800afc2:	f240 34fe 	movw	r4, #1022	; 0x3fe
 800afc6:	f240 38ff 	movw	r8, #1023	; 0x3ff
        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800afca:	4e2b      	ldr	r6, [pc, #172]	; (800b078 <_ZN5codal15scheduler_eventENS_5EventE+0xdc>)
        uint16_t id = f->context & 0xFFFF;
 800afcc:	68d3      	ldr	r3, [r2, #12]
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800afce:	45a2      	cmp	sl, r4
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800afd0:	ea4f 4113 	mov.w	r1, r3, lsr #16
        t = f->next;
 800afd4:	f8d2 b018 	ldr.w	fp, [r2, #24]
        uint16_t id = f->context & 0xFFFF;
 800afd8:	b29b      	uxth	r3, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 800afda:	b288      	uxth	r0, r1
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800afdc:	d01e      	beq.n	800b01c <_ZN5codal15scheduler_eventENS_5EventE+0x80>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d032      	beq.n	800b048 <_ZN5codal15scheduler_eventENS_5EventE+0xac>
 800afe2:	459a      	cmp	sl, r3
 800afe4:	d030      	beq.n	800b048 <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    while (f != NULL)
 800afe6:	465a      	mov	r2, fp
 800afe8:	2a00      	cmp	r2, #0
 800afea:	d1ef      	bne.n	800afcc <_ZN5codal15scheduler_eventENS_5EventE+0x30>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 800afec:	f2aa 33fe 	subw	r3, sl, #1022	; 0x3fe
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d910      	bls.n	800b016 <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 800aff4:	2310      	movs	r3, #16
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 800aff6:	683c      	ldr	r4, [r7, #0]
 800aff8:	462a      	mov	r2, r5
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4651      	mov	r1, sl
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <_ZN5codal15scheduler_eventENS_5EventE+0xe0>)
 800b000:	a806      	add	r0, sp, #24
 800b002:	f000 fcb9 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	4a1d      	ldr	r2, [pc, #116]	; (800b080 <_ZN5codal15scheduler_eventENS_5EventE+0xe4>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d12a      	bne.n	800b066 <_ZN5codal15scheduler_eventENS_5EventE+0xca>
            Listener listener(id, value, handler);
 800b010:	a806      	add	r0, sp, #24
 800b012:	f000 fcc9 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
}
 800b016:	b00f      	add	sp, #60	; 0x3c
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800b01c:	4543      	cmp	r3, r8
 800b01e:	d1de      	bne.n	800afde <_ZN5codal15scheduler_eventENS_5EventE+0x42>
 800b020:	b109      	cbz	r1, 800b026 <_ZN5codal15scheduler_eventENS_5EventE+0x8a>
 800b022:	42a8      	cmp	r0, r5
 800b024:	d1df      	bne.n	800afe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            if (!notifyOneComplete)
 800b026:	f1b9 0f00 	cmp.w	r9, #0
 800b02a:	d1dc      	bne.n	800afe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800b02c:	6953      	ldr	r3, [r2, #20]
 800b02e:	b123      	cbz	r3, 800b03a <_ZN5codal15scheduler_eventENS_5EventE+0x9e>
 800b030:	4610      	mov	r0, r2
 800b032:	9203      	str	r2, [sp, #12]
 800b034:	f7ff ff30 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800b038:	9a03      	ldr	r2, [sp, #12]
                queue_fiber(f,&runQueue);
 800b03a:	4610      	mov	r0, r2
 800b03c:	4631      	mov	r1, r6
 800b03e:	f7ff ff71 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800b042:	f04f 0901 	mov.w	r9, #1
 800b046:	e7ce      	b.n	800afe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800b048:	b109      	cbz	r1, 800b04e <_ZN5codal15scheduler_eventENS_5EventE+0xb2>
 800b04a:	42a8      	cmp	r0, r5
 800b04c:	d1cb      	bne.n	800afe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
    if (f->queue == NULL)
 800b04e:	6953      	ldr	r3, [r2, #20]
 800b050:	b123      	cbz	r3, 800b05c <_ZN5codal15scheduler_eventENS_5EventE+0xc0>
 800b052:	4610      	mov	r0, r2
 800b054:	9203      	str	r2, [sp, #12]
 800b056:	f7ff ff1f 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800b05a:	9a03      	ldr	r2, [sp, #12]
            queue_fiber(f,&runQueue);
 800b05c:	4610      	mov	r0, r2
 800b05e:	4631      	mov	r1, r6
 800b060:	f7ff ff60 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 800b064:	e7bf      	b.n	800afe6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
            remove(&listener);
 800b066:	4620      	mov	r0, r4
 800b068:	a906      	add	r1, sp, #24
 800b06a:	4798      	blx	r3
 800b06c:	e7d0      	b.n	800b010 <_ZN5codal15scheduler_eventENS_5EventE+0x74>
 800b06e:	bf00      	nop
 800b070:	20001624 	.word	0x20001624
 800b074:	2000163c 	.word	0x2000163c
 800b078:	20001630 	.word	0x20001630
 800b07c:	0800af9d 	.word	0x0800af9d
 800b080:	0800ae5d 	.word	0x0800ae5d

0800b084 <_Z15getFiberContextv>:
{
 800b084:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 800b086:	f7f5 fd67 	bl	8000b58 <target_disable_irq>
    if (fiberPool != NULL)
 800b08a:	4b12      	ldr	r3, [pc, #72]	; (800b0d4 <_Z15getFiberContextv+0x50>)
 800b08c:	681c      	ldr	r4, [r3, #0]
 800b08e:	b194      	cbz	r4, 800b0b6 <_Z15getFiberContextv+0x32>
    if (f->queue == NULL)
 800b090:	6963      	ldr	r3, [r4, #20]
 800b092:	b113      	cbz	r3, 800b09a <_Z15getFiberContextv+0x16>
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff feff 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    target_enable_irq();
 800b09a:	f7f5 fd5b 	bl	8000b54 <target_enable_irq>
    f->flags = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 800b0a2:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 800b0a4:	6825      	ldr	r5, [r4, #0]
 800b0a6:	f7f5 fd7d 	bl	8000ba4 <fiber_initial_stack_base>
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7f5 fd85 	bl	8000bbc <tcb_configure_stack_base>
}
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800b0b6:	2024      	movs	r0, #36	; 0x24
 800b0b8:	f7f9 f892 	bl	80041e0 <_Znwj>
 800b0bc:	2224      	movs	r2, #36	; 0x24
 800b0be:	2100      	movs	r1, #0
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	f7f8 fe91 	bl	8003de8 <memset>
        f->tcb = tcb_allocate();
 800b0c6:	f7f5 fd71 	bl	8000bac <tcb_allocate>
        f->stack_bottom = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e9c4 0300 	strd	r0, r3, [r4]
        f->stack_top = 0;
 800b0d0:	60a3      	str	r3, [r4, #8]
 800b0d2:	e7e2      	b.n	800b09a <_Z15getFiberContextv+0x16>
 800b0d4:	20001634 	.word	0x20001634

0800b0d8 <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
    Fiber *f = currentFiber;
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <_ZL10handle_fobv+0x2c>)
{
 800b0da:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 800b0dc:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	d401      	bmi.n	800b0e8 <_ZL10handle_fobv+0x10>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 800b0e8:	f7ff ffcc 	bl	800b084 <_Z15getFiberContextv>
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <_ZL10handle_fobv+0x30>)
 800b0ee:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d0f7      	beq.n	800b0e4 <_ZL10handle_fobv+0xc>
            f->user_data = NULL;
 800b0f4:	2300      	movs	r3, #0
            forkedFiber->user_data = f->user_data;
 800b0f6:	6a22      	ldr	r2, [r4, #32]
 800b0f8:	6202      	str	r2, [r0, #32]
            f->user_data = NULL;
 800b0fa:	6223      	str	r3, [r4, #32]
 800b0fc:	4604      	mov	r4, r0
}
 800b0fe:	4620      	mov	r0, r4
 800b100:	bd10      	pop	{r4, pc}
 800b102:	bf00      	nop
 800b104:	20001620 	.word	0x20001620
 800b108:	2000162c 	.word	0x2000162c

0800b10c <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 800b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b110:	4d45      	ldr	r5, [pc, #276]	; (800b228 <_ZN5codal14scheduler_initERNS_10EventModelE+0x11c>)
{
 800b112:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b114:	782a      	ldrb	r2, [r5, #0]
 800b116:	f012 0401 	ands.w	r4, r2, #1
 800b11a:	d002      	beq.n	800b122 <_ZN5codal14scheduler_initERNS_10EventModelE+0x16>
}
 800b11c:	b002      	add	sp, #8
 800b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    messageBus = &_messageBus;
 800b122:	4e42      	ldr	r6, [pc, #264]	; (800b22c <_ZN5codal14scheduler_initERNS_10EventModelE+0x120>)
    idleFiber = getFiberContext();
 800b124:	4f42      	ldr	r7, [pc, #264]	; (800b230 <_ZN5codal14scheduler_initERNS_10EventModelE+0x124>)
    messageBus = &_messageBus;
 800b126:	6030      	str	r0, [r6, #0]
    currentFiber = getFiberContext();
 800b128:	f7ff ffac 	bl	800b084 <_Z15getFiberContextv>
 800b12c:	4b41      	ldr	r3, [pc, #260]	; (800b234 <_ZN5codal14scheduler_initERNS_10EventModelE+0x128>)
    queue_fiber(currentFiber, &runQueue);
 800b12e:	4942      	ldr	r1, [pc, #264]	; (800b238 <_ZN5codal14scheduler_initERNS_10EventModelE+0x12c>)
    currentFiber = getFiberContext();
 800b130:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 800b132:	f7ff fef7 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 800b136:	f7ff ffa5 	bl	800b084 <_Z15getFiberContextv>
 800b13a:	6038      	str	r0, [r7, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800b13c:	f8d0 8000 	ldr.w	r8, [r0]
 800b140:	f7f5 fd30 	bl	8000ba4 <fiber_initial_stack_base>
 800b144:	1f01      	subs	r1, r0, #4
 800b146:	4640      	mov	r0, r8
 800b148:	f7f5 fd36 	bl	8000bb8 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	493b      	ldr	r1, [pc, #236]	; (800b23c <_ZN5codal14scheduler_initERNS_10EventModelE+0x130>)
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	f7f5 fd2f 	bl	8000bb4 <tcb_configure_lr>
    if (messageBus)
 800b156:	6837      	ldr	r7, [r6, #0]
 800b158:	2f00      	cmp	r7, #0
 800b15a:	d04b      	beq.n	800b1f4 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
            Listener *newListener = new Listener(id, value, handler, flags);
 800b15c:	2020      	movs	r0, #32
 800b15e:	f7f9 f83f 	bl	80041e0 <_Znwj>
 800b162:	23c0      	movs	r3, #192	; 0xc0
 800b164:	4622      	mov	r2, r4
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b16c:	4b34      	ldr	r3, [pc, #208]	; (800b240 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800b16e:	4680      	mov	r8, r0
 800b170:	f000 fc02 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	4c33      	ldr	r4, [pc, #204]	; (800b244 <_ZN5codal14scheduler_initERNS_10EventModelE+0x138>)
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	d141      	bne.n	800b202 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf6>
            delete newListener;
 800b17e:	4640      	mov	r0, r8
 800b180:	f000 fc12 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800b184:	4640      	mov	r0, r8
 800b186:	f7f9 f82d 	bl	80041e4 <_ZdlPv>
            Listener *newListener = new Listener(id, value, handler, flags);
 800b18a:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800b18c:	f8d6 8000 	ldr.w	r8, [r6]
 800b190:	f7f9 f826 	bl	80041e0 <_Znwj>
 800b194:	22c0      	movs	r2, #192	; 0xc0
 800b196:	4b2a      	ldr	r3, [pc, #168]	; (800b240 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 800b198:	9200      	str	r2, [sp, #0]
 800b19a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	f000 fbe9 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800b1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	d134      	bne.n	800b21a <_ZN5codal14scheduler_initERNS_10EventModelE+0x10e>
            delete newListener;
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f000 fbf9 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f7f9 f814 	bl	80041e4 <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 800b1bc:	2201      	movs	r2, #1
 800b1be:	210f      	movs	r1, #15
 800b1c0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800b1c4:	f000 fd42 	bl	800bc4c <_ZN5codal27system_timer_event_every_usEmtt>
            Listener *newListener = new Listener(id, value, handler, flags);
 800b1c8:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800b1ca:	6837      	ldr	r7, [r6, #0]
 800b1cc:	f7f9 f808 	bl	80041e0 <_Znwj>
 800b1d0:	22c0      	movs	r2, #192	; 0xc0
 800b1d2:	4b1d      	ldr	r3, [pc, #116]	; (800b248 <_ZN5codal14scheduler_initERNS_10EventModelE+0x13c>)
 800b1d4:	9200      	str	r2, [sp, #0]
 800b1d6:	210f      	movs	r1, #15
 800b1d8:	2201      	movs	r2, #1
 800b1da:	4606      	mov	r6, r0
 800b1dc:	f000 fbcc 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d112      	bne.n	800b20e <_ZN5codal14scheduler_initERNS_10EventModelE+0x102>
            delete newListener;
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 fbdd 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7f8 fff8 	bl	80041e4 <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 800b1f4:	782b      	ldrb	r3, [r5, #0]
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	702b      	strb	r3, [r5, #0]
}
 800b1fc:	b002      	add	sp, #8
 800b1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(add(newListener) == DEVICE_OK)
 800b202:	4638      	mov	r0, r7
 800b204:	4641      	mov	r1, r8
 800b206:	4798      	blx	r3
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0be      	beq.n	800b18a <_ZN5codal14scheduler_initERNS_10EventModelE+0x7e>
 800b20c:	e7b7      	b.n	800b17e <_ZN5codal14scheduler_initERNS_10EventModelE+0x72>
 800b20e:	4638      	mov	r0, r7
 800b210:	4631      	mov	r1, r6
 800b212:	4798      	blx	r3
 800b214:	2800      	cmp	r0, #0
 800b216:	d0ed      	beq.n	800b1f4 <_ZN5codal14scheduler_initERNS_10EventModelE+0xe8>
 800b218:	e7e6      	b.n	800b1e8 <_ZN5codal14scheduler_initERNS_10EventModelE+0xdc>
 800b21a:	4640      	mov	r0, r8
 800b21c:	4639      	mov	r1, r7
 800b21e:	4798      	blx	r3
 800b220:	2800      	cmp	r0, #0
 800b222:	d0cb      	beq.n	800b1bc <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 800b224:	e7c4      	b.n	800b1b0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa4>
 800b226:	bf00      	nop
 800b228:	20001670 	.word	0x20001670
 800b22c:	20001624 	.word	0x20001624
 800b230:	20001638 	.word	0x20001638
 800b234:	20001620 	.word	0x20001620
 800b238:	20001630 	.word	0x20001630
 800b23c:	0800b795 	.word	0x0800b795
 800b240:	0800af9d 	.word	0x0800af9d
 800b244:	0800aab1 	.word	0x0800aab1
 800b248:	0800af5d 	.word	0x0800af5d

0800b24c <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <_ZN5codal23fiber_scheduler_runningEv+0xc>)
 800b24e:	7818      	ldrb	r0, [r3, #0]
}
 800b250:	f000 0001 	and.w	r0, r0, #1
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20001670 	.word	0x20001670

0800b25c <_ZN5codal19fiber_wake_on_eventEtt>:
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 800b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (messageBus == NULL || !fiber_scheduler_running())
 800b25e:	4f1f      	ldr	r7, [pc, #124]	; (800b2dc <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
{
 800b260:	b083      	sub	sp, #12
    if (messageBus == NULL || !fiber_scheduler_running())
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d037      	beq.n	800b2d8 <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b268:	4b1d      	ldr	r3, [pc, #116]	; (800b2e0 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	07db      	lsls	r3, r3, #31
 800b26e:	d533      	bpl.n	800b2d8 <_ZN5codal19fiber_wake_on_eventEtt+0x7c>
 800b270:	460e      	mov	r6, r1
 800b272:	4604      	mov	r4, r0
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 800b274:	f7ff ff30 	bl	800b0d8 <_ZL10handle_fobv>
    if (f->queue == NULL)
 800b278:	6943      	ldr	r3, [r0, #20]

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 800b27a:	ea44 4206 	orr.w	r2, r4, r6, lsl #16
    Fiber *f = handle_fob();
 800b27e:	4605      	mov	r5, r0
    f->context = (uint32_t)value << 16 | id;
 800b280:	60c2      	str	r2, [r0, #12]
    if (f->queue == NULL)
 800b282:	b10b      	cbz	r3, 800b288 <_ZN5codal19fiber_wake_on_eventEtt+0x2c>
 800b284:	f7ff fe08 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>

    // Remove ourselves from the run queue
    dequeue_fiber(f);

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 800b288:	4628      	mov	r0, r5
 800b28a:	4916      	ldr	r1, [pc, #88]	; (800b2e4 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 800b28c:	f7ff fe4a 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 800b290:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 800b294:	2b01      	cmp	r3, #1
 800b296:	d916      	bls.n	800b2c6 <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
            Listener *newListener = new Listener(id, value, handler, flags);
 800b298:	2020      	movs	r0, #32
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800b29a:	683f      	ldr	r7, [r7, #0]
 800b29c:	f7f8 ffa0 	bl	80041e0 <_Znwj>
 800b2a0:	23c0      	movs	r3, #192	; 0xc0
 800b2a2:	4632      	mov	r2, r6
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	f000 fb64 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	4a0e      	ldr	r2, [pc, #56]	; (800b2ec <_ZN5codal19fiber_wake_on_eventEtt+0x90>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d108      	bne.n	800b2cc <_ZN5codal19fiber_wake_on_eventEtt+0x70>
            delete newListener;
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 fb74 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f7f8 ff8f 	bl	80041e4 <_ZdlPv>
 800b2c6:	2000      	movs	r0, #0

    return DEVICE_OK;
}
 800b2c8:	b003      	add	sp, #12
 800b2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(add(newListener) == DEVICE_OK)
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4798      	blx	r3
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0f7      	beq.n	800b2c6 <_ZN5codal19fiber_wake_on_eventEtt+0x6a>
 800b2d6:	e7f0      	b.n	800b2ba <_ZN5codal19fiber_wake_on_eventEtt+0x5e>
        return DEVICE_NOT_SUPPORTED;
 800b2d8:	4805      	ldr	r0, [pc, #20]	; (800b2f0 <_ZN5codal19fiber_wake_on_eventEtt+0x94>)
 800b2da:	e7f5      	b.n	800b2c8 <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 800b2dc:	20001624 	.word	0x20001624
 800b2e0:	20001670 	.word	0x20001670
 800b2e4:	2000163c 	.word	0x2000163c
 800b2e8:	0800af9d 	.word	0x0800af9d
 800b2ec:	0800aab1 	.word	0x0800aab1
 800b2f0:	fffffc16 	.word	0xfffffc16

0800b2f4 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 800b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 800b2f8:	b328      	cbz	r0, 800b346 <_Z14__create_fibermmmi+0x52>
 800b2fa:	b321      	cbz	r1, 800b346 <_Z14__create_fibermmmi+0x52>
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	4698      	mov	r8, r3
 800b300:	4617      	mov	r7, r2
 800b302:	460e      	mov	r6, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 800b304:	f7ff febe 	bl	800b084 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 800b308:	4604      	mov	r4, r0
 800b30a:	b1e0      	cbz	r0, 800b346 <_Z14__create_fibermmmi+0x52>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	4629      	mov	r1, r5
 800b312:	6800      	ldr	r0, [r0, #0]
 800b314:	f7f5 fc5a 	bl	8000bcc <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 800b318:	6825      	ldr	r5, [r4, #0]
 800b31a:	f7f5 fc43 	bl	8000ba4 <fiber_initial_stack_base>
 800b31e:	1f01      	subs	r1, r0, #4
 800b320:	4628      	mov	r0, r5
 800b322:	f7f5 fc49 	bl	8000bb8 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 800b326:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <_Z14__create_fibermmmi+0x5c>)
 800b328:	490a      	ldr	r1, [pc, #40]	; (800b354 <_Z14__create_fibermmmi+0x60>)
 800b32a:	6820      	ldr	r0, [r4, #0]
 800b32c:	f1b8 0f00 	cmp.w	r8, #0
 800b330:	bf18      	it	ne
 800b332:	4619      	movne	r1, r3
 800b334:	f7f5 fc3e 	bl	8000bb4 <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 800b338:	4620      	mov	r0, r4
 800b33a:	4907      	ldr	r1, [pc, #28]	; (800b358 <_Z14__create_fibermmmi+0x64>)
 800b33c:	f7ff fdf2 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 800b340:	4620      	mov	r0, r4
 800b342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NULL;
 800b346:	2400      	movs	r4, #0
}
 800b348:	4620      	mov	r0, r4
 800b34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34e:	bf00      	nop
 800b350:	0800b76d 	.word	0x0800b76d
 800b354:	0800b699 	.word	0x0800b699
 800b358:	20001630 	.word	0x20001630

0800b35c <_ZN5codal12create_fiberEPFvvES1_>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b35c:	4b05      	ldr	r3, [pc, #20]	; (800b374 <_ZN5codal12create_fiberEPFvvES1_+0x18>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f013 0301 	ands.w	r3, r3, #1
 800b364:	d003      	beq.n	800b36e <_ZN5codal12create_fiberEPFvvES1_+0x12>
Fiber *codal::create_fiber(void (*entry_fn)(void), void (*completion_fn)(void))
{
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 800b366:	2300      	movs	r3, #0
 800b368:	461a      	mov	r2, r3
 800b36a:	f7ff bfc3 	b.w	800b2f4 <_Z14__create_fibermmmi>
}
 800b36e:	4618      	mov	r0, r3
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20001670 	.word	0x20001670

0800b378 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b378:	4b07      	ldr	r3, [pc, #28]	; (800b398 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x20>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	f013 0301 	ands.w	r3, r3, #1
 800b380:	d007      	beq.n	800b392 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>
  *                      Defaults to release_fiber.
  *
  * @return The new Fiber, or NULL if the operation could not be completed.
  */
Fiber *codal::create_fiber(void (*entry_fn)(void *), void *param, void (*completion_fn)(void *))
{
 800b382:	b410      	push	{r4}
 800b384:	4614      	mov	r4, r2
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800b386:	2301      	movs	r3, #1
 800b388:	460a      	mov	r2, r1
 800b38a:	4621      	mov	r1, r4
}
 800b38c:	bc10      	pop	{r4}
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800b38e:	f7ff bfb1 	b.w	800b2f4 <_Z14__create_fibermmmi>
}
 800b392:	4618      	mov	r0, r3
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	20001670 	.word	0x20001670

0800b39c <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 800b39e:	6818      	ldr	r0, [r3, #0]
}
 800b3a0:	fab0 f080 	clz	r0, r0
 800b3a4:	0940      	lsrs	r0, r0, #5
 800b3a6:	4770      	bx	lr
 800b3a8:	20001630 	.word	0x20001630

0800b3ac <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 800b3ac:	b530      	push	{r4, r5, lr}
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800b3ae:	4d0f      	ldr	r5, [pc, #60]	; (800b3ec <_ZN5codal4idleEv+0x40>)
{
 800b3b0:	b083      	sub	sp, #12
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 800b3b2:	782b      	ldrb	r3, [r5, #0]
 800b3b4:	079a      	lsls	r2, r3, #30
 800b3b6:	d504      	bpl.n	800b3c2 <_ZN5codal4idleEv+0x16>
    return (runQueue == NULL);
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <_ZN5codal4idleEv+0x44>)
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	b173      	cbz	r3, 800b3dc <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 800b3be:	b003      	add	sp, #12
 800b3c0:	bd30      	pop	{r4, r5, pc}
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800b3c2:	f043 0402 	orr.w	r4, r3, #2
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	210f      	movs	r1, #15
 800b3cc:	4668      	mov	r0, sp
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 800b3ce:	702c      	strb	r4, [r5, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 800b3d0:	f000 ff44 	bl	800c25c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return (runQueue == NULL);
 800b3d4:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <_ZN5codal4idleEv+0x44>)
    if(scheduler_runqueue_empty())
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f0      	bne.n	800b3be <_ZN5codal4idleEv+0x12>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 800b3dc:	782b      	ldrb	r3, [r5, #0]
 800b3de:	f023 0302 	bic.w	r3, r3, #2
 800b3e2:	702b      	strb	r3, [r5, #0]
        target_wait_for_event();
 800b3e4:	f7f5 fb8a 	bl	8000afc <target_wait_for_event>
}
 800b3e8:	b003      	add	sp, #12
 800b3ea:	bd30      	pop	{r4, r5, pc}
 800b3ec:	20001670 	.word	0x20001670
 800b3f0:	20001630 	.word	0x20001630

0800b3f4 <_ZN5codal8scheduleEv.part.3>:
void codal::schedule()
 800b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Fiber *oldFiber = currentFiber;
 800b3f8:	4d5a      	ldr	r5, [pc, #360]	; (800b564 <_ZN5codal8scheduleEv.part.3+0x170>)
 800b3fa:	682c      	ldr	r4, [r5, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	07d9      	lsls	r1, r3, #31
 800b400:	d447      	bmi.n	800b492 <_ZN5codal8scheduleEv.part.3+0x9e>
    if (runQueue == NULL)
 800b402:	4e59      	ldr	r6, [pc, #356]	; (800b568 <_ZN5codal8scheduleEv.part.3+0x174>)
 800b404:	4f59      	ldr	r7, [pc, #356]	; (800b56c <_ZN5codal8scheduleEv.part.3+0x178>)
 800b406:	6832      	ldr	r2, [r6, #0]
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d031      	beq.n	800b472 <_ZN5codal8scheduleEv.part.3+0x7e>
    else if (currentFiber->queue == &runQueue)
 800b40e:	6960      	ldr	r0, [r4, #20]
 800b410:	42b0      	cmp	r0, r6
 800b412:	f000 8098 	beq.w	800b546 <_ZN5codal8scheduleEv.part.3+0x152>
        currentFiber = runQueue;
 800b416:	602a      	str	r2, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800b418:	428a      	cmp	r2, r1
 800b41a:	d02b      	beq.n	800b474 <_ZN5codal8scheduleEv.part.3+0x80>
    if (currentFiber != oldFiber)
 800b41c:	4294      	cmp	r4, r2
 800b41e:	d06f      	beq.n	800b500 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 800b420:	428c      	cmp	r4, r1
 800b422:	d06f      	beq.n	800b504 <_ZN5codal8scheduleEv.part.3+0x110>
 800b424:	4b52      	ldr	r3, [pc, #328]	; (800b570 <_ZN5codal8scheduleEv.part.3+0x17c>)
 800b426:	6962      	ldr	r2, [r4, #20]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d06b      	beq.n	800b504 <_ZN5codal8scheduleEv.part.3+0x110>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b42c:	6820      	ldr	r0, [r4, #0]
 800b42e:	f7f5 fbc7 	bl	8000bc0 <tcb_get_stack_base>
 800b432:	4606      	mov	r6, r0
 800b434:	f7f5 fbc6 	bl	8000bc4 <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800b438:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b43c:	1a30      	subs	r0, r6, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800b43e:	1aca      	subs	r2, r1, r3
    if (bufferSize < stackDepth)
 800b440:	4290      	cmp	r0, r2
 800b442:	d968      	bls.n	800b516 <_ZN5codal8scheduleEv.part.3+0x122>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b444:	f100 0120 	add.w	r1, r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800b448:	682f      	ldr	r7, [r5, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b44a:	f021 061f 	bic.w	r6, r1, #31
        currentFiber = f;
 800b44e:	602c      	str	r4, [r5, #0]
        if (f->stack_bottom != 0)
 800b450:	2b00      	cmp	r3, #0
 800b452:	f040 8082 	bne.w	800b55a <_ZN5codal8scheduleEv.part.3+0x166>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b456:	4630      	mov	r0, r6
 800b458:	f7fe f9f2 	bl	8009840 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800b45c:	1831      	adds	r1, r6, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b45e:	e9c4 0101 	strd	r0, r1, [r4, #4]
        currentFiber = prevCurrFiber;
 800b462:	602f      	str	r7, [r5, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	683a      	ldr	r2, [r7, #0]
}
 800b46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800b46e:	f7f5 bc01 	b.w	8000c74 <swap_context>
        currentFiber = idleFiber;
 800b472:	6029      	str	r1, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800b474:	071b      	lsls	r3, r3, #28
 800b476:	d555      	bpl.n	800b524 <_ZN5codal8scheduleEv.part.3+0x130>
        currentFiber = oldFiber;
 800b478:	602c      	str	r4, [r5, #0]
            idle();
 800b47a:	f7ff ff97 	bl	800b3ac <_ZN5codal4idleEv>
        while (runQueue == NULL);
 800b47e:	6833      	ldr	r3, [r6, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d0fa      	beq.n	800b47a <_ZN5codal8scheduleEv.part.3+0x86>
    if (currentFiber != oldFiber)
 800b484:	429c      	cmp	r4, r3
        currentFiber = runQueue;
 800b486:	602b      	str	r3, [r5, #0]
    if (currentFiber != oldFiber)
 800b488:	d03a      	beq.n	800b500 <_ZN5codal8scheduleEv.part.3+0x10c>
        if (currentFiber == idleFiber)
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	428b      	cmp	r3, r1
 800b48e:	d1c7      	bne.n	800b420 <_ZN5codal8scheduleEv.part.3+0x2c>
 800b490:	e04b      	b.n	800b52a <_ZN5codal8scheduleEv.part.3+0x136>
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b492:	4e38      	ldr	r6, [pc, #224]	; (800b574 <_ZN5codal8scheduleEv.part.3+0x180>)
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800b494:	f043 0302 	orr.w	r3, r3, #2
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b498:	6832      	ldr	r2, [r6, #0]
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 800b49a:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b49c:	6913      	ldr	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800b49e:	6820      	ldr	r0, [r4, #0]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 800b4a0:	f043 0304 	orr.w	r3, r3, #4
 800b4a4:	6113      	str	r3, [r2, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 800b4a6:	6814      	ldr	r4, [r2, #0]
 800b4a8:	f7f5 fb8e 	bl	8000bc8 <tcb_get_sp>
 800b4ac:	4601      	mov	r1, r0
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7f5 fb84 	bl	8000bbc <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 800b4b4:	6837      	ldr	r7, [r6, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b4b6:	6838      	ldr	r0, [r7, #0]
 800b4b8:	f7f5 fb82 	bl	8000bc0 <tcb_get_stack_base>
 800b4bc:	4604      	mov	r4, r0
 800b4be:	f7f5 fb81 	bl	8000bc4 <get_current_sp>
    bufferSize = f->stack_top - f->stack_bottom;
 800b4c2:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 800b4c6:	1a20      	subs	r0, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 800b4c8:	1a9b      	subs	r3, r3, r2
    if (bufferSize < stackDepth)
 800b4ca:	4298      	cmp	r0, r3
 800b4cc:	d90f      	bls.n	800b4ee <_ZN5codal8scheduleEv.part.3+0xfa>
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b4ce:	3020      	adds	r0, #32
        Fiber *prevCurrFiber = currentFiber;
 800b4d0:	f8d5 8000 	ldr.w	r8, [r5]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 800b4d4:	f020 041f 	bic.w	r4, r0, #31
        currentFiber = f;
 800b4d8:	602f      	str	r7, [r5, #0]
        if (f->stack_bottom != 0)
 800b4da:	2a00      	cmp	r2, #0
 800b4dc:	d139      	bne.n	800b552 <_ZN5codal8scheduleEv.part.3+0x15e>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7fe f9ae 	bl	8009840 <malloc>
        f->stack_top = f->stack_bottom + bufferSize;
 800b4e4:	4404      	add	r4, r0
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800b4e6:	e9c7 0401 	strd	r0, r4, [r7, #4]
        currentFiber = prevCurrFiber;
 800b4ea:	f8c5 8000 	str.w	r8, [r5]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 800b4ee:	6833      	ldr	r3, [r6, #0]
 800b4f0:	6899      	ldr	r1, [r3, #8]
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	f7f5 fbff 	bl	8000cf6 <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	691a      	ldr	r2, [r3, #16]
 800b4fc:	0792      	lsls	r2, r2, #30
 800b4fe:	d40c      	bmi.n	800b51a <_ZN5codal8scheduleEv.part.3+0x126>
}
 800b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800b504:	2100      	movs	r1, #0
 800b506:	682a      	ldr	r2, [r5, #0]
 800b508:	4608      	mov	r0, r1
}
 800b50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 800b50e:	6893      	ldr	r3, [r2, #8]
 800b510:	6812      	ldr	r2, [r2, #0]
 800b512:	f7f5 bbaf 	b.w	8000c74 <swap_context>
 800b516:	682f      	ldr	r7, [r5, #0]
 800b518:	e7a4      	b.n	800b464 <_ZN5codal8scheduleEv.part.3+0x70>
            restore_register_context(currentFiber->tcb);
 800b51a:	6818      	ldr	r0, [r3, #0]
}
 800b51c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            restore_register_context(currentFiber->tcb);
 800b520:	f7f5 bc23 	b.w	8000d6a <restore_register_context>
    if (currentFiber != oldFiber)
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	429c      	cmp	r4, r3
 800b528:	d0ea      	beq.n	800b500 <_ZN5codal8scheduleEv.part.3+0x10c>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800b52a:	681e      	ldr	r6, [r3, #0]
 800b52c:	f7f5 fb3a 	bl	8000ba4 <fiber_initial_stack_base>
 800b530:	1f01      	subs	r1, r0, #4
 800b532:	4630      	mov	r0, r6
 800b534:	f7f5 fb40 	bl	8000bb8 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	490f      	ldr	r1, [pc, #60]	; (800b578 <_ZN5codal8scheduleEv.part.3+0x184>)
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f7f5 fb39 	bl	8000bb4 <tcb_configure_lr>
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	e76c      	b.n	800b420 <_ZN5codal8scheduleEv.part.3+0x2c>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 800b546:	69a0      	ldr	r0, [r4, #24]
 800b548:	2800      	cmp	r0, #0
 800b54a:	bf18      	it	ne
 800b54c:	4602      	movne	r2, r0
 800b54e:	602a      	str	r2, [r5, #0]
 800b550:	e762      	b.n	800b418 <_ZN5codal8scheduleEv.part.3+0x24>
            free((void *)f->stack_bottom);
 800b552:	4610      	mov	r0, r2
 800b554:	f7fe f89c 	bl	8009690 <free>
 800b558:	e7c1      	b.n	800b4de <_ZN5codal8scheduleEv.part.3+0xea>
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe f898 	bl	8009690 <free>
 800b560:	e779      	b.n	800b456 <_ZN5codal8scheduleEv.part.3+0x62>
 800b562:	bf00      	nop
 800b564:	20001620 	.word	0x20001620
 800b568:	20001630 	.word	0x20001630
 800b56c:	20001638 	.word	0x20001638
 800b570:	20001634 	.word	0x20001634
 800b574:	2000162c 	.word	0x2000162c
 800b578:	0800b795 	.word	0x0800b795

0800b57c <_ZN5codal8scheduleEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b57c:	4b03      	ldr	r3, [pc, #12]	; (800b58c <_ZN5codal8scheduleEv+0x10>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	07db      	lsls	r3, r3, #31
 800b582:	d501      	bpl.n	800b588 <_ZN5codal8scheduleEv+0xc>
 800b584:	f7ff bf36 	b.w	800b3f4 <_ZN5codal8scheduleEv.part.3>
}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20001670 	.word	0x20001670

0800b590 <_ZN5codal11fiber_sleepEm>:
{
 800b590:	b570      	push	{r4, r5, r6, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b592:	4d10      	ldr	r5, [pc, #64]	; (800b5d4 <_ZN5codal11fiber_sleepEm+0x44>)
 800b594:	782a      	ldrb	r2, [r5, #0]
 800b596:	07d2      	lsls	r2, r2, #31
 800b598:	d514      	bpl.n	800b5c4 <_ZN5codal11fiber_sleepEm+0x34>
 800b59a:	4604      	mov	r4, r0
    Fiber *f = handle_fob();
 800b59c:	f7ff fd9c 	bl	800b0d8 <_ZL10handle_fobv>
 800b5a0:	4606      	mov	r6, r0
    f->context = system_timer_current_time() + t;
 800b5a2:	f000 fb37 	bl	800bc14 <_ZN5codal25system_timer_current_timeEv>
    if (f->queue == NULL)
 800b5a6:	6973      	ldr	r3, [r6, #20]
    f->context = system_timer_current_time() + t;
 800b5a8:	4420      	add	r0, r4
 800b5aa:	60f0      	str	r0, [r6, #12]
    if (f->queue == NULL)
 800b5ac:	b113      	cbz	r3, 800b5b4 <_ZN5codal11fiber_sleepEm+0x24>
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff fc72 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
    queue_fiber(f, &sleepQueue);
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	4908      	ldr	r1, [pc, #32]	; (800b5d8 <_ZN5codal11fiber_sleepEm+0x48>)
 800b5b8:	f7ff fcb4 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b5bc:	782b      	ldrb	r3, [r5, #0]
 800b5be:	07db      	lsls	r3, r3, #31
 800b5c0:	d404      	bmi.n	800b5cc <_ZN5codal11fiber_sleepEm+0x3c>
}
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        target_wait(t);
 800b5c8:	f7f5 baa0 	b.w	8000b0c <target_wait>
}
 800b5cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5d0:	f7ff bf10 	b.w	800b3f4 <_ZN5codal8scheduleEv.part.3>
 800b5d4:	20001670 	.word	0x20001670
 800b5d8:	20001628 	.word	0x20001628

0800b5dc <_ZN5codal20fiber_wait_for_eventEtt>:
{
 800b5dc:	b500      	push	{lr}
 800b5de:	b083      	sub	sp, #12
    int ret = fiber_wake_on_event(id, value);
 800b5e0:	f7ff fe3c 	bl	800b25c <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 800b5e4:	b918      	cbnz	r0, 800b5ee <_ZN5codal20fiber_wait_for_eventEtt+0x12>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b5e6:	4b07      	ldr	r3, [pc, #28]	; (800b604 <_ZN5codal20fiber_wait_for_eventEtt+0x28>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	07db      	lsls	r3, r3, #31
 800b5ec:	d402      	bmi.n	800b5f4 <_ZN5codal20fiber_wait_for_eventEtt+0x18>
}
 800b5ee:	b003      	add	sp, #12
 800b5f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5f4:	9001      	str	r0, [sp, #4]
 800b5f6:	f7ff fefd 	bl	800b3f4 <_ZN5codal8scheduleEv.part.3>
 800b5fa:	9801      	ldr	r0, [sp, #4]
 800b5fc:	b003      	add	sp, #12
 800b5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b602:	bf00      	nop
 800b604:	20001670 	.word	0x20001670

0800b608 <_ZN5codal13release_fiberEv.part.4>:
void codal::release_fiber(void)
 800b608:	b538      	push	{r3, r4, r5, lr}
    dequeue_fiber(currentFiber);
 800b60a:	4d1b      	ldr	r5, [pc, #108]	; (800b678 <_ZN5codal13release_fiberEv.part.4+0x70>)
 800b60c:	6828      	ldr	r0, [r5, #0]
    if (f->queue == NULL)
 800b60e:	6943      	ldr	r3, [r0, #20]
 800b610:	b113      	cbz	r3, 800b618 <_ZN5codal13release_fiberEv.part.4+0x10>
 800b612:	f7ff fc41 	bl	800ae98 <_ZN5codal13dequeue_fiberEPNS_5FiberE.part.0>
 800b616:	6828      	ldr	r0, [r5, #0]
    queue_fiber(currentFiber, &fiberPool);
 800b618:	4c18      	ldr	r4, [pc, #96]	; (800b67c <_ZN5codal13release_fiberEv.part.4+0x74>)
 800b61a:	4621      	mov	r1, r4
 800b61c:	f7ff fc82 	bl	800af24 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 800b620:	6824      	ldr	r4, [r4, #0]
 800b622:	b14c      	cbz	r4, 800b638 <_ZN5codal13release_fiberEv.part.4+0x30>
        if (!p->next && numFree > 3) {
 800b624:	69a3      	ldr	r3, [r4, #24]
    int numFree = 0;
 800b626:	2200      	movs	r2, #0
        if (!p->next && numFree > 3) {
 800b628:	b123      	cbz	r3, 800b634 <_ZN5codal13release_fiberEv.part.4+0x2c>
 800b62a:	461c      	mov	r4, r3
 800b62c:	69a3      	ldr	r3, [r4, #24]
        numFree++;
 800b62e:	3201      	adds	r2, #1
        if (!p->next && numFree > 3) {
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1fa      	bne.n	800b62a <_ZN5codal13release_fiberEv.part.4+0x22>
 800b634:	2a03      	cmp	r2, #3
 800b636:	dc0e      	bgt.n	800b656 <_ZN5codal13release_fiberEv.part.4+0x4e>
    currentFiber->flags = 0;
 800b638:	2200      	movs	r2, #0
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800b63e:	681c      	ldr	r4, [r3, #0]
 800b640:	f7f5 fab0 	bl	8000ba4 <fiber_initial_stack_base>
 800b644:	4601      	mov	r1, r0
 800b646:	4620      	mov	r0, r4
 800b648:	f7f5 fab8 	bl	8000bbc <tcb_configure_stack_base>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b64c:	4b0c      	ldr	r3, [pc, #48]	; (800b680 <_ZN5codal13release_fiberEv.part.4+0x78>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	07db      	lsls	r3, r3, #31
 800b652:	d40c      	bmi.n	800b66e <_ZN5codal13release_fiberEv.part.4+0x66>
}
 800b654:	bd38      	pop	{r3, r4, r5, pc}
            p->prev->next = NULL;
 800b656:	69e2      	ldr	r2, [r4, #28]
            free(p->tcb);
 800b658:	6820      	ldr	r0, [r4, #0]
            p->prev->next = NULL;
 800b65a:	6193      	str	r3, [r2, #24]
            free(p->tcb);
 800b65c:	f7fe f818 	bl	8009690 <free>
            free((void *)p->stack_bottom);
 800b660:	6860      	ldr	r0, [r4, #4]
 800b662:	f7fe f815 	bl	8009690 <free>
            free(p);
 800b666:	4620      	mov	r0, r4
 800b668:	f7fe f812 	bl	8009690 <free>
 800b66c:	e7e4      	b.n	800b638 <_ZN5codal13release_fiberEv.part.4+0x30>
}
 800b66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b672:	f7ff bebf 	b.w	800b3f4 <_ZN5codal8scheduleEv.part.3>
 800b676:	bf00      	nop
 800b678:	20001620 	.word	0x20001620
 800b67c:	20001634 	.word	0x20001634
 800b680:	20001670 	.word	0x20001670

0800b684 <_ZN5codal13release_fiberEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b684:	4b03      	ldr	r3, [pc, #12]	; (800b694 <_ZN5codal13release_fiberEv+0x10>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	07db      	lsls	r3, r3, #31
 800b68a:	d501      	bpl.n	800b690 <_ZN5codal13release_fiberEv+0xc>
 800b68c:	f7ff bfbc 	b.w	800b608 <_ZN5codal13release_fiberEv.part.4>
}
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20001670 	.word	0x20001670

0800b698 <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 800b698:	b510      	push	{r4, lr}
 800b69a:	460c      	mov	r4, r1
    ep();
 800b69c:	4780      	blx	r0
    cp();
 800b69e:	47a0      	blx	r4
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <_ZN5codal16launch_new_fiberEPFvvES1_+0x1c>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	07db      	lsls	r3, r3, #31
 800b6a6:	d400      	bmi.n	800b6aa <_ZN5codal16launch_new_fiberEPFvvES1_+0x12>
}
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ae:	f7ff bfab 	b.w	800b608 <_ZN5codal13release_fiberEv.part.4>
 800b6b2:	bf00      	nop
 800b6b4:	20001670 	.word	0x20001670

0800b6b8 <_ZN5codal13release_fiberEPv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b6b8:	4b03      	ldr	r3, [pc, #12]	; (800b6c8 <_ZN5codal13release_fiberEPv+0x10>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	07db      	lsls	r3, r3, #31
 800b6be:	d400      	bmi.n	800b6c2 <_ZN5codal13release_fiberEPv+0xa>
}
 800b6c0:	4770      	bx	lr
 800b6c2:	f7ff bfa1 	b.w	800b608 <_ZN5codal13release_fiberEv.part.4>
 800b6c6:	bf00      	nop
 800b6c8:	20001670 	.word	0x20001670

0800b6cc <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d042      	beq.n	800b756 <_ZN5codal6invokeEPFvPvES0_+0x8a>
{
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b6d4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800b768 <_ZN5codal6invokeEPFvPvES0_+0x9c>
{
 800b6d8:	b082      	sub	sp, #8
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b6da:	f898 3000 	ldrb.w	r3, [r8]
 800b6de:	07dc      	lsls	r4, r3, #31
 800b6e0:	d532      	bpl.n	800b748 <_ZN5codal6invokeEPFvPvES0_+0x7c>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800b6e2:	4f1e      	ldr	r7, [pc, #120]	; (800b75c <_ZN5codal6invokeEPFvPvES0_+0x90>)
 800b6e4:	460a      	mov	r2, r1
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	6919      	ldr	r1, [r3, #16]
 800b6ec:	0749      	lsls	r1, r1, #29
 800b6ee:	d101      	bne.n	800b6f4 <_ZN5codal6invokeEPFvPvES0_+0x28>
 800b6f0:	6a1c      	ldr	r4, [r3, #32]
 800b6f2:	b144      	cbz	r4, 800b706 <_ZN5codal6invokeEPFvPvES0_+0x3a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4919      	ldr	r1, [pc, #100]	; (800b760 <_ZN5codal6invokeEPFvPvES0_+0x94>)
 800b6fa:	f7ff fdfb 	bl	800b2f4 <_Z14__create_fibermmmi>
        return DEVICE_OK;
 800b6fe:	2000      	movs	r0, #0
}
 800b700:	b002      	add	sp, #8
 800b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    save_register_context(currentFiber->tcb);
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	9201      	str	r2, [sp, #4]
 800b70a:	f7f5 fb16 	bl	8000d3a <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	9a01      	ldr	r2, [sp, #4]
 800b712:	690b      	ldr	r3, [r1, #16]
 800b714:	f013 0602 	ands.w	r6, r3, #2
 800b718:	d118      	bne.n	800b74c <_ZN5codal6invokeEPFvPvES0_+0x80>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800b71a:	f043 0301 	orr.w	r3, r3, #1
    entry_fn(param);
 800b71e:	4610      	mov	r0, r2
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800b720:	610b      	str	r3, [r1, #16]
    entry_fn(param);
 800b722:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 800b724:	683b      	ldr	r3, [r7, #0]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b726:	6918      	ldr	r0, [r3, #16]
    currentFiber->user_data = NULL;
 800b728:	621e      	str	r6, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b72a:	f020 0201 	bic.w	r2, r0, #1
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800b72e:	f010 0004 	ands.w	r0, r0, #4
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800b732:	611a      	str	r2, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800b734:	d0e4      	beq.n	800b700 <_ZN5codal6invokeEPFvPvES0_+0x34>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b736:	f898 0000 	ldrb.w	r0, [r8]
 800b73a:	f010 0001 	ands.w	r0, r0, #1
 800b73e:	d0df      	beq.n	800b700 <_ZN5codal6invokeEPFvPvES0_+0x34>
 800b740:	f7ff ff62 	bl	800b608 <_ZN5codal13release_fiberEv.part.4>
    return DEVICE_OK;
 800b744:	4630      	mov	r0, r6
 800b746:	e7db      	b.n	800b700 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_NOT_SUPPORTED;
 800b748:	4806      	ldr	r0, [pc, #24]	; (800b764 <_ZN5codal6invokeEPFvPvES0_+0x98>)
 800b74a:	e7d9      	b.n	800b700 <_ZN5codal6invokeEPFvPvES0_+0x34>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 800b74c:	f023 0303 	bic.w	r3, r3, #3
 800b750:	610b      	str	r3, [r1, #16]
        return DEVICE_OK;
 800b752:	4620      	mov	r0, r4
 800b754:	e7d4      	b.n	800b700 <_ZN5codal6invokeEPFvPvES0_+0x34>
        return DEVICE_INVALID_PARAMETER;
 800b756:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800b75a:	4770      	bx	lr
 800b75c:	20001620 	.word	0x20001620
 800b760:	0800b6b9 	.word	0x0800b6b9
 800b764:	fffffc16 	.word	0xfffffc16
 800b768:	20001670 	.word	0x20001670

0800b76c <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4614      	mov	r4, r2
 800b770:	4603      	mov	r3, r0
    ep(pm);
 800b772:	4610      	mov	r0, r2
{
 800b774:	460d      	mov	r5, r1
    ep(pm);
 800b776:	4798      	blx	r3
    cp(pm);
 800b778:	4620      	mov	r0, r4
 800b77a:	47a8      	blx	r5
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x24>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	07db      	lsls	r3, r3, #31
 800b782:	d400      	bmi.n	800b786 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x1a>
}
 800b784:	bd38      	pop	{r3, r4, r5, pc}
 800b786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b78a:	f7ff bf3d 	b.w	800b608 <_ZN5codal13release_fiberEv.part.4>
 800b78e:	bf00      	nop
 800b790:	20001670 	.word	0x20001670

0800b794 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 800b794:	b508      	push	{r3, lr}
 800b796:	4c04      	ldr	r4, [pc, #16]	; (800b7a8 <_ZN5codal9idle_taskEv+0x14>)
    while(1)
    {
        idle();
 800b798:	f7ff fe08 	bl	800b3ac <_ZN5codal4idleEv>
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800b79c:	7823      	ldrb	r3, [r4, #0]
 800b79e:	07db      	lsls	r3, r3, #31
 800b7a0:	d5fa      	bpl.n	800b798 <_ZN5codal9idle_taskEv+0x4>
 800b7a2:	f7ff fe27 	bl	800b3f4 <_ZN5codal8scheduleEv.part.3>
 800b7a6:	e7f7      	b.n	800b798 <_ZN5codal9idle_taskEv+0x4>
 800b7a8:	20001670 	.word	0x20001670

0800b7ac <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	460e      	mov	r6, r1
    HeapDefinition *h = &heap[heap_count];
 800b7b2:	4c0b      	ldr	r4, [pc, #44]	; (800b7e0 <_Z18device_create_heapmm+0x34>)
 800b7b4:	7827      	ldrb	r7, [r4, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800b7b6:	f7f5 f9cf 	bl	8000b58 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800b7ba:	4a0a      	ldr	r2, [pc, #40]	; (800b7e4 <_Z18device_create_heapmm+0x38>)
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b7bc:	1b73      	subs	r3, r6, r5
 800b7be:	089b      	lsrs	r3, r3, #2
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 800b7c0:	f842 5037 	str.w	r5, [r2, r7, lsl #3]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b7c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 800b7c8:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800b7cc:	6056      	str	r6, [r2, #4]
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 800b7ce:	602b      	str	r3, [r5, #0]

    heap_count++;
 800b7d0:	7823      	ldrb	r3, [r4, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	7023      	strb	r3, [r4, #0]

    // Enable Interrupts
    target_enable_irq();
 800b7d6:	f7f5 f9bd 	bl	8000b54 <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 800b7da:	2000      	movs	r0, #0
 800b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20001672 	.word	0x20001672
 800b7e4:	20001640 	.word	0x20001640

0800b7e8 <_Z16device_heap_sizeh>:

uint32_t device_heap_size(uint8_t heap_index)
{
    if (heap_index >= heap_count)
 800b7e8:	4b06      	ldr	r3, [pc, #24]	; (800b804 <_Z16device_heap_sizeh+0x1c>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	4283      	cmp	r3, r0
 800b7ee:	d907      	bls.n	800b800 <_Z16device_heap_sizeh+0x18>
        return 0;    
    HeapDefinition *h = &heap[heap_index];
    return (uint8_t*)h->heap_end - (uint8_t*)h->heap_start;
 800b7f0:	4a05      	ldr	r2, [pc, #20]	; (800b808 <_Z16device_heap_sizeh+0x20>)
 800b7f2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 800b7fc:	1a18      	subs	r0, r3, r0
 800b7fe:	4770      	bx	lr
        return 0;    
 800b800:	2000      	movs	r0, #0
}
 800b802:	4770      	bx	lr
 800b804:	20001672 	.word	0x20001672
 800b808:	20001640 	.word	0x20001640

0800b80c <_Z16device_malloc_injR14HeapDefinition>:
  * @param heap The heap to allocate memory from.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void *device_malloc_in(size_t size, HeapDefinition &heap)
{
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blockSize = 0;
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800b80e:	0783      	lsls	r3, r0, #30
 800b810:	ea4f 0690 	mov.w	r6, r0, lsr #2
 800b814:	d134      	bne.n	800b880 <_Z16device_malloc_injR14HeapDefinition+0x74>
    PROCESSOR_WORD_TYPE	*block;
    PROCESSOR_WORD_TYPE	*next;

    if (size <= 0)
 800b816:	b188      	cbz	r0, 800b83c <_Z16device_malloc_injR14HeapDefinition+0x30>
 800b818:	460d      	mov	r5, r1
        return NULL;

    // Account for the index block;
    blocksNeeded++;
 800b81a:	1c77      	adds	r7, r6, #1

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 800b81c:	f7f5 f99c 	bl	8000b58 <target_disable_irq>

    // We implement a first fit algorithm with cache to handle rapid churn...
    // We also defragment free blocks as we search, to optimise this and future searches.
    block = heap.heap_start;
    while (block < heap.heap_end)
 800b820:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b824:	42a5      	cmp	r5, r4
 800b826:	d906      	bls.n	800b836 <_Z16device_malloc_injR14HeapDefinition+0x2a>
    {
        // If the block is used, then keep looking.
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	db07      	blt.n	800b83e <_Z16device_malloc_injR14HeapDefinition+0x32>
        {
            block += *block;
 800b82e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    while (block < heap.heap_end)
 800b832:	42a5      	cmp	r5, r4
 800b834:	d8f8      	bhi.n	800b828 <_Z16device_malloc_injR14HeapDefinition+0x1c>
    }

    // We're full!
    if (block >= heap.heap_end)
    {
        target_enable_irq();
 800b836:	f7f5 f98d 	bl	8000b54 <target_enable_irq>
        return NULL;
 800b83a:	2000      	movs	r0, #0

    // Enable Interrupts
    target_enable_irq();

    return block+1;
}
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 800b83e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b842:	e007      	b.n	800b854 <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 800b844:	4285      	cmp	r5, r0
 800b846:	d90c      	bls.n	800b862 <_Z16device_malloc_injR14HeapDefinition+0x56>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 800b848:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b84c:	4413      	add	r3, r2
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 800b84e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b852:	6022      	str	r2, [r4, #0]
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b854:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
            next = block + blockSize;
 800b858:	0099      	lsls	r1, r3, #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b85a:	2a00      	cmp	r2, #0
            next = block + blockSize;
 800b85c:	eb04 0001 	add.w	r0, r4, r1
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 800b860:	dbf0      	blt.n	800b844 <_Z16device_malloc_injR14HeapDefinition+0x38>
        if (blockSize >= blocksNeeded)
 800b862:	429f      	cmp	r7, r3
 800b864:	d901      	bls.n	800b86a <_Z16device_malloc_injR14HeapDefinition+0x5e>
        block += blockSize;
 800b866:	440c      	add	r4, r1
 800b868:	e7dc      	b.n	800b824 <_Z16device_malloc_injR14HeapDefinition+0x18>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800b86a:	3602      	adds	r6, #2
 800b86c:	429e      	cmp	r6, r3
 800b86e:	d309      	bcc.n	800b884 <_Z16device_malloc_injR14HeapDefinition+0x78>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b876:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 800b878:	f7f5 f96c 	bl	8000b54 <target_enable_irq>
    return block+1;
 800b87c:	1d20      	adds	r0, r4, #4
}
 800b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800b880:	3601      	adds	r6, #1
 800b882:	e7c9      	b.n	800b818 <_Z16device_malloc_injR14HeapDefinition+0xc>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 800b884:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b888:	42b5      	cmp	r5, r6
 800b88a:	d9f1      	bls.n	800b870 <_Z16device_malloc_injR14HeapDefinition+0x64>
        *splitBlock = blockSize - blocksNeeded;
 800b88c:	1bdb      	subs	r3, r3, r7
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 800b88e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b892:	f846 3c04 	str.w	r3, [r6, #-4]
        *block = blocksNeeded;
 800b896:	6027      	str	r7, [r4, #0]
 800b898:	e7ee      	b.n	800b878 <_Z16device_malloc_injR14HeapDefinition+0x6c>
 800b89a:	bf00      	nop

0800b89c <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 800b89c:	b538      	push	{r3, r4, r5, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
        return NULL;
 800b89e:	4604      	mov	r4, r0
    if (size <= 0)
 800b8a0:	b140      	cbz	r0, 800b8b4 <device_malloc+0x18>

    if (!initialised)
 800b8a2:	4d0c      	ldr	r5, [pc, #48]	; (800b8d4 <device_malloc+0x38>)
 800b8a4:	782b      	ldrb	r3, [r5, #0]
 800b8a6:	b13b      	cbz	r3, 800b8b8 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	490b      	ldr	r1, [pc, #44]	; (800b8d8 <device_malloc+0x3c>)
 800b8ac:	f7ff ffae 	bl	800b80c <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	b158      	cbz	r0, 800b8cc <device_malloc+0x30>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b8b8:	4908      	ldr	r1, [pc, #32]	; (800b8dc <device_malloc+0x40>)
        heap_count = 0;
 800b8ba:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <device_malloc+0x44>)
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b8bc:	6808      	ldr	r0, [r1, #0]
 800b8be:	4909      	ldr	r1, [pc, #36]	; (800b8e4 <device_malloc+0x48>)
        heap_count = 0;
 800b8c0:	7013      	strb	r3, [r2, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800b8c2:	f7ff ff73 	bl	800b7ac <_Z18device_create_heapmm>
        initialised = 1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	702b      	strb	r3, [r5, #0]
 800b8ca:	e7ed      	b.n	800b8a8 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 800b8cc:	2014      	movs	r0, #20
 800b8ce:	f7f5 f959 	bl	8000b84 <target_panic>
    return NULL;
 800b8d2:	e7ef      	b.n	800b8b4 <device_malloc+0x18>
 800b8d4:	20001671 	.word	0x20001671
 800b8d8:	20001640 	.word	0x20001640
 800b8dc:	20000044 	.word	0x20000044
 800b8e0:	20001672 	.word	0x20001672
 800b8e4:	20004800 	.word	0x20004800

0800b8e8 <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 800b8e8:	b1a0      	cbz	r0, 800b914 <device_free+0x2c>

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <device_free+0x3c>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4282      	cmp	r2, r0
 800b8f0:	d20d      	bcs.n	800b90e <device_free+0x26>
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4283      	cmp	r3, r0
 800b8f6:	d90a      	bls.n	800b90e <device_free+0x26>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800b8f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
 800b8fc:	b510      	push	{r4, lr}
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	4604      	mov	r4, r0
 800b902:	dd08      	ble.n	800b916 <device_free+0x2e>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 800b904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b908:	f844 3c04 	str.w	r3, [r4, #-4]
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
}
 800b90c:	bd10      	pop	{r4, pc}
    target_panic(DEVICE_HEAP_ERROR);
 800b90e:	201e      	movs	r0, #30
 800b910:	f7f5 b938 	b.w	8000b84 <target_panic>
 800b914:	4770      	bx	lr
                target_panic(DEVICE_HEAP_ERROR);
 800b916:	201e      	movs	r0, #30
 800b918:	f7f5 f934 	bl	8000b84 <target_panic>
 800b91c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b920:	e7f0      	b.n	800b904 <device_free+0x1c>
 800b922:	bf00      	nop
 800b924:	20001640 	.word	0x20001640

0800b928 <calloc>:

void* calloc (size_t num, size_t size)
{
 800b928:	b538      	push	{r3, r4, r5, lr}
    void *mem = malloc(num*size);
 800b92a:	fb01 f500 	mul.w	r5, r1, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f7fd ff86 	bl	8009840 <malloc>

    if (mem) {
 800b934:	4604      	mov	r4, r0
 800b936:	b128      	cbz	r0, 800b944 <calloc+0x1c>
        // without this write, GCC will happily optimize malloc() above into calloc()
        // and remove the memset
        ((uint32_t*)mem)[0] = 1;
 800b938:	2301      	movs	r3, #1
        memset(mem, 0, num*size);
 800b93a:	462a      	mov	r2, r5
        ((uint32_t*)mem)[0] = 1;
 800b93c:	6003      	str	r3, [r0, #0]
        memset(mem, 0, num*size);
 800b93e:	2100      	movs	r1, #0
 800b940:	f7f8 fa52 	bl	8003de8 <memset>
    }

    return mem;
}
 800b944:	4620      	mov	r0, r4
 800b946:	bd38      	pop	{r3, r4, r5, pc}

0800b948 <device_realloc>:

extern "C" void* device_realloc (void* ptr, size_t size)
{
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	4604      	mov	r4, r0
    void *mem = malloc(size);
 800b94c:	4608      	mov	r0, r1
{
 800b94e:	460e      	mov	r6, r1
    void *mem = malloc(size);
 800b950:	f7fd ff76 	bl	8009840 <malloc>
 800b954:	4605      	mov	r5, r0

    // handle the simplest case - no previous memory allocted.
    if (ptr != NULL && mem != NULL)
 800b956:	b164      	cbz	r4, 800b972 <device_realloc+0x2a>
 800b958:	b158      	cbz	r0, 800b972 <device_realloc+0x2a>
    {

        // Otherwise we need to copy and free up the old data.
        PROCESSOR_WORD_TYPE *cb = ((PROCESSOR_WORD_TYPE *)ptr) - 1;
        PROCESSOR_WORD_TYPE blockSize = *cb & ~DEVICE_HEAP_BLOCK_FREE;
 800b95a:	f854 2c04 	ldr.w	r2, [r4, #-4]

        memcpy(mem, ptr, min(blockSize * sizeof(PROCESSOR_WORD_TYPE), size));
 800b95e:	4621      	mov	r1, r4
 800b960:	0092      	lsls	r2, r2, #2
 800b962:	42b2      	cmp	r2, r6
 800b964:	bfa8      	it	ge
 800b966:	4632      	movge	r2, r6
 800b968:	f7f8 f9f6 	bl	8003d58 <memcpy>
        free(ptr);
 800b96c:	4620      	mov	r0, r4
 800b96e:	f7fd fe8f 	bl	8009690 <free>
    }

    return mem;
}
 800b972:	4628      	mov	r0, r5
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	bf00      	nop

0800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 800b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97c:	4604      	mov	r4, r0
 800b97e:	3010      	adds	r0, #16
 800b980:	4688      	mov	r8, r1
 800b982:	4617      	mov	r7, r2
 800b984:	461e      	mov	r6, r3
 800b986:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800b98a:	f000 fc81 	bl	800c290 <_ZN5codal5EventC1Ev>
{
	this->id = id;
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 800b98e:	2000      	movs	r0, #0
	this->id = id;
 800b990:	f8a4 8000 	strh.w	r8, [r4]
	this->cb_arg = NULL;
 800b994:	60e0      	str	r0, [r4, #12]
    this->flags = flags;
	this->next = NULL;
    this->evt_queue = NULL;
 800b996:	e9c4 0006 	strd	r0, r0, [r4, #24]
	this->value = value;
 800b99a:	8067      	strh	r7, [r4, #2]
	this->cb = handler;
 800b99c:	60a6      	str	r6, [r4, #8]
    this->flags = flags;
 800b99e:	80a5      	strh	r5, [r4, #4]
}
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a6:	bf00      	nop

0800b9a8 <_ZN5codal8ListenerD1Ev>:
/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b9a8:	8883      	ldrh	r3, [r0, #4]
Listener::~Listener()
 800b9aa:	b510      	push	{r4, lr}
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b9ac:	079b      	lsls	r3, r3, #30
Listener::~Listener()
 800b9ae:	4604      	mov	r4, r0
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800b9b0:	d502      	bpl.n	800b9b8 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
 800b9b2:	6880      	ldr	r0, [r0, #8]
 800b9b4:	f7f8 fc16 	bl	80041e4 <_ZdlPv>
}
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	bd10      	pop	{r4, pc}

0800b9bc <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	4604      	mov	r4, r0
    int queueDepth;

    EventQueueItem *p = evt_queue;
 800b9c2:	6983      	ldr	r3, [r0, #24]
{
 800b9c4:	4668      	mov	r0, sp
 800b9c6:	e880 0006 	stmia.w	r0, {r1, r2}

    if (evt_queue == NULL)
 800b9ca:	b1e3      	cbz	r3, 800ba06 <_ZN5codal8Listener5queueENS_5EventE+0x4a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800b9cc:	689c      	ldr	r4, [r3, #8]
 800b9ce:	b154      	cbz	r4, 800b9e6 <_ZN5codal8Listener5queueENS_5EventE+0x2a>
        queueDepth = 1;
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	e000      	b.n	800b9d6 <_ZN5codal8Listener5queueENS_5EventE+0x1a>
 800b9d4:	461c      	mov	r4, r3
        while (p->next != NULL)
 800b9d6:	68a3      	ldr	r3, [r4, #8]
        {
            p = p->next;
            queueDepth++;
 800b9d8:	3201      	adds	r2, #1
        while (p->next != NULL)
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1fa      	bne.n	800b9d4 <_ZN5codal8Listener5queueENS_5EventE+0x18>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800b9de:	2a09      	cmp	r2, #9
 800b9e0:	dd02      	ble.n	800b9e8 <_ZN5codal8Listener5queueENS_5EventE+0x2c>
            p->next = new EventQueueItem(e);
    }
}
 800b9e2:	b004      	add	sp, #16
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
        while (p->next != NULL)
 800b9e6:	461c      	mov	r4, r3
            p->next = new EventQueueItem(e);
 800b9e8:	c803      	ldmia	r0, {r0, r1}
 800b9ea:	ad02      	add	r5, sp, #8
 800b9ec:	e885 0003 	stmia.w	r5, {r0, r1}
 800b9f0:	200c      	movs	r0, #12
 800b9f2:	f7f8 fbf5 	bl	80041e0 <_Znwj>
 800b9f6:	e895 0006 	ldmia.w	r5, {r1, r2}
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	f000 fc52 	bl	800c2a4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800ba00:	60a6      	str	r6, [r4, #8]
}
 800ba02:	b004      	add	sp, #16
 800ba04:	bd70      	pop	{r4, r5, r6, pc}
        evt_queue = new EventQueueItem(e);
 800ba06:	ad02      	add	r5, sp, #8
 800ba08:	c803      	ldmia	r0, {r0, r1}
 800ba0a:	e885 0005 	stmia.w	r5, {r0, r2}
 800ba0e:	200c      	movs	r0, #12
 800ba10:	f7f8 fbe6 	bl	80041e0 <_Znwj>
 800ba14:	e895 0006 	ldmia.w	r5, {r1, r2}
 800ba18:	4606      	mov	r6, r0
 800ba1a:	f000 fc43 	bl	800c2a4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800ba1e:	61a6      	str	r6, [r4, #24]
}
 800ba20:	b004      	add	sp, #16
 800ba22:	bd70      	pop	{r4, r5, r6, pc}

0800ba24 <_ZN5codal5Timer17disableInterruptsEv>:
    syncRequest();
    return currentTimeUs;
}

int Timer::disableInterrupts()
{
 800ba24:	b508      	push	{r3, lr}
    target_disable_irq();
 800ba26:	f7f5 f897 	bl	8000b58 <target_disable_irq>
    return DEVICE_OK;
}
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	bd08      	pop	{r3, pc}
 800ba2e:	bf00      	nop

0800ba30 <_ZN5codal5Timer16enableInterruptsEv>:

int Timer::enableInterrupts()
{
 800ba30:	b508      	push	{r3, lr}
    target_enable_irq();
 800ba32:	f7f5 f88f 	bl	8000b54 <target_enable_irq>
    return DEVICE_OK;
}
 800ba36:	2000      	movs	r0, #0
 800ba38:	bd08      	pop	{r3, pc}
 800ba3a:	bf00      	nop

0800ba3c <_ZN5codal5TimerC1Ev>:
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800ba3c:	220a      	movs	r2, #10
Timer::Timer()
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	4604      	mov	r4, r0
 800ba42:	4908      	ldr	r1, [pc, #32]	; (800ba64 <_ZN5codal5TimerC1Ev+0x28>)
    system_timer = this;
 800ba44:	4b08      	ldr	r3, [pc, #32]	; (800ba68 <_ZN5codal5TimerC1Ev+0x2c>)
Timer::Timer()
 800ba46:	6001      	str	r1, [r0, #0]
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 800ba48:	6182      	str	r2, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	2078      	movs	r0, #120	; 0x78
    system_timer = this;
 800ba4e:	601c      	str	r4, [r3, #0]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 800ba50:	f7ff ff6a 	bl	800b928 <calloc>
    nextTimerEvent = NULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	e9c4 0304 	strd	r0, r3, [r4, #16]
    currentTimeUs = 0;
 800ba5a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0800d650 	.word	0x0800d650
 800ba68:	20001648 	.word	0x20001648

0800ba6c <_ZN5codal5Timer8setEventEmttb>:

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
 800ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i=0; i<eventListSize; i++)
 800ba70:	f8d0 c018 	ldr.w	ip, [r0, #24]
{
 800ba74:	f89d 8020 	ldrb.w	r8, [sp, #32]
    for (int i=0; i<eventListSize; i++)
 800ba78:	f1bc 0f00 	cmp.w	ip, #0
 800ba7c:	dd0d      	ble.n	800ba9a <_ZN5codal5Timer8setEventEmttb+0x2e>
        if (timerEventList[i].id == 0)
 800ba7e:	6906      	ldr	r6, [r0, #16]
 800ba80:	8834      	ldrh	r4, [r6, #0]
 800ba82:	b174      	cbz	r4, 800baa2 <_ZN5codal5Timer8setEventEmttb+0x36>
 800ba84:	4634      	mov	r4, r6
    for (int i=0; i<eventListSize; i++)
 800ba86:	2500      	movs	r5, #0
 800ba88:	e002      	b.n	800ba90 <_ZN5codal5Timer8setEventEmttb+0x24>
        if (timerEventList[i].id == 0)
 800ba8a:	8827      	ldrh	r7, [r4, #0]
 800ba8c:	4626      	mov	r6, r4
 800ba8e:	b147      	cbz	r7, 800baa2 <_ZN5codal5Timer8setEventEmttb+0x36>
    for (int i=0; i<eventListSize; i++)
 800ba90:	3501      	adds	r5, #1
 800ba92:	4565      	cmp	r5, ip
 800ba94:	f104 040c 	add.w	r4, r4, #12
 800ba98:	d1f7      	bne.n	800ba8a <_ZN5codal5Timer8setEventEmttb+0x1e>
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;
 800ba9a:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
    }

    enableInterrupts();

    return DEVICE_OK;
}
 800ba9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa2:	460d      	mov	r5, r1
 800baa4:	4604      	mov	r4, r0
 800baa6:	461f      	mov	r7, r3
    syncRequest();
 800baa8:	6803      	ldr	r3, [r0, #0]
 800baaa:	4691      	mov	r9, r2
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	4798      	blx	r3
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800bab0:	f1b8 0f00 	cmp.w	r8, #0
 800bab4:	bf14      	ite	ne
 800bab6:	4628      	movne	r0, r5
 800bab8:	2000      	moveq	r0, #0
    disableInterrupts();
 800baba:	6822      	ldr	r2, [r4, #0]
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800babc:	68a3      	ldr	r3, [r4, #8]
    disableInterrupts();
 800babe:	68d1      	ldr	r1, [r2, #12]
 800bac0:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <_ZN5codal5Timer8setEventEmttb+0xb0>)
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800bac2:	442b      	add	r3, r5
 800bac4:	4291      	cmp	r1, r2
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 800bac6:	e9c6 0301 	strd	r0, r3, [r6, #4]
            this->period = period;
            this->id = id;
 800baca:	f8a6 9000 	strh.w	r9, [r6]
            this->value = value;
 800bace:	8077      	strh	r7, [r6, #2]
 800bad0:	d121      	bne.n	800bb16 <_ZN5codal5Timer8setEventEmttb+0xaa>
    target_disable_irq();
 800bad2:	f7f5 f841 	bl	8000b58 <target_disable_irq>
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800bad6:	6963      	ldr	r3, [r4, #20]
 800bad8:	b16b      	cbz	r3, 800baf6 <_ZN5codal5Timer8setEventEmttb+0x8a>
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	68b2      	ldr	r2, [r6, #8]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d309      	bcc.n	800baf6 <_ZN5codal5Timer8setEventEmttb+0x8a>
    enableInterrupts();
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	4a0e      	ldr	r2, [pc, #56]	; (800bb20 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	4293      	cmp	r3, r2
 800baea:	d10f      	bne.n	800bb0c <_ZN5codal5Timer8setEventEmttb+0xa0>
    target_enable_irq();
 800baec:	f7f5 f832 	bl	8000b54 <target_enable_irq>
    return DEVICE_OK;
 800baf0:	2000      	movs	r0, #0
}
 800baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        triggerIn(period);
 800baf6:	6823      	ldr	r3, [r4, #0]
        nextTimerEvent = evt;
 800baf8:	6166      	str	r6, [r4, #20]
        triggerIn(period);
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4629      	mov	r1, r5
 800bafe:	4620      	mov	r0, r4
 800bb00:	4798      	blx	r3
    enableInterrupts();
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	4a06      	ldr	r2, [pc, #24]	; (800bb20 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d0ef      	beq.n	800baec <_ZN5codal5Timer8setEventEmttb+0x80>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4798      	blx	r3
    return DEVICE_OK;
 800bb10:	2000      	movs	r0, #0
}
 800bb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    disableInterrupts();
 800bb16:	4620      	mov	r0, r4
 800bb18:	4788      	blx	r1
 800bb1a:	e7dc      	b.n	800bad6 <_ZN5codal5Timer8setEventEmttb+0x6a>
 800bb1c:	0800ba25 	.word	0x0800ba25
 800bb20:	0800ba31 	.word	0x0800ba31

0800bb24 <_ZN5codal5Timer4syncEm>:
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;
 800bb24:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
    currentTimeUs += t;
 800bb28:	440b      	add	r3, r1
    overflow += t;
 800bb2a:	4411      	add	r1, r2

    while(overflow >= 1000)
 800bb2c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    overflow += t;
 800bb30:	e9c0 3102 	strd	r3, r1, [r0, #8]
    while(overflow >= 1000)
 800bb34:	d309      	bcc.n	800bb4a <_ZN5codal5Timer4syncEm+0x26>
 800bb36:	6843      	ldr	r3, [r0, #4]
    {
        overflow -= 1000;
 800bb38:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    while(overflow >= 1000)
 800bb3c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
        currentTime += 1;
 800bb40:	f103 0301 	add.w	r3, r3, #1
    while(overflow >= 1000)
 800bb44:	d2f8      	bcs.n	800bb38 <_ZN5codal5Timer4syncEm+0x14>
 800bb46:	60c1      	str	r1, [r0, #12]
 800bb48:	6043      	str	r3, [r0, #4]
    }
}
 800bb4a:	4770      	bx	lr

0800bb4c <_ZN5codal5Timer7triggerEv>:

/**
 * Callback from physical timer implementation code.
 */
void Timer::trigger()
{
 800bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb50:	4606      	mov	r6, r0
        {
            if (e->id != 0 && currentTimeUs >= e->timestamp)
            {
                // We need to trigger this event.
#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
                Event evt(e->id, e->value, currentTime);
 800bb52:	f04f 0801 	mov.w	r8, #1
    syncRequest();
 800bb56:	6803      	ldr	r3, [r0, #0]
{
 800bb58:	b084      	sub	sp, #16
    syncRequest();
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	4798      	blx	r3
 800bb5e:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800bb60:	2b00      	cmp	r3, #0
        TimerEvent *e = timerEventList;
 800bb62:	6934      	ldr	r4, [r6, #16]
        for (int i=0; i<eventListSize; i++)
 800bb64:	dd4c      	ble.n	800bc00 <_ZN5codal5Timer7triggerEv+0xb4>
 800bb66:	2500      	movs	r5, #0
        eventsFired = 0;
 800bb68:	462f      	mov	r7, r5
 800bb6a:	e004      	b.n	800bb76 <_ZN5codal5Timer7triggerEv+0x2a>
        for (int i=0; i<eventListSize; i++)
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	42ab      	cmp	r3, r5
                    e->timestamp += e->period;

                // TODO: Handle rollover case above...
                eventsFired++;
            }
            e++;
 800bb70:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800bb74:	dd1c      	ble.n	800bbb0 <_ZN5codal5Timer7triggerEv+0x64>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 800bb76:	8821      	ldrh	r1, [r4, #0]
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	d0f7      	beq.n	800bb6c <_ZN5codal5Timer7triggerEv+0x20>
 800bb7c:	68b0      	ldr	r0, [r6, #8]
 800bb7e:	68a2      	ldr	r2, [r4, #8]
 800bb80:	4290      	cmp	r0, r2
 800bb82:	d3f3      	bcc.n	800bb6c <_ZN5codal5Timer7triggerEv+0x20>
                Event evt(e->id, e->value, currentTime);
 800bb84:	6873      	ldr	r3, [r6, #4]
 800bb86:	8862      	ldrh	r2, [r4, #2]
 800bb88:	a802      	add	r0, sp, #8
 800bb8a:	f8cd 8000 	str.w	r8, [sp]
 800bb8e:	f000 fb73 	bl	800c278 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 800bb92:	6863      	ldr	r3, [r4, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d12f      	bne.n	800bbf8 <_ZN5codal5Timer7triggerEv+0xac>
    if (nextTimerEvent == event)
 800bb98:	6972      	ldr	r2, [r6, #20]
    event->id = 0;
 800bb9a:	8023      	strh	r3, [r4, #0]
    if (nextTimerEvent == event)
 800bb9c:	42a2      	cmp	r2, r4
 800bb9e:	d034      	beq.n	800bc0a <_ZN5codal5Timer7triggerEv+0xbe>
 800bba0:	69b3      	ldr	r3, [r6, #24]
        for (int i=0; i<eventListSize; i++)
 800bba2:	3501      	adds	r5, #1
 800bba4:	42ab      	cmp	r3, r5
                eventsFired++;
 800bba6:	f107 0701 	add.w	r7, r7, #1
            e++;
 800bbaa:	f104 040c 	add.w	r4, r4, #12
        for (int i=0; i<eventListSize; i++)
 800bbae:	dce2      	bgt.n	800bb76 <_ZN5codal5Timer7triggerEv+0x2a>
        }

    } while (eventsFired);
 800bbb0:	2f00      	cmp	r7, #0
 800bbb2:	d1d5      	bne.n	800bb60 <_ZN5codal5Timer7triggerEv+0x14>
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800bbb4:	2b00      	cmp	r3, #0
    nextTimerEvent = NULL;
 800bbb6:	6177      	str	r7, [r6, #20]
    TimerEvent *e = timerEventList;
 800bbb8:	6932      	ldr	r2, [r6, #16]
    for (int i=0; i<eventListSize; i++)
 800bbba:	dd23      	ble.n	800bc04 <_ZN5codal5Timer7triggerEv+0xb8>
 800bbbc:	4638      	mov	r0, r7
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800bbbe:	8811      	ldrh	r1, [r2, #0]
    for (int i=0; i<eventListSize; i++)
 800bbc0:	3701      	adds	r7, #1
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800bbc2:	b131      	cbz	r1, 800bbd2 <_ZN5codal5Timer7triggerEv+0x86>
 800bbc4:	b118      	cbz	r0, 800bbce <_ZN5codal5Timer7triggerEv+0x82>
 800bbc6:	6894      	ldr	r4, [r2, #8]
 800bbc8:	6881      	ldr	r1, [r0, #8]
 800bbca:	428c      	cmp	r4, r1
 800bbcc:	d201      	bcs.n	800bbd2 <_ZN5codal5Timer7triggerEv+0x86>
            nextTimerEvent = e;
 800bbce:	4610      	mov	r0, r2
 800bbd0:	6172      	str	r2, [r6, #20]
    for (int i=0; i<eventListSize; i++)
 800bbd2:	42bb      	cmp	r3, r7
        e++;
 800bbd4:	f102 020c 	add.w	r2, r2, #12
    for (int i=0; i<eventListSize; i++)
 800bbd8:	d1f1      	bne.n	800bbbe <_ZN5codal5Timer7triggerEv+0x72>
    }

    if (nextTimerEvent) {
 800bbda:	b198      	cbz	r0, 800bc04 <_ZN5codal5Timer7triggerEv+0xb8>
        // this may possibly happen if a new timer event was added to the queue while
        // we were running - it might be already in the past
        if (currentTimeUs < nextTimerEvent->timestamp)
 800bbdc:	6881      	ldr	r1, [r0, #8]
 800bbde:	68b3      	ldr	r3, [r6, #8]
 800bbe0:	6832      	ldr	r2, [r6, #0]
 800bbe2:	428b      	cmp	r3, r1
 800bbe4:	6812      	ldr	r2, [r2, #0]
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 800bbe6:	bf39      	ittee	cc
 800bbe8:	1ac9      	subcc	r1, r1, r3
 800bbea:	4630      	movcc	r0, r6
        else
            triggerIn(1);
 800bbec:	4630      	movcs	r0, r6
 800bbee:	2101      	movcs	r1, #1
 800bbf0:	4790      	blx	r2
    }
}
 800bbf2:	b004      	add	sp, #16
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    e->timestamp += e->period;
 800bbf8:	68a2      	ldr	r2, [r4, #8]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	e7cf      	b.n	800bba0 <_ZN5codal5Timer7triggerEv+0x54>
    nextTimerEvent = NULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	6173      	str	r3, [r6, #20]
}
 800bc04:	b004      	add	sp, #16
 800bc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nextTimerEvent = NULL;
 800bc0a:	6173      	str	r3, [r6, #20]
 800bc0c:	e7c8      	b.n	800bba0 <_ZN5codal5Timer7triggerEv+0x54>
 800bc0e:	bf00      	nop

0800bc10 <_ZN5codal5TimerD1Ev>:
/**
 * Destructor for this Timer instance
 */
Timer::~Timer()
{
}
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop

0800bc14 <_ZN5codal25system_timer_current_timeEv>:
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <_ZN5codal25system_timer_current_timeEv+0x18>)
{
 800bc16:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800bc18:	681c      	ldr	r4, [r3, #0]
 800bc1a:	b12c      	cbz	r4, 800bc28 <_ZN5codal25system_timer_current_timeEv+0x14>
    syncRequest();
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	4798      	blx	r3
    return currentTime;
 800bc24:	6860      	ldr	r0, [r4, #4]
        return 0;

    return system_timer->getTime();
}
 800bc26:	bd10      	pop	{r4, pc}
        return 0;
 800bc28:	4620      	mov	r0, r4
}
 800bc2a:	bd10      	pop	{r4, pc}
 800bc2c:	20001648 	.word	0x20001648

0800bc30 <_ZN5codal28system_timer_current_time_usEv>:
  *
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
    if(system_timer == NULL)
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <_ZN5codal28system_timer_current_time_usEv+0x18>)
{
 800bc32:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800bc34:	681c      	ldr	r4, [r3, #0]
 800bc36:	b12c      	cbz	r4, 800bc44 <_ZN5codal28system_timer_current_time_usEv+0x14>
    syncRequest();
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	4798      	blx	r3
    return currentTimeUs;
 800bc40:	68a0      	ldr	r0, [r4, #8]
        return 0;

    return system_timer->getTimeUs();
}
 800bc42:	bd10      	pop	{r4, pc}
        return 0;
 800bc44:	4620      	mov	r0, r4
}
 800bc46:	bd10      	pop	{r4, pc}
 800bc48:	20001648 	.word	0x20001648

0800bc4c <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 800bc4c:	b530      	push	{r4, r5, lr}
    if(system_timer == NULL)
 800bc4e:	4b08      	ldr	r3, [pc, #32]	; (800bc70 <_ZN5codal27system_timer_event_every_usEmtt+0x24>)
{
 800bc50:	b083      	sub	sp, #12
    if(system_timer == NULL)
 800bc52:	681c      	ldr	r4, [r3, #0]
 800bc54:	b14c      	cbz	r4, 800bc6a <_ZN5codal27system_timer_event_every_usEmtt+0x1e>
    return setEvent(period, id, value, true);
 800bc56:	2501      	movs	r5, #1
 800bc58:	4613      	mov	r3, r2
 800bc5a:	9500      	str	r5, [sp, #0]
 800bc5c:	460a      	mov	r2, r1
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff ff03 	bl	800ba6c <_ZN5codal5Timer8setEventEmttb>
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
}
 800bc66:	b003      	add	sp, #12
 800bc68:	bd30      	pop	{r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 800bc6a:	4802      	ldr	r0, [pc, #8]	; (800bc74 <_ZN5codal27system_timer_event_every_usEmtt+0x28>)
 800bc6c:	e7fb      	b.n	800bc66 <_ZN5codal27system_timer_event_every_usEmtt+0x1a>
 800bc6e:	bf00      	nop
 800bc70:	20001648 	.word	0x20001648
 800bc74:	fffffc16 	.word	0xfffffc16

0800bc78 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 800bc78:	b082      	sub	sp, #8
        }
 800bc7a:	4803      	ldr	r0, [pc, #12]	; (800bc88 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
        virtual int send(Event)
 800bc7c:	ab02      	add	r3, sp, #8
 800bc7e:	e903 0006 	stmdb	r3, {r1, r2}
        }
 800bc82:	b002      	add	sp, #8
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	fffffc16 	.word	0xfffffc16

0800bc8c <_ZN5codal10MessageBus9elementAtEi>:
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800bc8c:	2900      	cmp	r1, #0
    Listener *l = listeners;
 800bc8e:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 800bc90:	dd05      	ble.n	800bc9e <_ZN5codal10MessageBus9elementAtEi+0x12>
    {
        if (l == NULL)
 800bc92:	b908      	cbnz	r0, 800bc98 <_ZN5codal10MessageBus9elementAtEi+0xc>
 800bc94:	e004      	b.n	800bca0 <_ZN5codal10MessageBus9elementAtEi+0x14>
 800bc96:	b110      	cbz	r0, 800bc9e <_ZN5codal10MessageBus9elementAtEi+0x12>
    while (n > 0)
 800bc98:	3901      	subs	r1, #1
            return NULL;

        n--;
        l = l->next;
 800bc9a:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 800bc9c:	d1fb      	bne.n	800bc96 <_ZN5codal10MessageBus9elementAtEi+0xa>
    }

    return l;
}
 800bc9e:	4770      	bx	lr
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop

0800bca4 <_ZN5codal14CodalComponentD1Ev>:
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800bca4:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800bca6:	b510      	push	{r4, lr}
 800bca8:	4604      	mov	r4, r0
        {
 800bcaa:	4b03      	ldr	r3, [pc, #12]	; (800bcb8 <_ZN5codal14CodalComponentD1Ev+0x14>)
            status = 0;
 800bcac:	80c2      	strh	r2, [r0, #6]
        {
 800bcae:	6003      	str	r3, [r0, #0]
            removeComponent();
 800bcb0:	f7fe ffac 	bl	800ac0c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	bd10      	pop	{r4, pc}
 800bcb8:	0800d668 	.word	0x0800d668

0800bcbc <_ZN5codal14CodalComponentD0Ev>:
            status = 0;
 800bcbc:	2200      	movs	r2, #0
        virtual ~CodalComponent()
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	4604      	mov	r4, r0
        {
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <_ZN5codal14CodalComponentD0Ev+0x1c>)
            status = 0;
 800bcc4:	80c2      	strh	r2, [r0, #6]
        {
 800bcc6:	6003      	str	r3, [r0, #0]
            removeComponent();
 800bcc8:	f7fe ffa0 	bl	800ac0c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7f8 fa89 	bl	80041e4 <_ZdlPv>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	bd10      	pop	{r4, pc}
 800bcd6:	bf00      	nop
 800bcd8:	0800d668 	.word	0x0800d668

0800bcdc <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800bcdc:	b470      	push	{r4, r5, r6}
 800bcde:	460c      	mov	r4, r1
 800bce0:	b085      	sub	sp, #20
 800bce2:	4606      	mov	r6, r0
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 800bce4:	6849      	ldr	r1, [r1, #4]
 800bce6:	6820      	ldr	r0, [r4, #0]
 800bce8:	ac02      	add	r4, sp, #8
 800bcea:	c403      	stmia	r4!, {r0, r1}
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800bcec:	4669      	mov	r1, sp

        (o->*m)(e);
 800bcee:	9c03      	ldr	r4, [sp, #12]
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800bcf0:	e881 000c 	stmia.w	r1, {r2, r3}
        (o->*m)(e);
 800bcf4:	1065      	asrs	r5, r4, #1
 800bcf6:	07e3      	lsls	r3, r4, #31
 800bcf8:	bf45      	ittet	mi
 800bcfa:	5972      	ldrmi	r2, [r6, r5]
 800bcfc:	9b02      	ldrmi	r3, [sp, #8]
 800bcfe:	9b02      	ldrpl	r3, [sp, #8]
 800bd00:	58d3      	ldrmi	r3, [r2, r3]
 800bd02:	1970      	adds	r0, r6, r5
 800bd04:	c906      	ldmia	r1, {r1, r2}
    }
 800bd06:	b005      	add	sp, #20
 800bd08:	bc70      	pop	{r4, r5, r6}
        (o->*m)(e);
 800bd0a:	4718      	bx	r3

0800bd0c <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d03a      	beq.n	800bd86 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x7a>
{
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    l = listeners;
 800bd12:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	d033      	beq.n	800bd80 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
 800bd18:	460d      	mov	r5, r1
    int removed = 0;
 800bd1a:	2700      	movs	r7, #0
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800bd1c:	4e1b      	ldr	r6, [pc, #108]	; (800bd8c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x80>)
 800bd1e:	e005      	b.n	800bd2c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800bd20:	68a2      	ldr	r2, [r4, #8]
 800bd22:	68ab      	ldr	r3, [r5, #8]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d00d      	beq.n	800bd44 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x38>
        l = l->next;
 800bd28:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bd2a:	b1b4      	cbz	r4, 800bd5a <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x4e>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 800bd2c:	88aa      	ldrh	r2, [r5, #4]
 800bd2e:	88a3      	ldrh	r3, [r4, #4]
 800bd30:	4053      	eors	r3, r2
 800bd32:	0799      	lsls	r1, r3, #30
 800bd34:	d4f8      	bmi.n	800bd28 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800bd36:	0792      	lsls	r2, r2, #30
 800bd38:	d5f2      	bpl.n	800bd20 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
 800bd3a:	68a9      	ldr	r1, [r5, #8]
 800bd3c:	68a0      	ldr	r0, [r4, #8]
 800bd3e:	f000 fad1 	bl	800c2e4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800bd42:	b178      	cbz	r0, 800bd64 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x58>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800bd44:	882b      	ldrh	r3, [r5, #0]
 800bd46:	b98b      	cbnz	r3, 800bd6c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x60>
 800bd48:	886b      	ldrh	r3, [r5, #2]
 800bd4a:	b9ab      	cbnz	r3, 800bd78 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6c>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800bd4c:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 800bd4e:	3701      	adds	r7, #1
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800bd50:	4333      	orrs	r3, r6
 800bd52:	80a3      	strh	r3, [r4, #4]
        l = l->next;
 800bd54:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bd56:	2c00      	cmp	r4, #0
 800bd58:	d1e8      	bne.n	800bd2c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
    if (removed > 0)
 800bd5a:	2f00      	cmp	r7, #0
        return DEVICE_OK;
 800bd5c:	bfc8      	it	gt
 800bd5e:	4620      	movgt	r0, r4
    if (removed > 0)
 800bd60:	dd0e      	ble.n	800bd80 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x74>
}
 800bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800bd64:	88ab      	ldrh	r3, [r5, #4]
 800bd66:	079b      	lsls	r3, r3, #30
 800bd68:	d4de      	bmi.n	800bd28 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800bd6a:	e7d9      	b.n	800bd20 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800bd6c:	8822      	ldrh	r2, [r4, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d1da      	bne.n	800bd28 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800bd72:	886b      	ldrh	r3, [r5, #2]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0e9      	beq.n	800bd4c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
 800bd78:	8862      	ldrh	r2, [r4, #2]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d1d4      	bne.n	800bd28 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800bd7e:	e7e5      	b.n	800bd4c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x40>
        return DEVICE_INVALID_PARAMETER;
 800bd80:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800bd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_INVALID_PARAMETER;
 800bd86:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800bd8a:	4770      	bx	lr
 800bd8c:	ffff8000 	.word	0xffff8000

0800bd90 <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
    if (newListener == NULL)
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d06b      	beq.n	800be6c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xdc>
{
 800bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
    l = listeners;
 800bd96:	6944      	ldr	r4, [r0, #20]
{
 800bd98:	b083      	sub	sp, #12
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	4606      	mov	r6, r0
    while (l != NULL)
 800bd9e:	b93c      	cbnz	r4, 800bdb0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
 800bda0:	e060      	b.n	800be64 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd4>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800bda2:	88a3      	ldrh	r3, [r4, #4]
 800bda4:	0798      	lsls	r0, r3, #30
 800bda6:	d508      	bpl.n	800bdba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x2a>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800bda8:	4291      	cmp	r1, r2
 800bdaa:	d012      	beq.n	800bdd2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
        l = l->next;
 800bdac:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bdae:	b1cc      	cbz	r4, 800bde4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x54>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800bdb0:	88ab      	ldrh	r3, [r5, #4]
 800bdb2:	6821      	ldr	r1, [r4, #0]
 800bdb4:	079f      	lsls	r7, r3, #30
 800bdb6:	682a      	ldr	r2, [r5, #0]
 800bdb8:	d4f3      	bmi.n	800bda2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800bdba:	4291      	cmp	r1, r2
 800bdbc:	d1f6      	bne.n	800bdac <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
 800bdbe:	68a2      	ldr	r2, [r4, #8]
 800bdc0:	68ab      	ldr	r3, [r5, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d1f2      	bne.n	800bdac <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800bdc6:	88a3      	ldrh	r3, [r4, #4]
 800bdc8:	041a      	lsls	r2, r3, #16
 800bdca:	d447      	bmi.n	800be5c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xcc>
            return DEVICE_NOT_SUPPORTED;
 800bdcc:	4829      	ldr	r0, [pc, #164]	; (800be74 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
}
 800bdce:	b003      	add	sp, #12
 800bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800bdd2:	68a9      	ldr	r1, [r5, #8]
 800bdd4:	68a0      	ldr	r0, [r4, #8]
 800bdd6:	f000 fa85 	bl	800c2e4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d1f3      	bne.n	800bdc6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
        l = l->next;
 800bdde:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800bde0:	2c00      	cmp	r4, #0
 800bde2:	d1e5      	bne.n	800bdb0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
    if (listeners == NULL)
 800bde4:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800bde8:	882a      	ldrh	r2, [r5, #0]
 800bdea:	f1bc 0f00 	cmp.w	ip, #0
 800bdee:	d033      	beq.n	800be58 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
 800bdf0:	4664      	mov	r4, ip
 800bdf2:	4663      	mov	r3, ip
 800bdf4:	e000      	b.n	800bdf8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x68>
 800bdf6:	460b      	mov	r3, r1
    while (l != NULL && l->id < newListener->id)
 800bdf8:	8818      	ldrh	r0, [r3, #0]
 800bdfa:	4290      	cmp	r0, r2
 800bdfc:	d211      	bcs.n	800be22 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
        l = l->next;
 800bdfe:	69d9      	ldr	r1, [r3, #28]
 800be00:	461c      	mov	r4, r3
    while (l != NULL && l->id < newListener->id)
 800be02:	2900      	cmp	r1, #0
 800be04:	d1f7      	bne.n	800bdf6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x66>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800be06:	4563      	cmp	r3, ip
 800be08:	d01d      	beq.n	800be46 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb6>
        newListener->next = p->next;
 800be0a:	69d9      	ldr	r1, [r3, #28]
 800be0c:	61e9      	str	r1, [r5, #28]
        p->next = newListener;
 800be0e:	61dd      	str	r5, [r3, #28]
    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800be10:	2301      	movs	r3, #1
 800be12:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800be16:	4668      	mov	r0, sp
 800be18:	f000 fa20 	bl	800c25c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800be1c:	2000      	movs	r0, #0
}
 800be1e:	b003      	add	sp, #12
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800be22:	d121      	bne.n	800be68 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800be24:	886f      	ldrh	r7, [r5, #2]
 800be26:	8859      	ldrh	r1, [r3, #2]
 800be28:	42b9      	cmp	r1, r7
 800be2a:	d304      	bcc.n	800be36 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa6>
 800be2c:	e01c      	b.n	800be68 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800be2e:	884c      	ldrh	r4, [r1, #2]
 800be30:	42bc      	cmp	r4, r7
 800be32:	d2e8      	bcs.n	800be06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800be34:	460b      	mov	r3, r1
        l = l->next;
 800be36:	69d9      	ldr	r1, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800be38:	2900      	cmp	r1, #0
 800be3a:	d0e4      	beq.n	800be06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
 800be3c:	880c      	ldrh	r4, [r1, #0]
 800be3e:	4284      	cmp	r4, r0
 800be40:	d0f5      	beq.n	800be2e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x9e>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800be42:	4563      	cmp	r3, ip
 800be44:	d1e1      	bne.n	800be0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800be46:	8819      	ldrh	r1, [r3, #0]
 800be48:	428a      	cmp	r2, r1
 800be4a:	d304      	bcc.n	800be56 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
 800be4c:	d1dd      	bne.n	800be0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
 800be4e:	8858      	ldrh	r0, [r3, #2]
 800be50:	8869      	ldrh	r1, [r5, #2]
 800be52:	4288      	cmp	r0, r1
 800be54:	d9d9      	bls.n	800be0a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
        newListener->next = p;
 800be56:	61eb      	str	r3, [r5, #28]
        listeners = newListener;
 800be58:	6175      	str	r5, [r6, #20]
 800be5a:	e7d9      	b.n	800be10 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x80>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 800be5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800be60:	80a3      	strh	r3, [r4, #4]
 800be62:	e7b3      	b.n	800bdcc <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3c>
 800be64:	880a      	ldrh	r2, [r1, #0]
 800be66:	e7f7      	b.n	800be58 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc8>
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800be68:	4623      	mov	r3, r4
 800be6a:	e7cc      	b.n	800be06 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x76>
        return DEVICE_INVALID_PARAMETER;
 800be6c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	fffffc16 	.word	0xfffffc16

0800be78 <_Z14async_callbackPv>:
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800be78:	8883      	ldrh	r3, [r0, #4]
{
 800be7a:	b570      	push	{r4, r5, r6, lr}
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800be7c:	075a      	lsls	r2, r3, #29
{
 800be7e:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800be80:	d503      	bpl.n	800be8a <_Z14async_callbackPv+0x12>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 800be82:	069e      	lsls	r6, r3, #26
 800be84:	d428      	bmi.n	800bed8 <_Z14async_callbackPv+0x60>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 800be86:	06dd      	lsls	r5, r3, #27
 800be88:	d42d      	bmi.n	800bee6 <_Z14async_callbackPv+0x6e>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 800be8a:	f043 0304 	orr.w	r3, r3, #4
 800be8e:	80a3      	strh	r3, [r4, #4]
 800be90:	f104 0510 	add.w	r5, r4, #16
 800be94:	e012      	b.n	800bebc <_Z14async_callbackPv+0x44>
            listener->cb_param(listener->evt, listener->cb_arg);
 800be96:	68e2      	ldr	r2, [r4, #12]
 800be98:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800be9a:	88a2      	ldrh	r2, [r4, #4]
 800be9c:	06d3      	lsls	r3, r2, #27
 800be9e:	d518      	bpl.n	800bed2 <_Z14async_callbackPv+0x5a>
 800bea0:	69a3      	ldr	r3, [r4, #24]
 800bea2:	b1b3      	cbz	r3, 800bed2 <_Z14async_callbackPv+0x5a>
            listener->evt = item->evt;
 800bea4:	e893 0003 	ldmia.w	r3, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800bea8:	689a      	ldr	r2, [r3, #8]
            listener->evt = item->evt;
 800beaa:	e885 0003 	stmia.w	r5, {r0, r1}
            delete item;
 800beae:	4618      	mov	r0, r3
            listener->evt_queue = listener->evt_queue->next;
 800beb0:	61a2      	str	r2, [r4, #24]
            delete item;
 800beb2:	f7f8 f997 	bl	80041e4 <_ZdlPv>
            schedule();
 800beb6:	f7ff fb61 	bl	800b57c <_ZN5codal8scheduleEv>
 800beba:	88a3      	ldrh	r3, [r4, #4]
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800bebc:	0799      	lsls	r1, r3, #30
 800bebe:	68a6      	ldr	r6, [r4, #8]
 800bec0:	d40b      	bmi.n	800beda <_Z14async_callbackPv+0x62>
            listener->cb_param(listener->evt, listener->cb_arg);
 800bec2:	e895 0003 	ldmia.w	r5, {r0, r1}
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 800bec6:	07da      	lsls	r2, r3, #31
 800bec8:	d4e5      	bmi.n	800be96 <_Z14async_callbackPv+0x1e>
            listener->cb(listener->evt);
 800beca:	47b0      	blx	r6
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800becc:	88a2      	ldrh	r2, [r4, #4]
 800bece:	06d3      	lsls	r3, r2, #27
 800bed0:	d4e6      	bmi.n	800bea0 <_Z14async_callbackPv+0x28>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 800bed2:	f022 0204 	bic.w	r2, r2, #4
 800bed6:	80a2      	strh	r2, [r4, #4]
}
 800bed8:	bd70      	pop	{r4, r5, r6, pc}
            listener->cb_method->fire(listener->evt);
 800beda:	e895 0006 	ldmia.w	r5, {r1, r2}
 800bede:	4630      	mov	r0, r6
 800bee0:	f000 f9f2 	bl	800c2c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 800bee4:	e7d9      	b.n	800be9a <_Z14async_callbackPv+0x22>
            listener->queue(listener->evt);
 800bee6:	3410      	adds	r4, #16
 800bee8:	e894 0006 	ldmia.w	r4, {r1, r2}
}
 800beec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            listener->queue(listener->evt);
 800bef0:	f7ff bd64 	b.w	800b9bc <_ZN5codal8Listener5queueENS_5EventE>

0800bef4 <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	4b1b      	ldr	r3, [pc, #108]	; (800bf68 <_ZN5codal10MessageBusD1Ev+0x74>)
 800befa:	b08a      	sub	sp, #40	; 0x28
 800befc:	f103 0208 	add.w	r2, r3, #8
 800bf00:	3328      	adds	r3, #40	; 0x28
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	60a3      	str	r3, [r4, #8]
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800bf06:	a806      	add	r0, sp, #24
 800bf08:	f000 f9c2 	bl	800c290 <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800bf0c:	230f      	movs	r3, #15
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
 800bf0e:	2018      	movs	r0, #24
        this->id = id;
 800bf10:	9302      	str	r3, [sp, #8]
        this->cb_method = new MemberFunctionCallback(object, method);
 800bf12:	f7f8 f965 	bl	80041e0 <_Znwj>
 800bf16:	2500      	movs	r5, #0
 800bf18:	4a14      	ldr	r2, [pc, #80]	; (800bf6c <_ZN5codal10MessageBusD1Ev+0x78>)
        this->object = object;
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	e9cd 2500 	strd	r2, r5, [sp]
        memcpy(this->method, &method, sizeof(method));
 800bf20:	466a      	mov	r2, sp
 800bf22:	4603      	mov	r3, r0
        this->cb_arg = NULL;
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bf24:	2612      	movs	r6, #18
        this->object = object;
 800bf26:	f841 4b0c 	str.w	r4, [r1], #12
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 800bf2a:	60c5      	str	r5, [r0, #12]
 800bf2c:	604d      	str	r5, [r1, #4]
        memcpy(this->method, &method, sizeof(method));
 800bf2e:	ca03      	ldmia	r2!, {r0, r1}
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bf30:	4a0f      	ldr	r2, [pc, #60]	; (800bf70 <_ZN5codal10MessageBusD1Ev+0x7c>)
        memcpy(this->method, &method, sizeof(method));
 800bf32:	6058      	str	r0, [r3, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bf34:	615a      	str	r2, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800bf36:	6099      	str	r1, [r3, #8]
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
        remove(&listener);
 800bf38:	4620      	mov	r0, r4
 800bf3a:	a902      	add	r1, sp, #8
        this->cb_arg = NULL;
 800bf3c:	e9cd 3504 	strd	r3, r5, [sp, #16]
        this->evt_queue = NULL;
        this->next = NULL;
 800bf40:	e9cd 5508 	strd	r5, r5, [sp, #32]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bf44:	f8ad 600c 	strh.w	r6, [sp, #12]
 800bf48:	f7ff fee0 	bl	800bd0c <_ZN5codal10MessageBus6removeEPNS_8ListenerE>
        Listener listener(id, value, object, handler);
 800bf4c:	a802      	add	r0, sp, #8
 800bf4e:	f7ff fd2b 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
        {
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <_ZN5codal10MessageBusD1Ev+0x80>)
            removeComponent();
 800bf54:	f104 0008 	add.w	r0, r4, #8
            status = 0;
 800bf58:	81e5      	strh	r5, [r4, #14]
        {
 800bf5a:	60a3      	str	r3, [r4, #8]
            removeComponent();
 800bf5c:	f7fe fe56 	bl	800ac0c <_ZN5codal14CodalComponent15removeComponentEv>
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800bf60:	4620      	mov	r0, r4
 800bf62:	b00a      	add	sp, #40	; 0x28
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	bf00      	nop
 800bf68:	0800d690 	.word	0x0800d690
 800bf6c:	0800c1dd 	.word	0x0800c1dd
 800bf70:	0800bcdd 	.word	0x0800bcdd
 800bf74:	0800d668 	.word	0x0800d668

0800bf78 <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800bf78:	f1a0 0008 	sub.w	r0, r0, #8
 800bf7c:	f7ff bfba 	b.w	800bef4 <_ZN5codal10MessageBusD1Ev>

0800bf80 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 800bf80:	b510      	push	{r4, lr}
 800bf82:	4604      	mov	r4, r0
}
 800bf84:	f7ff ffb6 	bl	800bef4 <_ZN5codal10MessageBusD1Ev>
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f7f8 f92b 	bl	80041e4 <_ZdlPv>
 800bf8e:	4620      	mov	r0, r4
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	bf00      	nop

0800bf94 <_ZThn8_N5codal10MessageBusD0Ev>:
 800bf94:	f1a0 0008 	sub.w	r0, r0, #8
 800bf98:	f7ff bff2 	b.w	800bf80 <_ZN5codal10MessageBusD0Ev>

0800bf9c <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 800bf9c:	b570      	push	{r4, r5, r6, lr}
            this->id = 0;
 800bf9e:	2500      	movs	r5, #0
 800bfa0:	4604      	mov	r4, r0
    class EventModel
 800bfa2:	4a23      	ldr	r2, [pc, #140]	; (800c030 <_ZN5codal10MessageBusC1Ev+0x94>)
        {
 800bfa4:	4b23      	ldr	r3, [pc, #140]	; (800c034 <_ZN5codal10MessageBusC1Ev+0x98>)
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	6002      	str	r2, [r0, #0]
            this->id = 0;
 800bfaa:	e9c0 3502 	strd	r3, r5, [r0, #8]
            addComponent();
 800bfae:	3008      	adds	r0, #8
 800bfb0:	f7fe fdbe 	bl	800ab30 <_ZN5codal14CodalComponent12addComponentEv>
 800bfb4:	4b20      	ldr	r3, [pc, #128]	; (800c038 <_ZN5codal10MessageBusC1Ev+0x9c>)
    this->listeners = NULL;
 800bfb6:	6165      	str	r5, [r4, #20]
MessageBus::MessageBus()
 800bfb8:	f103 0220 	add.w	r2, r3, #32
 800bfbc:	60a2      	str	r2, [r4, #8]
 800bfbe:	6023      	str	r3, [r4, #0]
    this->evt_queue_tail = NULL;
 800bfc0:	e9c4 5506 	strd	r5, r5, [r4, #24]
    this->queueLength = 0;
 800bfc4:	8465      	strh	r5, [r4, #34]	; 0x22
        Listener *newListener = new Listener(id, value, object, handler, flags);
 800bfc6:	2020      	movs	r0, #32
 800bfc8:	f7f8 f90a 	bl	80041e0 <_Znwj>
 800bfcc:	4606      	mov	r6, r0
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800bfce:	3010      	adds	r0, #16
 800bfd0:	f000 f95e 	bl	800c290 <_ZN5codal5EventC1Ev>
        this->id = id;
 800bfd4:	4b19      	ldr	r3, [pc, #100]	; (800c03c <_ZN5codal10MessageBusC1Ev+0xa0>)
        this->cb_method = new MemberFunctionCallback(object, method);
 800bfd6:	2018      	movs	r0, #24
        this->id = id;
 800bfd8:	6033      	str	r3, [r6, #0]
        this->cb_method = new MemberFunctionCallback(object, method);
 800bfda:	f7f8 f901 	bl	80041e0 <_Znwj>
        this->object = object;
 800bfde:	4602      	mov	r2, r0
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f842 4b0c 	str.w	r4, [r2], #12
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bfe6:	21c2      	movs	r1, #194	; 0xc2
 800bfe8:	60dd      	str	r5, [r3, #12]
 800bfea:	6055      	str	r5, [r2, #4]
        memcpy(this->method, &method, sizeof(method));
 800bfec:	466a      	mov	r2, sp
 800bfee:	4814      	ldr	r0, [pc, #80]	; (800c040 <_ZN5codal10MessageBusC1Ev+0xa4>)
 800bff0:	9501      	str	r5, [sp, #4]
        this->cb_arg = NULL;
 800bff2:	e9c6 3502 	strd	r3, r5, [r6, #8]
        this->next = NULL;
 800bff6:	e9c6 5506 	strd	r5, r5, [r6, #24]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800bffa:	4d12      	ldr	r5, [pc, #72]	; (800c044 <_ZN5codal10MessageBusC1Ev+0xa8>)
 800bffc:	9000      	str	r0, [sp, #0]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800bffe:	80b1      	strh	r1, [r6, #4]
 800c000:	615d      	str	r5, [r3, #20]
        memcpy(this->method, &method, sizeof(method));
 800c002:	ca03      	ldmia	r2!, {r0, r1}
 800c004:	6058      	str	r0, [r3, #4]
 800c006:	6099      	str	r1, [r3, #8]
        if(add(newListener) == DEVICE_OK)
 800c008:	4620      	mov	r0, r4
 800c00a:	4631      	mov	r1, r6
 800c00c:	f7ff fec0 	bl	800bd90 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800c010:	b930      	cbnz	r0, 800c020 <_ZN5codal10MessageBusC1Ev+0x84>
    if(EventModel::defaultEventBus == NULL)
 800c012:	4b0d      	ldr	r3, [pc, #52]	; (800c048 <_ZN5codal10MessageBusC1Ev+0xac>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	b902      	cbnz	r2, 800c01a <_ZN5codal10MessageBusC1Ev+0x7e>
        EventModel::defaultEventBus = this;
 800c018:	601c      	str	r4, [r3, #0]
}
 800c01a:	4620      	mov	r0, r4
 800c01c:	b002      	add	sp, #8
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
        delete newListener;
 800c020:	4630      	mov	r0, r6
 800c022:	f7ff fcc1 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800c026:	4630      	mov	r0, r6
 800c028:	f7f8 f8dc 	bl	80041e4 <_ZdlPv>
 800c02c:	e7f1      	b.n	800c012 <_ZN5codal10MessageBusC1Ev+0x76>
 800c02e:	bf00      	nop
 800c030:	0800d684 	.word	0x0800d684
 800c034:	0800d668 	.word	0x0800d668
 800c038:	0800d698 	.word	0x0800d698
 800c03c:	0002000f 	.word	0x0002000f
 800c040:	0800c1dd 	.word	0x0800c1dd
 800c044:	0800bcdd 	.word	0x0800bcdd
 800c048:	2000164c 	.word	0x2000164c

0800c04c <_ZN5codal10MessageBus12dequeueEventEv>:
{
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4604      	mov	r4, r0
    target_disable_irq();
 800c050:	f7f4 fd82 	bl	8000b58 <target_disable_irq>
    if (evt_queue_head != NULL)
 800c054:	69a5      	ldr	r5, [r4, #24]
 800c056:	b12d      	cbz	r5, 800c064 <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 800c058:	68ab      	ldr	r3, [r5, #8]
 800c05a:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 800c05c:	b133      	cbz	r3, 800c06c <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 800c05e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800c060:	3b01      	subs	r3, #1
 800c062:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800c064:	f7f4 fd76 	bl	8000b54 <target_enable_irq>
}
 800c068:	4628      	mov	r0, r5
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 800c06c:	61e3      	str	r3, [r4, #28]
 800c06e:	e7f6      	b.n	800c05e <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800c070 <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800c074:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800c076:	b30c      	cbz	r4, 800c0bc <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x4c>
    int removed = 0;
 800c078:	2700      	movs	r7, #0
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800c07a:	88a3      	ldrh	r3, [r4, #4]
 800c07c:	4680      	mov	r8, r0
 800c07e:	041a      	lsls	r2, r3, #16
    p = NULL;
 800c080:	463e      	mov	r6, r7
 800c082:	69e5      	ldr	r5, [r4, #28]
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800c084:	d406      	bmi.n	800c094 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x24>
 800c086:	4626      	mov	r6, r4
    while (l != NULL)
 800c088:	b195      	cbz	r5, 800c0b0 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x40>
 800c08a:	462c      	mov	r4, r5
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800c08c:	88a3      	ldrh	r3, [r4, #4]
 800c08e:	69e5      	ldr	r5, [r4, #28]
 800c090:	041a      	lsls	r2, r3, #16
 800c092:	d5f8      	bpl.n	800c086 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
 800c094:	075b      	lsls	r3, r3, #29
 800c096:	d4f6      	bmi.n	800c086 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
            if (p == NULL)
 800c098:	b16e      	cbz	r6, 800c0b6 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
                p->next = l->next;
 800c09a:	61f5      	str	r5, [r6, #28]
 800c09c:	69e5      	ldr	r5, [r4, #28]
            delete t;
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7ff fc82 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800c0a4:	4620      	mov	r0, r4
            removed++;
 800c0a6:	3701      	adds	r7, #1
            delete t;
 800c0a8:	f7f8 f89c 	bl	80041e4 <_ZdlPv>
    while (l != NULL)
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	d1ec      	bne.n	800c08a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x1a>
}
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                listeners = l->next;
 800c0b6:	f8c8 5014 	str.w	r5, [r8, #20]
 800c0ba:	e7f0      	b.n	800c09e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x2e>
    int removed = 0;
 800c0bc:	4627      	mov	r7, r4
}
 800c0be:	4638      	mov	r0, r7
 800c0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0c4 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    l = listeners;
 800c0c8:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 800c0ca:	2c00      	cmp	r4, #0
 800c0cc:	d041      	beq.n	800c152 <_ZN5codal10MessageBus7processERNS_5EventEb+0x8e>
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	460d      	mov	r5, r1
    int complete = 1;
 800c0d2:	2701      	movs	r7, #1
                    invoke(async_callback, l);
 800c0d4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800c15c <_ZN5codal10MessageBus7processERNS_5EventEb+0x98>
 800c0d8:	e00c      	b.n	800c0f4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 800c0da:	88a3      	ldrh	r3, [r4, #4]
 800c0dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c0e0:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 800c0e4:	fab3 f383 	clz	r3, r3
 800c0e8:	095b      	lsrs	r3, r3, #5
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800c0ea:	42b3      	cmp	r3, r6
 800c0ec:	d015      	beq.n	800c11a <_ZN5codal10MessageBus7processERNS_5EventEb+0x56>
                complete = 0;
 800c0ee:	2700      	movs	r7, #0
        l = l->next;
 800c0f0:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800c0f2:	b334      	cbz	r4, 800c142 <_ZN5codal10MessageBus7processERNS_5EventEb+0x7e>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 800c0f4:	8823      	ldrh	r3, [r4, #0]
 800c0f6:	8829      	ldrh	r1, [r5, #0]
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	d001      	beq.n	800c100 <_ZN5codal10MessageBus7processERNS_5EventEb+0x3c>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1f7      	bne.n	800c0f0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
 800c100:	8863      	ldrh	r3, [r4, #2]
 800c102:	886a      	ldrh	r2, [r5, #2]
 800c104:	429a      	cmp	r2, r3
 800c106:	d001      	beq.n	800c10c <_ZN5codal10MessageBus7processERNS_5EventEb+0x48>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1f1      	bne.n	800c0f0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
            if (fiber_scheduler_running())
 800c10c:	f7ff f89e 	bl	800b24c <_ZN5codal23fiber_scheduler_runningEv>
 800c110:	2800      	cmp	r0, #0
 800c112:	d1e2      	bne.n	800c0da <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 800c114:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800c116:	42b3      	cmp	r3, r6
 800c118:	d1e9      	bne.n	800c0ee <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
 800c11a:	88a3      	ldrh	r3, [r4, #4]
 800c11c:	041a      	lsls	r2, r3, #16
 800c11e:	d4e6      	bmi.n	800c0ee <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
                l->evt = evt;
 800c120:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c124:	f104 0210 	add.w	r2, r4, #16
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800c128:	065b      	lsls	r3, r3, #25
                l->evt = evt;
 800c12a:	e882 0003 	stmia.w	r2, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800c12e:	d402      	bmi.n	800c136 <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
 800c130:	f7ff f88c 	bl	800b24c <_ZN5codal23fiber_scheduler_runningEv>
 800c134:	b940      	cbnz	r0, 800c148 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>
                    async_callback(l);
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff fe9e 	bl	800be78 <_Z14async_callbackPv>
        l = l->next;
 800c13c:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d1d8      	bne.n	800c0f4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
}
 800c142:	4638      	mov	r0, r7
 800c144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    invoke(async_callback, l);
 800c148:	4621      	mov	r1, r4
 800c14a:	4640      	mov	r0, r8
 800c14c:	f7ff fabe 	bl	800b6cc <_ZN5codal6invokeEPFvPvES0_>
 800c150:	e7ce      	b.n	800c0f0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
    int complete = 1;
 800c152:	2701      	movs	r7, #1
}
 800c154:	4638      	mov	r0, r7
 800c156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15a:	bf00      	nop
 800c15c:	0800be79 	.word	0x0800be79

0800c160 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 800c160:	b5f0      	push	{r4, r5, r6, r7, lr}
    processingComplete = this->process(evt, true);
 800c162:	2201      	movs	r2, #1
{
 800c164:	b083      	sub	sp, #12
 800c166:	4604      	mov	r4, r0
    EventQueueItem *prev = evt_queue_tail;
 800c168:	69c5      	ldr	r5, [r0, #28]
{
 800c16a:	460e      	mov	r6, r1
    processingComplete = this->process(evt, true);
 800c16c:	f7ff ffaa 	bl	800c0c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 800c170:	b910      	cbnz	r0, 800c178 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800c172:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800c174:	2b09      	cmp	r3, #9
 800c176:	d901      	bls.n	800c17c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800c178:	b003      	add	sp, #12
 800c17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 800c17c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c180:	466e      	mov	r6, sp
 800c182:	e886 0003 	stmia.w	r6, {r0, r1}
 800c186:	200c      	movs	r0, #12
 800c188:	f7f8 f82a 	bl	80041e0 <_Znwj>
 800c18c:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c190:	4607      	mov	r7, r0
 800c192:	f000 f887 	bl	800c2a4 <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800c196:	f7f4 fcdf 	bl	8000b58 <target_disable_irq>
    if (prev == NULL)
 800c19a:	b165      	cbz	r5, 800c1b6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x56>
        item->next = prev->next;
 800c19c:	68ab      	ldr	r3, [r5, #8]
 800c19e:	60bb      	str	r3, [r7, #8]
        prev->next = item;
 800c1a0:	60af      	str	r7, [r5, #8]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
    if (item->next == NULL)
 800c1a4:	b15b      	cbz	r3, 800c1be <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5e>
    queueLength++;
 800c1a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	8463      	strh	r3, [r4, #34]	; 0x22
}
 800c1ac:	b003      	add	sp, #12
 800c1ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    target_enable_irq();
 800c1b2:	f7f4 bccf 	b.w	8000b54 <target_enable_irq>
        item->next = evt_queue_head;
 800c1b6:	69a3      	ldr	r3, [r4, #24]
        evt_queue_head = item;
 800c1b8:	61a7      	str	r7, [r4, #24]
        item->next = evt_queue_head;
 800c1ba:	60bb      	str	r3, [r7, #8]
 800c1bc:	e7f2      	b.n	800c1a4 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x44>
        evt_queue_tail = item;
 800c1be:	61e7      	str	r7, [r4, #28]
 800c1c0:	e7f1      	b.n	800c1a6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>
 800c1c2:	bf00      	nop

0800c1c4 <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 800c1c4:	b500      	push	{lr}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	466b      	mov	r3, sp
 800c1ca:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	f7ff ffc6 	bl	800c160 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	b003      	add	sp, #12
 800c1d8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c1dc <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 800c1dc:	b530      	push	{r4, r5, lr}
 800c1de:	4605      	mov	r5, r0
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	ab02      	add	r3, sp, #8
 800c1e4:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 800c1e8:	f7ff ff42 	bl	800c070 <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f7ff ff2d 	bl	800c04c <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800c1f2:	b190      	cbz	r0, 800c21a <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	e004      	b.n	800c202 <_ZN5codal10MessageBus4idleENS_5EventE+0x26>
        item = this->dequeueEvent();
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f7ff ff27 	bl	800c04c <_ZN5codal10MessageBus12dequeueEventEv>
    while (item)
 800c1fe:	4604      	mov	r4, r0
 800c200:	b158      	cbz	r0, 800c21a <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
        this->process(item->evt);
 800c202:	2200      	movs	r2, #0
 800c204:	4621      	mov	r1, r4
 800c206:	4628      	mov	r0, r5
 800c208:	f7ff ff5c 	bl	800c0c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7f7 ffe9 	bl	80041e4 <_ZdlPv>
        if(!scheduler_runqueue_empty())
 800c212:	f7ff f8c3 	bl	800b39c <_ZN5codal24scheduler_runqueue_emptyEv>
 800c216:	2800      	cmp	r0, #0
 800c218:	d1ee      	bne.n	800c1f8 <_ZN5codal10MessageBus4idleENS_5EventE+0x1c>
}
 800c21a:	b003      	add	sp, #12
 800c21c:	bd30      	pop	{r4, r5, pc}
 800c21e:	bf00      	nop

0800c220 <_ZN5codal19allocateNotifyEventEv>:
    return userNotifyId++;
 800c220:	4b02      	ldr	r3, [pc, #8]	; (800c22c <_ZN5codal19allocateNotifyEventEv+0xc>)
 800c222:	8818      	ldrh	r0, [r3, #0]
 800c224:	1c42      	adds	r2, r0, #1
 800c226:	801a      	strh	r2, [r3, #0]
}
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20001008 	.word	0x20001008

0800c230 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>:
/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
    if(EventModel::defaultEventBus)
 800c230:	4b08      	ldr	r3, [pc, #32]	; (800c254 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x24>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	b13b      	cbz	r3, 800c246 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x16>
        EventModel::defaultEventBus->send(*this);
 800c236:	6819      	ldr	r1, [r3, #0]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800c238:	b410      	push	{r4}
 800c23a:	4a07      	ldr	r2, [pc, #28]	; (800c258 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x28>)
        EventModel::defaultEventBus->send(*this);
 800c23c:	680c      	ldr	r4, [r1, #0]
 800c23e:	4294      	cmp	r4, r2
 800c240:	d102      	bne.n	800c248 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x18>
}
 800c242:	bc10      	pop	{r4}
 800c244:	4770      	bx	lr
 800c246:	4770      	bx	lr
        EventModel::defaultEventBus->send(*this);
 800c248:	e890 0006 	ldmia.w	r0, {r1, r2}
 800c24c:	4618      	mov	r0, r3
 800c24e:	4623      	mov	r3, r4
}
 800c250:	bc10      	pop	{r4}
        EventModel::defaultEventBus->send(*this);
 800c252:	4718      	bx	r3
 800c254:	2000164c 	.word	0x2000164c
 800c258:	0800bc79 	.word	0x0800bc79

0800c25c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800c25c:	b538      	push	{r3, r4, r5, lr}
    this->source = source;
 800c25e:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800c260:	8042      	strh	r2, [r0, #2]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800c262:	4604      	mov	r4, r0
 800c264:	461d      	mov	r5, r3
    this->timestamp = system_timer_current_time();
 800c266:	f7ff fcd5 	bl	800bc14 <_ZN5codal25system_timer_current_timeEv>
 800c26a:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 800c26c:	b115      	cbz	r5, 800c274 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x18>
 800c26e:	4620      	mov	r0, r4
 800c270:	f7ff ffde 	bl	800c230 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
}
 800c274:	4620      	mov	r0, r4
 800c276:	bd38      	pop	{r3, r4, r5, pc}

0800c278 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800c27e:	4604      	mov	r4, r0
      this->source = source;
 800c280:	8001      	strh	r1, [r0, #0]
      this->value = value;
 800c282:	8042      	strh	r2, [r0, #2]
      this->timestamp = currentTimeUs;
 800c284:	6043      	str	r3, [r0, #4]
      if(mode != CREATE_ONLY)
 800c286:	b10d      	cbz	r5, 800c28c <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
 800c288:	f7ff ffd2 	bl	800c230 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
  }
 800c28c:	4620      	mov	r0, r4
 800c28e:	bd38      	pop	{r3, r4, r5, pc}

0800c290 <_ZN5codal5EventC1Ev>:
    this->source = 0;
 800c290:	2300      	movs	r3, #0
Event::Event()
 800c292:	b510      	push	{r4, lr}
    this->source = 0;
 800c294:	6003      	str	r3, [r0, #0]
Event::Event()
 800c296:	4604      	mov	r4, r0
    this->timestamp = system_timer_current_time();
 800c298:	f7ff fcbc 	bl	800bc14 <_ZN5codal25system_timer_current_timeEv>
 800c29c:	6060      	str	r0, [r4, #4]
}
 800c29e:	4620      	mov	r0, r4
 800c2a0:	bd10      	pop	{r4, pc}
 800c2a2:	bf00      	nop

0800c2a4 <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800c2a4:	b570      	push	{r4, r5, r6, lr}
    this->source = 0;
 800c2a6:	2600      	movs	r6, #0
EventQueueItem::EventQueueItem(Event evt)
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	466d      	mov	r5, sp
    this->source = 0;
 800c2ae:	6006      	str	r6, [r0, #0]
EventQueueItem::EventQueueItem(Event evt)
 800c2b0:	e885 0006 	stmia.w	r5, {r1, r2}
    this->timestamp = system_timer_current_time();
 800c2b4:	f7ff fcae 	bl	800bc14 <_ZN5codal25system_timer_current_timeEv>
{
    this->evt = evt;
 800c2b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2bc:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
}
 800c2c0:	4620      	mov	r0, r4
    this->next = NULL;
 800c2c2:	60a6      	str	r6, [r4, #8]
}
 800c2c4:	b002      	add	sp, #8
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}

0800c2c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800c2c8:	b410      	push	{r4}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	466b      	mov	r3, sp
    invoke(object, method, e);
 800c2ce:	6944      	ldr	r4, [r0, #20]
{
 800c2d0:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800c2d4:	46a4      	mov	ip, r4
 800c2d6:	cb0c      	ldmia	r3, {r2, r3}
 800c2d8:	1d01      	adds	r1, r0, #4
 800c2da:	6800      	ldr	r0, [r0, #0]
}
 800c2dc:	b003      	add	sp, #12
 800c2de:	bc10      	pop	{r4}
    invoke(object, method, e);
 800c2e0:	4760      	bx	ip
 800c2e2:	bf00      	nop

0800c2e4 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800c2e4:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800c2e6:	6802      	ldr	r2, [r0, #0]
 800c2e8:	680b      	ldr	r3, [r1, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d001      	beq.n	800c2f2 <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800c2ee:	2000      	movs	r0, #0
}
 800c2f0:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800c2f2:	3104      	adds	r1, #4
 800c2f4:	2210      	movs	r2, #16
 800c2f6:	3004      	adds	r0, #4
 800c2f8:	f7f7 fd4e 	bl	8003d98 <memcmp>
 800c2fc:	fab0 f080 	clz	r0, r0
 800c300:	0940      	lsrs	r0, r0, #5
}
 800c302:	bd08      	pop	{r3, pc}

0800c304 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800c304:	2000      	movs	r0, #0
 800c306:	4770      	bx	lr

0800c308 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800c308:	2000      	movs	r0, #0
 800c30a:	4770      	bx	lr

0800c30c <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800c30c:	2000      	movs	r0, #0
 800c30e:	4770      	bx	lr

0800c310 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	460e      	mov	r6, r1
 800c316:	4615      	mov	r5, r2
 800c318:	f000 fca8 	bl	800cc6c <_ZN5codal3I2CC1ERNS_3PinES2_>
 800c31c:	4b02      	ldr	r3, [pc, #8]	; (800c328 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800c31e:	e9c4 6501 	strd	r6, r5, [r4, #4]
 800c322:	6023      	str	r3, [r4, #0]
        }
 800c324:	4620      	mov	r0, r4
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	0800d6d4 	.word	0x0800d6d4

0800c32c <_ZN5codal3_cm3Pin15getDigitalValueEv>:
    if(status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE))
        return ((TimedInterruptIn *)pin)->read();

    return ((DigitalIn *)pin)->read();
#endif  //  TODO
}
 800c32c:	2001      	movs	r0, #1
 800c32e:	4770      	bx	lr

0800c330 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c330:	7903      	ldrb	r3, [r0, #4]
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	d506      	bpl.n	800c344 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x14>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 800c336:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 800c33a:	bf2c      	ite	cs
 800c33c:	f46f 707a 	mvncs.w	r0, #1000	; 0x3e8
 800c340:	2000      	movcc	r0, #0
 800c342:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800c344:	4800      	ldr	r0, [pc, #0]	; (800c348 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>)
}
 800c346:	4770      	bx	lr
 800c348:	fffffc16 	.word	0xfffffc16

0800c34c <_ZN5codal3_cm3Pin13setServoValueEiii>:
  *         if the given pin does not have analog capability.
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
 800c34c:	7900      	ldrb	r0, [r0, #4]
 800c34e:	f010 0f02 	tst.w	r0, #2
 800c352:	d00c      	beq.n	800c36e <_ZN5codal3_cm3Pin13setServoValueEiii+0x22>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
 800c354:	2900      	cmp	r1, #0
 800c356:	db07      	blt.n	800c368 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800c358:	2a00      	cmp	r2, #0
 800c35a:	dd05      	ble.n	800c368 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800c35c:	2b00      	cmp	r3, #0
    value = value * 1000;

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
 800c35e:	bfd4      	ite	le
 800c360:	f46f 707a 	mvnle.w	r0, #1000	; 0x3e8
 800c364:	2000      	movgt	r0, #0
 800c366:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 800c368:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800c36c:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800c36e:	4801      	ldr	r0, [pc, #4]	; (800c374 <_ZN5codal3_cm3Pin13setServoValueEiii+0x28>)
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	fffffc16 	.word	0xfffffc16

0800c378 <_ZN5codal3_cm3Pin14getAnalogValueEv>:
    }

    //perform a read!
    return (((AnalogIn *)pin)->read_u16() >> 6);
#endif  //  TODO
}
 800c378:	20e1      	movs	r0, #225	; 0xe1
 800c37a:	4770      	bx	lr

0800c37c <_ZN5codal3_cm3Pin7isInputEv>:
  *
  * @return 1 if pin is an analog or digital input, 0 otherwise.
  */
int Pin::isInput()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800c37c:	8980      	ldrh	r0, [r0, #12]
 800c37e:	f000 0005 	and.w	r0, r0, #5
}
 800c382:	3000      	adds	r0, #0
 800c384:	bf18      	it	ne
 800c386:	2001      	movne	r0, #1
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop

0800c38c <_ZN5codal3_cm3Pin8isOutputEv>:
  *
  * @return 1 if pin is an analog or digital output, 0 otherwise.
  */
int Pin::isOutput()
{
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800c38c:	8980      	ldrh	r0, [r0, #12]
 800c38e:	f000 000a 	and.w	r0, r0, #10
}
 800c392:	3000      	adds	r0, #0
 800c394:	bf18      	it	ne
 800c396:	2001      	movne	r0, #1
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop

0800c39c <_ZN5codal3_cm3Pin9isDigitalEv>:
  *
  * @return 1 if pin is digital, 0 otherwise.
  */
int Pin::isDigital()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800c39c:	8980      	ldrh	r0, [r0, #12]
}
 800c39e:	f010 0003 	ands.w	r0, r0, #3
 800c3a2:	bf18      	it	ne
 800c3a4:	2001      	movne	r0, #1
 800c3a6:	4770      	bx	lr

0800c3a8 <_ZN5codal3_cm3Pin8isAnalogEv>:
  *
  * @return 1 if pin is analog, 0 otherwise.
  */
int Pin::isAnalog()
{
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800c3a8:	8980      	ldrh	r0, [r0, #12]
 800c3aa:	f000 000c 	and.w	r0, r0, #12
}
 800c3ae:	3000      	adds	r0, #0
 800c3b0:	bf18      	it	ne
 800c3b2:	2001      	movne	r0, #1
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop

0800c3b8 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 800c3b8:	4800      	ldr	r0, [pc, #0]	; (800c3bc <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 800c3ba:	4770      	bx	lr
 800c3bc:	fffffc16 	.word	0xfffffc16

0800c3c0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 800c3c0:	4800      	ldr	r0, [pc, #0]	; (800c3c4 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 800c3c2:	4770      	bx	lr
 800c3c4:	fffffc16 	.word	0xfffffc16

0800c3c8 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800c3c8:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop

0800c3d0 <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	4605      	mov	r5, r0
    debug_print("pin "); debug_println(value); ////
 800c3d6:	4813      	ldr	r0, [pc, #76]	; (800c424 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x54>)
 800c3d8:	f7f7 fe76 	bl	80040c8 <debug_print>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7f7 fe87 	bl	80040f0 <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c3e2:	792b      	ldrb	r3, [r5, #4]
 800c3e4:	07db      	lsls	r3, r3, #31
 800c3e6:	d51b      	bpl.n	800c420 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x50>
    if (value < 0 || value > 1)
 800c3e8:	2c01      	cmp	r4, #1
 800c3ea:	d816      	bhi.n	800c41a <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4a>
	rcc_periph_clock_enable(RCC_GPIOC);
 800c3ec:	f44f 7041 	mov.w	r0, #772	; 0x304
 800c3f0:	f7f4 fcf0 	bl	8000dd4 <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	480c      	ldr	r0, [pc, #48]	; (800c428 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
 800c3f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f7f4 fd41 	bl	8000e84 <gpio_set_mode>
        gpio_set(GPIOC, GPIO13);
 800c402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c406:	4808      	ldr	r0, [pc, #32]	; (800c428 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
    if (value) {
 800c408:	b91c      	cbnz	r4, 800c412 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
	    gpio_clear(GPIOC, GPIO13);
 800c40a:	f7f4 fccf 	bl	8000dac <gpio_clear>
    return DEVICE_OK;
 800c40e:	4620      	mov	r0, r4
}
 800c410:	bd38      	pop	{r3, r4, r5, pc}
        gpio_set(GPIOC, GPIO13);
 800c412:	f7f4 fcc9 	bl	8000da8 <gpio_set>
 800c416:	2000      	movs	r0, #0
}
 800c418:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_INVALID_PARAMETER;
 800c41a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 800c420:	4802      	ldr	r0, [pc, #8]	; (800c42c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
}
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	0800d6f8 	.word	0x0800d6f8
 800c428:	40011000 	.word	0x40011000
 800c42c:	fffffc16 	.word	0xfffffc16

0800c430 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
{
 800c430:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 800c432:	6803      	ldr	r3, [r0, #0]
 800c434:	4a05      	ldr	r2, [pc, #20]	; (800c44c <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x1c>)
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	4293      	cmp	r3, r2
 800c43a:	d101      	bne.n	800c440 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x10>
 800c43c:	4804      	ldr	r0, [pc, #16]	; (800c450 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x20>)
}
 800c43e:	bd08      	pop	{r3, pc}
    return getAnalogPeriodUs()/1000;
 800c440:	4798      	blx	r3
 800c442:	4b04      	ldr	r3, [pc, #16]	; (800c454 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x24>)
 800c444:	fba3 3000 	umull	r3, r0, r3, r0
 800c448:	0980      	lsrs	r0, r0, #6
}
 800c44a:	bd08      	pop	{r3, pc}
 800c44c:	0800c3c1 	.word	0x0800c3c1
 800c450:	00418936 	.word	0x00418936
 800c454:	10624dd3 	.word	0x10624dd3

0800c458 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
    setPull(pull);
 800c458:	6803      	ldr	r3, [r0, #0]
{
 800c45a:	b570      	push	{r4, r5, r6, lr}
    setPull(pull);
 800c45c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c45e:	4d0a      	ldr	r5, [pc, #40]	; (800c488 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x30>)
{
 800c460:	4604      	mov	r4, r0
 800c462:	42aa      	cmp	r2, r5
 800c464:	d106      	bne.n	800c474 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x1c>
    return getDigitalValue();
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a08      	ldr	r2, [pc, #32]	; (800c48c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    pullMode = pull;
 800c46a:	60a1      	str	r1, [r4, #8]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d107      	bne.n	800c480 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x28>
}
 800c470:	2001      	movs	r0, #1
 800c472:	bd70      	pop	{r4, r5, r6, pc}
    setPull(pull);
 800c474:	4790      	blx	r2
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	4a04      	ldr	r2, [pc, #16]	; (800c48c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
    return getDigitalValue();
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d0f7      	beq.n	800c470 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x18>
 800c480:	4620      	mov	r0, r4
}
 800c482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return getDigitalValue();
 800c486:	4718      	bx	r3
 800c488:	0800c3c9 	.word	0x0800c3c9
 800c48c:	0800c32d 	.word	0x0800c32d

0800c490 <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800c490:	b508      	push	{r3, lr}
    switch(eventType)
 800c492:	2903      	cmp	r1, #3
 800c494:	d817      	bhi.n	800c4c6 <_ZN5codal3_cm3Pin7eventOnEi+0x36>
 800c496:	e8df f001 	tbb	[pc, r1]
 800c49a:	070a      	.short	0x070a
 800c49c:	0207      	.short	0x0207
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 800c49e:	6803      	ldr	r3, [r0, #0]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <_ZN5codal3_cm3Pin7eventOnEi+0x3c>)
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d10b      	bne.n	800c4c0 <_ZN5codal3_cm3Pin7eventOnEi+0x30>
 800c4a8:	2100      	movs	r1, #0
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	bd08      	pop	{r3, pc}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800c4ae:	8983      	ldrh	r3, [r0, #12]
 800c4b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0f8      	beq.n	800c4aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
    this->status = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	8183      	strh	r3, [r0, #12]
}
 800c4bc:	4608      	mov	r0, r1
 800c4be:	bd08      	pop	{r3, pc}
            isTouched();
 800c4c0:	4798      	blx	r3
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	e7f1      	b.n	800c4aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
            return DEVICE_INVALID_PARAMETER;
 800c4c6:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 800c4ca:	e7ee      	b.n	800c4aa <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
 800c4cc:	0800c3b9 	.word	0x0800c3b9

0800c4d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>:
        ret = setAnalogValue(0);
 800c4d0:	6802      	ldr	r2, [r0, #0]
 800c4d2:	4906      	ldr	r1, [pc, #24]	; (800c4ec <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x1c>)
 800c4d4:	68d2      	ldr	r2, [r2, #12]
 800c4d6:	428a      	cmp	r2, r1
 800c4d8:	d106      	bne.n	800c4e8 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x18>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c4da:	7903      	ldrb	r3, [r0, #4]
    return 0;
 800c4dc:	4804      	ldr	r0, [pc, #16]	; (800c4f0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x20>)
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800c4de:	f013 0f01 	tst.w	r3, #1
    return 0;
 800c4e2:	bf18      	it	ne
 800c4e4:	2000      	movne	r0, #0
}
 800c4e6:	4770      	bx	lr
        ret = setAnalogValue(0);
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4710      	bx	r2
 800c4ec:	0800c331 	.word	0x0800c331
 800c4f0:	fffffc16 	.word	0xfffffc16

0800c4f4 <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800c4f4:	8983      	ldrh	r3, [r0, #12]
 800c4f6:	071b      	lsls	r3, r3, #28
 800c4f8:	d501      	bpl.n	800c4fe <_ZN5codal3_cm3Pin15setAnalogPeriodEi+0xa>
}
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	4770      	bx	lr
 800c4fe:	f7ff bfe7 	b.w	800c4d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800c502:	bf00      	nop

0800c504 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>:
Pin::Pin(
 800c504:	b430      	push	{r4, r5}
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800c506:	2500      	movs	r5, #0
            this->id = id;
 800c508:	81c1      	strh	r1, [r0, #14]
    rcc(0), port(0), pin() {
 800c50a:	4905      	ldr	r1, [pc, #20]	; (800c520 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x1c>)
            this->status = 0;
 800c50c:	8185      	strh	r5, [r0, #12]
 800c50e:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800c512:	8385      	strh	r5, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 800c514:	6085      	str	r5, [r0, #8]
            this->name = name;
 800c516:	7402      	strb	r2, [r0, #16]
            this->capability = capability;
 800c518:	7103      	strb	r3, [r0, #4]
    rcc(0), port(0), pin() {
 800c51a:	6001      	str	r1, [r0, #0]
}
 800c51c:	bc30      	pop	{r4, r5}
 800c51e:	4770      	bx	lr
 800c520:	0800d708 	.word	0x0800d708

0800c524 <_ZN5codal3_cm3Pin5setupEhh>:
) {
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4604      	mov	r4, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800c52c:	8a80      	ldrh	r0, [r0, #20]
 800c52e:	f7f4 fc51 	bl	8000dd4 <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800c532:	4632      	mov	r2, r6
 800c534:	4629      	mov	r1, r5
 800c536:	8ba3      	ldrh	r3, [r4, #28]
 800c538:	69a0      	ldr	r0, [r4, #24]
}
 800c53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800c53e:	f7f4 bca1 	b.w	8000e84 <gpio_set_mode>
 800c542:	bf00      	nop

0800c544 <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
 800c544:	2000      	movs	r0, #0
 800c546:	4770      	bx	lr

0800c548 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 800c548:	8983      	ldrh	r3, [r0, #12]
 800c54a:	071b      	lsls	r3, r3, #28
 800c54c:	d501      	bpl.n	800c552 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xa>
}
 800c54e:	2000      	movs	r0, #0
 800c550:	4770      	bx	lr
 800c552:	f7ff bfbd 	b.w	800c4d0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
 800c556:	bf00      	nop

0800c558 <_ZN5codal3_cm3SPI12setFrequencyEm>:
            debug_println(""); debug_flush();
        }

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
            needsInit = true;
 800c558:	2301      	movs	r3, #1
            freq = frequency;
 800c55a:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800c55c:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800c560:	2000      	movs	r0, #0
 800c562:	4770      	bx	lr

0800c564 <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800c564:	2300      	movs	r3, #0
            txCh = data;
 800c566:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            rxCh = 0;
 800c56a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800c56e:	4618      	mov	r0, r3
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop

0800c574 <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800c574:	2000      	movs	r0, #0
 800c576:	4770      	bx	lr

0800c578 <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800c578:	b508      	push	{r3, lr}
            needsInit = true;
 800c57a:	2301      	movs	r3, #1
            CODAL_ASSERT(bits == 8);
 800c57c:	2a08      	cmp	r2, #8
            needsInit = true;
 800c57e:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800c582:	d003      	beq.n	800c58c <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800c584:	f240 308d 	movw	r0, #909	; 0x38d
 800c588:	f7f4 fafc 	bl	8000b84 <target_panic>
        }
 800c58c:	2000      	movs	r0, #0
 800c58e:	bd08      	pop	{r3, pc}

0800c590 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            auto pin = p->name;
 800c594:	7c05      	ldrb	r5, [r0, #16]
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c596:	4607      	mov	r7, r0
 800c598:	4688      	mov	r8, r1
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800c59a:	4628      	mov	r0, r5
 800c59c:	4611      	mov	r1, r2
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800c59e:	4616      	mov	r6, r2
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800c5a0:	f000 fa16 	bl	800c9d0 <pinmap_peripheral>
 800c5a4:	4604      	mov	r4, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d016      	beq.n	800c5d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
            auto mode = pinmap_mode(pin, map);
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 fa2d 	bl	800ca0c <pinmap_mode>
            auto cnf = pinmap_cnf(pin, map);
 800c5b2:	4631      	mov	r1, r6
            auto mode = pinmap_mode(pin, map);
 800c5b4:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f000 fa44 	bl	800ca44 <pinmap_cnf>
            p->setup(mode, cnf);
 800c5bc:	4649      	mov	r1, r9
 800c5be:	4602      	mov	r2, r0
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f7ff ffaf 	bl	800c524 <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800c5c6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ca:	d005      	beq.n	800c5d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800c5cc:	4544      	cmp	r4, r8
 800c5ce:	d003      	beq.n	800c5d8 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x48>
 800c5d0:	f240 308d 	movw	r0, #909	; 0x38d
 800c5d4:	f7f4 fad6 	bl	8000b84 <target_panic>
        }
 800c5d8:	4620      	mov	r0, r4
 800c5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5de:	bf00      	nop

0800c5e0 <_ZN5codal3_cm3SPI4initEv.part.1>:
        void SPI::init() {
 800c5e0:	b510      	push	{r4, lr}
            needsInit = false;
 800c5e2:	2100      	movs	r1, #0
        void SPI::init() {
 800c5e4:	4604      	mov	r4, r0
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 800c5e6:	68c0      	ldr	r0, [r0, #12]
            needsInit = false;
 800c5e8:	f884 1020 	strb.w	r1, [r4, #32]
            if (!p) { return 0; }
 800c5ec:	b110      	cbz	r0, 800c5f4 <_ZN5codal3_cm3SPI4initEv.part.1+0x14>
 800c5ee:	4a0e      	ldr	r2, [pc, #56]	; (800c628 <_ZN5codal3_cm3SPI4initEv.part.1+0x48>)
 800c5f0:	f7ff ffce 	bl	800c590 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 800c5f4:	68a0      	ldr	r0, [r4, #8]
            if (!p) { return 0; }
 800c5f6:	b118      	cbz	r0, 800c600 <_ZN5codal3_cm3SPI4initEv.part.1+0x20>
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <_ZN5codal3_cm3SPI4initEv.part.1+0x4c>)
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	f7ff ffc8 	bl	800c590 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 800c600:	6860      	ldr	r0, [r4, #4]
            if (!p) { return 0; }
 800c602:	b118      	cbz	r0, 800c60c <_ZN5codal3_cm3SPI4initEv.part.1+0x2c>
 800c604:	4a0a      	ldr	r2, [pc, #40]	; (800c630 <_ZN5codal3_cm3SPI4initEv.part.1+0x50>)
 800c606:	2100      	movs	r1, #0
 800c608:	f7ff ffc2 	bl	800c590 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 800c60c:	6920      	ldr	r0, [r4, #16]
            if (!p) { return 0; }
 800c60e:	b118      	cbz	r0, 800c618 <_ZN5codal3_cm3SPI4initEv.part.1+0x38>
 800c610:	4a08      	ldr	r2, [pc, #32]	; (800c634 <_ZN5codal3_cm3SPI4initEv.part.1+0x54>)
 800c612:	2100      	movs	r1, #0
 800c614:	f7ff ffbc 	bl	800c590 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
            LOG("SPI instance %p", instance);
 800c618:	4807      	ldr	r0, [pc, #28]	; (800c638 <_ZN5codal3_cm3SPI4initEv.part.1+0x58>)
 800c61a:	f7f7 fd5b 	bl	80040d4 <debug_println>
        }
 800c61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            LOG("SPI instance %p", instance);
 800c622:	f7f7 bcc7 	b.w	8003fb4 <debug_flush>
 800c626:	bf00      	nop
 800c628:	0800da64 	.word	0x0800da64
 800c62c:	0800d98c 	.word	0x0800d98c
 800c630:	0800d9d4 	.word	0x0800d9d4
 800c634:	0800da1c 	.word	0x0800da1c
 800c638:	0800d754 	.word	0x0800d754

0800c63c <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if (!needsInit) { return; }
 800c63e:	f890 3020 	ldrb.w	r3, [r0, #32]
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800c642:	4604      	mov	r4, r0
 800c644:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800c648:	4615      	mov	r5, r2
            if (!needsInit) { return; }
 800c64a:	b963      	cbnz	r3, 800c666 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x2a>
            int res = HAL_OK;
            init();
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
            this->doneHandlerArg = arg;
 800c64c:	e9c4 7606 	strd	r7, r6, [r4, #24]
            if (txSize && rxSize) {
 800c650:	b13d      	cbz	r5, 800c662 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800c652:	9b06      	ldr	r3, [sp, #24]
 800c654:	b12b      	cbz	r3, 800c662 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800c656:	429d      	cmp	r5, r3
 800c658:	d003      	beq.n	800c662 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
 800c65a:	f240 308d 	movw	r0, #909	; 0x38d
 800c65e:	f7f4 fa91 	bl	8000b84 <target_panic>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800c662:	2000      	movs	r0, #0
 800c664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c666:	f7ff ffbb 	bl	800c5e0 <_ZN5codal3_cm3SPI4initEv.part.1>
 800c66a:	e7ef      	b.n	800c64c <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x10>

0800c66c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>:
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	4616      	mov	r6, r2
 800c670:	461d      	mov	r5, r3
            this->nss = NULL;
 800c672:	2300      	movs	r3, #0
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c674:	460f      	mov	r7, r1
 800c676:	4604      	mov	r4, r0
 800c678:	4a0f      	ldr	r2, [pc, #60]	; (800c6b8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x4c>)
            this->miso = &miso;
 800c67a:	e9c0 1601 	strd	r1, r6, [r0, #4]
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800c67e:	6002      	str	r2, [r0, #0]
            this->nss = NULL;
 800c680:	6103      	str	r3, [r0, #16]
            this->sclk = &sclk;
 800c682:	60c5      	str	r5, [r0, #12]
            debug_print("*** codal spi mosi "); debug_print(mosi.name); 
 800c684:	480d      	ldr	r0, [pc, #52]	; (800c6bc <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x50>)
 800c686:	f7f7 fd1f 	bl	80040c8 <debug_print>
 800c68a:	7c38      	ldrb	r0, [r7, #16]
 800c68c:	f7f7 fd04 	bl	8004098 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 800c690:	480b      	ldr	r0, [pc, #44]	; (800c6c0 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x54>)
 800c692:	f7f7 fd19 	bl	80040c8 <debug_print>
 800c696:	7c30      	ldrb	r0, [r6, #16]
 800c698:	f7f7 fcfe 	bl	8004098 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 800c69c:	4809      	ldr	r0, [pc, #36]	; (800c6c4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x58>)
 800c69e:	f7f7 fd13 	bl	80040c8 <debug_print>
 800c6a2:	7c28      	ldrb	r0, [r5, #16]
 800c6a4:	f7f7 fcf8 	bl	8004098 <_Z11debug_printi>
            debug_println(""); debug_flush();
 800c6a8:	4807      	ldr	r0, [pc, #28]	; (800c6c8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x5c>)
 800c6aa:	f7f7 fd13 	bl	80040d4 <debug_println>
 800c6ae:	f7f7 fc81 	bl	8003fb4 <debug_flush>
        }
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0800d790 	.word	0x0800d790
 800c6bc:	0800d764 	.word	0x0800d764
 800c6c0:	0800d778 	.word	0x0800d778
 800c6c4:	0800d780 	.word	0x0800d780
 800c6c8:	0800d5f4 	.word	0x0800d5f4

0800c6cc <_ZN5codal3_cm14alarm_callbackEv>:
        }

        void alarm_callback() {
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <_ZN5codal3_cm14alarm_callbackEv+0xc>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	b108      	cbz	r0, 800c6d6 <_ZN5codal3_cm14alarm_callbackEv+0xa>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 800c6d2:	f7ff ba3b 	b.w	800bb4c <_ZN5codal5Timer7triggerEv>
        }
 800c6d6:	4770      	bx	lr
 800c6d8:	20001650 	.word	0x20001650

0800c6dc <_ZN5codal3_cm5Timer9triggerInEm>:
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 800c6dc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c6e0:	b113      	cbz	r3, 800c6e8 <_ZN5codal3_cm5Timer9triggerInEm+0xc>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	f7f7 be36 	b.w	8004354 <platform_set_alarm>
                trigger_period = t;
 800c6e8:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <_ZN5codal3_cm5Timer9triggerInEm+0x18>)
                debug_println("triggerIn b4 init!");
 800c6ea:	4803      	ldr	r0, [pc, #12]	; (800c6f8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
                trigger_period = t;
 800c6ec:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 800c6ee:	f7f7 bcf1 	b.w	80040d4 <debug_println>
 800c6f2:	bf00      	nop
 800c6f4:	20001658 	.word	0x20001658
 800c6f8:	0800d7b8 	.word	0x0800d7b8

0800c6fc <_ZN5codal3_cm13tick_callbackEv>:
        void tick_callback() {
 800c6fc:	b510      	push	{r4, lr}
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800c6fe:	4c09      	ldr	r4, [pc, #36]	; (800c724 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	b13b      	cbz	r3, 800c714 <_ZN5codal3_cm13tick_callbackEv+0x18>
            CODAL_TIMESTAMP now = millis();
 800c704:	f7f7 fe40 	bl	8004388 <millis>
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 800c708:	4a07      	ldr	r2, [pc, #28]	; (800c728 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
            CODAL_TIMESTAMP now = millis();
 800c70a:	4601      	mov	r1, r0
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 800c70c:	6813      	ldr	r3, [r2, #0]
 800c70e:	3304      	adds	r3, #4
 800c710:	4298      	cmp	r0, r3
 800c712:	d200      	bcs.n	800c716 <_ZN5codal3_cm13tick_callbackEv+0x1a>
        }
 800c714:	bd10      	pop	{r4, pc}
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 800c716:	6820      	ldr	r0, [r4, #0]
        }
 800c718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                last_trigger = now;
 800c71c:	6011      	str	r1, [r2, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 800c71e:	f7ff ba15 	b.w	800bb4c <_ZN5codal5Timer7triggerEv>
 800c722:	bf00      	nop
 800c724:	20001650 	.word	0x20001650
 800c728:	20001654 	.word	0x20001654

0800c72c <_ZN5codal3_cm5Timer11syncRequestEv>:
            target_enable_irq();
#endif  //  TODO
        }

        void Timer::syncRequest() {
            if (!initialised) {
 800c72c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c730:	b1d3      	cbz	r3, 800c768 <_ZN5codal3_cm5Timer11syncRequestEv+0x3c>
        void Timer::syncRequest() {
 800c732:	b510      	push	{r4, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	4604      	mov	r4, r0
                debug_print("sync! ");  //  Warning: syncRequest called before init
                return;
            }
            target_disable_irq();
 800c738:	f7f4 fa0e 	bl	8000b58 <target_disable_irq>
            volatile uint32_t curr = millis();
 800c73c:	f7f7 fe24 	bl	8004388 <millis>
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
            volatile uint32_t curr = millis();
 800c744:	9000      	str	r0, [sp, #0]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	69e2      	ldr	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c74a:	4620      	mov	r0, r4
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	9301      	str	r3, [sp, #4]
            this->prev = curr;
 800c750:	9a00      	ldr	r2, [sp, #0]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c752:	9b01      	ldr	r3, [sp, #4]
            this->prev = curr;
 800c754:	61e2      	str	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800c756:	fb01 f103 	mul.w	r1, r1, r3
 800c75a:	f7ff f9e3 	bl	800bb24 <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 800c75e:	b002      	add	sp, #8
 800c760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            target_enable_irq();            
 800c764:	f7f4 b9f6 	b.w	8000b54 <target_enable_irq>
                debug_print("sync! ");  //  Warning: syncRequest called before init
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 800c76a:	f7f7 bcad 	b.w	80040c8 <debug_print>
 800c76e:	bf00      	nop
 800c770:	0800d7a4 	.word	0x0800d7a4

0800c774 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	f7ff f960 	bl	800ba3c <_ZN5codal5TimerC1Ev>
            initialised = false;
 800c77c:	2300      	movs	r3, #0
        Timer::Timer() : codal::Timer() {
 800c77e:	4d06      	ldr	r5, [pc, #24]	; (800c798 <_ZN5codal3_cm5TimerC1Ev+0x24>)
            instance = this;
 800c780:	4806      	ldr	r0, [pc, #24]	; (800c79c <_ZN5codal3_cm5TimerC1Ev+0x28>)
            trigger_period = 0;
 800c782:	4907      	ldr	r1, [pc, #28]	; (800c7a0 <_ZN5codal3_cm5TimerC1Ev+0x2c>)
            last_trigger = 0;
 800c784:	4a07      	ldr	r2, [pc, #28]	; (800c7a4 <_ZN5codal3_cm5TimerC1Ev+0x30>)
        Timer::Timer() : codal::Timer() {
 800c786:	6025      	str	r5, [r4, #0]
            initialised = false;
 800c788:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 800c78c:	6004      	str	r4, [r0, #0]
            prev = 0;
 800c78e:	61e3      	str	r3, [r4, #28]
        }
 800c790:	4620      	mov	r0, r4
            trigger_period = 0;
 800c792:	600b      	str	r3, [r1, #0]
            last_trigger = 0;
 800c794:	6013      	str	r3, [r2, #0]
        }
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	0800d7d4 	.word	0x0800d7d4
 800c79c:	20001650 	.word	0x20001650
 800c7a0:	20001658 	.word	0x20001658
 800c7a4:	20001654 	.word	0x20001654

0800c7a8 <_ZN5codal3_cm5Timer4initEv>:
        void Timer::init() {
 800c7a8:	b570      	push	{r4, r5, r6, lr}
            if (initialised) { return; }  //  If already initialised, quit.
 800c7aa:	f890 5020 	ldrb.w	r5, [r0, #32]
 800c7ae:	b105      	cbz	r5, 800c7b2 <_ZN5codal3_cm5Timer4initEv+0xa>
        }
 800c7b0:	bd70      	pop	{r4, r5, r6, pc}
 800c7b2:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 800c7b4:	480e      	ldr	r0, [pc, #56]	; (800c7f0 <_ZN5codal3_cm5Timer4initEv+0x48>)
 800c7b6:	f7f7 fc8d 	bl	80040d4 <debug_println>
            initialised = true;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 800c7c0:	f7f7 fde2 	bl	8004388 <millis>
            if (trigger_period > 0) {
 800c7c4:	4e0b      	ldr	r6, [pc, #44]	; (800c7f4 <_ZN5codal3_cm5Timer4initEv+0x4c>)
            prev = millis();
 800c7c6:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 800c7c8:	480b      	ldr	r0, [pc, #44]	; (800c7f8 <_ZN5codal3_cm5Timer4initEv+0x50>)
 800c7ca:	f7f4 fa3f 	bl	8000c4c <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 800c7ce:	480b      	ldr	r0, [pc, #44]	; (800c7fc <_ZN5codal3_cm5Timer4initEv+0x54>)
 800c7d0:	f7f4 fa42 	bl	8000c58 <target_set_alarm_callback>
            if (trigger_period > 0) {
 800c7d4:	6831      	ldr	r1, [r6, #0]
 800c7d6:	b121      	cbz	r1, 800c7e2 <_ZN5codal3_cm5Timer4initEv+0x3a>
                triggerIn(trigger_period);
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4798      	blx	r3
                trigger_period = 0;
 800c7e0:	6035      	str	r5, [r6, #0]
            start_background_tasks();
 800c7e2:	f000 f87b 	bl	800c8dc <start_background_tasks>
        }
 800c7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            bootloader_set_restart_callback(restart_callback);
 800c7ea:	4805      	ldr	r0, [pc, #20]	; (800c800 <_ZN5codal3_cm5Timer4initEv+0x58>)
 800c7ec:	f7f7 bfdc 	b.w	80047a8 <bootloader_set_restart_callback>
 800c7f0:	0800d7ac 	.word	0x0800d7ac
 800c7f4:	20001658 	.word	0x20001658
 800c7f8:	0800c6fd 	.word	0x0800c6fd
 800c7fc:	0800c6cd 	.word	0x0800c6cd
 800c800:	0800c86d 	.word	0x0800c86d

0800c804 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 800c804:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 800c806:	4804      	ldr	r0, [pc, #16]	; (800c818 <_ZL10flush_taskv+0x14>)
 800c808:	f7f7 fc64 	bl	80040d4 <debug_println>
    while (true) {
        debug_flush();
 800c80c:	f7f7 fbd2 	bl	8003fb4 <debug_flush>
        codal::fiber_sleep(200);
 800c810:	20c8      	movs	r0, #200	; 0xc8
 800c812:	f7fe febd 	bl	800b590 <_ZN5codal11fiber_sleepEm>
 800c816:	e7f9      	b.n	800c80c <_ZL10flush_taskv+0x8>
 800c818:	0800d81c 	.word	0x0800d81c

0800c81c <_ZL15restart_handlerN5codal5EventE>:
static void restart_handler(codal::Event evt) {
 800c81c:	b500      	push	{lr}
 800c81e:	b083      	sub	sp, #12
 800c820:	ab02      	add	r3, sp, #8
 800c822:	e903 0003 	stmdb	r3, {r0, r1}
    debug_println("restart handler");
 800c826:	480e      	ldr	r0, [pc, #56]	; (800c860 <_ZL15restart_handlerN5codal5EventE+0x44>)
 800c828:	f7f7 fc54 	bl	80040d4 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 800c82c:	f640 039d 	movw	r3, #2205	; 0x89d
 800c830:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c834:	429a      	cmp	r2, r3
 800c836:	d002      	beq.n	800c83e <_ZL15restart_handlerN5codal5EventE+0x22>
}
 800c838:	b003      	add	sp, #12
 800c83a:	f85d fb04 	ldr.w	pc, [sp], #4
    debug_println("restarting...");
 800c83e:	4809      	ldr	r0, [pc, #36]	; (800c864 <_ZL15restart_handlerN5codal5EventE+0x48>)
 800c840:	f7f7 fc48 	bl	80040d4 <debug_println>
    debug_force_flush();
 800c844:	f7f7 fbc8 	bl	8003fd8 <debug_force_flush>
    codal::fiber_sleep(5000);
 800c848:	f241 3088 	movw	r0, #5000	; 0x1388
 800c84c:	f7fe fea0 	bl	800b590 <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 800c850:	4805      	ldr	r0, [pc, #20]	; (800c868 <_ZL15restart_handlerN5codal5EventE+0x4c>)
 800c852:	f7f7 fc3f 	bl	80040d4 <debug_println>
    debug_force_flush();
 800c856:	f7f7 fbbf 	bl	8003fd8 <debug_force_flush>
    scb_reset_system();
 800c85a:	f7f4 fa9d 	bl	8000d98 <scb_reset_system>
 800c85e:	bf00      	nop
 800c860:	0800d828 	.word	0x0800d828
 800c864:	0800d838 	.word	0x0800d838
 800c868:	0800d848 	.word	0x0800d848

0800c86c <restart_callback>:
int restart_callback(void) {
 800c86c:	b538      	push	{r3, r4, r5, lr}
    debug_println("restart callback");
 800c86e:	4813      	ldr	r0, [pc, #76]	; (800c8bc <restart_callback+0x50>)
 800c870:	f7f7 fc30 	bl	80040d4 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 800c874:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <restart_callback+0x54>)
 800c876:	6818      	ldr	r0, [r3, #0]
 800c878:	b1c8      	cbz	r0, 800c8ae <restart_callback+0x42>
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 800c87a:	6803      	ldr	r3, [r0, #0]
 800c87c:	4a11      	ldr	r2, [pc, #68]	; (800c8c4 <restart_callback+0x58>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4293      	cmp	r3, r2
 800c882:	d10c      	bne.n	800c89e <restart_callback+0x32>
 800c884:	4d10      	ldr	r5, [pc, #64]	; (800c8c8 <restart_callback+0x5c>)
 800c886:	462c      	mov	r4, r5
        debug_print("*** ERROR: unable to send restart event ");
 800c888:	4810      	ldr	r0, [pc, #64]	; (800c8cc <restart_callback+0x60>)
 800c88a:	f7f7 fc1d 	bl	80040c8 <debug_print>
        debug_print_unsigned(status); debug_println("");
 800c88e:	4628      	mov	r0, r5
 800c890:	f7f7 fc3c 	bl	800410c <debug_print_unsigned>
 800c894:	480e      	ldr	r0, [pc, #56]	; (800c8d0 <restart_callback+0x64>)
 800c896:	f7f7 fc1d 	bl	80040d4 <debug_println>
}
 800c89a:	4620      	mov	r0, r4
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 800c89e:	4a0d      	ldr	r2, [pc, #52]	; (800c8d4 <restart_callback+0x68>)
 800c8a0:	ca06      	ldmia	r2, {r1, r2}
 800c8a2:	4798      	blx	r3
    if (status) {
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d0f7      	beq.n	800c89a <restart_callback+0x2e>
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	e7ec      	b.n	800c888 <restart_callback+0x1c>
        debug_println("*** ERROR: missing event bus");
 800c8ae:	480a      	ldr	r0, [pc, #40]	; (800c8d8 <restart_callback+0x6c>)
 800c8b0:	f7f7 fc10 	bl	80040d4 <debug_println>
        return -1;
 800c8b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c8b8:	e7ef      	b.n	800c89a <restart_callback+0x2e>
 800c8ba:	bf00      	nop
 800c8bc:	0800d850 	.word	0x0800d850
 800c8c0:	2000164c 	.word	0x2000164c
 800c8c4:	0800bc79 	.word	0x0800bc79
 800c8c8:	fffffc16 	.word	0xfffffc16
 800c8cc:	0800d884 	.word	0x0800d884
 800c8d0:	0800d5f4 	.word	0x0800d5f4
 800c8d4:	20001660 	.word	0x20001660
 800c8d8:	0800d864 	.word	0x0800d864

0800c8dc <start_background_tasks>:
        // if (restart_requested) {}
    }
}

int start_background_tasks(void) {
 800c8dc:	b570      	push	{r4, r5, r6, lr}
    //  Start the background tasks to flush the log and wait for restart requests.
    if (!flush_task_fibre) {
 800c8de:	4c29      	ldr	r4, [pc, #164]	; (800c984 <start_background_tasks+0xa8>)
int start_background_tasks(void) {
 800c8e0:	b082      	sub	sp, #8
    if (!flush_task_fibre) {
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	b37b      	cbz	r3, 800c946 <start_background_tasks+0x6a>
                debug_println("*** ERROR: create fibre failed");
            }
        }
    }
    //  Listen for restart requests.
    if (!restart_listener_started) {
 800c8e6:	4c28      	ldr	r4, [pc, #160]	; (800c988 <start_background_tasks+0xac>)
 800c8e8:	7823      	ldrb	r3, [r4, #0]
 800c8ea:	bb1b      	cbnz	r3, 800c934 <start_background_tasks+0x58>
        if (!codal::EventModel::defaultEventBus) {
 800c8ec:	4b27      	ldr	r3, [pc, #156]	; (800c98c <start_background_tasks+0xb0>)
 800c8ee:	681d      	ldr	r5, [r3, #0]
 800c8f0:	b31d      	cbz	r5, 800c93a <start_background_tasks+0x5e>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 800c8f2:	2020      	movs	r0, #32
 800c8f4:	f7f7 fc74 	bl	80041e0 <_Znwj>
 800c8f8:	2210      	movs	r2, #16
 800c8fa:	4b25      	ldr	r3, [pc, #148]	; (800c990 <start_background_tasks+0xb4>)
 800c8fc:	9200      	str	r2, [sp, #0]
 800c8fe:	f645 0134 	movw	r1, #22580	; 0x5834
 800c902:	f640 029d 	movw	r2, #2205	; 0x89d
 800c906:	4606      	mov	r6, r0
 800c908:	f7ff f836 	bl	800b978 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	4a21      	ldr	r2, [pc, #132]	; (800c994 <start_background_tasks+0xb8>)
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4293      	cmp	r3, r2
 800c914:	d12c      	bne.n	800c970 <start_background_tasks+0x94>
                return DEVICE_OK;

            delete newListener;
 800c916:	4630      	mov	r0, r6
 800c918:	f7ff f846 	bl	800b9a8 <_ZN5codal8ListenerD1Ev>
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7f7 fc61 	bl	80041e4 <_ZdlPv>
            debug_println("*** ERROR: missing event bus");
        } else {
            int status = codal::EventModel::defaultEventBus->listen(
                CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, restart_handler);
            if (status) {
                debug_print("*** ERROR: unable to listen for restart event ");
 800c922:	481d      	ldr	r0, [pc, #116]	; (800c998 <start_background_tasks+0xbc>)
 800c924:	f7f7 fbd0 	bl	80040c8 <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 800c928:	481c      	ldr	r0, [pc, #112]	; (800c99c <start_background_tasks+0xc0>)
 800c92a:	f7f7 fc15 	bl	8004158 <debug_printhex_unsigned>
 800c92e:	481c      	ldr	r0, [pc, #112]	; (800c9a0 <start_background_tasks+0xc4>)
 800c930:	f7f7 fbd0 	bl	80040d4 <debug_println>
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 800c934:	2000      	movs	r0, #0
 800c936:	b002      	add	sp, #8
 800c938:	bd70      	pop	{r4, r5, r6, pc}
            debug_println("*** ERROR: missing event bus");
 800c93a:	481a      	ldr	r0, [pc, #104]	; (800c9a4 <start_background_tasks+0xc8>)
 800c93c:	f7f7 fbca 	bl	80040d4 <debug_println>
}
 800c940:	2000      	movs	r0, #0
 800c942:	b002      	add	sp, #8
 800c944:	bd70      	pop	{r4, r5, r6, pc}
        if (!codal::fiber_scheduler_running()) {
 800c946:	f7fe fc81 	bl	800b24c <_ZN5codal23fiber_scheduler_runningEv>
 800c94a:	b918      	cbnz	r0, 800c954 <start_background_tasks+0x78>
            debug_println("no scheduler, start bg tasks later");
 800c94c:	4816      	ldr	r0, [pc, #88]	; (800c9a8 <start_background_tasks+0xcc>)
 800c94e:	f7f7 fbc1 	bl	80040d4 <debug_println>
 800c952:	e7c8      	b.n	800c8e6 <start_background_tasks+0xa>
            debug_println("start bg tasks");
 800c954:	4815      	ldr	r0, [pc, #84]	; (800c9ac <start_background_tasks+0xd0>)
 800c956:	f7f7 fbbd 	bl	80040d4 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 800c95a:	4915      	ldr	r1, [pc, #84]	; (800c9b0 <start_background_tasks+0xd4>)
 800c95c:	4815      	ldr	r0, [pc, #84]	; (800c9b4 <start_background_tasks+0xd8>)
 800c95e:	f7fe fcfd 	bl	800b35c <_ZN5codal12create_fiberEPFvvES1_>
 800c962:	6020      	str	r0, [r4, #0]
            if (!flush_task_fibre) {
 800c964:	2800      	cmp	r0, #0
 800c966:	d1be      	bne.n	800c8e6 <start_background_tasks+0xa>
                debug_println("*** ERROR: create fibre failed");
 800c968:	4813      	ldr	r0, [pc, #76]	; (800c9b8 <start_background_tasks+0xdc>)
 800c96a:	f7f7 fbb3 	bl	80040d4 <debug_println>
 800c96e:	e7ba      	b.n	800c8e6 <start_background_tasks+0xa>
            if(add(newListener) == DEVICE_OK)
 800c970:	4628      	mov	r0, r5
 800c972:	4631      	mov	r1, r6
 800c974:	4798      	blx	r3
 800c976:	2800      	cmp	r0, #0
 800c978:	d1cd      	bne.n	800c916 <start_background_tasks+0x3a>
                restart_listener_started = true;
 800c97a:	2301      	movs	r3, #1
}
 800c97c:	2000      	movs	r0, #0
                restart_listener_started = true;
 800c97e:	7023      	strb	r3, [r4, #0]
}
 800c980:	b002      	add	sp, #8
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	20001668 	.word	0x20001668
 800c988:	20001673 	.word	0x20001673
 800c98c:	2000164c 	.word	0x2000164c
 800c990:	0800c81d 	.word	0x0800c81d
 800c994:	0800aab1 	.word	0x0800aab1
 800c998:	0800d904 	.word	0x0800d904
 800c99c:	fffffc16 	.word	0xfffffc16
 800c9a0:	0800d5f4 	.word	0x0800d5f4
 800c9a4:	0800d864 	.word	0x0800d864
 800c9a8:	0800d8b0 	.word	0x0800d8b0
 800c9ac:	0800d8d4 	.word	0x0800d8d4
 800c9b0:	0800b685 	.word	0x0800b685
 800c9b4:	0800c805 	.word	0x0800c805
 800c9b8:	0800d8e4 	.word	0x0800d8e4

0800c9bc <_GLOBAL__sub_I_restart_callback>:
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f640 029d 	movw	r2, #2205	; 0x89d
 800c9c2:	f645 0134 	movw	r1, #22580	; 0x5834
 800c9c6:	4801      	ldr	r0, [pc, #4]	; (800c9cc <_GLOBAL__sub_I_restart_callback+0x10>)
 800c9c8:	f7ff bc48 	b.w	800c25c <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 800c9cc:	20001660 	.word	0x20001660

0800c9d0 <pinmap_peripheral>:
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800c9d0:	28ff      	cmp	r0, #255	; 0xff
 800c9d2:	d00e      	beq.n	800c9f2 <pinmap_peripheral+0x22>
CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 800c9d4:	b508      	push	{r3, lr}
    return cnf;
}

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800c9d6:	780b      	ldrb	r3, [r1, #0]
 800c9d8:	2bff      	cmp	r3, #255	; 0xff
 800c9da:	d104      	bne.n	800c9e6 <pinmap_peripheral+0x16>
 800c9dc:	e00c      	b.n	800c9f8 <pinmap_peripheral+0x28>
 800c9de:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800c9e2:	2bff      	cmp	r3, #255	; 0xff
 800c9e4:	d008      	beq.n	800c9f8 <pinmap_peripheral+0x28>
        if (map->pin == pin) { return map->peripheral; }
 800c9e6:	4298      	cmp	r0, r3
 800c9e8:	d1f9      	bne.n	800c9de <pinmap_peripheral+0xe>
 800c9ea:	6848      	ldr	r0, [r1, #4]
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d003      	beq.n	800c9f8 <pinmap_peripheral+0x28>
}
 800c9f0:	bd08      	pop	{r3, pc}
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c9f6:	4770      	bx	lr
        { error("pinmap not found for peripheral"); }
 800c9f8:	4803      	ldr	r0, [pc, #12]	; (800ca08 <pinmap_peripheral+0x38>)
 800c9fa:	f7f7 fb6b 	bl	80040d4 <debug_println>
 800c9fe:	f7f7 fad9 	bl	8003fb4 <debug_flush>
 800ca02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ca06:	bd08      	pop	{r3, pc}
 800ca08:	0800d96c 	.word	0x0800d96c

0800ca0c <pinmap_mode>:
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 800ca0c:	28ff      	cmp	r0, #255	; 0xff
 800ca0e:	d00e      	beq.n	800ca2e <pinmap_mode+0x22>
CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 800ca10:	b508      	push	{r3, lr}
    return CM_PERIPHERAL_NC;
}

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800ca12:	780b      	ldrb	r3, [r1, #0]
 800ca14:	2bff      	cmp	r3, #255	; 0xff
 800ca16:	d104      	bne.n	800ca22 <pinmap_mode+0x16>
 800ca18:	e00a      	b.n	800ca30 <pinmap_mode+0x24>
 800ca1a:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800ca1e:	2bff      	cmp	r3, #255	; 0xff
 800ca20:	d006      	beq.n	800ca30 <pinmap_mode+0x24>
        if (map->pin == pin) { return map->mode; }
 800ca22:	4298      	cmp	r0, r3
 800ca24:	d1f9      	bne.n	800ca1a <pinmap_mode+0xe>
 800ca26:	7a48      	ldrb	r0, [r1, #9]
    if (mode == CM_PINMODE_NC) // no mapping available
 800ca28:	28ff      	cmp	r0, #255	; 0xff
 800ca2a:	d001      	beq.n	800ca30 <pinmap_mode+0x24>
}
 800ca2c:	bd08      	pop	{r3, pc}
 800ca2e:	4770      	bx	lr
        { error("pinmap not found for mode"); }
 800ca30:	4803      	ldr	r0, [pc, #12]	; (800ca40 <pinmap_mode+0x34>)
 800ca32:	f7f7 fb4f 	bl	80040d4 <debug_println>
 800ca36:	f7f7 fabd 	bl	8003fb4 <debug_flush>
 800ca3a:	20ff      	movs	r0, #255	; 0xff
}
 800ca3c:	bd08      	pop	{r3, pc}
 800ca3e:	bf00      	nop
 800ca40:	0800d950 	.word	0x0800d950

0800ca44 <pinmap_cnf>:
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 800ca44:	28ff      	cmp	r0, #255	; 0xff
 800ca46:	d00e      	beq.n	800ca66 <pinmap_cnf+0x22>
CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 800ca48:	b508      	push	{r3, lr}
    return CM_PINMODE_NC;
}

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800ca4a:	780b      	ldrb	r3, [r1, #0]
 800ca4c:	2bff      	cmp	r3, #255	; 0xff
 800ca4e:	d104      	bne.n	800ca5a <pinmap_cnf+0x16>
 800ca50:	e00a      	b.n	800ca68 <pinmap_cnf+0x24>
 800ca52:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800ca56:	2bff      	cmp	r3, #255	; 0xff
 800ca58:	d006      	beq.n	800ca68 <pinmap_cnf+0x24>
        if (map->pin == pin) { return map->cnf; }
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	d1f9      	bne.n	800ca52 <pinmap_cnf+0xe>
 800ca5e:	7a88      	ldrb	r0, [r1, #10]
    if (cnf == CM_PINCNF_NC) // no mapping available
 800ca60:	28ff      	cmp	r0, #255	; 0xff
 800ca62:	d001      	beq.n	800ca68 <pinmap_cnf+0x24>
}
 800ca64:	bd08      	pop	{r3, pc}
 800ca66:	4770      	bx	lr
        { error("pinmap not found for cnf"); }
 800ca68:	4803      	ldr	r0, [pc, #12]	; (800ca78 <pinmap_cnf+0x34>)
 800ca6a:	f7f7 fb33 	bl	80040d4 <debug_println>
 800ca6e:	f7f7 faa1 	bl	8003fb4 <debug_flush>
 800ca72:	20ff      	movs	r0, #255	; 0xff
}
 800ca74:	bd08      	pop	{r3, pc}
 800ca76:	bf00      	nop
 800ca78:	0800d934 	.word	0x0800d934

0800ca7c <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800ca7c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop

0800ca84 <_ZN5codal3I2C4stopEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800ca84:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop

0800ca8c <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800ca8c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop

0800ca94 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800ca94:	b530      	push	{r4, r5, lr}
      uint8_t command[2];
      command[0] = reg;
      command[1] = value;

      return write(address, command, 2);
 800ca96:	2500      	movs	r5, #0
  {
 800ca98:	b085      	sub	sp, #20
      return write(address, command, 2);
 800ca9a:	6804      	ldr	r4, [r0, #0]
 800ca9c:	9500      	str	r5, [sp, #0]
      command[0] = reg;
 800ca9e:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800caa2:	f88d 300d 	strb.w	r3, [sp, #13]
      return write(address, command, 2);
 800caa6:	6964      	ldr	r4, [r4, #20]
 800caa8:	2302      	movs	r3, #2
 800caaa:	aa03      	add	r2, sp, #12
 800caac:	47a0      	blx	r4
}
 800caae:	b005      	add	sp, #20
 800cab0:	bd30      	pop	{r4, r5, pc}
 800cab2:	bf00      	nop

0800cab4 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800cab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	6806      	ldr	r6, [r0, #0]
 800cabc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800cac0:	4604      	mov	r4, r0
 800cac2:	461f      	mov	r7, r3
 800cac4:	f88d 200f 	strb.w	r2, [sp, #15]
 800cac8:	6976      	ldr	r6, [r6, #20]
 800caca:	4688      	mov	r8, r1
    int result;

    if (repeated)
 800cacc:	b185      	cbz	r5, 800caf0 <_ZN5codal3I2C12readRegisterEthPhib+0x3c>
        result = write(address, &reg, 1, true);
 800cace:	2301      	movs	r3, #1
 800cad0:	f10d 020f 	add.w	r2, sp, #15
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	47b0      	blx	r6
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800cad8:	b938      	cbnz	r0, 800caea <_ZN5codal3I2C12readRegisterEthPhib+0x36>
        return result;

    result = read(address, data, length);
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	9000      	str	r0, [sp, #0]
 800cade:	69dd      	ldr	r5, [r3, #28]
 800cae0:	463a      	mov	r2, r7
 800cae2:	4641      	mov	r1, r8
 800cae4:	4620      	mov	r0, r4
 800cae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cae8:	47a8      	blx	r5
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800caea:	b006      	add	sp, #24
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800caf4:	aa06      	add	r2, sp, #24
      return write(address, &data, 1);
 800caf6:	9500      	str	r5, [sp, #0]
 800caf8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800cafc:	2301      	movs	r3, #1
 800cafe:	47b0      	blx	r6
 800cb00:	e7ea      	b.n	800cad8 <_ZN5codal3I2C12readRegisterEthPhib+0x24>
 800cb02:	bf00      	nop

0800cb04 <_ZN5codal3I2C5writeEtPhib>:
  {
 800cb04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
      if (data == NULL || len <= 0)
 800cb0c:	2a00      	cmp	r2, #0
 800cb0e:	d03c      	beq.n	800cb8a <_ZN5codal3I2C5writeEtPhib+0x86>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dd3a      	ble.n	800cb8a <_ZN5codal3I2C5writeEtPhib+0x86>
 800cb14:	4688      	mov	r8, r1
      start();
 800cb16:	6801      	ldr	r1, [r0, #0]
 800cb18:	461e      	mov	r6, r3
 800cb1a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800cb90 <_ZN5codal3I2C5writeEtPhib+0x8c>
 800cb1e:	684b      	ldr	r3, [r1, #4]
 800cb20:	4682      	mov	sl, r0
 800cb22:	454b      	cmp	r3, r9
 800cb24:	4614      	mov	r4, r2
 800cb26:	d128      	bne.n	800cb7a <_ZN5codal3I2C5writeEtPhib+0x76>
      write((uint8_t)address);
 800cb28:	68cd      	ldr	r5, [r1, #12]
 800cb2a:	f8df b068 	ldr.w	fp, [pc, #104]	; 800cb94 <_ZN5codal3I2C5writeEtPhib+0x90>
 800cb2e:	455d      	cmp	r5, fp
 800cb30:	d11b      	bne.n	800cb6a <_ZN5codal3I2C5writeEtPhib+0x66>
 800cb32:	4426      	add	r6, r4
 800cb34:	e005      	b.n	800cb42 <_ZN5codal3I2C5writeEtPhib+0x3e>
 800cb36:	3401      	adds	r4, #1
      for (int i = 0; i < len; i++)
 800cb38:	42a6      	cmp	r6, r4
 800cb3a:	d00a      	beq.n	800cb52 <_ZN5codal3I2C5writeEtPhib+0x4e>
 800cb3c:	f8da 3000 	ldr.w	r3, [sl]
 800cb40:	68dd      	ldr	r5, [r3, #12]
 800cb42:	455d      	cmp	r5, fp
 800cb44:	d0f7      	beq.n	800cb36 <_ZN5codal3I2C5writeEtPhib+0x32>
          write(data[i]);
 800cb46:	7821      	ldrb	r1, [r4, #0]
 800cb48:	4650      	mov	r0, sl
 800cb4a:	3401      	adds	r4, #1
 800cb4c:	47a8      	blx	r5
      for (int i = 0; i < len; i++)
 800cb4e:	42a6      	cmp	r6, r4
 800cb50:	d1f4      	bne.n	800cb3c <_ZN5codal3I2C5writeEtPhib+0x38>
      if (!repeated)
 800cb52:	b117      	cbz	r7, 800cb5a <_ZN5codal3I2C5writeEtPhib+0x56>
      return DEVICE_OK;
 800cb54:	2000      	movs	r0, #0
  }
 800cb56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          stop();
 800cb5a:	f8da 3000 	ldr.w	r3, [sl]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	454b      	cmp	r3, r9
 800cb62:	d10e      	bne.n	800cb82 <_ZN5codal3I2C5writeEtPhib+0x7e>
      return DEVICE_OK;
 800cb64:	4638      	mov	r0, r7
  }
 800cb66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      write((uint8_t)address);
 800cb6a:	fa5f f188 	uxtb.w	r1, r8
 800cb6e:	4650      	mov	r0, sl
 800cb70:	47a8      	blx	r5
 800cb72:	f8da 3000 	ldr.w	r3, [sl]
 800cb76:	68dd      	ldr	r5, [r3, #12]
 800cb78:	e7db      	b.n	800cb32 <_ZN5codal3I2C5writeEtPhib+0x2e>
      start();
 800cb7a:	4798      	blx	r3
 800cb7c:	f8da 1000 	ldr.w	r1, [sl]
 800cb80:	e7d2      	b.n	800cb28 <_ZN5codal3I2C5writeEtPhib+0x24>
          stop();
 800cb82:	4650      	mov	r0, sl
 800cb84:	4798      	blx	r3
 800cb86:	4638      	mov	r0, r7
 800cb88:	e7e5      	b.n	800cb56 <_ZN5codal3I2C5writeEtPhib+0x52>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800cb8a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800cb8e:	e7e2      	b.n	800cb56 <_ZN5codal3I2C5writeEtPhib+0x52>
 800cb90:	0800ca85 	.word	0x0800ca85
 800cb94:	0800ca8d 	.word	0x0800ca8d

0800cb98 <_ZN5codal3I2C4readEtPhib>:
{
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (data == NULL || len <= 0)
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	d05a      	beq.n	800cc5c <_ZN5codal3I2C4readEtPhib+0xc4>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	4698      	mov	r8, r3
 800cbaa:	dd57      	ble.n	800cc5c <_ZN5codal3I2C4readEtPhib+0xc4>
    start();
 800cbac:	6805      	ldr	r5, [r0, #0]
 800cbae:	4692      	mov	sl, r2
 800cbb0:	686b      	ldr	r3, [r5, #4]
 800cbb2:	4a2c      	ldr	r2, [pc, #176]	; (800cc64 <_ZN5codal3I2C4readEtPhib+0xcc>)
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d13d      	bne.n	800cc36 <_ZN5codal3I2C4readEtPhib+0x9e>
    write((uint8_t)(address | 0x01));
 800cbba:	68eb      	ldr	r3, [r5, #12]
 800cbbc:	4f2a      	ldr	r7, [pc, #168]	; (800cc68 <_ZN5codal3I2C4readEtPhib+0xd0>)
 800cbbe:	42bb      	cmp	r3, r7
 800cbc0:	d141      	bne.n	800cc46 <_ZN5codal3I2C4readEtPhib+0xae>
    for (i = 0; i < len-1; i++)
 800cbc2:	f1b8 0f01 	cmp.w	r8, #1
 800cbc6:	d01b      	beq.n	800cc00 <_ZN5codal3I2C4readEtPhib+0x68>
 800cbc8:	f1a8 0802 	sub.w	r8, r8, #2
 800cbcc:	eb0a 0b08 	add.w	fp, sl, r8
 800cbd0:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800cbd4:	e005      	b.n	800cbe2 <_ZN5codal3I2C4readEtPhib+0x4a>
        data[i] = read();
 800cbd6:	200b      	movs	r0, #11
 800cbd8:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800cbdc:	45a3      	cmp	fp, r4
 800cbde:	d00b      	beq.n	800cbf8 <_ZN5codal3I2C4readEtPhib+0x60>
 800cbe0:	6835      	ldr	r5, [r6, #0]
        data[i] = read();
 800cbe2:	692d      	ldr	r5, [r5, #16]
 800cbe4:	42bd      	cmp	r5, r7
 800cbe6:	d0f6      	beq.n	800cbd6 <_ZN5codal3I2C4readEtPhib+0x3e>
 800cbe8:	2100      	movs	r1, #0
 800cbea:	4630      	mov	r0, r6
 800cbec:	47a8      	blx	r5
 800cbee:	b2c0      	uxtb	r0, r0
 800cbf0:	f804 0f01 	strb.w	r0, [r4, #1]!
    for (i = 0; i < len-1; i++)
 800cbf4:	45a3      	cmp	fp, r4
 800cbf6:	d1f3      	bne.n	800cbe0 <_ZN5codal3I2C4readEtPhib+0x48>
 800cbf8:	f108 0801 	add.w	r8, r8, #1
 800cbfc:	6835      	ldr	r5, [r6, #0]
 800cbfe:	44c2      	add	sl, r8
    data[i] = read(NACK);
 800cc00:	692b      	ldr	r3, [r5, #16]
 800cc02:	42bb      	cmp	r3, r7
 800cc04:	d112      	bne.n	800cc2c <_ZN5codal3I2C4readEtPhib+0x94>
 800cc06:	200b      	movs	r0, #11
 800cc08:	f88a 0000 	strb.w	r0, [sl]
    if (!repeated)
 800cc0c:	f1b9 0f00 	cmp.w	r9, #0
 800cc10:	d003      	beq.n	800cc1a <_ZN5codal3I2C4readEtPhib+0x82>
 800cc12:	2000      	movs	r0, #0
}
 800cc14:	b003      	add	sp, #12
 800cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        stop();
 800cc1a:	6833      	ldr	r3, [r6, #0]
 800cc1c:	4a11      	ldr	r2, [pc, #68]	; (800cc64 <_ZN5codal3I2C4readEtPhib+0xcc>)
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d117      	bne.n	800cc54 <_ZN5codal3I2C4readEtPhib+0xbc>
 800cc24:	4648      	mov	r0, r9
}
 800cc26:	b003      	add	sp, #12
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data[i] = read(NACK);
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4798      	blx	r3
 800cc32:	b2c0      	uxtb	r0, r0
 800cc34:	e7e8      	b.n	800cc08 <_ZN5codal3I2C4readEtPhib+0x70>
 800cc36:	9101      	str	r1, [sp, #4]
    start();
 800cc38:	4798      	blx	r3
 800cc3a:	6835      	ldr	r5, [r6, #0]
 800cc3c:	4f0a      	ldr	r7, [pc, #40]	; (800cc68 <_ZN5codal3I2C4readEtPhib+0xd0>)
    write((uint8_t)(address | 0x01));
 800cc3e:	68eb      	ldr	r3, [r5, #12]
 800cc40:	9901      	ldr	r1, [sp, #4]
 800cc42:	42bb      	cmp	r3, r7
 800cc44:	d0bd      	beq.n	800cbc2 <_ZN5codal3I2C4readEtPhib+0x2a>
 800cc46:	f041 0101 	orr.w	r1, r1, #1
 800cc4a:	b2c9      	uxtb	r1, r1
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	4798      	blx	r3
 800cc50:	6835      	ldr	r5, [r6, #0]
 800cc52:	e7b6      	b.n	800cbc2 <_ZN5codal3I2C4readEtPhib+0x2a>
        stop();
 800cc54:	4630      	mov	r0, r6
 800cc56:	4798      	blx	r3
 800cc58:	4648      	mov	r0, r9
 800cc5a:	e7db      	b.n	800cc14 <_ZN5codal3I2C4readEtPhib+0x7c>
        return DEVICE_INVALID_PARAMETER;
 800cc5c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800cc60:	e7d8      	b.n	800cc14 <_ZN5codal3I2C4readEtPhib+0x7c>
 800cc62:	bf00      	nop
 800cc64:	0800ca85 	.word	0x0800ca85
 800cc68:	0800ca8d 	.word	0x0800ca8d

0800cc6c <_ZN5codal3I2CC1ERNS_3PinES2_>:
I2C::I2C(Pin &sda, Pin &scl)
 800cc6c:	4b01      	ldr	r3, [pc, #4]	; (800cc74 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 800cc6e:	6003      	str	r3, [r0, #0]
}
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	0800dab4 	.word	0x0800dab4
	...

0800cc80 <_ZN3pxt20functionsAndBytecodeE>:
 800cc80:	08010801 42424242 08010801 8de9d83e     ....BBBB....>...
 800cc90:	08009c19 0800a069 0800a095 080091f5     ....i...........
 800cca0:	080098dd 0800a359 0800a9b9 08009b65     ....Y.......e...
 800ccb0:	08009f31 08009f3d 08008349 08009f49     1...=...I...I...
 800ccc0:	08009bc9 08009f11 08009069 08008695     ........i.......
 800ccd0:	080085cd 0800856d 080087b9 08008109     ....m...........
 800cce0:	08008281 08008291 080082a5 080082c1     ................
 800ccf0:	08008ba9 08008b09 080090e5 08009139     ............9...
 800cd00:	0800a9f5 0800a9f9 0800d010 0800cfb0     ................
 800cd10:	0800cfe0 0800d040 08009a49 08009c25     ....@...I...%...
 800cd20:	080099f5 080091e9 0800aa15 0800aa0d     ................
 800cd30:	0800aa11 08008f19 08008d49 08008db1     ........I.......
 800cd40:	08007ef9 080082ed 08008301 08008305     .~..............
 800cd50:	0800830d 08008319 08008321 08008331     ........!...1...
 800cd60:	08008339 08008341 08008cfd 08008d2d     9...A.......-...
 800cd70:	08007e25 08007e31 08007e51 08008265     %~..1~..Q~..e...
 800cd80:	08007e8d 08007f1d 080081b5 0800808d     .~..............
 800cd90:	080080c1 080080f1 08008101 08008cd9     ................
 800cda0:	080087c5 080087ed 08008815 0800886d     ............m...
 800cdb0:	08008895 08008699 08008789 080086c5     ................
 800cdc0:	080086f1 08008719 08008741 08008761     ........A...a...
 800cdd0:	08008e6d 08008e91 08008eb5 08008ed9     m...............
 800cde0:	08008ef9 08008cdd 08008ced 08008b89     ................
 800cdf0:	08008b99 080088f5 0800891d 080082cd     ................
 800ce00:	08008945 080089f9 08008a0d 08008a21     E...........!...
 800ce10:	08008a35 08008a49 08008a5d 08008a71     5...I...]...q...
 800ce20:	08008a85 08008a99 08008aad 08008ac1     ................
 800ce30:	08008ad5 08008ae9 080082dd 080082e5     ................
 800ce40:	0800a9fd 08008349 08008359 08008391     ....I...Y.......
 800ce50:	08008395 08008399 080083ad 080083e1     ................
 800ce60:	080083e5 080083f1 080083f9 0800840d     ................
 800ce70:	0800842d 080084b5 080084c9 08008501     -...............
 800ce80:	08008515 08008521 08008525 08009019     ....!...%.......
 800ce90:	080076f5 08007709 0800771d 08007731     .v...w...w..1w..
 800cea0:	08007745 08007759 0800776d 08007781     Ew..Yw..mw...w..
 800ceb0:	080077f9 080077fd 08007815 08007b29     .w...w...x..){..
 800cec0:	08007c65 08007879 0800787d 080078a9     e|..yx..}x...x..
 800ced0:	080078d1 08007951 08007991 08007a05     .x..Qy...y...z..
 800cee0:	08007a19 08009a39 08009a3d 08007c81     .z..9...=....|..
 800cef0:	08007c85 08007c89 08007c8d 08007c95     .|...|...|...|..
 800cf00:	08007c99 08007c9d 08007ca1 08007cb1     .|...|...|...|..
 800cf10:	08007cb5 08007cbd 08007cd1 0800303d     .|...|...|..=0..
 800cf20:	080030d1 08003165 0800306d 08002fdd     .0..e1..m0.../..
 800cf30:	0800300d 0800a359 0800a64d 0800a6f5     .0..Y...M.......
 800cf40:	0800a709 0800a719 0800a721 0800a72d     ........!...-...
 800cf50:	0800a735 0800a73d 0800a74d 0800a755     5...=...M...U...
 800cf60:	0800a775 0800a7ad 0800a82d 0800a845     u.......-...E...
 800cf70:	0800a849 0800a85d 0800a529 0800a541     I...]...)...A...
 800cf80:	0800a551 0800a559 0800a565 0800a5b5     Q...Y...e.......
 800cf90:	0800a601 0800a8e9 0800a911 0800a951     ............Q...
 800cfa0:	0800a979 00000000 00000000 00000000     y...............

0800cfb0 <_ZN3pxt9buffer_vtE>:
 800cfb0:	f9040008 00000000 00000003 00000000     ................
 800cfc0:	08007cd5 08009069 00000000 08007ce5     .|..i........|..
	...

0800cfe0 <_ZN3pxt9number_vtE>:
 800cfe0:	f902000c 00000000 00000002 00000000     ................
 800cff0:	08007cd5 08009069 00000000 08007ce1     .|..i........|..
	...

0800d010 <_ZN3pxt9string_vtE>:
 800d010:	f9030008 00000000 00000001 00000000     ................
 800d020:	08007cd5 08009069 00000000 08007cd9     .|..i........|..
	...

0800d040 <_ZN3pxt16RefAction_vtableE>:
 800d040:	f904000c 00000000 00000004 00000000     ................
 800d050:	08009b5d 08009a61 080099cd 08009a0d     ]...a...........
	...

0800d070 <_ZN3pxtL13RefMap_vtableE>:
 800d070:	f9040014 00000000 00000008 00000000     ................
 800d080:	08009a55 08009a99 080099dd 08009a1d     U...............
	...

0800d0a0 <_ZN3pxtL18RefRefLocal_vtableE>:
 800d0a0:	f9040008 00000000 00000007 00000000     ................
 800d0b0:	08009b61 08009a89 080099d5 08009a19     a...............
	...

0800d0d0 <_ZN3pxtL20RefCollection_vtableE>:
 800d0d0:	f904000c 00000000 00000006 00000000     ................
 800d0e0:	08009a4d 08009e59 080099c5 08009a09     M...Y...........
 800d0f0:	00000000 33323130 37363534 62613938     ....0123456789ab
 800d100:	66656463 00000000 6c696166 74206465     cdef....failed t
 800d110:	20657079 63656863 6f66206b 70252072     ype check for %p
 800d120:	00000000 25205456 202d2070 746a626f     ....VT %p - objt
 800d130:	20657079 63206425 7373616c 25206f4e     ype %d classNo %
 800d140:	00000064 7373696d 20676e69 706f7270     d...missing prop
 800d150:	79747265 206e6f20 00007025 6665525b     erty on %p..[Ref
 800d160:	656a624f 72207463 3d736665 76206425     Object refs=%d v
 800d170:	70253d74 3d6c6320 73206425 64253d7a     t=%p cl=%d sz=%d
 800d180:	0000005d 74614e5b 20657669 005d7025     ]...[Native %p].
 800d190:	2073255b 3d207025 5d732520 00000000     [%s %p = %s]....

0800d1a0 <_ZN3pxtL10sBooleanTpE>:
 800d1a0:	54585040 6f623a40 61656c6f 0000006e     @PXT@:boolean...

0800d1b0 <_ZN3pxtL10sUndefinedE>:
 800d1b0:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800d1c0 <_ZN3pxtL11emptyBufferE>:
 800d1c0:	54585040 00003a23 00000000              @PXT#:......

0800d1cc <_ZN3pxtL11emptyStringE>:
 800d1cc:	54585040 00003a40                       @PXT@:..

0800d1d4 <_ZN3pxtL11sFunctionTpE>:
 800d1d4:	54585040 75663a40 6974636e 00006e6f     @PXT@:function..

0800d1e4 <_ZN3pxtL12sUndefinedTpE>:
 800d1e4:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800d1f4 <_ZN3pxtL4sInfE>:
 800d1f4:	54585040 6e493a40 696e6966 00007974     @PXT@:Infinity..

0800d204 <_ZN3pxtL4sNaNE>:
 800d204:	54585040 614e3a40 0000004e              @PXT@:NaN...

0800d210 <_ZN3pxtL5sMInfE>:
 800d210:	54585040 492d3a40 6e69666e 00797469     @PXT@:-Infinity.

0800d220 <_ZN3pxtL5sNullE>:
 800d220:	54585040 756e3a40 00006c6c              @PXT@:null..

0800d22c <_ZN3pxtL5sTrueE>:
 800d22c:	54585040 72743a40 00006575              @PXT@:true..

0800d238 <_ZN3pxtL6sFalseE>:
 800d238:	54585040 61663a40 0065736c              @PXT@:false.

0800d244 <_ZN3pxtL7sObjectE>:
 800d244:	54585040 4f5b3a40 63656a62 00005d74     @PXT@:[Object]..

0800d254 <_ZN3pxtL9sFunctionE>:
 800d254:	54585040 465b3a40 74636e75 5d6e6f69     @PXT@:[Function]
 800d264:	00000000                                ....

0800d268 <_ZN3pxtL9sNumberTpE>:
 800d268:	54585040 756e3a40 7265626d 00000000     @PXT@:number....

0800d278 <_ZN3pxtL9sObjectTpE>:
 800d278:	54585040 626f3a40 7463656a 00000000     @PXT@:object....

0800d288 <_ZN3pxtL9sStringTpE>:
 800d288:	54585040 74733a40 676e6972 00000000     @PXT@:string....
 800d298:	414d2d2d 00004b52 253a5052 64252f70     --MARK..RP:%p/%d
 800d2a8:	00000000 253a4752 64252f70 00000000     ....RG:%p/%d....
 800d2b8:	25204347 64252f64 65726620 00000065     GC %d/%d free...
 800d2c8:	52666552 6f4c6665 206c6163 72207025     RefRefLocal %p r
 800d2d8:	2064253d 70253d76 00000000 652d2d2d     =%d v=%p....---e
 800d2e8:	5f636578 616e6962 61207972 20726464     xec_binary addr 
 800d2f8:	00000000 6576202c 00002072 4220283a     ...., ver ..:( B
 800d308:	72206461 69746e75 7620656d 69737265     ad runtime versi
 800d318:	00006e6f 652d2d2d 5f636578 616e6962     on..---exec_bina
 800d328:	61207972 636f6c6c 00657461 652d2d2d     ry allocate.---e
 800d338:	5f636578 616e6962 63207972 61706d6f     xec_binary compa
 800d348:	00006572 652d2d2d 5f636578 616e6962     re..---exec_bina
 800d358:	69207972 5074696e 43667265 746e756f     ry initPerfCount
 800d368:	00737265 652d2d2d 5f636578 616e6962     ers.---exec_bina
 800d378:	69207972 5274696e 69746e75 0000656d     ry initRuntime..
 800d388:	652d2d2d 5f636578 616e6962 72207972     ---exec_binary r
 800d398:	63416e75 6e6f6974 00000030 652d2d2d     unAction0...---e
 800d3a8:	5f636578 616e6962 72207972 61656c65     xec_binary relea
 800d3b8:	69466573 00726562 4620283a 656c6961     seFiber.:( Faile
 800d3c8:	61702064 61697472 6c66206c 00687361     d partial flash.
 800d3d8:	43666552 656c6c6f 6f697463 7025206e     RefCollection %p
 800d3e8:	253d7220 69732064 253d657a 00000064      r=%d size=%d...
 800d3f8:	52666552 726f6365 70252064 253d7220     RefRecord %p r=%
 800d408:	69732064 253d657a 79622064 00736574     d size=%d bytes.
 800d418:	4d666552 25207061 3d722070 73206425     RefMap %p r=%d s
 800d428:	3d657a69 00006425 6d676553 3a746e65     ize=%d..Segment:
 800d438:	2c702520 6e656c20 3a687467 2c642520      %p, length: %d,
 800d448:	7a697320 25203a65 00000064 25203e2d      size: %d...-> %
 800d458:	00000064 2a2a2a2a 6843202a 206b6365     d...***** Check 
 800d468:	6c696146 203a6465 00000000 6f727245     Failed: ....Erro
 800d478:	25203a72 255b2064 00005d64 41666552     r: %d [%d]..RefA
 800d488:	6f697463 7025206e 253d7220 63702064     ction %p r=%d pc
 800d498:	2058253d 657a6973 0064253d 692d2d2d     =%X size=%d.---i
 800d4a8:	4374696e 6c61646f 75706320 6f6c635f     nitCodal cpu_clo
 800d4b8:	695f6b63 0074696e 692d2d2d 4374696e     ck_init.---initC
 800d4c8:	6c61646f 6d6f6320 696e496d 00000074     odal commInit...
 800d4d8:	692d2d2d 4374696e 6c61646f 68637320     ---initCodal sch
 800d4e8:	6c756465 695f7265 0074696e 692d2d2d     eduler_init.---i
 800d4f8:	4374696e 6c61646f 6d6f6320 656e6f70     nitCodal compone
 800d508:	2e73746e 74696e69 00000000 692d2d2d     nts.init....---i
 800d518:	4374696e 6c61646f 62737520 696e695f     nitCodal usb_ini
 800d528:	00000074 692d2d2d 4374696e 6c61646f     t...---initCodal
 800d538:	6e6f6420 00000065 64255352 2f70253a      done...RS%d:%p/
 800d548:	00006425 6e6b6e75 006e776f 73252023     %d..unknown.# %s
 800d558:	00000000 73252023 7025203a 00000000     ....# %s: %p....

0800d568 <_ZTVN5codal16STM32BluePillPinE>:
	...
 800d570:	0800c3d1 0800c32d 0800c459 0800c331     ....-...Y...1...
 800d580:	0800c34d 0800c379 0800c37d 0800c38d     M...y...}.......
 800d590:	0800c39d 0800c3a9 0800c3b9 0800a635     ............5...
 800d5a0:	0800c4f5 0800a63d 0800c3c1 0800c431     ....=.......1...
 800d5b0:	0800c3c9 0800a645 0800c491 702d2d2d     ....E.......---p
 800d5c0:	3a3a7478 5f757063 636f6c63 6e695f6b     xt::cpu_clock_in
 800d5d0:	00007469 702d2d2d 3a3a7478 74616c70     it..---pxt::plat
 800d5e0:	6d726f66 696e695f 00000074 454d440a     form_init....DME
 800d5f0:	0a3a4753 00000000 00000a0a              SG:.........

0800d5fc <_ZTVN5codal11CodalDeviceE>:
	...
 800d604:	0800ac61 0800ac3d 0800ac59 0800ac35     a...=...Y...5...
 800d614:	0800ac55 0800ac4d 0800ac45 00007830     U...M...E...0x..
 800d624:	53454d44 696c2047 7420656e 6c206f6f     DMESG line too l
 800d634:	21676e6f 0000000a 00000025 003f3f3f     ong!....%...???.
 800d644:	00000a0d                                ....

0800d648 <_ZTVN5codal5TimerE>:
	...
 800d650:	080041d9 080041d9 0800ba31 0800ba25     .A...A..1...%...

0800d660 <_ZTVN5codal14CodalComponentE>:
	...
 800d668:	0800a0fd 0800aaa9 0800aaad 0800bca5     ................
 800d678:	0800bcbd                                ....

0800d67c <_ZTVN5codal10EventModelE>:
	...
 800d684:	0800bc79 0800aab1 0800ae5d              y.......]...

0800d690 <_ZTVN5codal10MessageBusE>:
	...
 800d698:	0800c1c5 0800bd91 0800bd0d 0800bc8d     ................
 800d6a8:	0800bef5 0800bf81 fffffff8 00000000     ................
 800d6b8:	0800a0fd 0800aaa9 0800aaad 0800bf79     ............y...
 800d6c8:	0800bf95                                ....

0800d6cc <_ZTVN5codal3_cm3I2CE>:
	...
 800d6d4:	0800c305 0800ca85 0800ca85 0800ca8d     ................
 800d6e4:	0800ca8d 0800c309 0800ca95 0800c309     ................
 800d6f4:	0800c30d 206e6970 00000000              ....pin ....

0800d700 <_ZTVN5codal3_cm3PinE>:
	...
 800d708:	0800c3d1 0800c32d 0800c459 0800c331     ....-...Y...1...
 800d718:	0800c34d 0800c379 0800c37d 0800c38d     M...y...}.......
 800d728:	0800c39d 0800c3a9 0800c3b9 0800a635     ............5...
 800d738:	0800c4f5 0800a63d 0800c3c1 0800c431     ....=.......1...
 800d748:	0800c3c9 0800a645 0800c491 20495053     ....E.......SPI 
 800d758:	74736e69 65636e61 00702520 202a2a2a     instance %p.*** 
 800d768:	61646f63 7073206c 6f6d2069 00206973     codal spi mosi .
 800d778:	73696d20 0000206f 6c637320 0000206b      miso .. sclk ..

0800d788 <_ZTVN5codal3_cm3SPIE>:
	...
 800d790:	0800c559 0800c579 0800c565 0800c575     Y...y...e...u...
 800d7a0:	0800c63d 636e7973 00002021 656d6974     =...sync! ..time
 800d7b0:	6e692072 00007469 67697274 49726567     r init..triggerI
 800d7c0:	3462206e 696e6920 00002174              n b4 init!..

0800d7cc <_ZTVN5codal3_cm5TimerE>:
	...
 800d7d4:	0800c6dd 0800c72d 0800ba31 0800ba25     ....-...1...%...
 800d7e4:	202a2a2a 20707061 2f737362 61746164     *** app bss/data
 800d7f4:	69616620 2c64656c 73736220 7365745f      failed, bss_tes
 800d804:	203d2074 00000000 6164202c 745f6174     t = ...., data_t
 800d814:	20747365 0000203d 73756c66 61742068     est = ..flush ta
 800d824:	00006b73 74736572 20747261 646e6168     sk..restart hand
 800d834:	0072656c 74736572 69747261 2e2e676e     ler.restarting..
 800d844:	0000002e 656e6f64 00000000 74736572     ....done....rest
 800d854:	20747261 6c6c6163 6b636162 00000000     art callback....
 800d864:	202a2a2a 4f525245 6d203a52 69737369     *** ERROR: missi
 800d874:	6520676e 746e6576 73756220 00000000     ng event bus....
 800d884:	202a2a2a 4f525245 75203a52 6c62616e     *** ERROR: unabl
 800d894:	6f742065 6e657320 65722064 72617473     e to send restar
 800d8a4:	76652074 20746e65 00000000 73206f6e     t event ....no s
 800d8b4:	64656863 72656c75 7473202c 20747261     cheduler, start 
 800d8c4:	74206762 736b7361 74616c20 00007265     bg tasks later..
 800d8d4:	72617473 67622074 73617420 0000736b     start bg tasks..
 800d8e4:	202a2a2a 4f525245 63203a52 74616572     *** ERROR: creat
 800d8f4:	69662065 20657262 6c696166 00006465     e fibre failed..
 800d904:	202a2a2a 4f525245 75203a52 6c62616e     *** ERROR: unabl
 800d914:	6f742065 73696c20 206e6574 20726f66     e to listen for 
 800d924:	74736572 20747261 6e657665 00002074     restart event ..
 800d934:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 800d944:	726f6620 666e6320 00000000 6d6e6970      for cnf....pinm
 800d954:	6e207061 6620746f 646e756f 726f6620     ap not found for
 800d964:	646f6d20 00000065 6d6e6970 6e207061      mode...pinmap n
 800d974:	6620746f 646e756f 726f6620 72657020     ot found for per
 800d984:	65687069 006c6172                       ipheral.

0800d98c <PinMap_SPI_MISO>:
 800d98c:	00000068 40013000 00010000 00000070     h....0.@....p...
 800d99c:	40003800 00010000 00000074 40003c00     .8.@....t....<.@
 800d9ac:	00010000 0000006c 40013000 00010001     ....l....0.@....
 800d9bc:	00000078 40003c00 00010001 000000ff     x....<.@........
 800d9cc:	ffffffff 00ffff00                       ........

0800d9d4 <PinMap_SPI_MOSI>:
 800d9d4:	00000069 40013000 00020300 00000071     i....0.@....q...
 800d9e4:	40003800 00020300 00000075 40003c00     .8.@....u....<.@
 800d9f4:	00020300 0000006d 40013000 00020301     ....m....0.@....
 800da04:	00000079 40003c00 00020301 000000ff     y....<.@........
 800da14:	ffffffff 00ffff00                       ........

0800da1c <PinMap_SPI_NSS>:
 800da1c:	00000066 40013000 00020300 0000006e     f....0.@....n...
 800da2c:	40003800 00020300 00000072 40003c00     .8.@....r....<.@
 800da3c:	00020300 0000006a 40013000 00020301     ....j....0.@....
 800da4c:	00000076 40003c00 00020301 000000ff     v....<.@........
 800da5c:	ffffffff 00ffff00                       ........

0800da64 <PinMap_SPI_SCK>:
 800da64:	00000067 40013000 00020300 0000006f     g....0.@....o...
 800da74:	40003800 00020300 00000073 40003c00     .8.@....s....<.@
 800da84:	00020300 0000006b 40013000 00020301     ....k....0.@....
 800da94:	00000077 40003c00 00020301 000000ff     w....<.@........
 800daa4:	ffffffff 00ffff00                       ........

0800daac <_ZTVN5codal3I2CE>:
	...
 800dab4:	0800ca7d 0800ca85 0800ca85 0800ca8d     }...............
 800dac4:	0800ca8d 0800cb05 0800ca95 0800cb99     ................
 800dad4:	0800cab5                                ....
