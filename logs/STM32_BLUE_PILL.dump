
projects/blink/built/dockercodal/build/STM32_BLUE_PILL:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08006000 l    d  .text	00000000 .text
08005080 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800c750 l    d  .preinit_array	00000000 .preinit_array
08005080 l    d  .boot_init_array	00000000 .boot_init_array
0800c750 l    d  .init_array	00000000 .init_array
0800c758 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20002800 l    d  .data	00000000 .data
20000534 l    d  .boot_bss	00000000 .boot_bss
20002808 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 reset_handler.c
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
08000244 l     F .boot_text	00000010 _ZL10timer_tickv
08000254 l     F .boot_text	00000010 _ZL11timer_alarmv
08000264 l     F .boot_text	00000030 target_dmesg_flush.part.0
20000540 l     O .boot_bss	00000001 _ZL11initialised
20000534 l     O .boot_bss	00000004 _ZL13tick_callback
20000538 l     O .boot_bss	00000004 _ZL14alarm_callback
00000000 l    df *ABS*	00000000 CortexContextSwitch.s.o
080004a8 l       .boot_text	00000000 store_context_complete
080004ba l       .boot_text	00000000 store_stack_complete
080004ae l       .boot_text	00000000 store_stack
080004d4 l       .boot_text	00000000 restore_stack_complete
080004c8 l       .boot_text	00000000 restore_stack
08000528 l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 flash_common_f.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 pwr_common_v1.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 desig.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 rcc.c
0800089c l     F .boot_text	00000010 rcc_is_osc_ready.part.0
080008ac l     F .boot_text	00000010 rcc_osc_on.part.1
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08000a30 l     F .boot_text	00000034 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_control.c
08000b94 l     F .boot_text	00000052 usb_control_send_chunk
08000be8 l     F .boot_text	00000062 usb_control_request_dispatch
08000c4c l     F .boot_text	0000007a usb_control_setup_read
08000cc8 l     F .boot_text	00000046 usb_control_recv_chunk
00000000 l    df *ABS*	00000000 usb_standard.c
08000eb0 l     F .boot_text	00000030 usb_standard_set_address
08000ee0 l     F .boot_text	0000009e usb_standard_set_configuration
08000f80 l     F .boot_text	0000002c usb_standard_get_configuration
08000fac l     F .boot_text	0000003c usb_standard_get_interface
08000fe8 l     F .boot_text	00000018 usb_standard_device_get_status
08001000 l     F .boot_text	0000002a usb_standard_endpoint_get_status
0800102c l     F .boot_text	00000010 usb_standard_endpoint_stall
0800103c l     F .boot_text	00000010 usb_standard_endpoint_unstall
0800104c l     F .boot_text	00000052 usb_standard_set_interface
080010a0 l     F .boot_text	00000298 usb_standard_get_descriptor
08001338 l     F .boot_text	00000018 usb_standard_interface_get_status
00000000 l    df *ABS*	00000000 flash_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000544 l     O .boot_bss	00000020 msgQList
200005f0 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
200005f1 l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
200005f2 l     O .boot_bss	00000001 nTasks
20000564 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_event.c
200005f3 l     O .boot_bss	00000001 nEvents
00000000 l    df *ABS*	00000000 qfplib.S.o
00000001 l       *ABS*	00000000 include_faster
00000001 l       *ABS*	00000000 include_conversions
00000001 l       *ABS*	00000000 include_scientific
08001d2c l       .boot_text	00000000 xchxy
08001d34 l       .boot_text	00000000 unpackxy
08001d42 l       .boot_text	00000000 unpackx
08001d70 l       .boot_text	00000000 packx
08001d7e l       .boot_text	00000000 packx0
08001dc2 l       .boot_text	00000000 unpackxyalign
08001e0c l       .boot_text	00000000 packret
08001e12 l       .boot_text	00000000 mul0
08001e62 l       .boot_text	00000000 fmul0
08001e6a l       .boot_text	00000000 fdiv_n
08001ea2 l       .boot_text	00000000 infret
08001eac l       .boot_text	00000000 fdiv_fast_n
08001f5c l       .boot_text	00000000 rcpapp
08001ef4 l       .boot_text	00000000 div0
08001f64 l       .boot_text	00000000 rsqrtapp
08001fbe l       .boot_text	00000000 packretns
08001fd4 l       .boot_text	00000000 cordic_start
08001fde l       .boot_text	00000000 cordic_vstep
08001fe4 l       .boot_text	00000000 cordic_rstep
08002010 l       .boot_text	00000000 cordic_rot
08002032 l       .boot_text	00000000 cordic_exit
08002038 l       .boot_text	00000000 cordic_vec
08002184 l       .boot_text	00000000 pi_q29
08002184 l       .boot_text	00000000 tab_cc
080021b8 l       .boot_text	00000000 tab_ch
080021f4 l       .boot_text	00000000 qfp_lib_end
00000000 l    df *ABS*	00000000 functions.c
200005f4 l     O .boot_bss	0000002e float_usage
00000000 l    df *ABS*	00000000 strtol.c
08002f2c l     F .boot_text	000000f0 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 strcmp.S.o
00000000 l    df *ABS*	00000000 strlen.S.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
08003150 l     F .boot_text	00000038 debug_flush.part.1
08003188 l     F .boot_text	00000058 _ZL12debug_appendPKcj
080031e0 l     F .boot_text	00000014 debug_print.part.3
20000725 l     O .boot_bss	00000001 _ZL10logEnabled
20000624 l     O .boot_bss	00000101 _ZL11debugBuffer
00000000 l    df *ABS*	00000000 bluepill.cpp
20000738 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 timer.cpp
20000728 l     O .boot_bss	00000004 _ZL10alarmCount
2000072c l     O .boot_bss	00000004 _ZL8tickFunc
20000730 l     O .boot_bss	00000004 _ZL9alarmFunc
20000734 l     O .boot_bss	00000004 _ZL9tickCount
20000739 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 bootloader.c
00000000 l    df *ABS*	00000000 usb_conf.c
080036e0 l     F .boot_text	00000060 set_aggregate_callback
08003a44 l     F .boot_text	00000078 aggregate_callback
2000073c l     O .boot_bss	00000028 config_callback
20000764 l     O .boot_bss	00000050 control_callback
200007b4 l     O .boot_bss	00000019 serial_number
20000cb4 l     O .boot_bss	00000100 usbd_control_buffer
20000424 l     O .boot_data	00000008 capabilities
2000042c l     O .boot_data	00000024 usb_strings
08004994 l     O .boot_text	00000009 bos_descriptor
080049a0 l     O .boot_text	00000008 cdc_iface_assoc
080049a8 l     O .boot_text	00000013 cdcacm_functional_descriptors
080049bc l     O .boot_text	0000000f comm_endp
080049cc l     O .boot_text	00000015 comm_iface
080049e4 l     O .boot_text	0000000d config
08004b0c l     O .boot_text	00000030 interfaces
080049f4 l     O .boot_text	0000001e data_endp
08004a14 l     O .boot_text	00000015 data_iface
08004a2c l     O .boot_text	00000012 dev
08004ad4 l     O .boot_text	0000001e hf2_endp
08004af4 l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08003abc l     F .boot_text	00000028 webusb_set_config
08003ae4 l     F .boot_text	000000a4 webusb_control_vendor_request
200007d4 l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
08003be0 l     F .boot_text	0000009c winusb_control_vendor_request
08003c7c l     F .boot_text	00000028 winusb_set_config
08003ca4 l     F .boot_text	00000048 winusb_descriptor_request
20000450 l     O .boot_data	000000b2 msos20_descriptor_set
20000504 l     O .boot_data	00000028 winusb_wcid
08004ccc l     O .boot_text	00000092 guid
08004dd4 l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 target_stm32f103.c
200007d8 l     O .boot_bss	00000004 erase_end.5517
200007dc l     O .boot_bss	00000004 erase_start.5516
00000000 l    df *ABS*	00000000 cdc.c
08003f40 l     F .boot_text	00000014 cdcacm_comm_cb
08003f54 l     F .boot_text	00000050 cdcacm_data_rx_cb
08003fa4 l     F .boot_text	00000068 cdcacm_set_config
0800400c l     F .boot_text	00000068 cdcacm_control_request
200007e0 l     O .boot_bss	00000041 cdcbuf
08004ecc l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08004098 l     F .boot_text	0000003c hf2_set_config
080041b4 l     F .boot_text	00000004 hf2_data_tx_cb
080041b8 l     F .boot_text	000001e4 hf2_data_rx_cb
080040d4 l     F .boot_text	0000001c assert.part.0
080040f0 l     F .boot_text	00000088 pokeSend
08004178 l     F .boot_text	0000003c send_hf2_response
20000824 l     O .boot_bss	00000004 _usbd_dev
20000828 l     O .boot_bss	00000040 buf
20000868 l     O .boot_bss	00000040 buf.5928
08004ee0 l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 usb21_standard.c
080043c8 l     F .boot_text	00000028 usb21_set_config
080043f0 l     F .boot_text	00000104 usb21_standard_get_descriptor
200008a8 l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 ghostfat.c
0800457c l     F .boot_text	00000098 flushFlash
200008ac l     O .boot_bss	00000400 flashBuf
20000cac l     O .boot_bss	00000004 lastFlush
20000cb0 l     O .boot_bss	00000004 ms
20000530 l     O .boot_data	00000001 firstFlush
2000052c l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 core.cpp
080067d4 l     F .text	00000002 _ZN3pxtL13dtorDoNothingEv
080067d8 l     F .text	00000008 _ZN3pxtL11string_sizeEPNS_11BoxedStringE
080067e0 l     F .text	00000004 _ZN3pxtL11number_sizeEPNS_11BoxedNumberE
080067e4 l     F .text	00000008 _ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE
08006d68 l     F .text	0000000e _ZN3pxt7fromIntEi.part.8
0800709c l     F .text	0000004c _ZN3pxt8toDoubleEPNS_12TValueStructE.part.12
080078d4 l     F .text	000000a6 _ZN6numopsL10valCompareEPN3pxt12TValueStructES2_
20002808 l     O .bss	00000004 _ZN3pxtL15handlerBindingsE
20002800 l     O .data	00000004 _ZN3pxtL12random_valueE
0800be88 l     O .text	00000018 CSWTCH.116
0800bf7c l     O .text	00000010 _ZN3pxtL12sUndefinedTpE
0800bf38 l     O .text	0000000e _ZN3pxtL10sBooleanTpE
0800c000 l     O .text	0000000d _ZN3pxtL9sNumberTpE
0800c020 l     O .text	0000000d _ZN3pxtL9sStringTpE
0800c010 l     O .text	0000000d _ZN3pxtL9sObjectTpE
0800bf6c l     O .text	0000000f _ZN3pxtL11sFunctionTpE
0800bf48 l     O .text	00000010 _ZN3pxtL10sUndefinedE
0800bf58 l     O .text	0000000a _ZN3pxtL11emptyBufferE
0800bf64 l     O .text	00000007 _ZN3pxtL11emptyStringE
0800bf8c l     O .text	0000000f _ZN3pxtL4sInfE
0800bf9c l     O .text	0000000a _ZN3pxtL4sNaNE
0800bfa8 l     O .text	00000010 _ZN3pxtL5sMInfE
0800bfb8 l     O .text	0000000b _ZN3pxtL5sNullE
0800bfc4 l     O .text	0000000b _ZN3pxtL5sTrueE
0800bfd0 l     O .text	0000000c _ZN3pxtL6sFalseE
0800bfdc l     O .text	0000000f _ZN3pxtL7sObjectE
0800bfec l     O .text	00000011 _ZN3pxtL9sFunctionE
00000000 l    df *ABS*	00000000 advmath.cpp
00000000 l    df *ABS*	00000000 buffer.cpp
08006264 l     F .text	00000062 _ZN3pxtL9readBytesEPhS0_ibi
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 gc.cpp
08007c3c l     F .text	0000003e _ZN3pxtL13getObjectSizeEPNS_9RefObjectE
08007c7c l     F .text	00000054 _ZN3pxtL9removePtrEPNS_12TValueStructE
080080a8 l     F .text	000000d0 _ZN3pxtL13allocateBlockEv
08008514 l     F .text	00000018 _GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
2000280c l     O .bss	00000004 _ZN3pxtL10firstBlockE
20002e4d l     O .bss	00000001 _ZN3pxtL11tempRootLenE
20002810 l     O .bss	00000004 _ZN3pxtL6midPtrE
20002814 l     O .bss	00000008 _ZN3pxtL7gcRootsE
2000281c l     O .bss	00000004 _ZN3pxtL8tempRootE
20002820 l     O .bss	00000004 _ZN3pxtL9firstFreeE
20002824 l     O .bss	00000008 _ZN3pxtL9workQueueE
00000000 l    df *ABS*	00000000 loops.cpp
00000000 l    df *ABS*	00000000 pxt.cpp
0800859c l     F .text	0000009c _ZN3pxt9LLSegment9setLengthEj.part.7
08008638 l     F .text	0000001c _ZN3pxt8checkStrEbPKc.part.8
0800bdf0 l     O .text	00000024 _ZN3pxtL13RefMap_vtableE
0800be20 l     O .text	00000024 _ZN3pxtL18RefRefLocal_vtableE
0800be50 l     O .text	00000024 _ZN3pxtL20RefCollection_vtableE
00000000 l    df *ABS*	00000000 codal.cpp
08008bf4 l     F .text	00000018 _ZN3pxtL10runAction0EPNS_12TValueStructE
08008f5c l     F .text	00000058 _GLOBAL__sub_I__ZN3pxt8devTimerE
00000000 l    df *ABS*	00000000 control.cpp
00000000 l    df *ABS*	00000000 i2c.cpp
08009064 l     F .text	00000040 _ZN4pinsL7initI2CEv.part.0
20002884 l     O .bss	00000004 _ZN4pinsL3i2cE
00000000 l    df *ABS*	00000000 pins.cpp
20002e4e l     O .bss	00000001 _ZN3pxtL10numPinPtrsE
20002888 l     O .bss	00000080 _ZN3pxtL6pinPosE
20002908 l     O .bss	00000004 _ZN3pxtL7pinPtrsE
00000000 l    df *ABS*	00000000 pinsAnalog.cpp
00000000 l    df *ABS*	00000000 pinsDigital.cpp
00000000 l    df *ABS*	00000000 pinsPWM.cpp
00000000 l    df *ABS*	00000000 platform.cpp
00000000 l    df *ABS*	00000000 spi.cpp
08009390 l     F .text	00000054 _ZN4pinsL7initSPIEv.part.0
2000290c l     O .bss	00000004 _ZN4pinsL3spiE
00000000 l    df *ABS*	00000000 usb.cpp
20002910 l     O .bss	00000004 _ZN3pxtL11pSendToUARTE
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 pointers.cpp
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDevice.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
08009764 l     F .text	00000074 _ZL9logwritenPKci
080097d8 l     F .text	00000088 _ZL11logwritenummbb
00000000 l    df *ABS*	00000000 CodalFiber.cpp
0800995c l     F .text	00000032 _ZL15get_fibers_fromPPPN5codal5FiberEPiS1_
08009bd0 l     F .text	00000034 _ZL10handle_fobv
08009c04 l     F .text	00000058 _Z14__create_fibermmmi.part.2
08009ec0 l     F .text	00000184 _ZN5codal8scheduleEv.part.6
20002e1c l     O .bss	00000004 _ZN5codalL10messageBusE
20002e20 l     O .bss	00000004 _ZN5codalL10sleepQueueE
20002e50 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
20002e24 l     O .bss	00000004 _ZN5codalL11forkedFiberE
20002e28 l     O .bss	00000004 _ZN5codalL8runQueueE
20002e2c l     O .bss	00000004 _ZN5codalL9fiberPoolE
20002e30 l     O .bss	00000004 _ZN5codalL9idleFiberE
20002e34 l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20002e51 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20002804 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
0800ad28 l     F .text	0000002c _ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0
0800ad28 l     F .text	0000002c _ZN5codal5EventC2EttmNS_15EventLaunchModeE.part.1
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
0800afec l     F .text	00000024 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1
00000000 l    df *ABS*	00000000 CmSPI.cpp
0800b0e0 l     F .text	00000054 _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0
0800b134 l     F .text	0000005c _ZN5codal3_cm3SPI4initEv.part.1
00000000 l    df *ABS*	00000000 CmTimer.cpp
00000000 l    df *ABS*	00000000 CmPinMap.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .boot_data	00000410 impure_data
08002480 g     F .boot_text	00000034 __wrap___aeabi_dcmpun
0800b308 g     F .text	00000038 pinmap_mode
08006bd0 g     F .text	00000030 _ZN7String_7indexOfEPN3pxt11BoxedStringES2_i
0800a4f0 g     F .text	00000030 _ZN5codal5TimerC1Ev
080062f8 g     F .text	00000050 _ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii
08004614 g     F .boot_text	00000048 flash_write
08007604 g     F .text	00000020 _ZN5Math_5roundEPN3pxt12TValueStructE
0800b094 g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800ad0c g     F .text	00000012 _ZN5codal10MessageBusD0Ev
080022c4 g     F .boot_text	00000030 __wrap___aeabi_ddiv
08008e48 g     F .text	00000020 _ZN3pxt16afterProgramPageEv
080095b0  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
08007dc8 g     F .text	00000034 _ZN3pxt13gcScanSegmentERNS_7SegmentE
08001718 g     F .boot_text	00000040 st_usbfs_ep_stall_get
08009a58 g     F .text	00000044 _ZN5codal14scheduler_tickENS_5EventE
08001eaa g     F .boot_text	00000000 qfp_fdiv_fast
08002534 g     F .boot_text	0000001c log
080067b4 g     F .text	00000006 _ZN7control2gcEv
08005080 g       .boot_preinit_array	00000000 __boot_preinit_array_start
080064f0 g     F .text	00000136 _ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE
08002518 g     F .boot_text	0000001c sqrt
08000da8 g     F .boot_text	0000009e _usbd_control_out
08009500  w    F .text	00000002 _ZN3pxt4decrEPNS_12TValueStructE
080028ec g     F .boot_text	000000a4 cosh
080003e8 g     F .boot_text	00000004 tcb_configure_stack_base
08002a40 g     F .boot_text	000000a4 asinh
0800b0a8 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08006794 g     F .text	00000004 _ZN7control13runInParallelEPN3pxt12TValueStructE
080068b4 g     F .text	00000040 _ZN3pxt8mkBufferEPKhi
08000150 g     F .boot_text	000000f4 reset_handler
080003d0 g     F .boot_text	00000008 fiber_initial_stack_base
20002e52 g     O .bss	00000001 heap_count
080035ec g     F .boot_text	000000f4 bootloader_start
0800b020 g     F .text	00000054 _ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE
0800896c g     F .text	00000010 _ZN3pxt11RefRefLocalC1Ev
08000b5c g     F .boot_text	0000000e usbd_ep_write_packet
0800b88c g     F .text	0000005a .hidden __floatdidf
08000b7c g     F .boot_text	00000008 usbd_ep_stall_set
0800ae88 g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800c64c g     O .text	00000048 PinMap_SPI_MOSI
080063a0 g     F .text	00000080 _ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii
0800a458 g     F .text	00000018 _ZN5codal8ListenerD2Ev
08008a38 g     F .text	00000108 _ZN3pxt11exec_binaryEPj
080003e4 g     F .boot_text	00000004 tcb_configure_sp
0800059c  w    F .boot_text	00000002 usart3_isr
08008e68 g     F .text	00000004 _ZN3pxt15getSerialNumberEv
08003588 g     F .boot_text	00000030 rtc_isr
0800c594 g     O .text	00000018 _ZTVN5codal3_cm5TimerE
080076c0 g     F .text	0000012a _ZN3pxt7eq_boolEPNS_12TValueStructES1_
080032b8 g     F .boot_text	00000030 _Z11debug_printi
0800ac0c g     F .text	00000094 _ZN5codal10MessageBusC2Ev
0800331c g     F .boot_text	00000018 _Z13debug_printlni
0800059c  w    F .boot_text	00000002 tim7_isr
08001a50 g     F .boot_text	0000000c exti_reset_request
20000eb8 g     O .boot_bss	00000001 running_tid
20002858 g     O .bss	00000004 _ZN3pxt6deviceE
0800059c  w    F .boot_text	00000002 adc1_2_isr
0800ad9c g     F .text	00000024 _ZN5codal14EventQueueItemC2ENS_5EventE
0800b1c4 g     F .text	00000060 _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_
080062cc g     F .text	00000016 _ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi
08007044 g     F .text	0000000c _ZN5pxtrt13getGlobalsPtrEv
080003f0 g     F .boot_text	00000004 get_current_sp
080024b4 g     F .boot_text	0000002c __wrap___aeabi_d2iz
0800059c  w    F .boot_text	00000002 tim1_trg_com_isr
08006e34 g     F .text	00000010 _ZN6Array_5getAtEPN3pxt13RefCollectionEi
08007800 g     F .text	00000010 _ZN6numops3neqEPN3pxt12TValueStructES2_
08006b9c g     F .text	00000034 _ZN7String_6substrEPN3pxt11BoxedStringEii
0800920c g     F .text	00000010 _ZN3pxt9lookupPinEi
08006da4 g     F .text	00000012 _ZN3pxt7fromIntEi
08006dd4 g     F .text	0000000a _ZN3pxt8fromBoolEb
0800ae08 g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
0800308c g     F .boot_text	00000034 memmove
080075c8 g     F .text	00000012 _ZN5Math_5floorEPN3pxt12TValueStructE
08006f18 g     F .text	00000008 _ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE
08006e44 g     F .text	00000006 _ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
080067d0 g     F .text	00000004 _ZN7control16profilingEnabledEv
08009520 g     F .text	0000002c _ZN5codal14string_reverseEPc
0800b3b0 g     F .text	00000050 _ZN5codal3I2C12readRegisterEthPhib
0800970c g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
08008cc8 g     F .text	00000004 _ZN3pxt8sleep_usEy
08008554 g     F .text	00000028 _ZN3pxt9RefAction5printEPS0_
080064d4 g     F .text	00000014 _ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_
08001dfa g     F .boot_text	00000000 qfp_fadd
0800b988 g     F .text	00000070 .hidden __powidf2
0800141c g     F .boot_text	00000064 _usbd_standard_request
08008804 g     F .text	00000032 _ZN3pxt7Segment3setEjPNS_12TValueStructE
08003d48 g     F .boot_text	00000018 target_set_led
08009504  w    F .text	00000010 _ZN3pxt12ptrOfLiteralEi
08000b8c g     F .boot_text	00000008 usbd_ep_nak_set
08006808 g     F .text	00000050 _ZN3pxt10setBindingEiiPNS_12TValueStructE
080022f4 g     F .boot_text	00000030 __wrap___aeabi_dmul
0800059c  w    F .boot_text	00000002 usb_hp_can_tx_isr
08006ea8 g     F .text	00000004 _ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE
08008904 g     F .text	00000038 _ZN3pxt7Segment5printEv
080094a0 g     F .text	00000002 _ZN3pxt8usb_initEv
080084b8 g     F .text	00000006 _ZN3pxt13RefCollection4scanEPS0_
08007d48 g     F .text	00000038 _ZN3pxt6gcScanEPNS_12TValueStructE
0800a770  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
08009860 g     F .text	000000d4 codal_vdmesg
08001df4 g     F .boot_text	00000000 qfp_fsub
08007578 g     F .text	00000012 _ZN5Math_4atanEPN3pxt12TValueStructE
0800b390 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
08000768 g     F .boot_text	000000bc flash_erase_page
08002d64 g     F .boot_text	00000088 ceil
0800b494 g     F .text	000000d0 _ZN5codal3I2C4readEtPhib
08000388 g     F .boot_text	00000010 target_seed_random
08006628 g     F .text	0000001a _ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE
08008a14 g     F .text	0000000c _ZN3pxt12templateHashEv
0800059c  w    F .boot_text	00000002 tim6_isr
08003e44 g     F .boot_text	00000004 target_flash_unlock
08005080 g       *ABS*	00000000 _boot_data_loadaddr
08002cdc g     F .boot_text	00000088 floor
0800bd60 g     O .text	00000024 _ZN3pxt9number_vtE
0800c758 g       .init_array	00000000 _etext
0800895c g     F .text	00000010 _ZN3pxt13RefCollectionC1Ev
08000824 g     F .boot_text	00000076 gpio_set_mode
08006fe4 g     F .text	00000014 _ZN5pxtrt6mapGetEPN3pxt6RefMapEj
080099ec g     F .text	00000036 _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800b020 g     F .text	00000054 _ZN5codal3_cm3PinC2Ei7PinNameNS_13PinCapabilityE
0800059c  w    F .boot_text	00000002 usb_wakeup_isr
080077f0 g     F .text	00000010 _ZN6numops2eqEPN3pxt12TValueStructES2_
20000ec0 g     O .boot_bss	00001044 pkt
0800059c g     F .boot_text	00000002 blocking_handler
0800973c g     F .text	00000006 _ZN5codal11CodalDevice5sleepEm
20000eb9 g     O .boot_bss	00000001 running
08003418 g     F .boot_text	00000020 led_setup
0800059c  w    F .boot_text	00000002 tim5_isr
080071e8 g     F .text	0000002a _ZN6numops4asrsEPN3pxt12TValueStructES2_
080032f4 g     F .boot_text	00000028 debug_println
080079c4 g     F .text	00000022 _ZN6numops2ltEPN3pxt12TValueStructES2_
0800059c  w    F .boot_text	00000002 otg_fs_isr
08000400 g     F .boot_text	00000070 test_codal
0800ae74 g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
0800b2cc g     F .text	0000003c pinmap_peripheral
0800059c  w    F .boot_text	00000002 spi1_isr
08000354 g     F .boot_text	00000034 target_wait_us
080002e0 g     F .boot_text	00000014 target_reset
0800730c g     F .text	00000026 _ZN6numops4subsEPN3pxt12TValueStructES2_
0800a24c g     F .text	0000003c _Z18device_create_heapmm
080070e8 g     F .text	00000004 _ZN3pxt8toDoubleEPNS_12TValueStructE
08007054 g     F .text	00000048 _ZN3pxt7valTypeEPNS_12TValueStructE
0800a2ac g     F .text	0000008e _Z16device_malloc_injR14HeapDefinition
08003cec g     F .boot_text	0000005c winusb_setup
0800afac g     F .text	00000040 _ZN5codal3_cm3Pin7eventOnEi
08003030 g     F .boot_text	0000001c memcpy
08008cac  w    F .text	00000014 _ZN5codal3_cm5TimerD2Ev
0800059c  w    F .boot_text	00000002 exti2_isr
0800059c  w    F .boot_text	00000002 dma1_channel6_isr
08006e18 g     F .text	00000006 _ZN6Array_9setLengthEPN3pxt13RefCollectionEi
08006784 g     F .text	00000004 _ZN7control15internalOnEventEiiPN3pxt12TValueStructEi
080093e4 g     F .text	00000028 _ZN4pins8spiWriteEi
08009240 g     F .text	00000010 _ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE
080005a0 g     F .boot_text	00000002 null_handler
08006f0c g     F .text	0000000c _ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE
08008990 g     F .text	00000064 _ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE
20000004 g     O .boot_data	00000004 rcc_ahb_frequency
0800b814 g     F .text	00000022 .hidden __floatsidf
0800adc0 g     F .text	00000020 _ZN5codal22MemberFunctionCallback4fireENS_5EventE
0800bd90 g     O .text	00000024 _ZN3pxt9string_vtE
20001f0c g     O .boot_bss	00000001 dataToSendFlag
0800b1c4 g     F .text	00000060 _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_
08008c7c g     F .text	0000000e _ZN3pxt9fiberDoneEPv
08006000 g     F .text	0000016c _ZN6numops5mycvtEdPc
080003f8 g     F .boot_text	00000008 tcb_configure_args
0800439c g     F .boot_text	0000002c hf2_setup
0800bdc0 g     O .text	00000024 _ZN3pxt16RefAction_vtableE
08008cc4 g     F .text	00000004 _ZN3pxt8sleep_msEj
0800059c  w    F .boot_text	00000002 can_rx1_isr
0800c758 g       .fini_array	00000000 __fini_array_end
0800059c  w    F .boot_text	00000002 dma1_channel5_isr
0800933c g     F .text	00000018 _ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode
08007810 g     F .text	0000002e _ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi
0800b190 g     F .text	00000032 _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08006200 g     F .text	00000012 _ZN5Math_4sinhEPN3pxt12TValueStructE
08009230 g     F .text	00000006 _ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE
08008334 g     F .text	00000028 malloc
0800c38c g     O .text	00000024 _ZTVN5codal11CodalDeviceE
08006e14 g     F .text	00000004 _ZN6Array_6lengthEPN3pxt13RefCollectionE
0800059c  w    F .boot_text	00000002 dma2_channel5_isr
0800a458 g     F .text	00000018 _ZN5codal8ListenerD1Ev
0800852c g     F .text	00000004 _ZN5loops7foreverEPN3pxt12TValueStructE
08004728 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
08001c14 g     F .boot_text	00000034 rtc_clear_flag
0800a520 g     F .text	000000b8 _ZN5codal5Timer8setEventEmttb
0800753c g     F .text	00000012 _ZN5Math_3tanEPN3pxt12TValueStructE
0800785c g     F .text	00000064 _ZN6numops6toBoolEPN3pxt12TValueStructE
0800893c g     F .text	00000020 _ZN3pxt13RefCollection5printEPS0_
0800059c  w    F .boot_text	00000002 usart1_isr
080067bc g     F .text	00000014 _ZN7control8heapDumpEv
08009990 g     F .text	0000005c _ZN5codal11list_fibersEPPNS_5FiberE
0800938c g     F .text	00000002 _Z14cpu_clock_initv
08009e78 g     F .text	00000048 _ZN5codal4idleEv
0800758c g     F .text	00000012 _ZN5Math_4asinEPN3pxt12TValueStructE
2000053c g     O .boot_bss	00000004 .hidden __dso_handle
0800b7f4 g     F .text	0000001e .hidden __aeabi_ui2d
0800b340 g     F .text	00000038 pinmap_cnf
0800872c g     F .text	0000002e _ZN3pxt9LLSegment3setEjPNS_12TValueStructE
080003f4 g     F .boot_text	00000004 tcb_get_sp
08001350 g     F .boot_text	00000032 usbd_register_set_config_callback
080014f4 g     F .boot_text	00000118 st_usbfs_ep_setup
080005bc g     F .boot_text	00000010 flash_lock
080090f0 g     F .text	00000034 _ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb
08000398 g     F .boot_text	00000018 target_get_serial
0800aebc g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
08007e54 g     F .text	00000254 _ZN3pxt2gcEi
0800b570 g     F .text	00000000 .hidden __aeabi_drsub
0800ae04 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
08009370 g     F .text	0000001c _ZN3pxt13platform_initEv
0800a158 g     F .text	00000014 _ZN5codal13release_fiberEPv
0800a398 g     F .text	00000040 device_free
08008708 g     F .text	0000000a _ZN3pxt15deleteRefObjectEPNS_9RefObjectE
08006214 g     F .text	00000012 _ZN5Math_4coshEPN3pxt12TValueStructE
08009134  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
08007030 g     F .text	00000014 _ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE
080084fc g     F .text	00000004 _ZN3pxt13RefCollection6gcsizeEPS0_
0800059c  w    F .boot_text	00000002 usage_fault_handler
0800059c  w    F .boot_text	00000002 tim8_trg_com_isr
0800b2a4 g     F .text	00000028 _ZN5codal3_cm5TimerC1Ev
08009358 g     F .text	00000014 _ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi
08003338 g     F .boot_text	00000048 debug_printhex
0800059c  w    F .boot_text	00000002 can2_rx0_isr
0800695c g     F .text	00000040 _ZN7String_6charAtEPN3pxt11BoxedStringEi
08008fb4 g     F .text	00000064 _ZN3pxt15registerWithDalEiiPNS_12TValueStructEi
0800b388 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
0800059c  w    F .boot_text	00000002 tim1_brk_isr
08008e7c g     F .text	0000000c _ZN3pxt16setThreadContextEPNS_13ThreadContextE
08001f9c g     F .boot_text	00000000 qfp_float2ufix
20000ebc g     O .boot_bss	00000004 msTimer
0800aa3c g     F .text	0000009c _ZN5codal10MessageBus7processERNS_5EventEb
08008d14 g     F .text	00000008 _ZN3pxt12waitForEventEii
20002830 g     O .bss	00000004 _ZN3pxt8bytecodeE
0800a770  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
08006ec4 g     F .text	00000042 _ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE
080084c8 g     F .text	00000006 _ZN3pxt11RefRefLocal4scanEPS0_
08001efa g     F .boot_text	00000000 qfp_fsqrt_fast
20001f04 g     O .boot_bss	00000004 dataToSend
0800320c g     F .boot_text	00000010 debug_flush
0800b838 g     F .text	00000042 .hidden __extendsfdf2
08003b88 g     F .boot_text	00000058 webusb_setup
0800b57c g     F .text	00000276 .hidden __adddf3
08009030 g     F .text	00000010 _ZN7control16deviceDalVersionEv
0800944c g     F .text	00000028 _ZN4pins12spiFrequencyEi
0800b378 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
0800a058 g     F .text	00000048 _ZN5codal11fiber_sleepEm
0800ab3c g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08001a74 g     F .boot_text	00000018 rtc_exit_config_mode
08009514  w    F .text	00000002 _ZN3pxt16startPerfCounterENS_12PerfCountersE
0800c45c g     O .text	0000002c _ZTVN5codal3_cm3I2CE
0800059c  w    F .boot_text	00000002 can2_rx1_isr
080006d0 g     F .boot_text	00000098 flash_program_half_word
08003414 g     F .boot_text	00000004 _ZdlPv
080070ec g     F .text	000000cc _ZN3pxt6toUIntEPNS_12TValueStructE
080005d8 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
080084c0 g     F .text	00000008 _ZN3pxt9RefAction4scanEPS0_
080075dc g     F .text	00000012 _ZN5Math_4ceilEPN3pxt12TValueStructE
0800b234 g     F .text	00000004 _ZN5codal3_cm14alarm_callbackEv
0800059c  w    F .boot_text	00000002 tim1_cc_isr
0800a718 g     F .text	0000002c _ZN5codal27system_timer_event_every_usEmtt
0800af4c g     F .text	00000028 _ZN5codal3_cm3Pin15getAnalogPeriodEv
080005f8 g     F .boot_text	0000001a rcc_periph_clock_enable
08000b0c g     F .boot_text	00000038 _usbd_reset
0800b7f4 g     F .text	0000001e .hidden __floatunsidf
080075b4 g     F .text	00000012 _ZN5Math_4sqrtEPN3pxt12TValueStructE
0800387c g     F .boot_text	00000050 dump_buffer
0800b238 g     F .text	00000012 _ZN5codal3_cm5Timer9triggerInEm
0800059c  w    F .boot_text	00000002 sdio_isr
08006460 g     F .text	00000072 _ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii
080075f0 g     F .text	00000012 _ZN5Math_5truncEPN3pxt12TValueStructE
08006940 g     F .text	0000001c _ZN7String_12fromCharCodeEi
08000e48 g     F .boot_text	00000068 _usbd_control_in
0800452c g     F .boot_text	00000038 backup_write
0800059c  w    F .boot_text	00000002 eth_isr
080088c0 g     F .text	00000044 _ZN3pxt7Segment6insertEjPNS_12TValueStructE
08006798 g     F .text	00000004 _ZN7control12waitForEventEii
08008510 g     F .text	00000004 _ZN3pxt6RefMap6gcsizeEPS0_
0800b388 g     F .text	00000006 _ZN5codal3I2C5writeEh
20000008 g     O .boot_data	00000004 rcc_apb1_frequency
08001fc4 g     F .boot_text	00000000 qfp_ufix2float
08004564 g     F .boot_text	00000018 backup_read
08009278 g     F .text	00000038 _ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE
20002e4f g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
0800301c g     F .boot_text	00000014 strtol
080023b8 g     F .boot_text	00000030 __wrap___aeabi_dcmplt
0800059c  w    F .boot_text	00000002 dma1_channel4_isr
08006a08 g     F .text	00000024 _ZN7String_7compareEPN3pxt11BoxedStringES2_
0800059c  w    F .boot_text	00000002 tim8_brk_isr
0800a6e0 g     F .text	0000001c _ZN5codal25system_timer_current_timeEv
080089f8 g     F .text	0000001c _ZN3pxt5errorENS_9PXT_PANICEi
0800244c g     F .boot_text	00000034 __wrap___aeabi_dcmpgt
0800059c  w    F .boot_text	00000002 dma2_channel4_5_isr
0800936c g     F .text	00000004 _ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi
0800ad9c g     F .text	00000024 _ZN5codal14EventQueueItemC1ENS_5EventE
080072dc g     F .text	0000000c _ZN3pxt7toFloatEPNS_12TValueStructE
20002e18 g     O .bss	00000004 _ZN5codal12currentFiberE
0800b8e8 g     F .text	0000009e .hidden __aeabi_d2f
0800a6dc g     F .text	00000002 _ZN5codal5TimerD2Ev
080002a0 g     F .boot_text	0000000c target_set_alarm_callback
20002e44 g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
08009e68 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
080095c0 g     F .text	00000074 _Z18component_callbackN5codal5EventE
20002e54 g       .bss	00000000 _ebss
08006420 g     F .text	00000040 _ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE
0800ad54 g     F .text	0000001c _ZN5codal5EventC1EttNS_15EventLaunchModeE
08001c78 g     F .boot_text	00000034 os_init
08000b4c g     F .boot_text	0000000e usbd_ep_setup
08006c10 g     F .text	00000008 _ZN8Boolean_4bangEi
080071bc g     F .text	0000002a _ZN6numops4lslsEPN3pxt12TValueStructES2_
0800056e g       .boot_text	00000000 restore_register_context
08008bec  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08000d10 g     F .boot_text	00000032 usbd_register_control_callback
0800a5d8 g     F .text	0000002e _ZN5codal5Timer4syncEm
0800059c  w    F .boot_text	00000002 pvd_isr
08000b6c g     F .boot_text	0000000e usbd_ep_read_packet
080084e8 g     F .text	00000012 _ZN3pxt14RefRecord_scanEPNS_9RefRecordE
0800b564 g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800ad70 g     F .text	00000018 _ZN5codal5EventC1EttmNS_15EventLaunchModeE
0800858c g     F .text	00000010 _ZN3pxt6RefMap5printEPS0_
0800a3d8 g     F .text	00000020 calloc
080033a4 g     F .boot_text	00000054 platform_setup
080076a0 g     F .text	00000010 _ZN6numops3eqqEPN3pxt12TValueStructES2_
08006e2c g     F .text	00000006 _ZN6Array_3popEPN3pxt13RefCollectionE
08008a2c g     F .text	0000000c _ZN3pxt13getNumGlobalsEv
0800850c g     F .text	00000004 _ZN3pxt11RefRefLocal6gcsizeEPS0_
08001f9a g     F .boot_text	00000000 qfp_float2uint
08009954  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08001d20 g     F .boot_text	0000000c os_event_init
08008ccc g     F .text	00000024 _ZN3pxt10runForeverEPNS_12TValueStructE
080086b8 g     F .text	00000044 _ZN3pxt15mkClassInstanceEPNS_6VTableE
08006a2c g     F .text	00000004 _ZN7String_6lengthEPN3pxt11BoxedStringE
200007d0 g     O .boot_bss	00000004 usbd_dev
0800678c g     F .text	00000006 _ZN7control10waitMicrosEi
08000308 g     F .boot_text	00000004 target_disable_irq
08003438 g     F .boot_text	00000010 led_on
0800b57c g     F .text	00000276 .hidden __aeabi_dadd
0800a148 g     F .text	00000010 _ZN5codal16launch_new_fiberEPFvvES1_
20000eba g     O .boot_bss	00000001 last_running_task
0800951c  w    F .text	00000002 _ZN3pxt16dumpPerfCountersEv
0800aca0 g     F .text	00000064 _ZN5codal10MessageBusD2Ev
080005a0  w    F .boot_text	00000002 sv_call_handler
0800bd30 g     O .text	00000024 _ZN3pxt9buffer_vtE
08006764 g     F .text	0000001c _ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi
0800059c  w    F .boot_text	00000002 rcc_isr
08002354 g     F .boot_text	00000030 __wrap___aeabi_dsub
08000000 g     O .boot_text	00000150 vector_table
08000638 g     F .boot_text	00000070 desig_get_unique_id_as_string
0800b87c g     F .text	0000006a .hidden __aeabi_ul2d
0800053e g       .boot_text	00000000 save_register_context
080020ae g     F .boot_text	00000000 qfp_fexp
08007264 g     F .text	0000001e _ZN6numops4bnotEPN3pxt12TValueStructE
08003810 g     F .boot_text	00000050 aggregate_register_callback
0800209c g     F .boot_text	00000000 qfp_fcos
0800857c g     F .text	00000010 _ZN3pxt11RefRefLocal5printEPS0_
0800895c g     F .text	00000010 _ZN3pxt13RefCollectionC2Ev
0800913c g     F .text	000000bc _ZN3pxt6getPinEi
08006250 g     F .text	00000012 _ZN5Math_5acoshEPN3pxt12TValueStructE
08006e5c g     F .text	00000010 _ZN3pxt11programSizeEv
0800059c  w    F .boot_text	00000002 flash_isr
0800c758 g       *ABS*	00000000 _data_loadaddr
08009da4 g     F .text	00000098 _ZN5codal19fiber_wake_on_eventEtt
08009040 g     F .text	00000008 _ZN7control19allocateNotifyEventEv
20002e54 g       .bss	00000000 end
0800059c  w    F .boot_text	00000002 uart4_isr
08007334 g     F .text	00000054 _ZN6numops4mulsEPN3pxt12TValueStructES2_
08001b64 g     F .boot_text	00000058 rtc_interrupt_enable
0800aecc g     F .text	00000080 _ZN5codal3_cm3Pin15setDigitalValueEi
080035b8 g     F .boot_text	00000030 rtc_alarm_isr
0800679c g     F .text	00000004 _ZN7control18deviceSerialNumberEv
0800059c  w    F .boot_text	00000002 exti15_10_isr
08005080 g       .boot_init_array	00000000 __boot_init_array_end
08009d94 g     F .text	00000010 _ZN5codal23fiber_scheduler_runningEv
20001f08 g     O .boot_bss	00000004 dataToSendLength
08009758  w    F .text	00000006 _ZN5codal11CodalDevice4waitEm
0800a608 g     F .text	000000d4 _ZN5codal5Timer7triggerEv
0800a3f8 g     F .text	0000002e device_realloc
0800ae28 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
080003ec g     F .boot_text	00000004 tcb_get_stack_base
0800ad88 g     F .text	00000012 _ZN5codal5EventC2Ev
080003d8 g     F .boot_text	00000006 tcb_allocate
08007214 g     F .text	00000028 _ZN6numops4eorsEPN3pxt12TValueStructES2_
0800c3d8 g     O .text	00000018 _ZTVN5codal5TimerE
08002dec g     F .boot_text	00000140 fmod
0800a288 g     F .text	00000024 _Z16device_heap_sizeh
08002664 g     F .boot_text	00000034 cos
0800c56c g     O .text	0000001c _ZTVN5codal3_cm3SPIE
08008b40 g     F .text	00000028 _ZN3pxt5startEv
0800c694 g     O .text	00000048 PinMap_SPI_NSS
08002990 g     F .boot_text	000000b0 tanh
0800059c  w    F .boot_text	00000002 hard_fault_handler
0800b400 g     F .text	00000094 _ZN5codal3I2C5writeEtPhib
0800059c  w    F .boot_text	00000002 exti1_isr
08006db8 g     F .text	0000001c _ZN3pxt8fromUIntEj
0800aec4 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
08009054 g     F .text	00000010 _ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv
0800241c g     F .boot_text	00000030 __wrap___aeabi_dcmpge
0800b278 g     F .text	0000002c _ZN5codal3_cm5Timer4initEv
08003860 g     F .boot_text	0000001c usb_set_serial_number
08007cd0 g     F .text	0000000c _ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE
0800059c  w    F .boot_text	00000002 i2c1_ev_isr
2000287c g     O .bss	00000008 _ZN3pxt9lastEventE
0800a0cc g     F .text	0000007c _ZN5codal13release_fiberEv
08000614 g     F .boot_text	00000024 rcc_periph_reset_pulse
08001e58 g     F .boot_text	00000000 qfp_fmul
0800c6dc g     O .text	00000048 PinMap_SPI_SCK
080017a8 g     F .boot_text	00000088 st_usbfs_ep_write_packet
08008488 g     F .text	0000001c _ZN3pxt13registerGCPtrEPNS_12TValueStructE
0800160c g     F .boot_text	00000048 st_usbfs_endpoints_reset
08009934 g     F .text	0000001e codal_dmesg
0800b578 g     F .text	0000027a .hidden __aeabi_dsub
0800059c  w    F .boot_text	00000002 dma2_channel1_isr
0800a7a8  w    F .text	00000030 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
080095b8  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
0800a33c g     F .text	0000005c device_malloc
08002118 g     F .boot_text	00000000 qfp_fln
08007410 g     F .text	00000026 _ZN5Math_3powEPN3pxt12TValueStructES2_
080031f4 g     F .boot_text	00000018 enable_log
080082f8 g     F .text	0000001a _ZN3pxt15gcAllocateArrayEi
080030d0 g     F .boot_text	0000002e strstr
080005a0  w    F .boot_text	00000002 pend_sv_handler
08006eac g     F .text	00000004 _ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE
08002648 g     F .boot_text	0000001c sin
0800b87c g     F .text	0000006a .hidden __floatundidf
08003408 g     F .boot_text	00000008 __cxa_pure_virtual
08009a9c g     F .text	000000e4 _ZN5codal15scheduler_eventENS_5EventE
08001c48 g     F .boot_text	00000030 rtc_check_flag
0800c604 g     O .text	00000048 PinMap_SPI_MISO
080094b4 g     F .text	0000003c _ZN3pxt9dumpDmesgEv
0800059c  w    F .boot_text	00000002 spi2_isr
080026b4 g     F .boot_text	00000054 atan2
08008548 g     F .text	0000000c _ZN3pxt6RefMap7destroyEPS0_
0800974c  w    F .text	00000006 _ZN5codal11CodalDevice5panicEi
0800ae2c g     F .text	0000001c _ZN5codal3_cm3Pin14setAnalogValueEi
20002e4c g     O .bss	00000001 _ZN3pxt4inGCE
08002324 g     F .boot_text	00000030 __wrap___aeabi_dadd
080002b0 g     F .boot_text	00000030 target_init
20001f10 g       .boot_bss	00000000 boot_end
08009c5c g     F .text	00000138 _ZN5codal14scheduler_initERNS_10EventModelE
08007cdc g     F .text	0000006a _ZN3pxt16popThreadContextEPNS_13ThreadContextE
0800ae04 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
080094fc  w    F .text	00000002 _ZN3pxt4incrEPNS_12TValueStructE
08000b84 g     F .boot_text	00000008 usbd_ep_stall_get
08002384 g     F .boot_text	00000034 __wrap___aeabi_dcmpeq
08001f70 g     F .boot_text	00000000 qfp_float2int
0800059c  w    F .boot_text	00000002 tim8_up_isr
08008b68 g     F .text	0000002a _ZN6Array_7isArrayEPN3pxt12TValueStructE
0800213c g     F .boot_text	00000000 qfp_fatan2
080025bc g     F .boot_text	0000008c pow
08003128 g     F .boot_text	00000026 strncpy
08002844 g     F .boot_text	000000a8 sinh
08002b94 g     F .boot_text	000000bc atanh
08002594 g     F .boot_text	00000028 log10
08001cd0 g     F .boot_text	0000000c os_sem_init
0800ab98 g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
08009224 g     F .text	0000000c _ZN4pins13pulseDurationEv
0800aba8  w    F .text	00000064 _ZN5codal8ListenerC2INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
0800835c g     F .text	00000074 realloc
08008314 g     F .text	0000001e app_alloc
08009a24 g     F .text	00000034 _ZN5codal13dequeue_fiberEPNS_5FiberE
080072ac g     F .text	0000002e _ZN6numops4lsrsEPN3pxt12TValueStructES2_
0800875c g     F .text	0000001c _ZN3pxt9LLSegment3popEv
08009518  w    F .text	00000002 _ZN3pxt15stopPerfCounterENS_12PerfCountersE
08006f34 g     F .text	0000001e _ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE
0800b814 g     F .text	00000022 .hidden __aeabi_i2d
0800059c  w    F .boot_text	00000002 dma2_channel2_isr
080089f4 g     F .text	00000002 _ZN3pxt13debugMemLeaksEv
08001480 g     F .boot_text	00000014 flash_set_ws
080008cc g     F .boot_text	00000098 rcc_set_rtc_clock_source
080014b0 g     F .boot_text	00000044 st_usbfs_set_ep_rx_bufsize
080038cc g     F .boot_text	00000178 dump_usb_request
08005080 g       .boot_init_array	00000000 _boot_etext
0800c3f0  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08003070 g     F .boot_text	0000001c memcmp
08001fb8 g     F .boot_text	00000000 qfp_fix2float
08000d44 g     F .boot_text	00000064 _usbd_control_setup
08007bc8 g     F .text	00000058 _ZN3pxt10failedCastEPNS_12TValueStructE
0800aea4 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
080005a0  w    F .boot_text	00000002 debug_monitor_handler
0800059c  w    F .boot_text	00000002 exti3_isr
0800059c  w    F .boot_text	00000002 adc3_isr
080030fe g     F .boot_text	0000002a strncat
080077ec g     F .text	00000004 _ZN3pxt9switch_eqEPNS_12TValueStructES1_
0800a788  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
080004fa g       .boot_text	00000000 save_context
0800059c  w    F .boot_text	00000002 tim3_isr
080020a6 g     F .boot_text	00000000 qfp_ftan
0800059c  w    F .boot_text	00000002 usart2_isr
080023e8 g     F .boot_text	00000034 __wrap___aeabi_dcmple
080003b0 g     F .boot_text	00000020 target_panic
08003e4c g     F .boot_text	000000f4 target_flash_program_array
08009250 g     F .text	00000006 _ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb
080032e8 g     F .boot_text	0000000a debug_print
0800059c  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08008874 g     F .text	0000004a _ZN3pxt7Segment6removeEj
08008540 g     F .text	00000008 _ZN3pxt13RefCollection7destroyEPS0_
08000478 g       .boot_text	00000000 swap_context
080079a0 g     F .text	00000022 _ZN6numops2leEPN3pxt12TValueStructES2_
0800c758 g       .fini_array	00000000 __fini_array_start
0800059c  w    F .boot_text	00000002 i2c2_er_isr
080067ec g     F .text	0000001c _ZN3pxt11findBindingEii
08008714 g     F .text	00000018 _ZN3pxt15RefRecord_printEPNS_9RefRecordE
08007dfc g     F .text	00000058 _ZN3pxt9gcProcessEPNS_12TValueStructE
080061c4 g     F .text	00000012 _ZN5Math_4log2EPN3pxt12TValueStructE
08007b48 g     F .text	00000080 _ZN3pxt8anyPrintEPNS_12TValueStructE
08001758 g     F .boot_text	00000050 st_usbfs_ep_nak_set
08007514 g     F .text	00000012 _ZN5Math_3logEPN3pxt12TValueStructE
080081c8 g     F .text	00000130 _ZN3pxt10gcAllocateEi
080030c0 g     F .boot_text	00000010 memset
20002e40 g     O .bss	00000004 _ZN5codal12system_timerE
080094f0 g     F .text	0000000a main
08001494 g     F .boot_text	0000000c flash_wait_for_last_operation
08009e3c g     F .text	0000002c _ZN5codal12create_fiberEPFvPvES0_S2_
0800205a g     F .boot_text	00000000 qfp_fsin
08000ab8 g     F .boot_text	00000054 usbd_init
08007438 g     F .text	00000026 _ZN5Math_5atan2EPN3pxt12TValueStructES2_
20002914 g     O .bss	00000100 _ZN5codal14CodalComponent10componentsE
0800b564 g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
0800059c  w    F .boot_text	00000002 i2c2_ev_isr
08003e48 g     F .boot_text	00000004 target_flash_lock
080092b0 g     F .text	0000008c _ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei
0800059c  w    F .boot_text	00000002 uart5_isr
08006378 g     F .text	00000026 _ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii
08003584 g     F .boot_text	00000004 platform_set_alarm
20002e38 g     O .bss	00000008 heap
2000285c g     O .bss	00000020 _ZN3pxt8devTimerE
0800b0c8 g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
08006eb0 g     F .text	00000012 _ZN5pxtrt8mklocRefEv
080005a0  w    F .boot_text	00000002 sys_tick_handler
0800c40c  w    O .text	00000014 _ZTVN5codal10EventModelE
0800b8e8 g     F .text	0000009e .hidden __truncdfsf2
0800aca0 g     F .text	00000064 _ZN5codal10MessageBusD1Ev
08007050 g     F .text	00000002 _ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE
0800c758 g       .init_array	00000000 __init_array_end
0800059c  w    F .boot_text	00000002 fsmc_isr
0800059c  w    F .boot_text	00000002 dma1_channel1_isr
0800059c  w    F .boot_text	00000002 exti4_isr
08006d94 g     F .text	0000000e _ZN3pxt9fromFloatEf
0800940c g     F .text	00000040 _ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_
0800b2a4 g     F .text	00000028 _ZN5codal3_cm5TimerC2Ev
08007460 g     F .text	000000b2 _ZN5Math_11randomRangeEPN3pxt12TValueStructES2_
0800c4e4 g     O .text	00000054 _ZTVN5codal3_cm3PinE
0800b88c g     F .text	0000005a .hidden __aeabi_l2d
080020de g     F .boot_text	00000000 qfp_fsqrt
20000000 g     O .boot_data	00000004 codal_heap_start
08006ff8 g     F .text	00000038 _ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE
08006df0 g     F .text	00000006 _ZN5Math_4imulEii
0800b0b4 g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
0800a4f0 g     F .text	00000030 _ZN5codal5TimerC2Ev
0800030c g     F .boot_text	00000020 target_wait_for_event
0800a0a0 g     F .text	0000002c _ZN5codal20fiber_wait_for_eventEtt
080044f4 g     F .boot_text	00000038 usb21_setup
0800a428 g     F .text	0000002e _ZN5codal8ListenerC2EttPFvNS_5EventEEt
08008cc0 g     F .text	00000004 _ZN3pxt12releaseFiberEv
0800b098 g     F .text	0000000e _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
0800897c g     F .text	00000014 _ZN3pxt6RefMapC1Ev
0800321c g     F .boot_text	0000009c _Z11debug_printj
08007624 g     F .text	0000007a _ZN3pxt8eqq_boolEPNS_12TValueStructES1_
08002550 g     F .boot_text	0000001c exp
08009760  w    F .text	00000004 _ZN5codal11CodalDevice5resetEv
0800ae00 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08008658 g     F .text	00000002 _ZN3pxt11RefRefLocal7destroyEPS0_
08006c00 g     F .text	0000000e _ZN7String_8includesEPN3pxt11BoxedStringES2_i
0800699c g     F .text	0000006c _ZN7String_6concatEPN3pxt11BoxedStringES2_
08008e6c g     F .text	00000004 _ZN3pxt15current_time_msEv
0800ac0c g     F .text	00000094 _ZN5codal10MessageBusC1Ev
0800304c g     F .boot_text	00000014 strcmp
08001fb6 g     F .boot_text	00000000 qfp_int2float
08008778 g     F .text	0000008c _ZN3pxt7Segment9growByMinEt
0800a7d8 g     F .text	00000088 _ZN5codal10MessageBus6removeEPNS_8ListenerE
08006348 g     F .text	00000004 _ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE
08001a34 g     F .boot_text	0000001c exti_enable_request
08002698 g     F .boot_text	0000001c tan
08007550 g     F .text	00000012 _ZN5Math_3sinEPN3pxt12TValueStructE
080019e4 g     F .boot_text	00000050 exti_set_trigger
080005a4 g     F .boot_text	00000018 flash_unlock
0800059c  w    F .boot_text	00000002 mem_manage_handler
08008530 g     F .text	0000000a _ZN5loops5pauseEi
0800ae78 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800ae98 g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
08006a30 g     F .text	0000016c _ZN7String_8mystrtodEPKcPPc
2000000c g     O .boot_data	00000004 rcc_apb2_frequency
08001a8c g     F .boot_text	00000040 rtc_set_alarm_time
0800ad88 g     F .text	00000012 _ZN5codal5EventC1Ev
080064e8 g     F .text	00000008 _ZN7control12createBufferEi
08000b44 g     F .boot_text	00000008 usbd_poll
0800b380 g     F .text	00000006 _ZN5codal3I2C4stopEv
08000470 g     F .boot_text	00000002 _fini
0800a6fc g     F .text	0000001c _ZN5codal28system_timer_current_time_usEv
0800032c g     F .boot_text	00000028 target_wait
08008a20 g     F .text	0000000c _ZN3pxt11programHashEv
0800059c  w    F .boot_text	00000002 can2_tx_isr
08002708 g     F .boot_text	000000ac atan
0800ae0c g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
08007528 g     F .text	00000012 _ZN5Math_5log10EPN3pxt12TValueStructE
0800a16c g     F .text	000000a0 _ZN5codal6invokeEPFvPvES0_
080072e8 g     F .text	00000022 _ZN6numops4addsEPN3pxt12TValueStructES2_
08003dfc g     F .boot_text	00000040 target_get_force_bootloader
20002a14 g     O .bss	00000404 codalLogStore
080067b0 g     F .text	00000004 _ZN7control10dmesgValueEPN3pxt12TValueStructE
0800059c  w    F .boot_text	00000002 exti9_5_isr
080062c8 g     F .text	00000004 _ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE
08006e6c g     F .text	0000003c _ZN3pxt9getConfigEii
08003448 g     F .boot_text	00000010 led_off
08009124  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
080027b4 g     F .boot_text	00000090 asin
0800059c  w    F .boot_text	00000002 dma2_channel3_isr
08001f72 g     F .boot_text	00000000 qfp_float2fix
080008bc g     F .boot_text	00000010 rcc_enable_rtc_clock
0800a948 g     F .text	0000007c _Z14async_callbackPv
20000420 g     O .boot_data	00000004 _impure_ptr
080013dc g     F .boot_text	00000040 _usbd_standard_request_endpoint
080095b4  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
080084a4 g     F .text	00000012 _ZN3pxt15unregisterGCPtrEPNS_12TValueStructE
080002f4 g     F .boot_text	00000010 target_in_isr
0800c750 g       .preinit_array	00000000 __preinit_array_end
080019c8 g     F .boot_text	0000001a nvic_enable_irq
08003458 g     F .boot_text	00000010 led_wait
080002ac g     F .boot_text	00000004 target_enable_debug
08007388 g     F .text	00000026 _ZN6numops3divEPN3pxt12TValueStructES2_
0800059c  w    F .boot_text	00000002 dma1_channel7_isr
08003468 g     F .boot_text	0000011c platform_start_timer
08008d1c g     F .text	0000012c _ZN3pxt11initRuntimeEv
0800a428 g     F .text	0000002e _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08004074 g     F .boot_text	00000024 cdc_setup
0800059c  w    F .boot_text	00000002 tim1_up_isr
08007284 g     F .text	00000028 _ZN6numops4andsEPN3pxt12TValueStructES2_
20002800 g       .data	00000000 _data
08006df8 g     F .text	00000006 _ZN5Math_4idivEii
08001acc g     F .boot_text	00000040 rtc_set_prescale_val
080006a8 g     F .boot_text	00000028 flash_get_status_flags
08009474 g     F .text	0000002c _ZN4pins7spiModeEi
08006644 g     F .text	00000120 _ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE
0800b24c g     F .text	0000002a _ZN5codal3_cm5Timer11syncRequestEv
08006d78 g     F .text	0000001c _ZN7String_10charCodeAtEPN3pxt11BoxedStringEi
0800af74 g     F .text	00000038 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
08002ae4 g     F .boot_text	000000b0 acosh
080062e4 g     F .text	00000012 _ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii
20002e48 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
0800ae0c g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000964 g     F .boot_text	000000cc rcc_clock_setup_in_hse_8mhz_out_72mhz
0800b224 g     F .text	00000010 _ZN5codal3_cm13tick_callbackEv
080024e0 g     F .boot_text	00000038 __wrap___aeabi_d2uiz
0800ba00 g     O .text	00000324 _ZN3pxt20functionsAndBytecodeE
08001fc2 g     F .boot_text	00000000 qfp_uint2float
08006e20 g     F .text	0000000c _ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE
08006e54 g     F .text	00000006 _ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE
08007d80 g     F .text	00000048 _ZN3pxt10gcScanManyEPPNS_12TValueStructEj
0800ade0 g     F .text	00000020 _ZN5codal22MemberFunctionCallbackeqERKS0_
08009018 g     F .text	00000016 _ZN7control10raiseEventEii
08001b0c g     F .boot_text	00000018 rtc_get_counter_val
0800912c  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800b010 g     F .text	0000000e _ZN5codal3_cm3Pin15setAnalogPeriodEi
08008e70 g     F .text	0000000c _ZN3pxt16getThreadContextEv
080005e8 g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
0800059c  w    F .boot_text	00000002 can2_sce_isr
080079e8 g     F .text	0000001e _ZN6numops2geEPN3pxt12TValueStructES2_
0800059c  w    F .boot_text	00000002 tim4_isr
080086fc g     F .text	0000000a _ZN3pxt9RefObject9destroyVTEv
0800c724 g     O .text	0000002c _ZTVN5codal3I2CE
0800a9c4 g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
08007a08 g     F .text	0000001e _ZN6numops2gtEPN3pxt12TValueStructES2_
08001654 g     F .boot_text	000000c4 st_usbfs_ep_stall_set
0800a9e8 g     F .text	00000052 _ZN5codal10MessageBus21deleteMarkedListenersEv
08006934 g     F .text	0000000c _ZN7String_7mkEmptyEv
080090a4 g     F .text	0000004c _ZN4pins13i2cReadBufferEiib
08003740 g     F .boot_text	00000094 usb_setup
20001f10 g       .boot_bss	00000000 _boot_ebss
20002808 g       .data	00000000 _edata
0800a20c g     F .text	00000028 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
0800a860 g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
0800059c  w    F .boot_text	00000002 dma1_channel2_isr
0800c310  w    O .text	00000054 _ZTVN5codal16STM32BluePillPinE
0800059c  w    F .boot_text	00000002 i2c1_er_isr
0800ad70 g     F .text	00000018 _ZN5codal5EventC2EttmNS_15EventLaunchModeE
08009754  w    F .text	00000004 _ZN5codal11CodalDevice15getSerialNumberEv
08001384 g     F .boot_text	00000058 _usbd_standard_request_device
08009b80 g     F .text	00000050 _Z15getFiberContextv
08000304 g     F .boot_text	00000004 target_enable_irq
08008454 g     F .text	00000034 _ZN3pxt10registerGCEPPNS_12TValueStructEi
0800a4d8 g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
0800059c  w    F .boot_text	00000002 can_sce_isr
0800b0c4 g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
0800921c g     F .text	00000008 _ZN4pins12createBufferEi
08001e68 g     F .boot_text	00000000 qfp_fdiv
080005a0  w    F .boot_text	00000002 nmi_handler
0800aba8  w    F .text	00000064 _ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
08001bbc g     F .boot_text	00000058 rtc_interrupt_disable
08005080 g       .boot_preinit_array	00000000 __boot_preinit_array_end
08001e3c g     F .boot_text	00000000 qfp_fcmp
08003410 g     F .boot_text	00000004 _Znwj
20000db4 g     O .boot_bss	00000008 st_usbfs_force_nak
08007564 g     F .text	00000012 _ZN5Math_3cosEPN3pxt12TValueStructE
0800c420 g     O .text	0000003c _ZTVN5codal10MessageBusE
080068f4 g     F .text	00000040 _ZN3pxt9getRandomEj
20000000 g       .boot_data	00000000 _boot_data
0800a234 g     F .text	00000018 _ZN5codal9idle_taskEv
08009258 g     F .text	00000020 _ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE
0800256c g     F .boot_text	00000028 log2
080067a0 g     F .text	0000000e _ZN7control5__logEiPN3pxt11BoxedStringE
0800ad20 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
0800723c g     F .text	00000028 _ZN6numops4orrsEPN3pxt12TValueStructES2_
0800059c  w    F .boot_text	00000002 tim8_cc_isr
08008654 g     F .text	00000002 _ZN3pxt9RefAction7destroyEPS0_
08006858 g     F .text	0000005c _ZN3pxt8mkStringEPKci
080078c0 g     F .text	00000014 _ZN6numops10toBoolDecrEPN3pxt12TValueStructE
080094a4 g     F .text	00000010 _ZN3pxt10sendSerialEPKci
08006cc4 g     F .text	000000a4 _ZN7String_8toNumberEPN3pxt11BoxedStringE
0800a758 g     F .text	00000016 _ZN5codal10MessageBus9elementAtEi
08009238  w    F .text	00000006 _ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi
08009734  w    F .text	00000008 _ZN5codal11CodalDevice10getVersionEv
080018e4 g     F .boot_text	000000e4 st_usbfs_poll
08004c7c g     O .boot_text	00000018 webusb_platform_capability_descriptor
0800ad04 g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
08006f08 g     F .text	00000004 _ZN5pxtrt5panicEi
08008500 g     F .text	0000000a _ZN3pxt9RefAction6gcsizeEPS0_
0800a044 g     F .text	00000014 _ZN5codal8scheduleEv
08005080 g       .boot_init_array	00000000 __boot_init_array_start
08008858 g     F .text	0000001c _ZN3pxt7Segment3popEv
0800ae48 g     F .text	0000002c _ZN5codal3_cm3Pin13setServoValueEiii
0800059c  w    F .boot_text	00000002 tamper_isr
08007a28 g     F .text	000000fc _ZN6numops8toStringEPN3pxt12TValueStructE
08003dd0 g     F .boot_text	0000002c target_usb_init
0800475c g     O .boot_text	00000101 _ctype_
08009744  w    F .text	00000006 _ZN5codal11CodalDevice10seedRandomEm
0800c750 g       .init_array	00000000 __init_array_start
080005d0 g     F .boot_text	00000006 gpio_clear
080037d4 g     F .boot_text	0000003c aggregate_register_config_callback
08009634 g     F .text	000000d8 _ZN5codal14CodalComponent12addComponentEv
080061ec g     F .text	00000012 _ZN5Math_4tanhEPN3pxt12TValueStructE
0800865c g     F .text	0000005c _ZN3pxt8mkActionEiPNS_9RefActionE
08009354 g     F .text	00000004 _ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi
0800059c  w    F .boot_text	00000002 eth_wkup_isr
08006c18 g     F .text	000000ac _ZN3pxt10fromDoubleEd
080033f8 g     F .boot_text	00000010 enable_debug
08000a64 g     F .boot_text	00000020 st_usbfs_copy_to_pm
08006f54 g     F .text	00000090 _ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE
080083d0 g     F .text	00000084 _ZN3pxt17pushThreadContextEPvS0_
0800ab54 g     F .text	00000042 _ZN5codal10MessageBus4idleENS_5EventE
0800ad54 g     F .text	0000001c _ZN5codal5EventC2EttNS_15EventLaunchModeE
0800634c g     F .text	0000002a _ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii
0800a744  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
0800853c g     F .text	00000002 _ZN3pxt17RefRecord_destroyEPNS_9RefRecordE
08001cdc g     F .boot_text	00000044 os_task_init
08006f20 g     F .text	00000012 _ZN5pxtrt5mkMapEv
08006780 g     F .text	00000004 _ZN7control6millisEv
0800aad8 g     F .text	00000062 _ZN5codal10MessageBus10queueEventERNS_5EventE
0800797c g     F .text	00000024 _ZN6numops7lt_boolEPN3pxt12TValueStructES2_
08000a84 g     F .boot_text	00000034 st_usbfs_copy_from_pm
08003e3c g     F .boot_text	00000006 target_get_serial_number
08003060 g     F .boot_text	00000010 strlen
080003e0 g     F .boot_text	00000004 tcb_configure_lr
08003380 g     F .boot_text	00000024 debug_printhex_unsigned
20000534 g       .boot_data	00000000 _boot_edata
20005000 g       .bss	00000000 _stack
080076b0 g     F .text	00000010 _ZN6numops4neqqEPN3pxt12TValueStructES2_
080005cc g     F .boot_text	00000004 gpio_set
0800b074 g     F .text	0000001e _ZN5codal3_cm3Pin5setupEhh
08006de0 g     F .text	0000000e _ZN5Math_6randomEv
08008c8c g     F .text	00000020 _ZN3pxt12forever_stubEPv
08006228 g     F .text	00000012 _ZN5Math_5atanhEPN3pxt12TValueStructE
0800623c g     F .text	00000012 _ZN5Math_5asinhEPN3pxt12TValueStructE
0800a470 g     F .text	00000068 _ZN5codal8Listener5queueENS_5EventE
08008b94 g     F .text	00000058 _ZN5pxtrt6keysOfEPN3pxt12TValueStructE
0800b838 g     F .text	00000042 .hidden __aeabi_f2d
0800059c  w    F .boot_text	00000002 bus_fault_handler
0800059c  w    F .boot_text	00000002 wwdg_isr
2000282c g     O .bss	00000004 _ZN3pxt7globalsE
08006e00 g     F .text	00000012 _ZN6Array_2mkEv
08007b24 g     F .text	00000024 _ZN3pxt6typeOfEPNS_12TValueStructE
0800059c  w    F .boot_text	00000002 dma1_channel3_isr
0800a4e4 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
08006170 g     F .text	00000054 _ZN5Math_12randomDoubleEv
08008cac  w    F .text	00000014 _ZN5codal3_cm5TimerD1Ev
0800954c g     F .text	00000064 _ZN5codal4itoaEiPc
20002834 g     O .bss	00000024 _ZN3pxt13devMessageBusE
08008838 g     F .text	0000001e _ZN3pxt7Segment9setLengthEj
08008e88 g     F .text	000000d4 _ZN3pxt15gcProcessStacksEi
080021f8 g     F .boot_text	000000cc acos
08001b24 g     F .boot_text	00000040 rtc_set_counter_val
20000dbc g     O .boot_bss	000000fc st_usbfs_dev
0800a6dc g     F .text	00000002 _ZN5codal5TimerD1Ev
08006e4c g     F .text	00000006 _ZN6Array_8removeAtEPN3pxt13RefCollectionEi
080061d8 g     F .text	00000012 _ZN5Math_3expEPN3pxt12TValueStructE
08007c20 g     F .text	0000001c _ZN3pxt15missingPropertyEPNS_12TValueStructE
08008c0c g     F .text	00000070 _ZN3pxt13dispatchEventEN5codal5EventE
08003d60 g     F .boot_text	00000070 target_gpio_setup
0800b578 g     F .text	0000027a .hidden __subdf3
08001cac g     F .boot_text	00000024 os_msgQ_init
0800c750 g       .preinit_array	00000000 __preinit_array_start
08002c50 g     F .boot_text	0000008c trunc
08006788 g     F .text	00000004 _ZN7control5resetEv
08001830 g     F .boot_text	000000b4 st_usbfs_ep_read_packet
0800897c g     F .text	00000014 _ZN3pxt6RefMapC2Ev
0800059c  w    F .boot_text	00000002 spi3_isr
08009048 g     F .text	0000000c _ZN7control5dmesgEPN3pxt11BoxedStringE
08007840 g     F .text	0000001c _ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE
0800896c g     F .text	00000010 _ZN3pxt11RefRefLocalC2Ev
080091f8 g     F .text	00000012 _ZN3pxt9getPinCfgEi
080071b8 g     F .text	00000004 _ZN3pxt5toIntEPNS_12TValueStructE
08000474 g     F .boot_text	00000004 __aeabi_atexit
08005028 g     O .boot_text	00000055 infoUf2File
080073b0 g     F .text	00000060 _ZN6numops3modEPN3pxt12TValueStructES2_
080035e8 g     F .boot_text	00000004 millis
0800aeb4 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000294 g     F .boot_text	0000000c target_set_tick_callback
0800059c  w    F .boot_text	00000002 tim2_isr
080075a0 g     F .text	00000012 _ZN5Math_4acosEPN3pxt12TValueStructE
08003334 g     F .boot_text	00000004 debug_print_unsigned
08004d60 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08008178 g     F .text	00000050 free
08008cf0 g     F .text	00000024 _ZN3pxt13runInParallelEPNS_12TValueStructE
08001a5c g     F .boot_text	00000018 rtc_enter_config_mode
080014a0 g     F .boot_text	00000010 st_usbfs_set_address
0800059c  w    F .boot_text	00000002 exti0_isr
080084d0 g     F .text	00000016 _ZN3pxt6RefMap4scanEPS0_
0800b380 g     F .text	00000006 _ZN5codal3I2C5startEv



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 51 01 00 08 a1 05 00 08 9d 05 00 08     .P. Q...........
 8000010:	9d 05 00 08 9d 05 00 08 9d 05 00 08 00 00 00 00     ................
	...
 800002c:	a1 05 00 08 a1 05 00 08 00 00 00 00 a1 05 00 08     ................
 800003c:	a1 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800004c:	89 35 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     .5..............
 800005c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800006c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800007c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800008c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800009c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 80000ac:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 80000bc:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 80000cc:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 80000dc:	9d 05 00 08 9d 05 00 08 b9 35 00 08 9d 05 00 08     .........5......
 80000ec:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 80000fc:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800010c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800011c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800012c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800013c:	9d 05 00 08 9d 05 00 08 9d 05 00 08 9d 05 00 08     ................
 800014c:	9d 05 00 08                                         ....

08000150 <reset_handler>:
    //  Start the bootloader.  This function will not return if the bootloader decides to jump to the application.
    /* int status = */
    bootloader_start();
}

void reset_handler(void) {
 8000150:	b570      	push	{r4, r5, r6, lr}
	//  The wrapping is done by the linker option "-Wl,-wrap,reset_handler".  The vector table points to the wrapped function.
	volatile unsigned *src, *dest, *boot_dest;
	funcp_t *fp;

	//  Copy data section from ROM to RAM.  Handle bootloader and firmware.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000152:	4a31      	ldr	r2, [pc, #196]	; (8000218 <reset_handler+0xc8>)
 8000154:	4d31      	ldr	r5, [pc, #196]	; (800021c <reset_handler+0xcc>)
 8000156:	42aa      	cmp	r2, r5
 8000158:	d20f      	bcs.n	800017a <reset_handler+0x2a>
 800015a:	4611      	mov	r1, r2
 800015c:	3d01      	subs	r5, #1
 800015e:	1aad      	subs	r5, r5, r2
 8000160:	4c2f      	ldr	r4, [pc, #188]	; (8000220 <reset_handler+0xd0>)
 8000162:	f025 0503 	bic.w	r5, r5, #3
 8000166:	3504      	adds	r5, #4
 8000168:	4623      	mov	r3, r4
 800016a:	442c      	add	r4, r5
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 800016c:	f853 0b04 	ldr.w	r0, [r3], #4
	//  The wrapping is done by the linker option "-Wl,-wrap,reset_handler".  The vector table points to the wrapped function.
	volatile unsigned *src, *dest, *boot_dest;
	funcp_t *fp;

	//  Copy data section from ROM to RAM.  Handle bootloader and firmware.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000170:	42a3      	cmp	r3, r4
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 8000172:	f841 0b04 	str.w	r0, [r1], #4
	//  The wrapping is done by the linker option "-Wl,-wrap,reset_handler".  The vector table points to the wrapped function.
	volatile unsigned *src, *dest, *boot_dest;
	funcp_t *fp;

	//  Copy data section from ROM to RAM.  Handle bootloader and firmware.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000176:	d1f9      	bne.n	800016c <reset_handler+0x1c>
 8000178:	442a      	add	r2, r5
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
	}
	for (src = &_data_loadaddr, dest = &_data;
 800017a:	4b2a      	ldr	r3, [pc, #168]	; (8000224 <reset_handler+0xd4>)
 800017c:	4e2a      	ldr	r6, [pc, #168]	; (8000228 <reset_handler+0xd8>)
 800017e:	42b3      	cmp	r3, r6
 8000180:	d20f      	bcs.n	80001a2 <reset_handler+0x52>
 8000182:	4618      	mov	r0, r3
 8000184:	3e01      	subs	r6, #1
 8000186:	1af6      	subs	r6, r6, r3
 8000188:	4d28      	ldr	r5, [pc, #160]	; (800022c <reset_handler+0xdc>)
 800018a:	f026 0603 	bic.w	r6, r6, #3
 800018e:	3604      	adds	r6, #4
 8000190:	4629      	mov	r1, r5
 8000192:	4435      	add	r5, r6
		dest < &_edata;  //  Firmware
		src++, dest++) {
		*dest = *src;
 8000194:	f851 4b04 	ldr.w	r4, [r1], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
	}
	for (src = &_data_loadaddr, dest = &_data;
 8000198:	42a9      	cmp	r1, r5
		dest < &_edata;  //  Firmware
		src++, dest++) {
		*dest = *src;
 800019a:	f840 4b04 	str.w	r4, [r0], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
	}
	for (src = &_data_loadaddr, dest = &_data;
 800019e:	d1f9      	bne.n	8000194 <reset_handler+0x44>
 80001a0:	4433      	add	r3, r6
		src++, dest++) {
		*dest = *src;
	}

	//  Init variables in BSS section to null.  Handle bootloader and firmware.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 80001a2:	4923      	ldr	r1, [pc, #140]	; (8000230 <reset_handler+0xe0>)
 80001a4:	428a      	cmp	r2, r1
 80001a6:	d20a      	bcs.n	80001be <reset_handler+0x6e>
 80001a8:	2000      	movs	r0, #0
 80001aa:	3901      	subs	r1, #1
 80001ac:	1a89      	subs	r1, r1, r2
 80001ae:	f021 0103 	bic.w	r1, r1, #3
 80001b2:	3104      	adds	r1, #4
 80001b4:	4411      	add	r1, r2
 80001b6:	f842 0b04 	str.w	r0, [r2], #4
 80001ba:	428a      	cmp	r2, r1
 80001bc:	d1fb      	bne.n	80001b6 <reset_handler+0x66>
	while (dest < &_ebss) { *dest++ = 0; }
 80001be:	4a1d      	ldr	r2, [pc, #116]	; (8000234 <reset_handler+0xe4>)
 80001c0:	4293      	cmp	r3, r2
 80001c2:	d20a      	bcs.n	80001da <reset_handler+0x8a>
 80001c4:	2100      	movs	r1, #0
 80001c6:	3a01      	subs	r2, #1
 80001c8:	1ad2      	subs	r2, r2, r3
 80001ca:	f022 0203 	bic.w	r2, r2, #3
 80001ce:	3204      	adds	r2, #4
 80001d0:	441a      	add	r2, r3
 80001d2:	f843 1b04 	str.w	r1, [r3], #4
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d1fb      	bne.n	80001d2 <reset_handler+0x82>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 80001da:	4a17      	ldr	r2, [pc, #92]	; (8000238 <reset_handler+0xe8>)

	/* Call the application's entry point. */
	main();

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80001dc:	4d17      	ldr	r5, [pc, #92]	; (800023c <reset_handler+0xec>)
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
	while (dest < &_ebss) { *dest++ = 0; }

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 80001de:	6813      	ldr	r3, [r2, #0]
 80001e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e4:	6013      	str	r3, [r2, #0]
void null_handler(void);

void pre_main() {
	//  Init the STM32 platform and start the timer.  Note: Constructors are not called yet.
    //  Note: Must disable debug when testing Deep Sleep.  Else device will not run without ST Link.
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 80001e6:	f000 f861 	bl	80002ac <target_enable_debug>
    //  target_disable_debug();  //  Uncomment to disable display of debug messages.  For use in production devices.
    target_init();               //  Init the STM32 platform, which calls the bootloader.  If the bootloader decides to launch the firmware, this function will not return.
 80001ea:	f000 f861 	bl	80002b0 <target_init>
    run_unit_test();	
#endif  //  UNIT_TEST

    //  Start the bootloader.  This function will not return if the bootloader decides to jump to the application.
    /* int status = */
    bootloader_start();
 80001ee:	f003 f9fd 	bl	80035ec <bootloader_start>
		(*fp)();
	}
	*/

	/* Call the application's entry point. */
	main();
 80001f2:	f009 f97d 	bl	80094f0 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80001f6:	4b12      	ldr	r3, [pc, #72]	; (8000240 <reset_handler+0xf0>)
 80001f8:	429d      	cmp	r5, r3
 80001fa:	d20b      	bcs.n	8000214 <reset_handler+0xc4>
 80001fc:	3b01      	subs	r3, #1
 80001fe:	1b5b      	subs	r3, r3, r5
 8000200:	f023 0303 	bic.w	r3, r3, #3
 8000204:	3304      	adds	r3, #4
 8000206:	462c      	mov	r4, r5
 8000208:	441d      	add	r5, r3
		(*fp)();
 800020a:	f854 3b04 	ldr.w	r3, [r4], #4
 800020e:	4798      	blx	r3

	/* Call the application's entry point. */
	main();

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000210:	42ac      	cmp	r4, r5
 8000212:	d1fa      	bne.n	800020a <reset_handler+0xba>
		(*fp)();
	}

}
 8000214:	bd70      	pop	{r4, r5, r6, pc}
 8000216:	bf00      	nop
 8000218:	20000000 	.word	0x20000000
 800021c:	20000534 	.word	0x20000534
 8000220:	08005080 	.word	0x08005080
 8000224:	20002800 	.word	0x20002800
 8000228:	20002808 	.word	0x20002808
 800022c:	0800c758 	.word	0x0800c758
 8000230:	20001f10 	.word	0x20001f10
 8000234:	20002e54 	.word	0x20002e54
 8000238:	e000ed14 	.word	0xe000ed14
 800023c:	0800c758 	.word	0x0800c758
 8000240:	0800c758 	.word	0x0800c758

08000244 <_ZL10timer_tickv>:
    alarm_callback = alarm_callback0;
}

static void timer_tick() {
    //  If Codal Timer exists, update the timer.
    if (tick_callback) { tick_callback(); }
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <_ZL10timer_tickv+0xc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	b103      	cbz	r3, 800024c <_ZL10timer_tickv+0x8>
 800024a:	4718      	bx	r3
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000534 	.word	0x20000534

08000254 <_ZL11timer_alarmv>:

static void timer_alarm() {
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 8000254:	4b02      	ldr	r3, [pc, #8]	; (8000260 <_ZL11timer_alarmv+0xc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	b103      	cbz	r3, 800025c <_ZL11timer_alarmv+0x8>
 800025a:	4718      	bx	r3
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000538 	.word	0x20000538

08000264 <target_dmesg_flush.part.0>:
    char buffer[DEVICE_DMESG_BUFFER_SIZE];
};
extern struct CodalLogStore codalLogStore;
#endif  //  DEVICE_DMESG_BUFFER_SIZE

void target_dmesg_flush() {
 8000264:	b538      	push	{r3, r4, r5, lr}
#if DEVICE_DMESG_BUFFER_SIZE > 0
    //  Flush the dmesg log to the debug console.
    if (codalLogStore.ptr > 0 && initialised) {
        for (uint32_t i = 0; i < codalLogStore.ptr; i++) {
 8000266:	4d0a      	ldr	r5, [pc, #40]	; (8000290 <target_dmesg_flush.part.0+0x2c>)
 8000268:	682b      	ldr	r3, [r5, #0]
 800026a:	b153      	cbz	r3, 8000282 <target_dmesg_flush.part.0+0x1e>
 800026c:	1cec      	adds	r4, r5, #3
            debug_print((uint8_t) codalLogStore.buffer[i]);
 800026e:	7860      	ldrb	r0, [r4, #1]
 8000270:	f003 f822 	bl	80032b8 <_Z11debug_printi>
 8000274:	1ea3      	subs	r3, r4, #2

void target_dmesg_flush() {
#if DEVICE_DMESG_BUFFER_SIZE > 0
    //  Flush the dmesg log to the debug console.
    if (codalLogStore.ptr > 0 && initialised) {
        for (uint32_t i = 0; i < codalLogStore.ptr; i++) {
 8000276:	682a      	ldr	r2, [r5, #0]
 8000278:	1b5b      	subs	r3, r3, r5
 800027a:	429a      	cmp	r2, r3
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	d8f5      	bhi.n	800026e <target_dmesg_flush.part.0+0xa>
            debug_print((uint8_t) codalLogStore.buffer[i]);
        }
        codalLogStore.ptr = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	602b      	str	r3, [r5, #0]
        debug_flush();
    }
#endif  //  DEVICE_DMESG_BUFFER_SIZE
}
 8000286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (codalLogStore.ptr > 0 && initialised) {
        for (uint32_t i = 0; i < codalLogStore.ptr; i++) {
            debug_print((uint8_t) codalLogStore.buffer[i]);
        }
        codalLogStore.ptr = 0;
        debug_flush();
 800028a:	f002 bfbf 	b.w	800320c <debug_flush>
 800028e:	bf00      	nop
 8000290:	20002a14 	.word	0x20002a14

08000294 <target_set_tick_callback>:
static void (*tick_callback)() = NULL;
static void (*alarm_callback)() = NULL;

void target_set_tick_callback(void (*tick_callback0)()) {
    //  The callback is normally set to CMTimer::tick_callback(), which calls Timer::trigger() to resume suspended tasks.
    tick_callback = tick_callback0;
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <target_set_tick_callback+0x8>)
 8000296:	6018      	str	r0, [r3, #0]
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000534 	.word	0x20000534

080002a0 <target_set_alarm_callback>:

void target_set_alarm_callback(void (*alarm_callback0)()) {
    //  The callback is normally set to CMTimer::alarm_callback(), which calls Timer::trigger() to resume suspended tasks.
    alarm_callback = alarm_callback0;
 80002a0:	4b01      	ldr	r3, [pc, #4]	; (80002a8 <target_set_alarm_callback+0x8>)
 80002a2:	6018      	str	r0, [r3, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000538 	.word	0x20000538

080002ac <target_enable_debug>:
    if (alarm_callback) { alarm_callback(); }
}

void target_enable_debug(void) {
    //  Allow display of debug messages in development devices. NOTE: This will hang if no debugger is attached.
    enable_debug();   
 80002ac:	f003 b8a4 	b.w	80033f8 <enable_debug>

080002b0 <target_init>:
void target_disable_debug(void) {
    //  Disable display of debug messages.  For use in production devices.
    disable_debug();  
}

void target_init(void) {
 80002b0:	b508      	push	{r3, lr}
    //  Blue Pill specific initialisation...
    if (initialised) { return; }  //  Already initialised, skip.
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <target_init+0x24>)
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	b102      	cbz	r2, 80002ba <target_init+0xa>
    //  Display the dmesg log when idle.
    //  TODO: codal_dmesg_set_flush_fn(target_dmesg_flush);

    //  TODO: Seed our random number generator
    //  seedRandom();
}
 80002b8:	bd08      	pop	{r3, pc}
}

void target_init(void) {
    //  Blue Pill specific initialisation...
    if (initialised) { return; }  //  Already initialised, skip.
    initialised = true;
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]

    //  Init the platform, cocoOS and create any system objects.
    platform_setup();  //  STM32 platform setup.
 80002be:	f003 f871 	bl	80033a4 <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 80002c2:	f001 fcd9 	bl	8001c78 <os_init>
    // TODO: init_irqs();  //  Init the interrupt routines.

    //  Start the STM32 timer to generate millisecond-ticks for measuring elapsed time.
    platform_start_timer(timer_tick, timer_alarm);
 80002c6:	4904      	ldr	r1, [pc, #16]	; (80002d8 <target_init+0x28>)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <target_init+0x2c>)
    //  Display the dmesg log when idle.
    //  TODO: codal_dmesg_set_flush_fn(target_dmesg_flush);

    //  TODO: Seed our random number generator
    //  seedRandom();
}
 80002ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    platform_setup();  //  STM32 platform setup.
    os_init();         //  Init cocoOS before creating any multitasking objects.
    // TODO: init_irqs();  //  Init the interrupt routines.

    //  Start the STM32 timer to generate millisecond-ticks for measuring elapsed time.
    platform_start_timer(timer_tick, timer_alarm);
 80002ce:	f003 b8cb 	b.w	8003468 <platform_start_timer>
 80002d2:	bf00      	nop
 80002d4:	20000540 	.word	0x20000540
 80002d8:	08000255 	.word	0x08000255
 80002dc:	08000245 	.word	0x08000245

080002e0 <target_reset>:

    //  TODO: Seed our random number generator
    //  seedRandom();
}

void target_reset() {
 80002e0:	b508      	push	{r3, lr}
	//  TODO
  	debug_println("----target_reset"); debug_flush();
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <target_reset+0x10>)
 80002e4:	f003 f806 	bl	80032f4 <debug_println>
    PWR->CR |= PWR_CR_DBP;
    RCC->BDCR |= RCC_BDCR_RTCEN;
    RTC->BKP0R = 0x24a22d12; // skip bootloader
    NVIC_SystemReset();
#endif  //  TODO
}
 80002e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    //  seedRandom();
}

void target_reset() {
	//  TODO
  	debug_println("----target_reset"); debug_flush();
 80002ec:	f002 bf8e 	b.w	800320c <debug_flush>
 80002f0:	08004688 	.word	0x08004688

080002f4 <target_in_isr>:
// From pxt-common-packages/libs/base/pxtbase.h:
// #define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)

uint32_t target_in_isr(void) {
    //  Return true if CPU is in ISR now.
    return SCB_ICSR & SCB_ICSR_VECTACTIVE;
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <target_in_isr+0xc>)
 80002f6:	6818      	ldr	r0, [r3, #0]
}
 80002f8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed04 	.word	0xe000ed04

08000304 <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 8000304:	b662      	cpsie	i
}

void target_enable_irq() {
  	//  debug_println("----target_enable_irq"); debug_flush();
	cm_enable_interrupts();
}
 8000306:	4770      	bx	lr

08000308 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__ volatile ("CPSID I\n");
 8000308:	b672      	cpsid	i

void target_disable_irq() {
  	//  debug_println("----target_disable_irq"); debug_flush();
	cm_disable_interrupts();
}
 800030a:	4770      	bx	lr

0800030c <target_wait_for_event>:

void target_wait_for_event() {
 800030c:	b508      	push	{r3, lr}
#endif  //  DEVICE_DMESG_BUFFER_SIZE

void target_dmesg_flush() {
#if DEVICE_DMESG_BUFFER_SIZE > 0
    //  Flush the dmesg log to the debug console.
    if (codalLogStore.ptr > 0 && initialised) {
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <target_wait_for_event+0x18>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	b123      	cbz	r3, 800031e <target_wait_for_event+0x12>
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <target_wait_for_event+0x1c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b10b      	cbz	r3, 800031e <target_wait_for_event+0x12>
 800031a:	f7ff ffa3 	bl	8000264 <target_dmesg_flush.part.0>
}

void target_wait_for_event() {
  	//  debug_println("----target_wait_for_event"); // debug_print(".");
    target_dmesg_flush();
    __asm("wfe");  //  Allow CPU to go to sleep.
 800031e:	bf20      	wfe
}
 8000320:	bd08      	pop	{r3, pc}
 8000322:	bf00      	nop
 8000324:	20002a14 	.word	0x20002a14
 8000328:	20000540 	.word	0x20000540

0800032c <target_wait>:

void target_wait(uint32_t milliseconds) {
 800032c:	b510      	push	{r4, lr}
 800032e:	4604      	mov	r4, r0
    debug_println("----target_wait");
 8000330:	4807      	ldr	r0, [pc, #28]	; (8000350 <target_wait+0x24>)
 8000332:	f002 ffdf 	bl	80032f4 <debug_println>
    if (milliseconds <= 0) { return; }
 8000336:	b904      	cbnz	r4, 800033a <target_wait+0xe>
    uint32_t end = millis() + milliseconds;
    for (;;) {
        if (millis() >= end) { break; }
        __asm("wfe");  //  Allow CPU to go to sleep.
    }
}
 8000338:	bd10      	pop	{r4, pc}
}

void target_wait(uint32_t milliseconds) {
    debug_println("----target_wait");
    if (milliseconds <= 0) { return; }
    uint32_t end = millis() + milliseconds;
 800033a:	f003 f955 	bl	80035e8 <millis>
 800033e:	4404      	add	r4, r0
 8000340:	e000      	b.n	8000344 <target_wait+0x18>
    for (;;) {
        if (millis() >= end) { break; }
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000342:	bf20      	wfe
void target_wait(uint32_t milliseconds) {
    debug_println("----target_wait");
    if (milliseconds <= 0) { return; }
    uint32_t end = millis() + milliseconds;
    for (;;) {
        if (millis() >= end) { break; }
 8000344:	f003 f950 	bl	80035e8 <millis>
 8000348:	42a0      	cmp	r0, r4
 800034a:	d3fa      	bcc.n	8000342 <target_wait+0x16>
        __asm("wfe");  //  Allow CPU to go to sleep.
    }
}
 800034c:	bd10      	pop	{r4, pc}
 800034e:	bf00      	nop
 8000350:	080046b4 	.word	0x080046b4

08000354 <target_wait_us>:

void target_wait_us(unsigned long us) {
 8000354:	b510      	push	{r4, lr}
 8000356:	4604      	mov	r4, r0
    debug_println("----target_wait_us");
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <target_wait_us+0x2c>)
 800035a:	f002 ffcb 	bl	80032f4 <debug_println>
    if (us <= 0) { return; }
 800035e:	b904      	cbnz	r4, 8000362 <target_wait_us+0xe>
    uint32_t end = millis() + (us / 1000);
    for (;;) {
        if (millis() >= end) { break; }
        __asm("wfe");  //  Allow CPU to go to sleep.
    }
}
 8000360:	bd10      	pop	{r4, pc}
}

void target_wait_us(unsigned long us) {
    debug_println("----target_wait_us");
    if (us <= 0) { return; }
    uint32_t end = millis() + (us / 1000);
 8000362:	f003 f941 	bl	80035e8 <millis>
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <target_wait_us+0x30>)
 8000368:	fba3 3404 	umull	r3, r4, r3, r4
 800036c:	eb00 1494 	add.w	r4, r0, r4, lsr #6
 8000370:	e000      	b.n	8000374 <target_wait_us+0x20>
    for (;;) {
        if (millis() >= end) { break; }
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000372:	bf20      	wfe
void target_wait_us(unsigned long us) {
    debug_println("----target_wait_us");
    if (us <= 0) { return; }
    uint32_t end = millis() + (us / 1000);
    for (;;) {
        if (millis() >= end) { break; }
 8000374:	f003 f938 	bl	80035e8 <millis>
 8000378:	42a0      	cmp	r0, r4
 800037a:	d3fa      	bcc.n	8000372 <target_wait_us+0x1e>
        __asm("wfe");  //  Allow CPU to go to sleep.
    }
}
 800037c:	bd10      	pop	{r4, pc}
 800037e:	bf00      	nop
 8000380:	080046c4 	.word	0x080046c4
 8000384:	10624dd3 	.word	0x10624dd3

08000388 <target_seed_random>:

int target_seed_random(uint32_t rand) {
 8000388:	b508      	push	{r3, lr}
    //  TODO: return codal::seed_random(rand);
    debug_println("----target_seed_random");
 800038a:	4802      	ldr	r0, [pc, #8]	; (8000394 <target_seed_random+0xc>)
 800038c:	f002 ffb2 	bl	80032f4 <debug_println>
    return 0;
}
 8000390:	2000      	movs	r0, #0
 8000392:	bd08      	pop	{r3, pc}
 8000394:	0800469c 	.word	0x0800469c

08000398 <target_get_serial>:
    The 96-bit unique device identifier provides a reference number which is unique for any
    device and in any context. These bits can never be altered by the user.
    The 96-bit unique device identifier can also be read in single bytes/half-words/words in different ways and then be concatenated using a custom algorithm.
*/
#define STM32_UUID ((uint32_t *)0x1FFF7A10)
uint32_t target_get_serial() {
 8000398:	b508      	push	{r3, lr}
    // uuid[1] is the wafer number plus the lot number, need to check the uniqueness of this...
    debug_println("----target_get_serial");
 800039a:	4803      	ldr	r0, [pc, #12]	; (80003a8 <target_get_serial+0x10>)
 800039c:	f002 ffaa 	bl	80032f4 <debug_println>
    return (uint32_t)STM32_UUID[1];
 80003a0:	4b02      	ldr	r3, [pc, #8]	; (80003ac <target_get_serial+0x14>)
}
 80003a2:	6818      	ldr	r0, [r3, #0]
 80003a4:	bd08      	pop	{r3, pc}
 80003a6:	bf00      	nop
 80003a8:	0800465c 	.word	0x0800465c
 80003ac:	1fff7a14 	.word	0x1fff7a14

080003b0 <target_panic>:
    debug_println(""); debug_flush();
    target_panic(920);
}

// __attribute__((weak))
void target_panic(int statusCode) {
 80003b0:	b508      	push	{r3, lr}
 80003b2:	4604      	mov	r4, r0
 80003b4:	b672      	cpsid	i
	//  TODO
    target_disable_irq();
	debug_print("*****target_panic ");
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <target_panic+0x1c>)
 80003b8:	f002 ff96 	bl	80032e8 <debug_print>
	debug_println((int) statusCode);
 80003bc:	4620      	mov	r0, r4
 80003be:	f002 ffad 	bl	800331c <_Z13debug_printlni>
	debug_flush();
 80003c2:	f002 ff23 	bl	800320c <debug_flush>
    ////DMESG("*** CODAL PANIC : [%d]", statusCode);
	for (;;) {
        __asm("wfe");  //  Allow CPU to go to sleep.
 80003c6:	bf20      	wfe
 80003c8:	e7fd      	b.n	80003c6 <target_panic+0x16>
 80003ca:	bf00      	nop
 80003cc:	08004674 	.word	0x08004674

080003d0 <fiber_initial_stack_base>:
    uint32_t stack_base;
};

PROCESSOR_WORD_TYPE fiber_initial_stack_base() {
    return (PROCESSOR_WORD_TYPE) DEVICE_STACK_BASE;
}
 80003d0:	4800      	ldr	r0, [pc, #0]	; (80003d4 <fiber_initial_stack_base+0x4>)
 80003d2:	4770      	bx	lr
 80003d4:	20005000 	.word	0x20005000

080003d8 <tcb_allocate>:

void *tcb_allocate() {
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 80003d8:	2040      	movs	r0, #64	; 0x40
 80003da:	f007 bfab 	b.w	8008334 <malloc>
 80003de:	bf00      	nop

080003e0 <tcb_configure_lr>:
 * @param tcb The tcb to modify
 * @param function the function the link register should point to.
 */
void tcb_configure_lr(void *tcb, PROCESSOR_WORD_TYPE function) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    tcbPointer->LR = function;
 80003e0:	6381      	str	r1, [r0, #56]	; 0x38
}
 80003e2:	4770      	bx	lr

080003e4 <tcb_configure_sp>:
 * @param tcb The tcb to modify
 * @param function the function the link register should point to.
 */
void tcb_configure_sp(void *tcb, PROCESSOR_WORD_TYPE sp) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    tcbPointer->SP = sp;
 80003e4:	6341      	str	r1, [r0, #52]	; 0x34
}
 80003e6:	4770      	bx	lr

080003e8 <tcb_configure_stack_base>:

void tcb_configure_stack_base(void *tcb, PROCESSOR_WORD_TYPE stack_base) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    tcbPointer->stack_base = stack_base;
 80003e8:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80003ea:	4770      	bx	lr

080003ec <tcb_get_stack_base>:

PROCESSOR_WORD_TYPE tcb_get_stack_base(void *tcb) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    return tcbPointer->stack_base;
}
 80003ec:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80003ee:	4770      	bx	lr

080003f0 <get_current_sp>:
register unsigned int _sp __asm("sp");

PROCESSOR_WORD_TYPE get_current_sp() {
    return _sp;
    //  Formerly: return __get_MSP();
}
 80003f0:	4668      	mov	r0, sp
 80003f2:	4770      	bx	lr

080003f4 <tcb_get_sp>:

PROCESSOR_WORD_TYPE tcb_get_sp(void *tcb) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    return tcbPointer->SP;
}
 80003f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80003f6:	4770      	bx	lr

080003f8 <tcb_configure_args>:

void tcb_configure_args(void *tcb, PROCESSOR_WORD_TYPE ep, PROCESSOR_WORD_TYPE cp,
                        PROCESSOR_WORD_TYPE pm) {
    PROCESSOR_TCB *tcbPointer = (PROCESSOR_TCB *)tcb;
    tcbPointer->R0 = (uint32_t)ep;
    tcbPointer->R1 = (uint32_t)cp;
 80003f8:	e9c0 1200 	strd	r1, r2, [r0]
    tcbPointer->R2 = (uint32_t)pm;
 80003fc:	6083      	str	r3, [r0, #8]
}
 80003fe:	4770      	bx	lr

08000400 <test_codal>:

void test_codal() {
 8000400:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <test_codal+0x54>)
	PROCESSOR_WORD_TYPE end = (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE);
	PROCESSOR_WORD_TYPE size = end - start;
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <test_codal+0x58>)
    tcbPointer->R1 = (uint32_t)cp;
    tcbPointer->R2 = (uint32_t)pm;
}

void test_codal() {
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000406:	681d      	ldr	r5, [r3, #0]
	PROCESSOR_WORD_TYPE end = (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE);
	PROCESSOR_WORD_TYPE size = end - start;
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000408:	4c14      	ldr	r4, [pc, #80]	; (800045c <test_codal+0x5c>)

void test_codal() {
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
	PROCESSOR_WORD_TYPE end = (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE);
	PROCESSOR_WORD_TYPE size = end - start;
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 800040a:	f002 ff6d 	bl	80032e8 <debug_print>
 800040e:	4628      	mov	r0, r5
 8000410:	f002 ffb6 	bl	8003380 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000414:	4812      	ldr	r0, [pc, #72]	; (8000460 <test_codal+0x60>)
 8000416:	f002 ff67 	bl	80032e8 <debug_print>
 800041a:	4620      	mov	r0, r4
 800041c:	f002 ffb0 	bl	8003380 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <test_codal+0x64>)
 8000422:	f002 ff61 	bl	80032e8 <debug_print>
}

void test_codal() {
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
	PROCESSOR_WORD_TYPE end = (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE);
	PROCESSOR_WORD_TYPE size = end - start;
 8000426:	1b60      	subs	r0, r4, r5
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000428:	0a80      	lsrs	r0, r0, #10
 800042a:	f002 fef7 	bl	800321c <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <test_codal+0x68>)
 8000430:	f002 ff5a 	bl	80032e8 <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000434:	466b      	mov	r3, sp
 8000436:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 800043a:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	PROCESSOR_WORD_TYPE end = (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE);
	PROCESSOR_WORD_TYPE size = end - start;
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
	debug_print(" KB, stack used: "); debug_print((size_t) 
 800043e:	0a80      	lsrs	r0, r0, #10
 8000440:	f002 feec 	bl	800321c <_Z11debug_printj>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
    debug_println(" KB"); debug_flush();
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <test_codal+0x6c>)
 8000446:	f002 ff55 	bl	80032f4 <debug_println>
}
 800044a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
	debug_print(" KB, stack used: "); debug_print((size_t) 
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
    debug_println(" KB"); debug_flush();
 800044e:	f002 bedd 	b.w	800320c <debug_flush>
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	080046d8 	.word	0x080046d8
 800045c:	20004800 	.word	0x20004800
 8000460:	080046e8 	.word	0x080046e8
 8000464:	080046f0 	.word	0x080046f0
 8000468:	080046fc 	.word	0x080046fc
 800046c:	08004710 	.word	0x08004710

08000470 <_fini>:
}

//  Handle exit.  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
extern "C" {
    void* __dso_handle = nullptr;
    void _fini(void) { }
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <__aeabi_atexit>:
    { 
        static_cast<void>(object); 
        static_cast<void>(destructor); 
        static_cast<void>(dso_handle); 
        return 0; 
    }
 8000474:	2000      	movs	r0, #0
 8000476:	4770      	bx	lr

08000478 <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 8000478:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 800047a:	d015      	beq.n	80004a8 <store_context_complete>

    STR     R0, [R0,#0]
 800047c:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 800047e:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000480:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000482:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000484:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000486:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000488:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 800048a:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 800048c:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 800048e:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000490:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000492:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000494:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000496:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000498:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800049a:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 800049c:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 800049e:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 80004a0:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 80004a2:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 80004a4:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 80004a6:	6384      	str	r4, [r0, #56]	; 0x38

080004a8 <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 80004a8:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 80004aa:	d006      	beq.n	80004ba <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 80004ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

080004ae <store_stack>:
store_stack:
    SUBS    R4, #4
 80004ae:	3c04      	subs	r4, #4
    SUBS    R1, #4
 80004b0:	3904      	subs	r1, #4

    LDR     R5, [R4]
 80004b2:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 80004b4:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 80004b6:	42b4      	cmp	r4, r6
    BNE     store_stack
 80004b8:	d1f9      	bne.n	80004ae <store_stack>

080004ba <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 80004ba:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 80004bc:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 80004be:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 80004c0:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 80004c2:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 80004c4:	d006      	beq.n	80004d4 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 80004c6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

080004c8 <restore_stack>:

restore_stack:
    SUBS    R4, #4
 80004c8:	3c04      	subs	r4, #4
    SUBS    R3, #4
 80004ca:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 80004cc:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 80004ce:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 80004d0:	42b4      	cmp	r4, r6
    BNE     restore_stack
 80004d2:	d1f9      	bne.n	80004c8 <restore_stack>

080004d4 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 80004d4:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 80004d6:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 80004d8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 80004da:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 80004dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 80004de:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 80004e0:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 80004e2:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 80004e4:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 80004e6:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 80004e8:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 80004ea:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 80004ec:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 80004ee:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 80004f0:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 80004f2:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 80004f4:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 80004f6:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 80004f8:	4770      	bx	lr

080004fa <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 80004fa:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 80004fc:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 80004fe:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000500:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000502:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000504:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000506:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000508:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 800050a:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 800050c:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 800050e:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000510:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000512:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000514:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000516:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000518:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 800051a:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 800051c:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 800051e:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000520:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000522:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000524:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000526:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000528 <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000528:	3c04      	subs	r4, #4
    SUBS    R1, #4
 800052a:	3904      	subs	r1, #4

    LDR     R5, [R4]
 800052c:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 800052e:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000530:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000532:	d1f9      	bne.n	8000528 <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000534:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000536:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000538:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 800053a:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 800053c:	4770      	bx	lr

0800053e <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 800053e:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000540:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000542:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000544:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000546:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000548:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 800054a:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 800054c:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 800054e:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000550:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000552:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000554:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000556:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000558:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800055a:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800055c:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 800055e:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000560:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000562:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000564:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000566:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000568:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 800056a:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 800056c:	4770      	bx	lr

0800056e <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 800056e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000570:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000572:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000574:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000576:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000578:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 800057a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 800057c:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 800057e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000580:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000582:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000584:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000586:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000588:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 800058a:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 800058c:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 800058e:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000590:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000592:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000594:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000596:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000598:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 800059a:	4770      	bx	lr

0800059c <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 800059c:	e7fe      	b.n	800059c <blocking_handler>
 800059e:	bf00      	nop

080005a0 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <flash_unlock>:


void flash_unlock(void)
{
	/* Authorize the FPEC access. */
	FLASH_KEYR = FLASH_KEYR_KEY1;
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <flash_unlock+0xc>)
 80005a6:	4903      	ldr	r1, [pc, #12]	; (80005b4 <flash_unlock+0x10>)
	FLASH_KEYR = FLASH_KEYR_KEY2;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <flash_unlock+0x14>)


void flash_unlock(void)
{
	/* Authorize the FPEC access. */
	FLASH_KEYR = FLASH_KEYR_KEY1;
 80005aa:	6019      	str	r1, [r3, #0]
	FLASH_KEYR = FLASH_KEYR_KEY2;
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	4770      	bx	lr
 80005b0:	40022004 	.word	0x40022004
 80005b4:	45670123 	.word	0x45670123
 80005b8:	cdef89ab 	.word	0xcdef89ab

080005bc <flash_lock>:

void flash_lock(void)
{
	FLASH_CR |= FLASH_CR_LOCK;
 80005bc:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <flash_lock+0xc>)
 80005be:	6813      	ldr	r3, [r2, #0]
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	4770      	bx	lr
 80005c8:	40022010 	.word	0x40022010

080005cc <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80005cc:	6101      	str	r1, [r0, #16]
}
 80005ce:	4770      	bx	lr

080005d0 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80005d0:	0409      	lsls	r1, r1, #16
 80005d2:	6101      	str	r1, [r0, #16]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 80005d8:	4a02      	ldr	r2, [pc, #8]	; (80005e4 <pwr_disable_backup_domain_write_protect+0xc>)
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6013      	str	r3, [r2, #0]
}
 80005e2:	4770      	bx	lr
 80005e4:	40007000 	.word	0x40007000

080005e8 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80005e8:	4a02      	ldr	r2, [pc, #8]	; (80005f4 <pwr_enable_backup_domain_write_protect+0xc>)
 80005ea:	6813      	ldr	r3, [r2, #0]
 80005ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	4770      	bx	lr
 80005f4:	40007000 	.word	0x40007000

080005f8 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80005f8:	2201      	movs	r2, #1
 80005fa:	0943      	lsrs	r3, r0, #5
 80005fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000600:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	f000 001f 	and.w	r0, r0, #31
 800060a:	4082      	lsls	r2, r0
 800060c:	430a      	orrs	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000614:	2201      	movs	r2, #1
 8000616:	0943      	lsrs	r3, r0, #5
 8000618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800061c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000620:	6819      	ldr	r1, [r3, #0]
 8000622:	f000 001f 	and.w	r0, r0, #31
 8000626:	fa02 f000 	lsl.w	r0, r2, r0
 800062a:	4301      	orrs	r1, r0
 800062c:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	ea22 0000 	bic.w	r0, r2, r0
 8000634:	6018      	str	r0, [r3, #0]
}
 8000636:	4770      	bx	lr

08000638 <desig_get_unique_id_as_string>:

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000638:	2919      	cmp	r1, #25
 800063a:	bf28      	it	cs
 800063c:	2119      	movcs	r1, #25
	*result = DESIG_UNIQUE_ID0;
}

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 800063e:	b4f0      	push	{r4, r5, r6, r7}

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 8000640:	460d      	mov	r5, r1
	*result = DESIG_UNIQUE_ID0;
}

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 8000642:	b088      	sub	sp, #32
	int i, len;
	uint32_t dev_id_buf[3];
	uint8_t *device_id = (uint8_t *)dev_id_buf;
	const char chars[] = "0123456789ABCDEF";
 8000644:	4f16      	ldr	r7, [pc, #88]	; (80006a0 <desig_get_unique_id_as_string+0x68>)
 8000646:	ae03      	add	r6, sp, #12
	*result = DESIG_UNIQUE_ID0;
}

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 8000648:	4604      	mov	r4, r0
	int i, len;
	uint32_t dev_id_buf[3];
	uint8_t *device_id = (uint8_t *)dev_id_buf;
	const char chars[] = "0123456789ABCDEF";
 800064a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800064c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800064e:	683a      	ldr	r2, [r7, #0]
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t *result)
{
	*result++ = DESIG_UNIQUE_ID2;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <desig_get_unique_id_as_string+0x6c>)
				   unsigned int string_len)
{
	int i, len;
	uint32_t dev_id_buf[3];
	uint8_t *device_id = (uint8_t *)dev_id_buf;
	const char chars[] = "0123456789ABCDEF";
 8000652:	7032      	strb	r2, [r6, #0]
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t *result)
{
	*result++ = DESIG_UNIQUE_ID2;
 8000654:	681a      	ldr	r2, [r3, #0]
	*result++ = DESIG_UNIQUE_ID1;
	*result = DESIG_UNIQUE_ID0;
 8000656:	3b08      	subs	r3, #8
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t *result)
{
	*result++ = DESIG_UNIQUE_ID2;
 8000658:	9200      	str	r2, [sp, #0]
	*result++ = DESIG_UNIQUE_ID1;
 800065a:	685a      	ldr	r2, [r3, #4]

	desig_get_unique_id(dev_id_buf);

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;
 800065c:	1e68      	subs	r0, r5, #1
}

void desig_get_unique_id(uint32_t *result)
{
	*result++ = DESIG_UNIQUE_ID2;
	*result++ = DESIG_UNIQUE_ID1;
 800065e:	9201      	str	r2, [sp, #4]
	*result = DESIG_UNIQUE_ID0;
 8000660:	681b      	ldr	r3, [r3, #0]

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;

	for (i = 0; i < len; i += 2) {
 8000662:	2800      	cmp	r0, #0

void desig_get_unique_id(uint32_t *result)
{
	*result++ = DESIG_UNIQUE_ID2;
	*result++ = DESIG_UNIQUE_ID1;
	*result = DESIG_UNIQUE_ID0;
 8000664:	9302      	str	r3, [sp, #8]

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;

	for (i = 0; i < len; i += 2) {
 8000666:	dd15      	ble.n	8000694 <desig_get_unique_id_as_string+0x5c>
 8000668:	2300      	movs	r3, #0
 800066a:	1c65      	adds	r5, r4, #1
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 800066c:	aa08      	add	r2, sp, #32
 800066e:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8000672:	f812 2c20 	ldrb.w	r2, [r2, #-32]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000676:	ae08      	add	r6, sp, #32
 8000678:	f002 010f 	and.w	r1, r2, #15
 800067c:	4431      	add	r1, r6
	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;

	for (i = 0; i < len; i += 2) {
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 800067e:	eb06 1212 	add.w	r2, r6, r2, lsr #4
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000682:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;

	for (i = 0; i < len; i += 2) {
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000686:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800068a:	54e2      	strb	r2, [r4, r3]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 800068c:	54e9      	strb	r1, [r5, r3]

	/* Each byte produces two characters */
	len = (2 * sizeof(dev_id_buf) < string_len) ?
		2 * sizeof(dev_id_buf) : string_len - 1;

	for (i = 0; i < len; i += 2) {
 800068e:	3302      	adds	r3, #2
 8000690:	4298      	cmp	r0, r3
 8000692:	dceb      	bgt.n	800066c <desig_get_unique_id_as_string+0x34>
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
	}

	string[len] = '\0';
 8000694:	2300      	movs	r3, #0
 8000696:	5423      	strb	r3, [r4, r0]
}
 8000698:	b008      	add	sp, #32
 800069a:	bcf0      	pop	{r4, r5, r6, r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08004714 	.word	0x08004714
 80006a4:	1ffff7f0 	.word	0x1ffff7f0

080006a8 <flash_get_status_flags>:
error, bit 5: end of operation.
*/

uint32_t flash_get_status_flags(void)
{
	uint32_t flags = (FLASH_SR & (FLASH_SR_PGERR |
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <flash_get_status_flags+0x1c>)
			FLASH_SR_EOP |
			FLASH_SR_WRPRTERR |
			FLASH_SR_BSY));
	if (DESIG_FLASH_SIZE > 512) {
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <flash_get_status_flags+0x20>)
error, bit 5: end of operation.
*/

uint32_t flash_get_status_flags(void)
{
	uint32_t flags = (FLASH_SR & (FLASH_SR_PGERR |
 80006ac:	6810      	ldr	r0, [r2, #0]
			FLASH_SR_EOP |
			FLASH_SR_WRPRTERR |
			FLASH_SR_BSY));
	if (DESIG_FLASH_SIZE > 512) {
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		flags |= (FLASH_SR2 & (FLASH_SR_PGERR |
 80006b4:	bf82      	ittt	hi
 80006b6:	4b05      	ldrhi	r3, [pc, #20]	; (80006cc <flash_get_status_flags+0x24>)
 80006b8:	681b      	ldrhi	r3, [r3, #0]
 80006ba:	4318      	orrhi	r0, r3
 80006bc:	f000 0035 	and.w	r0, r0, #53	; 0x35
			FLASH_SR_WRPRTERR |
			FLASH_SR_BSY));
	}

	return flags;
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	4002200c 	.word	0x4002200c
 80006c8:	1ffff7e0 	.word	0x1ffff7e0
 80006cc:	4002204c 	.word	0x4002204c

080006d0 <flash_program_half_word>:
@param[in] address Full address of flash half word to be programmed.
@param[in] data half word to write
*/

void flash_program_half_word(uint32_t address, uint16_t data)
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 80006d2:	4c21      	ldr	r4, [pc, #132]	; (8000758 <flash_program_half_word+0x88>)
@param[in] address Full address of flash half word to be programmed.
@param[in] data half word to write
*/

void flash_program_half_word(uint32_t address, uint16_t data)
{
 80006d4:	4605      	mov	r5, r0
 80006d6:	460e      	mov	r6, r1
	flash_wait_for_last_operation();
 80006d8:	f000 fedc 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 80006dc:	8823      	ldrh	r3, [r4, #0]
 80006de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e2:	d914      	bls.n	800070e <flash_program_half_word+0x3e>
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <flash_program_half_word+0x8c>)
 80006e6:	429d      	cmp	r5, r3
 80006e8:	d926      	bls.n	8000738 <flash_program_half_word+0x68>
		FLASH_CR2 |= FLASH_CR_PG;
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <flash_program_half_word+0x90>)
 80006ec:	6813      	ldr	r3, [r2, #0]
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR |= FLASH_CR_PG;
	}

	MMIO16(address) = data;
 80006f4:	802e      	strh	r6, [r5, #0]

	flash_wait_for_last_operation();
 80006f6:	f000 fecd 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 80006fa:	8823      	ldrh	r3, [r4, #0]
 80006fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000700:	d914      	bls.n	800072c <flash_program_half_word+0x5c>
		FLASH_CR2 &= ~FLASH_CR_PG;
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <flash_program_half_word+0x90>)
 8000704:	6813      	ldr	r3, [r2, #0]
 8000706:	f023 0301 	bic.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR &= ~FLASH_CR_PG;
	}
}
 800070c:	bd70      	pop	{r4, r5, r6, pc}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PG;
	} else {
		FLASH_CR |= FLASH_CR_PG;
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <flash_program_half_word+0x94>)
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
	}

	MMIO16(address) = data;
 8000718:	802e      	strh	r6, [r5, #0]

	flash_wait_for_last_operation();
 800071a:	f000 febb 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 800071e:	8823      	ldrh	r3, [r4, #0]
 8000720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000724:	d902      	bls.n	800072c <flash_program_half_word+0x5c>
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <flash_program_half_word+0x8c>)
 8000728:	429d      	cmp	r5, r3
 800072a:	d8ea      	bhi.n	8000702 <flash_program_half_word+0x32>
		FLASH_CR2 &= ~FLASH_CR_PG;
	} else {
		FLASH_CR &= ~FLASH_CR_PG;
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <flash_program_half_word+0x94>)
 800072e:	6813      	ldr	r3, [r2, #0]
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	6013      	str	r3, [r2, #0]
	}
}
 8000736:	bd70      	pop	{r4, r5, r6, pc}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PG;
	} else {
		FLASH_CR |= FLASH_CR_PG;
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <flash_program_half_word+0x94>)
 800073a:	6813      	ldr	r3, [r2, #0]
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]
	}

	MMIO16(address) = data;
 8000742:	802e      	strh	r6, [r5, #0]

	flash_wait_for_last_operation();
 8000744:	f000 fea6 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 &= ~FLASH_CR_PG;
	} else {
		FLASH_CR &= ~FLASH_CR_PG;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <flash_program_half_word+0x94>)

	MMIO16(address) = data;

	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512) && (address >= FLASH_BASE+0x00080000)) {
 800074a:	8823      	ldrh	r3, [r4, #0]
		FLASH_CR2 &= ~FLASH_CR_PG;
	} else {
		FLASH_CR &= ~FLASH_CR_PG;
 800074c:	6813      	ldr	r3, [r2, #0]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e7ef      	b.n	8000736 <flash_program_half_word+0x66>
 8000756:	bf00      	nop
 8000758:	1ffff7e0 	.word	0x1ffff7e0
 800075c:	0807ffff 	.word	0x0807ffff
 8000760:	40022050 	.word	0x40022050
 8000764:	40022010 	.word	0x40022010

08000768 <flash_erase_page>:

@param[in] page_address Full address of flash page to be erased.
*/

void flash_erase_page(uint32_t page_address)
{
 8000768:	b538      	push	{r3, r4, r5, lr}
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512)
 800076a:	4c28      	ldr	r4, [pc, #160]	; (800080c <flash_erase_page+0xa4>)

@param[in] page_address Full address of flash page to be erased.
*/

void flash_erase_page(uint32_t page_address)
{
 800076c:	4605      	mov	r5, r0
	flash_wait_for_last_operation();
 800076e:	f000 fe91 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512)
 8000772:	8823      	ldrh	r3, [r4, #0]
 8000774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000778:	d919      	bls.n	80007ae <flash_erase_page+0x46>
	    && (page_address >= FLASH_BASE+0x00080000)) {
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <flash_erase_page+0xa8>)
 800077c:	429d      	cmp	r5, r3
 800077e:	d930      	bls.n	80007e2 <flash_erase_page+0x7a>
		FLASH_CR2 |= FLASH_CR_PER;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <flash_erase_page+0xac>)
		FLASH_AR2 = page_address;
 8000782:	4925      	ldr	r1, [pc, #148]	; (8000818 <flash_erase_page+0xb0>)
{
	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512)
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PER;
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	f042 0202 	orr.w	r2, r2, #2
 800078a:	601a      	str	r2, [r3, #0]
		FLASH_AR2 = page_address;
 800078c:	600d      	str	r5, [r1, #0]
		FLASH_CR2 |= FLASH_CR_STRT;
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000794:	601a      	str	r2, [r3, #0]
		FLASH_CR |= FLASH_CR_PER;
		FLASH_AR = page_address;
		FLASH_CR |= FLASH_CR_STRT;
	}

	flash_wait_for_last_operation();
 8000796:	f000 fe7d 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512)
 800079a:	8823      	ldrh	r3, [r4, #0]
 800079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a0:	d919      	bls.n	80007d6 <flash_erase_page+0x6e>
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 &= ~FLASH_CR_PER;
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <flash_erase_page+0xac>)
 80007a4:	6813      	ldr	r3, [r2, #0]
 80007a6:	f023 0302 	bic.w	r3, r3, #2
 80007aa:	6013      	str	r3, [r2, #0]
	} else {
		FLASH_CR &= ~FLASH_CR_PER;
	}
}
 80007ac:	bd38      	pop	{r3, r4, r5, pc}
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PER;
		FLASH_AR2 = page_address;
		FLASH_CR2 |= FLASH_CR_STRT;
	} else  {
		FLASH_CR |= FLASH_CR_PER;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <flash_erase_page+0xb4>)
		FLASH_AR = page_address;
 80007b0:	491b      	ldr	r1, [pc, #108]	; (8000820 <flash_erase_page+0xb8>)
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PER;
		FLASH_AR2 = page_address;
		FLASH_CR2 |= FLASH_CR_STRT;
	} else  {
		FLASH_CR |= FLASH_CR_PER;
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f042 0202 	orr.w	r2, r2, #2
 80007b8:	601a      	str	r2, [r3, #0]
		FLASH_AR = page_address;
 80007ba:	600d      	str	r5, [r1, #0]
		FLASH_CR |= FLASH_CR_STRT;
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007c2:	601a      	str	r2, [r3, #0]
	}

	flash_wait_for_last_operation();
 80007c4:	f000 fe66 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512)
 80007c8:	8823      	ldrh	r3, [r4, #0]
 80007ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007ce:	d902      	bls.n	80007d6 <flash_erase_page+0x6e>
	    && (page_address >= FLASH_BASE+0x00080000)) {
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <flash_erase_page+0xa8>)
 80007d2:	429d      	cmp	r5, r3
 80007d4:	d8e5      	bhi.n	80007a2 <flash_erase_page+0x3a>
		FLASH_CR2 &= ~FLASH_CR_PER;
	} else {
		FLASH_CR &= ~FLASH_CR_PER;
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <flash_erase_page+0xb4>)
 80007d8:	6813      	ldr	r3, [r2, #0]
 80007da:	f023 0302 	bic.w	r3, r3, #2
 80007de:	6013      	str	r3, [r2, #0]
	}
}
 80007e0:	bd38      	pop	{r3, r4, r5, pc}
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PER;
		FLASH_AR2 = page_address;
		FLASH_CR2 |= FLASH_CR_STRT;
	} else  {
		FLASH_CR |= FLASH_CR_PER;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <flash_erase_page+0xb4>)
		FLASH_AR = page_address;
 80007e4:	490e      	ldr	r1, [pc, #56]	; (8000820 <flash_erase_page+0xb8>)
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 |= FLASH_CR_PER;
		FLASH_AR2 = page_address;
		FLASH_CR2 |= FLASH_CR_STRT;
	} else  {
		FLASH_CR |= FLASH_CR_PER;
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	f042 0202 	orr.w	r2, r2, #2
 80007ec:	601a      	str	r2, [r3, #0]
		FLASH_AR = page_address;
 80007ee:	600d      	str	r5, [r1, #0]
		FLASH_CR |= FLASH_CR_STRT;
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007f6:	601a      	str	r2, [r3, #0]
	}

	flash_wait_for_last_operation();
 80007f8:	f000 fe4c 	bl	8001494 <flash_wait_for_last_operation>

	if ((DESIG_FLASH_SIZE > 512)
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 &= ~FLASH_CR_PER;
	} else {
		FLASH_CR &= ~FLASH_CR_PER;
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <flash_erase_page+0xb4>)
		FLASH_CR |= FLASH_CR_STRT;
	}

	flash_wait_for_last_operation();

	if ((DESIG_FLASH_SIZE > 512)
 80007fe:	8823      	ldrh	r3, [r4, #0]
	    && (page_address >= FLASH_BASE+0x00080000)) {
		FLASH_CR2 &= ~FLASH_CR_PER;
	} else {
		FLASH_CR &= ~FLASH_CR_PER;
 8000800:	6813      	ldr	r3, [r2, #0]
 8000802:	f023 0302 	bic.w	r3, r3, #2
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	e7ea      	b.n	80007e0 <flash_erase_page+0x78>
 800080a:	bf00      	nop
 800080c:	1ffff7e0 	.word	0x1ffff7e0
 8000810:	0807ffff 	.word	0x0807ffff
 8000814:	40022050 	.word	0x40022050
 8000818:	40022054 	.word	0x40022054
 800081c:	40022010 	.word	0x40022010
 8000820:	40022014 	.word	0x40022014

08000824 <gpio_set_mode>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8000824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000828:	f04f 0c0f 	mov.w	ip, #15

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 800082c:	6807      	ldr	r7, [r0, #0]
	crh = GPIO_CRH(gpioport);
 800082e:	2400      	movs	r4, #0
 8000830:	f8d0 e004 	ldr.w	lr, [r0, #4]

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8000834:	e004      	b.n	8000840 <gpio_set_mode+0x1c>
		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000836:	ea46 0709 	orr.w	r7, r6, r9

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 800083a:	3401      	adds	r4, #1
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800083c:	2c10      	cmp	r4, #16
 800083e:	d027      	beq.n	8000890 <gpio_set_mode+0x6c>
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios)) {
 8000840:	fa43 f504 	asr.w	r5, r3, r4
 8000844:	f015 0f01 	tst.w	r5, #1
 8000848:	b2a5      	uxth	r5, r4
 800084a:	d0f6      	beq.n	800083a <gpio_set_mode+0x16>

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800084c:	00a6      	lsls	r6, r4, #2
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 800084e:	f106 0802 	add.w	r8, r6, #2

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000852:	fa0c f906 	lsl.w	r9, ip, r6
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000856:	fa02 f808 	lsl.w	r8, r2, r8
 800085a:	fa01 f606 	lsl.w	r6, r1, r6
		if (!((1 << i) & gpios)) {
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 800085e:	2c07      	cmp	r4, #7

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000860:	ea27 0909 	bic.w	r9, r7, r9
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000864:	ea48 0606 	orr.w	r6, r8, r6
		if (!((1 << i) & gpios)) {
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000868:	d9e5      	bls.n	8000836 <gpio_set_mode+0x12>

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800086a:	00ad      	lsls	r5, r5, #2
 800086c:	3d20      	subs	r5, #32
 800086e:	b2ad      	uxth	r5, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000870:	1cae      	adds	r6, r5, #2
 8000872:	fa01 f805 	lsl.w	r8, r1, r5
 8000876:	fa02 f606 	lsl.w	r6, r2, r6

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800087a:	fa0c f505 	lsl.w	r5, ip, r5
 800087e:	3401      	adds	r4, #1
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000880:	ea46 0608 	orr.w	r6, r6, r8

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000884:	ea2e 0505 	bic.w	r5, lr, r5
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8000888:	2c10      	cmp	r4, #16
		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 800088a:	ea46 0e05 	orr.w	lr, r6, r5
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800088e:	d1d7      	bne.n	8000840 <gpio_set_mode+0x1c>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000890:	6007      	str	r7, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000892:	f8c0 e004 	str.w	lr, [r0, #4]
}
 8000896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800089a:	bf00      	nop

0800089c <rcc_is_osc_ready.part.0>:

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <rcc_is_osc_ready.part.0+0xc>)
 800089e:	6818      	ldr	r0, [r3, #0]
		return RCC_BDCR & RCC_BDCR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
	}
	return false;
}
 80008a0:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <rcc_osc_on.part.1>:

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80008ac:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <rcc_osc_on.part.1+0xc>)
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b4:	6013      	str	r3, [r2, #0]
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
		break;
	}
}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 80008bc:	4a02      	ldr	r2, [pc, #8]	; (80008c8 <rcc_enable_rtc_clock+0xc>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	4770      	bx	lr
 80008c8:	40021020 	.word	0x40021020

080008cc <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 80008cc:	2806      	cmp	r0, #6
 80008ce:	d80a      	bhi.n	80008e6 <rcc_set_rtc_clock_source+0x1a>
 80008d0:	e8df f000 	tbb	[pc, r0]
 80008d4:	2f040404 	.word	0x2f040404
 80008d8:	1d04      	.short	0x1d04
 80008da:	0a          	.byte	0x0a
 80008db:	00          	.byte	0x00
	case RCC_PLL2:
	case RCC_PLL3:
	case RCC_HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 80008dc:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <rcc_set_rtc_clock_source+0x8c>)
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008e4:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80008e6:	4770      	bx	lr
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
		RCC_BDCR |= (1 << 8);
		break;
	case RCC_LSI:
		/* Turn the LSI on and wait while it stabilises. */
		RCC_CSR |= RCC_CSR_LSION;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <rcc_set_rtc_clock_source+0x90>)
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 80008ea:	461a      	mov	r2, r3
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
		RCC_BDCR |= (1 << 8);
		break;
	case RCC_LSI:
		/* Turn the LSI on and wait while it stabilises. */
		RCC_CSR |= RCC_CSR_LSION;
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	f041 0101 	orr.w	r1, r1, #1
 80008f2:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	0799      	lsls	r1, r3, #30
 80008f8:	d5fc      	bpl.n	80008f4 <rcc_set_rtc_clock_source+0x28>

		/* Choose LSI as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <rcc_set_rtc_clock_source+0x8c>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000902:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800090a:	601a      	str	r2, [r3, #0]
		break;
 800090c:	4770      	bx	lr
	uint32_t reg32;

	switch (clock_source) {
	case RCC_LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <rcc_set_rtc_clock_source+0x8c>)
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000910:	461a      	mov	r2, r3
	uint32_t reg32;

	switch (clock_source) {
	case RCC_LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	f041 0101 	orr.w	r1, r1, #1
 8000918:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	0798      	lsls	r0, r3, #30
 800091e:	d5fc      	bpl.n	800091a <rcc_set_rtc_clock_source+0x4e>

		/* Choose LSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000926:	6013      	str	r3, [r2, #0]
		RCC_BDCR |= (1 << 8);
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
		break;
 8000930:	4770      	bx	lr
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
		RCC_BDCR |= (1 << 9);
		break;
	case RCC_HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <rcc_set_rtc_clock_source+0x94>)
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000934:	461a      	mov	r2, r3
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
		RCC_BDCR |= (1 << 9);
		break;
	case RCC_HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 8000936:	6819      	ldr	r1, [r3, #0]
 8000938:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800093c:	6019      	str	r1, [r3, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	039b      	lsls	r3, r3, #14
 8000942:	d5fc      	bpl.n	800093e <rcc_set_rtc_clock_source+0x72>

		/* Choose HSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <rcc_set_rtc_clock_source+0x8c>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800094c:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000954:	601a      	str	r2, [r3, #0]
		break;
 8000956:	4770      	bx	lr
 8000958:	40021020 	.word	0x40021020
 800095c:	40021024 	.word	0x40021024
 8000960:	40021000 	.word	0x40021000

08000964 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000964:	b538      	push	{r3, r4, r5, lr}
		break;
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
		break;
	case RCC_HSI:
		RCC_CR |= RCC_CR_HSION;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
	case RCC_PLL3:
		return RCC_CR & RCC_CR_PLL3RDY;
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8000968:	461a      	mov	r2, r3
		break;
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
		break;
	case RCC_HSI:
		RCC_CR |= RCC_CR_HSION;
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	f041 0101 	orr.w	r1, r1, #1
 8000970:	6019      	str	r1, [r3, #0]
	case RCC_PLL3:
		return RCC_CR & RCC_CR_PLL3RDY;
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 8000972:	6813      	ldr	r3, [r2, #0]
	return false;
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	while (!rcc_is_osc_ready(osc));
 8000974:	0799      	lsls	r1, r3, #30
 8000976:	d5fc      	bpl.n	8000972 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xe>
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
	case RCC_PLL2:
		return RCC_CR & RCC_CR_PLL2RDY;
	case RCC_PLL3:
		return RCC_CR & RCC_CR_PLL3RDY;
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 800097a:	4926      	ldr	r1, [pc, #152]	; (8000a14 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb0>)
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 800097c:	6803      	ldr	r3, [r0, #0]
 800097e:	f023 0303 	bic.w	r3, r3, #3
 8000982:	6003      	str	r3, [r0, #0]
		break;
	case RCC_PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
		break;
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000984:	6813      	ldr	r3, [r2, #0]
 8000986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800098a:	6013      	str	r3, [r2, #0]
	case RCC_PLL2:
		return RCC_CR & RCC_CR_PLL2RDY;
	case RCC_PLL3:
		return RCC_CR & RCC_CR_PLL3RDY;
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 800098c:	680b      	ldr	r3, [r1, #0]
	return false;
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	while (!rcc_is_osc_ready(osc));
 800098e:	039b      	lsls	r3, r3, #14
 8000990:	d5fc      	bpl.n	800098c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x28>
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000992:	4c21      	ldr	r4, [pc, #132]	; (8000a18 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000994:	2002      	movs	r0, #2
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f023 0303 	bic.w	r3, r3, #3
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6023      	str	r3, [r4, #0]
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009a8:	6023      	str	r3, [r4, #0]
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b0:	6023      	str	r3, [r4, #0]
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009bc:	6023      	str	r3, [r4, #0]
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009c4:	6023      	str	r3, [r4, #0]
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 80009c6:	f000 fd5b 	bl	8001480 <flash_set_ws>
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80009d0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80009d4:	6023      	str	r3, [r4, #0]
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009dc:	6023      	str	r3, [r4, #0]
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009e4:	6023      	str	r3, [r4, #0]
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 80009e6:	f7ff ff61 	bl	80008ac <rcc_osc_on.part.1>
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 80009ea:	f7ff ff57 	bl	800089c <rcc_is_osc_ready.part.0>
	return false;
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	while (!rcc_is_osc_ready(osc));
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d0fb      	beq.n	80009ea <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x86>
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 80009f2:	4909      	ldr	r1, [pc, #36]	; (8000a18 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb4>)

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xb8>)
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 80009f6:	680b      	ldr	r3, [r1, #0]

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 80009f8:	4d09      	ldr	r5, [pc, #36]	; (8000a20 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xbc>)
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 80009fa:	f023 0303 	bic.w	r3, r3, #3
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	600b      	str	r3, [r1, #0]
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
 8000a04:	4c07      	ldr	r4, [pc, #28]	; (8000a24 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc0>)
	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
	rcc_apb1_frequency = 36000000;
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc4>)
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0xc8>)

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8000a0a:	602a      	str	r2, [r5, #0]
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
 8000a0c:	6022      	str	r2, [r4, #0]
	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
	rcc_apb1_frequency = 36000000;
 8000a0e:	6003      	str	r3, [r0, #0]
	rcc_apb2_frequency = 72000000;
}
 8000a10:	bd38      	pop	{r3, r4, r5, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40021004 	.word	0x40021004
 8000a1c:	044aa200 	.word	0x044aa200
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	02255100 	.word	0x02255100

08000a30 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8000a30:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8000a32:	f240 3097 	movw	r0, #919	; 0x397
 8000a36:	f7ff fddf 	bl	80005f8 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8000a3a:	2300      	movs	r3, #0
	SET_REG(USB_BTABLE_REG, 0);
	SET_REG(USB_ISTR_REG, 0);

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000a3c:	f44f 411c 	mov.w	r1, #39936	; 0x9c00

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
	rcc_periph_clock_enable(RCC_USB);
	SET_REG(USB_CNTR_REG, 0);
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <st_usbfs_v1_usbd_init+0x24>)
	SET_REG(USB_BTABLE_REG, 0);
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <st_usbfs_v1_usbd_init+0x28>)
	SET_REG(USB_ISTR_REG, 0);
 8000a44:	4c05      	ldr	r4, [pc, #20]	; (8000a5c <st_usbfs_v1_usbd_init+0x2c>)

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
	rcc_periph_clock_enable(RCC_USB);
	SET_REG(USB_CNTR_REG, 0);
 8000a46:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 8000a48:	6003      	str	r3, [r0, #0]
	SET_REG(USB_ISTR_REG, 0);
 8000a4a:	6023      	str	r3, [r4, #0]

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <st_usbfs_v1_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, 0);
	SET_REG(USB_BTABLE_REG, 0);
	SET_REG(USB_ISTR_REG, 0);

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000a4e:	6011      	str	r1, [r2, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	40005c40 	.word	0x40005c40
 8000a58:	40005c50 	.word	0x40005c50
 8000a5c:	40005c44 	.word	0x40005c44
 8000a60:	20000dbc 	.word	0x20000dbc

08000a64 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8000a64:	3201      	adds	r2, #1
 8000a66:	1052      	asrs	r2, r2, #1
 8000a68:	b293      	uxth	r3, r2
 8000a6a:	b152      	cbz	r2, 8000a82 <st_usbfs_copy_to_pm+0x1e>
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	3201      	adds	r2, #1
 8000a72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
		*PM++ = *lbuf++;
 8000a76:	f831 3b02 	ldrh.w	r3, [r1], #2

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8000a7a:	4291      	cmp	r1, r2
		*PM++ = *lbuf++;
 8000a7c:	f840 3b04 	str.w	r3, [r0], #4

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8000a80:	d1f9      	bne.n	8000a76 <st_usbfs_copy_to_pm+0x12>
		*PM++ = *lbuf++;
	}
}
 8000a82:	4770      	bx	lr

08000a84 <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 8000a84:	b470      	push	{r4, r5, r6}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 8000a86:	f002 0601 	and.w	r6, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000a8a:	0852      	lsrs	r2, r2, #1
 8000a8c:	d012      	beq.n	8000ab4 <st_usbfs_copy_from_pm+0x30>
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
 8000a8e:	460b      	mov	r3, r1
 8000a90:	3a01      	subs	r2, #1
 8000a92:	b294      	uxth	r4, r2
 8000a94:	3401      	adds	r4, #1
 8000a96:	eb00 0544 	add.w	r5, r0, r4, lsl #1
	uint8_t odd = len & 1;

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
		*lbuf = *PM;
 8000a9a:	f833 2b04 	ldrh.w	r2, [r3], #4
 8000a9e:	f820 2b02 	strh.w	r2, [r0], #2
{
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8000aa2:	42a8      	cmp	r0, r5
 8000aa4:	d1f9      	bne.n	8000a9a <st_usbfs_copy_from_pm+0x16>
 8000aa6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
		*lbuf = *PM;
	}

	if (odd) {
 8000aaa:	b10e      	cbz	r6, 8000ab0 <st_usbfs_copy_from_pm+0x2c>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 8000aac:	780b      	ldrb	r3, [r1, #0]
 8000aae:	702b      	strb	r3, [r5, #0]
	}
}
 8000ab0:	bc70      	pop	{r4, r5, r6}
 8000ab2:	4770      	bx	lr
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
	uint16_t *lbuf = buf;
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	e7f8      	b.n	8000aaa <st_usbfs_copy_from_pm+0x26>

08000ab8 <usbd_init>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	4680      	mov	r8, r0
 8000abe:	6800      	ldr	r0, [r0, #0]
 8000ac0:	468a      	mov	sl, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	461e      	mov	r6, r3
 8000ac6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8000aca:	4780      	blx	r0
 8000acc:	2500      	movs	r5, #0
 8000ace:	6086      	str	r6, [r0, #8]
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <usbd_init+0x48>)
 8000ad4:	490b      	ldr	r1, [pc, #44]	; (8000b04 <usbd_init+0x4c>)
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <usbd_init+0x50>)
 8000ad8:	60c6      	str	r6, [r0, #12]
 8000ada:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000adc:	f8c0 a000 	str.w	sl, [r0]
 8000ae0:	f8c0 80dc 	str.w	r8, [r0, #220]	; 0xdc
 8000ae4:	6047      	str	r7, [r0, #4]
 8000ae6:	6106      	str	r6, [r0, #16]
 8000ae8:	f8a0 9014 	strh.w	r9, [r0, #20]
 8000aec:	e9c0 131b 	strd	r1, r3, [r0, #108]	; 0x6c
 8000af0:	6682      	str	r2, [r0, #104]	; 0x68
 8000af2:	e9c0 5532 	strd	r5, r5, [r0, #200]	; 0xc8
 8000af6:	e9c0 5534 	strd	r5, r5, [r0, #208]	; 0xd0
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	bf00      	nop
 8000b00:	08000d45 	.word	0x08000d45
 8000b04:	08000da9 	.word	0x08000da9
 8000b08:	08000e49 	.word	0x08000e49

08000b0c <_usbd_reset>:
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 8000b0c:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->current_address = 0;
 8000b0e:	2500      	movs	r5, #0
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 8000b10:	4604      	mov	r4, r0
	usbd_dev->current_address = 0;
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8000b12:	6803      	ldr	r3, [r0, #0]
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
	usbd_dev->current_address = 0;
 8000b14:	82c5      	strh	r5, [r0, #22]
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000b16:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 8000b1a:	b082      	sub	sp, #8
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000b1c:	79db      	ldrb	r3, [r3, #7]
 8000b1e:	9500      	str	r5, [sp, #0]
 8000b20:	6896      	ldr	r6, [r2, #8]
 8000b22:	4629      	mov	r1, r5
 8000b24:	462a      	mov	r2, r5
 8000b26:	47b0      	blx	r6
void _usbd_reset(usbd_device *usbd_dev)
{
	usbd_dev->current_address = 0;
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
	usbd_dev->driver->set_address(usbd_dev, 0);
 8000b28:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000b2c:	4629      	mov	r1, r5
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4620      	mov	r0, r4
 8000b32:	4798      	blx	r3

	if (usbd_dev->user_callback_reset) {
 8000b34:	69e3      	ldr	r3, [r4, #28]
 8000b36:	b11b      	cbz	r3, 8000b40 <_usbd_reset+0x34>
		usbd_dev->user_callback_reset();
	}
}
 8000b38:	b002      	add	sp, #8
 8000b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usbd_dev->current_config = 0;
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
	usbd_dev->driver->set_address(usbd_dev, 0);

	if (usbd_dev->user_callback_reset) {
		usbd_dev->user_callback_reset();
 8000b3e:	4718      	bx	r3
	}
}
 8000b40:	b002      	add	sp, #8
 8000b42:	bd70      	pop	{r4, r5, r6, pc}

08000b44 <usbd_poll>:

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 8000b44:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4718      	bx	r3

08000b4c <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 8000b4c:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000b4e:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000b52:	68a4      	ldr	r4, [r4, #8]
 8000b54:	46a4      	mov	ip, r4
}
 8000b56:	bc10      	pop	{r4}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8000b58:	4760      	bx	ip
 8000b5a:	bf00      	nop

08000b5c <usbd_ep_write_packet>:
}

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8000b5c:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000b5e:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000b62:	69e4      	ldr	r4, [r4, #28]
 8000b64:	46a4      	mov	ip, r4
}
 8000b66:	bc10      	pop	{r4}
}

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000b68:	4760      	bx	ip
 8000b6a:	bf00      	nop

08000b6c <usbd_ep_read_packet>:
}

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8000b6c:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000b6e:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 8000b72:	6a24      	ldr	r4, [r4, #32]
 8000b74:	46a4      	mov	ip, r4
}
 8000b76:	bc10      	pop	{r4}
}

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000b78:	4760      	bx	ip
 8000b7a:	bf00      	nop

08000b7c <usbd_ep_stall_set>:
}

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8000b7c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	4718      	bx	r3

08000b84 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8000b84:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4718      	bx	r3

08000b8c <usbd_ep_nak_set>:
}

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8000b8c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4718      	bx	r3

08000b94 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8000b94:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000b96:	6802      	ldr	r2, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
 8000b98:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000b9a:	79d1      	ldrb	r1, [r2, #7]

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8000b9c:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000ba2:	d20f      	bcs.n	8000bc4 <usb_control_send_chunk+0x30>
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f7ff ffd8 	bl	8000b5c <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8000bac:	2202      	movs	r2, #2
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 8000bae:	6823      	ldr	r3, [r4, #0]
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8000bb0:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 8000bb4:	79d9      	ldrb	r1, [r3, #7]
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 8000bb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 8000bb8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 8000bba:	440a      	add	r2, r1
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 8000bbc:	1a5b      	subs	r3, r3, r1
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 8000bbe:	63a2      	str	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 8000bc0:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 8000bc2:	bd10      	pop	{r4, pc}
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f7ff ffc9 	bl	8000b5c <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
 8000bca:	2300      	movs	r3, #0
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
 8000bcc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
 8000bd0:	87a3      	strh	r3, [r4, #60]	; 0x3c
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	bf14      	ite	ne
 8000bd6:	2202      	movne	r2, #2
 8000bd8:	2203      	moveq	r2, #3
		usbd_dev->control_state.needs_zlp = false;
 8000bda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);

		usbd_dev->control_state.state =
 8000bde:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
			usbd_dev->control_state.needs_zlp ?
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
 8000be2:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop

08000be8 <usb_control_request_dispatch>:
}

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 8000be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bec:	4605      	mov	r5, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	f100 0938 	add.w	r9, r0, #56	; 0x38
 8000bf8:	f100 0a3c 	add.w	sl, r0, #60	; 0x3c
 8000bfc:	f100 0820 	add.w	r8, r0, #32
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8000c00:	f100 0b40 	add.w	fp, r0, #64	; 0x40
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
 8000c04:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000c06:	b15e      	cbz	r6, 8000c20 <usb_control_request_dispatch+0x38>
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8000c08:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8000c0c:	783b      	ldrb	r3, [r7, #0]
 8000c0e:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8000c12:	400b      	ands	r3, r1
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f104 0408 	add.w	r4, r4, #8
 8000c1a:	d00a      	beq.n	8000c32 <usb_control_request_dispatch+0x4a>
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000c1c:	4544      	cmp	r4, r8
 8000c1e:	d1f1      	bne.n	8000c04 <usb_control_request_dispatch+0x1c>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8000c20:	4653      	mov	r3, sl
 8000c22:	464a      	mov	r2, r9
 8000c24:	4639      	mov	r1, r7
 8000c26:	4628      	mov	r0, r5
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8000c28:	b003      	add	sp, #12
 8000c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8000c2e:	f000 bbf5 	b.w	800141c <_usbd_standard_request>
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8000c32:	f8cd b000 	str.w	fp, [sp]
 8000c36:	4653      	mov	r3, sl
 8000c38:	464a      	mov	r2, r9
 8000c3a:	4639      	mov	r1, r7
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	47b0      	blx	r6
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8000c40:	2801      	cmp	r0, #1
 8000c42:	d8eb      	bhi.n	8000c1c <usb_control_request_dispatch+0x34>

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8000c44:	b003      	add	sp, #12
 8000c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4a:	bf00      	nop

08000c4c <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000c4e:	6903      	ldr	r3, [r0, #16]
}

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8000c50:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000c52:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000c54:	798b      	ldrb	r3, [r1, #6]
 8000c56:	79ca      	ldrb	r2, [r1, #7]
}

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8000c58:	460d      	mov	r5, r1
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000c5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c5e:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8000c60:	f7ff ffc2 	bl	8000be8 <usb_control_request_dispatch>
 8000c64:	b1f0      	cbz	r0, 8000ca4 <usb_control_setup_read+0x58>
		if (req->wLength) {
 8000c66:	88eb      	ldrh	r3, [r5, #6]
 8000c68:	b19b      	cbz	r3, 8000c92 <usb_control_setup_read+0x46>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000c6a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8000c6c:	6821      	ldr	r1, [r4, #0]
 * @param ep_size
 * @return
 */
static bool needs_zlp(uint16_t len, uint16_t wLength, uint8_t ep_size)
{
	if (len < wLength) {
 8000c6e:	4293      	cmp	r3, r2
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (req->wLength) {
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000c70:	79c9      	ldrb	r1, [r1, #7]
 * @param ep_size
 * @return
 */
static bool needs_zlp(uint16_t len, uint16_t wLength, uint8_t ep_size)
{
	if (len < wLength) {
 8000c72:	d920      	bls.n	8000cb6 <usb_control_setup_read+0x6a>
		if (len && (len % ep_size == 0)) {
 8000c74:	b132      	cbz	r2, 8000c84 <usb_control_setup_read+0x38>
 8000c76:	fbb2 f3f1 	udiv	r3, r2, r1
 8000c7a:	fb01 2213 	mls	r2, r1, r3, r2
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	0952      	lsrs	r2, r2, #5
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (req->wLength) {
			usbd_dev->control_state.needs_zlp =
 8000c84:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
				needs_zlp(usbd_dev->control_state.ctrl_len,
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000c88:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8000c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000c8e:	f7ff bf81 	b.w	8000b94 <usb_control_send_chunk>
		} else {
			/* Go to status stage if handled. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000c92:	461a      	mov	r2, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff60 	bl	8000b5c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	4606      	mov	r6, r0
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff ff66 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000cb0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
	if (len < wLength) {
		if (len && (len % ep_size == 0)) {
			return true;
		}
	}
	return false;
 8000cb6:	2200      	movs	r2, #0
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000cb8:	4620      	mov	r0, r4
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (req->wLength) {
			usbd_dev->control_state.needs_zlp =
 8000cba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8000cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000cc2:	f7ff bf67 	b.w	8000b94 <usb_control_send_chunk>
 8000cc6:	bf00      	nop

08000cc8 <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000cca:	6802      	ldr	r2, [r0, #0]
 8000ccc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000cce:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8000cd0:	79d2      	ldrb	r2, [r2, #7]
 8000cd2:	1ae4      	subs	r4, r4, r3
 8000cd4:	4294      	cmp	r4, r2
 8000cd6:	bfa8      	it	ge
 8000cd8:	4614      	movge	r4, r2
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
				       usbd_dev->control_state.ctrl_buf +
 8000cda:	6b82      	ldr	r2, [r0, #56]	; 0x38
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000cdc:	b2a6      	uxth	r6, r4
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000cde:	441a      	add	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4633      	mov	r3, r6
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8000ce4:	4605      	mov	r5, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000ce6:	f7ff ff41 	bl	8000b6c <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_buf +
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 8000cea:	4286      	cmp	r6, r0
 8000cec:	d104      	bne.n	8000cf8 <usb_control_recv_chunk+0x30>
		stall_transaction(usbd_dev);
		return -1;
	}

	usbd_dev->control_state.ctrl_len += size;
 8000cee:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8000cf0:	b2a0      	uxth	r0, r4
 8000cf2:	441e      	add	r6, r3
 8000cf4:	87ae      	strh	r6, [r5, #60]	; 0x3c

	return packetsize;
}
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f7ff ff3d 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d08:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	}

	usbd_dev->control_state.ctrl_len += size;

	return packetsize;
}
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
 8000d0e:	bf00      	nop

08000d10 <usbd_register_control_callback>:

/* Register application callback function for handling USB control requests. */
int usbd_register_control_callback(usbd_device *usbd_dev, uint8_t type,
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
 8000d10:	b470      	push	{r4, r5, r6}
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000d12:	2500      	movs	r5, #0
 8000d14:	f100 0648 	add.w	r6, r0, #72	; 0x48
		if (usbd_dev->user_control_callback[i].cb) {
 8000d18:	f856 4035 	ldr.w	r4, [r6, r5, lsl #3]
 8000d1c:	b13c      	cbz	r4, 8000d2e <usbd_register_control_callback+0x1e>
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000d1e:	3501      	adds	r5, #1
 8000d20:	2d04      	cmp	r5, #4
 8000d22:	d1f9      	bne.n	8000d18 <usbd_register_control_callback+0x8>
		usbd_dev->user_control_callback[i].type_mask = type_mask;
		usbd_dev->user_control_callback[i].cb = callback;
		return 0;
	}

	return -1;
 8000d24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8000d28:	4620      	mov	r0, r4
 8000d2a:	bc70      	pop	{r4, r5, r6}
 8000d2c:	4770      	bx	lr
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (usbd_dev->user_control_callback[i].cb) {
			continue;
		}

		usbd_dev->user_control_callback[i].type = type;
 8000d2e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8000d32:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8000d36:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 8000d3a:	6483      	str	r3, [r0, #72]	; 0x48
		return 0;
	}

	return -1;
}
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	bc70      	pop	{r4, r5, r6}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8000d44:	b538      	push	{r3, r4, r5, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8000d46:	2500      	movs	r5, #0

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8000d48:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	2201      	movs	r2, #1
void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8000d4e:	6405      	str	r5, [r0, #64]	; 0x40

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8000d50:	f7ff ff1c 	bl	8000b8c <usbd_ep_nak_set>

	if (req->wLength == 0) {
 8000d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8000d56:	f104 0130 	add.w	r1, r4, #48	; 0x30

	usbd_dev->control_state.complete = NULL;

	usbd_ep_nak_set(usbd_dev, 0, 1);

	if (req->wLength == 0) {
 8000d5a:	b1c3      	cbz	r3, 8000d8e <_usbd_control_setup+0x4a>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8000d5c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	db14      	blt.n	8000d8e <_usbd_control_setup+0x4a>
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8000d64:	8aa2      	ldrh	r2, [r4, #20]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d316      	bcc.n	8000d98 <_usbd_control_setup+0x54>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000d6a:	6921      	ldr	r1, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000d6c:	6822      	ldr	r2, [r4, #0]
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000d6e:	63a1      	str	r1, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 8000d70:	87a5      	strh	r5, [r4, #60]	; 0x3c
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000d72:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.state = DATA_OUT;
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
	}

	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000d74:	4620      	mov	r0, r4
	usbd_dev->control_state.ctrl_len = 0;
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
		usbd_dev->control_state.state = DATA_OUT;
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8000d76:	429a      	cmp	r2, r3
 8000d78:	bf34      	ite	cc
 8000d7a:	2305      	movcc	r3, #5
 8000d7c:	2306      	movcs	r3, #6
	}

	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000d7e:	4629      	mov	r1, r5
 8000d80:	462a      	mov	r2, r5
 8000d82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8000d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usbd_dev->control_state.state = DATA_OUT;
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
	}

	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000d8a:	f7ff beff 	b.w	8000b8c <usbd_ep_nak_set>
	usbd_ep_nak_set(usbd_dev, 0, 1);

	if (req->wLength == 0) {
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8000d8e:	4620      	mov	r0, r4
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8000d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usbd_ep_nak_set(usbd_dev, 0, 1);

	if (req->wLength == 0) {
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8000d94:	f7ff bf5a 	b.w	8000c4c <usb_control_setup_read>
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff feed 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000da2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8000da6:	bd38      	pop	{r3, r4, r5, pc}

08000da8 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8000da8:	b538      	push	{r3, r4, r5, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8000daa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
		usb_control_setup_write(usbd_dev, req);
	}
}

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8000dae:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8000db0:	2b06      	cmp	r3, #6
 8000db2:	d00b      	beq.n	8000dcc <_usbd_control_out+0x24>
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d02d      	beq.n	8000e14 <_usbd_control_out+0x6c>
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d01c      	beq.n	8000df6 <_usbd_control_out+0x4e>
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f7ff fedc 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
					usbd_dev->desc->bMaxPacketSize0) {
			usbd_dev->control_state.state = LAST_DATA_OUT;
		}
		break;
	case LAST_DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000dcc:	f7ff ff7c 	bl	8000cc8 <usb_control_recv_chunk>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	dbfa      	blt.n	8000dca <_usbd_control_out+0x22>
		}
		/*
		 * We have now received the full data payload.
		 * Invoke callback to process.
		 */
		if (usb_control_request_dispatch(usbd_dev,
 8000dd4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ff05 	bl	8000be8 <usb_control_request_dispatch>
 8000dde:	4605      	mov	r5, r0
 8000de0:	b348      	cbz	r0, 8000e36 <_usbd_control_out+0x8e>
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000de2:	2300      	movs	r3, #0
 8000de4:	4620      	mov	r0, r4
 8000de6:	461a      	mov	r2, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff feb7 	bl	8000b5c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000dee:	2304      	movs	r3, #4
 8000df0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000df6:	f7ff ff67 	bl	8000cc8 <usb_control_recv_chunk>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	dbe5      	blt.n	8000dca <_usbd_control_out+0x22>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
 8000dfe:	6822      	ldr	r2, [r4, #0]
	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8000e00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 8000e02:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
					usbd_dev->desc->bMaxPacketSize0) {
 8000e04:	79d2      	ldrb	r2, [r2, #7]
	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8000e06:	1a5b      	subs	r3, r3, r1
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	dcde      	bgt.n	8000dca <_usbd_control_out+0x22>
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
		} else {
			stall_transaction(usbd_dev);
		}
		break;
	case STATUS_OUT:
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8000e14:	2300      	movs	r3, #0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fea7 	bl	8000b6c <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8000e1e:	2200      	movs	r2, #0
		if (usbd_dev->control_state.complete) {
 8000e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
			stall_transaction(usbd_dev);
		}
		break;
	case STATUS_OUT:
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
		usbd_dev->control_state.state = IDLE;
 8000e22:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8000e26:	b11b      	cbz	r3, 8000e30 <_usbd_control_out+0x88>
			usbd_dev->control_state.complete(usbd_dev,
 8000e28:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	6423      	str	r3, [r4, #64]	; 0x40
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000e36:	4601      	mov	r1, r0
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff fe9e 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000e40:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e44:	bd38      	pop	{r3, r4, r5, pc}
 8000e46:	bf00      	nop

08000e48 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8000e48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
		stall_transaction(usbd_dev);
	}
}

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8000e4c:	b510      	push	{r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8000e4e:	2b03      	cmp	r3, #3
		stall_transaction(usbd_dev);
	}
}

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8000e50:	4604      	mov	r4, r0
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8000e52:	d00b      	beq.n	8000e6c <_usbd_control_in+0x24>
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d016      	beq.n	8000e86 <_usbd_control_in+0x3e>
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d010      	beq.n	8000e7e <_usbd_control_in+0x36>
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f7ff fe8c 	bl	8000b7c <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e6a:	bd10      	pop	{r4, pc}
	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
 8000e6c:	2307      	movs	r3, #7
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000e72:	2200      	movs	r2, #0
	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
 8000e74:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000e78:	4611      	mov	r1, r2
 8000e7a:	f7ff be87 	b.w	8000b8c <usbd_ep_nak_set>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8000e82:	f7ff be87 	b.w	8000b94 <usb_control_send_chunk>
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
		usbd_ep_nak_set(usbd_dev, 0, 0);
		break;
	case STATUS_IN:
		if (usbd_dev->control_state.complete) {
 8000e86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e88:	b113      	cbz	r3, 8000e90 <_usbd_control_in+0x48>
			usbd_dev->control_state.complete(usbd_dev,
 8000e8a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000e8e:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}

		/* Exception: Handle SET ADDRESS function here... */
		if ((req->bmRequestType == 0) &&
 8000e90:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <_usbd_control_in+0x1c>
 8000e98:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d1e1      	bne.n	8000e64 <_usbd_control_in+0x1c>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8000ea0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8000ea2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000ea6:	b2c9      	uxtb	r1, r1
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4620      	mov	r0, r4
 8000eac:	4798      	blx	r3
		}
		usbd_dev->control_state.state = IDLE;
 8000eae:	e7d9      	b.n	8000e64 <_usbd_control_in+0x1c>

08000eb0 <usb_standard_set_address>:
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8000eb0:	780b      	ldrb	r3, [r1, #0]
 8000eb2:	b98b      	cbnz	r3, 8000ed8 <usb_standard_set_address+0x28>

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 8000eb4:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8000eb6:	884c      	ldrh	r4, [r1, #2]
 8000eb8:	2c7f      	cmp	r4, #127	; 0x7f
 8000eba:	d80b      	bhi.n	8000ed4 <usb_standard_set_address+0x24>

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8000ebc:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return USBD_REQ_NOTSUPP;
	}

	usbd_dev->current_address = req->wValue;
 8000ec0:	7584      	strb	r4, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8000ec2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000ec6:	b14a      	cbz	r2, 8000edc <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8000ec8:	8849      	ldrh	r1, [r1, #2]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	b2c9      	uxtb	r1, r1
 8000ece:	4798      	blx	r3
	}

	return USBD_REQ_HANDLED;
 8000ed0:	2001      	movs	r0, #1
}
 8000ed2:	bd10      	pop	{r4, pc}
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return USBD_REQ_NOTSUPP;
 8000ed4:	4618      	mov	r0, r3
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
}
 8000ed6:	bd10      	pop	{r4, pc}
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return USBD_REQ_NOTSUPP;
 8000ed8:	2000      	movs	r0, #0
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
}
 8000eda:	4770      	bx	lr
	 */
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
 8000edc:	2001      	movs	r0, #1
}
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 8000ee2:	884f      	ldrh	r7, [r1, #2]
 8000ee4:	b9ef      	cbnz	r7, 8000f22 <usb_standard_set_configuration+0x42>
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
		}
	}

	usbd_dev->current_config = found_index + 1;
 8000ee6:	75c7      	strb	r7, [r0, #23]
			}
		}
	}

	/* Reset all endpoints. */
	usbd_dev->driver->ep_reset(usbd_dev);
 8000ee8:	4604      	mov	r4, r0
 8000eea:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000eee:	460f      	mov	r7, r1
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4798      	blx	r3

	if (usbd_dev->user_callback_set_config[0]) {
 8000ef4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8000ef8:	b18b      	cbz	r3, 8000f1e <usb_standard_set_configuration+0x3e>
		/*
		 * Flush control callbacks. These will be reregistered
		 * by the user handler.
		 */
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
			usbd_dev->user_control_callback[i].cb = NULL;
 8000efa:	2200      	movs	r2, #0
 8000efc:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
 8000f00:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f02:	6522      	str	r2, [r4, #80]	; 0x50
 8000f04:	65a2      	str	r2, [r4, #88]	; 0x58
 8000f06:	6622      	str	r2, [r4, #96]	; 0x60
 8000f08:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
		}

		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
			if (usbd_dev->user_callback_set_config[i]) {
 8000f0c:	b113      	cbz	r3, 8000f14 <usb_standard_set_configuration+0x34>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8000f0e:	8879      	ldrh	r1, [r7, #2]
 8000f10:	4620      	mov	r0, r4
 8000f12:	4798      	blx	r3
		 */
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
			usbd_dev->user_control_callback[i].cb = NULL;
		}

		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000f14:	42ae      	cmp	r6, r5
 8000f16:	d002      	beq.n	8000f1e <usb_standard_set_configuration+0x3e>
 8000f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f1c:	e7f6      	b.n	8000f0c <usb_standard_set_configuration+0x2c>
								req->wValue);
			}
		}
	}

	return USBD_REQ_HANDLED;
 8000f1e:	2001      	movs	r0, #1
}
 8000f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000f22:	6803      	ldr	r3, [r0, #0]
 8000f24:	7c5e      	ldrb	r6, [r3, #17]
 8000f26:	b16e      	cbz	r6, 8000f44 <usb_standard_set_configuration+0x64>
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8000f28:	6844      	ldr	r4, [r0, #4]
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
			if (req->wValue
 8000f2a:	7963      	ldrb	r3, [r4, #5]
 8000f2c:	42bb      	cmp	r3, r7
 8000f2e:	d024      	beq.n	8000f7a <usb_standard_set_configuration+0x9a>
 8000f30:	4622      	mov	r2, r4
	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	e003      	b.n	8000f3e <usb_standard_set_configuration+0x5e>
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8000f36:	7c95      	ldrb	r5, [r2, #18]
 8000f38:	320d      	adds	r2, #13
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
			if (req->wValue
 8000f3a:	42af      	cmp	r7, r5
 8000f3c:	d004      	beq.n	8000f48 <usb_standard_set_configuration+0x68>
	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000f3e:	3301      	adds	r3, #1
 8000f40:	42b3      	cmp	r3, r6
 8000f42:	d1f8      	bne.n	8000f36 <usb_standard_set_configuration+0x56>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8000f44:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8000f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000f50:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000f54:	3a0d      	subs	r2, #13
 8000f56:	4414      	add	r4, r2
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
		}
	}

	usbd_dev->current_config = found_index + 1;
 8000f58:	75c3      	strb	r3, [r0, #23]

	if (usbd_dev->current_config > 0) {
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];

		/* reset all alternate settings configuration */
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000f5a:	7926      	ldrb	r6, [r4, #4]
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d0c3      	beq.n	8000ee8 <usb_standard_set_configuration+0x8>
 8000f60:	2300      	movs	r3, #0
			if (cfg->interface[i].cur_altsetting) {
				*cfg->interface[i].cur_altsetting = 0;
 8000f62:	461f      	mov	r7, r3
	if (usbd_dev->current_config > 0) {
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];

		/* reset all alternate settings configuration */
		for (i = 0; i < cfg->bNumInterfaces; i++) {
			if (cfg->interface[i].cur_altsetting) {
 8000f64:	f8d4 2009 	ldr.w	r2, [r4, #9]
 8000f68:	011d      	lsls	r5, r3, #4
 8000f6a:	58aa      	ldr	r2, [r5, r2]

	if (usbd_dev->current_config > 0) {
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];

		/* reset all alternate settings configuration */
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000f6c:	3301      	adds	r3, #1
			if (cfg->interface[i].cur_altsetting) {
 8000f6e:	b10a      	cbz	r2, 8000f74 <usb_standard_set_configuration+0x94>
				*cfg->interface[i].cur_altsetting = 0;
 8000f70:	7017      	strb	r7, [r2, #0]
 8000f72:	7926      	ldrb	r6, [r4, #4]

	if (usbd_dev->current_config > 0) {
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];

		/* reset all alternate settings configuration */
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d8f5      	bhi.n	8000f64 <usb_standard_set_configuration+0x84>
 8000f78:	e7b6      	b.n	8000ee8 <usb_standard_set_configuration+0x8>
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
			if (req->wValue
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e7ec      	b.n	8000f58 <usb_standard_set_configuration+0x78>
 8000f7e:	bf00      	nop

08000f80 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	2901      	cmp	r1, #1
		*len = 1;
 8000f86:	bf84      	itt	hi
 8000f88:	2101      	movhi	r1, #1
 8000f8a:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8000f8c:	7dc3      	ldrb	r3, [r0, #23]
 8000f8e:	b153      	cbz	r3, 8000fa6 <usb_standard_get_configuration+0x26>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8000f90:	6841      	ldr	r1, [r0, #4]
 8000f92:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8000f96:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8000fa0:	2001      	movs	r0, #1
		*len = 1;
	}
	if (usbd_dev->current_config > 0) {
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8000fa2:	7013      	strb	r3, [r2, #0]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8000fa4:	4770      	bx	lr
	if (usbd_dev->current_config > 0) {
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
	} else {
		(*buf)[0] = 0;
 8000fa6:	7013      	strb	r3, [r2, #0]
	}

	return USBD_REQ_HANDLED;
}
 8000fa8:	2001      	movs	r0, #1
 8000faa:	4770      	bx	lr

08000fac <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8000fac:	b430      	push	{r4, r5}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000fae:	7dc4      	ldrb	r4, [r0, #23]
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
 8000fb0:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000fb2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000fb6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000fba:	3c0d      	subs	r4, #13
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
 8000fbc:	4404      	add	r4, r0
		&usbd_dev->config[usbd_dev->current_config - 1];

	if (req->wIndex >= cfx->bNumInterfaces) {
 8000fbe:	7920      	ldrb	r0, [r4, #4]
 8000fc0:	888d      	ldrh	r5, [r1, #4]
 8000fc2:	4285      	cmp	r5, r0
 8000fc4:	d20d      	bcs.n	8000fe2 <usb_standard_get_interface+0x36>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8000fca:	888b      	ldrh	r3, [r1, #4]
 8000fcc:	f8d4 1009 	ldr.w	r1, [r4, #9]
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	585b      	ldr	r3, [r3, r1]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8000fd4:	b103      	cbz	r3, 8000fd8 <usb_standard_get_interface+0x2c>
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	6812      	ldr	r2, [r2, #0]

	return USBD_REQ_HANDLED;
 8000fda:	2001      	movs	r0, #1
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8000fdc:	7013      	strb	r3, [r2, #0]

	return USBD_REQ_HANDLED;
}
 8000fde:	bc30      	pop	{r4, r5}
 8000fe0:	4770      	bx	lr
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];

	if (req->wIndex >= cfx->bNumInterfaces) {
		return USBD_REQ_NOTSUPP;
 8000fe2:	2000      	movs	r0, #0
	*len = 1;
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;

	return USBD_REQ_HANDLED;
}
 8000fe4:	bc30      	pop	{r4, r5}
 8000fe6:	4770      	bx	lr

08000fe8 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8000fe8:	8819      	ldrh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8000fea:	2001      	movs	r0, #1
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8000fec:	2902      	cmp	r1, #2
		*len = 2;
 8000fee:	bf84      	itt	hi
 8000ff0:	2102      	movhi	r1, #2
 8000ff2:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	6811      	ldr	r1, [r2, #0]
 8000ff8:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	7053      	strb	r3, [r2, #1]

	return USBD_REQ_HANDLED;
}
 8000ffe:	4770      	bx	lr

08001000 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8001000:	b538      	push	{r3, r4, r5, lr}
	(void)req;

	if (*len > 2) {
 8001002:	881d      	ldrh	r5, [r3, #0]

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8001004:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 8001006:	2d02      	cmp	r5, #2
		*len = 2;
 8001008:	bf84      	itt	hi
 800100a:	2202      	movhi	r2, #2
 800100c:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800100e:	8889      	ldrh	r1, [r1, #4]
 8001010:	b2c9      	uxtb	r1, r1
 8001012:	f7ff fdb7 	bl	8000b84 <usbd_ep_stall_get>
 8001016:	1c01      	adds	r1, r0, #0
 8001018:	bf18      	it	ne
 800101a:	2101      	movne	r1, #1
	(*buf)[1] = 0;
 800101c:	2200      	movs	r2, #0
	(void)req;

	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 800101e:	6823      	ldr	r3, [r4, #0]
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8001020:	2001      	movs	r0, #1
	(void)req;

	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001022:	7019      	strb	r1, [r3, #0]
	(*buf)[1] = 0;
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	705a      	strb	r2, [r3, #1]

	return USBD_REQ_HANDLED;
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	bf00      	nop

0800102c <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 800102c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 800102e:	8889      	ldrh	r1, [r1, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	b2c9      	uxtb	r1, r1
 8001034:	f7ff fda2 	bl	8000b7c <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001038:	2001      	movs	r0, #1
 800103a:	bd08      	pop	{r3, pc}

0800103c <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 800103c:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 800103e:	8889      	ldrh	r1, [r1, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	b2c9      	uxtb	r1, r1
 8001044:	f7ff fd9a 	bl	8000b7c <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001048:	2001      	movs	r0, #1
 800104a:	bd08      	pop	{r3, pc}

0800104c <usb_standard_set_interface>:

static enum usbd_request_return_codes
usb_standard_set_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 800104e:	7dc2      	ldrb	r2, [r0, #23]
static enum usbd_request_return_codes
usb_standard_set_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
	const struct usb_config_descriptor *cfx =
 8001050:	6844      	ldr	r4, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001052:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8001056:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800105a:	3a0d      	subs	r2, #13
static enum usbd_request_return_codes
usb_standard_set_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
	const struct usb_config_descriptor *cfx =
 800105c:	4422      	add	r2, r4
		&usbd_dev->config[usbd_dev->current_config - 1];
	const struct usb_interface *iface;

	(void)buf;

	if (req->wIndex >= cfx->bNumInterfaces) {
 800105e:	7915      	ldrb	r5, [r2, #4]
 8001060:	888c      	ldrh	r4, [r1, #4]
 8001062:	42a5      	cmp	r5, r4
 8001064:	d915      	bls.n	8001092 <usb_standard_set_interface+0x46>
		return USBD_REQ_NOTSUPP;
	}

	iface = &cfx->interface[req->wIndex];
 8001066:	f8d2 2009 	ldr.w	r2, [r2, #9]
 800106a:	0124      	lsls	r4, r4, #4
 800106c:	1915      	adds	r5, r2, r4

	if (req->wValue >= iface->num_altsetting) {
 800106e:	792e      	ldrb	r6, [r5, #4]
 8001070:	884d      	ldrh	r5, [r1, #2]
 8001072:	42ae      	cmp	r6, r5
 8001074:	d90d      	bls.n	8001092 <usb_standard_set_interface+0x46>
		return USBD_REQ_NOTSUPP;
	}

	if (iface->cur_altsetting) {
 8001076:	5912      	ldr	r2, [r2, r4]
 8001078:	b16a      	cbz	r2, 8001096 <usb_standard_set_interface+0x4a>
		*iface->cur_altsetting = req->wValue;
 800107a:	7015      	strb	r5, [r2, #0]
 800107c:	461c      	mov	r4, r3
	} else if (req->wValue > 0) {
		return USBD_REQ_NOTSUPP;
	}

	if (usbd_dev->user_callback_set_altsetting) {
 800107e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001082:	b113      	cbz	r3, 800108a <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001084:	884a      	ldrh	r2, [r1, #2]
 8001086:	8889      	ldrh	r1, [r1, #4]
 8001088:	4798      	blx	r3
							       req->wIndex,
							       req->wValue);
	}

	*len = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	2001      	movs	r0, #1
 800108e:	8023      	strh	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8001090:	bd70      	pop	{r4, r5, r6, pc}
	const struct usb_interface *iface;

	(void)buf;

	if (req->wIndex >= cfx->bNumInterfaces) {
		return USBD_REQ_NOTSUPP;
 8001092:	2000      	movs	r0, #0
	}

	*len = 0;

	return USBD_REQ_HANDLED;
}
 8001094:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
	}

	if (iface->cur_altsetting) {
		*iface->cur_altsetting = req->wValue;
	} else if (req->wValue > 0) {
 8001096:	2d00      	cmp	r5, #0
 8001098:	d0f0      	beq.n	800107c <usb_standard_set_interface+0x30>
	const struct usb_interface *iface;

	(void)buf;

	if (req->wIndex >= cfx->bNumInterfaces) {
		return USBD_REQ_NOTSUPP;
 800109a:	4610      	mov	r0, r2
	}

	*len = 0;

	return USBD_REQ_HANDLED;
}
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	bf00      	nop

080010a0 <usb_standard_get_descriptor>:

static enum usbd_request_return_codes
usb_standard_get_descriptor(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 80010a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);
 80010a4:	884d      	ldrh	r5, [r1, #2]

static enum usbd_request_return_codes
usb_standard_get_descriptor(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 80010a6:	b089      	sub	sp, #36	; 0x24
	return total;
}

static int usb_descriptor_type(uint16_t wValue)
{
	return wValue >> 8;
 80010a8:	0a2c      	lsrs	r4, r5, #8
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 80010aa:	2c02      	cmp	r4, #2

static enum usbd_request_return_codes
usb_standard_get_descriptor(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 80010ac:	9306      	str	r3, [sp, #24]
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 80010ae:	d009      	beq.n	80010c4 <usb_standard_get_descriptor+0x24>
 80010b0:	2c03      	cmp	r4, #3
 80010b2:	f000 80fb 	beq.w	80012ac <usb_standard_get_descriptor+0x20c>
 80010b6:	2c01      	cmp	r4, #1
 80010b8:	f000 80eb 	beq.w	8001292 <usb_standard_get_descriptor+0x1f2>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
 80010bc:	2000      	movs	r0, #0
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 80010be:	b009      	add	sp, #36	; 0x24
 80010c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80010c4:	6901      	ldr	r1, [r0, #16]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80010c6:	b2ed      	uxtb	r5, r5
 80010c8:	6847      	ldr	r7, [r0, #4]
 80010ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80010ce:	6011      	str	r1, [r2, #0]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80010d0:	9a06      	ldr	r2, [sp, #24]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80010d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80010d6:	5d7e      	ldrb	r6, [r7, r5]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80010d8:	8814      	ldrh	r4, [r2, #0]
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80010da:	460b      	mov	r3, r1
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80010dc:	42a6      	cmp	r6, r4
 80010de:	bf28      	it	cs
 80010e0:	4626      	movcs	r6, r4

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80010e2:	197a      	adds	r2, r7, r5
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80010e4:	4690      	mov	r8, r2
 80010e6:	46b2      	mov	sl, r6
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 80010e8:	9107      	str	r1, [sp, #28]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 80010ea:	9201      	str	r2, [sp, #4]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 80010ec:	4611      	mov	r1, r2
 80010ee:	4632      	mov	r2, r6
 80010f0:	461e      	mov	r6, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 ff9c 	bl	8003030 <memcpy>
	len -= count;
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80010f8:	f898 3004 	ldrb.w	r3, [r8, #4]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
	len -= count;
 80010fc:	eba4 040a 	sub.w	r4, r4, sl
 8001100:	b2a4      	uxth	r4, r4
	total += count;
	totallen += cfg->bLength;
 8001102:	5d7f      	ldrb	r7, [r7, r5]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
 8001104:	eb06 0b0a 	add.w	fp, r6, sl
	len -= count;
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80b9 	beq.w	8001280 <usb_standard_get_descriptor+0x1e0>
 800110e:	2300      	movs	r3, #0
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	f8d8 2009 	ldr.w	r2, [r8, #9]
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
 8001116:	9b02      	ldr	r3, [sp, #8]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	9303      	str	r3, [sp, #12]
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	689d      	ldr	r5, [r3, #8]
 8001120:	b1bd      	cbz	r5, 8001152 <usb_standard_get_descriptor+0xb2>
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001122:	782e      	ldrb	r6, [r5, #0]
 8001124:	4629      	mov	r1, r5
 8001126:	42a6      	cmp	r6, r4
 8001128:	bf28      	it	cs
 800112a:	4626      	movcs	r6, r4
 800112c:	4658      	mov	r0, fp
 800112e:	4632      	mov	r2, r6
 8001130:	f001 ff7e 	bl	8003030 <memcpy>
			buf += count;
			len -= count;
			total += count;
			totallen += assoc->bLength;
 8001134:	782b      	ldrb	r3, [r5, #0]
 8001136:	9a01      	ldr	r2, [sp, #4]
 8001138:	441f      	add	r7, r3
 800113a:	f8d2 2009 	ldr.w	r2, [r2, #9]
 800113e:	9b03      	ldr	r3, [sp, #12]
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
			len -= count;
 8001140:	1ba4      	subs	r4, r4, r6
			total += count;
 8001142:	eb06 010a 	add.w	r1, r6, sl
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
			len -= count;
 8001146:	b2a4      	uxth	r4, r4
			total += count;
 8001148:	fa1f fa81 	uxth.w	sl, r1
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
 800114c:	44b3      	add	fp, r6
			len -= count;
			total += count;
			totallen += assoc->bLength;
 800114e:	b2bf      	uxth	r7, r7
 8001150:	18d3      	adds	r3, r2, r3
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001152:	7919      	ldrb	r1, [r3, #4]
 8001154:	2900      	cmp	r1, #0
 8001156:	f000 808a 	beq.w	800126e <usb_standard_get_descriptor+0x1ce>
 800115a:	2200      	movs	r2, #0
 800115c:	9200      	str	r2, [sp, #0]
			const struct usb_interface_descriptor *iface =
 800115e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8001162:	9b00      	ldr	r3, [sp, #0]
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001164:	4658      	mov	r0, fp
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001166:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800116a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 800116e:	f819 8006 	ldrb.w	r8, [r9, r6]
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001172:	eb09 0506 	add.w	r5, r9, r6
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001176:	45a0      	cmp	r8, r4
 8001178:	bf28      	it	cs
 800117a:	46a0      	movcs	r8, r4
 800117c:	4629      	mov	r1, r5
 800117e:	4642      	mov	r2, r8
 8001180:	f001 ff56 	bl	8003030 <memcpy>
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
 8001184:	f819 3006 	ldrb.w	r3, [r9, r6]
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
 8001188:	f8d5 100d 	ldr.w	r1, [r5, #13]
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
 800118c:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 8001190:	44c2      	add	sl, r8
			totallen += iface->bLength;
 8001192:	441f      	add	r7, r3
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
 8001194:	b2a4      	uxth	r4, r4
			total += count;
 8001196:	fa1f fa8a 	uxth.w	sl, sl
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
 800119a:	44c3      	add	fp, r8
			len -= count;
			total += count;
			totallen += iface->bLength;
 800119c:	b2bf      	uxth	r7, r7
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
 800119e:	b1a9      	cbz	r1, 80011cc <usb_standard_get_descriptor+0x12c>
				memcpy(buf, iface->extra,
				       count = MIN(len, iface->extralen));
 80011a0:	f8d5 6011 	ldr.w	r6, [r5, #17]
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
 80011a4:	4658      	mov	r0, fp
				       count = MIN(len, iface->extralen));
 80011a6:	42a6      	cmp	r6, r4
 80011a8:	bfa8      	it	ge
 80011aa:	4626      	movge	r6, r4
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
 80011ac:	fa1f f886 	uxth.w	r8, r6
				       count = MIN(len, iface->extralen));
 80011b0:	4646      	mov	r6, r8
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
 80011b2:	4642      	mov	r2, r8
 80011b4:	f001 ff3c 	bl	8003030 <memcpy>
				       count = MIN(len, iface->extralen));
				buf += count;
				len -= count;
				total += count;
				totallen += iface->extralen;
 80011b8:	f8d5 3011 	ldr.w	r3, [r5, #17]
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
				       count = MIN(len, iface->extralen));
				buf += count;
				len -= count;
 80011bc:	1ba4      	subs	r4, r4, r6
				total += count;
 80011be:	44c2      	add	sl, r8
				totallen += iface->extralen;
 80011c0:	441f      	add	r7, r3
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
				       count = MIN(len, iface->extralen));
				buf += count;
				len -= count;
 80011c2:	b2a4      	uxth	r4, r4
				total += count;
 80011c4:	fa1f fa8a 	uxth.w	sl, sl
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			if (iface->extra) {
				memcpy(buf, iface->extra,
				       count = MIN(len, iface->extralen));
				buf += count;
 80011c8:	44c3      	add	fp, r8
				len -= count;
				total += count;
				totallen += iface->extralen;
 80011ca:	b2bf      	uxth	r7, r7
			}
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80011cc:	792b      	ldrb	r3, [r5, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d040      	beq.n	8001254 <usb_standard_get_descriptor+0x1b4>
 80011d2:	f04f 0800 	mov.w	r8, #0
 80011d6:	9504      	str	r5, [sp, #16]
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
 80011d8:	9b04      	ldr	r3, [sp, #16]
				total += count;
				totallen += iface->extralen;
			}
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
 80011da:	ebc8 1908 	rsb	r9, r8, r8, lsl #4
				    &iface->endpoint[k];
 80011de:	f8d3 3009 	ldr.w	r3, [r3, #9]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80011e2:	4658      	mov	r0, fp
 80011e4:	f813 5009 	ldrb.w	r5, [r3, r9]
				total += count;
				totallen += iface->extralen;
			}
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
 80011e8:	eb03 0609 	add.w	r6, r3, r9
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80011ec:	42a5      	cmp	r5, r4
 80011ee:	bf28      	it	cs
 80011f0:	4625      	movcs	r5, r4
 80011f2:	4631      	mov	r1, r6
 80011f4:	462a      	mov	r2, r5
				total += count;
				totallen += iface->extralen;
			}
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
 80011f6:	9305      	str	r3, [sp, #20]
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80011f8:	f001 ff1a 	bl	8003030 <memcpy>
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 80011fc:	9b05      	ldr	r3, [sp, #20]
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
 80011fe:	f8d6 1007 	ldr.w	r1, [r6, #7]
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 8001202:	f813 3009 	ldrb.w	r3, [r3, r9]
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
 8001206:	1b64      	subs	r4, r4, r5
				total += count;
 8001208:	44aa      	add	sl, r5
				totallen += ep->bLength;
 800120a:	441f      	add	r7, r3
 800120c:	f108 0801 	add.w	r8, r8, #1
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
				len -= count;
 8001210:	b2a4      	uxth	r4, r4
				total += count;
 8001212:	fa1f fa8a 	uxth.w	sl, sl
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
 8001216:	44ab      	add	fp, r5
				len -= count;
				total += count;
				totallen += ep->bLength;
 8001218:	b2bf      	uxth	r7, r7
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
 800121a:	b1a9      	cbz	r1, 8001248 <usb_standard_get_descriptor+0x1a8>
					memcpy(buf, ep->extra,
					       count = MIN(len, ep->extralen));
 800121c:	f8d6 500b 	ldr.w	r5, [r6, #11]
				len -= count;
				total += count;
				totallen += ep->bLength;
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
 8001220:	4658      	mov	r0, fp
					       count = MIN(len, ep->extralen));
 8001222:	42a5      	cmp	r5, r4
 8001224:	bfa8      	it	ge
 8001226:	4625      	movge	r5, r4
				len -= count;
				total += count;
				totallen += ep->bLength;
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
 8001228:	fa1f f985 	uxth.w	r9, r5
					       count = MIN(len, ep->extralen));
 800122c:	464d      	mov	r5, r9
				len -= count;
				total += count;
				totallen += ep->bLength;
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
 800122e:	464a      	mov	r2, r9
 8001230:	f001 fefe 	bl	8003030 <memcpy>
					       count = MIN(len, ep->extralen));
					buf += count;
					len -= count;
					total += count;
					totallen += ep->extralen;
 8001234:	f8d6 300b 	ldr.w	r3, [r6, #11]
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
					       count = MIN(len, ep->extralen));
					buf += count;
					len -= count;
 8001238:	1b64      	subs	r4, r4, r5
					total += count;
 800123a:	44ca      	add	sl, r9
					totallen += ep->extralen;
 800123c:	441f      	add	r7, r3
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
					       count = MIN(len, ep->extralen));
					buf += count;
					len -= count;
 800123e:	b2a4      	uxth	r4, r4
					total += count;
 8001240:	fa1f fa8a 	uxth.w	sl, sl
				totallen += ep->bLength;
				/* Copy extra bytes (class specific). */
				if (ep->extra) {
					memcpy(buf, ep->extra,
					       count = MIN(len, ep->extralen));
					buf += count;
 8001244:	44cb      	add	fp, r9
					len -= count;
					total += count;
					totallen += ep->extralen;
 8001246:	b2bf      	uxth	r7, r7
				len -= count;
				total += count;
				totallen += iface->extralen;
			}
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001248:	9b04      	ldr	r3, [sp, #16]
 800124a:	791a      	ldrb	r2, [r3, #4]
 800124c:	fa1f f388 	uxth.w	r3, r8
 8001250:	429a      	cmp	r2, r3
 8001252:	d8c1      	bhi.n	80011d8 <usb_standard_get_descriptor+0x138>
			len -= count;
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001254:	9b01      	ldr	r3, [sp, #4]
 8001256:	9900      	ldr	r1, [sp, #0]
 8001258:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	3101      	adds	r1, #1
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	7918      	ldrb	r0, [r3, #4]
 8001264:	9100      	str	r1, [sp, #0]
 8001266:	b289      	uxth	r1, r1
 8001268:	4288      	cmp	r0, r1
 800126a:	f63f af78 	bhi.w	800115e <usb_standard_get_descriptor+0xbe>
 800126e:	9b02      	ldr	r3, [sp, #8]
	len -= count;
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001270:	9901      	ldr	r1, [sp, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	7909      	ldrb	r1, [r1, #4]
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4299      	cmp	r1, r3
 800127c:	f63f af4b 	bhi.w	8001116 <usb_standard_get_descriptor+0x76>
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
		return USBD_REQ_HANDLED;
 8001280:	2001      	movs	r0, #1
		}
	}

	/* Fill in wTotalLength.
	 * Note that tmpbuf is sometimes not halfword-aligned */
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8001282:	9b07      	ldr	r3, [sp, #28]
 8001284:	805f      	strh	r7, [r3, #2]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001286:	9b06      	ldr	r3, [sp, #24]
 8001288:	f8a3 a000 	strh.w	sl, [r3]
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 800128c:	b009      	add	sp, #36	; 0x24
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
 8001292:	6801      	ldr	r1, [r0, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001294:	881d      	ldrh	r5, [r3, #0]

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
 8001296:	6011      	str	r1, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001298:	461e      	mov	r6, r3
 800129a:	780b      	ldrb	r3, [r1, #0]
		return USBD_REQ_HANDLED;
 800129c:	4620      	mov	r0, r4
	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
 800129e:	42ab      	cmp	r3, r5
 80012a0:	bf28      	it	cs
 80012a2:	462b      	movcs	r3, r5
 80012a4:	8033      	strh	r3, [r6, #0]
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 80012a6:	b009      	add	sp, #36	; 0x24
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
		return USBD_REQ_HANDLED;
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;

		if (descr_idx == 0) {
 80012ac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
		return USBD_REQ_HANDLED;
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 80012b0:	6906      	ldr	r6, [r0, #16]

		if (descr_idx == 0) {
 80012b2:	d02f      	beq.n	8001314 <usb_standard_get_descriptor+0x274>

			*len = MIN(*len, sd->bLength);
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
 80012b4:	6884      	ldr	r4, [r0, #8]
 80012b6:	9200      	str	r2, [sp, #0]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
		} else {
			array_idx = descr_idx - 1;
 80012b8:	3d01      	subs	r5, #1

			if (!usbd_dev->strings) {
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	f43f aefe 	beq.w	80010bc <usb_standard_get_descriptor+0x1c>
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
			}

			/* Check that string index is in range. */
			if (array_idx >= usbd_dev->num_strings) {
 80012c0:	68c3      	ldr	r3, [r0, #12]
 80012c2:	42ab      	cmp	r3, r5
 80012c4:	f77f aefa 	ble.w	80010bc <usb_standard_get_descriptor+0x1c>
				return USBD_REQ_NOTSUPP;
			}

			/* Strings with Language ID differnet from
			 * USB_LANGID_ENGLISH_US are not supported */
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 80012c8:	f240 4309 	movw	r3, #1033	; 0x409
 80012cc:	8889      	ldrh	r1, [r1, #4]
 80012ce:	4299      	cmp	r1, r3
 80012d0:	f47f aef4 	bne.w	80010bc <usb_standard_get_descriptor+0x1c>
			}

			/* This string is returned as UTF16, hence the
			 * multiplication
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 80012d4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80012d8:	4620      	mov	r0, r4
 80012da:	f001 fec1 	bl	8003060 <strlen>
 80012de:	1c43      	adds	r3, r0, #1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 80012e4:	9d06      	ldr	r5, [sp, #24]
			}

			/* This string is returned as UTF16, hence the
			 * multiplication
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 80012e6:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 80012e8:	8829      	ldrh	r1, [r5, #0]

			for (i = 0; i < (*len / 2) - 1; i++) {
 80012ea:	9a00      	ldr	r2, [sp, #0]
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 80012ec:	428b      	cmp	r3, r1
 80012ee:	bf28      	it	cs
 80012f0:	460b      	movcs	r3, r1

			for (i = 0; i < (*len / 2) - 1; i++) {
 80012f2:	2b03      	cmp	r3, #3
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 80012f4:	802b      	strh	r3, [r5, #0]

			for (i = 0; i < (*len / 2) - 1; i++) {
 80012f6:	d918      	bls.n	800132a <usb_standard_get_descriptor+0x28a>
 80012f8:	2100      	movs	r1, #0
 80012fa:	1e60      	subs	r0, r4, #1
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
 80012fc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
				sd->wData[i] =
 8001300:	eb06 0341 	add.w	r3, r6, r1, lsl #1
 8001304:	805c      	strh	r4, [r3, #2]
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
 8001306:	882b      	ldrh	r3, [r5, #0]
 8001308:	3101      	adds	r1, #1
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	3b01      	subs	r3, #1
 800130e:	428b      	cmp	r3, r1
 8001310:	dcf4      	bgt.n	80012fc <usb_standard_get_descriptor+0x25c>
 8001312:	e00a      	b.n	800132a <usb_standard_get_descriptor+0x28a>
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;

		if (descr_idx == 0) {
			/* Send sane Language ID descriptor... */
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001314:	2304      	movs	r3, #4
 8001316:	2109      	movs	r1, #9
 8001318:	70f3      	strb	r3, [r6, #3]
 800131a:	70b1      	strb	r1, [r6, #2]
			sd->bLength = sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
 800131c:	9906      	ldr	r1, [sp, #24]
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;

		if (descr_idx == 0) {
			/* Send sane Language ID descriptor... */
			sd->wData[0] = USB_LANGID_ENGLISH_US;
			sd->bLength = sizeof(sd->bLength) +
 800131e:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
 8001320:	880b      	ldrh	r3, [r1, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	800b      	strh	r3, [r1, #0]
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
			}
		}

		sd->bDescriptorType = USB_DT_STRING;
 800132a:	2303      	movs	r3, #3
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
 800132c:	2001      	movs	r0, #1
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
			}
		}

		sd->bDescriptorType = USB_DT_STRING;
 800132e:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 8001330:	6016      	str	r6, [r2, #0]

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 8001332:	b009      	add	sp, #36	; 0x24
 8001334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001338 <usb_standard_interface_get_status>:
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	2001      	movs	r0, #1
 800133c:	2902      	cmp	r1, #2
 800133e:	bf84      	itt	hi
 8001340:	2102      	movhi	r1, #2
 8001342:	8019      	strhhi	r1, [r3, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	6811      	ldr	r1, [r2, #0]
 8001348:	700b      	strb	r3, [r1, #0]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	7053      	strb	r3, [r2, #1]
 800134e:	4770      	bx	lr

08001350 <usbd_register_set_config_callback>:
int usbd_register_set_config_callback(usbd_device *usbd_dev,
				       usbd_set_config_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001350:	2200      	movs	r2, #0
#include <libopencm3/usb/usbd.h>
#include "usb_private.h"

int usbd_register_set_config_callback(usbd_device *usbd_dev,
				       usbd_set_config_callback callback)
{
 8001352:	b410      	push	{r4}
 8001354:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
	int i;

	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		if (usbd_dev->user_callback_set_config[i]) {
 8001358:	f854 3b04 	ldr.w	r3, [r4], #4
 800135c:	b163      	cbz	r3, 8001378 <usbd_register_set_config_callback+0x28>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 800135e:	428b      	cmp	r3, r1
int usbd_register_set_config_callback(usbd_device *usbd_dev,
				       usbd_set_config_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001360:	f102 0201 	add.w	r2, r2, #1
		if (usbd_dev->user_callback_set_config[i]) {
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8001364:	d005      	beq.n	8001372 <usbd_register_set_config_callback+0x22>
int usbd_register_set_config_callback(usbd_device *usbd_dev,
				       usbd_set_config_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001366:	2a04      	cmp	r2, #4
 8001368:	d1f6      	bne.n	8001358 <usbd_register_set_config_callback+0x8>

		usbd_dev->user_callback_set_config[i] = callback;
		return 0;
	}

	return -1;
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800136e:	bc10      	pop	{r4}
 8001370:	4770      	bx	lr
	int i;

	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		if (usbd_dev->user_callback_set_config[i]) {
			if (usbd_dev->user_callback_set_config[i] == callback) {
				return 0;
 8001372:	2000      	movs	r0, #0
		usbd_dev->user_callback_set_config[i] = callback;
		return 0;
	}

	return -1;
}
 8001374:	bc10      	pop	{r4}
 8001376:	4770      	bx	lr
				return 0;
			}
			continue;
		}

		usbd_dev->user_callback_set_config[i] = callback;
 8001378:	3232      	adds	r2, #50	; 0x32
 800137a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		return 0;
 800137e:	4618      	mov	r0, r3
 8001380:	e7f8      	b.n	8001374 <usbd_register_set_config_callback+0x24>
 8001382:	bf00      	nop

08001384 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8001384:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001386:	784c      	ldrb	r4, [r1, #1]
 8001388:	2c09      	cmp	r4, #9
 800138a:	d81a      	bhi.n	80013c2 <_usbd_standard_request_device+0x3e>
 800138c:	e8df f004 	tbb	[pc, r4]
 8001390:	1919190d 	.word	0x1919190d
 8001394:	19090519 	.word	0x19090519
 8001398:	1511      	.short	0x1511
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 800139a:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <_usbd_standard_request_device+0x44>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800139c:	46a4      	mov	ip, r4
}
 800139e:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013a0:	4760      	bx	ip
		break;
	case USB_REQ_GET_CONFIGURATION:
		command = usb_standard_get_configuration;
		break;
	case USB_REQ_GET_DESCRIPTOR:
		command = usb_standard_get_descriptor;
 80013a2:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <_usbd_standard_request_device+0x48>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013a4:	46a4      	mov	ip, r4
}
 80013a6:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013a8:	4760      	bx	ip
	case USB_REQ_GET_STATUS:
		/*
		 * GET_STATUS always responds with zero reply.
		 * The application may override this behaviour.
		 */
		command = usb_standard_device_get_status;
 80013aa:	4c09      	ldr	r4, [pc, #36]	; (80013d0 <_usbd_standard_request_device+0x4c>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013ac:	46a4      	mov	ip, r4
}
 80013ae:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013b0:	4760      	bx	ip
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
		break;
	case USB_REQ_GET_CONFIGURATION:
		command = usb_standard_get_configuration;
 80013b2:	4c08      	ldr	r4, [pc, #32]	; (80013d4 <_usbd_standard_request_device+0x50>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013b4:	46a4      	mov	ip, r4
}
 80013b6:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013b8:	4760      	bx	ip
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
 80013ba:	4c07      	ldr	r4, [pc, #28]	; (80013d8 <_usbd_standard_request_device+0x54>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013bc:	46a4      	mov	ip, r4
}
 80013be:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013c0:	4760      	bx	ip
}
 80013c2:	2000      	movs	r0, #0
 80013c4:	bc10      	pop	{r4}
 80013c6:	4770      	bx	lr
 80013c8:	08000eb1 	.word	0x08000eb1
 80013cc:	080010a1 	.word	0x080010a1
 80013d0:	08000fe9 	.word	0x08000fe9
 80013d4:	08000f81 	.word	0x08000f81
 80013d8:	08000ee1 	.word	0x08000ee1

080013dc <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 80013dc:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80013de:	784c      	ldrb	r4, [r1, #1]
 80013e0:	2c01      	cmp	r4, #1
 80013e2:	d008      	beq.n	80013f6 <_usbd_standard_request_endpoint+0x1a>
 80013e4:	b164      	cbz	r4, 8001400 <_usbd_standard_request_endpoint+0x24>
 80013e6:	2c03      	cmp	r4, #3
 80013e8:	d107      	bne.n	80013fa <_usbd_standard_request_endpoint+0x1e>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80013ea:	884c      	ldrh	r4, [r1, #2]
 80013ec:	b92c      	cbnz	r4, 80013fa <_usbd_standard_request_endpoint+0x1e>
			command = usb_standard_endpoint_stall;
 80013ee:	4c08      	ldr	r4, [pc, #32]	; (8001410 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013f0:	46a4      	mov	ip, r4
}
 80013f2:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80013f4:	4760      	bx	ip
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80013f6:	884c      	ldrh	r4, [r1, #2]
 80013f8:	b134      	cbz	r4, 8001408 <_usbd_standard_request_endpoint+0x2c>
	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
}
 80013fa:	2000      	movs	r0, #0
 80013fc:	bc10      	pop	{r4}
 80013fe:	4770      	bx	lr
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
		}
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_endpoint_get_status;
 8001400:	4c04      	ldr	r4, [pc, #16]	; (8001414 <_usbd_standard_request_endpoint+0x38>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001402:	46a4      	mov	ip, r4
}
 8001404:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001406:	4760      	bx	ip
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
 8001408:	4c03      	ldr	r4, [pc, #12]	; (8001418 <_usbd_standard_request_endpoint+0x3c>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800140a:	46a4      	mov	ip, r4
}
 800140c:	bc10      	pop	{r4}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800140e:	4760      	bx	ip
 8001410:	0800102d 	.word	0x0800102d
 8001414:	08001001 	.word	0x08001001
 8001418:	0800103d 	.word	0x0800103d

0800141c <_usbd_standard_request>:
}

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 800141c:	b4f0      	push	{r4, r5, r6, r7}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 800141e:	780c      	ldrb	r4, [r1, #0]
 8001420:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001424:	d106      	bne.n	8001434 <_usbd_standard_request+0x18>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001426:	f004 041f 	and.w	r4, r4, #31
 800142a:	2c01      	cmp	r4, #1
 800142c:	d00b      	beq.n	8001446 <_usbd_standard_request+0x2a>
 800142e:	b13c      	cbz	r4, 8001440 <_usbd_standard_request+0x24>
 8001430:	2c02      	cmp	r4, #2
 8001432:	d002      	beq.n	800143a <_usbd_standard_request+0x1e>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001434:	bcf0      	pop	{r4, r5, r6, r7}
 8001436:	2000      	movs	r0, #0
 8001438:	4770      	bx	lr
 800143a:	bcf0      	pop	{r4, r5, r6, r7}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 800143c:	f7ff bfce 	b.w	80013dc <_usbd_standard_request_endpoint>
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001440:	bcf0      	pop	{r4, r5, r6, r7}
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001442:	f7ff bf9f 	b.w	8001384 <_usbd_standard_request_device>
 8001446:	469c      	mov	ip, r3
{
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001448:	784b      	ldrb	r3, [r1, #1]
 800144a:	460d      	mov	r5, r1
 800144c:	2b0a      	cmp	r3, #10
 800144e:	4606      	mov	r6, r0
 8001450:	4617      	mov	r7, r2
 8001452:	d00d      	beq.n	8001470 <_usbd_standard_request+0x54>
 8001454:	2b0b      	cmp	r3, #11
 8001456:	d009      	beq.n	800146c <_usbd_standard_request+0x50>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1eb      	bne.n	8001434 <_usbd_standard_request+0x18>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 800145c:	4c05      	ldr	r4, [pc, #20]	; (8001474 <_usbd_standard_request+0x58>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800145e:	4663      	mov	r3, ip
 8001460:	463a      	mov	r2, r7
 8001462:	4629      	mov	r1, r5
 8001464:	4630      	mov	r0, r6
 8001466:	46a4      	mov	ip, r4
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001468:	bcf0      	pop	{r4, r5, r6, r7}

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800146a:	4760      	bx	ip
		break;
	case USB_REQ_GET_INTERFACE:
		command = usb_standard_get_interface;
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
 800146c:	4c02      	ldr	r4, [pc, #8]	; (8001478 <_usbd_standard_request+0x5c>)
 800146e:	e7f6      	b.n	800145e <_usbd_standard_request+0x42>
	case USB_REQ_CLEAR_FEATURE:
	case USB_REQ_SET_FEATURE:
		/* not defined */
		break;
	case USB_REQ_GET_INTERFACE:
		command = usb_standard_get_interface;
 8001470:	4c02      	ldr	r4, [pc, #8]	; (800147c <_usbd_standard_request+0x60>)
 8001472:	e7f4      	b.n	800145e <_usbd_standard_request+0x42>
 8001474:	08001339 	.word	0x08001339
 8001478:	0800104d 	.word	0x0800104d
 800147c:	08000fad 	.word	0x08000fad

08001480 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <flash_set_ws+0x10>)
 8001482:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8001484:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8001488:	4318      	orrs	r0, r3
	FLASH_ACR = reg32;
 800148a:	6010      	str	r0, [r2, #0]
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40022000 	.word	0x40022000

08001494 <flash_wait_for_last_operation>:
This loops indefinitely until an operation (write or erase) has completed by
testing the busy flag.
*/

void flash_wait_for_last_operation(void)
{
 8001494:	b508      	push	{r3, lr}
	while ((flash_get_status_flags() & FLASH_SR_BSY) == FLASH_SR_BSY);
 8001496:	f7ff f907 	bl	80006a8 <flash_get_status_flags>
 800149a:	07c3      	lsls	r3, r0, #31
 800149c:	d4fb      	bmi.n	8001496 <flash_wait_for_last_operation+0x2>
}
 800149e:	bd08      	pop	{r3, pc}

080014a0 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <st_usbfs_set_address+0xc>)
 80014a2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80014a6:	6019      	str	r1, [r3, #0]
}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40005c4c 	.word	0x40005c4c

080014b0 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 80014b0:	2a3e      	cmp	r2, #62	; 0x3e
 * @param ep Index of endpoint to configure.
 * @param size Size in bytes of the RX buffer. Legal sizes : {2,4,6...62}; {64,96,128...992}.
 * @returns (uint16) Actual size set
 */
uint16_t st_usbfs_set_ep_rx_bufsize(usbd_device *dev, uint8_t ep, uint32_t size)
{
 80014b2:	b410      	push	{r4}
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 80014b4:	d913      	bls.n	80014de <st_usbfs_set_ep_rx_bufsize+0x2e>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
 80014b6:	3a01      	subs	r2, #1
 80014b8:	f3c2 1244 	ubfx	r2, r2, #5, #5
		realsize = (size + 1) << 5;
 80014bc:	0150      	lsls	r0, r2, #5
 80014be:	3020      	adds	r0, #32
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 80014c0:	f042 0220 	orr.w	r2, r2, #32
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <st_usbfs_set_ep_rx_bufsize+0x3c>)
 80014c6:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <st_usbfs_set_ep_rx_bufsize+0x40>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0292      	lsls	r2, r2, #10
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	441c      	add	r4, r3
 80014d6:	b292      	uxth	r2, r2
 80014d8:	6022      	str	r2, [r4, #0]
	return realsize;
}
 80014da:	bc10      	pop	{r4}
 80014dc:	4770      	bx	lr
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
	} else {
		/* round up and div by 2 */
		size = (size + 1) >> 1;
 80014de:	3201      	adds	r2, #1
		realsize = size << 1;
 80014e0:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80014e4:	0050      	lsls	r0, r2, #1
 80014e6:	b280      	uxth	r0, r0
 80014e8:	e7ec      	b.n	80014c4 <st_usbfs_set_ep_rx_bufsize+0x14>
 80014ea:	bf00      	nop
 80014ec:	40005c50 	.word	0x40005c50
 80014f0:	4000600c 	.word	0x4000600c

080014f4 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 80014f6:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 80014fa:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 80014fe:	00b4      	lsls	r4, r6, #2
 8001500:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001504:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001508:	6825      	ldr	r5, [r4, #0]

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 800150a:	b083      	sub	sp, #12
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 800150c:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001510:	f10d 0c08 	add.w	ip, sp, #8
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001514:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001518:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 800151c:	4335      	orrs	r5, r6
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 800151e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001608 <st_usbfs_ep_setup+0x114>
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001522:	b2ad      	uxth	r5, r5
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 8001524:	e9cd c700 	strd	ip, r7, [sp]
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001528:	6025      	str	r5, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 800152a:	6825      	ldr	r5, [r4, #0]
 800152c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001530:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8001534:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8001538:	4315      	orrs	r5, r2
 800153a:	b249      	sxtb	r1, r1
 800153c:	b2ad      	uxth	r5, r5

	if (dir || (addr == 0)) {
 800153e:	2900      	cmp	r1, #0
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001540:	6025      	str	r5, [r4, #0]

	if (dir || (addr == 0)) {
 8001542:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8001546:	f8b0 c018 	ldrh.w	ip, [r0, #24]

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 800154a:	9f08      	ldr	r7, [sp, #32]

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
	USB_SET_EP_TYPE(addr, typelookup[type]);

	if (dir || (addr == 0)) {
 800154c:	db2d      	blt.n	80015aa <st_usbfs_ep_setup+0xb6>
 800154e:	b366      	cbz	r6, 80015aa <st_usbfs_ep_setup+0xb6>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8001550:	461a      	mov	r2, r3
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <st_usbfs_ep_setup+0x110>)
 8001554:	4605      	mov	r5, r0
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800155c:	b289      	uxth	r1, r1
 800155e:	448e      	add	lr, r1
 8001560:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001564:	4473      	add	r3, lr
 8001566:	f8c3 c000 	str.w	ip, [r3]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 800156a:	4631      	mov	r1, r6
 800156c:	f7ff ffa0 	bl	80014b0 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001570:	b127      	cbz	r7, 800157c <st_usbfs_ep_setup+0x88>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001572:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8001576:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800157a:	66f7      	str	r7, [r6, #108]	; 0x6c
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 800157c:	f64c 718f 	movw	r1, #53135	; 0xcf8f
 8001580:	6823      	ldr	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
		dev->pm_top += realsize;
 8001582:	8b2a      	ldrh	r2, [r5, #24]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
		if (callback) {
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 8001584:	400b      	ands	r3, r1
 8001586:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001588:	6823      	ldr	r3, [r4, #0]
		dev->pm_top += realsize;
 800158a:	4410      	add	r0, r2
		if (callback) {
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800158c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001594:	b29b      	uxth	r3, r3
 8001596:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a2:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 80015a4:	8328      	strh	r0, [r5, #24]
	}
}
 80015a6:	b003      	add	sp, #12
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
	USB_SET_EP_TYPE(addr, typelookup[type]);

	if (dir || (addr == 0)) {
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <st_usbfs_ep_setup+0x110>)
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	b292      	uxth	r2, r2
 80015b0:	4472      	add	r2, lr
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015b8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80015bc:	f8c2 c000 	str.w	ip, [r2]
		if (callback) {
 80015c0:	b127      	cbz	r7, 80015cc <st_usbfs_ep_setup+0xd8>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 80015c2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80015c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80015ca:	6697      	str	r7, [r2, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 80015cc:	f648 75cf 	movw	r5, #36815	; 0x8fcf
 80015d0:	6822      	ldr	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
		dev->pm_top += max_size;
 80015d2:	449c      	add	ip, r3
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
		if (callback) {
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 80015d4:	402a      	ands	r2, r5
 80015d6:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80015d8:	6825      	ldr	r5, [r4, #0]
		dev->pm_top += max_size;
 80015da:	fa1f fc8c 	uxth.w	ip, ip
		if (callback) {
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80015de:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 80015e2:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80015e6:	b2ad      	uxth	r5, r5
 80015e8:	f085 0520 	eor.w	r5, r5, #32
 80015ec:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80015f0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
		dev->pm_top += max_size;
	}

	if (!dir) {
 80015f4:	2900      	cmp	r1, #0
		if (callback) {
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80015f6:	6025      	str	r5, [r4, #0]
		dev->pm_top += max_size;
 80015f8:	f8a0 c018 	strh.w	ip, [r0, #24]
	}

	if (!dir) {
 80015fc:	daa8      	bge.n	8001550 <st_usbfs_ep_setup+0x5c>
		}
		USB_CLR_EP_RX_DTOG(addr);
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
		dev->pm_top += realsize;
	}
}
 80015fe:	b003      	add	sp, #12
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001602:	bf00      	nop
 8001604:	40005c50 	.word	0x40005c50
 8001608:	04000200 	.word	0x04000200

0800160c <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 800160c:	f248 0180 	movw	r1, #32896	; 0x8080
		dev->pm_top += realsize;
	}
}

void st_usbfs_endpoints_reset(usbd_device *dev)
{
 8001610:	b470      	push	{r4, r5, r6}
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <st_usbfs_endpoints_reset+0x38>)
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001614:	4e0c      	ldr	r6, [pc, #48]	; (8001648 <st_usbfs_endpoints_reset+0x3c>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001616:	4d0d      	ldr	r5, [pc, #52]	; (800164c <st_usbfs_endpoints_reset+0x40>)
void st_usbfs_endpoints_reset(usbd_device *dev)
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
 8001618:	4c0d      	ldr	r4, [pc, #52]	; (8001650 <st_usbfs_endpoints_reset+0x44>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	4033      	ands	r3, r6
 800161e:	430b      	orrs	r3, r1
 8001620:	b29b      	uxth	r3, r3
 8001622:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	402b      	ands	r3, r5
 8001628:	430b      	orrs	r3, r1
 800162a:	b29b      	uxth	r3, r3
 800162c:	f842 3b04 	str.w	r3, [r2], #4
void st_usbfs_endpoints_reset(usbd_device *dev)
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
 8001630:	42a2      	cmp	r2, r4
 8001632:	d1f2      	bne.n	800161a <st_usbfs_endpoints_reset+0xe>
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
}
 8001634:	bc70      	pop	{r4, r5, r6}
	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8001636:	6803      	ldr	r3, [r0, #0]
 8001638:	79db      	ldrb	r3, [r3, #7]
 800163a:	3320      	adds	r3, #32
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	8303      	strh	r3, [r0, #24]
}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40005c04 	.word	0x40005c04
 8001648:	ffff8fbf 	.word	0xffff8fbf
 800164c:	ffffbf8f 	.word	0xffffbf8f
 8001650:	40005c20 	.word	0x40005c20

08001654 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8001654:	b410      	push	{r4}
	(void)dev;
	if (addr == 0) {
 8001656:	bb39      	cbnz	r1, 80016a8 <st_usbfs_ep_stall_set+0x54>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001658:	2a00      	cmp	r2, #0
 800165a:	bf14      	ite	ne
 800165c:	2410      	movne	r4, #16
 800165e:	2420      	moveq	r4, #32
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <st_usbfs_ep_stall_set+0xc0>)
 8001662:	6803      	ldr	r3, [r0, #0]
 8001664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800166c:	4063      	eors	r3, r4
 800166e:	b21b      	sxth	r3, r3
 8001670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	b29b      	uxth	r3, r3
 800167a:	6003      	str	r3, [r0, #0]
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 800167c:	0089      	lsls	r1, r1, #2
 800167e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001682:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001686:	b342      	cbz	r2, 80016da <st_usbfs_ep_stall_set+0x86>
			USB_CLR_EP_RX_DTOG(addr);
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168c:	680b      	ldr	r3, [r1, #0]
 800168e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001696:	b29b      	uxth	r3, r3
 8001698:	4053      	eors	r3, r2
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a2:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 80016a4:	bc10      	pop	{r4}
 80016a6:	4770      	bx	lr
	if (addr == 0) {
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
				   USB_EP_TX_STAT_NAK);
	}

	if (addr & 0x80) {
 80016a8:	060b      	lsls	r3, r1, #24
 80016aa:	d5e7      	bpl.n	800167c <st_usbfs_ep_stall_set+0x28>
		addr &= 0x7F;

		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80016ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80016b0:	0089      	lsls	r1, r1, #2
 80016b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80016b6:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80016ba:	680b      	ldr	r3, [r1, #0]
 80016bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b1b2      	cbz	r2, 80016f6 <st_usbfs_ep_stall_set+0xa2>
 80016c8:	f083 0310 	eor.w	r3, r3, #16
 80016cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
				   USB_EP_RX_STAT_VALID);
	}
}
 80016d6:	bc10      	pop	{r4}
 80016d8:	4770      	bx	lr
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_RX_DTOG(addr);
 80016da:	f64c 708f 	movw	r0, #53135	; 0xcf8f
 80016de:	680b      	ldr	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80016e0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_RX_DTOG(addr);
 80016e4:	4003      	ands	r3, r0
 80016e6:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80016e8:	680b      	ldr	r3, [r1, #0]
 80016ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	e7d0      	b.n	8001698 <st_usbfs_ep_stall_set+0x44>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
				   USB_EP_TX_STAT_NAK);

		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
 80016f6:	f648 72cf 	movw	r2, #36815	; 0x8fcf
	}

	if (addr & 0x80) {
		addr &= 0x7F;

		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80016fa:	f083 0320 	eor.w	r3, r3, #32
 80016fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001706:	600b      	str	r3, [r1, #0]
				   USB_EP_TX_STAT_NAK);

		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
 8001708:	680b      	ldr	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
				   USB_EP_RX_STAT_VALID);
	}
}
 800170a:	bc10      	pop	{r4}
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
				   USB_EP_TX_STAT_NAK);

		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
 800170c:	4013      	ands	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
				   USB_EP_RX_STAT_VALID);
	}
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40005c00 	.word	0x40005c00

08001718 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 8001718:	060b      	lsls	r3, r1, #24
 800171a:	d40d      	bmi.n	8001738 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 800171c:	0089      	lsls	r1, r1, #2
 800171e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001722:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001726:	6808      	ldr	r0, [r1, #0]
 8001728:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
{
	(void)dev;
	if (addr & 0x80) {
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
		    USB_EP_TX_STAT_STALL) {
			return 1;
 800172c:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8001730:	fab0 f080 	clz	r0, r0
 8001734:	0940      	lsrs	r0, r0, #5
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 8001736:	4770      	bx	lr

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 8001738:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800173c:	0089      	lsls	r1, r1, #2
 800173e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001742:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001746:	6808      	ldr	r0, [r1, #0]
 8001748:	f000 0030 	and.w	r0, r0, #48	; 0x30
		    USB_EP_TX_STAT_STALL) {
			return 1;
 800174c:	f1a0 0010 	sub.w	r0, r0, #16
 8001750:	fab0 f080 	clz	r0, r0
 8001754:	0940      	lsrs	r0, r0, #5
 8001756:	4770      	bx	lr

08001758 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001758:	060b      	lsls	r3, r1, #24
 800175a:	d422      	bmi.n	80017a2 <st_usbfs_ep_nak_set+0x4a>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 800175c:	008b      	lsls	r3, r1, #2
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <st_usbfs_ep_nak_set+0x4c>)
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001768:	5442      	strb	r2, [r0, r1]

	if (nak) {
 800176a:	b16a      	cbz	r2, 8001788 <st_usbfs_ep_nak_set+0x30>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001772:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001776:	b292      	uxth	r2, r2
 8001778:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800177c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	4770      	bx	lr
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800178e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001792:	b292      	uxth	r2, r2
 8001794:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800179c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a0:	601a      	str	r2, [r3, #0]
	}
}
 80017a2:	4770      	bx	lr
 80017a4:	20000db4 	.word	0x20000db4

080017a8 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)dev;
	addr &= 0x7F;
 80017ac:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 80017b0:	00b5      	lsls	r5, r6, #2
 80017b2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80017b6:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80017ba:	682c      	ldr	r4, [r5, #0]
 80017bc:	f004 0430 	and.w	r4, r4, #48	; 0x30
 80017c0:	2c30      	cmp	r4, #48	; 0x30
 80017c2:	d02e      	beq.n	8001822 <st_usbfs_ep_write_packet+0x7a>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 80017c4:	461f      	mov	r7, r3
 80017c6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800182c <st_usbfs_ep_write_packet+0x84>
 80017ca:	4611      	mov	r1, r2
 80017cc:	f8d8 2000 	ldr.w	r2, [r8]
 80017d0:	00f6      	lsls	r6, r6, #3
 80017d2:	b292      	uxth	r2, r2
 80017d4:	4432      	add	r2, r6
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80017dc:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80017e0:	8810      	ldrh	r0, [r2, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	0040      	lsls	r0, r0, #1
 80017e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80017ea:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80017ee:	f7ff f939 	bl	8000a64 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 80017f2:	f8d8 1000 	ldr.w	r1, [r8]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <st_usbfs_ep_write_packet+0x80>)
 80017f8:	b289      	uxth	r1, r1
 80017fa:	440e      	add	r6, r1
 80017fc:	0076      	lsls	r6, r6, #1
 80017fe:	4433      	add	r3, r6
 8001800:	601f      	str	r7, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001802:	6829      	ldr	r1, [r5, #0]

	return len;
 8001804:	4638      	mov	r0, r7
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
	USB_SET_EP_TX_COUNT(addr, len);
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001806:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800180a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800180e:	b289      	uxth	r1, r1
 8001810:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8001814:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001818:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800181c:	6029      	str	r1, [r5, #0]

	return len;
}
 800181e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	(void)dev;
	addr &= 0x7F;

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
		return 0;
 8001822:	2000      	movs	r0, #0
	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
	USB_SET_EP_TX_COUNT(addr, len);
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);

	return len;
}
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001828:	40006004 	.word	0x40006004
 800182c:	40005c50 	.word	0x40005c50

08001830 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8001832:	008c      	lsls	r4, r1, #2
 8001834:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001838:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800183c:	6826      	ldr	r6, [r4, #0]
 800183e:	f406 5640 	and.w	r6, r6, #12288	; 0x3000
 8001842:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
 8001846:	d043      	beq.n	80018d0 <st_usbfs_ep_read_packet+0xa0>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001848:	4f23      	ldr	r7, [pc, #140]	; (80018d8 <st_usbfs_ep_read_packet+0xa8>)
 800184a:	00ce      	lsls	r6, r1, #3
 800184c:	683d      	ldr	r5, [r7, #0]
 800184e:	4823      	ldr	r0, [pc, #140]	; (80018dc <st_usbfs_ep_read_packet+0xac>)
 8001850:	b2ad      	uxth	r5, r5
 8001852:	4435      	add	r5, r6
 8001854:	006d      	lsls	r5, r5, #1
 8001856:	4428      	add	r0, r5
 8001858:	6800      	ldr	r0, [r0, #0]
 800185a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800185e:	4298      	cmp	r0, r3
 8001860:	db2c      	blt.n	80018bc <st_usbfs_ep_read_packet+0x8c>
 8001862:	461d      	mov	r5, r3
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <st_usbfs_ep_read_packet+0xa8>)
 8001866:	4610      	mov	r0, r2
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800186e:	b292      	uxth	r2, r2
 8001870:	4416      	add	r6, r2
 8001872:	0076      	lsls	r6, r6, #1
 8001874:	4433      	add	r3, r6
 8001876:	460f      	mov	r7, r1
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	462a      	mov	r2, r5
 800187c:	0049      	lsls	r1, r1, #1
 800187e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001882:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001886:	f7ff f8fd 	bl	8000a84 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 800188a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800188e:	6821      	ldr	r1, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <st_usbfs_ep_read_packet+0xb0>)
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
	USB_CLR_EP_RX_CTR(addr);
 8001892:	400b      	ands	r3, r1
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	6023      	str	r3, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 800189a:	5dd3      	ldrb	r3, [r2, r7]
 800189c:	b963      	cbnz	r3, 80018b8 <st_usbfs_ep_read_packet+0x88>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b6:	6023      	str	r3, [r4, #0]
	}

	return len;
}
 80018b8:	4628      	mov	r0, r5
 80018ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <st_usbfs_ep_read_packet+0xac>)
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4433      	add	r3, r6
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4418      	add	r0, r3
 80018c8:	6805      	ldr	r5, [r0, #0]
 80018ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80018ce:	e7c9      	b.n	8001864 <st_usbfs_ep_read_packet+0x34>
uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
		return 0;
 80018d0:	2500      	movs	r5, #0
	if (!st_usbfs_force_nak[addr]) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
	}

	return len;
}
 80018d2:	4628      	mov	r0, r5
 80018d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40005c50 	.word	0x40005c50
 80018dc:	4000600c 	.word	0x4000600c
 80018e0:	20000db4 	.word	0x20000db4

080018e4 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 80018e4:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <st_usbfs_poll+0xdc>)

	return len;
}

void st_usbfs_poll(usbd_device *dev)
{
 80018e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 80018e8:	6813      	ldr	r3, [r2, #0]

	return len;
}

void st_usbfs_poll(usbd_device *dev)
{
 80018ea:	4604      	mov	r4, r0
	uint16_t istr = *USB_ISTR_REG;

	if (istr & USB_ISTR_RESET) {
 80018ec:	0559      	lsls	r1, r3, #21
 80018ee:	d449      	bmi.n	8001984 <st_usbfs_poll+0xa0>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	b29e      	uxth	r6, r3
 80018f4:	d422      	bmi.n	800193c <st_usbfs_poll+0x58>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 80018f6:	0530      	lsls	r0, r6, #20
 80018f8:	d506      	bpl.n	8001908 <st_usbfs_poll+0x24>
		USB_CLR_ISTR_SUSP();
 80018fa:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80018fe:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <st_usbfs_poll+0xdc>)
		if (dev->user_callback_suspend) {
 8001900:	6a23      	ldr	r3, [r4, #32]
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
		USB_CLR_ISTR_SUSP();
 8001902:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_suspend) {
 8001904:	b103      	cbz	r3, 8001908 <st_usbfs_poll+0x24>
			dev->user_callback_suspend();
 8001906:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 8001908:	04f1      	lsls	r1, r6, #19
 800190a:	d506      	bpl.n	800191a <st_usbfs_poll+0x36>
		USB_CLR_ISTR_WKUP();
 800190c:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <st_usbfs_poll+0xdc>)
		if (dev->user_callback_resume) {
 8001912:	6a63      	ldr	r3, [r4, #36]	; 0x24
			dev->user_callback_suspend();
		}
	}

	if (istr & USB_ISTR_WKUP) {
		USB_CLR_ISTR_WKUP();
 8001914:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_resume) {
 8001916:	b103      	cbz	r3, 800191a <st_usbfs_poll+0x36>
			dev->user_callback_resume();
 8001918:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 800191a:	05b2      	lsls	r2, r6, #22
 800191c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800191e:	d506      	bpl.n	800192e <st_usbfs_poll+0x4a>
		USB_CLR_ISTR_SOF();
 8001920:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <st_usbfs_poll+0xdc>)
 8001926:	6011      	str	r1, [r2, #0]
		if (dev->user_callback_sof) {
 8001928:	b333      	cbz	r3, 8001978 <st_usbfs_poll+0x94>
			dev->user_callback_sof();
 800192a:	4798      	blx	r3
 800192c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}

	if (dev->user_callback_sof) {
 800192e:	b31b      	cbz	r3, 8001978 <st_usbfs_poll+0x94>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <st_usbfs_poll+0xe0>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001938:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 800193a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
		uint8_t ep = istr & USB_ISTR_EP_ID;
 800193c:	f003 070f 	and.w	r7, r3, #15
		uint8_t type;

		if (istr & USB_ISTR_DIR) {
 8001940:	00bd      	lsls	r5, r7, #2
 8001942:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001946:	f013 0310 	ands.w	r3, r3, #16
 800194a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 800194e:	d122      	bne.n	8001996 <st_usbfs_poll+0xb2>
			} else {
				type = USB_TRANSACTION_OUT;
			}
		} else {
			type = USB_TRANSACTION_IN;
			USB_CLR_EP_TX_CTR(ep);
 8001950:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001954:	6829      	ldr	r1, [r5, #0]
 8001956:	400a      	ands	r2, r1
 8001958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195c:	602a      	str	r2, [r5, #0]
		}

		if (dev->user_callback_ctr[ep][type]) {
 800195e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8001962:	4413      	add	r3, r2
 8001964:	331a      	adds	r3, #26
 8001966:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800196a:	b1cb      	cbz	r3, 80019a0 <st_usbfs_poll+0xbc>
			dev->user_callback_ctr[ep][type] (dev, ep);
 800196c:	4620      	mov	r0, r4
 800196e:	4639      	mov	r1, r7
 8001970:	4798      	blx	r3
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 8001972:	0530      	lsls	r0, r6, #20
 8001974:	d5c8      	bpl.n	8001908 <st_usbfs_poll+0x24>
 8001976:	e7c0      	b.n	80018fa <st_usbfs_poll+0x16>
	}

	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <st_usbfs_poll+0xe0>)
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001980:	6013      	str	r3, [r2, #0]
	}
}
 8001982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint16_t istr = *USB_ISTR_REG;

	if (istr & USB_ISTR_RESET) {
		USB_CLR_ISTR_RESET();
		dev->pm_top = USBD_PM_TOP;
 8001984:	2340      	movs	r3, #64	; 0x40
void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;

	if (istr & USB_ISTR_RESET) {
		USB_CLR_ISTR_RESET();
 8001986:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 800198a:	6011      	str	r1, [r2, #0]
		dev->pm_top = USBD_PM_TOP;
 800198c:	8303      	strh	r3, [r0, #24]
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 800198e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;

	if (istr & USB_ISTR_RESET) {
		USB_CLR_ISTR_RESET();
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
 8001992:	f7ff b8bb 	b.w	8000b0c <_usbd_reset>
		uint8_t ep = istr & USB_ISTR_EP_ID;
		uint8_t type;

		if (istr & USB_ISTR_DIR) {
			/* OUT or SETUP? */
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	051b      	lsls	r3, r3, #20
 800199a:	d409      	bmi.n	80019b0 <st_usbfs_poll+0xcc>
 800199c:	2301      	movs	r3, #1
 800199e:	e7de      	b.n	800195e <st_usbfs_poll+0x7a>
		}

		if (dev->user_callback_ctr[ep][type]) {
			dev->user_callback_ctr[ep][type] (dev, ep);
		} else {
			USB_CLR_EP_RX_CTR(ep);
 80019a0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80019a4:	682a      	ldr	r2, [r5, #0]
 80019a6:	4013      	ands	r3, r2
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	602b      	str	r3, [r5, #0]
 80019ae:	e7a2      	b.n	80018f6 <st_usbfs_poll+0x12>

		if (istr & USB_ISTR_DIR) {
			/* OUT or SETUP? */
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
				type = USB_TRANSACTION_SETUP;
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 80019b0:	2308      	movs	r3, #8
 80019b2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80019b6:	4639      	mov	r1, r7
 80019b8:	f7ff ff3a 	bl	8001830 <st_usbfs_ep_read_packet>
 80019bc:	2302      	movs	r3, #2
 80019be:	e7ce      	b.n	800195e <st_usbfs_poll+0x7a>
 80019c0:	40005c44 	.word	0x40005c44
 80019c4:	40005c40 	.word	0x40005c40

080019c8 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80019c8:	2201      	movs	r2, #1
 80019ca:	0943      	lsrs	r3, r0, #5
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019d2:	f000 001f 	and.w	r0, r0, #31
 80019d6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80019da:	fa02 f000 	lsl.w	r0, r2, r0
 80019de:	6018      	str	r0, [r3, #0]
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 80019e4:	2901      	cmp	r1, #1
 80019e6:	d00c      	beq.n	8001a02 <exti_set_trigger+0x1e>
 80019e8:	b1a9      	cbz	r1, 8001a16 <exti_set_trigger+0x32>
 80019ea:	2902      	cmp	r1, #2
 80019ec:	d108      	bne.n	8001a00 <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 80019ee:	490f      	ldr	r1, [pc, #60]	; (8001a2c <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <exti_set_trigger+0x4c>)
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 80019f2:	680b      	ldr	r3, [r1, #0]
 80019f4:	4303      	orrs	r3, r0
 80019f6:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 80019f8:	6813      	ldr	r3, [r2, #0]
 80019fa:	4318      	orrs	r0, r3
 80019fc:	6010      	str	r0, [r2, #0]
		break;
	}
}
 80019fe:	4770      	bx	lr
 8001a00:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
		EXTI_FTSR &= ~extis;
		break;
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <exti_set_trigger+0x48>)
		EXTI_FTSR |= extis;
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <exti_set_trigger+0x4c>)
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
		EXTI_FTSR &= ~extis;
		break;
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
 8001a06:	680b      	ldr	r3, [r1, #0]
 8001a08:	ea23 0300 	bic.w	r3, r3, r0
 8001a0c:	600b      	str	r3, [r1, #0]
		EXTI_FTSR |= extis;
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	4318      	orrs	r0, r3
 8001a12:	6010      	str	r0, [r2, #0]
		break;
 8001a14:	4770      	bx	lr

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8001a16:	4905      	ldr	r1, [pc, #20]	; (8001a2c <exti_set_trigger+0x48>)
		EXTI_FTSR &= ~extis;
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <exti_set_trigger+0x4c>)

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8001a1a:	680b      	ldr	r3, [r1, #0]
 8001a1c:	4303      	orrs	r3, r0
 8001a1e:	600b      	str	r3, [r1, #0]
		EXTI_FTSR &= ~extis;
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	ea23 0000 	bic.w	r0, r3, r0
 8001a26:	6010      	str	r0, [r2, #0]
		break;
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40010408 	.word	0x40010408
 8001a30:	4001040c 	.word	0x4001040c

08001a34 <exti_enable_request>:
}

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <exti_enable_request+0x14>)

	/* Enable events. */
	EXTI_EMR |= extis;
 8001a36:	4905      	ldr	r1, [pc, #20]	; (8001a4c <exti_enable_request+0x18>)
}

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	601a      	str	r2, [r3, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8001a3e:	680b      	ldr	r3, [r1, #0]
 8001a40:	4303      	orrs	r3, r0
 8001a42:	600b      	str	r3, [r1, #0]
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	40010404 	.word	0x40010404

08001a50 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <exti_reset_request+0x8>)
 8001a52:	6018      	str	r0, [r3, #0]
}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40010414 	.word	0x40010414

08001a5c <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <rtc_enter_config_mode+0x14>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	069b      	lsls	r3, r3, #26
 8001a62:	d5fc      	bpl.n	8001a5e <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40002804 	.word	0x40002804

08001a74 <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <rtc_exit_config_mode+0x14>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001a76:	461a      	mov	r2, r3
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	f021 0110 	bic.w	r1, r1, #16
 8001a7e:	6019      	str	r1, [r3, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	069b      	lsls	r3, r3, #26
 8001a84:	d5fc      	bpl.n	8001a80 <rtc_exit_config_mode+0xc>
}
 8001a86:	4770      	bx	lr
 8001a88:	40002804 	.word	0x40002804

08001a8c <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8001a8c:	b430      	push	{r4, r5}
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <rtc_set_alarm_time+0x34>)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	0699      	lsls	r1, r3, #26
 8001a94:	d5fc      	bpl.n	8001a90 <rtc_set_alarm_time+0x4>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001a96:	6813      	ldr	r3, [r2, #0]

void rtc_set_alarm_time(uint32_t alarm_time)
{
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001a98:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <rtc_set_alarm_time+0x38>)
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001a9a:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <rtc_set_alarm_time+0x3c>)

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001aa0:	b285      	uxth	r5, r0
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001aa2:	0c00      	lsrs	r0, r0, #16

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001aa4:	6013      	str	r3, [r2, #0]
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001aa6:	6025      	str	r5, [r4, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001aa8:	6008      	str	r0, [r1, #0]
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001aaa:	6813      	ldr	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001aac:	391c      	subs	r1, #28
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001aae:	f023 0310 	bic.w	r3, r3, #16
 8001ab2:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ab4:	680b      	ldr	r3, [r1, #0]
 8001ab6:	069b      	lsls	r3, r3, #26
 8001ab8:	d5fc      	bpl.n	8001ab4 <rtc_set_alarm_time+0x28>
{
	rtc_enter_config_mode();
	RTC_ALRL = (alarm_time & 0x0000ffff);
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
	rtc_exit_config_mode();
}
 8001aba:	bc30      	pop	{r4, r5}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40002804 	.word	0x40002804
 8001ac4:	40002820 	.word	0x40002820
 8001ac8:	40002824 	.word	0x40002824

08001acc <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8001acc:	b430      	push	{r4, r5}
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <rtc_set_prescale_val+0x34>)
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	0699      	lsls	r1, r3, #26
 8001ad4:	d5fc      	bpl.n	8001ad0 <rtc_set_prescale_val+0x4>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001ad6:	6813      	ldr	r3, [r2, #0]

void rtc_set_prescale_val(uint32_t prescale_val)
{
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001ad8:	490a      	ldr	r1, [pc, #40]	; (8001b04 <rtc_set_prescale_val+0x38>)
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001ada:	4c0b      	ldr	r4, [pc, #44]	; (8001b08 <rtc_set_prescale_val+0x3c>)

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001adc:	f043 0310 	orr.w	r3, r3, #16
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001ae0:	b285      	uxth	r5, r0
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001ae2:	f3c0 4003 	ubfx	r0, r0, #16, #4

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001ae6:	6013      	str	r3, [r2, #0]
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001ae8:	6025      	str	r5, [r4, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001aea:	6008      	str	r0, [r1, #0]
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001aec:	6813      	ldr	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001aee:	3904      	subs	r1, #4
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001af0:	f023 0310 	bic.w	r3, r3, #16
 8001af4:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001af6:	680b      	ldr	r3, [r1, #0]
 8001af8:	069b      	lsls	r3, r3, #26
 8001afa:	d5fc      	bpl.n	8001af6 <rtc_set_prescale_val+0x2a>
{
	rtc_enter_config_mode();
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
	rtc_exit_config_mode();
}
 8001afc:	bc30      	pop	{r4, r5}
 8001afe:	4770      	bx	lr
 8001b00:	40002804 	.word	0x40002804
 8001b04:	40002808 	.word	0x40002808
 8001b08:	4000280c 	.word	0x4000280c

08001b0c <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <rtc_get_counter_val+0x10>)
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <rtc_get_counter_val+0x14>)
 8001b10:	6810      	ldr	r0, [r2, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40002818 	.word	0x40002818
 8001b20:	4000281c 	.word	0x4000281c

08001b24 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8001b24:	b430      	push	{r4, r5}
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <rtc_set_counter_val+0x34>)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	0699      	lsls	r1, r3, #26
 8001b2c:	d5fc      	bpl.n	8001b28 <rtc_set_counter_val+0x4>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001b2e:	6813      	ldr	r3, [r2, #0]

void rtc_set_counter_val(uint32_t counter_val)
{
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001b30:	490a      	ldr	r1, [pc, #40]	; (8001b5c <rtc_set_counter_val+0x38>)
*/

void rtc_set_counter_val(uint32_t counter_val)
{
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001b32:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <rtc_set_counter_val+0x3c>)

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001b34:	f043 0310 	orr.w	r3, r3, #16
*/

void rtc_set_counter_val(uint32_t counter_val)
{
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001b38:	0c05      	lsrs	r5, r0, #16
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001b3a:	b280      	uxth	r0, r0

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001b3c:	6013      	str	r3, [r2, #0]
*/

void rtc_set_counter_val(uint32_t counter_val)
{
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001b3e:	6025      	str	r5, [r4, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001b40:	6008      	str	r0, [r1, #0]
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001b42:	6813      	ldr	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b44:	3918      	subs	r1, #24
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001b46:	f023 0310 	bic.w	r3, r3, #16
 8001b4a:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b4c:	680b      	ldr	r3, [r1, #0]
 8001b4e:	069b      	lsls	r3, r3, #26
 8001b50:	d5fc      	bpl.n	8001b4c <rtc_set_counter_val+0x28>
{
	rtc_enter_config_mode();
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
	rtc_exit_config_mode();
}
 8001b52:	bc30      	pop	{r4, r5}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40002804 	.word	0x40002804
 8001b5c:	4000281c 	.word	0x4000281c
 8001b60:	40002818 	.word	0x40002818

08001b64 <rtc_interrupt_enable>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <rtc_interrupt_enable+0x50>)
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	0699      	lsls	r1, r3, #26
 8001b6a:	d5fc      	bpl.n	8001b66 <rtc_interrupt_enable+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001b6c:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_enable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001b6e:	2801      	cmp	r0, #1

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6013      	str	r3, [r2, #0]
void rtc_interrupt_enable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001b76:	d011      	beq.n	8001b9c <rtc_interrupt_enable+0x38>
 8001b78:	b1b0      	cbz	r0, 8001ba8 <rtc_interrupt_enable+0x44>
 8001b7a:	2802      	cmp	r0, #2
 8001b7c:	d104      	bne.n	8001b88 <rtc_interrupt_enable+0x24>
		break;
	case RTC_ALR:
		RTC_CRH |= RTC_CRH_ALRIE;
		break;
	case RTC_OW:
		RTC_CRH |= RTC_CRH_OWIE;
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <rtc_interrupt_enable+0x54>)
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6013      	str	r3, [r2, #0]
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <rtc_interrupt_enable+0x50>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b8a:	461a      	mov	r2, r3
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	f021 0110 	bic.w	r1, r1, #16
 8001b92:	6019      	str	r1, [r3, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001b94:	6813      	ldr	r3, [r2, #0]
 8001b96:	069b      	lsls	r3, r3, #26
 8001b98:	d5fc      	bpl.n	8001b94 <rtc_interrupt_enable+0x30>
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8001b9a:	4770      	bx	lr
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRH |= RTC_CRH_SECIE;
		break;
	case RTC_ALR:
		RTC_CRH |= RTC_CRH_ALRIE;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <rtc_interrupt_enable+0x54>)
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6013      	str	r3, [r2, #0]
		break;
 8001ba6:	e7ef      	b.n	8001b88 <rtc_interrupt_enable+0x24>
	rtc_enter_config_mode();

	/* Set the correct interrupt enable. */
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRH |= RTC_CRH_SECIE;
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <rtc_interrupt_enable+0x54>)
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
		break;
 8001bb2:	e7e9      	b.n	8001b88 <rtc_interrupt_enable+0x24>
 8001bb4:	40002804 	.word	0x40002804
 8001bb8:	40002800 	.word	0x40002800

08001bbc <rtc_interrupt_disable>:
void rtc_enter_config_mode(void)
{
	uint32_t reg32;

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <rtc_interrupt_disable+0x50>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	0699      	lsls	r1, r3, #26
 8001bc2:	d5fc      	bpl.n	8001bbe <rtc_interrupt_disable+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001bc4:	6813      	ldr	r3, [r2, #0]
void rtc_interrupt_disable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8001bc6:	2801      	cmp	r0, #1

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001bc8:	f043 0310 	orr.w	r3, r3, #16
 8001bcc:	6013      	str	r3, [r2, #0]
void rtc_interrupt_disable(rtcflag_t flag_val)
{
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8001bce:	d011      	beq.n	8001bf4 <rtc_interrupt_disable+0x38>
 8001bd0:	b1b0      	cbz	r0, 8001c00 <rtc_interrupt_disable+0x44>
 8001bd2:	2802      	cmp	r0, #2
 8001bd4:	d104      	bne.n	8001be0 <rtc_interrupt_disable+0x24>
		break;
	case RTC_ALR:
		RTC_CRH &= ~RTC_CRH_ALRIE;
		break;
	case RTC_OW:
		RTC_CRH &= ~RTC_CRH_OWIE;
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <rtc_interrupt_disable+0x54>)
 8001bd8:	6813      	ldr	r3, [r2, #0]
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6013      	str	r3, [r2, #0]
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <rtc_interrupt_disable+0x50>)

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001be2:	461a      	mov	r2, r3
void rtc_exit_config_mode(void)
{
	uint32_t reg32;

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	f021 0110 	bic.w	r1, r1, #16
 8001bea:	6019      	str	r1, [r3, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	d5fc      	bpl.n	8001bec <rtc_interrupt_disable+0x30>
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 8001bf2:	4770      	bx	lr
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRH &= ~RTC_CRH_SECIE;
		break;
	case RTC_ALR:
		RTC_CRH &= ~RTC_CRH_ALRIE;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <rtc_interrupt_disable+0x54>)
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f023 0302 	bic.w	r3, r3, #2
 8001bfc:	6013      	str	r3, [r2, #0]
		break;
 8001bfe:	e7ef      	b.n	8001be0 <rtc_interrupt_disable+0x24>
	rtc_enter_config_mode();

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRH &= ~RTC_CRH_SECIE;
 8001c00:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <rtc_interrupt_disable+0x54>)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
		break;
 8001c0a:	e7e9      	b.n	8001be0 <rtc_interrupt_disable+0x24>
 8001c0c:	40002804 	.word	0x40002804
 8001c10:	40002800 	.word	0x40002800

08001c14 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8001c14:	2801      	cmp	r0, #1
 8001c16:	d009      	beq.n	8001c2c <rtc_clear_flag+0x18>
 8001c18:	b170      	cbz	r0, 8001c38 <rtc_clear_flag+0x24>
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d105      	bne.n	8001c2a <rtc_clear_flag+0x16>
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
		break;
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <rtc_clear_flag+0x30>)
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001c28:	4770      	bx	lr
 8001c2a:	4770      	bx	lr
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <rtc_clear_flag+0x30>)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f023 0302 	bic.w	r3, r3, #2
 8001c34:	6013      	str	r3, [r2, #0]
		break;
 8001c36:	4770      	bx	lr
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
 8001c38:	4a02      	ldr	r2, [pc, #8]	; (8001c44 <rtc_clear_flag+0x30>)
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6013      	str	r3, [r2, #0]
		break;
 8001c42:	4770      	bx	lr
 8001c44:	40002804 	.word	0x40002804

08001c48 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 8001c48:	2801      	cmp	r0, #1
 8001c4a:	d009      	beq.n	8001c60 <rtc_check_flag+0x18>
 8001c4c:	b168      	cbz	r0, 8001c6a <rtc_check_flag+0x22>
 8001c4e:	2802      	cmp	r0, #2
 8001c50:	d104      	bne.n	8001c5c <rtc_check_flag+0x14>
		break;
	case RTC_ALR:
		reg32 = RTC_CRL & RTC_CRL_ALRF;
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <rtc_check_flag+0x2c>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f000 0004 	and.w	r0, r0, #4
		reg32 = 0;
		break;
	}

	return reg32;
}
 8001c5a:	4770      	bx	lr
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
		break;
	default:
		reg32 = 0;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	4770      	bx	lr
	switch (flag_val) {
	case RTC_SEC:
		reg32 = RTC_CRL & RTC_CRL_SECF;
		break;
	case RTC_ALR:
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <rtc_check_flag+0x2c>)
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	f000 0002 	and.w	r0, r0, #2
		break;
 8001c68:	4770      	bx	lr
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
	case RTC_SEC:
		reg32 = RTC_CRL & RTC_CRL_SECF;
 8001c6a:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <rtc_check_flag+0x2c>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f000 0001 	and.w	r0, r0, #1
		break;
 8001c72:	4770      	bx	lr
 8001c74:	40002804 	.word	0x40002804

08001c78 <os_init>:
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 8001c78:	23ff      	movs	r3, #255	; 0xff
    last_running_task = NO_TID;
    running = 0;
 8001c7a:	2100      	movs	r1, #0
*   }
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
 8001c7c:	b510      	push	{r4, lr}
	running_tid = NO_TID;
    last_running_task = NO_TID;
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <os_init+0x28>)
    running = 0;
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <os_init+0x2c>)
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 8001c82:	4c09      	ldr	r4, [pc, #36]	; (8001ca8 <os_init+0x30>)
    last_running_task = NO_TID;
 8001c84:	7003      	strb	r3, [r0, #0]
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
	running_tid = NO_TID;
 8001c86:	7023      	strb	r3, [r4, #0]
    last_running_task = NO_TID;
    running = 0;
 8001c88:	7011      	strb	r1, [r2, #0]
    os_sem_init();
 8001c8a:	f000 f821 	bl	8001cd0 <os_sem_init>
    os_event_init();
 8001c8e:	f000 f847 	bl	8001d20 <os_event_init>
    os_msgQ_init();
 8001c92:	f000 f80b 	bl	8001cac <os_msgQ_init>
    os_task_init();
}
 8001c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    last_running_task = NO_TID;
    running = 0;
    os_sem_init();
    os_event_init();
    os_msgQ_init();
    os_task_init();
 8001c9a:	f000 b81f 	b.w	8001cdc <os_task_init>
 8001c9e:	bf00      	nop
 8001ca0:	20000eba 	.word	0x20000eba
 8001ca4:	20000eb9 	.word	0x20000eb9
 8001ca8:	20000eb8 	.word	0x20000eb8

08001cac <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8001cac:	2300      	movs	r3, #0
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <os_msgQ_init+0x1c>)

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <os_msgQ_init+0x20>)
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
 8001cb2:	e9c2 3300 	strd	r3, r3, [r2]

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8001cb6:	700b      	strb	r3, [r1, #0]
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
        msgQList[ i ].q.size = 0;
 8001cb8:	7213      	strb	r3, [r2, #8]
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 8001cba:	8193      	strh	r3, [r2, #12]
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
 8001cbc:	e9c2 3304 	strd	r3, r3, [r2, #16]
    nQueues = 0;
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
        msgQList[ i ].q.size = 0;
 8001cc0:	7613      	strb	r3, [r2, #24]
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 8001cc2:	8393      	strh	r3, [r2, #28]
        msgQList[ i ].change = 0;
    }
#endif
}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000544 	.word	0x20000544
 8001ccc:	200005f0 	.word	0x200005f0

08001cd0 <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <os_sem_init+0x8>)
 8001cd4:	701a      	strb	r2, [r3, #0]
#endif
}
 8001cd6:	4770      	bx	lr
 8001cd8:	200005f1 	.word	0x200005f1

08001cdc <os_task_init>:
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8001cdc:	2000      	movs	r0, #0
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
 8001cde:	21ff      	movs	r1, #255	; 0xff
static void task_killed_set( uint8_t tid );

static tcb task_list[ N_TASKS ];
static uint8_t nTasks = 0;

void os_task_init( void ) {
 8001ce0:	b410      	push	{r4}
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <os_task_init+0x3c>)
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8001ce4:	4c0d      	ldr	r4, [pc, #52]	; (8001d1c <os_task_init+0x40>)

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
        task->internal_state = 0xff;
        task->msgQ = 0;
 8001ce6:	4602      	mov	r2, r0
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8001ce8:	7020      	strb	r0, [r4, #0]
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
 8001cea:	f103 008c 	add.w	r0, r3, #140	; 0x8c
        task = &task_list[i];
        task->clockId = 0xff;
 8001cee:	7519      	strb	r1, [r3, #20]
        task->internal_state = 0xff;
 8001cf0:	80d9      	strh	r1, [r3, #6]
        task->msgQ = 0;
 8001cf2:	73da      	strb	r2, [r3, #15]
        task->waitQ = 0;
 8001cf4:	741a      	strb	r2, [r3, #16]
        task->msgChangeEvent = 0;
 8001cf6:	745a      	strb	r2, [r3, #17]
        task->msgResult = 0;
 8001cf8:	749a      	strb	r2, [r3, #18]
        task->prio = 0;
 8001cfa:	735a      	strb	r2, [r3, #13]
        task->savedState = SUSPENDED;
 8001cfc:	715a      	strb	r2, [r3, #5]
        task->semaphore = NO_SEM;
 8001cfe:	7399      	strb	r1, [r3, #14]
        task->state = SUSPENDED;
 8001d00:	711a      	strb	r2, [r3, #4]
        task->taskproc = 0;
 8001d02:	601a      	str	r2, [r3, #0]
        task->tid = NO_TID;
 8001d04:	7319      	strb	r1, [r3, #12]
        task->time = 0;
 8001d06:	609a      	str	r2, [r3, #8]
        task->waitSingleEvent = 0;
 8001d08:	74da      	strb	r2, [r3, #19]

        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
 8001d0a:	7559      	strb	r1, [r3, #21]
        }
        task->data = 0;
 8001d0c:	619a      	str	r2, [r3, #24]
 8001d0e:	331c      	adds	r3, #28
    uint8_t i;
    uint8_t j;
    nTasks = 0;
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
 8001d10:	4283      	cmp	r3, r0
 8001d12:	d1ec      	bne.n	8001cee <os_task_init+0x12>
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
        }
        task->data = 0;
    }
}
 8001d14:	bc10      	pop	{r4}
 8001d16:	4770      	bx	lr
 8001d18:	20000564 	.word	0x20000564
 8001d1c:	200005f2 	.word	0x200005f2

08001d20 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8001d20:	2200      	movs	r2, #0
 8001d22:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <os_event_init+0x8>)
 8001d24:	701a      	strb	r2, [r3, #0]
#endif
}
 8001d26:	4770      	bx	lr
 8001d28:	200005f3 	.word	0x200005f3

08001d2c <xchxy>:
.global qfp_fsqrt_fast
.endif

@ exchange r0<->r1, r2<->r3
xchxy:
 push {r0,r2,r14}
 8001d2c:	b505      	push	{r0, r2, lr}
 mov r0,r1
 8001d2e:	4608      	mov	r0, r1
 mov r2,r3
 8001d30:	461a      	mov	r2, r3
 pop {r1,r3,r15}
 8001d32:	bd0a      	pop	{r1, r3, pc}

08001d34 <unpackxy>:

@ IEEE single precision floats in r0,r1-> mantissae in r1,r0 exponents in r3,r2 *respectively*
@ trashes r4
unpackxy:
 push {r14}
 8001d34:	b500      	push	{lr}
 bl unpackx
 8001d36:	f000 f804 	bl	8001d42 <unpackx>
 bl xchxy
 8001d3a:	f7ff fff7 	bl	8001d2c <xchxy>
 pop {r4}
 8001d3e:	bc10      	pop	{r4}
 mov r14,r4
 8001d40:	46a6      	mov	lr, r4

08001d42 <unpackx>:

@ IEEE single in r0-> signed (two's complemennt) mantissa in r0 9Q23 (24 significant bits), signed exponent (bias removed) in r2
@ trashes r4; zero, denormal -> mantissa=+/-1, exponent=-380; Inf, NaN -> mantissa=+/-1, exponent=+640
unpackx:
 lsrs r2,r0,#23 @ save exponent and sign
 8001d42:	0dc2      	lsrs	r2, r0, #23
 lsls r0,#9     @ extract mantissa
 8001d44:	0240      	lsls	r0, r0, #9
 lsrs r0,#9
 8001d46:	0a40      	lsrs	r0, r0, #9
 movs r4,#1
 8001d48:	2401      	movs	r4, #1
 lsls r4,#23
 8001d4a:	05e4      	lsls	r4, r4, #23
 orrs r0,r4     @ reinstate implied leading 1
 8001d4c:	4320      	orrs	r0, r4
 cmp r2,#255    @ test sign bit
 8001d4e:	2aff      	cmp	r2, #255	; 0xff
 uxtb r2,r2     @ clear it
 8001d50:	b2d2      	uxtb	r2, r2
 bls 1f         @ branch on positive
 8001d52:	d900      	bls.n	8001d56 <unpackx+0x14>
 rsbs r0,#0     @ negate mantissa
 8001d54:	4240      	negs	r0, r0
1:
 subs r2,#1
 8001d56:	3a01      	subs	r2, #1
 cmp r2,#254    @ zero/denormal/Inf/NaN?
 8001d58:	2afe      	cmp	r2, #254	; 0xfe
 bhs 2f
 8001d5a:	d201      	bcs.n	8001d60 <unpackx+0x1e>
 subs r2,#126   @ remove exponent bias: can now be -126..+127
 8001d5c:	3a7e      	subs	r2, #126	; 0x7e
 bx r14
 8001d5e:	4770      	bx	lr

2:              @ here with special-case values
 cmp r0,#0
 8001d60:	2800      	cmp	r0, #0
 mov r0,r4      @ set mantissa to +1
 8001d62:	4620      	mov	r0, r4
 bpl 3f
 8001d64:	d500      	bpl.n	8001d68 <unpackx+0x26>
 rsbs r0,#0     @ zero/denormal/Inf/NaN: mantissa=+/-1
 8001d66:	4240      	negs	r0, r0
3:
 subs r2,#126   @ zero/denormal: exponent -> -127; Inf, NaN: exponent -> 128
 8001d68:	3a7e      	subs	r2, #126	; 0x7e
 lsls r2,#2     @ zero/denormal: exponent -> -508; Inf, NaN: exponent -> 512
 8001d6a:	0092      	lsls	r2, r2, #2
 adds r2,#128   @ zero/denormal: exponent -> -380; Inf, NaN: exponent -> 640
 8001d6c:	3280      	adds	r2, #128	; 0x80
 bx r14
 8001d6e:	4770      	bx	lr

08001d70 <packx>:

@ normalise and pack signed mantissa in r0 nominally 3Q29, signed exponent in r2-> IEEE single in r0
@ trashes r4, preserves r1,r3
@ r5: "sticky bits", must be zero iff all result bits below r0 are zero for correct rounding
packx:
 lsrs r4,r0,#31 @ save sign bit
 8001d70:	0fc4      	lsrs	r4, r0, #31
 lsls r4,r4,#31 @ sign now in b31
 8001d72:	07e4      	lsls	r4, r4, #31
 bpl 2f         @ skip if positive
 8001d74:	d504      	bpl.n	8001d80 <packx0+0x2>
 cmp r5,#0
 8001d76:	2d00      	cmp	r5, #0
 beq 11f
 8001d78:	d000      	beq.n	8001d7c <packx+0xc>
 adds r0,#1     @ fiddle carry in to following rsb if sticky bits are non-zero
 8001d7a:	3001      	adds	r0, #1
11:
 rsbs r0,#0     @ can now treat r0 as unsigned
 8001d7c:	4240      	negs	r0, r0

08001d7e <packx0>:
packx0:
 bmi 3f         @ catch r0=0x80000000 case
 8001d7e:	d403      	bmi.n	8001d88 <packx0+0xa>
2:
 subs r2,#1     @ normalisation loop
 8001d80:	3a01      	subs	r2, #1
 adds r0,r0
 8001d82:	1800      	adds	r0, r0, r0
 beq 1f         @ zero? special case
 8001d84:	d012      	beq.n	8001dac <packx0+0x2e>
 bpl 2b         @ normalise so leading "1" in bit 31
 8001d86:	d5fb      	bpl.n	8001d80 <packx0+0x2>
3:
 adds r2,#129   @ (mis-)offset exponent
 8001d88:	3281      	adds	r2, #129	; 0x81
 bne 12f        @ special case: highest denormal can round to lowest normal
 8001d8a:	d101      	bne.n	8001d90 <packx0+0x12>
 adds r0,#0x80  @ in special case, need to add 256 to r0 for rounding
 8001d8c:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required
 8001d8e:	d205      	bcs.n	8001d9c <packx0+0x1e>
12:
 adds r0,#0x80  @ rounding
 8001d90:	3080      	adds	r0, #128	; 0x80
 bcs 4f         @ tripped carry? then have leading 1 in C as required (and result is even so can ignore sticky bits)
 8001d92:	d203      	bcs.n	8001d9c <packx0+0x1e>
 cmp r5,#0
 8001d94:	2d00      	cmp	r5, #0
 beq 7f         @ sticky bits zero?
 8001d96:	d00f      	beq.n	8001db8 <packx0+0x3a>
8:
 lsls r0,#1     @ remove leading 1
 8001d98:	0040      	lsls	r0, r0, #1
9:
 subs r2,#1     @ compensate exponent on this path
 8001d9a:	3a01      	subs	r2, #1
4:
 cmp r2,#254
 8001d9c:	2afe      	cmp	r2, #254	; 0xfe
 bge 5f         @ overflow?
 8001d9e:	da06      	bge.n	8001dae <packx0+0x30>
 adds r2,#1     @ correct exponent offset
 8001da0:	3201      	adds	r2, #1
 ble 10f        @ denormal/underflow?
 8001da2:	dd07      	ble.n	8001db4 <packx0+0x36>
 lsrs r0,#9     @ align mantissa
 8001da4:	0a40      	lsrs	r0, r0, #9
 lsls r2,#23    @ align exponent
 8001da6:	05d2      	lsls	r2, r2, #23
 orrs r0,r2     @ assemble exponent and mantissa
 8001da8:	4310      	orrs	r0, r2
6:
 orrs r0,r4     @ apply sign
 8001daa:	4320      	orrs	r0, r4
1:
 bx r14
 8001dac:	4770      	bx	lr

5:
 movs r0,#0xff  @ create infinity
 8001dae:	20ff      	movs	r0, #255	; 0xff
 lsls r0,#23
 8001db0:	05c0      	lsls	r0, r0, #23
 b 6b
 8001db2:	e7fa      	b.n	8001daa <packx0+0x2c>

10:
 movs r0,#0     @ create zero
 8001db4:	2000      	movs	r0, #0
 bx r14
 8001db6:	4770      	bx	lr

7:              @ sticky bit rounding case
 lsls r5,r0,#24 @ check bottom 8 bits of r0
 8001db8:	0605      	lsls	r5, r0, #24
 bne 8b         @ in rounding-tie case?
 8001dba:	d1ed      	bne.n	8001d98 <packx0+0x1a>
 lsrs r0,#9     @ ensure even result
 8001dbc:	0a40      	lsrs	r0, r0, #9
 lsls r0,#10
 8001dbe:	0280      	lsls	r0, r0, #10
 b 9b
 8001dc0:	e7eb      	b.n	8001d9a <packx0+0x1c>

08001dc2 <unpackxyalign>:

@ unpack two arguments (r0,r1) and shift one down to have common exponent, returned in r2; note that arguments are exchanged
@ sticky bits shifted off bottom of smaller argument in r5
@ following code is unnecessarily general for fadd, but is shared with atan2
unpackxyalign:
 push {r14}
 8001dc2:	b500      	push	{lr}
 bl unpackxy
 8001dc4:	f7ff ffb6 	bl	8001d34 <unpackxy>
 lsls r0,r0,#6  @ Q29
 8001dc8:	0180      	lsls	r0, r0, #6
 lsls r1,r1,#6  @ Q29
 8001dca:	0189      	lsls	r1, r1, #6
 subs r4,r2,r3  @ calculate shift
 8001dcc:	1ad4      	subs	r4, r2, r3
 bge 1f         @ x>=y?
 8001dce:	da07      	bge.n	8001de0 <unpackxyalign+0x1e>
 mov r2,r3      @ no: take common exponent from y
 8001dd0:	461a      	mov	r2, r3
 mov r5,r0      @ potential sticky bits from x
 8001dd2:	4605      	mov	r5, r0
 rsbs r4,#0     @ make shift positive
 8001dd4:	4264      	negs	r4, r4
 asrs r0,r4
 8001dd6:	4120      	asrs	r0, r4
 cmp r4,#32
 8001dd8:	2c20      	cmp	r4, #32
 blo 2f
 8001dda:	d307      	bcc.n	8001dec <unpackxyalign+0x2a>
 movs r0,#0    @ large shift, so all bits are sticky and result is zero
 8001ddc:	2000      	movs	r0, #0
 pop {r15}
 8001dde:	bd00      	pop	{pc}
1:
 mov r5,r1     @ common exponent from x; potential sticky bits from y
 8001de0:	460d      	mov	r5, r1
 asrs r1,r4
 8001de2:	4121      	asrs	r1, r4
 cmp r4,#32
 8001de4:	2c20      	cmp	r4, #32
 blo 2f
 8001de6:	d301      	bcc.n	8001dec <unpackxyalign+0x2a>
 movs r1,#0    @ large shift, so all bits are sticky and result is zero
 8001de8:	2100      	movs	r1, #0
 pop {r15}
 8001dea:	bd00      	pop	{pc}
2:
 rsbs r4,#0
 8001dec:	4264      	negs	r4, r4
 adds r4,#32
 8001dee:	3420      	adds	r4, #32
 lsls r5,r4    @ extract sticky bits
 8001df0:	40a5      	lsls	r5, r4
 pop {r15}
 8001df2:	bd00      	pop	{pc}

08001df4 <qfp_fsub>:

.thumb_func
qfp_fsub:
 movs r2,#1    @ subtract: flip sign bit of second argument and fall through to fadd
 8001df4:	2201      	movs	r2, #1
 lsls r2,#31
 8001df6:	07d2      	lsls	r2, r2, #31
 eors r1,r2
 8001df8:	4051      	eors	r1, r2

08001dfa <qfp_fadd>:
.thumb_func
qfp_fadd:
 push {r4,r5,r14}
 8001dfa:	b530      	push	{r4, r5, lr}
 bl unpackxyalign
 8001dfc:	f7ff ffe1 	bl	8001dc2 <unpackxyalign>
 adds r0,r1    @ do addition
 8001e00:	1840      	adds	r0, r0, r1
 bne 2f        @ not in Inf-Inf case?
 8001e02:	d103      	bne.n	8001e0c <packret>
 cmp r2,#200
 8001e04:	2ac8      	cmp	r2, #200	; 0xc8
 blt 2f
 8001e06:	db01      	blt.n	8001e0c <packret>
 movs r0,#1
 8001e08:	2001      	movs	r0, #1
 lsls r0,#29   @ for Inf-Inf, set mantissa to +1 to prevent zero result
 8001e0a:	0740      	lsls	r0, r0, #29

08001e0c <packret>:
2:
packret:       @ common return point: "pack and return"
 bl packx
 8001e0c:	f7ff ffb0 	bl	8001d70 <packx>
 pop {r4,r5,r15}
 8001e10:	bd30      	pop	{r4, r5, pc}

08001e12 <mul0>:

@ signed multiply r0 1Q23 by r1 4Q23, result in r0 7Q25, sticky bits in r5
@ trashes r3,r4
mul0:
 uxth r3,r0      @ Q23
 8001e12:	b283      	uxth	r3, r0
 asrs r4,r1,#16  @ Q7
 8001e14:	140c      	asrs	r4, r1, #16
 muls r3,r4      @ L*H, Q30 signed
 8001e16:	4363      	muls	r3, r4
 asrs r4,r0,#16  @ Q7
 8001e18:	1404      	asrs	r4, r0, #16
 uxth r5,r1      @ Q23
 8001e1a:	b28d      	uxth	r5, r1
 muls r4,r5      @ H*L, Q30 signed
 8001e1c:	436c      	muls	r4, r5
 adds r3,r4      @ sum of middle partial products
 8001e1e:	191b      	adds	r3, r3, r4
 uxth r4,r0
 8001e20:	b284      	uxth	r4, r0
 muls r4,r5      @ L*L, Q46 unsigned
 8001e22:	436c      	muls	r4, r5
 lsls r5,r4,#16  @ initialise sticky bits from low half of low partial product
 8001e24:	0425      	lsls	r5, r4, #16
 lsrs r4,#16     @ Q25
 8001e26:	0c24      	lsrs	r4, r4, #16
 adds r3,r4      @ add high half of low partial product to sum of middle partial products
 8001e28:	191b      	adds	r3, r3, r4
                 @ (cannot generate carry by limits on input arguments)
 asrs r0,#16     @ Q7
 8001e2a:	1400      	asrs	r0, r0, #16
 asrs r1,#16     @ Q7
 8001e2c:	1409      	asrs	r1, r1, #16
 muls r0,r1      @ H*H, Q14 signed
 8001e2e:	4348      	muls	r0, r1
 lsls r0,#11     @ high partial product Q25
 8001e30:	02c0      	lsls	r0, r0, #11
 lsls r1,r3,#27  @ sticky
 8001e32:	06d9      	lsls	r1, r3, #27
 orrs r5,r1      @ collect further sticky bits
 8001e34:	430d      	orrs	r5, r1
 asrs r1,r3,#5   @ middle partial products Q25
 8001e36:	1159      	asrs	r1, r3, #5
 adds r0,r1      @ final result
 8001e38:	1840      	adds	r0, r0, r1
 bx r14
 8001e3a:	4770      	bx	lr

08001e3c <qfp_fcmp>:

.thumb_func
qfp_fcmp:
 movs r2,#1      @ initialise result
 8001e3c:	2201      	movs	r2, #1
 lsls r3,r2,#31  @ r3=0x80000000
 8001e3e:	07d3      	lsls	r3, r2, #31
 tst r0,r3       @ check sign of first argument
 8001e40:	4218      	tst	r0, r3
 beq 1f
 8001e42:	d000      	beq.n	8001e46 <qfp_fcmp+0xa>
 subs r0,r3,r0   @ convert to 2's complement form for direct comparison
 8001e44:	1a18      	subs	r0, r3, r0
1:
 tst r1,r3       @ repeat for second argument
 8001e46:	4219      	tst	r1, r3
 beq 2f
 8001e48:	d000      	beq.n	8001e4c <qfp_fcmp+0x10>
 subs r1,r3,r1
 8001e4a:	1a59      	subs	r1, r3, r1
2:
 subs r0,r1     @ perform comparison
 8001e4c:	1a40      	subs	r0, r0, r1
 beq 4f         @ equal? return 0
 8001e4e:	d002      	beq.n	8001e56 <qfp_fcmp+0x1a>
 bgt 3f         @ r0>r1? return +1
 8001e50:	dc00      	bgt.n	8001e54 <qfp_fcmp+0x18>
 rsbs r2,#0     @ r0<r1: return -1
 8001e52:	4252      	negs	r2, r2
3:
 mov r0,r2
 8001e54:	4610      	mov	r0, r2
4:
 bx r14
 8001e56:	4770      	bx	lr

08001e58 <qfp_fmul>:

.thumb_func
qfp_fmul:
 push {r4,r5,r14}
 8001e58:	b530      	push	{r4, r5, lr}
 bl unpackxy
 8001e5a:	f7ff ff6b 	bl	8001d34 <unpackxy>
 add r2,r3      @ sum exponents
 8001e5e:	441a      	add	r2, r3
 adds r2,#4     @ adjust exponent for pack which expects Q29
 8001e60:	3204      	adds	r2, #4

08001e62 <fmul0>:
fmul0:
 bl mul0
 8001e62:	f7ff ffd6 	bl	8001e12 <mul0>
 b packret
 8001e66:	e7d1      	b.n	8001e0c <packret>

08001e68 <qfp_fdiv>:

.thumb_func
qfp_fdiv:
 push {r4,r5,r14}
 8001e68:	b530      	push	{r4, r5, lr}

08001e6a <fdiv_n>:
fdiv_n:
 bl unpackxy
 8001e6a:	f7ff ff63 	bl	8001d34 <unpackxy>
 movs r5,#1      @ result cannot fall exactly half-way between two representable numbers (exercise for reader - note that
 8001e6e:	2501      	movs	r5, #1
                 @ we do not handle denormals) so there will always be sticky bits
 cmp r0,#0       @ check divisor sign
 8001e70:	2800      	cmp	r0, #0
 bpl 1f
 8001e72:	d501      	bpl.n	8001e78 <fdiv_n+0xe>
 rsbs r0,#0      @ ensure divisor positive
 8001e74:	4240      	negs	r0, r0
 rsbs r1,#0      @ preserve sign of result
 8001e76:	4249      	negs	r1, r1
1:
 movs r4,#0
 8001e78:	2400      	movs	r4, #0
 cmp r1,#0       @ check sign of dividend
 8001e7a:	2900      	cmp	r1, #0
 bpl 2f
 8001e7c:	d501      	bpl.n	8001e82 <fdiv_n+0x18>
 rsbs r1,#0      @ result will be negative
 8001e7e:	4249      	negs	r1, r1
 mvns r4,r4      @ save sign as 0x00000000 or 0xffffffff
 8001e80:	43e4      	mvns	r4, r4
2:               @ now do unsigned division on unpacked values {r1,r3}/{r0,r2}
 cmp r3,#200     @ dividend is an infinity? return it
 8001e82:	2bc8      	cmp	r3, #200	; 0xc8
 bge 3f
 8001e84:	da0e      	bge.n	8001ea4 <infret+0x2>
 rsbs r2,#0
 8001e86:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero? return infinity
 8001e88:	2ac8      	cmp	r2, #200	; 0xc8
 bge 3f
 8001e8a:	da0b      	bge.n	8001ea4 <infret+0x2>
 adds r2,r3      @ difference of exponents
 8001e8c:	18d2      	adds	r2, r2, r3
 movs r3,#0x40   @ termination marker (calculate enough bits to do rounding correctly)
 8001e8e:	2340      	movs	r3, #64	; 0x40
2:               @ division loop
 subs r1,r0      @ trial subtraction
 8001e90:	1a09      	subs	r1, r1, r0
 bcs 1f
 8001e92:	d200      	bcs.n	8001e96 <fdiv_n+0x2c>
 add r1,r0       @ restore if failed
 8001e94:	4401      	add	r1, r0
1:
 adcs r3,r3      @ shift in result bit
 8001e96:	415b      	adcs	r3, r3
 add r1,r1       @ shift up dividend
 8001e98:	4409      	add	r1, r1
 bcc 2b          @ loop until marker appears in carry
 8001e9a:	d3f9      	bcc.n	8001e90 <fdiv_n+0x26>
 lsls r0,r3,#4   @ align for packing
 8001e9c:	0118      	lsls	r0, r3, #4
4:
 eors r0,r4      @ apply sign
 8001e9e:	4060      	eors	r0, r4
 b packret
 8001ea0:	e7b4      	b.n	8001e0c <packret>

08001ea2 <infret>:
infret:
 movs r4,#0
 8001ea2:	2400      	movs	r4, #0
3:
 mov r0,r1
 8001ea4:	4608      	mov	r0, r1
 movs r2,#255    @ return infinity
 8001ea6:	22ff      	movs	r2, #255	; 0xff
 b 4b
 8001ea8:	e7f9      	b.n	8001e9e <fdiv_n+0x34>

08001eaa <qfp_fdiv_fast>:
@ cases the value is known to be very close to an integer (usually 1) and so the bits of greater significance do not need
@ to be stored.
@ The reciprocal calculation has been tested for all possible input mantissa values.
.thumb_func
qfp_fdiv_fast:
 push {r4,r5,r14}
 8001eaa:	b530      	push	{r4, r5, lr}

08001eac <fdiv_fast_n>:
fdiv_fast_n:
 bl unpackxy
 8001eac:	f7ff ff42 	bl	8001d34 <unpackxy>
 cmp r0,#0
 8001eb0:	2800      	cmp	r0, #0
 bpl 1f
 8001eb2:	d501      	bpl.n	8001eb8 <fdiv_fast_n+0xc>
 rsbs r0,#0
 8001eb4:	4240      	negs	r0, r0
 rsbs r1,#0      @ ensure divisor positive
 8001eb6:	4249      	negs	r1, r1
1:
 cmp r3,#200
 8001eb8:	2bc8      	cmp	r3, #200	; 0xc8
 bge infret      @ dividend is an infinity? return it
 8001eba:	daf2      	bge.n	8001ea2 <infret>
 rsbs r2,#0
 8001ebc:	4252      	negs	r2, r2
 cmp r2,#200     @ divisor is zero?
 8001ebe:	2ac8      	cmp	r2, #200	; 0xc8
 bge infret      @ return infinity
 8001ec0:	daef      	bge.n	8001ea2 <infret>
 adds r2,r3      @ difference of exponents
 8001ec2:	18d2      	adds	r2, r2, r3
 adr r4,rcpapp-8 @ the first 8 elements of the table are never accessed because of the mantissa's leading 1
 8001ec4:	a423      	add	r4, pc, #140	; (adr r4, 8001f54 <qfp_fsqrt_fast+0x5a>)
 lsrs r3,r0,#20  @ y Q23; y>>20 Q7
 8001ec6:	0d03      	lsrs	r3, r0, #20
 ldrb r4,[r4,r3] @ m=rcpapp[(y>>20)&7]; // Q8, .5<m<1
 8001ec8:	5ce4      	ldrb	r4, [r4, r3]

 lsls r3,r4,#2   @ m<<2         // Q10  first Newton-Raphson iteration
 8001eca:	00a3      	lsls	r3, r4, #2
 muls r3,r0      @ s=y*(m<<2);  // Q33
 8001ecc:	4343      	muls	r3, r0
 lsls r4,#8      @ m<<=8;       // Q16
 8001ece:	0224      	lsls	r4, r4, #8
 asrs r3,#21     @ s>>=21;      // Q12
 8001ed0:	155b      	asrs	r3, r3, #21
 muls r3,r4      @ s*=m;        // Q28
 8001ed2:	4363      	muls	r3, r4
 asrs r3,#12     @ s>>=12;      // Q16
 8001ed4:	131b      	asrs	r3, r3, #12
 subs r4,r3      @ m=m-s;       // Q16
 8001ed6:	1ae4      	subs	r4, r4, r3

 mov r3,r4       @ s=y*m        // Q39 second Newton-Raphson iteration
 8001ed8:	4623      	mov	r3, r4
 muls r4,r0      @ ...
 8001eda:	4344      	muls	r4, r0
 asrs r4,#16     @ s>>=16;      // Q23
 8001edc:	1424      	asrs	r4, r4, #16
 muls r4,r3      @ s*=m;        // Q39
 8001ede:	435c      	muls	r4, r3
 lsls r3,#8      @ m<<=8;       // Q24
 8001ee0:	021b      	lsls	r3, r3, #8
 asrs r4,#15     @ s>>=15;      // Q24
 8001ee2:	13e4      	asrs	r4, r4, #15
 subs r3,r4      @ m=m-s;       // Q24
 8001ee4:	1b1b      	subs	r3, r3, r4

 lsls r4,r3,#7   @ \/ s=y*m;    // Q47 third Newton-Raphson iteration
 8001ee6:	01dc      	lsls	r4, r3, #7
 muls r3,r0      @ /\ m<<=7;    // Q31
 8001ee8:	4343      	muls	r3, r0
 asrs r3,#15     @ s>>=15;      // Q32
 8001eea:	13db      	asrs	r3, r3, #15
 lsrs r0,r4,#16  @ s*=(m>>16);  // Q47
 8001eec:	0c20      	lsrs	r0, r4, #16
 muls r3,r0      @ ...
 8001eee:	4343      	muls	r3, r0
 asrs r3,#16     @ s>>=16;      // Q31
 8001ef0:	141b      	asrs	r3, r3, #16
 subs r0,r4,r3   @ m=m-s;       // Q31
 8001ef2:	1ae0      	subs	r0, r4, r3

08001ef4 <div0>:
div0:
 adds r0,#7      @ rounding; reduce systematic error
 8001ef4:	3007      	adds	r0, #7
 lsrs r0,#4      @ Q27
 8001ef6:	0900      	lsrs	r0, r0, #4
 b fmul0         @ drop into multiplication code to calculate result
 8001ef8:	e7b3      	b.n	8001e62 <fmul0>

08001efa <qfp_fsqrt_fast>:
@ Again, the fixed-point calculation is carefully implemented to preserve accuracy, and similar comments to those
@ made above on the fast division routine apply.
@ The reciprocal square root calculation has been tested for all possible (possibly shifted) input mantissa values.
.thumb_func
qfp_fsqrt_fast:
 push {r4,r5,r14}
 8001efa:	b530      	push	{r4, r5, lr}
 bl unpackx
 8001efc:	f7ff ff21 	bl	8001d42 <unpackx>
 movs r1,r0
 8001f00:	0001      	movs	r1, r0
 bmi infret       @ negative? return -Inf
 8001f02:	d4ce      	bmi.n	8001ea2 <infret>
 asrs r0,r2,#1    @ check LSB of exponent
 8001f04:	1050      	asrs	r0, r2, #1
 bcc 1f
 8001f06:	d300      	bcc.n	8001f0a <qfp_fsqrt_fast+0x10>
 lsls r1,#1       @ was odd: double mantissa; mantissa y now 1..4 Q23
 8001f08:	0049      	lsls	r1, r1, #1
1:
 adds r2,#4       @ correction for packing
 8001f0a:	3204      	adds	r2, #4
 adr r4,rsqrtapp-4@ first four table entries are never accessed because of the mantissa's leading 1
 8001f0c:	a414      	add	r4, pc, #80	; (adr r4, 8001f60 <rcpapp+0x4>)
 lsrs r3,r1,#21   @ y>>21 Q2
 8001f0e:	0d4b      	lsrs	r3, r1, #21
 ldrb r4,[r4,r3]  @ initial approximation to reciprocal square root m Q8
 8001f10:	5ce4      	ldrb	r4, [r4, r3]

 lsrs r0,r1,#7    @ y>>7             // Q16 first Newton-Raphson iteration
 8001f12:	09c8      	lsrs	r0, r1, #7
 muls r0,r4       @ m*y
 8001f14:	4360      	muls	r0, r4
 muls r0,r4       @ s=m*y*y          // Q32
 8001f16:	4360      	muls	r0, r4
 asrs r0,#12      @ s>>12
 8001f18:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ m*s              // Q28
 8001f1a:	4360      	muls	r0, r4
 asrs r0,#13      @ m*s              // Q15
 8001f1c:	1340      	asrs	r0, r0, #13
 lsls r4,#8       @ m                // Q16
 8001f1e:	0224      	lsls	r4, r4, #8
 subs r4,r0       @ m=(m<<8)-(s>>13) // Q16-Q15/2 -> Q16
 8001f20:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // second Newton-Raphson iteration
 8001f22:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8001f24:	4340      	muls	r0, r0
 lsrs r0,#16      @ u>>16            // Q16
 8001f26:	0c00      	lsrs	r0, r0, #16
 lsrs r3,r1,#7    @ y>>7             // Q16
 8001f28:	09cb      	lsrs	r3, r1, #7
 muls r0,r3       @ s=u*(y>>7)       // Q32
 8001f2a:	4358      	muls	r0, r3
 asrs r0,#12      @ s>>12            // Q20
 8001f2c:	1300      	asrs	r0, r0, #12
 muls r0,r4       @ s*m              // Q36
 8001f2e:	4360      	muls	r0, r4
 asrs r0,#21      @ s*m              // Q15
 8001f30:	1540      	asrs	r0, r0, #21
 subs r4,r0       @ m=m-s            // Q16-Q15/2
 8001f32:	1a24      	subs	r4, r4, r0

 mov r0,r4        @                  // third Newton-Raphson iteration
 8001f34:	4620      	mov	r0, r4
 muls r0,r0       @ u=m*m            // Q32
 8001f36:	4340      	muls	r0, r0
 lsrs r3,r0,#12   @ now multiply u and y in two parts: u>>12
 8001f38:	0b03      	lsrs	r3, r0, #12
 muls r3,r1       @ first partial product (u>>12)*y Q43
 8001f3a:	434b      	muls	r3, r1
 lsls r0,#20
 8001f3c:	0500      	lsls	r0, r0, #20
 lsrs r0,#20      @ u&0xfff
 8001f3e:	0d00      	lsrs	r0, r0, #20
 lsrs r5,r1,#12   @ y>>12
 8001f40:	0b0d      	lsrs	r5, r1, #12
 muls r0,r5       @ second partial product (u&0xfff)*(y>>12) Q43
 8001f42:	4368      	muls	r0, r5
 add r0,r3        @ s=u*y            // Q43
 8001f44:	4418      	add	r0, r3
 asrs r0,#15      @ s>>15            // Q28
 8001f46:	13c0      	asrs	r0, r0, #15
 muls r0,r4       @ (s>>15)*m        // Q44
 8001f48:	4360      	muls	r0, r4
 lsls r4,#13      @ m<<13            // Q29
 8001f4a:	0364      	lsls	r4, r4, #13
 asrs r0,#16      @ s>>16            // Q28
 8001f4c:	1400      	asrs	r0, r0, #16
 subs r0,r4,r0    @                  // Q29-Q28/2
 8001f4e:	1a20      	subs	r0, r4, r0

 asrs r2,#1       @ halve exponent
 8001f50:	1052      	asrs	r2, r2, #1
 bcc div0         @ was y shifted?
 8001f52:	d3cf      	bcc.n	8001ef4 <div0>
 lsrs r0,#1
 8001f54:	0840      	lsrs	r0, r0, #1
 lsls r1,#1       @ shift y back
 8001f56:	0049      	lsls	r1, r1, #1
 b div0           @ round and complete with multiplication
 8001f58:	e7cc      	b.n	8001ef4 <div0>
 8001f5a:	46c0      	nop			; (mov r8, r8)

08001f5c <rcpapp>:
 8001f5c:	b2c3d8f1 	.word	0xb2c3d8f1
 8001f60:	848d98a4 	.word	0x848d98a4

08001f64 <rsqrtapp>:
 8001f64:	bbc9daf1 	.word	0xbbc9daf1
 8001f68:	979ea6b0 	.word	0x979ea6b0
 8001f6c:	82868b91 	.word	0x82868b91

08001f70 <qfp_float2int>:
.if include_conversions

@ convert float to signed int, rounding towards -Inf, clamping
.thumb_func
qfp_float2int:
 movs r1,#0      @ fall through
 8001f70:	2100      	movs	r1, #0

08001f72 <qfp_float2fix>:

@ convert float in r0 to signed fixed point in r0, clamping
.thumb_func
qfp_float2fix:
 push {r4,r14}
 8001f72:	b510      	push	{r4, lr}
 bl unpackx
 8001f74:	f7ff fee5 	bl	8001d42 <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8001f78:	440a      	add	r2, r1
 subs r2,#23     @ r2 is now amount of left shift required
 8001f7a:	3a17      	subs	r2, #23
 blt 1f          @ requires right shift?
 8001f7c:	db07      	blt.n	8001f8e <qfp_float2fix+0x1c>
 cmp r2,#7       @ overflow?
 8001f7e:	2a07      	cmp	r2, #7
 ble 4f
 8001f80:	dd17      	ble.n	8001fb2 <qfp_float2ufix+0x16>
3:               @ overflow
 asrs r1,r0,#31  @ +ve:0 -ve:0xffffffff
 8001f82:	17c1      	asrs	r1, r0, #31
 mvns r1,r1      @ +ve:0xffffffff -ve:0
 8001f84:	43c9      	mvns	r1, r1
 movs r0,#1
 8001f86:	2001      	movs	r0, #1
 lsls r0,#31
 8001f88:	07c0      	lsls	r0, r0, #31
5:
 eors r0,r1      @ +ve:0x7fffffff -ve:0x80000000 (unsigned path: 0xffffffff)
 8001f8a:	4048      	eors	r0, r1
 pop {r4,r15}
 8001f8c:	bd10      	pop	{r4, pc}
1:
 rsbs r2,#0      @ right shift for r0, >0
 8001f8e:	4252      	negs	r2, r2
 cmp r2,#32
 8001f90:	2a20      	cmp	r2, #32
 blt 2f          @ more than 32 bits of right shift?
 8001f92:	db00      	blt.n	8001f96 <qfp_float2fix+0x24>
 movs r2,#32
 8001f94:	2220      	movs	r2, #32
2:
 asrs r0,r0,r2
 8001f96:	4110      	asrs	r0, r2
 pop {r4,r15}
 8001f98:	bd10      	pop	{r4, pc}

08001f9a <qfp_float2uint>:

@ unsigned version
.thumb_func
qfp_float2uint:
 movs r1,#0      @ fall through
 8001f9a:	2100      	movs	r1, #0

08001f9c <qfp_float2ufix>:
.thumb_func
qfp_float2ufix:
 push {r4,r14}
 8001f9c:	b510      	push	{r4, lr}
 bl unpackx
 8001f9e:	f7ff fed0 	bl	8001d42 <unpackx>
 add r2,r1       @ incorporate binary point position into exponent
 8001fa2:	440a      	add	r2, r1
 movs r1,r0
 8001fa4:	0001      	movs	r1, r0
 bmi 5b          @ negative? return zero
 8001fa6:	d4f0      	bmi.n	8001f8a <qfp_float2fix+0x18>
 subs r2,#23     @ r2 is now amount of left shift required
 8001fa8:	3a17      	subs	r2, #23
 blt 1b          @ requires right shift?
 8001faa:	dbf0      	blt.n	8001f8e <qfp_float2fix+0x1c>
 mvns r1,r0      @ ready to return 0xffffffff
 8001fac:	43c1      	mvns	r1, r0
 cmp r2,#8       @ overflow?
 8001fae:	2a08      	cmp	r2, #8
 bgt 5b
 8001fb0:	dceb      	bgt.n	8001f8a <qfp_float2fix+0x18>
4:
 lsls r0,r0,r2   @ result fits, left shifted
 8001fb2:	4090      	lsls	r0, r2
 pop {r4,r15}
 8001fb4:	bd10      	pop	{r4, pc}

08001fb6 <qfp_int2float>:

@ convert signed int to float, rounding
.thumb_func
qfp_int2float:
 movs r1,#0      @ fall through
 8001fb6:	2100      	movs	r1, #0

08001fb8 <qfp_fix2float>:

@ convert signed fix to float, rounding; number of r0 bits after point in r1
.thumb_func
qfp_fix2float:
 push {r4,r5,r14}
 8001fb8:	b530      	push	{r4, r5, lr}
1:
 movs r2,#29
 8001fba:	221d      	movs	r2, #29
 subs r2,r1      @ fix exponent
 8001fbc:	1a52      	subs	r2, r2, r1

08001fbe <packretns>:
packretns:       @ pack and return, sticky bits=0
 movs r5,#0
 8001fbe:	2500      	movs	r5, #0
 b packret
 8001fc0:	e724      	b.n	8001e0c <packret>

08001fc2 <qfp_uint2float>:

@ unsigned version
.thumb_func
qfp_uint2float:
 movs r1,#0      @ fall through
 8001fc2:	2100      	movs	r1, #0

08001fc4 <qfp_ufix2float>:
.thumb_func
qfp_ufix2float:
 push {r4,r5,r14}
 8001fc4:	b530      	push	{r4, r5, lr}
 cmp r0,#0
 8001fc6:	2800      	cmp	r0, #0
 bge 1b          @ treat <2^31 as signed
 8001fc8:	daf7      	bge.n	8001fba <qfp_fix2float+0x2>
 movs r2,#30
 8001fca:	221e      	movs	r2, #30
 subs r2,r1      @ fix exponent
 8001fcc:	1a52      	subs	r2, r2, r1
 lsls r5,r0,#31  @ one sticky bit
 8001fce:	07c5      	lsls	r5, r0, #31
 lsrs r0,#1
 8001fd0:	0840      	lsrs	r0, r0, #1
 b packret
 8001fd2:	e71b      	b.n	8001e0c <packret>

08001fd4 <cordic_start>:
@ r3: coefficient pointer
@ r4,r8: m
@ r5: i (shift)

cordic_start: @ initialisation
 mov r7,r8
 8001fd4:	4647      	mov	r7, r8
 push {r7}
 8001fd6:	b480      	push	{r7}
 movs r5,#0   @ initial shift=0
 8001fd8:	2500      	movs	r5, #0
 mov r8,r4
 8001fda:	46a0      	mov	r8, r4
 b 5f
 8001fdc:	e00d      	b.n	8001ffa <cordic_rstep+0x16>

08001fde <cordic_vstep>:

cordic_vstep: @ one step of algorithm in vector mode
 cmp r1,#0    @ check sign of y
 8001fde:	2900      	cmp	r1, #0
 bgt 4f
 8001fe0:	dc02      	bgt.n	8001fe8 <cordic_rstep+0x4>
 b 1f
 8001fe2:	e005      	b.n	8001ff0 <cordic_rstep+0xc>

08001fe4 <cordic_rstep>:
cordic_rstep: @ one step of algorithm in rotation mode
 cmp r2,#0    @ check sign of angle
 8001fe4:	2a00      	cmp	r2, #0
 bge 1f
 8001fe6:	da03      	bge.n	8001ff0 <cordic_rstep+0xc>
4:
 subs r1,r6   @ negative rotation: y=y-(x>>i)
 8001fe8:	1b89      	subs	r1, r1, r6
 rsbs r7,#0
 8001fea:	427f      	negs	r7, r7
 adds r2,r4   @ accumulate angle
 8001fec:	1912      	adds	r2, r2, r4
 b 2f
 8001fee:	e001      	b.n	8001ff4 <cordic_rstep+0x10>
1:
 adds r1,r6   @ positive rotation: y=y+(x>>i)
 8001ff0:	1989      	adds	r1, r1, r6
 subs r2,r4   @ accumulate angle
 8001ff2:	1b12      	subs	r2, r2, r4
2:
 mov r4,r8
 8001ff4:	4644      	mov	r4, r8
 muls r7,r4   @ apply sign from m
 8001ff6:	4367      	muls	r7, r4
 subs r0,r7   @ finish rotation: x=x{+/-}(y>>i)
 8001ff8:	1bc0      	subs	r0, r0, r7
5:
 ldr r4,[r3]  @ fetch next angle from table
 8001ffa:	681c      	ldr	r4, [r3, #0]
 adds r3,#4   @ bump pointer
 8001ffc:	3304      	adds	r3, #4
 lsrs r4,#1   @ repeated angle?
 8001ffe:	0864      	lsrs	r4, r4, #1
 bcs 3f
 8002000:	d200      	bcs.n	8002004 <cordic_rstep+0x20>
 adds r5,#1   @ adjust shift if not
 8002002:	3501      	adds	r5, #1
3:
 mov r6,r0
 8002004:	4606      	mov	r6, r0
 asrs r6,r5   @ x>>i
 8002006:	412e      	asrs	r6, r5
 mov r7,r1
 8002008:	460f      	mov	r7, r1
 asrs r7,r5   @ y>>i
 800200a:	412f      	asrs	r7, r5
 lsrs r4,#1   @ shift end flag into carry
 800200c:	0864      	lsrs	r4, r4, #1
 bx r14
 800200e:	4770      	bx	lr

08002010 <cordic_rot>:

@ CORDIC rotation mode
cordic_rot:
 push {r6,r7,r14}
 8002010:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 8002012:	f7ff ffdf 	bl	8001fd4 <cordic_start>
1:
 bl cordic_rstep
 8002016:	f7ff ffe5 	bl	8001fe4 <cordic_rstep>
 bcc 1b            @ step until table finished
 800201a:	d3fc      	bcc.n	8002016 <cordic_rot+0x6>
 asrs r6,r0,#14    @ remaining small rotations can be linearised: see IV.B of paper referenced above
 800201c:	1386      	asrs	r6, r0, #14
 asrs r7,r1,#14
 800201e:	138f      	asrs	r7, r1, #14
 asrs r2,#3
 8002020:	10d2      	asrs	r2, r2, #3
 muls r6,r2        @ all remaining CORDIC steps in a multiplication
 8002022:	4356      	muls	r6, r2
 muls r7,r2
 8002024:	4357      	muls	r7, r2
 mov r4,r8
 8002026:	4644      	mov	r4, r8
 muls r7,r4
 8002028:	4367      	muls	r7, r4
 asrs r6,#12
 800202a:	1336      	asrs	r6, r6, #12
 asrs r7,#12
 800202c:	133f      	asrs	r7, r7, #12
 subs r0,r7        @ x=x{+/-}(yz>>k)
 800202e:	1bc0      	subs	r0, r0, r7
 adds r1,r6        @ y=y+(xz>>k)
 8002030:	1989      	adds	r1, r1, r6

08002032 <cordic_exit>:
cordic_exit:
 pop {r7}
 8002032:	bc80      	pop	{r7}
 mov r8,r7
 8002034:	46b8      	mov	r8, r7
 pop {r6,r7,r15}
 8002036:	bdc0      	pop	{r6, r7, pc}

08002038 <cordic_vec>:

@ CORDIC vector mode
cordic_vec:
 push {r6,r7,r14}
 8002038:	b5c0      	push	{r6, r7, lr}
 bl cordic_start   @ initialise
 800203a:	f7ff ffcb 	bl	8001fd4 <cordic_start>
1:
 bl cordic_vstep
 800203e:	f7ff ffce 	bl	8001fde <cordic_vstep>
 bcc 1b            @ step until table finished
 8002042:	d3fc      	bcc.n	800203e <cordic_vec+0x6>
4:
 cmp r1,#0         @ continue as in cordic_vstep but without using table; x is not affected as y is small
 8002044:	2900      	cmp	r1, #0
 bgt 2f            @ check sign of y
 8002046:	dc02      	bgt.n	800204e <cordic_vec+0x16>
 adds r1,r6        @ positive rotation: y=y+(x>>i)
 8002048:	1989      	adds	r1, r1, r6
 subs r2,r4        @ accumulate angle
 800204a:	1b12      	subs	r2, r2, r4
 b 3f
 800204c:	e001      	b.n	8002052 <cordic_vec+0x1a>
2:
 subs r1,r6        @ negative rotation: y=y-(x>>i)
 800204e:	1b89      	subs	r1, r1, r6
 adds r2,r4        @ accumulate angle
 8002050:	1912      	adds	r2, r2, r4
3:
 asrs r6,#1
 8002052:	1076      	asrs	r6, r6, #1
 asrs r4,#1        @ next "table entry"
 8002054:	1064      	asrs	r4, r4, #1
 bne 4b
 8002056:	d1f5      	bne.n	8002044 <cordic_vec+0xc>
 b cordic_exit
 8002058:	e7eb      	b.n	8002032 <cordic_exit>

0800205a <qfp_fsin>:

.thumb_func
qfp_fsin:            @ calculate sin and cos using CORDIC rotation method
 push {r4,r5,r14}
 800205a:	b530      	push	{r4, r5, lr}
 movs r1,#24
 800205c:	2118      	movs	r1, #24
 bl qfp_float2fix    @ range reduction by repeated subtraction/addition in fixed point
 800205e:	f7ff ff88 	bl	8001f72 <qfp_float2fix>
 ldr r4,pi_q29
 8002062:	4c48      	ldr	r4, [pc, #288]	; (8002184 <pi_q29>)
 lsrs r4,#4          @ 2pi Q24
 8002064:	0924      	lsrs	r4, r4, #4
1:
 subs r0,r4
 8002066:	1b00      	subs	r0, r0, r4
 bge 1b
 8002068:	dafd      	bge.n	8002066 <qfp_fsin+0xc>
1:
 adds r0,r4
 800206a:	1900      	adds	r0, r0, r4
 bmi 1b              @ now in range 0..2pi
 800206c:	d4fd      	bmi.n	800206a <qfp_fsin+0x10>
 lsls r2,r0,#2       @ z Q26
 800206e:	0082      	lsls	r2, r0, #2
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 8002070:	0065      	lsls	r5, r4, #1
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 8002072:	483e      	ldr	r0, [pc, #248]	; (800216c <qfp_fatan2+0x30>)
 movs r1,#0
 8002074:	2100      	movs	r1, #0
1:
 cmp r2,r4           @ >pi/2?
 8002076:	42a2      	cmp	r2, r4
 blt 2f
 8002078:	db02      	blt.n	8002080 <qfp_fsin+0x26>
 subs r2,r5          @ reduce range to -pi/2..pi/2
 800207a:	1b52      	subs	r2, r2, r5
 rsbs r0,#0          @ rotate vector by pi
 800207c:	4240      	negs	r0, r0
 b 1b
 800207e:	e7fa      	b.n	8002076 <qfp_fsin+0x1c>
2:
 lsls r2,#3          @ Q29
 8002080:	00d2      	lsls	r2, r2, #3
 adr r3,tab_cc       @ circular coefficients
 8002082:	a340      	add	r3, pc, #256	; (adr r3, 8002184 <pi_q29>)
 movs r4,#1          @ m=1
 8002084:	2401      	movs	r4, #1
 bl cordic_rot
 8002086:	f7ff ffc3 	bl	8002010 <cordic_rot>
 adds r1,#9          @ fiddle factor to make sin(0)==0
 800208a:	3109      	adds	r1, #9
 movs r2,#0          @ exponents to zero
 800208c:	2200      	movs	r2, #0
 movs r3,#0
 800208e:	2300      	movs	r3, #0
 movs r5,#0          @ no sticky bits
 8002090:	2500      	movs	r5, #0
 bl packx            @ pack cosine
 8002092:	f7ff fe6d 	bl	8001d70 <packx>
 bl xchxy
 8002096:	f7ff fe49 	bl	8001d2c <xchxy>
 b packretns         @ pack sine
 800209a:	e790      	b.n	8001fbe <packretns>

0800209c <qfp_fcos>:

.thumb_func
qfp_fcos:
 push {r14}
 800209c:	b500      	push	{lr}
 bl qfp_fsin
 800209e:	f7ff ffdc 	bl	800205a <qfp_fsin>
 mov r0,r1           @ extract cosine result
 80020a2:	4608      	mov	r0, r1
 pop {r15}
 80020a4:	bd00      	pop	{pc}

080020a6 <qfp_ftan>:

.thumb_func
qfp_ftan:
 push {r4,r5,r14}
 80020a6:	b530      	push	{r4, r5, lr}
 bl qfp_fsin         @ sine in r0/r2, cosine in r1/r3
 80020a8:	f7ff ffd7 	bl	800205a <qfp_fsin>
.if include_faster
 b fdiv_fast_n       @ sin/cos
 80020ac:	e6fe      	b.n	8001eac <fdiv_fast_n>

080020ae <qfp_fexp>:

.endif

.thumb_func
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 80020ae:	b530      	push	{r4, r5, lr}
 movs r1,#24
 80020b0:	2118      	movs	r1, #24
 bl qfp_float2fix    @ Q24: covers entire valid input range
 80020b2:	f7ff ff5e 	bl	8001f72 <qfp_float2fix>
 asrs r1,r0,#16      @ Q8
 80020b6:	1401      	asrs	r1, r0, #16
 ldr r2,=#5909       @ log_2(e) Q12
 80020b8:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <qfp_fatan2+0x34>)
 muls r1,r2          @ estimate exponent of result Q20
 80020ba:	4351      	muls	r1, r2
 asrs r1,#19         @ Q1
 80020bc:	14c9      	asrs	r1, r1, #19
 adds r1,#1          @ rounding
 80020be:	3101      	adds	r1, #1
 asrs r1,#1          @ rounded estimate of exponent of result
 80020c0:	1049      	asrs	r1, r1, #1
 push {r1}           @ save for later
 80020c2:	b402      	push	{r1}
 lsls r2,r0,#5       @ Q29
 80020c4:	0142      	lsls	r2, r0, #5
 ldr r0,=#0x162e42ff @ ln(2) Q29
 80020c6:	482b      	ldr	r0, [pc, #172]	; (8002174 <qfp_fatan2+0x38>)
 muls r1,r0          @ accurate contribution of estimated exponent
 80020c8:	4341      	muls	r1, r0
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 80020ca:	1a52      	subs	r2, r2, r1
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 80020cc:	482a      	ldr	r0, [pc, #168]	; (8002178 <qfp_fatan2+0x3c>)
 movs r1,#0
 80020ce:	2100      	movs	r1, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 80020d0:	a339      	add	r3, pc, #228	; (adr r3, 80021b8 <tab_ch>)
 mvns r4,r1          @ m=-1
 80020d2:	43cc      	mvns	r4, r1
 bl cordic_rot       @ calculate cosh and sinh
 80020d4:	f7ff ff9c 	bl	8002010 <cordic_rot>
 add r0,r1           @ exp=cosh+sinh
 80020d8:	4408      	add	r0, r1
 pop {r2}            @ recover exponent
 80020da:	bc04      	pop	{r2}
 b packretns         @ pack result
 80020dc:	e76f      	b.n	8001fbe <packretns>

080020de <qfp_fsqrt>:

.thumb_func
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 80020de:	b530      	push	{r4, r5, lr}
 bl unpackx
 80020e0:	f7ff fe2f 	bl	8001d42 <unpackx>
 movs r1,r0          @ -ve argument?
 80020e4:	0001      	movs	r1, r0
 bmi 3f              @ return -Inf, -Inf
 80020e6:	d415      	bmi.n	8002114 <qfp_fsqrt+0x36>
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 80020e8:	4924      	ldr	r1, [pc, #144]	; (800217c <qfp_fatan2+0x40>)
 bl mul0             @ Q29
 80020ea:	f7ff fe92 	bl	8001e12 <mul0>
 asrs r1,r2,#1       @ halve exponent
 80020ee:	1051      	asrs	r1, r2, #1
 bcc 1f
 80020f0:	d301      	bcc.n	80020f6 <qfp_fsqrt+0x18>
 adds r1,#1          @ was odd: add 1 and shift mantissa
 80020f2:	3101      	adds	r1, #1
 asrs r0,#1
 80020f4:	1040      	asrs	r0, r0, #1
1:
 push {r1}           @ save exponent/2 for later
 80020f6:	b402      	push	{r1}
 mov r1,r0
 80020f8:	4601      	mov	r1, r0
 ldr r3,=#0x0593C2B9 @ re-use constant
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <qfp_fatan2+0x40>)
 lsls r3,#2
 80020fc:	009b      	lsls	r3, r3, #2
 adds r0,r3          @ "a+1"
 80020fe:	18c0      	adds	r0, r0, r3
 subs r1,r3          @ "a-1"
 8002100:	1ac9      	subs	r1, r1, r3
 movs r2,#0
 8002102:	2200      	movs	r2, #0
 adr r3,tab_ch       @ hyperbolic coefficients
 8002104:	a32c      	add	r3, pc, #176	; (adr r3, 80021b8 <tab_ch>)
 mvns r4,r2          @ m=-1
 8002106:	43d4      	mvns	r4, r2
 bl cordic_vec
 8002108:	f7ff ff96 	bl	8002038 <cordic_vec>
 mov r1,r2           @ keep ln result
 800210c:	4611      	mov	r1, r2
 pop {r2}            @ retrieve exponent/2
 800210e:	bc04      	pop	{r2}
2:
 movs r3,r2
 8002110:	0013      	movs	r3, r2
 b packretns         @ pack sqrt result
 8002112:	e754      	b.n	8001fbe <packretns>

3:
 movs r2,#255
 8002114:	22ff      	movs	r2, #255	; 0xff
 b 2b
 8002116:	e7fb      	b.n	8002110 <qfp_fsqrt+0x32>

08002118 <qfp_fln>:

.thumb_func
qfp_fln:
 push {r4,r5,r14}
 8002118:	b530      	push	{r4, r5, lr}
 bl qfp_fsqrt            @ get unpacked ln in r1/r3; exponent has been halved
 800211a:	f7ff ffe0 	bl	80020de <qfp_fsqrt>
 cmp r3,#70              @ ln(Inf)?
 800211e:	2b46      	cmp	r3, #70	; 0x46
 bgt 2f                  @ return Inf
 8002120:	dc0a      	bgt.n	8002138 <qfp_fln+0x20>
 rsbs r3,#0
 8002122:	425b      	negs	r3, r3
 cmp r3,#70
 8002124:	2b46      	cmp	r3, #70	; 0x46
 bgt 1f                  @ ln(0)? return -Inf
 8002126:	dc06      	bgt.n	8002136 <qfp_fln+0x1e>
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002128:	4815      	ldr	r0, [pc, #84]	; (8002180 <qfp_fatan2+0x44>)
 muls r0,r3              @ contribution from negated, halved exponent
 800212a:	4358      	muls	r0, r3
 adds r1,#8              @ round result of ln
 800212c:	3108      	adds	r1, #8
 asrs r1,#4              @ Q24
 800212e:	1109      	asrs	r1, r1, #4
 subs r0,r1,r0           @ add in contribution from (negated) exponent
 8002130:	1a08      	subs	r0, r1, r0
 movs r2,#5              @ pack expects Q29
 8002132:	2205      	movs	r2, #5
 b packretns
 8002134:	e743      	b.n	8001fbe <packretns>
1:
 mvns r0,r0              @ make result -Inf
 8002136:	43c0      	mvns	r0, r0
2:
 movs r2,#255
 8002138:	22ff      	movs	r2, #255	; 0xff
 b packretns
 800213a:	e740      	b.n	8001fbe <packretns>

0800213c <qfp_fatan2>:

.thumb_func
qfp_fatan2:
 push {r4,r5,r14}
 800213c:	b530      	push	{r4, r5, lr}
 bl unpackxyalign        @ convert to fixed point (ensure common exponent, which is discarded)
 800213e:	f7ff fe40 	bl	8001dc2 <unpackxyalign>
 movs r2,#0              @ initial angle
 8002142:	2200      	movs	r2, #0
 cmp r0,#0               @ x negative
 8002144:	2800      	cmp	r0, #0
 bge 5f
 8002146:	da02      	bge.n	800214e <qfp_fatan2+0x12>
 rsbs r0,#0              @ rotate to 1st/4th quadrants
 8002148:	4240      	negs	r0, r0
 rsbs r1,#0
 800214a:	4249      	negs	r1, r1
 ldr r2,pi_q29           @ pi Q29
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <pi_q29>)
5:
 adr r3,tab_cc           @ circular coefficients
 800214e:	a30d      	add	r3, pc, #52	; (adr r3, 8002184 <pi_q29>)
 movs r4,#1              @ m=1
 8002150:	2401      	movs	r4, #1
 bl cordic_vec           @ also produces magnitude (with scaling factor 1.646760119), which is discarded
 8002152:	f7ff ff71 	bl	8002038 <cordic_vec>
 mov r0,r2               @ result here is -pi/2..3pi/2 Q29
 8002156:	4610      	mov	r0, r2
 ldr r2,pi_q29           @ pi Q29
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <pi_q29>)
 adds r4,r0,r2           @ attempt to fix -3pi/2..-pi case
 800215a:	1884      	adds	r4, r0, r2
 bcs 6f                  @ -pi/2..0? leave result as is
 800215c:	d202      	bcs.n	8002164 <qfp_fatan2+0x28>
 subs r4,r0,r2           @ <pi? leave as is
 800215e:	1a84      	subs	r4, r0, r2
 bmi 6f
 8002160:	d400      	bmi.n	8002164 <qfp_fatan2+0x28>
 subs r0,r4,r2           @ >pi: take off 2pi
 8002162:	1aa0      	subs	r0, r4, r2
6:
 subs r0,#1              @ fiddle factor so atan2(0,1)==0
 8002164:	3801      	subs	r0, #1
 movs r2,#0              @ exponent for pack
 8002166:	2200      	movs	r2, #0
 b packretns
 8002168:	e729      	b.n	8001fbe <packretns>
 800216a:	46c0      	nop			; (mov r8, r8)
1:
 adds r0,r4
 bmi 1b              @ now in range 0..2pi
 lsls r2,r0,#2       @ z Q26
 lsls r5,r4,#1       @ pi Q26 (r4=pi/2 Q26)
 ldr r0,=#0x136e9db4 @ initialise CORDIC x,y with scaling
 800216c:	136e9db4 	.word	0x136e9db4
qfp_fexp:            @ calculate cosh and sinh using rotation method; add to obtain exp
 push {r4,r5,r14}
 movs r1,#24
 bl qfp_float2fix    @ Q24: covers entire valid input range
 asrs r1,r0,#16      @ Q8
 ldr r2,=#5909       @ log_2(e) Q12
 8002170:	00001715 	.word	0x00001715
 asrs r1,#19         @ Q1
 adds r1,#1          @ rounding
 asrs r1,#1          @ rounded estimate of exponent of result
 push {r1}           @ save for later
 lsls r2,r0,#5       @ Q29
 ldr r0,=#0x162e42ff @ ln(2) Q29
 8002174:	162e42ff 	.word	0x162e42ff
 muls r1,r0          @ accurate contribution of estimated exponent
 subs r2,r1          @ residual to be exponentiated, approximately -.5..+.5 Q29
 ldr r0,=#0x2c9e15ca @ initialise CORDIC x,y with scaling
 8002178:	2c9e15ca 	.word	0x2c9e15ca
qfp_fsqrt:           @ calculate sqrt and ln using vector method
 push {r4,r5,r14}
 bl unpackx
 movs r1,r0          @ -ve argument?
 bmi 3f              @ return -Inf, -Inf
 ldr r1,=#0x0593C2B9 @ scale factor for CORDIC
 800217c:	0593c2b9 	.word	0x0593c2b9
 bgt 2f                  @ return Inf
 rsbs r3,#0
 cmp r3,#70
 bgt 1f                  @ ln(0)? return -Inf
3:
 ldr r0,=#0x0162e430     @ ln(4) Q24
 8002180:	0162e430 	.word	0x0162e430

08002184 <pi_q29>:
 8002184:	6487ed51 	.word	0x6487ed51
 8002188:	3b58ce0c 	.word	0x3b58ce0c
 800218c:	1f5b75f8 	.word	0x1f5b75f8
 8002190:	0feadd4c 	.word	0x0feadd4c
 8002194:	07fd56ec 	.word	0x07fd56ec
 8002198:	03ffaab8 	.word	0x03ffaab8
 800219c:	01fff554 	.word	0x01fff554
 80021a0:	00fffeac 	.word	0x00fffeac
 80021a4:	007fffd4 	.word	0x007fffd4
 80021a8:	003ffffc 	.word	0x003ffffc
 80021ac:	001ffffc 	.word	0x001ffffc
 80021b0:	00100000 	.word	0x00100000
 80021b4:	00080002 	.word	0x00080002

080021b8 <tab_ch>:
 80021b8:	464fa9ec 	.word	0x464fa9ec
 80021bc:	464fa9ed 	.word	0x464fa9ed
 80021c0:	20b15df4 	.word	0x20b15df4
 80021c4:	1015891c 	.word	0x1015891c
 80021c8:	0802ac44 	.word	0x0802ac44
 80021cc:	0802ac45 	.word	0x0802ac45
 80021d0:	04005564 	.word	0x04005564
 80021d4:	02000aac 	.word	0x02000aac
 80021d8:	01000154 	.word	0x01000154
 80021dc:	0080002c 	.word	0x0080002c
 80021e0:	00400004 	.word	0x00400004
 80021e4:	00200004 	.word	0x00200004
 80021e8:	00100000 	.word	0x00100000
 80021ec:	00080000 	.word	0x00080000
 80021f0:	00080003 	.word	0x00080003

080021f4 <qfp_lib_end>:
 80021f4:	00000000 	.word	0x00000000

080021f8 <acos>:

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ACOS]++;
 80021fa:	4d2f      	ldr	r5, [pc, #188]	; (80022b8 <acos+0xc0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80021fc:	4602      	mov	r2, r0
//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
    float_usage[USAGE_ACOS]++;
 80021fe:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002202:	460b      	mov	r3, r1
//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
    float_usage[USAGE_ACOS]++;
 8002204:	3401      	adds	r4, #1
 8002206:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22

//  arccos(x) = 2 * arctan(
//                      sqrt( 1 - x^2 ) /
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
 800220a:	4606      	mov	r6, r0
 800220c:	460f      	mov	r7, r1
    float_usage[USAGE_ACOS]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800220e:	f000 f937 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002212:	b998      	cbnz	r0, 800223c <acos+0x44>

    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002214:	4639      	mov	r1, r7
 8002216:	4630      	mov	r0, r6
 8002218:	f009 fb66 	bl	800b8e8 <__aeabi_d2f>
 800221c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002220:	4604      	mov	r4, r0
 8002222:	f7ff fe0b 	bl	8001e3c <qfp_fcmp>
 8002226:	b910      	cbnz	r0, 800222e <acos+0x36>
 8002228:	2000      	movs	r0, #0
 800222a:	2100      	movs	r1, #0
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 800222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }

    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 800222e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fe02 	bl	8001e3c <qfp_fcmp>
 8002238:	2800      	cmp	r0, #0
 800223a:	dd02      	ble.n	8002242 <acos+0x4a>
//                      ( 1 + x )
//                  ) where -1 < x <= 1
double acos(double x) {
    float_usage[USAGE_ACOS]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800223c:	2000      	movs	r0, #0
 800223e:	491f      	ldr	r1, [pc, #124]	; (80022bc <acos+0xc4>)
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 8002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    //  If the argument is +1, the value +0 is returned.
    if (qfp_fcmp(x, 1) == 0) { return 0; }

    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002242:	491f      	ldr	r1, [pc, #124]	; (80022c0 <acos+0xc8>)
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff fdf9 	bl	8001e3c <qfp_fcmp>
 800224a:	2800      	cmp	r0, #0
 800224c:	dbf6      	blt.n	800223c <acos+0x44>

    //  If x is -1, return Pi.
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }
 800224e:	491c      	ldr	r1, [pc, #112]	; (80022c0 <acos+0xc8>)
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fdf3 	bl	8001e3c <qfp_fcmp>
 8002256:	b918      	cbnz	r0, 8002260 <acos+0x68>
 8002258:	a115      	add	r1, pc, #84	; (adr r1, 80022b0 <acos+0xb8>)
 800225a:	e9d1 0100 	ldrd	r0, r1, [r1]
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return qfp_fmul(
        2.0f,
        atan2(
            qfp_fsqrt_fast(
 8002260:	4621      	mov	r1, r4
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fdf8 	bl	8001e58 <qfp_fmul>
 8002268:	4601      	mov	r1, r0
 800226a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800226e:	f7ff fdc1 	bl	8001df4 <qfp_fsub>
 8002272:	f7ff fe42 	bl	8001efa <qfp_fsqrt_fast>
                qfp_fsub( 
                    1.0f,
                    qfp_fmul( x , x ) 
                )
            ),
            qfp_fadd( 1.0f , x )
 8002276:	4621      	mov	r1, r4

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return qfp_fmul(
        2.0f,
        atan2(
            qfp_fsqrt_fast(
 8002278:	4606      	mov	r6, r0
                qfp_fsub( 
                    1.0f,
                    qfp_fmul( x , x ) 
                )
            ),
            qfp_fadd( 1.0f , x )
 800227a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800227e:	f7ff fdbc 	bl	8001dfa <qfp_fadd>
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return qfp_fmul(
        2.0f,
        atan2(
 8002282:	f009 fad9 	bl	800b838 <__aeabi_f2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4630      	mov	r0, r6
 800228c:	f009 fad4 	bl	800b838 <__aeabi_f2d>
 8002290:	4622      	mov	r2, r4
 8002292:	462b      	mov	r3, r5
 8002294:	f000 fa0e 	bl	80026b4 <atan2>

    //  If x is -1, return Pi.
    if (qfp_fcmp(x, -1) == 0) { return M_PI_2 * 2.0; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return qfp_fmul(
 8002298:	f009 fb26 	bl	800b8e8 <__aeabi_d2f>
 800229c:	4601      	mov	r1, r0
 800229e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022a2:	f7ff fdd9 	bl	8001e58 <qfp_fmul>
 80022a6:	f009 fac7 	bl	800b838 <__aeabi_f2d>
                )
            ),
            qfp_fadd( 1.0f , x )
        )
    );
}
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ac:	f3af 8000 	nop.w
 80022b0:	54442d18 	.word	0x54442d18
 80022b4:	400921fb 	.word	0x400921fb
 80022b8:	200005f4 	.word	0x200005f4
 80022bc:	7ff80000 	.word	0x7ff80000
 80022c0:	bf800000 	.word	0xbf800000

080022c4 <__wrap___aeabi_ddiv>:

///////////////////////////////////////////////////////////////////////////////
//  Table 2, Standard double precision floating-point arithmetic helper functions

//  double-precision division, n / d
double __wrap___aeabi_ddiv(double n, double d) { 
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DDIV]++;
 80022c6:	4d0a      	ldr	r5, [pc, #40]	; (80022f0 <__wrap___aeabi_ddiv+0x2c>)

///////////////////////////////////////////////////////////////////////////////
//  Table 2, Standard double precision floating-point arithmetic helper functions

//  double-precision division, n / d
double __wrap___aeabi_ddiv(double n, double d) { 
 80022c8:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DDIV]++;
 80022ca:	786c      	ldrb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 80022cc:	4610      	mov	r0, r2
///////////////////////////////////////////////////////////////////////////////
//  Table 2, Standard double precision floating-point arithmetic helper functions

//  double-precision division, n / d
double __wrap___aeabi_ddiv(double n, double d) { 
    float_usage[USAGE_AEABI_DDIV]++;
 80022ce:	3401      	adds	r4, #1

///////////////////////////////////////////////////////////////////////////////
//  Table 2, Standard double precision floating-point arithmetic helper functions

//  double-precision division, n / d
double __wrap___aeabi_ddiv(double n, double d) { 
 80022d0:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DDIV]++;
 80022d2:	706c      	strb	r4, [r5, #1]
    return qfp_fdiv_fast(n, d); 
 80022d4:	4619      	mov	r1, r3
 80022d6:	f009 fb07 	bl	800b8e8 <__aeabi_d2f>
 80022da:	4604      	mov	r4, r0
 80022dc:	4639      	mov	r1, r7
 80022de:	4630      	mov	r0, r6
 80022e0:	f009 fb02 	bl	800b8e8 <__aeabi_d2f>
 80022e4:	4621      	mov	r1, r4
 80022e6:	f7ff fde0 	bl	8001eaa <qfp_fdiv_fast>
 80022ea:	f009 faa5 	bl	800b838 <__aeabi_f2d>
}
 80022ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f0:	200005f4 	.word	0x200005f4

080022f4 <__wrap___aeabi_dmul>:
//  aeabi_ddiv(-2205.1969, 270.8886) = -8.140604292687105
//  aeabi_ddiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_ddiv(-2205.1969, -270.8886) = 8.140604292687105

//  double-precision multiplication
double __wrap___aeabi_dmul(double x, double y) { 
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DMUL]++;
 80022f6:	4d0a      	ldr	r5, [pc, #40]	; (8002320 <__wrap___aeabi_dmul+0x2c>)
//  aeabi_ddiv(-2205.1969, 270.8886) = -8.140604292687105
//  aeabi_ddiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_ddiv(-2205.1969, -270.8886) = 8.140604292687105

//  double-precision multiplication
double __wrap___aeabi_dmul(double x, double y) { 
 80022f8:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DMUL]++;
 80022fa:	78ac      	ldrb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 80022fc:	4610      	mov	r0, r2
//  aeabi_ddiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_ddiv(-2205.1969, -270.8886) = 8.140604292687105

//  double-precision multiplication
double __wrap___aeabi_dmul(double x, double y) { 
    float_usage[USAGE_AEABI_DMUL]++;
 80022fe:	3401      	adds	r4, #1
//  aeabi_ddiv(-2205.1969, 270.8886) = -8.140604292687105
//  aeabi_ddiv(2205.1969, -270.8886) = -8.140604292687105
//  aeabi_ddiv(-2205.1969, -270.8886) = 8.140604292687105

//  double-precision multiplication
double __wrap___aeabi_dmul(double x, double y) { 
 8002300:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DMUL]++;
 8002302:	70ac      	strb	r4, [r5, #2]
    return qfp_fmul(x, y); 
 8002304:	4619      	mov	r1, r3
 8002306:	f009 faef 	bl	800b8e8 <__aeabi_d2f>
 800230a:	4604      	mov	r4, r0
 800230c:	4639      	mov	r1, r7
 800230e:	4630      	mov	r0, r6
 8002310:	f009 faea 	bl	800b8e8 <__aeabi_d2f>
 8002314:	4621      	mov	r1, r4
 8002316:	f7ff fd9f 	bl	8001e58 <qfp_fmul>
 800231a:	f009 fa8d 	bl	800b838 <__aeabi_f2d>
}
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002320:	200005f4 	.word	0x200005f4

08002324 <__wrap___aeabi_dadd>:
//  aeabi_dmul(2205.1969, 270.8886) = 597362.70096534
//  aeabi_dmul(-2205.1969, 270.8886) = -597362.70096534
//  aeabi_dmul(2205.1969, -270.8886) = -597362.70096534
//  aeabi_dmul(-2205.1969, -270.8886) = 597362.70096534

double __wrap___aeabi_dadd(double a, double b) {
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DADD]++;
 8002326:	4d0a      	ldr	r5, [pc, #40]	; (8002350 <__wrap___aeabi_dadd+0x2c>)
//  aeabi_dmul(2205.1969, 270.8886) = 597362.70096534
//  aeabi_dmul(-2205.1969, 270.8886) = -597362.70096534
//  aeabi_dmul(2205.1969, -270.8886) = -597362.70096534
//  aeabi_dmul(-2205.1969, -270.8886) = 597362.70096534

double __wrap___aeabi_dadd(double a, double b) {
 8002328:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DADD]++;
 800232a:	78ec      	ldrb	r4, [r5, #3]
    return qfp_fadd( a , b );
 800232c:	4610      	mov	r0, r2
//  aeabi_dmul(-2205.1969, 270.8886) = -597362.70096534
//  aeabi_dmul(2205.1969, -270.8886) = -597362.70096534
//  aeabi_dmul(-2205.1969, -270.8886) = 597362.70096534

double __wrap___aeabi_dadd(double a, double b) {
    float_usage[USAGE_AEABI_DADD]++;
 800232e:	3401      	adds	r4, #1
//  aeabi_dmul(2205.1969, 270.8886) = 597362.70096534
//  aeabi_dmul(-2205.1969, 270.8886) = -597362.70096534
//  aeabi_dmul(2205.1969, -270.8886) = -597362.70096534
//  aeabi_dmul(-2205.1969, -270.8886) = 597362.70096534

double __wrap___aeabi_dadd(double a, double b) {
 8002330:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DADD]++;
 8002332:	70ec      	strb	r4, [r5, #3]
    return qfp_fadd( a , b );
 8002334:	4619      	mov	r1, r3
 8002336:	f009 fad7 	bl	800b8e8 <__aeabi_d2f>
 800233a:	4604      	mov	r4, r0
 800233c:	4639      	mov	r1, r7
 800233e:	4630      	mov	r0, r6
 8002340:	f009 fad2 	bl	800b8e8 <__aeabi_d2f>
 8002344:	4621      	mov	r1, r4
 8002346:	f7ff fd58 	bl	8001dfa <qfp_fadd>
 800234a:	f009 fa75 	bl	800b838 <__aeabi_f2d>
}
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	200005f4 	.word	0x200005f4

08002354 <__wrap___aeabi_dsub>:
//  aeabi_dadd(2205.1969, 270.8886) = 2476.0855
//  aeabi_dadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_dadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_dadd(-2205.1969, -270.8886) = -2476.0855

double __wrap___aeabi_dsub(double a, double b) {
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DSUB]++;
 8002356:	4d0a      	ldr	r5, [pc, #40]	; (8002380 <__wrap___aeabi_dsub+0x2c>)
//  aeabi_dadd(2205.1969, 270.8886) = 2476.0855
//  aeabi_dadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_dadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_dadd(-2205.1969, -270.8886) = -2476.0855

double __wrap___aeabi_dsub(double a, double b) {
 8002358:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DSUB]++;
 800235a:	792c      	ldrb	r4, [r5, #4]
    return qfp_fsub( a , b );
 800235c:	4610      	mov	r0, r2
//  aeabi_dadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_dadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_dadd(-2205.1969, -270.8886) = -2476.0855

double __wrap___aeabi_dsub(double a, double b) {
    float_usage[USAGE_AEABI_DSUB]++;
 800235e:	3401      	adds	r4, #1
//  aeabi_dadd(2205.1969, 270.8886) = 2476.0855
//  aeabi_dadd(-2205.1969, 270.8886) = -1934.3083
//  aeabi_dadd(2205.1969, -270.8886) = 1934.3083
//  aeabi_dadd(-2205.1969, -270.8886) = -2476.0855

double __wrap___aeabi_dsub(double a, double b) {
 8002360:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DSUB]++;
 8002362:	712c      	strb	r4, [r5, #4]
    return qfp_fsub( a , b );
 8002364:	4619      	mov	r1, r3
 8002366:	f009 fabf 	bl	800b8e8 <__aeabi_d2f>
 800236a:	4604      	mov	r4, r0
 800236c:	4639      	mov	r1, r7
 800236e:	4630      	mov	r0, r6
 8002370:	f009 faba 	bl	800b8e8 <__aeabi_d2f>
 8002374:	4621      	mov	r1, r4
 8002376:	f7ff fd3d 	bl	8001df4 <qfp_fsub>
 800237a:	f009 fa5d 	bl	800b838 <__aeabi_f2d>
}
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	200005f4 	.word	0x200005f4

08002384 <__wrap___aeabi_dcmpeq>:
//  equal? return 0
//  r0 > r1? return +1
//  r0 < r1: return -1

//  result (1, 0) denotes (=, ?<>) [2], use for C == and !=
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002386:	4d0b      	ldr	r5, [pc, #44]	; (80023b4 <__wrap___aeabi_dcmpeq+0x30>)
//  equal? return 0
//  r0 > r1? return +1
//  r0 < r1: return -1

//  result (1, 0) denotes (=, ?<>) [2], use for C == and !=
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002388:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPEQ]++;
 800238a:	796c      	ldrb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 800238c:	4610      	mov	r0, r2
//  r0 > r1? return +1
//  r0 < r1: return -1

//  result (1, 0) denotes (=, ?<>) [2], use for C == and !=
int __wrap___aeabi_dcmpeq(double x, double y) {
    float_usage[USAGE_AEABI_DCMPEQ]++;
 800238e:	3401      	adds	r4, #1
//  equal? return 0
//  r0 > r1? return +1
//  r0 < r1: return -1

//  result (1, 0) denotes (=, ?<>) [2], use for C == and !=
int __wrap___aeabi_dcmpeq(double x, double y) {
 8002390:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPEQ]++;
 8002392:	716c      	strb	r4, [r5, #5]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002394:	4619      	mov	r1, r3
 8002396:	f009 faa7 	bl	800b8e8 <__aeabi_d2f>
 800239a:	4604      	mov	r4, r0
 800239c:	4639      	mov	r1, r7
 800239e:	4630      	mov	r0, r6
 80023a0:	f009 faa2 	bl	800b8e8 <__aeabi_d2f>
 80023a4:	4621      	mov	r1, r4
 80023a6:	f7ff fd49 	bl	8001e3c <qfp_fcmp>
        ? 1 : 0;
}
 80023aa:	fab0 f080 	clz	r0, r0
 80023ae:	0940      	lsrs	r0, r0, #5
 80023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200005f4 	.word	0x200005f4

080023b8 <__wrap___aeabi_dcmplt>:
//  aeabi_dcmpeq(-2205.196, -2205.195) = 0
//  aeabi_dcmpeq(-2205.196, -2205.197) = 0
//  aeabi_dcmpeq(-2205.196, 0) = 0

//  result (1, 0) denotes (<, ?>=) [2], use for C <
int __wrap___aeabi_dcmplt(double x, double y) {
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLT]++;
 80023ba:	4d0a      	ldr	r5, [pc, #40]	; (80023e4 <__wrap___aeabi_dcmplt+0x2c>)
//  aeabi_dcmpeq(-2205.196, -2205.195) = 0
//  aeabi_dcmpeq(-2205.196, -2205.197) = 0
//  aeabi_dcmpeq(-2205.196, 0) = 0

//  result (1, 0) denotes (<, ?>=) [2], use for C <
int __wrap___aeabi_dcmplt(double x, double y) {
 80023bc:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLT]++;
 80023be:	79ac      	ldrb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 80023c0:	4610      	mov	r0, r2
//  aeabi_dcmpeq(-2205.196, -2205.197) = 0
//  aeabi_dcmpeq(-2205.196, 0) = 0

//  result (1, 0) denotes (<, ?>=) [2], use for C <
int __wrap___aeabi_dcmplt(double x, double y) {
    float_usage[USAGE_AEABI_DCMPLT]++;
 80023c2:	3401      	adds	r4, #1
//  aeabi_dcmpeq(-2205.196, -2205.195) = 0
//  aeabi_dcmpeq(-2205.196, -2205.197) = 0
//  aeabi_dcmpeq(-2205.196, 0) = 0

//  result (1, 0) denotes (<, ?>=) [2], use for C <
int __wrap___aeabi_dcmplt(double x, double y) {
 80023c4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLT]++;
 80023c6:	71ac      	strb	r4, [r5, #6]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 80023c8:	4619      	mov	r1, r3
 80023ca:	f009 fa8d 	bl	800b8e8 <__aeabi_d2f>
 80023ce:	4604      	mov	r4, r0
 80023d0:	4639      	mov	r1, r7
 80023d2:	4630      	mov	r0, r6
 80023d4:	f009 fa88 	bl	800b8e8 <__aeabi_d2f>
 80023d8:	4621      	mov	r1, r4
 80023da:	f7ff fd2f 	bl	8001e3c <qfp_fcmp>
        ? 1 : 0;
}
 80023de:	0fc0      	lsrs	r0, r0, #31
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200005f4 	.word	0x200005f4

080023e8 <__wrap___aeabi_dcmple>:
//  aeabi_dcmplt(-2205.196, -2205.195) = 1
//  aeabi_dcmplt(-2205.196, -2205.197) = 0
//  aeabi_dcmplt(-2205.196, 0) = 1

//  result (1, 0) denotes (<=, ?>) [2], use for C <=
int __wrap___aeabi_dcmple(double x, double y) { 
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPLE]++;
 80023ea:	4d0b      	ldr	r5, [pc, #44]	; (8002418 <__wrap___aeabi_dcmple+0x30>)
//  aeabi_dcmplt(-2205.196, -2205.195) = 1
//  aeabi_dcmplt(-2205.196, -2205.197) = 0
//  aeabi_dcmplt(-2205.196, 0) = 1

//  result (1, 0) denotes (<=, ?>) [2], use for C <=
int __wrap___aeabi_dcmple(double x, double y) { 
 80023ec:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPLE]++;
 80023ee:	79ec      	ldrb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 80023f0:	4610      	mov	r0, r2
//  aeabi_dcmplt(-2205.196, -2205.197) = 0
//  aeabi_dcmplt(-2205.196, 0) = 1

//  result (1, 0) denotes (<=, ?>) [2], use for C <=
int __wrap___aeabi_dcmple(double x, double y) { 
    float_usage[USAGE_AEABI_DCMPLE]++;
 80023f2:	3401      	adds	r4, #1
//  aeabi_dcmplt(-2205.196, -2205.195) = 1
//  aeabi_dcmplt(-2205.196, -2205.197) = 0
//  aeabi_dcmplt(-2205.196, 0) = 1

//  result (1, 0) denotes (<=, ?>) [2], use for C <=
int __wrap___aeabi_dcmple(double x, double y) { 
 80023f4:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPLE]++;
 80023f6:	71ec      	strb	r4, [r5, #7]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 80023f8:	4619      	mov	r1, r3
 80023fa:	f009 fa75 	bl	800b8e8 <__aeabi_d2f>
 80023fe:	4604      	mov	r4, r0
 8002400:	4639      	mov	r1, r7
 8002402:	4630      	mov	r0, r6
 8002404:	f009 fa70 	bl	800b8e8 <__aeabi_d2f>
 8002408:	4621      	mov	r1, r4
 800240a:	f7ff fd17 	bl	8001e3c <qfp_fcmp>
        ? 0 : 1; 
}
 800240e:	2800      	cmp	r0, #0
 8002410:	bfcc      	ite	gt
 8002412:	2000      	movgt	r0, #0
 8002414:	2001      	movle	r0, #1
 8002416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002418:	200005f4 	.word	0x200005f4

0800241c <__wrap___aeabi_dcmpge>:
//  aeabi_dcmple(-2205.196, -2205.195) = 1
//  aeabi_dcmple(-2205.196, -2205.197) = 0
//  aeabi_dcmple(-2205.196, 0) = 1

//  result (1, 0) denotes (>=, ?<) [2], use for C >=
int __wrap___aeabi_dcmpge(double x, double y) { 
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGE]++;
 800241e:	4d0a      	ldr	r5, [pc, #40]	; (8002448 <__wrap___aeabi_dcmpge+0x2c>)
//  aeabi_dcmple(-2205.196, -2205.195) = 1
//  aeabi_dcmple(-2205.196, -2205.197) = 0
//  aeabi_dcmple(-2205.196, 0) = 1

//  result (1, 0) denotes (>=, ?<) [2], use for C >=
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002420:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002422:	7a2c      	ldrb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 8002424:	4610      	mov	r0, r2
//  aeabi_dcmple(-2205.196, -2205.197) = 0
//  aeabi_dcmple(-2205.196, 0) = 1

//  result (1, 0) denotes (>=, ?<) [2], use for C >=
int __wrap___aeabi_dcmpge(double x, double y) { 
    float_usage[USAGE_AEABI_DCMPGE]++;
 8002426:	3401      	adds	r4, #1
//  aeabi_dcmple(-2205.196, -2205.195) = 1
//  aeabi_dcmple(-2205.196, -2205.197) = 0
//  aeabi_dcmple(-2205.196, 0) = 1

//  result (1, 0) denotes (>=, ?<) [2], use for C >=
int __wrap___aeabi_dcmpge(double x, double y) { 
 8002428:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGE]++;
 800242a:	722c      	strb	r4, [r5, #8]
    return (qfp_fcmp(x, y) < 0)  //  x < y
 800242c:	4619      	mov	r1, r3
 800242e:	f009 fa5b 	bl	800b8e8 <__aeabi_d2f>
 8002432:	4604      	mov	r4, r0
 8002434:	4639      	mov	r1, r7
 8002436:	4630      	mov	r0, r6
 8002438:	f009 fa56 	bl	800b8e8 <__aeabi_d2f>
 800243c:	4621      	mov	r1, r4
 800243e:	f7ff fcfd 	bl	8001e3c <qfp_fcmp>
        ? 0 : 1; 
}
 8002442:	43c0      	mvns	r0, r0
 8002444:	0fc0      	lsrs	r0, r0, #31
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002448:	200005f4 	.word	0x200005f4

0800244c <__wrap___aeabi_dcmpgt>:
//  aeabi_dcmpge(-2205.196, -2205.195) = 0
//  aeabi_dcmpge(-2205.196, -2205.197) = 1
//  aeabi_dcmpge(-2205.196, 0) = 0

//  result (1, 0) denotes (>, ?<=) [2], use for C >
int __wrap___aeabi_dcmpgt(double x, double y) { 
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPGT]++;
 800244e:	4d0b      	ldr	r5, [pc, #44]	; (800247c <__wrap___aeabi_dcmpgt+0x30>)
//  aeabi_dcmpge(-2205.196, -2205.195) = 0
//  aeabi_dcmpge(-2205.196, -2205.197) = 1
//  aeabi_dcmpge(-2205.196, 0) = 0

//  result (1, 0) denotes (>, ?<=) [2], use for C >
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002450:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002452:	7a6c      	ldrb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 8002454:	4610      	mov	r0, r2
//  aeabi_dcmpge(-2205.196, -2205.197) = 1
//  aeabi_dcmpge(-2205.196, 0) = 0

//  result (1, 0) denotes (>, ?<=) [2], use for C >
int __wrap___aeabi_dcmpgt(double x, double y) { 
    float_usage[USAGE_AEABI_DCMPGT]++;
 8002456:	3401      	adds	r4, #1
//  aeabi_dcmpge(-2205.196, -2205.195) = 0
//  aeabi_dcmpge(-2205.196, -2205.197) = 1
//  aeabi_dcmpge(-2205.196, 0) = 0

//  result (1, 0) denotes (>, ?<=) [2], use for C >
int __wrap___aeabi_dcmpgt(double x, double y) { 
 8002458:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPGT]++;
 800245a:	726c      	strb	r4, [r5, #9]
    return (qfp_fcmp(x, y) > 0)  //  x > y
 800245c:	4619      	mov	r1, r3
 800245e:	f009 fa43 	bl	800b8e8 <__aeabi_d2f>
 8002462:	4604      	mov	r4, r0
 8002464:	4639      	mov	r1, r7
 8002466:	4630      	mov	r0, r6
 8002468:	f009 fa3e 	bl	800b8e8 <__aeabi_d2f>
 800246c:	4621      	mov	r1, r4
 800246e:	f7ff fce5 	bl	8001e3c <qfp_fcmp>
        ? 1 : 0; 
}
 8002472:	2800      	cmp	r0, #0
 8002474:	bfd4      	ite	le
 8002476:	2000      	movle	r0, #0
 8002478:	2001      	movgt	r0, #1
 800247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247c:	200005f4 	.word	0x200005f4

08002480 <__wrap___aeabi_dcmpun>:
//  aeabi_dcmpgt(-2205.196, -2205.195) = 0
//  aeabi_dcmpgt(-2205.196, -2205.197) = 1
//  aeabi_dcmpgt(-2205.196, 0) = 0

//  result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002482:	4d0b      	ldr	r5, [pc, #44]	; (80024b0 <__wrap___aeabi_dcmpun+0x30>)
//  aeabi_dcmpgt(-2205.196, -2205.195) = 0
//  aeabi_dcmpgt(-2205.196, -2205.197) = 1
//  aeabi_dcmpgt(-2205.196, 0) = 0

//  result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
int __wrap___aeabi_dcmpun(double x, double y) { 
 8002484:	4606      	mov	r6, r0
    float_usage[USAGE_AEABI_DCMPUN]++;
 8002486:	7aac      	ldrb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002488:	4610      	mov	r0, r2
//  aeabi_dcmpgt(-2205.196, -2205.197) = 1
//  aeabi_dcmpgt(-2205.196, 0) = 0

//  result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
int __wrap___aeabi_dcmpun(double x, double y) { 
    float_usage[USAGE_AEABI_DCMPUN]++;
 800248a:	3401      	adds	r4, #1
//  aeabi_dcmpgt(-2205.196, -2205.195) = 0
//  aeabi_dcmpgt(-2205.196, -2205.197) = 1
//  aeabi_dcmpgt(-2205.196, 0) = 0

//  result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
int __wrap___aeabi_dcmpun(double x, double y) { 
 800248c:	460f      	mov	r7, r1
    float_usage[USAGE_AEABI_DCMPUN]++;
 800248e:	72ac      	strb	r4, [r5, #10]
    return (qfp_fcmp(x, y) == 0)  //  x == y
 8002490:	4619      	mov	r1, r3
 8002492:	f009 fa29 	bl	800b8e8 <__aeabi_d2f>
 8002496:	4604      	mov	r4, r0
 8002498:	4639      	mov	r1, r7
 800249a:	4630      	mov	r0, r6
 800249c:	f009 fa24 	bl	800b8e8 <__aeabi_d2f>
 80024a0:	4621      	mov	r1, r4
 80024a2:	f7ff fccb 	bl	8001e3c <qfp_fcmp>
        ? 0 : 1;
}
 80024a6:	3000      	adds	r0, #0
 80024a8:	bf18      	it	ne
 80024aa:	2001      	movne	r0, #1
 80024ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200005f4 	.word	0x200005f4

080024b4 <__wrap___aeabi_d2iz>:

///////////////////////////////////////////////////////////////////////////////
//  Table 6, Standard floating-point to integer conversions

//  double to integer C-style conversion. "z" means round towards 0.
int __wrap___aeabi_d2iz(double x) { 
 80024b4:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2IZ]++;
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <__wrap___aeabi_d2iz+0x28>)
 80024b8:	7bd3      	ldrb	r3, [r2, #15]
 80024ba:	3301      	adds	r3, #1
 80024bc:	73d3      	strb	r3, [r2, #15]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 80024be:	f009 fa13 	bl	800b8e8 <__aeabi_d2f>
 80024c2:	2100      	movs	r1, #0
 80024c4:	4604      	mov	r4, r0
 80024c6:	f7ff fcb9 	bl	8001e3c <qfp_fcmp>
 80024ca:	b900      	cbnz	r0, 80024ce <__wrap___aeabi_d2iz+0x1a>
    //  qfp_float2int() works like floor().  If x is negative, we add 1 to the result.
    int xfloored = qfp_float2int(x);
    if (xfloored < 0) { return xfloored + 1; }
    return xfloored; 
}
 80024cc:	bd10      	pop	{r4, pc}
//  double to integer C-style conversion. "z" means round towards 0.
int __wrap___aeabi_d2iz(double x) { 
    float_usage[USAGE_AEABI_D2IZ]++;
    if (qfp_fcmp(x, 0) == 0) { return 0; }
    //  qfp_float2int() works like floor().  If x is negative, we add 1 to the result.
    int xfloored = qfp_float2int(x);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fd4e 	bl	8001f70 <qfp_float2int>
    if (xfloored < 0) { return xfloored + 1; }
 80024d4:	2800      	cmp	r0, #0
 80024d6:	bfb8      	it	lt
 80024d8:	3001      	addlt	r0, #1
    return xfloored; 
}
 80024da:	bd10      	pop	{r4, pc}
 80024dc:	200005f4 	.word	0x200005f4

080024e0 <__wrap___aeabi_d2uiz>:
//  aeabi_d2iz(0) = 0
//  aeabi_d2iz(2205.1969) = 2205
//  aeabi_d2iz(-2205.1969) = -2205

//  double to unsigned C-style conversion. "z" means round towards 0.
unsigned __wrap___aeabi_d2uiz(double x) { 
 80024e0:	b510      	push	{r4, lr}
    float_usage[USAGE_AEABI_D2UIZ]++;
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <__wrap___aeabi_d2uiz+0x34>)
 80024e4:	7c13      	ldrb	r3, [r2, #16]
 80024e6:	3301      	adds	r3, #1
 80024e8:	7413      	strb	r3, [r2, #16]
    if (qfp_fcmp(x, 0) == 0) { return 0; }
 80024ea:	f009 f9fd 	bl	800b8e8 <__aeabi_d2f>
 80024ee:	2100      	movs	r1, #0
 80024f0:	4604      	mov	r4, r0
 80024f2:	f7ff fca3 	bl	8001e3c <qfp_fcmp>
 80024f6:	b908      	cbnz	r0, 80024fc <__wrap___aeabi_d2uiz+0x1c>
    if (qfp_fcmp(x, 0) < 0) { return 0; }
    return qfp_float2uint(x); 
}
 80024f8:	2000      	movs	r0, #0
 80024fa:	bd10      	pop	{r4, pc}

//  double to unsigned C-style conversion. "z" means round towards 0.
unsigned __wrap___aeabi_d2uiz(double x) { 
    float_usage[USAGE_AEABI_D2UIZ]++;
    if (qfp_fcmp(x, 0) == 0) { return 0; }
    if (qfp_fcmp(x, 0) < 0) { return 0; }
 80024fc:	2100      	movs	r1, #0
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fc9c 	bl	8001e3c <qfp_fcmp>
 8002504:	2800      	cmp	r0, #0
 8002506:	dbf7      	blt.n	80024f8 <__wrap___aeabi_d2uiz+0x18>
    return qfp_float2uint(x); 
 8002508:	4620      	mov	r0, r4
}
 800250a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//  double to unsigned C-style conversion. "z" means round towards 0.
unsigned __wrap___aeabi_d2uiz(double x) { 
    float_usage[USAGE_AEABI_D2UIZ]++;
    if (qfp_fcmp(x, 0) == 0) { return 0; }
    if (qfp_fcmp(x, 0) < 0) { return 0; }
    return qfp_float2uint(x); 
 800250e:	f7ff bd44 	b.w	8001f9a <qfp_float2uint>
 8002512:	bf00      	nop
 8002514:	200005f4 	.word	0x200005f4

08002518 <sqrt>:
//  <math.h> Functions

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::sqrt(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:925: undefined reference to `sqrt'

double sqrt(double x) { 
 8002518:	b508      	push	{r3, lr}
    float_usage[USAGE_SQRT]++;
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <sqrt+0x18>)
 800251c:	7d53      	ldrb	r3, [r2, #21]
 800251e:	3301      	adds	r3, #1
 8002520:	7553      	strb	r3, [r2, #21]
    return qfp_fsqrt_fast(x); 
 8002522:	f009 f9e1 	bl	800b8e8 <__aeabi_d2f>
 8002526:	f7ff fce8 	bl	8001efa <qfp_fsqrt_fast>
 800252a:	f009 f985 	bl	800b838 <__aeabi_f2d>
}
 800252e:	bd08      	pop	{r3, pc}
 8002530:	200005f4 	.word	0x200005f4

08002534 <log>:
//// sqrt(-1.0) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::log(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:901: undefined reference to `log'

double log(double x) { 
 8002534:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG]++;
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <log+0x18>)
 8002538:	7d93      	ldrb	r3, [r2, #22]
 800253a:	3301      	adds	r3, #1
 800253c:	7593      	strb	r3, [r2, #22]
    return qfp_fln(x); 
 800253e:	f009 f9d3 	bl	800b8e8 <__aeabi_d2f>
 8002542:	f7ff fde9 	bl	8002118 <qfp_fln>
 8002546:	f009 f977 	bl	800b838 <__aeabi_f2d>
}
 800254a:	bd08      	pop	{r3, pc}
 800254c:	200005f4 	.word	0x200005f4

08002550 <exp>:
// log(2) = _M_LN2
// log(10) = M_LN10
//// log(+Inf) = inf
//// log(0) = -inf

double exp(double x) { 
 8002550:	b508      	push	{r3, lr}
    float_usage[USAGE_EXP]++;
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <exp+0x18>)
 8002554:	7dd3      	ldrb	r3, [r2, #23]
 8002556:	3301      	adds	r3, #1
 8002558:	75d3      	strb	r3, [r2, #23]
    return qfp_fexp(x); 
 800255a:	f009 f9c5 	bl	800b8e8 <__aeabi_d2f>
 800255e:	f7ff fda6 	bl	80020ae <qfp_fexp>
 8002562:	f009 f969 	bl	800b838 <__aeabi_f2d>
}
 8002566:	bd08      	pop	{r3, pc}
 8002568:	200005f4 	.word	0x200005f4

0800256c <log2>:
// exp(-0) = 1.000000
//// exp(-Inf) = 0.000000

//  log2(x) = ln(x) / ln(2)
#undef log2
double log2(double x) { 
 800256c:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG2]++;
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <log2+0x20>)
 8002570:	7e13      	ldrb	r3, [r2, #24]
 8002572:	3301      	adds	r3, #1
 8002574:	7613      	strb	r3, [r2, #24]
    return qfp_fmul(
 8002576:	f009 f9b7 	bl	800b8e8 <__aeabi_d2f>
 800257a:	f7ff fdcd 	bl	8002118 <qfp_fln>
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <log2+0x24>)
 8002580:	f7ff fc6a 	bl	8001e58 <qfp_fmul>
 8002584:	f009 f958 	bl	800b838 <__aeabi_f2d>
        qfp_fln(x),
        1.0 / _M_LN2  //  Constant
    ); 
}
 8002588:	bd08      	pop	{r3, pc}
 800258a:	bf00      	nop
 800258c:	200005f4 	.word	0x200005f4
 8002590:	3fb8aa3b 	.word	0x3fb8aa3b

08002594 <log10>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::log10(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:904: undefined reference to `log10'

//  log10(x) = ln(x) / ln(10)
//  e.g. log10(1000) = ln(1000) / ln(10) = 3
double log10(double x) { 
 8002594:	b508      	push	{r3, lr}
    float_usage[USAGE_LOG10]++;
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <log10+0x20>)
 8002598:	7e53      	ldrb	r3, [r2, #25]
 800259a:	3301      	adds	r3, #1
 800259c:	7653      	strb	r3, [r2, #25]
    return qfp_fmul(
 800259e:	f009 f9a3 	bl	800b8e8 <__aeabi_d2f>
 80025a2:	f7ff fdb9 	bl	8002118 <qfp_fln>
 80025a6:	4904      	ldr	r1, [pc, #16]	; (80025b8 <log10+0x24>)
 80025a8:	f7ff fc56 	bl	8001e58 <qfp_fmul>
 80025ac:	f009 f944 	bl	800b838 <__aeabi_f2d>
        qfp_fln(x),
        1.0 / M_LN10  //  Constant
    ); 
}
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	200005f4 	.word	0x200005f4
 80025b8:	3ede5bd9 	.word	0x3ede5bd9

080025bc <pow>:
//// log10(+Inf) = inf
//// log10(0) = -inf

//  pow(b, x) = pow(e, log(b) * x) = exp(log(b) * x)
//  e.g. pow(10, 3) = exp(log(10) * 3) = 1000
double pow(double b, double x) { 
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_POW]++;
 80025be:	4c21      	ldr	r4, [pc, #132]	; (8002644 <pow+0x88>)
//// log10(+Inf) = inf
//// log10(0) = -inf

//  pow(b, x) = pow(e, log(b) * x) = exp(log(b) * x)
//  e.g. pow(10, 3) = exp(log(10) * 3) = 1000
double pow(double b, double x) { 
 80025c0:	461f      	mov	r7, r3
    float_usage[USAGE_POW]++;
 80025c2:	7ea3      	ldrb	r3, [r4, #26]
//// log10(+Inf) = inf
//// log10(0) = -inf

//  pow(b, x) = pow(e, log(b) * x) = exp(log(b) * x)
//  e.g. pow(10, 3) = exp(log(10) * 3) = 1000
double pow(double b, double x) { 
 80025c4:	4616      	mov	r6, r2
    float_usage[USAGE_POW]++;
 80025c6:	3301      	adds	r3, #1
 80025c8:	76a3      	strb	r3, [r4, #26]
    //  If b and x are both negative and x is odd, then return -pow(-b, x).
    //  e.g. pow(-2, -3) = -pow(2, -3)
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 80025ca:	f009 f98d 	bl	800b8e8 <__aeabi_d2f>
 80025ce:	2100      	movs	r1, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	f7ff fc33 	bl	8001e3c <qfp_fcmp>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	db10      	blt.n	80025fc <pow+0x40>
                    x
                )        
            );
        }
    }
    return qfp_fexp(
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fd9c 	bl	8002118 <qfp_fln>
 80025e0:	4639      	mov	r1, r7
 80025e2:	4604      	mov	r4, r0
 80025e4:	4630      	mov	r0, r6
 80025e6:	f009 f97f 	bl	800b8e8 <__aeabi_d2f>
 80025ea:	4601      	mov	r1, r0
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff fc33 	bl	8001e58 <qfp_fmul>
 80025f2:	f7ff fd5c 	bl	80020ae <qfp_fexp>
 80025f6:	f009 f91f 	bl	800b838 <__aeabi_f2d>
        qfp_fmul(
            qfp_fln(b),
            x
        )        
    );
}
 80025fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
//  e.g. pow(10, 3) = exp(log(10) * 3) = 1000
double pow(double b, double x) { 
    float_usage[USAGE_POW]++;
    //  If b and x are both negative and x is odd, then return -pow(-b, x).
    //  e.g. pow(-2, -3) = -pow(2, -3)
    if (qfp_fcmp(b,  0) < 0 && qfp_fcmp(x,  0) < 0) {
 80025fc:	4639      	mov	r1, r7
 80025fe:	4630      	mov	r0, r6
 8002600:	f009 f972 	bl	800b8e8 <__aeabi_d2f>
 8002604:	2100      	movs	r1, #0
 8002606:	4605      	mov	r5, r0
 8002608:	f7ff fc18 	bl	8001e3c <qfp_fcmp>
 800260c:	2800      	cmp	r0, #0
 800260e:	dae4      	bge.n	80025da <pow+0x1e>
        int xfloored = qfp_float2int(-x);
 8002610:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 8002614:	f7ff fcac 	bl	8001f70 <qfp_float2int>
        if (xfloored % 2 == 1) {
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 0001 	and.w	r0, r0, #1
 800261e:	bfb8      	it	lt
 8002620:	4240      	neglt	r0, r0
 8002622:	2801      	cmp	r0, #1
 8002624:	d1d9      	bne.n	80025da <pow+0x1e>
            return -qfp_fexp(
 8002626:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 800262a:	f7ff fd75 	bl	8002118 <qfp_fln>
 800262e:	4629      	mov	r1, r5
 8002630:	f7ff fc12 	bl	8001e58 <qfp_fmul>
 8002634:	f7ff fd3b 	bl	80020ae <qfp_fexp>
 8002638:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800263c:	f009 f8fc 	bl	800b838 <__aeabi_f2d>
        qfp_fmul(
            qfp_fln(b),
            x
        )        
    );
}
 8002640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002642:	bf00      	nop
 8002644:	200005f4 	.word	0x200005f4

08002648 <sin>:
//// ldexp(1, 1024) = inf

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::sin(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:910: undefined reference to `sin'

double sin(double x) { 
 8002648:	b508      	push	{r3, lr}
    float_usage[USAGE_SIN]++;
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <sin+0x18>)
 800264c:	7f13      	ldrb	r3, [r2, #28]
 800264e:	3301      	adds	r3, #1
 8002650:	7713      	strb	r3, [r2, #28]
    return qfp_fsin(x); 
 8002652:	f009 f949 	bl	800b8e8 <__aeabi_d2f>
 8002656:	f7ff fd00 	bl	800205a <qfp_fsin>
 800265a:	f009 f8ed 	bl	800b838 <__aeabi_f2d>
}
 800265e:	bd08      	pop	{r3, pc}
 8002660:	200005f4 	.word	0x200005f4

08002664 <cos>:
//// sin(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::cos(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:913: undefined reference to `cos'

double cos(double x) { 
 8002664:	b510      	push	{r4, lr}
    float_usage[USAGE_COS]++;
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <cos+0x2c>)
 8002668:	7f53      	ldrb	r3, [r2, #29]
 800266a:	3301      	adds	r3, #1
 800266c:	7753      	strb	r3, [r2, #29]
    //  If x is Pi/2, return 0.
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
 800266e:	f009 f93b 	bl	800b8e8 <__aeabi_d2f>
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <cos+0x30>)
 8002674:	4604      	mov	r4, r0
 8002676:	f7ff fbe1 	bl	8001e3c <qfp_fcmp>
 800267a:	b910      	cbnz	r0, 8002682 <cos+0x1e>
 800267c:	2000      	movs	r0, #0
 800267e:	2100      	movs	r1, #0
    return qfp_fcos(x); 
}
 8002680:	bd10      	pop	{r4, pc}

double cos(double x) { 
    float_usage[USAGE_COS]++;
    //  If x is Pi/2, return 0.
    if (qfp_fcmp(x, M_PI_2) == 0) { return 0; }
    return qfp_fcos(x); 
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fd0a 	bl	800209c <qfp_fcos>
 8002688:	f009 f8d6 	bl	800b838 <__aeabi_f2d>
}
 800268c:	bd10      	pop	{r4, pc}
 800268e:	bf00      	nop
 8002690:	200005f4 	.word	0x200005f4
 8002694:	3fc90fdb 	.word	0x3fc90fdb

08002698 <tan>:
//// cos(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::tan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:907: undefined reference to `tan'

double tan(double x) { 
 8002698:	b508      	push	{r3, lr}
    float_usage[USAGE_TAN]++;
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <tan+0x18>)
 800269c:	7f93      	ldrb	r3, [r2, #30]
 800269e:	3301      	adds	r3, #1
 80026a0:	7793      	strb	r3, [r2, #30]
    return qfp_ftan(x); 
 80026a2:	f009 f921 	bl	800b8e8 <__aeabi_d2f>
 80026a6:	f7ff fcfe 	bl	80020a6 <qfp_ftan>
 80026aa:	f009 f8c5 	bl	800b838 <__aeabi_f2d>
}
 80026ae:	bd08      	pop	{r3, pc}
 80026b0:	200005f4 	.word	0x200005f4

080026b4 <atan2>:
//// tan(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::atan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:916: undefined reference to `atan'

double atan2(double y, double x) { 
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATAN2]++;
 80026b6:	4c13      	ldr	r4, [pc, #76]	; (8002704 <atan2+0x50>)
//// tan(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::atan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:916: undefined reference to `atan'

double atan2(double y, double x) { 
 80026b8:	461f      	mov	r7, r3
    float_usage[USAGE_ATAN2]++;
 80026ba:	7fe3      	ldrb	r3, [r4, #31]
//// tan(INFINITY) = -nan

// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::atan(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:916: undefined reference to `atan'

double atan2(double y, double x) { 
 80026bc:	4616      	mov	r6, r2
    float_usage[USAGE_ATAN2]++;
 80026be:	3301      	adds	r3, #1
 80026c0:	77e3      	strb	r3, [r4, #31]
    //  If x and y are both 0, return 0.
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 80026c2:	f009 f911 	bl	800b8e8 <__aeabi_d2f>
 80026c6:	2100      	movs	r1, #0
 80026c8:	4604      	mov	r4, r0
 80026ca:	f7ff fbb7 	bl	8001e3c <qfp_fcmp>
 80026ce:	b158      	cbz	r0, 80026e8 <atan2+0x34>
 80026d0:	4630      	mov	r0, r6
 80026d2:	4639      	mov	r1, r7
 80026d4:	f009 f908 	bl	800b8e8 <__aeabi_d2f>
 80026d8:	4605      	mov	r5, r0
    return qfp_fatan2( y, x ); 
 80026da:	4629      	mov	r1, r5
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fd2d 	bl	800213c <qfp_fatan2>
 80026e2:	f009 f8a9 	bl	800b838 <__aeabi_f2d>
}
 80026e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// /src/pxtapp/base/core.cpp:916: undefined reference to `atan'

double atan2(double y, double x) { 
    float_usage[USAGE_ATAN2]++;
    //  If x and y are both 0, return 0.
    if (qfp_fcmp(y,  0) == 0 && qfp_fcmp(x,  0) == 0) { return 0; }
 80026e8:	4639      	mov	r1, r7
 80026ea:	4630      	mov	r0, r6
 80026ec:	f009 f8fc 	bl	800b8e8 <__aeabi_d2f>
 80026f0:	2100      	movs	r1, #0
 80026f2:	4605      	mov	r5, r0
 80026f4:	f7ff fba2 	bl	8001e3c <qfp_fcmp>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d1ee      	bne.n	80026da <atan2+0x26>
 80026fc:	2000      	movs	r0, #0
 80026fe:	2100      	movs	r1, #0
    return qfp_fatan2( y, x ); 
}
 8002700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002702:	bf00      	nop
 8002704:	200005f4 	.word	0x200005f4

08002708 <atan>:
//// atan2(0, -0)=3.141593
// atan2(7, 0) = 1.570796 
// atan2(7, -0)=1.570796

////  TODO: Confirm
double atan(double y_over_x) {
 8002708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float_usage[USAGE_ATAN]++;
 800270c:	4f23      	ldr	r7, [pc, #140]	; (800279c <atan+0x94>)
    //  If the argument is NaN, NaN is returned
    if (isnan(y_over_x)) { return NAN; }
 800270e:	4602      	mov	r2, r0
// atan2(7, 0) = 1.570796 
// atan2(7, -0)=1.570796

////  TODO: Confirm
double atan(double y_over_x) {
    float_usage[USAGE_ATAN]++;
 8002710:	f897 6020 	ldrb.w	r6, [r7, #32]
    //  If the argument is NaN, NaN is returned
    if (isnan(y_over_x)) { return NAN; }
 8002714:	460b      	mov	r3, r1
// atan2(7, 0) = 1.570796 
// atan2(7, -0)=1.570796

////  TODO: Confirm
double atan(double y_over_x) {
    float_usage[USAGE_ATAN]++;
 8002716:	3601      	adds	r6, #1
 8002718:	f887 6020 	strb.w	r6, [r7, #32]
//// atan2(0, -0)=3.141593
// atan2(7, 0) = 1.570796 
// atan2(7, -0)=1.570796

////  TODO: Confirm
double atan(double y_over_x) {
 800271c:	4604      	mov	r4, r0
 800271e:	460d      	mov	r5, r1
    float_usage[USAGE_ATAN]++;
    //  If the argument is NaN, NaN is returned
    if (isnan(y_over_x)) { return NAN; }
 8002720:	f7ff feae 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002724:	bba0      	cbnz	r0, 8002790 <atan+0x88>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }
 8002726:	4629      	mov	r1, r5
 8002728:	4620      	mov	r0, r4
 800272a:	f009 f8dd 	bl	800b8e8 <__aeabi_d2f>
 800272e:	2100      	movs	r1, #0
 8002730:	4607      	mov	r7, r0
 8002732:	f7ff fb83 	bl	8001e3c <qfp_fcmp>
 8002736:	b338      	cbz	r0, 8002788 <atan+0x80>

    //  If the argument is +∞, +π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8002738:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800273c:	4620      	mov	r0, r4
 800273e:	4631      	mov	r1, r6
 8002740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <atan+0x98>)
 8002746:	f7ff fe9b 	bl	8002480 <__wrap___aeabi_dcmpun>
 800274a:	b938      	cbnz	r0, 800275c <atan+0x54>
 800274c:	4620      	mov	r0, r4
 800274e:	4631      	mov	r1, r6
 8002750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <atan+0x98>)
 8002756:	f7ff fe47 	bl	80023e8 <__wrap___aeabi_dcmple>
 800275a:	b138      	cbz	r0, 800276c <atan+0x64>

    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2( y_over_x, 1 ); 
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
}
 8002760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2( y_over_x, 1 ); 
 8002764:	2200      	movs	r2, #0
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <atan+0x9c>)
 8002768:	f7ff bfa4 	b.w	80026b4 <atan2>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }

    //  If the argument is +∞, +π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 800276c:	2100      	movs	r1, #0
 800276e:	4638      	mov	r0, r7
 8002770:	f7ff fb64 	bl	8001e3c <qfp_fcmp>
 8002774:	2800      	cmp	r0, #0
 8002776:	dc05      	bgt.n	8002784 <atan+0x7c>

    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }
 8002778:	4638      	mov	r0, r7
 800277a:	2100      	movs	r1, #0
 800277c:	f7ff fb5e 	bl	8001e3c <qfp_fcmp>
 8002780:	2800      	cmp	r0, #0
 8002782:	daeb      	bge.n	800275c <atan+0x54>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(y_over_x, 0) == 0) { return y_over_x; }

    //  If the argument is +∞, +π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) > 0) { return M_PI_2; }
 8002784:	4c08      	ldr	r4, [pc, #32]	; (80027a8 <atan+0xa0>)
 8002786:	4d09      	ldr	r5, [pc, #36]	; (80027ac <atan+0xa4>)
    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2( y_over_x, 1 ); 
}
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

////  TODO: Confirm
double atan(double y_over_x) {
    float_usage[USAGE_ATAN]++;
    //  If the argument is NaN, NaN is returned
    if (isnan(y_over_x)) { return NAN; }
 8002790:	2400      	movs	r4, #0
 8002792:	4d07      	ldr	r5, [pc, #28]	; (80027b0 <atan+0xa8>)
    //  If the argument is -∞, -π/2 is returned
    if (isinf(y_over_x) && qfp_fcmp(y_over_x, 0) < 0) { return M_PI_2; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2( y_over_x, 1 ); 
}
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279c:	200005f4 	.word	0x200005f4
 80027a0:	7fefffff 	.word	0x7fefffff
 80027a4:	3ff00000 	.word	0x3ff00000
 80027a8:	54442d18 	.word	0x54442d18
 80027ac:	3ff921fb 	.word	0x3ff921fb
 80027b0:	7ff80000 	.word	0x7ff80000

080027b4 <asin>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::asin(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:919: undefined reference to `asin'

//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
 80027b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float_usage[USAGE_ASIN]++;
 80027b8:	4f1f      	ldr	r7, [pc, #124]	; (8002838 <asin+0x84>)
    //  If the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80027ba:	4602      	mov	r2, r0
// /src/pxtapp/base/core.cpp:919: undefined reference to `asin'

//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
    float_usage[USAGE_ASIN]++;
 80027bc:	f897 6021 	ldrb.w	r6, [r7, #33]	; 0x21
    //  If the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80027c0:	460b      	mov	r3, r1
// /src/pxtapp/base/core.cpp:919: undefined reference to `asin'

//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
    float_usage[USAGE_ASIN]++;
 80027c2:	3601      	adds	r6, #1
 80027c4:	f887 6021 	strb.w	r6, [r7, #33]	; 0x21
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::asin(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:919: undefined reference to `asin'

//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
 80027c8:	4604      	mov	r4, r0
 80027ca:	460d      	mov	r5, r1
    float_usage[USAGE_ASIN]++;
    //  If the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80027cc:	f7ff fe58 	bl	8002480 <__wrap___aeabi_dcmpun>
 80027d0:	b998      	cbnz	r0, 80027fa <asin+0x46>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80027d2:	4629      	mov	r1, r5
 80027d4:	4620      	mov	r0, r4
 80027d6:	f009 f887 	bl	800b8e8 <__aeabi_d2f>
 80027da:	2100      	movs	r1, #0
 80027dc:	4606      	mov	r6, r0
 80027de:	f7ff fb2d 	bl	8001e3c <qfp_fcmp>
 80027e2:	b918      	cbnz	r0, 80027ec <asin+0x38>
 80027e4:	4620      	mov	r0, r4
 80027e6:	4629      	mov	r1, r5
                1,
                qfp_fmul( x , x )
            ) 
        )
    );
}
 80027e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
 80027ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80027f0:	4630      	mov	r0, r6
 80027f2:	f7ff fb23 	bl	8001e3c <qfp_fcmp>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	dd03      	ble.n	8002802 <asin+0x4e>
//  arcsin(x) = arctan( x / sqrt( 1 - x^2 ) )
//            = arctan2( x , sqrt( 1 - (x*x) ) )
double asin(double x) { 
    float_usage[USAGE_ASIN]++;
    //  If the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80027fa:	2000      	movs	r0, #0
 80027fc:	490f      	ldr	r1, [pc, #60]	; (800283c <asin+0x88>)
                1,
                qfp_fmul( x , x )
            ) 
        )
    );
}
 80027fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002802:	490f      	ldr	r1, [pc, #60]	; (8002840 <asin+0x8c>)
 8002804:	4630      	mov	r0, r6
 8002806:	f7ff fb19 	bl	8001e3c <qfp_fcmp>
 800280a:	2800      	cmp	r0, #0
 800280c:	dbf5      	blt.n	80027fa <asin+0x46>

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2(
        x,
        qfp_fsqrt_fast(
 800280e:	4631      	mov	r1, r6
 8002810:	4630      	mov	r0, r6
 8002812:	f7ff fb21 	bl	8001e58 <qfp_fmul>
 8002816:	4601      	mov	r1, r0
 8002818:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800281c:	f7ff faea 	bl	8001df4 <qfp_fsub>
 8002820:	f7ff fb6b 	bl	8001efa <qfp_fsqrt_fast>
    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
    if (qfp_fcmp(x, -1) < 0) { return NAN; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2(
 8002824:	f009 f808 	bl	800b838 <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
                1,
                qfp_fmul( x , x )
            ) 
        )
    );
}
 8002830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    //  If |arg| > 1, a domain error occurs and NaN is returned.
    if (qfp_fcmp(x,  1) > 0) { return NAN; }
    if (qfp_fcmp(x, -1) < 0) { return NAN; }

    //  Must call atan2 instead of qfp_fatan2 in case the values are 0.
    return atan2(
 8002834:	f7ff bf3e 	b.w	80026b4 <atan2>
 8002838:	200005f4 	.word	0x200005f4
 800283c:	7ff80000 	.word	0x7ff80000
 8002840:	bf800000 	.word	0xbf800000

08002844 <sinh>:

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 8002844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_SINH]++;
 8002848:	4f25      	ldr	r7, [pc, #148]	; (80028e0 <sinh+0x9c>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800284a:	4602      	mov	r2, r0
//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
    float_usage[USAGE_SINH]++;
 800284c:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002850:	460b      	mov	r3, r1
//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
    float_usage[USAGE_SINH]++;
 8002852:	3601      	adds	r6, #1
 8002854:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23

//  From https://en.wikipedia.org/wiki/Hyperbolic_function

//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
    float_usage[USAGE_SINH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800285c:	f7ff fe10 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002860:	bbb8      	cbnz	r0, 80028d2 <sinh+0x8e>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002862:	4629      	mov	r1, r5
 8002864:	4620      	mov	r0, r4
 8002866:	f009 f83f 	bl	800b8e8 <__aeabi_d2f>
 800286a:	2100      	movs	r1, #0
 800286c:	4606      	mov	r6, r0
 800286e:	f7ff fae5 	bl	8001e3c <qfp_fcmp>
 8002872:	b188      	cbz	r0, 8002898 <sinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8002874:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8002878:	4620      	mov	r0, r4
 800287a:	4639      	mov	r1, r7
 800287c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <sinh+0xa0>)
 8002882:	f7ff fdfd 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002886:	b958      	cbnz	r0, 80028a0 <sinh+0x5c>
 8002888:	4620      	mov	r0, r4
 800288a:	4639      	mov	r1, r7
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <sinh+0xa0>)
 8002892:	f7ff fda9 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002896:	b918      	cbnz	r0, 80028a0 <sinh+0x5c>
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8002898:	4620      	mov	r0, r4
 800289a:	4629      	mov	r1, r5
 800289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }

    return qfp_fmul(
 80028a0:	4630      	mov	r0, r6
 80028a2:	f7ff fc04 	bl	80020ae <qfp_fexp>
 80028a6:	4604      	mov	r4, r0
 80028a8:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 80028ac:	f7ff fbff 	bl	80020ae <qfp_fexp>
 80028b0:	4601      	mov	r1, r0
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff fa9e 	bl	8001df4 <qfp_fsub>
 80028b8:	4601      	mov	r1, r0
 80028ba:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80028be:	f7ff facb 	bl	8001e58 <qfp_fmul>
 80028c2:	f008 ffb9 	bl	800b838 <__aeabi_f2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes hyperbolic sine of arg.
//  0.5 * { e^x - e^{-x} }
double sinh(double x) {
    float_usage[USAGE_SINH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80028d2:	2400      	movs	r4, #0
 80028d4:	4d04      	ldr	r5, [pc, #16]	; (80028e8 <sinh+0xa4>)
        qfp_fsub(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028de:	bf00      	nop
 80028e0:	200005f4 	.word	0x200005f4
 80028e4:	7fefffff 	.word	0x7fefffff
 80028e8:	7ff80000 	.word	0x7ff80000

080028ec <cosh>:
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 80028ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_COSH]++;
 80028f0:	4f23      	ldr	r7, [pc, #140]	; (8002980 <cosh+0x94>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80028f2:	4602      	mov	r2, r0
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
    float_usage[USAGE_COSH]++;
 80028f4:	f897 6024 	ldrb.w	r6, [r7, #36]	; 0x24
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80028f8:	460b      	mov	r3, r1
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
    float_usage[USAGE_COSH]++;
 80028fa:	3601      	adds	r6, #1
 80028fc:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
// sinh(-0)=-0.000000
//// sinh(710.5) = inf

//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
 8002900:	4605      	mov	r5, r0
 8002902:	460c      	mov	r4, r1
    float_usage[USAGE_COSH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002904:	f7ff fdbc 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002908:	bbb0      	cbnz	r0, 8002978 <cosh+0x8c>
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 800290a:	4621      	mov	r1, r4
 800290c:	4628      	mov	r0, r5
 800290e:	f008 ffeb 	bl	800b8e8 <__aeabi_d2f>
 8002912:	2100      	movs	r1, #0
 8002914:	4606      	mov	r6, r0
 8002916:	f7ff fa91 	bl	8001e3c <qfp_fcmp>
 800291a:	b350      	cbz	r0, 8002972 <cosh+0x86>

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞
 800291c:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8002920:	4628      	mov	r0, r5
 8002922:	4639      	mov	r1, r7
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <cosh+0x98>)
 800292a:	f7ff fda9 	bl	8002480 <__wrap___aeabi_dcmpun>
 800292e:	b958      	cbnz	r0, 8002948 <cosh+0x5c>
 8002930:	4628      	mov	r0, r5
 8002932:	4639      	mov	r1, r7
 8002934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <cosh+0x98>)
 800293a:	f7ff fd55 	bl	80023e8 <__wrap___aeabi_dcmple>
 800293e:	b918      	cbnz	r0, 8002948 <cosh+0x5c>
 8002940:	4628      	mov	r0, r5
 8002942:	4621      	mov	r1, r4
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8002944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return 1; }

    //  If the argument is ±∞, return +∞
    if (isinf(x)) { return x; }  //  TODO: Handle -∞

    return qfp_fmul(
 8002948:	4630      	mov	r0, r6
 800294a:	f7ff fbb0 	bl	80020ae <qfp_fexp>
 800294e:	4604      	mov	r4, r0
 8002950:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
 8002954:	f7ff fbab 	bl	80020ae <qfp_fexp>
 8002958:	4601      	mov	r1, r0
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fa4d 	bl	8001dfa <qfp_fadd>
 8002960:	4601      	mov	r1, r0
 8002962:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002966:	f7ff fa77 	bl	8001e58 <qfp_fmul>
 800296a:	f008 ff65 	bl	800b838 <__aeabi_f2d>
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 800296e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float_usage[USAGE_COSH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
    
    //  If the argument is ±0, 1 is returned
    if (qfp_fcmp(x, 0) == 0) { return 1; }
 8002972:	4905      	ldr	r1, [pc, #20]	; (8002988 <cosh+0x9c>)
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 8002974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the hyperbolic cosine of arg.
//  0.5 * { e^x + e^{-x} }
double cosh(double x) {
    float_usage[USAGE_COSH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002978:	2000      	movs	r0, #0
 800297a:	4904      	ldr	r1, [pc, #16]	; (800298c <cosh+0xa0>)
        qfp_fadd(
            qfp_fexp( x ),
            qfp_fexp( -x )
        )
    );
}
 800297c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002980:	200005f4 	.word	0x200005f4
 8002984:	7fefffff 	.word	0x7fefffff
 8002988:	3ff00000 	.word	0x3ff00000
 800298c:	7ff80000 	.word	0x7ff80000

08002990 <tanh>:
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 8002990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TANH]++;
 8002994:	4f26      	ldr	r7, [pc, #152]	; (8002a30 <tanh+0xa0>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002996:	4602      	mov	r2, r0
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
    float_usage[USAGE_TANH]++;
 8002998:	f897 6025 	ldrb.w	r6, [r7, #37]	; 0x25
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 800299c:	460b      	mov	r3, r1
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
    float_usage[USAGE_TANH]++;
 800299e:	3601      	adds	r6, #1
 80029a0:	f887 6025 	strb.w	r6, [r7, #37]	; 0x25
// cosh(-0) = 1.000000
//// cosh(710.5) = inf

//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
 80029a4:	4604      	mov	r4, r0
 80029a6:	460d      	mov	r5, r1
    float_usage[USAGE_TANH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 80029a8:	f7ff fd6a 	bl	8002480 <__wrap___aeabi_dcmpun>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d13b      	bne.n	8002a28 <tanh+0x98>

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 80029b0:	4629      	mov	r1, r5
 80029b2:	4620      	mov	r0, r4
 80029b4:	f008 ff98 	bl	800b8e8 <__aeabi_d2f>
 80029b8:	2100      	movs	r1, #0
 80029ba:	4606      	mov	r6, r0
 80029bc:	f7ff fa3e 	bl	8001e3c <qfp_fcmp>
 80029c0:	b370      	cbz	r0, 8002a20 <tanh+0x90>

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1
 80029c2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80029c6:	4620      	mov	r0, r4
 80029c8:	4629      	mov	r1, r5
 80029ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <tanh+0xa4>)
 80029d0:	f7ff fd56 	bl	8002480 <__wrap___aeabi_dcmpun>
 80029d4:	b950      	cbnz	r0, 80029ec <tanh+0x5c>
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <tanh+0xa4>)
 80029e0:	f7ff fd02 	bl	80023e8 <__wrap___aeabi_dcmple>
 80029e4:	b910      	cbnz	r0, 80029ec <tanh+0x5c>
 80029e6:	4914      	ldr	r1, [pc, #80]	; (8002a38 <tanh+0xa8>)
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 80029e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1

    float e2x = qfp_fexp(  //  e^{2x}
 80029ec:	4631      	mov	r1, r6
 80029ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029f2:	f7ff fa31 	bl	8001e58 <qfp_fmul>
 80029f6:	f7ff fb5a 	bl	80020ae <qfp_fexp>
        qfp_fmul(
            2.0f,
            x 
        )
    );
    return qfp_fdiv_fast(
 80029fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±∞, return ±1
    if (isinf(x)) { return 1; }  //  TODO: Handle -1

    float e2x = qfp_fexp(  //  e^{2x}
 80029fe:	4605      	mov	r5, r0
        qfp_fmul(
            2.0f,
            x 
        )
    );
    return qfp_fdiv_fast(
 8002a00:	f7ff f9f8 	bl	8001df4 <qfp_fsub>
 8002a04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a08:	4604      	mov	r4, r0
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f7ff f9f5 	bl	8001dfa <qfp_fadd>
 8002a10:	4601      	mov	r1, r0
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff fa49 	bl	8001eaa <qfp_fdiv_fast>
 8002a18:	f008 ff0e 	bl	800b838 <__aeabi_f2d>
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8002a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float_usage[USAGE_TANH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }

    //  If the argument is ±0, ±0 is returned
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8002a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the hyperbolic tangent of arg.
//  { e^{2x} - 1 } / { e^{2x} + 1 }
double tanh(double x) {
    float_usage[USAGE_TANH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <tanh+0xac>)
    );
    return qfp_fdiv_fast(
        qfp_fsub( e2x, 1.0f ),
        qfp_fadd( e2x, 1.0f )
    );
}
 8002a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a30:	200005f4 	.word	0x200005f4
 8002a34:	7fefffff 	.word	0x7fefffff
 8002a38:	3ff00000 	.word	0x3ff00000
 8002a3c:	7ff80000 	.word	0x7ff80000

08002a40 <asinh>:

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8002a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ASINH]++;
 8002a44:	4f24      	ldr	r7, [pc, #144]	; (8002ad8 <asinh+0x98>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002a46:	4602      	mov	r2, r0
//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
    float_usage[USAGE_ASINH]++;
 8002a48:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002a4c:	460b      	mov	r3, r1
//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
    float_usage[USAGE_ASINH]++;
 8002a4e:	3601      	adds	r6, #1
 8002a50:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26

//  From https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions

//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
 8002a54:	4604      	mov	r4, r0
 8002a56:	460d      	mov	r5, r1
    float_usage[USAGE_ASINH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002a58:	f7ff fd12 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002a5c:	bbb0      	cbnz	r0, 8002acc <asinh+0x8c>

    //  If the argument is ±0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002a5e:	4629      	mov	r1, r5
 8002a60:	4620      	mov	r0, r4
 8002a62:	f008 ff41 	bl	800b8e8 <__aeabi_d2f>
 8002a66:	2100      	movs	r1, #0
 8002a68:	4607      	mov	r7, r0
 8002a6a:	f7ff f9e7 	bl	8001e3c <qfp_fcmp>
 8002a6e:	b188      	cbz	r0, 8002a94 <asinh+0x54>

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8002a70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002a74:	4620      	mov	r0, r4
 8002a76:	4631      	mov	r1, r6
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <asinh+0x9c>)
 8002a7e:	f7ff fcff 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002a82:	b958      	cbnz	r0, 8002a9c <asinh+0x5c>
 8002a84:	4620      	mov	r0, r4
 8002a86:	4631      	mov	r1, r6
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <asinh+0x9c>)
 8002a8e:	f7ff fcab 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002a92:	b918      	cbnz	r0, 8002a9c <asinh+0x5c>
                    1.0f
                )
            )
        )
    );
}
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±∞, it is returned unmodified
    if (isinf(x)) { return x; }

    return qfp_fln(
 8002a9c:	4639      	mov	r1, r7
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	f7ff f9da 	bl	8001e58 <qfp_fmul>
 8002aa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002aa8:	f7ff f9a7 	bl	8001dfa <qfp_fadd>
 8002aac:	f7ff fa25 	bl	8001efa <qfp_fsqrt_fast>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f7ff f9a1 	bl	8001dfa <qfp_fadd>
 8002ab8:	f7ff fb2e 	bl	8002118 <qfp_fln>
 8002abc:	f008 febc 	bl	800b838 <__aeabi_f2d>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460d      	mov	r5, r1
                    1.0f
                )
            )
        )
    );
}
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the inverse hyperbolic sine of arg.
//  ln ( x + sqrt{ x^2 + 1 } )
double asinh(double x) {
    float_usage[USAGE_ASINH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002acc:	2400      	movs	r4, #0
 8002ace:	4d04      	ldr	r5, [pc, #16]	; (8002ae0 <asinh+0xa0>)
                    1.0f
                )
            )
        )
    );
}
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ad8:	200005f4 	.word	0x200005f4
 8002adc:	7fefffff 	.word	0x7fefffff
 8002ae0:	7ff80000 	.word	0x7ff80000

08002ae4 <acosh>:
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 8002ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_ACOSH]++;
 8002ae8:	4f27      	ldr	r7, [pc, #156]	; (8002b88 <acosh+0xa4>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002aea:	4602      	mov	r2, r0
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
    float_usage[USAGE_ACOSH]++;
 8002aec:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002af0:	460b      	mov	r3, r1
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
    float_usage[USAGE_ACOSH]++;
 8002af2:	3601      	adds	r6, #1
 8002af4:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
// asinh(+0) = 0.000000
// asinh(-0) = -0.000000

//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
 8002af8:	4605      	mov	r5, r0
 8002afa:	460c      	mov	r4, r1
    float_usage[USAGE_ACOSH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002afc:	f7ff fcc0 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002b00:	bb30      	cbnz	r0, 8002b50 <acosh+0x6c>

    //  If the argument is less than 1, NaN is returned
    if (qfp_fcmp(x, 1) < 0) { return NAN; }
 8002b02:	4621      	mov	r1, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f008 feef 	bl	800b8e8 <__aeabi_d2f>
 8002b0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b0e:	4606      	mov	r6, r0
 8002b10:	f7ff f994 	bl	8001e3c <qfp_fcmp>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	db1b      	blt.n	8002b50 <acosh+0x6c>

    //  If the argument is 1, 0 is returned
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002b18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f7ff f98d 	bl	8001e3c <qfp_fcmp>
 8002b22:	b1c8      	cbz	r0, 8002b58 <acosh+0x74>

    //  If the argument is +∞, it is returned unmodified
    if (isinf(x)) { return x; }
 8002b24:	f024 4700 	bic.w	r7, r4, #2147483648	; 0x80000000
 8002b28:	4628      	mov	r0, r5
 8002b2a:	4639      	mov	r1, r7
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <acosh+0xa8>)
 8002b32:	f7ff fca5 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002b36:	b990      	cbnz	r0, 8002b5e <acosh+0x7a>
 8002b38:	4628      	mov	r0, r5
 8002b3a:	4639      	mov	r1, r7
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <acosh+0xa8>)
 8002b42:	f7ff fc51 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002b46:	b950      	cbnz	r0, 8002b5e <acosh+0x7a>
 8002b48:	4628      	mov	r0, r5
 8002b4a:	4621      	mov	r1, r4
                    1.0f
                )
            )
        )
    );
}
 8002b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the inverse hyperbolic cosine of arg.
//  ln ( x + sqrt{ x^2 - 1 } )
double acosh(double x) {
    float_usage[USAGE_ACOSH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002b50:	2000      	movs	r0, #0
 8002b52:	490f      	ldr	r1, [pc, #60]	; (8002b90 <acosh+0xac>)
                    1.0f
                )
            )
        )
    );
}
 8002b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    //  If the argument is less than 1, NaN is returned
    if (qfp_fcmp(x, 1) < 0) { return NAN; }

    //  If the argument is 1, 0 is returned
    if (qfp_fcmp(x, 1) == 0) { return 0; }
 8002b58:	4601      	mov	r1, r0
                    1.0f
                )
            )
        )
    );
}
 8002b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (qfp_fcmp(x, 1) == 0) { return 0; }

    //  If the argument is +∞, it is returned unmodified
    if (isinf(x)) { return x; }

    return qfp_fln(
 8002b5e:	4631      	mov	r1, r6
 8002b60:	4630      	mov	r0, r6
 8002b62:	f7ff f979 	bl	8001e58 <qfp_fmul>
 8002b66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b6a:	f7ff f943 	bl	8001df4 <qfp_fsub>
 8002b6e:	f7ff f9c4 	bl	8001efa <qfp_fsqrt_fast>
 8002b72:	4601      	mov	r1, r0
 8002b74:	4630      	mov	r0, r6
 8002b76:	f7ff f940 	bl	8001dfa <qfp_fadd>
 8002b7a:	f7ff facd 	bl	8002118 <qfp_fln>
 8002b7e:	f008 fe5b 	bl	800b838 <__aeabi_f2d>
                    1.0f
                )
            )
        )
    );
}
 8002b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b86:	bf00      	nop
 8002b88:	200005f4 	.word	0x200005f4
 8002b8c:	7fefffff 	.word	0x7fefffff
 8002b90:	7ff80000 	.word	0x7ff80000

08002b94 <atanh>:
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    float_usage[USAGE_ATANH]++;
 8002b96:	4f29      	ldr	r7, [pc, #164]	; (8002c3c <atanh+0xa8>)
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002b98:	4602      	mov	r2, r0
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
    float_usage[USAGE_ATANH]++;
 8002b9a:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002b9e:	460b      	mov	r3, r1
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
    float_usage[USAGE_ATANH]++;
 8002ba0:	3601      	adds	r6, #1
 8002ba2:	f887 6028 	strb.w	r6, [r7, #40]	; 0x28
//// acosh(Inf) = inf
//// acosh(0.5) = -nan

//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	460d      	mov	r5, r1
    float_usage[USAGE_ATANH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002baa:	f7ff fc69 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002bae:	bb18      	cbnz	r0, 8002bf8 <atanh+0x64>

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f008 fe98 	bl	800b8e8 <__aeabi_d2f>
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4606      	mov	r6, r0
 8002bbc:	f7ff f93e 	bl	8001e3c <qfp_fcmp>
 8002bc0:	b910      	cbnz	r0, 8002bc8 <atanh+0x34>
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±1, ±∞ is returned
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 8002bc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002bcc:	4630      	mov	r0, r6
 8002bce:	f7ff f935 	bl	8001e3c <qfp_fcmp>
 8002bd2:	b138      	cbz	r0, 8002be4 <atanh+0x50>
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }
 8002bd4:	491a      	ldr	r1, [pc, #104]	; (8002c40 <atanh+0xac>)
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f7ff f930 	bl	8001e3c <qfp_fcmp>
 8002bdc:	b928      	cbnz	r0, 8002bea <atanh+0x56>
 8002bde:	2000      	movs	r0, #0
 8002be0:	4918      	ldr	r1, [pc, #96]	; (8002c44 <atanh+0xb0>)
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8002be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    //  If the argument is 0, it is returned unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  If the argument is ±1, ±∞ is returned
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
 8002be4:	2000      	movs	r0, #0
 8002be6:	4918      	ldr	r1, [pc, #96]	; (8002c48 <atanh+0xb4>)
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8002be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    //  If the argument is ±1, ±∞ is returned
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }

    //  if |arg| > 1, NaN is returned
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
 8002bea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f7ff f924 	bl	8001e3c <qfp_fcmp>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	dd02      	ble.n	8002bfe <atanh+0x6a>
//  Computes the inverse hyperbolic tangent of arg.
//  0.5 * ln ( {1+x} / {1-x} ) 
double atanh(double x) {
    float_usage[USAGE_ATANH]++;
    //  if the argument is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	4914      	ldr	r1, [pc, #80]	; (8002c4c <atanh+0xb8>)
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8002bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (qfp_fcmp(x, 1) == 0) { return INFINITY; }
    if (qfp_fcmp(x, -1) == 0) { return -INFINITY; }

    //  if |arg| > 1, NaN is returned
    if (qfp_fcmp(x, 1) > 0) { return NAN; }
    if (qfp_fcmp(x, -1) < 0) { return NAN; }
 8002bfe:	4910      	ldr	r1, [pc, #64]	; (8002c40 <atanh+0xac>)
 8002c00:	4630      	mov	r0, r6
 8002c02:	f7ff f91b 	bl	8001e3c <qfp_fcmp>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	dbf6      	blt.n	8002bf8 <atanh+0x64>

    return qfp_fmul(
 8002c0a:	4631      	mov	r1, r6
 8002c0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002c10:	f7ff f8f3 	bl	8001dfa <qfp_fadd>
 8002c14:	4631      	mov	r1, r6
 8002c16:	4604      	mov	r4, r0
 8002c18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002c1c:	f7ff f8ea 	bl	8001df4 <qfp_fsub>
 8002c20:	4601      	mov	r1, r0
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff f941 	bl	8001eaa <qfp_fdiv_fast>
 8002c28:	f7ff fa76 	bl	8002118 <qfp_fln>
 8002c2c:	4601      	mov	r1, r0
 8002c2e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002c32:	f7ff f911 	bl	8001e58 <qfp_fmul>
 8002c36:	f008 fdff 	bl	800b838 <__aeabi_f2d>
                qfp_fadd( 1.0f , x ),
                qfp_fsub( 1.0f , x )            
            )
        ) 
    );
}
 8002c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c3c:	200005f4 	.word	0x200005f4
 8002c40:	bf800000 	.word	0xbf800000
 8002c44:	fff00000 	.word	0xfff00000
 8002c48:	7ff00000 	.word	0x7ff00000
 8002c4c:	7ff80000 	.word	0x7ff80000

08002c50 <trunc>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 8002c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_TRUNC]++;
 8002c54:	4f1e      	ldr	r7, [pc, #120]	; (8002cd0 <trunc+0x80>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002c56:	4602      	mov	r2, r0
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
    float_usage[USAGE_TRUNC]++;
 8002c58:	f897 6029 	ldrb.w	r6, [r7, #41]	; 0x29
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002c5c:	460b      	mov	r3, r1
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
    float_usage[USAGE_TRUNC]++;
 8002c5e:	3601      	adds	r6, #1
 8002c60:	f887 6029 	strb.w	r6, [r7, #41]	; 0x29
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::trunc(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:934: undefined reference to `trunc'

//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
 8002c64:	4604      	mov	r4, r0
 8002c66:	460d      	mov	r5, r1
    float_usage[USAGE_TRUNC]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002c68:	f7ff fc0a 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002c6c:	bb68      	cbnz	r0, 8002cca <trunc+0x7a>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8002c6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002c72:	4620      	mov	r0, r4
 8002c74:	4631      	mov	r1, r6
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <trunc+0x84>)
 8002c7c:	f7ff fc00 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002c80:	b958      	cbnz	r0, 8002c9a <trunc+0x4a>
 8002c82:	4620      	mov	r0, r4
 8002c84:	4631      	mov	r1, r6
 8002c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <trunc+0x84>)
 8002c8c:	f7ff fbac 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002c90:	b918      	cbnz	r0, 8002c9a <trunc+0x4a>

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
    if (floored < 0) { return floored + 1; }
    return floored;
}
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f008 fe23 	bl	800b8e8 <__aeabi_d2f>
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4606      	mov	r6, r0
 8002ca6:	f7ff f8c9 	bl	8001e3c <qfp_fcmp>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0f1      	beq.n	8002c92 <trunc+0x42>

    //  qfp_float2int() behaves like floor().  If negative, add one.
    int floored = qfp_float2int(x);
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f7ff f95e 	bl	8001f70 <qfp_float2int>
    if (floored < 0) { return floored + 1; }
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	bfb8      	it	lt
 8002cb8:	1c58      	addlt	r0, r3, #1
    return floored;
 8002cba:	f008 fdab 	bl	800b814 <__aeabi_i2d>
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	460d      	mov	r5, r1
}
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the nearest integer not greater in magnitude than x.
//  TODO: Warn if number is out of 32-bit int range.
double trunc(double x) { 
    float_usage[USAGE_TRUNC]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002cca:	2400      	movs	r4, #0
 8002ccc:	4d02      	ldr	r5, [pc, #8]	; (8002cd8 <trunc+0x88>)
 8002cce:	e7e0      	b.n	8002c92 <trunc+0x42>
 8002cd0:	200005f4 	.word	0x200005f4
 8002cd4:	7fefffff 	.word	0x7fefffff
 8002cd8:	7ff80000 	.word	0x7ff80000

08002cdc <floor>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 8002cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_FLOOR]++;
 8002ce0:	4f1d      	ldr	r7, [pc, #116]	; (8002d58 <floor+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002ce2:	4602      	mov	r2, r0
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
    float_usage[USAGE_FLOOR]++;
 8002ce4:	f897 602a 	ldrb.w	r6, [r7, #42]	; 0x2a
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002ce8:	460b      	mov	r3, r1
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
    float_usage[USAGE_FLOOR]++;
 8002cea:	3601      	adds	r6, #1
 8002cec:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::floor(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:928: undefined reference to `floor'

//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460d      	mov	r5, r1
    float_usage[USAGE_FLOOR]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002cf4:	f7ff fbc4 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002cf8:	bb50      	cbnz	r0, 8002d50 <floor+0x74>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8002cfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4631      	mov	r1, r6
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <floor+0x80>)
 8002d08:	f7ff fbba 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002d0c:	b958      	cbnz	r0, 8002d26 <floor+0x4a>
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4631      	mov	r1, r6
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <floor+0x80>)
 8002d18:	f7ff fb66 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002d1c:	b918      	cbnz	r0, 8002d26 <floor+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
    return floored;
}
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002d26:	4629      	mov	r1, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f008 fddd 	bl	800b8e8 <__aeabi_d2f>
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4606      	mov	r6, r0
 8002d32:	f7ff f883 	bl	8001e3c <qfp_fcmp>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0f1      	beq.n	8002d1e <floor+0x42>

    //  qfp_float2int() behaves like floor().
    int floored = qfp_float2int(x);
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff f918 	bl	8001f70 <qfp_float2int>
    return floored;
 8002d40:	f008 fd68 	bl	800b814 <__aeabi_i2d>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
}
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the largest integer value not greater than arg.
//  TODO: Warn if number is out of 32-bit int range.
double floor(double x) { 
    float_usage[USAGE_FLOOR]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002d50:	2400      	movs	r4, #0
 8002d52:	4d03      	ldr	r5, [pc, #12]	; (8002d60 <floor+0x84>)
 8002d54:	e7e3      	b.n	8002d1e <floor+0x42>
 8002d56:	bf00      	nop
 8002d58:	200005f4 	.word	0x200005f4
 8002d5c:	7fefffff 	.word	0x7fefffff
 8002d60:	7ff80000 	.word	0x7ff80000

08002d64 <ceil>:
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 8002d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_CEIL]++;
 8002d68:	4f1d      	ldr	r7, [pc, #116]	; (8002de0 <ceil+0x7c>)
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002d6a:	4602      	mov	r2, r0
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
    float_usage[USAGE_CEIL]++;
 8002d6c:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002d70:	460b      	mov	r3, r1
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
    float_usage[USAGE_CEIL]++;
 8002d72:	3601      	adds	r6, #1
 8002d74:	f887 602b 	strb.w	r6, [r7, #43]	; 0x2b
// CMakeFiles/STM32_BLUE_PILL.dir/pxtapp/base/core.cpp.o: In function `Math_::ceil(pxt::TValueStruct*)':
// /src/pxtapp/base/core.cpp:931: undefined reference to `ceil'

//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
    float_usage[USAGE_CEIL]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002d7c:	f7ff fb80 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002d80:	bb58      	cbnz	r0, 8002dda <ceil+0x76>

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }
 8002d82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002d86:	4620      	mov	r0, r4
 8002d88:	4631      	mov	r1, r6
 8002d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <ceil+0x80>)
 8002d90:	f7ff fb76 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002d94:	b958      	cbnz	r0, 8002dae <ceil+0x4a>
 8002d96:	4620      	mov	r0, r4
 8002d98:	4631      	mov	r1, r6
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <ceil+0x80>)
 8002da0:	f7ff fb22 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002da4:	b918      	cbnz	r0, 8002dae <ceil+0x4a>
    if (qfp_fcmp(x, 0) == 0) { return x; }

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
    return floored + 1;
}
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    //  If arg is ±∞, it is returned, unmodified
    if (isinf(x)) { return x; }

    //  If arg is ±0, it is returned, unmodified
    if (qfp_fcmp(x, 0) == 0) { return x; }
 8002dae:	4629      	mov	r1, r5
 8002db0:	4620      	mov	r0, r4
 8002db2:	f008 fd99 	bl	800b8e8 <__aeabi_d2f>
 8002db6:	2100      	movs	r1, #0
 8002db8:	4606      	mov	r6, r0
 8002dba:	f7ff f83f 	bl	8001e3c <qfp_fcmp>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d0f1      	beq.n	8002da6 <ceil+0x42>

    //  qfp_float2int() behaves like floor().  Always add one.
    int floored = qfp_float2int(x);
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff f8d4 	bl	8001f70 <qfp_float2int>
    return floored + 1;
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f008 fd23 	bl	800b814 <__aeabi_i2d>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	460d      	mov	r5, r1
}
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//  Computes the smallest integer value not less than arg.
//  TODO: Warn if number is out of 32-bit int range.
double ceil(double x) { 
    float_usage[USAGE_CEIL]++;
    //  If arg is NaN, NaN is returned
    if (isnan(x)) { return NAN; }
 8002dda:	2400      	movs	r4, #0
 8002ddc:	4d02      	ldr	r5, [pc, #8]	; (8002de8 <ceil+0x84>)
 8002dde:	e7e2      	b.n	8002da6 <ceil+0x42>
 8002de0:	200005f4 	.word	0x200005f4
 8002de4:	7fefffff 	.word	0x7fefffff
 8002de8:	7ff80000 	.word	0x7ff80000

08002dec <fmod>:
// ceil(2205.1969) = 2206.000000
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
 8002dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float_usage[USAGE_FMOD]++;
 8002df0:	f8df e134 	ldr.w	lr, [pc, #308]	; 8002f28 <fmod+0x13c>
// ceil(2205.1969) = 2206.000000
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
 8002df4:	4617      	mov	r7, r2
    float_usage[USAGE_FMOD]++;
 8002df6:	f89e c02c 	ldrb.w	ip, [lr, #44]	; 0x2c
// ceil(2205.1969) = 2206.000000
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
 8002dfa:	461e      	mov	r6, r3
    float_usage[USAGE_FMOD]++;
 8002dfc:	f10c 0c01 	add.w	ip, ip, #1
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
    float_usage[USAGE_FMOD]++;
 8002e04:	f88e c02c 	strb.w	ip, [lr, #44]	; 0x2c
// ceil(2205.1969) = 2206.000000
// ceil(-270.8886) = -270.000000

//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
    float_usage[USAGE_FMOD]++;
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 8002e0c:	f7ff fb38 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002e10:	bb10      	cbnz	r0, 8002e58 <fmod+0x6c>
 8002e12:	463a      	mov	r2, r7
 8002e14:	4638      	mov	r0, r7
 8002e16:	4633      	mov	r3, r6
 8002e18:	4631      	mov	r1, r6
 8002e1a:	f7ff fb31 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002e1e:	b9d8      	cbnz	r0, 8002e58 <fmod+0x6c>

    // If x is ±0 and y is not zero, ±0 is returned
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8002e20:	4629      	mov	r1, r5
 8002e22:	4620      	mov	r0, r4
 8002e24:	f008 fd60 	bl	800b8e8 <__aeabi_d2f>
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4681      	mov	r9, r0
 8002e2c:	f7ff f806 	bl	8001e3c <qfp_fcmp>
 8002e30:	4680      	mov	r8, r0
 8002e32:	b3a0      	cbz	r0, 8002e9e <fmod+0xb2>

    // If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
    if (isinf(x) && !isnan(y)) { return NAN; }
 8002e34:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e40:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <fmod+0x134>)
 8002e42:	f7ff fb1d 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002e46:	b958      	cbnz	r0, 8002e60 <fmod+0x74>
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <fmod+0x134>)
 8002e52:	f7ff fac9 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002e56:	b918      	cbnz	r0, 8002e60 <fmod+0x74>
//  Computes the floating-point remainder of the division operation x/y
//  i.e. x - n*y, where n is x/y with its fractional part truncated.
double fmod(double x, double y) { 
    float_usage[USAGE_FMOD]++;
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4932      	ldr	r1, [pc, #200]	; (8002f24 <fmod+0x138>)
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 8002e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    // If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
    if (isinf(x) && !isnan(y)) { return NAN; }

    // If y is ±0 and x is not NaN, NaN is returned and FE_INVALID is raised
    if (qfp_fcmp(y, 0) == 0 && !isnan(x)) { return NAN; }
 8002e60:	4631      	mov	r1, r6
 8002e62:	4638      	mov	r0, r7
 8002e64:	f008 fd40 	bl	800b8e8 <__aeabi_d2f>
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f7fe ffe7 	bl	8001e3c <qfp_fcmp>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d0f2      	beq.n	8002e58 <fmod+0x6c>

    // If y is ±∞ and x is finite, x is returned.
    if (isinf(y) && !isinf(x)) { return x; }
 8002e72:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8002e76:	4638      	mov	r0, r7
 8002e78:	4631      	mov	r1, r6
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e7e:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <fmod+0x134>)
 8002e80:	f7ff fafe 	bl	8002480 <__wrap___aeabi_dcmpun>
 8002e84:	b9b8      	cbnz	r0, 8002eb6 <fmod+0xca>
 8002e86:	4638      	mov	r0, r7
 8002e88:	4631      	mov	r1, r6
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <fmod+0x134>)
 8002e90:	f7ff faaa 	bl	80023e8 <__wrap___aeabi_dcmple>
 8002e94:	b978      	cbnz	r0, 8002eb6 <fmod+0xca>
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
}
 8002e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float_usage[USAGE_FMOD]++;
    // If either argument is NaN, NaN is returned
    if (isnan(x) || isnan(y)) { return NAN; }

    // If x is ±0 and y is not zero, ±0 is returned
    if (qfp_fcmp(x, 0) == 0 && qfp_fcmp(y, 0) != 0) { return 0; }
 8002e9e:	4631      	mov	r1, r6
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	f008 fd21 	bl	800b8e8 <__aeabi_d2f>
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f7fe ffc8 	bl	8001e3c <qfp_fcmp>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d0c1      	beq.n	8002e34 <fmod+0x48>
 8002eb0:	4640      	mov	r0, r8
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	e7d2      	b.n	8002e5c <fmod+0x70>

    // From https://en.cppreference.com/w/c/numeric/math/fmod
    double xabs = fabs(x);
    double yabs = fabs(y);
    // Was: double result = remainder(fabs(x), (y = fabs(y)));
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	4641      	mov	r1, r8
 8002eba:	f008 fd15 	bl	800b8e8 <__aeabi_d2f>
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f008 fd10 	bl	800b8e8 <__aeabi_d2f>
 8002ec8:	4605      	mov	r5, r0
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7fe ffec 	bl	8001eaa <qfp_fdiv_fast>
 8002ed2:	f008 fcb1 	bl	800b838 <__aeabi_f2d>
 8002ed6:	f7ff febb 	bl	8002c50 <trunc>
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8002eda:	f008 fd05 	bl	800b8e8 <__aeabi_d2f>
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fe ffba 	bl	8001e58 <qfp_fmul>
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7fe ff84 	bl	8001df4 <qfp_fsub>

    // Was: if (signbit(result)) result += y;
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8002eec:	2100      	movs	r1, #0
    // From https://en.cppreference.com/w/c/numeric/math/fmod
    double xabs = fabs(x);
    double yabs = fabs(y);
    // Was: double result = remainder(fabs(x), (y = fabs(y)));
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive
 8002eee:	4604      	mov	r4, r0

    // Was: if (signbit(result)) result += y;
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8002ef0:	f7fe ffa4 	bl	8001e3c <qfp_fcmp>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	db0c      	blt.n	8002f12 <fmod+0x126>

    // Composes a floating point value with the magnitude of result and the sign of x.
    // Was: return copysign(result, x);
    return (qfp_fcmp(x, 0) < 0) ? -result : result;
 8002ef8:	4648      	mov	r0, r9
 8002efa:	2100      	movs	r1, #0
 8002efc:	f7fe ff9e 	bl	8001e3c <qfp_fcmp>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	bfb8      	it	lt
 8002f04:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f008 fc95 	bl	800b838 <__aeabi_f2d>
}
 8002f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    // Was: double result = remainder(fabs(x), (y = fabs(y)));
    double n = trunc(qfp_fdiv_fast(xabs, yabs));
    float result = qfp_fsub(xabs, qfp_fmul(n, yabs));  //  x - n*y, always positive

    // Was: if (signbit(result)) result += y;
    if (qfp_fcmp(result, 0) < 0) { result = qfp_fadd( result , yabs ); }
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f7fe ff70 	bl	8001dfa <qfp_fadd>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	e7ec      	b.n	8002ef8 <fmod+0x10c>
 8002f1e:	bf00      	nop
 8002f20:	7fefffff 	.word	0x7fefffff
 8002f24:	7ff80000 	.word	0x7ff80000
 8002f28:	200005f4 	.word	0x200005f4

08002f2c <_strtol_l.isra.0>:

/*
 * Convert a string to a long integer.
 */
static long
_strtol_l (struct _reent *rptr, const char *__restrict nptr,
 8002f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	4686      	mov	lr, r0
	   char **__restrict endptr, int base, locale_t loc)
{
	register const unsigned char *s = (const unsigned char *)nptr;
 8002f32:	4608      	mov	r0, r1
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace_l(c, loc));
 8002f34:	4f38      	ldr	r7, [pc, #224]	; (8003018 <_strtol_l.isra.0+0xec>)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8002f36:	4605      	mov	r5, r0
 8002f38:	f815 4b01 	ldrb.w	r4, [r5], #1
	} while (isspace_l(c, loc));
 8002f3c:	5de6      	ldrb	r6, [r4, r7]
 8002f3e:	f016 0608 	ands.w	r6, r6, #8
 8002f42:	d134      	bne.n	8002fae <_strtol_l.isra.0+0x82>
	if (c == '-') {
 8002f44:	2c2d      	cmp	r4, #45	; 0x2d
 8002f46:	d134      	bne.n	8002fb2 <_strtol_l.isra.0+0x86>
		neg = 1;
 8002f48:	f04f 0801 	mov.w	r8, #1
		c = *s++;
 8002f4c:	782c      	ldrb	r4, [r5, #0]
 8002f4e:	1c85      	adds	r5, r0, #2
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05c      	beq.n	800300e <_strtol_l.isra.0+0xe2>
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d109      	bne.n	8002f6c <_strtol_l.isra.0+0x40>
 8002f58:	2c30      	cmp	r4, #48	; 0x30
 8002f5a:	d107      	bne.n	8002f6c <_strtol_l.isra.0+0x40>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8002f5c:	7828      	ldrb	r0, [r5, #0]
 8002f5e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002f62:	2858      	cmp	r0, #88	; 0x58
 8002f64:	d14e      	bne.n	8003004 <_strtol_l.isra.0+0xd8>
		c = s[1];
		s += 2;
		base = 16;
 8002f66:	2310      	movs	r3, #16
		c = *s++;
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
	    c == '0' && (*s == 'x' || *s == 'X')) {
		c = s[1];
 8002f68:	786c      	ldrb	r4, [r5, #1]
		s += 2;
 8002f6a:	3502      	adds	r5, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8002f6c:	f1b8 0f00 	cmp.w	r8, #0
 8002f70:	bf14      	ite	ne
 8002f72:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8002f76:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8002f7a:	2700      	movs	r7, #0
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
 8002f7c:	fbbc f9f3 	udiv	r9, ip, r3
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8002f80:	4638      	mov	r0, r7
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
 8002f82:	fb03 ca19 	mls	sl, r3, r9, ip
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
		if (c >= '0' && c <= '9')
 8002f86:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002f8a:	2e09      	cmp	r6, #9
 8002f8c:	d818      	bhi.n	8002fc0 <_strtol_l.isra.0+0x94>
			c -= '0';
 8002f8e:	4634      	mov	r4, r6
			c -= 'A' - 10;
		else if (c >= 'a' && c <= 'z')
			c -= 'a' - 10;
		else
			break;
		if (c >= base)
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	dd24      	ble.n	8002fde <_strtol_l.isra.0+0xb2>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
 8002f94:	1c7e      	adds	r6, r7, #1
 8002f96:	d007      	beq.n	8002fa8 <_strtol_l.isra.0+0x7c>
 8002f98:	4581      	cmp	r9, r0
 8002f9a:	d31d      	bcc.n	8002fd8 <_strtol_l.isra.0+0xac>
 8002f9c:	d101      	bne.n	8002fa2 <_strtol_l.isra.0+0x76>
 8002f9e:	45a2      	cmp	sl, r4
 8002fa0:	db1a      	blt.n	8002fd8 <_strtol_l.isra.0+0xac>
			any = -1;
		else {
			any = 1;
 8002fa2:	2701      	movs	r7, #1
			acc *= base;
			acc += c;
 8002fa4:	fb00 4003 	mla	r0, r0, r3, r4
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8002fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002fac:	e7eb      	b.n	8002f86 <_strtol_l.isra.0+0x5a>
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
	} while (isspace_l(c, loc));
 8002fae:	4628      	mov	r0, r5
 8002fb0:	e7c1      	b.n	8002f36 <_strtol_l.isra.0+0xa>
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
 8002fb2:	2c2b      	cmp	r4, #43	; 0x2b
		c = *s++;
 8002fb4:	bf08      	it	eq
 8002fb6:	782c      	ldrbeq	r4, [r5, #0]
{
	register const unsigned char *s = (const unsigned char *)nptr;
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
 8002fb8:	46b0      	mov	r8, r6
	} while (isspace_l(c, loc));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
		c = *s++;
 8002fba:	bf08      	it	eq
 8002fbc:	1c85      	addeq	r5, r0, #2
 8002fbe:	e7c7      	b.n	8002f50 <_strtol_l.isra.0+0x24>
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
		if (c >= '0' && c <= '9')
			c -= '0';
		else if (c >= 'A' && c <= 'Z')
 8002fc0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002fc4:	2e19      	cmp	r6, #25
 8002fc6:	d801      	bhi.n	8002fcc <_strtol_l.isra.0+0xa0>
			c -= 'A' - 10;
 8002fc8:	3c37      	subs	r4, #55	; 0x37
 8002fca:	e7e1      	b.n	8002f90 <_strtol_l.isra.0+0x64>
		else if (c >= 'a' && c <= 'z')
 8002fcc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002fd0:	2e19      	cmp	r6, #25
 8002fd2:	d804      	bhi.n	8002fde <_strtol_l.isra.0+0xb2>
			c -= 'a' - 10;
 8002fd4:	3c57      	subs	r4, #87	; 0x57
 8002fd6:	e7db      	b.n	8002f90 <_strtol_l.isra.0+0x64>
		else
			break;
		if (c >= base)
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
			any = -1;
 8002fd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002fdc:	e7e4      	b.n	8002fa8 <_strtol_l.isra.0+0x7c>
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
 8002fde:	1c7b      	adds	r3, r7, #1
 8002fe0:	d106      	bne.n	8002ff0 <_strtol_l.isra.0+0xc4>
		acc = neg ? LONG_MIN : LONG_MAX;
		__errno_r(rptr) = ERANGE;
 8002fe2:	2322      	movs	r3, #34	; 0x22
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
		acc = neg ? LONG_MIN : LONG_MAX;
 8002fe4:	4660      	mov	r0, ip
		__errno_r(rptr) = ERANGE;
 8002fe6:	f8ce 3000 	str.w	r3, [lr]
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
 8002fea:	b942      	cbnz	r2, 8002ffe <_strtol_l.isra.0+0xd2>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
	return (acc);
}
 8002fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
	}
	if (any < 0) {
		acc = neg ? LONG_MIN : LONG_MAX;
		__errno_r(rptr) = ERANGE;
	} else if (neg)
 8002ff0:	f1b8 0f00 	cmp.w	r8, #0
 8002ff4:	d000      	beq.n	8002ff8 <_strtol_l.isra.0+0xcc>
		acc = -acc;
 8002ff6:	4240      	negs	r0, r0
	if (endptr != 0)
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d0f7      	beq.n	8002fec <_strtol_l.isra.0+0xc0>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
 8002ffc:	b107      	cbz	r7, 8003000 <_strtol_l.isra.0+0xd4>
 8002ffe:	1e69      	subs	r1, r5, #1
 8003000:	6011      	str	r1, [r2, #0]
	return (acc);
 8003002:	e7f3      	b.n	8002fec <_strtol_l.isra.0+0xc0>
	    c == '0' && (*s == 'x' || *s == 'X')) {
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
 8003004:	2430      	movs	r4, #48	; 0x30
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1b0      	bne.n	8002f6c <_strtol_l.isra.0+0x40>
		base = c == '0' ? 8 : 10;
 800300a:	2308      	movs	r3, #8
 800300c:	e7ae      	b.n	8002f6c <_strtol_l.isra.0+0x40>
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
 800300e:	2c30      	cmp	r4, #48	; 0x30
 8003010:	d0a4      	beq.n	8002f5c <_strtol_l.isra.0+0x30>
		c = s[1];
		s += 2;
		base = 16;
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
 8003012:	230a      	movs	r3, #10
 8003014:	e7aa      	b.n	8002f6c <_strtol_l.isra.0+0x40>
 8003016:	bf00      	nop
 8003018:	0800475d 	.word	0x0800475d

0800301c <strtol>:
long
strtol (const char *__restrict s,
	char **__restrict ptr,
	int base)
{
	return _strtol_l (_REENT, s, ptr, base, __get_current_locale ());
 800301c:	4613      	mov	r3, r2
 800301e:	460a      	mov	r2, r1
 8003020:	4601      	mov	r1, r0
 8003022:	4802      	ldr	r0, [pc, #8]	; (800302c <strtol+0x10>)
 8003024:	6800      	ldr	r0, [r0, #0]
 8003026:	f7ff bf81 	b.w	8002f2c <_strtol_l.isra.0>
 800302a:	bf00      	nop
 800302c:	20000420 	.word	0x20000420

08003030 <memcpy>:
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8003030:	440a      	add	r2, r1
 8003032:	4291      	cmp	r1, r2
 8003034:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003038:	d100      	bne.n	800303c <memcpy+0xc>
 800303a:	4770      	bx	lr
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 800303c:	b510      	push	{r4, lr}

  void *save = dst0;

  while (len0--)
    {
      *dst++ = *src++;
 800303e:	f811 4b01 	ldrb.w	r4, [r1], #1
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8003042:	4291      	cmp	r1, r2
    {
      *dst++ = *src++;
 8003044:	f803 4f01 	strb.w	r4, [r3, #1]!
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8003048:	d1f9      	bne.n	800303e <memcpy+0xe>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800304a:	bd10      	pop	{r4, pc}

0800304c <strcmp>:
	.syntax unified
def_fn strcmp
	.cfi_sections .debug_frame
	.cfi_startproc
1:
	ldrb	r2, [r0], #1
 800304c:	f810 2b01 	ldrb.w	r2, [r0], #1
	ldrb	r3, [r1], #1
 8003050:	f811 3b01 	ldrb.w	r3, [r1], #1
	cmp	r2, #1
 8003054:	2a01      	cmp	r2, #1
	it	cs
 8003056:	bf28      	it	cs
	cmpcs	r2, r3
 8003058:	429a      	cmpcs	r2, r3
	beq	1b
 800305a:	d0f7      	beq.n	800304c <strcmp>
2:
	subs	r0, r2, r3
 800305c:	1ad0      	subs	r0, r2, r3
	bx	lr
 800305e:	4770      	bx	lr

08003060 <strlen>:
	.eabi_attribute Tag_ARM_ISA_use, 0
	.thumb
	.syntax unified

def_fn	strlen p2align=1
	mov     r3, r0
 8003060:	4603      	mov	r3, r0
1:	ldrb.w  r2, [r3], #1
 8003062:	f813 2b01 	ldrb.w	r2, [r3], #1
	cmp     r2, #0
 8003066:	2a00      	cmp	r2, #0
	bne	1b
 8003068:	d1fb      	bne.n	8003062 <strlen+0x2>
	subs    r0, r3, r0
 800306a:	1a18      	subs	r0, r3, r0
	subs    r0, #1
 800306c:	3801      	subs	r0, #1
	bx      lr
 800306e:	4770      	bx	lr

08003070 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 8003070:	b530      	push	{r4, r5, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8003072:	2400      	movs	r4, #0
    {
      if (*s1 != *s2)
 8003074:	3901      	subs	r1, #1
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8003076:	42a2      	cmp	r2, r4
 8003078:	d101      	bne.n	800307e <memcmp+0xe>
	  return *s1 - *s2;
	}
      s1++;
      s2++;
    }
  return 0;
 800307a:	2000      	movs	r0, #0
 800307c:	e005      	b.n	800308a <memcmp+0x1a>
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
    {
      if (*s1 != *s2)
 800307e:	5d03      	ldrb	r3, [r0, r4]
 8003080:	3401      	adds	r4, #1
 8003082:	5d0d      	ldrb	r5, [r1, r4]
 8003084:	42ab      	cmp	r3, r5
 8003086:	d0f6      	beq.n	8003076 <memcmp+0x6>
	{
	  return *s1 - *s2;
 8003088:	1b58      	subs	r0, r3, r5
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800308a:	bd30      	pop	{r4, r5, pc}

0800308c <memmove>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = dst_void;
  const char *src = src_void;

  if (src < dst && dst < src + length)
 800308c:	4288      	cmp	r0, r1
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
 800308e:	b510      	push	{r4, lr}
 8003090:	eb01 0302 	add.w	r3, r1, r2
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = dst_void;
  const char *src = src_void;

  if (src < dst && dst < src + length)
 8003094:	d902      	bls.n	800309c <memmove+0x10>
 8003096:	4283      	cmp	r3, r0
 8003098:	461c      	mov	r4, r3
 800309a:	d807      	bhi.n	80030ac <memmove+0x20>
 800309c:	1e42      	subs	r2, r0, #1
	  *--dst = *--src;
	}
    }
  else
    {
      while (length--)
 800309e:	4299      	cmp	r1, r3
 80030a0:	d008      	beq.n	80030b4 <memmove+0x28>
	{
	  *dst++ = *src++;
 80030a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030aa:	e7f8      	b.n	800309e <memmove+0x12>

  if (src < dst && dst < src + length)
    {
      /* Have to copy backwards */
      src += length;
      dst += length;
 80030ac:	1883      	adds	r3, r0, r2
 80030ae:	1a9a      	subs	r2, r3, r2
      while (length--)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d100      	bne.n	80030b6 <memmove+0x2a>
        }
    }

  return dst_void;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80030b4:	bd10      	pop	{r4, pc}
      /* Have to copy backwards */
      src += length;
      dst += length;
      while (length--)
	{
	  *--dst = *--src;
 80030b6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80030ba:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80030be:	e7f7      	b.n	80030b0 <memmove+0x24>

080030c0 <memset>:
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
  char *s = (char *) m;
 80030c0:	4603      	mov	r3, r0
 80030c2:	4402      	add	r2, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
    *s++ = (char) c;

  return m;
}
 80030c8:	4770      	bx	lr
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
    *s++ = (char) c;
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <strstr>:
    || CHAR_BIT > 8

/* Small and efficient strstr implementation.  */
char *
strstr (const char *hs, const char *ne)
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  size_t i;
  int c = ne[0];
 80030d2:	780c      	ldrb	r4, [r1, #0]

  if (c == 0)
 80030d4:	b164      	cbz	r4, 80030f0 <strstr+0x20>
 80030d6:	4603      	mov	r3, r0
    return (char*)hs;

  for ( ; hs[0] != '\0'; hs++)
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	1c5e      	adds	r6, r3, #1
 80030de:	b90a      	cbnz	r2, 80030e4 <strstr+0x14>
	  break;
      if (ne[i] == '\0')
	return (char*)hs;
    }

  return NULL;
 80030e0:	4610      	mov	r0, r2
 80030e2:	e005      	b.n	80030f0 <strstr+0x20>
  if (c == 0)
    return (char*)hs;

  for ( ; hs[0] != '\0'; hs++)
    {
      if (hs[0] != c)
 80030e4:	4294      	cmp	r4, r2
 80030e6:	d108      	bne.n	80030fa <strstr+0x2a>
 80030e8:	460d      	mov	r5, r1
	continue;
      for (i = 1; ne[i] != 0; i++)
 80030ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80030ee:	b902      	cbnz	r2, 80030f2 <strstr+0x22>
      if (ne[i] == '\0')
	return (char*)hs;
    }

  return NULL;
}
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( ; hs[0] != '\0'; hs++)
    {
      if (hs[0] != c)
	continue;
      for (i = 1; ne[i] != 0; i++)
	if (hs[i] != ne[i])
 80030f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80030f6:	4297      	cmp	r7, r2
 80030f8:	d0f7      	beq.n	80030ea <strstr+0x1a>
    || CHAR_BIT > 8

/* Small and efficient strstr implementation.  */
char *
strstr (const char *hs, const char *ne)
{
 80030fa:	4633      	mov	r3, r6
 80030fc:	e7ec      	b.n	80030d8 <strstr+0x8>

080030fe <strncat>:
	size_t n)
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *s = s1;

  while (*s1)
 80030fe:	4603      	mov	r3, r0

char *
strncat (char *__restrict s1,
	const char *__restrict s2,
	size_t n)
{
 8003100:	b530      	push	{r4, r5, lr}
 8003102:	461c      	mov	r4, r3
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *s = s1;

  while (*s1)
 8003104:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003108:	b945      	cbnz	r5, 800311c <strncat+0x1e>
    s1++;
  while (n-- != 0 && (*s1++ = *s2++))
 800310a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800310e:	d304      	bcc.n	800311a <strncat+0x1c>
 8003110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003114:	f803 4b01 	strb.w	r4, [r3], #1
 8003118:	b914      	cbnz	r4, 8003120 <strncat+0x22>
	*s1 = '\0';
    }
	
  return s;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800311a:	bd30      	pop	{r4, r5, pc}
 800311c:	4623      	mov	r3, r4
 800311e:	e7f0      	b.n	8003102 <strncat+0x4>

  while (*s1)
    s1++;
  while (n-- != 0 && (*s1++ = *s2++))
    {
      if (n == 0)
 8003120:	2a00      	cmp	r2, #0
 8003122:	d1f2      	bne.n	800310a <strncat+0xc>
	*s1 = '\0';
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e7f0      	b.n	800310a <strncat+0xc>

08003128 <strncpy>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 8003128:	4603      	mov	r3, r0

char *
strncpy (char *__restrict dst0,
	const char *__restrict src0,
	size_t count)
{
 800312a:	b510      	push	{r4, lr}
 800312c:	3901      	subs	r1, #1
  char *dscan;
  const char *sscan;

  dscan = dst0;
  sscan = src0;
  while (count > 0)
 800312e:	b132      	cbz	r2, 800313e <strncpy+0x16>
    {
      --count;
      if ((*dscan++ = *sscan++) == '\0')
 8003130:	f811 4f01 	ldrb.w	r4, [r1, #1]!

  dscan = dst0;
  sscan = src0;
  while (count > 0)
    {
      --count;
 8003134:	3a01      	subs	r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 8003136:	f803 4b01 	strb.w	r4, [r3], #1
 800313a:	2c00      	cmp	r4, #0
 800313c:	d1f7      	bne.n	800312e <strncpy+0x6>
	break;
    }
  while (count-- > 0)
    *dscan++ = '\0';
 800313e:	2100      	movs	r1, #0
 8003140:	441a      	add	r2, r3
    {
      --count;
      if ((*dscan++ = *sscan++) == '\0')
	break;
    }
  while (count-- > 0)
 8003142:	4293      	cmp	r3, r2
 8003144:	d100      	bne.n	8003148 <strncpy+0x20>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8003146:	bd10      	pop	{r4, pc}
      --count;
      if ((*dscan++ = *sscan++) == '\0')
	break;
    }
  while (count-- > 0)
    *dscan++ = '\0';
 8003148:	f803 1b01 	strb.w	r1, [r3], #1
 800314c:	e7f9      	b.n	8003142 <strncpy+0x1a>
	...

08003150 <debug_flush.part.1>:
 8003150:	b510      	push	{r4, lr}
 8003152:	4c0b      	ldr	r4, [pc, #44]	; (8003180 <debug_flush.part.1+0x30>)
 8003154:	b084      	sub	sp, #16
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ff82 	bl	8003060 <strlen>
 800315c:	b158      	cbz	r0, 8003176 <debug_flush.part.1+0x26>
 800315e:	2202      	movs	r2, #2
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <debug_flush.part.1+0x34>)
 8003162:	9402      	str	r4, [sp, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	9003      	str	r0, [sp, #12]
 8003168:	9201      	str	r2, [sp, #4]
 800316a:	b123      	cbz	r3, 8003176 <debug_flush.part.1+0x26>
 800316c:	2305      	movs	r3, #5
 800316e:	aa01      	add	r2, sp, #4
 8003170:	4618      	mov	r0, r3
 8003172:	4611      	mov	r1, r2
 8003174:	beab      	bkpt	0x00ab
 8003176:	2300      	movs	r3, #0
 8003178:	7023      	strb	r3, [r4, #0]
 800317a:	b004      	add	sp, #16
 800317c:	bd10      	pop	{r4, pc}
 800317e:	bf00      	nop
 8003180:	20000624 	.word	0x20000624
 8003184:	20000725 	.word	0x20000725

08003188 <_ZL12debug_appendPKcj>:
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318a:	4c13      	ldr	r4, [pc, #76]	; (80031d8 <_ZL12debug_appendPKcj+0x50>)
 800318c:	b085      	sub	sp, #20
 800318e:	4607      	mov	r7, r0
 8003190:	4620      	mov	r0, r4
 8003192:	460d      	mov	r5, r1
 8003194:	f7ff ff64 	bl	8003060 <strlen>
 8003198:	1946      	adds	r6, r0, r5
 800319a:	2eff      	cmp	r6, #255	; 0xff
 800319c:	d912      	bls.n	80031c4 <_ZL12debug_appendPKcj+0x3c>
 800319e:	7823      	ldrb	r3, [r4, #0]
 80031a0:	b10b      	cbz	r3, 80031a6 <_ZL12debug_appendPKcj+0x1e>
 80031a2:	f7ff ffd5 	bl	8003150 <debug_flush.part.1>
 80031a6:	b15d      	cbz	r5, 80031c0 <_ZL12debug_appendPKcj+0x38>
 80031a8:	2202      	movs	r2, #2
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <_ZL12debug_appendPKcj+0x54>)
 80031ac:	9702      	str	r7, [sp, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	9503      	str	r5, [sp, #12]
 80031b2:	9201      	str	r2, [sp, #4]
 80031b4:	b123      	cbz	r3, 80031c0 <_ZL12debug_appendPKcj+0x38>
 80031b6:	2305      	movs	r3, #5
 80031b8:	aa01      	add	r2, sp, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	4611      	mov	r1, r2
 80031be:	beab      	bkpt	0x00ab
 80031c0:	b005      	add	sp, #20
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	462a      	mov	r2, r5
 80031c6:	4639      	mov	r1, r7
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff ff98 	bl	80030fe <strncat>
 80031ce:	2300      	movs	r3, #0
 80031d0:	55a3      	strb	r3, [r4, r6]
 80031d2:	b005      	add	sp, #20
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000624 	.word	0x20000624
 80031dc:	20000725 	.word	0x20000725

080031e0 <debug_print.part.3>:
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
 80031e4:	f7ff ff3c 	bl	8003060 <strlen>
 80031e8:	4601      	mov	r1, r0
 80031ea:	4620      	mov	r0, r4
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	f7ff bfca 	b.w	8003188 <_ZL12debug_appendPKcj>

080031f4 <enable_log>:
 80031f4:	2001      	movs	r0, #1
 80031f6:	2200      	movs	r2, #0
 80031f8:	4902      	ldr	r1, [pc, #8]	; (8003204 <enable_log+0x10>)
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <enable_log+0x14>)
 80031fc:	7008      	strb	r0, [r1, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000725 	.word	0x20000725
 8003208:	20000624 	.word	0x20000624

0800320c <debug_flush>:
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <debug_flush+0xc>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b10b      	cbz	r3, 8003216 <debug_flush+0xa>
 8003212:	f7ff bf9d 	b.w	8003150 <debug_flush.part.1>
 8003216:	4770      	bx	lr
 8003218:	20000624 	.word	0x20000624

0800321c <_Z11debug_printj>:
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <_Z11debug_printj+0x8c>)
 800321e:	0a43      	lsrs	r3, r0, #9
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <_Z11debug_printj+0x90>)
 8003228:	09db      	lsrs	r3, r3, #7
 800322a:	b085      	sub	sp, #20
 800322c:	3330      	adds	r3, #48	; 0x30
 800322e:	fbb0 f5f2 	udiv	r5, r0, r2
 8003232:	210a      	movs	r1, #10
 8003234:	2400      	movs	r4, #0
 8003236:	4f1e      	ldr	r7, [pc, #120]	; (80032b0 <_Z11debug_printj+0x94>)
 8003238:	e006      	b.n	8003248 <_Z11debug_printj+0x2c>
 800323a:	fbb0 f5f2 	udiv	r5, r0, r2
 800323e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b39      	cmp	r3, #57	; 0x39
 8003246:	d82a      	bhi.n	800329e <_Z11debug_printj+0x82>
 8003248:	fba7 c602 	umull	ip, r6, r7, r2
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	fb02 0015 	mls	r0, r2, r5, r0
 8003252:	ea4f 02d6 	mov.w	r2, r6, lsr #3
 8003256:	d800      	bhi.n	800325a <_Z11debug_printj+0x3e>
 8003258:	b134      	cbz	r4, 8003268 <_Z11debug_printj+0x4c>
 800325a:	2c0a      	cmp	r4, #10
 800325c:	dc04      	bgt.n	8003268 <_Z11debug_printj+0x4c>
 800325e:	ad04      	add	r5, sp, #16
 8003260:	4425      	add	r5, r4
 8003262:	f805 3c0c 	strb.w	r3, [r5, #-12]
 8003266:	3401      	adds	r4, #1
 8003268:	3901      	subs	r1, #1
 800326a:	d1e6      	bne.n	800323a <_Z11debug_printj+0x1e>
 800326c:	b16c      	cbz	r4, 800328a <_Z11debug_printj+0x6e>
 800326e:	2c0a      	cmp	r4, #10
 8003270:	dd0f      	ble.n	8003292 <_Z11debug_printj+0x76>
 8003272:	2300      	movs	r3, #0
 8003274:	a801      	add	r0, sp, #4
 8003276:	f88d 300e 	strb.w	r3, [sp, #14]
 800327a:	f7ff fef1 	bl	8003060 <strlen>
 800327e:	4601      	mov	r1, r0
 8003280:	a801      	add	r0, sp, #4
 8003282:	f7ff ff81 	bl	8003188 <_ZL12debug_appendPKcj>
 8003286:	b005      	add	sp, #20
 8003288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328a:	2330      	movs	r3, #48	; 0x30
 800328c:	2401      	movs	r4, #1
 800328e:	f88d 3004 	strb.w	r3, [sp, #4]
 8003292:	2300      	movs	r3, #0
 8003294:	aa04      	add	r2, sp, #16
 8003296:	4414      	add	r4, r2
 8003298:	f804 3c0c 	strb.w	r3, [r4, #-12]
 800329c:	e7e9      	b.n	8003272 <_Z11debug_printj+0x56>
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <_Z11debug_printj+0x98>)
 80032a0:	f7ff ff9e 	bl	80031e0 <debug_print.part.3>
 80032a4:	b005      	add	sp, #20
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a8:	00044b83 	.word	0x00044b83
 80032ac:	3b9aca00 	.word	0x3b9aca00
 80032b0:	cccccccd 	.word	0xcccccccd
 80032b4:	08004868 	.word	0x08004868

080032b8 <_Z11debug_printi>:
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d00d      	beq.n	80032d8 <_Z11debug_printi+0x20>
 80032bc:	db01      	blt.n	80032c2 <_Z11debug_printi+0xa>
 80032be:	f7ff bfad 	b.w	800321c <_Z11debug_printj>
 80032c2:	b510      	push	{r4, lr}
 80032c4:	461c      	mov	r4, r3
 80032c6:	4806      	ldr	r0, [pc, #24]	; (80032e0 <_Z11debug_printi+0x28>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	f7ff ff5d 	bl	8003188 <_ZL12debug_appendPKcj>
 80032ce:	4260      	negs	r0, r4
 80032d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d4:	f7ff bfa2 	b.w	800321c <_Z11debug_printj>
 80032d8:	2101      	movs	r1, #1
 80032da:	4802      	ldr	r0, [pc, #8]	; (80032e4 <_Z11debug_printi+0x2c>)
 80032dc:	f7ff bf54 	b.w	8003188 <_ZL12debug_appendPKcj>
 80032e0:	08004864 	.word	0x08004864
 80032e4:	08004860 	.word	0x08004860

080032e8 <debug_print>:
 80032e8:	7803      	ldrb	r3, [r0, #0]
 80032ea:	b903      	cbnz	r3, 80032ee <debug_print+0x6>
 80032ec:	4770      	bx	lr
 80032ee:	f7ff bf77 	b.w	80031e0 <debug_print.part.3>
 80032f2:	bf00      	nop

080032f4 <debug_println>:
 80032f4:	b508      	push	{r3, lr}
 80032f6:	7803      	ldrb	r3, [r0, #0]
 80032f8:	b92b      	cbnz	r3, 8003306 <debug_println+0x12>
 80032fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80032fe:	2101      	movs	r1, #1
 8003300:	4805      	ldr	r0, [pc, #20]	; (8003318 <debug_println+0x24>)
 8003302:	f7ff bf41 	b.w	8003188 <_ZL12debug_appendPKcj>
 8003306:	f7ff ff6b 	bl	80031e0 <debug_print.part.3>
 800330a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800330e:	2101      	movs	r1, #1
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <debug_println+0x24>)
 8003312:	f7ff bf39 	b.w	8003188 <_ZL12debug_appendPKcj>
 8003316:	bf00      	nop
 8003318:	08004874 	.word	0x08004874

0800331c <_Z13debug_printlni>:
 800331c:	b508      	push	{r3, lr}
 800331e:	f7ff ffcb 	bl	80032b8 <_Z11debug_printi>
 8003322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003326:	2101      	movs	r1, #1
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <_Z13debug_printlni+0x14>)
 800332a:	f7ff bf2d 	b.w	8003188 <_ZL12debug_appendPKcj>
 800332e:	bf00      	nop
 8003330:	08004874 	.word	0x08004874

08003334 <debug_print_unsigned>:
    debug_print(f);
    debug_append("\n", 1);
}

void debug_print_int(int i) { debug_print(i); }
void debug_print_unsigned(size_t l) { debug_print(l); }
 8003334:	f7ff bf72 	b.w	800321c <_Z11debug_printj>

08003338 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8003338:	b500      	push	{lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 800333a:	0903      	lsrs	r3, r0, #4
 800333c:	f103 0230 	add.w	r2, r3, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003340:	2a39      	cmp	r2, #57	; 0x39
 8003342:	bfc8      	it	gt
 8003344:	f103 0257 	addgt.w	r2, r3, #87	; 0x57
void debug_print_int(int i) { debug_print(i); }
void debug_print_unsigned(size_t l) { debug_print(l); }
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8003348:	b083      	sub	sp, #12
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 800334a:	bfc8      	it	gt
 800334c:	b252      	sxtbgt	r2, r2
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 800334e:	f88d 2004 	strb.w	r2, [sp, #4]
            }
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
 8003352:	2200      	movs	r2, #0
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8003354:	f000 000f 	and.w	r0, r0, #15
 8003358:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 800335c:	2b39      	cmp	r3, #57	; 0x39
 800335e:	bfc4      	itt	gt
 8003360:	3057      	addgt	r0, #87	; 0x57
 8003362:	b243      	sxtbgt	r3, r0
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
 8003364:	a801      	add	r0, sp, #4
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 8003366:	f88d 3005 	strb.w	r3, [sp, #5]
            }
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
 800336a:	f88d 2006 	strb.w	r2, [sp, #6]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
 800336e:	f7ff fe77 	bl	8003060 <strlen>
 8003372:	4601      	mov	r1, r0
 8003374:	a801      	add	r0, sp, #4
 8003376:	f7ff ff07 	bl	8003188 <_ZL12debug_appendPKcj>
}
 800337a:	b003      	add	sp, #12
 800337c:	f85d fb04 	ldr.w	pc, [sp], #4

08003380 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8003380:	b510      	push	{r4, lr}
 8003382:	4604      	mov	r4, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 8003384:	0e00      	lsrs	r0, r0, #24
 8003386:	f7ff ffd7 	bl	8003338 <debug_printhex>
 800338a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800338e:	f7ff ffd3 	bl	8003338 <debug_printhex>
 8003392:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003396:	f7ff ffcf 	bl	8003338 <debug_printhex>
 800339a:	b2e0      	uxtb	r0, r4
    }
}
 800339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void debug_printhex_unsigned(size_t l) {
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 80033a0:	f7ff bfca 	b.w	8003338 <debug_printhex>

080033a4 <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 80033a4:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 80033a6:	f7fd fadd 	bl	8000964 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 80033aa:	f000 f835 	bl	8003418 <led_setup>
	if (debugEnabled) {
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <platform_setup+0x4c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b91b      	cbnz	r3, 80033bc <platform_setup+0x18>
		led_on();
	}

	////TODO
	test_codal();
}
 80033b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  		debug_println("----platform_setup");
		led_on();
	}

	////TODO
	test_codal();
 80033b8:	f7fd b822 	b.w	8000400 <test_codal>
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
	led_setup();
	if (debugEnabled) {
		led_on(); led_wait();
 80033bc:	f000 f83c 	bl	8003438 <led_on>
 80033c0:	f000 f84a 	bl	8003458 <led_wait>
		led_off(); led_wait();
 80033c4:	f000 f840 	bl	8003448 <led_off>
 80033c8:	f000 f846 	bl	8003458 <led_wait>
		led_on(); led_wait();
 80033cc:	f000 f834 	bl	8003438 <led_on>
 80033d0:	f000 f842 	bl	8003458 <led_wait>
		led_off(); led_wait();
 80033d4:	f000 f838 	bl	8003448 <led_off>
 80033d8:	f000 f83e 	bl	8003458 <led_wait>
		//  This line will call ARM Semihosting and may hang until debugger is connected.
  		debug_println("----platform_setup");
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <platform_setup+0x50>)
 80033de:	f7ff ff89 	bl	80032f4 <debug_println>
		led_on();
 80033e2:	f000 f829 	bl	8003438 <led_on>
	}

	////TODO
	test_codal();
}
 80033e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  		debug_println("----platform_setup");
		led_on();
	}

	////TODO
	test_codal();
 80033ea:	f7fd b809 	b.w	8000400 <test_codal>
 80033ee:	bf00      	nop
 80033f0:	20000738 	.word	0x20000738
 80033f4:	08004878 	.word	0x08004878

080033f8 <enable_debug>:
}

void enable_debug(void) {
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 80033f8:	2201      	movs	r2, #1
 80033fa:	4b02      	ldr	r3, [pc, #8]	; (8003404 <enable_debug+0xc>)
 80033fc:	701a      	strb	r2, [r3, #0]
	enable_log();
 80033fe:	f7ff bef9 	b.w	80031f4 <enable_log>
 8003402:	bf00      	nop
 8003404:	20000738 	.word	0x20000738

08003408 <__cxa_pure_virtual>:
//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8003408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800340c:	f7fc bfd0 	b.w	80003b0 <target_panic>

08003410 <_Znwj>:
}

// define new and delete.
extern "C" void *operator new(size_t objsize) {
    return malloc(objsize);
 8003410:	f004 bf90 	b.w	8008334 <malloc>

08003414 <_ZdlPv>:
}

extern "C" void operator delete(void* obj) {
    free(obj);
 8003414:	f004 beb0 	b.w	8008178 <free>

08003418 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 8003418:	b510      	push	{r4, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 800341a:	f44f 7041 	mov.w	r0, #772	; 0x304
 800341e:	f7fd f8eb 	bl	80005f8 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
}
 8003422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void led_setup(void) {
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8003426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800342a:	2200      	movs	r2, #0
 800342c:	2102      	movs	r1, #2
 800342e:	4801      	ldr	r0, [pc, #4]	; (8003434 <led_setup+0x1c>)
 8003430:	f7fd b9f8 	b.w	8000824 <gpio_set_mode>
 8003434:	40011000 	.word	0x40011000

08003438 <led_on>:
}

void led_on(void) {
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 8003438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <led_on+0xc>)
 800343e:	f7fd b8c7 	b.w	80005d0 <gpio_clear>
 8003442:	bf00      	nop
 8003444:	40011000 	.word	0x40011000

08003448 <led_off>:
}

void led_off(void) {
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8003448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <led_off+0xc>)
 800344e:	f7fd b8bd 	b.w	80005cc <gpio_set>
 8003452:	bf00      	nop
 8003454:	40011000 	.word	0x40011000

08003458 <led_wait>:
void led_toggle(void) {
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <led_wait+0xc>)
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
		__asm__("nop");
 800345a:	bf00      	nop
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 800345c:	3b01      	subs	r3, #1
 800345e:	d1fc      	bne.n	800345a <led_wait+0x2>
		__asm__("nop");
}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	0016e360 	.word	0x0016e360

08003468 <platform_start_timer>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <platform_start_timer+0xf0>)
 800346c:	4d3b      	ldr	r5, [pc, #236]	; (800355c <platform_start_timer+0xf4>)
 800346e:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <platform_start_timer+0xf8>)
 8003470:	781c      	ldrb	r4, [r3, #0]
 8003472:	6028      	str	r0, [r5, #0]
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	b104      	cbz	r4, 800347a <platform_start_timer+0x12>
 8003478:	bd38      	pop	{r3, r4, r5, pc}
 800347a:	2501      	movs	r5, #1
 800347c:	4839      	ldr	r0, [pc, #228]	; (8003564 <platform_start_timer+0xfc>)
 800347e:	701d      	strb	r5, [r3, #0]
 8003480:	f7ff ff38 	bl	80032f4 <debug_println>
 8003484:	f7fd fa1a 	bl	80008bc <rcc_enable_rtc_clock>
 8003488:	4620      	mov	r0, r4
 800348a:	f7fe fb97 	bl	8001bbc <rtc_interrupt_disable>
 800348e:	4628      	mov	r0, r5
 8003490:	f7fe fb94 	bl	8001bbc <rtc_interrupt_disable>
 8003494:	2002      	movs	r0, #2
 8003496:	f7fe fb91 	bl	8001bbc <rtc_interrupt_disable>
 800349a:	4833      	ldr	r0, [pc, #204]	; (8003568 <platform_start_timer+0x100>)
 800349c:	f7ff ff2a 	bl	80032f4 <debug_println>
 80034a0:	f7ff feb4 	bl	800320c <debug_flush>
 80034a4:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80034a8:	f7fd f8a6 	bl	80005f8 <rcc_periph_clock_enable>
 80034ac:	f240 309b 	movw	r0, #923	; 0x39b
 80034b0:	f7fd f8a2 	bl	80005f8 <rcc_periph_clock_enable>
 80034b4:	f7fd f890 	bl	80005d8 <pwr_disable_backup_domain_write_protect>
 80034b8:	2005      	movs	r0, #5
 80034ba:	f7fd fa07 	bl	80008cc <rcc_set_rtc_clock_source>
 80034be:	4d2b      	ldr	r5, [pc, #172]	; (800356c <platform_start_timer+0x104>)
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <platform_start_timer+0x108>)
 80034c2:	601c      	str	r4, [r3, #0]
 80034c4:	602c      	str	r4, [r5, #0]
 80034c6:	f7fd f9f9 	bl	80008bc <rcc_enable_rtc_clock>
 80034ca:	f7fe fac7 	bl	8001a5c <rtc_enter_config_mode>
 80034ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d2:	4a28      	ldr	r2, [pc, #160]	; (8003574 <platform_start_timer+0x10c>)
 80034d4:	4828      	ldr	r0, [pc, #160]	; (8003578 <platform_start_timer+0x110>)
 80034d6:	4929      	ldr	r1, [pc, #164]	; (800357c <platform_start_timer+0x114>)
 80034d8:	6004      	str	r4, [r0, #0]
 80034da:	600c      	str	r4, [r1, #0]
 80034dc:	6014      	str	r4, [r2, #0]
 80034de:	6144      	str	r4, [r0, #20]
 80034e0:	614b      	str	r3, [r1, #20]
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	f7fe fac6 	bl	8001a74 <rtc_exit_config_mode>
 80034e8:	462a      	mov	r2, r5
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	f023 0308 	bic.w	r3, r3, #8
 80034f0:	602b      	str	r3, [r5, #0]
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	071b      	lsls	r3, r3, #28
 80034f6:	d5fc      	bpl.n	80034f2 <platform_start_timer+0x8a>
 80034f8:	2020      	movs	r0, #32
 80034fa:	f7fe fae7 	bl	8001acc <rtc_set_prescale_val>
 80034fe:	4820      	ldr	r0, [pc, #128]	; (8003580 <platform_start_timer+0x118>)
 8003500:	f7ff fef8 	bl	80032f4 <debug_println>
 8003504:	f7ff fe82 	bl	800320c <debug_flush>
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe fb0b 	bl	8001b24 <rtc_set_counter_val>
 800350e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003512:	f7fe fabb 	bl	8001a8c <rtc_set_alarm_time>
 8003516:	2100      	movs	r1, #0
 8003518:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800351c:	f7fe fa62 	bl	80019e4 <exti_set_trigger>
 8003520:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003524:	f7fe fa86 	bl	8001a34 <exti_enable_request>
 8003528:	2003      	movs	r0, #3
 800352a:	f7fe fa4d 	bl	80019c8 <nvic_enable_irq>
 800352e:	2029      	movs	r0, #41	; 0x29
 8003530:	f7fe fa4a 	bl	80019c8 <nvic_enable_irq>
 8003534:	b672      	cpsid	i
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe fb6c 	bl	8001c14 <rtc_clear_flag>
 800353c:	2001      	movs	r0, #1
 800353e:	f7fe fb69 	bl	8001c14 <rtc_clear_flag>
 8003542:	2002      	movs	r0, #2
 8003544:	f7fe fb66 	bl	8001c14 <rtc_clear_flag>
 8003548:	2000      	movs	r0, #0
 800354a:	f7fe fb0b 	bl	8001b64 <rtc_interrupt_enable>
 800354e:	2001      	movs	r0, #1
 8003550:	f7fe fb08 	bl	8001b64 <rtc_interrupt_enable>
 8003554:	b662      	cpsie	i
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	20000739 	.word	0x20000739
 800355c:	2000072c 	.word	0x2000072c
 8003560:	20000730 	.word	0x20000730
 8003564:	0800488c 	.word	0x0800488c
 8003568:	080048a4 	.word	0x080048a4
 800356c:	40002804 	.word	0x40002804
 8003570:	40002800 	.word	0x40002800
 8003574:	40002818 	.word	0x40002818
 8003578:	40002808 	.word	0x40002808
 800357c:	4000280c 	.word	0x4000280c
 8003580:	080048b4 	.word	0x080048b4

08003584 <platform_set_alarm>:
}

void platform_set_alarm(uint32_t millisec) {
	//  Set alarm for millisec milliseconds elapsed since startup.
	//  debug_print("alarm set "); debug_print((size_t) millisec); debug_println(""); ////
	rtc_set_alarm_time(millisec);
 8003584:	f7fe ba82 	b.w	8001a8c <rtc_set_alarm_time>

08003588 <rtc_isr>:
uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 8003588:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 800358a:	2000      	movs	r0, #0
 800358c:	f7fe fb5c 	bl	8001c48 <rtc_check_flag>
 8003590:	b900      	cbnz	r0, 8003594 <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 8003592:	bd10      	pop	{r4, pc}

void rtc_isr(void) {
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
		//  We hit an RTC tick interrupt.
		rtc_clear_flag(RTC_SEC);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fe fb3d 	bl	8001c14 <rtc_clear_flag>
		tickCount++;
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <rtc_isr+0x28>)
		//  Call the tick function.
		if (tickFunc != NULL) { tickFunc(); }
 800359c:	4905      	ldr	r1, [pc, #20]	; (80035b4 <rtc_isr+0x2c>)
void rtc_isr(void) {
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
		//  We hit an RTC tick interrupt.
		rtc_clear_flag(RTC_SEC);
		tickCount++;
 800359e:	6813      	ldr	r3, [r2, #0]
		//  Call the tick function.
		if (tickFunc != NULL) { tickFunc(); }
 80035a0:	6809      	ldr	r1, [r1, #0]
void rtc_isr(void) {
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
		//  We hit an RTC tick interrupt.
		rtc_clear_flag(RTC_SEC);
		tickCount++;
 80035a2:	3301      	adds	r3, #1
 80035a4:	6013      	str	r3, [r2, #0]
		//  Call the tick function.
		if (tickFunc != NULL) { tickFunc(); }
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d0f3      	beq.n	8003592 <rtc_isr+0xa>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 80035aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (rtc_check_flag(RTC_SEC)) {
		//  We hit an RTC tick interrupt.
		rtc_clear_flag(RTC_SEC);
		tickCount++;
		//  Call the tick function.
		if (tickFunc != NULL) { tickFunc(); }
 80035ae:	4708      	bx	r1
 80035b0:	20000734 	.word	0x20000734
 80035b4:	2000072c 	.word	0x2000072c

080035b8 <rtc_alarm_isr>:
		return;
	}
#endif  //  NOTUSED
}

void rtc_alarm_isr(void) {
 80035b8:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 80035ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035be:	f7fe fa47 	bl	8001a50 <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7fe fb26 	bl	8001c14 <rtc_clear_flag>
	alarmCount++;
 80035c8:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <rtc_alarm_isr+0x28>)
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 80035ca:	4906      	ldr	r1, [pc, #24]	; (80035e4 <rtc_alarm_isr+0x2c>)
void rtc_alarm_isr(void) {
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
	rtc_clear_flag(RTC_ALR);
	alarmCount++;
 80035cc:	6813      	ldr	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 80035ce:	6809      	ldr	r1, [r1, #0]
void rtc_alarm_isr(void) {
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
	rtc_clear_flag(RTC_ALR);
	alarmCount++;
 80035d0:	3301      	adds	r3, #1
 80035d2:	6013      	str	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 80035d4:	b111      	cbz	r1, 80035dc <rtc_alarm_isr+0x24>
}
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
	rtc_clear_flag(RTC_ALR);
	alarmCount++;
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 80035da:	4708      	bx	r1
}
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	bf00      	nop
 80035e0:	20000728 	.word	0x20000728
 80035e4:	20000730 	.word	0x20000730

080035e8 <millis>:

uint32_t millis(void) {
	//  Return the number of millisecond ticks since startup.
	//  Compatible with Arduino's millis() function.
	//  TODO: Compensate for clock slowdown because we truncated RCC_LSE 32.768 kHz to 32.
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 80035e8:	f7fe ba90 	b.w	8001b0c <rtc_get_counter_val>

080035ec <bootloader_start>:
}

uint32_t msTimer;
extern int msc_started;

int bootloader_start(void) {
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f0:	b089      	sub	sp, #36	; 0x24
         jump_to_application();
         return 0;
    }
#endif  //  SKIP_BOOTLOADER         
    
    enable_debug();       //  Uncomment to allow display of debug messages in development devices via Arm Semihosting. NOTE: This will hang if no Semihosting debugger is attached (e.g. ST Link).
 80035f2:	f7ff ff01 	bl	80033f8 <enable_debug>
    //  disable_debug();  //  Uncomment to disable display of debug messages.  For use in production devices.
    platform_setup();     //  STM32 platform setup.
 80035f6:	f7ff fed5 	bl	80033a4 <platform_setup>
    debug_println("----bootloader");  // debug_flush();
 80035fa:	4830      	ldr	r0, [pc, #192]	; (80036bc <bootloader_start+0xd0>)
 80035fc:	f7ff fe7a 	bl	80032f4 <debug_println>
    
    //  target_clock_setup();  //  Clock already setup in platform_setup()
    target_gpio_setup();       //  Initialize GPIO/LEDs if needed
 8003600:	f000 fbae 	bl	8003d60 <target_gpio_setup>
    // test_backup();          //  Test backup.

    debug_println("target_get_force_bootloader");  // debug_flush();
 8003604:	482e      	ldr	r0, [pc, #184]	; (80036c0 <bootloader_start+0xd4>)
 8003606:	f7ff fe75 	bl	80032f4 <debug_println>
    if (target_get_force_bootloader() || !appValid) {        
 800360a:	f000 fbf7 	bl	8003dfc <target_get_force_bootloader>
        {  //  Setup USB
            char serial[USB_SERIAL_NUM_LENGTH+1];
            serial[0] = '\0';
 800360e:	2300      	movs	r3, #0
            debug_println("target_get_serial_number");  // debug_flush();
 8003610:	482c      	ldr	r0, [pc, #176]	; (80036c4 <bootloader_start+0xd8>)

    debug_println("target_get_force_bootloader");  // debug_flush();
    if (target_get_force_bootloader() || !appValid) {        
        {  //  Setup USB
            char serial[USB_SERIAL_NUM_LENGTH+1];
            serial[0] = '\0';
 8003612:	f88d 3004 	strb.w	r3, [sp, #4]
            debug_println("target_get_serial_number");  // debug_flush();
 8003616:	f7ff fe6d 	bl	80032f4 <debug_println>
            target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 800361a:	2118      	movs	r1, #24
 800361c:	a801      	add	r0, sp, #4
 800361e:	f000 fc0d 	bl	8003e3c <target_get_serial_number>

            debug_println("usb_set_serial_number");  // debug_flush();
 8003622:	4829      	ldr	r0, [pc, #164]	; (80036c8 <bootloader_start+0xdc>)
 8003624:	f7ff fe66 	bl	80032f4 <debug_println>
            usb_set_serial_number(serial);
 8003628:	a801      	add	r0, sp, #4
 800362a:	f000 f919 	bl	8003860 <usb_set_serial_number>
        }
        debug_println("usb_setup");  // debug_flush();
 800362e:	4827      	ldr	r0, [pc, #156]	; (80036cc <bootloader_start+0xe0>)
 8003630:	f7ff fe60 	bl	80032f4 <debug_println>
        usbd_device* usbd_dev = usb_setup();
 8003634:	f000 f884 	bl	8003740 <usb_setup>
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
 8003638:	f04f 0b01 	mov.w	fp, #1

            debug_println("usb_set_serial_number");  // debug_flush();
            usb_set_serial_number(serial);
        }
        debug_println("usb_setup");  // debug_flush();
        usbd_device* usbd_dev = usb_setup();
 800363c:	4607      	mov	r7, r0
        debug_println("usbd polling...");  debug_flush();  ////
 800363e:	4824      	ldr	r0, [pc, #144]	; (80036d0 <bootloader_start+0xe4>)
 8003640:	f7ff fe58 	bl	80032f4 <debug_println>
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
 8003644:	465c      	mov	r4, fp
            debug_println("usb_set_serial_number");  // debug_flush();
            usb_set_serial_number(serial);
        }
        debug_println("usb_setup");  // debug_flush();
        usbd_device* usbd_dev = usb_setup();
        debug_println("usbd polling...");  debug_flush();  ////
 8003646:	f7ff fde1 	bl	800320c <debug_flush>
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
 800364a:	2502      	movs	r5, #2
                msTimer++;
                cycleCount = 0;

                int v = msTimer % 500;
 800364c:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
 8003650:	4e20      	ldr	r6, [pc, #128]	; (80036d4 <bootloader_start+0xe8>)
 8003652:	f8df a084 	ldr.w	sl, [pc, #132]	; 80036d8 <bootloader_start+0xec>
#endif  //  INTF_MSC
                if (appValid && !msc_started && msTimer > 1000) {
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
 8003656:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80036dc <bootloader_start+0xf0>
        usbd_device* usbd_dev = usb_setup();
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
 800365a:	3401      	adds	r4, #1
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
            }
            usbd_poll(usbd_dev);
 800365c:	4638      	mov	r0, r7
 800365e:	f7fd fa71 	bl	8000b44 <usbd_poll>
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
 8003662:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8003666:	d1f8      	bne.n	800365a <bootloader_start+0x6e>
                msTimer++;
 8003668:	6833      	ldr	r3, [r6, #0]
#endif  //  INTF_MSC
                if (appValid && !msc_started && msTimer > 1000) {
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
 800366a:	ea4f 141b 	mov.w	r4, fp, lsr #4
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
                msTimer++;
 800366e:	3301      	adds	r3, #1
                cycleCount = 0;

                int v = msTimer % 500;
 8003670:	fbaa 2003 	umull	r2, r0, sl, r3
 8003674:	0940      	lsrs	r0, r0, #5
 8003676:	fb09 3010 	mls	r0, r9, r0, r3
                target_set_led(v < 50);
 800367a:	2831      	cmp	r0, #49	; 0x31
 800367c:	bfcc      	ite	gt
 800367e:	2000      	movgt	r0, #0
 8003680:	2001      	movle	r0, #1
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
                msTimer++;
 8003682:	6033      	str	r3, [r6, #0]
                cycleCount = 0;

                int v = msTimer % 500;
                target_set_led(v < 50);
 8003684:	f000 fb60 	bl	8003d48 <target_set_led>
#endif  //  INTF_MSC
                if (appValid && !msc_started && msTimer > 1000) {
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
 8003688:	f24c 3350 	movw	r3, #50000	; 0xc350
 800368c:	fba8 2404 	umull	r2, r4, r8, r4
 8003690:	09e4      	lsrs	r4, r4, #7
 8003692:	fb03 b414 	mls	r4, r3, r4, fp
 8003696:	b964      	cbnz	r4, 80036b2 <bootloader_start+0xc6>
 8003698:	f7ff fdb8 	bl	800320c <debug_flush>
        usbd_device* usbd_dev = usb_setup();
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
 800369c:	3401      	adds	r4, #1
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
            }
            usbd_poll(usbd_dev);
 800369e:	4638      	mov	r0, r7
 80036a0:	f7fd fa50 	bl	8000b44 <usbd_poll>
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
 80036a4:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
#endif  //  INTF_MSC
                if (appValid && !msc_started && msTimer > 1000) {
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
 80036a8:	46ab      	mov	fp, r5
 80036aa:	f105 0501 	add.w	r5, r5, #1
        debug_println("usbd polling...");  debug_flush();  ////
        uint32_t cycleCount = 0;        
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
 80036ae:	d0db      	beq.n	8003668 <bootloader_start+0x7c>
 80036b0:	e7d3      	b.n	800365a <bootloader_start+0x6e>
#endif  //  INTF_MSC
                if (appValid && !msc_started && msTimer > 1000) {
                    debug_println("target_manifest_app");  debug_flush();
                    target_manifest_app();
                }
                if (flushCount++ % 50000 == 0) { debug_flush(); }  //  Must flush here.  Arm Semihosting logging will interfere with USB processing.
 80036b2:	46ab      	mov	fp, r5
        uint32_t flushCount = 1;
        while (1) {
            cycleCount++;
            if (cycleCount >= 700) {
                msTimer++;
                cycleCount = 0;
 80036b4:	2400      	movs	r4, #0
 80036b6:	3501      	adds	r5, #1
 80036b8:	e7cf      	b.n	800365a <bootloader_start+0x6e>
 80036ba:	bf00      	nop
 80036bc:	080048c4 	.word	0x080048c4
 80036c0:	080048d4 	.word	0x080048d4
 80036c4:	080048f0 	.word	0x080048f0
 80036c8:	0800490c 	.word	0x0800490c
 80036cc:	08004924 	.word	0x08004924
 80036d0:	08004930 	.word	0x08004930
 80036d4:	20000ebc 	.word	0x20000ebc
 80036d8:	10624dd3 	.word	0x10624dd3
 80036dc:	0a7c5ac5 	.word	0x0a7c5ac5

080036e0 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80036e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e6:	4299      	cmp	r1, r3
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 80036e8:	4605      	mov	r5, r0
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 80036ea:	d108      	bne.n	80036fe <set_aggregate_callback+0x1e>
            (config_callback[i])(usbd_dev, wValue);
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80036ec:	2200      	movs	r2, #0
 80036ee:	4628      	mov	r0, r5
 80036f0:	4611      	mov	r1, r2
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <set_aggregate_callback+0x50>)
 80036f4:	f7fd fb0c 	bl	8000d10 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80036f8:	2800      	cmp	r0, #0
 80036fa:	db11      	blt.n	8003720 <set_aggregate_callback+0x40>
}
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  usbd_device *usbd_dev,
  uint16_t wValue) {
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
        //  Call the config functions before setting our callback.
        debug_println("set_aggregate_callback"); ////
 80036fe:	480d      	ldr	r0, [pc, #52]	; (8003734 <set_aggregate_callback+0x54>)
 8003700:	460e      	mov	r6, r1
 8003702:	f7ff fdf7 	bl	80032f4 <debug_println>
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003706:	4c0c      	ldr	r4, [pc, #48]	; (8003738 <set_aggregate_callback+0x58>)
 8003708:	f104 0728 	add.w	r7, r4, #40	; 0x28
            if (!config_callback[i]) { break; }
 800370c:	f854 3b04 	ldr.w	r3, [r4], #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0eb      	beq.n	80036ec <set_aggregate_callback+0xc>
            (config_callback[i])(usbd_dev, wValue);
 8003714:	4631      	mov	r1, r6
 8003716:	4628      	mov	r0, r5
 8003718:	4798      	blx	r3
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
        //  Call the config functions before setting our callback.
        debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800371a:	42bc      	cmp	r4, r7
 800371c:	d1f6      	bne.n	800370c <set_aggregate_callback+0x2c>
 800371e:	e7e5      	b.n	80036ec <set_aggregate_callback+0xc>
        status = usbd_register_control_callback(
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 8003720:	4806      	ldr	r0, [pc, #24]	; (800373c <set_aggregate_callback+0x5c>)
 8003722:	f7ff fde7 	bl	80032f4 <debug_println>
}
 8003726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status = usbd_register_control_callback(
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 800372a:	f7ff bd6f 	b.w	800320c <debug_flush>
 800372e:	bf00      	nop
 8003730:	08003a45 	.word	0x08003a45
 8003734:	08004b3c 	.word	0x08004b3c
 8003738:	2000073c 	.word	0x2000073c
 800373c:	08004b54 	.word	0x08004b54

08003740 <usb_setup>:

/* Buffer to be used for control requests. */
static uint8_t usbd_control_buffer[USB_CONTROL_BUF_SIZE] __attribute__ ((aligned (2)));
usbd_device* usbd_dev = NULL;

usbd_device* usb_setup(void) {
 8003740:	b510      	push	{r4, lr}
 8003742:	b084      	sub	sp, #16
    int num_strings = sizeof(usb_strings) / sizeof(const char*);
    // debug_print("usb_setup num_strings "); debug_print_int(num_strings); debug_println(""); // debug_flush(); ////
    const usbd_driver* driver = target_usb_init();
 8003744:	f000 fb44 	bl	8003dd0 <target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 8003748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800374c:	2209      	movs	r2, #9
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <usb_setup+0x70>)
 8003750:	9102      	str	r1, [sp, #8]
 8003752:	e9cd 2300 	strd	r2, r3, [sp]
 8003756:	4917      	ldr	r1, [pc, #92]	; (80037b4 <usb_setup+0x74>)
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <usb_setup+0x78>)
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <usb_setup+0x7c>)
 800375c:	f7fd f9ac 	bl	8000ab8 <usbd_init>
 8003760:	4c17      	ldr	r4, [pc, #92]	; (80037c0 <usb_setup+0x80>)
 8003762:	6020      	str	r0, [r4, #0]
#endif  //  INTF_DFU
#ifdef INTF_MSC    
    msc_setup(usbd_dev);
#endif  //  INTF_MSC
#ifdef INTF_COMM    
    cdc_setup(usbd_dev);
 8003764:	f000 fc86 	bl	8004074 <cdc_setup>
#endif  //  INTF_COMM
#ifdef INTF_HF2    
    hf2_setup(usbd_dev);
 8003768:	6820      	ldr	r0, [r4, #0]
 800376a:	f000 fe17 	bl	800439c <hf2_setup>
#endif  //  INTF_HF2

#ifdef USB21_INTERFACE
    //  Define USB 2.1 BOS interface used by WebUSB.
	usb21_setup(usbd_dev, &bos_descriptor);
 800376e:	6820      	ldr	r0, [r4, #0]
 8003770:	4914      	ldr	r1, [pc, #80]	; (80037c4 <usb_setup+0x84>)
 8003772:	f000 febf 	bl	80044f4 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	4913      	ldr	r1, [pc, #76]	; (80037c8 <usb_setup+0x88>)
 800377a:	f000 fa05 	bl	8003b88 <webusb_setup>
#ifdef INTF_HF2
	winusb_setup(usbd_dev, INTF_HF2);
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	2100      	movs	r1, #0
 8003782:	f000 fab3 	bl	8003cec <winusb_setup>
	winusb_setup(usbd_dev, INTF_DFU);
#endif  //  INTF_DFU
#endif  //  USB21_INTERFACE

    //  Set the aggregate callback.    
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	4910      	ldr	r1, [pc, #64]	; (80037cc <usb_setup+0x8c>)
 800378a:	f7fd fde1 	bl	8001350 <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 800378e:	2800      	cmp	r0, #0
 8003790:	db07      	blt.n	80037a2 <usb_setup+0x62>

    //  For WinUSB: Windows probes the compatible ID before setting the configuration, so also register the callback now.
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003798:	f7ff ffa2 	bl	80036e0 <set_aggregate_callback>
    return usbd_dev;
}
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	b004      	add	sp, #16
 80037a0:	bd10      	pop	{r4, pc}
#endif  //  INTF_DFU
#endif  //  USB21_INTERFACE

    //  Set the aggregate callback.    
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 80037a2:	480b      	ldr	r0, [pc, #44]	; (80037d0 <usb_setup+0x90>)
 80037a4:	f7ff fda6 	bl	80032f4 <debug_println>
 80037a8:	f7ff fd30 	bl	800320c <debug_flush>
 80037ac:	e7f1      	b.n	8003792 <usb_setup+0x52>
 80037ae:	bf00      	nop
 80037b0:	20000cb4 	.word	0x20000cb4
 80037b4:	08004a2c 	.word	0x08004a2c
 80037b8:	2000042c 	.word	0x2000042c
 80037bc:	080049e4 	.word	0x080049e4
 80037c0:	200007d0 	.word	0x200007d0
 80037c4:	08004994 	.word	0x08004994
 80037c8:	08004c08 	.word	0x08004c08
 80037cc:	080036e1 	.word	0x080036e1
 80037d0:	08004c24 	.word	0x08004c24

080037d4 <aggregate_register_config_callback>:
static struct control_callback_struct control_callback[MAX_CONTROL_CALLBACK];
static usbd_set_config_callback config_callback[MAX_CONTROL_CALLBACK];

int aggregate_register_config_callback(
    usbd_device *usbd_dev,
	usbd_set_config_callback callback) {
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4c0c      	ldr	r4, [pc, #48]	; (8003808 <aggregate_register_config_callback+0x34>)
    //  Register the USB config callback.  We do this to overcome the 4 callback limit.
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80037d8:	2300      	movs	r3, #0
 80037da:	4622      	mov	r2, r4
		if (config_callback[i]) {
 80037dc:	f852 0b04 	ldr.w	r0, [r2], #4
 80037e0:	b178      	cbz	r0, 8003802 <aggregate_register_config_callback+0x2e>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80037e2:	4288      	cmp	r0, r1
int aggregate_register_config_callback(
    usbd_device *usbd_dev,
	usbd_set_config_callback callback) {
    //  Register the USB config callback.  We do this to overcome the 4 callback limit.
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80037e4:	f103 0301 	add.w	r3, r3, #1
		if (config_callback[i]) {
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80037e8:	d009      	beq.n	80037fe <aggregate_register_config_callback+0x2a>
int aggregate_register_config_callback(
    usbd_device *usbd_dev,
	usbd_set_config_callback callback) {
    //  Register the USB config callback.  We do this to overcome the 4 callback limit.
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80037ea:	2b0a      	cmp	r3, #10
 80037ec:	d1f6      	bne.n	80037dc <aggregate_register_config_callback+0x8>
			continue;
		}
		config_callback[i] = callback;
		return 0;
	}
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <aggregate_register_config_callback+0x38>)
 80037f0:	f7ff fd80 	bl	80032f4 <debug_println>
 80037f4:	f7ff fd0a 	bl	800320c <debug_flush>
	return -1;
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80037fc:	bd10      	pop	{r4, pc}
	usbd_set_config_callback callback) {
    //  Register the USB config callback.  We do this to overcome the 4 callback limit.
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
		if (config_callback[i]) {
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80037fe:	2000      	movs	r0, #0
		config_callback[i] = callback;
		return 0;
	}
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
	return -1;
}
 8003800:	bd10      	pop	{r4, pc}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
		if (config_callback[i]) {
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
			continue;
		}
		config_callback[i] = callback;
 8003802:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		return 0;
	}
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
	return -1;
}
 8003806:	bd10      	pop	{r4, pc}
 8003808:	2000073c 	.word	0x2000073c
 800380c:	0800496c 	.word	0x0800496c

08003810 <aggregate_register_callback>:

int aggregate_register_callback(
    usbd_device *usbd_dev, 
    uint8_t type,
    uint8_t type_mask,
    usbd_control_callback callback) {
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	4f11      	ldr	r7, [pc, #68]	; (8003858 <aggregate_register_callback+0x48>)
    // Register application callback function for handling USB control requests.  We aggregate here so we can handle more than 4 callbacks.
    // debug_println("aggregate_register_callback"); ////
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003814:	2500      	movs	r5, #0
 8003816:	463c      	mov	r4, r7
		if (control_callback[i].cb) { 
 8003818:	6860      	ldr	r0, [r4, #4]
 800381a:	b1b0      	cbz	r0, 800384a <aggregate_register_callback+0x3a>
            //  If already exists, skip.
            if (control_callback[i].type == type &&
 800381c:	7826      	ldrb	r6, [r4, #0]
    uint8_t type_mask,
    usbd_control_callback callback) {
    // Register application callback function for handling USB control requests.  We aggregate here so we can handle more than 4 callbacks.
    // debug_println("aggregate_register_callback"); ////
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800381e:	3501      	adds	r5, #1
		if (control_callback[i].cb) { 
            //  If already exists, skip.
            if (control_callback[i].type == type &&
 8003820:	428e      	cmp	r6, r1
 8003822:	d104      	bne.n	800382e <aggregate_register_callback+0x1e>
 8003824:	7866      	ldrb	r6, [r4, #1]
 8003826:	4296      	cmp	r6, r2
 8003828:	d101      	bne.n	800382e <aggregate_register_callback+0x1e>
                control_callback[i].type_mask == type_mask &&
 800382a:	4298      	cmp	r0, r3
 800382c:	d00b      	beq.n	8003846 <aggregate_register_callback+0x36>
    uint8_t type_mask,
    usbd_control_callback callback) {
    // Register application callback function for handling USB control requests.  We aggregate here so we can handle more than 4 callbacks.
    // debug_println("aggregate_register_callback"); ////
	int i;
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800382e:	2d0a      	cmp	r5, #10
 8003830:	f104 0408 	add.w	r4, r4, #8
 8003834:	d1f0      	bne.n	8003818 <aggregate_register_callback+0x8>
		control_callback[i].type = type;
		control_callback[i].type_mask = type_mask;
		control_callback[i].cb = callback;
		return 0;
	}
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 8003836:	4809      	ldr	r0, [pc, #36]	; (800385c <aggregate_register_callback+0x4c>)
 8003838:	f7ff fd5c 	bl	80032f4 <debug_println>
 800383c:	f7ff fce6 	bl	800320c <debug_flush>
	return -1;
 8003840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            //  If already exists, skip.
            if (control_callback[i].type == type &&
                control_callback[i].type_mask == type_mask &&
                control_callback[i].cb == callback) { 
                    //  debug_println("callback exists"); ////
                    return 0;
 8003846:	2000      	movs	r0, #0
		control_callback[i].cb = callback;
		return 0;
	}
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
	return -1;
}
 8003848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    return 0;
                }
            continue;  //  Continue checking.
        }
		control_callback[i].type = type;
		control_callback[i].type_mask = type_mask;
 800384a:	eb07 04c5 	add.w	r4, r7, r5, lsl #3
 800384e:	7062      	strb	r2, [r4, #1]
                    //  debug_println("callback exists"); ////
                    return 0;
                }
            continue;  //  Continue checking.
        }
		control_callback[i].type = type;
 8003850:	f807 1035 	strb.w	r1, [r7, r5, lsl #3]
		control_callback[i].type_mask = type_mask;
		control_callback[i].cb = callback;
 8003854:	6063      	str	r3, [r4, #4]
		return 0;
	}
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
	return -1;
}
 8003856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003858:	20000764 	.word	0x20000764
 800385c:	08004944 	.word	0x08004944

08003860 <usb_set_serial_number>:
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
}

void usb_set_serial_number(const char* serial) {
 8003860:	b510      	push	{r4, lr}
    serial_number[0] = '\0';
 8003862:	2400      	movs	r4, #0
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <usb_set_serial_number+0x18>)
 8003866:	701c      	strb	r4, [r3, #0]
    if (serial) {
 8003868:	b128      	cbz	r0, 8003876 <usb_set_serial_number+0x16>
 800386a:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 800386c:	2218      	movs	r2, #24
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fc5a 	bl	8003128 <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 8003874:	7604      	strb	r4, [r0, #24]
    }
}
 8003876:	bd10      	pop	{r4, pc}
 8003878:	200007b4 	.word	0x200007b4

0800387c <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4615      	mov	r5, r2
 8003880:	460c      	mov	r4, r1
    debug_print(msg); debug_print(" ");
 8003882:	f7ff fd31 	bl	80032e8 <debug_print>
 8003886:	480e      	ldr	r0, [pc, #56]	; (80038c0 <dump_buffer+0x44>)
 8003888:	f7ff fd2e 	bl	80032e8 <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 800388c:	4628      	mov	r0, r5
 800388e:	f7ff fd51 	bl	8003334 <debug_print_unsigned>
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <dump_buffer+0x48>)
 8003894:	f7ff fd28 	bl	80032e8 <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 8003898:	2d00      	cmp	r5, #0
 800389a:	dd0b      	ble.n	80038b4 <dump_buffer+0x38>
 800389c:	3c01      	subs	r4, #1
        debug_printhex(buf[i]); debug_print(" "); 
 800389e:	4e08      	ldr	r6, [pc, #32]	; (80038c0 <dump_buffer+0x44>)
 80038a0:	4425      	add	r5, r4
 80038a2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80038a6:	f7ff fd47 	bl	8003338 <debug_printhex>
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff fd1c 	bl	80032e8 <debug_print>

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
    debug_print(msg); debug_print(" ");
    debug_print_unsigned(len); debug_print(" / ");
    int i;
    for (i = 0; i < len; i++) { 
 80038b0:	42ac      	cmp	r4, r5
 80038b2:	d1f6      	bne.n	80038a2 <dump_buffer+0x26>
        debug_printhex(buf[i]); debug_print(" "); 
    }
    debug_println("");
}
 80038b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_print_unsigned(len); debug_print(" / ");
    int i;
    for (i = 0; i < len; i++) { 
        debug_printhex(buf[i]); debug_print(" "); 
    }
    debug_println("");
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <dump_buffer+0x4c>)
 80038ba:	f7ff bd1b 	b.w	80032f4 <debug_println>
 80038be:	bf00      	nop
 80038c0:	08004ac4 	.word	0x08004ac4
 80038c4:	08004a40 	.word	0x08004a40
 80038c8:	080046f8 	.word	0x080046f8

080038cc <dump_usb_request>:
}

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	460c      	mov	r4, r1
    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80038d0:	884d      	ldrh	r5, [r1, #2]
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(msg);
 80038d2:	f7ff fd09 	bl	80032e8 <debug_print>
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80038d6:	4849      	ldr	r0, [pc, #292]	; (80039fc <dump_usb_request+0x130>)
 80038d8:	f7ff fd06 	bl	80032e8 <debug_print>
 80038dc:	7820      	ldrb	r0, [r4, #0]
 80038de:	f7ff fd2b 	bl	8003338 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 80038e2:	4847      	ldr	r0, [pc, #284]	; (8003a00 <dump_usb_request+0x134>)
 80038e4:	f7ff fd00 	bl	80032e8 <debug_print>
 80038e8:	7860      	ldrb	r0, [r4, #1]
 80038ea:	f7ff fd25 	bl	8003338 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80038ee:	4845      	ldr	r0, [pc, #276]	; (8003a04 <dump_usb_request+0x138>)
 80038f0:	f7ff fcfa 	bl	80032e8 <debug_print>
 80038f4:	8860      	ldrh	r0, [r4, #2]
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
	return -1;
}

static uint8_t usb_descriptor_type(uint16_t wValue) {
	return wValue >> 8;
 80038f6:	0a2e      	lsrs	r6, r5, #8
    uint8_t desc_type = usb_descriptor_type(req->wValue);
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(msg);
    debug_print(" typ "); debug_printhex(req->bmRequestType);
    debug_print(", req "); debug_printhex(req->bRequest);
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80038f8:	0a00      	lsrs	r0, r0, #8
 80038fa:	f7ff fd1d 	bl	8003338 <debug_printhex>
 80038fe:	8860      	ldrh	r0, [r4, #2]
 8003900:	b2c0      	uxtb	r0, r0
 8003902:	f7ff fd19 	bl	8003338 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 8003906:	4840      	ldr	r0, [pc, #256]	; (8003a08 <dump_usb_request+0x13c>)
 8003908:	f7ff fcee 	bl	80032e8 <debug_print>
 800390c:	88a0      	ldrh	r0, [r4, #4]
 800390e:	0a00      	lsrs	r0, r0, #8
 8003910:	f7ff fd12 	bl	8003338 <debug_printhex>
 8003914:	88a0      	ldrh	r0, [r4, #4]
 8003916:	b2c0      	uxtb	r0, r0
 8003918:	f7ff fd0e 	bl	8003338 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 800391c:	483b      	ldr	r0, [pc, #236]	; (8003a0c <dump_usb_request+0x140>)
 800391e:	f7ff fce3 	bl	80032e8 <debug_print>
 8003922:	88e0      	ldrh	r0, [r4, #6]
 8003924:	0a00      	lsrs	r0, r0, #8
 8003926:	f7ff fd07 	bl	8003338 <debug_printhex>
 800392a:	88e0      	ldrh	r0, [r4, #6]
 800392c:	b2c0      	uxtb	r0, r0
 800392e:	f7ff fd03 	bl	8003338 <debug_printhex>

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8003932:	7823      	ldrb	r3, [r4, #0]
 8003934:	b9cb      	cbnz	r3, 800396a <dump_usb_request+0x9e>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 8003936:	7863      	ldrb	r3, [r4, #1]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d043      	beq.n	80039c4 <dump_usb_request+0xf8>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 800393c:	2b09      	cmp	r3, #9
            debug_print(", SET_CFG    ");
 800393e:	bf0c      	ite	eq
 8003940:	4833      	ldreq	r0, [pc, #204]	; (8003a10 <dump_usb_request+0x144>)
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 8003942:	4834      	ldrne	r0, [pc, #208]	; (8003a14 <dump_usb_request+0x148>)
 8003944:	f7ff fcd0 	bl	80032e8 <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8003948:	4833      	ldr	r0, [pc, #204]	; (8003a18 <dump_usb_request+0x14c>)
 800394a:	f7ff fccd 	bl	80032e8 <debug_print>
 800394e:	4630      	mov	r0, r6
 8003950:	f7ff fcf2 	bl	8003338 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8003954:	4831      	ldr	r0, [pc, #196]	; (8003a1c <dump_usb_request+0x150>)
 8003956:	f7ff fcc7 	bl	80032e8 <debug_print>
 800395a:	b2e8      	uxtb	r0, r5
 800395c:	f7ff fcec 	bl	8003338 <debug_printhex>
    }
    debug_println("");
}
 8003960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            debug_print(",");
        }
        debug_print(" t "); debug_printhex(desc_type); 	
        debug_print(" i "); debug_printhex(desc_index); 	
    }
    debug_println("");
 8003964:	482e      	ldr	r0, [pc, #184]	; (8003a20 <dump_usb_request+0x154>)
 8003966:	f7ff bcc5 	b.w	80032f4 <debug_println>
    debug_print(", req "); debug_printhex(req->bRequest);
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d1f8      	bne.n	8003960 <dump_usb_request+0x94>
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 800396e:	7863      	ldrb	r3, [r4, #1]
 8003970:	2b06      	cmp	r3, #6
 8003972:	d1e3      	bne.n	800393c <dump_usb_request+0x70>
            debug_print(", GET_DES");
 8003974:	482b      	ldr	r0, [pc, #172]	; (8003a24 <dump_usb_request+0x158>)
 8003976:	f7ff fcb7 	bl	80032e8 <debug_print>
            switch(desc_type) {
 800397a:	1e73      	subs	r3, r6, #1
 800397c:	2b0e      	cmp	r3, #14
 800397e:	d8e3      	bhi.n	8003948 <dump_usb_request+0x7c>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <dump_usb_request+0xbc>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039f5 	.word	0x080039f5
 800398c:	080039ed 	.word	0x080039ed
 8003990:	080039e5 	.word	0x080039e5
 8003994:	080039dd 	.word	0x080039dd
 8003998:	080039d5 	.word	0x080039d5
 800399c:	08003949 	.word	0x08003949
 80039a0:	08003949 	.word	0x08003949
 80039a4:	08003949 	.word	0x08003949
 80039a8:	08003949 	.word	0x08003949
 80039ac:	08003949 	.word	0x08003949
 80039b0:	08003949 	.word	0x08003949
 80039b4:	08003949 	.word	0x08003949
 80039b8:	08003949 	.word	0x08003949
 80039bc:	08003949 	.word	0x08003949
 80039c0:	080039cd 	.word	0x080039cd
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
 80039c4:	4818      	ldr	r0, [pc, #96]	; (8003a28 <dump_usb_request+0x15c>)
 80039c6:	f7ff fc8f 	bl	80032e8 <debug_print>
 80039ca:	e7bd      	b.n	8003948 <dump_usb_request+0x7c>
                case 1: debug_print("_DEV"); break;
                case 2: debug_print("_CFG"); break;
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
 80039cc:	4817      	ldr	r0, [pc, #92]	; (8003a2c <dump_usb_request+0x160>)
 80039ce:	f7ff fc8b 	bl	80032e8 <debug_print>
 80039d2:	e7b9      	b.n	8003948 <dump_usb_request+0x7c>
            switch(desc_type) {
                case 1: debug_print("_DEV"); break;
                case 2: debug_print("_CFG"); break;
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
 80039d4:	4816      	ldr	r0, [pc, #88]	; (8003a30 <dump_usb_request+0x164>)
 80039d6:	f7ff fc87 	bl	80032e8 <debug_print>
 80039da:	e7b5      	b.n	8003948 <dump_usb_request+0x7c>
            debug_print(", GET_DES");
            switch(desc_type) {
                case 1: debug_print("_DEV"); break;
                case 2: debug_print("_CFG"); break;
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
 80039dc:	4815      	ldr	r0, [pc, #84]	; (8003a34 <dump_usb_request+0x168>)
 80039de:	f7ff fc83 	bl	80032e8 <debug_print>
 80039e2:	e7b1      	b.n	8003948 <dump_usb_request+0x7c>
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
            debug_print(", GET_DES");
            switch(desc_type) {
                case 1: debug_print("_DEV"); break;
                case 2: debug_print("_CFG"); break;
                case 3: debug_print("_STR"); break;
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <dump_usb_request+0x16c>)
 80039e6:	f7ff fc7f 	bl	80032e8 <debug_print>
 80039ea:	e7ad      	b.n	8003948 <dump_usb_request+0x7c>
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
            debug_print(", GET_DES");
            switch(desc_type) {
                case 1: debug_print("_DEV"); break;
                case 2: debug_print("_CFG"); break;
 80039ec:	4813      	ldr	r0, [pc, #76]	; (8003a3c <dump_usb_request+0x170>)
 80039ee:	f7ff fc7b 	bl	80032e8 <debug_print>
 80039f2:	e7a9      	b.n	8003948 <dump_usb_request+0x7c>
    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
            debug_print(", GET_DES");
            switch(desc_type) {
                case 1: debug_print("_DEV"); break;
 80039f4:	4812      	ldr	r0, [pc, #72]	; (8003a40 <dump_usb_request+0x174>)
 80039f6:	f7ff fc77 	bl	80032e8 <debug_print>
 80039fa:	e7a5      	b.n	8003948 <dump_usb_request+0x7c>
 80039fc:	08004a44 	.word	0x08004a44
 8003a00:	08004a4c 	.word	0x08004a4c
 8003a04:	08004a54 	.word	0x08004a54
 8003a08:	08004a5c 	.word	0x08004a5c
 8003a0c:	08004a64 	.word	0x08004a64
 8003a10:	08004ab8 	.word	0x08004ab8
 8003a14:	08004ac8 	.word	0x08004ac8
 8003a18:	08004acc 	.word	0x08004acc
 8003a1c:	08004ad0 	.word	0x08004ad0
 8003a20:	080046f8 	.word	0x080046f8
 8003a24:	08004a6c 	.word	0x08004a6c
 8003a28:	08004aa8 	.word	0x08004aa8
 8003a2c:	08004aa0 	.word	0x08004aa0
 8003a30:	08004a98 	.word	0x08004a98
 8003a34:	08004a90 	.word	0x08004a90
 8003a38:	08004a88 	.word	0x08004a88
 8003a3c:	08004a80 	.word	0x08004a80
 8003a40:	08004a78 	.word	0x08004a78

08003a44 <aggregate_callback>:
static int aggregate_callback(
    usbd_device *usbd_dev,
	struct usb_setup_data *req, 
    uint8_t **buf, 
    uint16_t *len,
	usbd_control_complete_callback *complete) {
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	4c1a      	ldr	r4, [pc, #104]	; (8003ab4 <aggregate_callback+0x70>)
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	460e      	mov	r6, r1
 8003a4e:	4683      	mov	fp, r0
 8003a50:	4692      	mov	sl, r2
 8003a52:	4699      	mov	r9, r3
 8003a54:	7809      	ldrb	r1, [r1, #0]
 8003a56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003a5a:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8003a5e:	e001      	b.n	8003a64 <aggregate_callback+0x20>
    //  This callback is called whenever a USB request is received.  We route to the right driver callbacks.
	int i, result = 0;
    //  Call the callbacks registered by the drivers.
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003a60:	42bc      	cmp	r4, r7
 8003a62:	d014      	beq.n	8003a8e <aggregate_callback+0x4a>
        if (control_callback[i].cb == NULL) { break; }
 8003a64:	6865      	ldr	r5, [r4, #4]
 8003a66:	b195      	cbz	r5, 8003a8e <aggregate_callback+0x4a>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 8003a68:	7863      	ldrb	r3, [r4, #1]
 8003a6a:	7822      	ldrb	r2, [r4, #0]
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	f104 0408 	add.w	r4, r4, #8
 8003a74:	d1f4      	bne.n	8003a60 <aggregate_callback+0x1c>
            result = control_callback[i].cb(
 8003a76:	f8cd 8000 	str.w	r8, [sp]
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	4652      	mov	r2, sl
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4658      	mov	r0, fp
 8003a82:	47a8      	blx	r5
                usbd_dev, 
                req,
                buf,
                len,
                complete);
            if (result == USBD_REQ_HANDLED ||
 8003a84:	2801      	cmp	r0, #1
 8003a86:	d90e      	bls.n	8003aa6 <aggregate_callback+0x62>
    uint16_t *len,
	usbd_control_complete_callback *complete) {
    //  This callback is called whenever a USB request is received.  We route to the right driver callbacks.
	int i, result = 0;
    //  Call the callbacks registered by the drivers.
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003a88:	42bc      	cmp	r4, r7
 8003a8a:	7831      	ldrb	r1, [r6, #0]
 8003a8c:	d1ea      	bne.n	8003a64 <aggregate_callback+0x20>
                result == USBD_REQ_NOTSUPP) {
                return result;
            }
        }
    }
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 8003a8e:	2980      	cmp	r1, #128	; 0x80
 8003a90:	d102      	bne.n	8003a98 <aggregate_callback+0x54>
 8003a92:	7873      	ldrb	r3, [r6, #1]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d009      	beq.n	8003aac <aggregate_callback+0x68>
        //  Dump the packet if not GET_DESCRIPTOR.
	    dump_usb_request(">> ", req); debug_flush(); ////
 8003a98:	4807      	ldr	r0, [pc, #28]	; (8003ab8 <aggregate_callback+0x74>)
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	f7ff ff16 	bl	80038cc <dump_usb_request>
 8003aa0:	f7ff fbb4 	bl	800320c <debug_flush>
    } 
	return USBD_REQ_NEXT_CALLBACK;
 8003aa4:	2002      	movs	r0, #2
}
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
        //  Dump the packet if not GET_DESCRIPTOR.
	    dump_usb_request(">> ", req); debug_flush(); ////
    } 
	return USBD_REQ_NEXT_CALLBACK;
 8003aac:	2002      	movs	r0, #2
}
 8003aae:	b003      	add	sp, #12
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	20000764 	.word	0x20000764
 8003ab8:	08004940 	.word	0x08004940

08003abc <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003abc:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003abe:	227f      	movs	r2, #127	; 0x7f
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <webusb_set_config+0x20>)
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	f7ff fea4 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	db00      	blt.n	8003ace <webusb_set_config+0x12>
}
 8003acc:	bd08      	pop	{r3, pc}
	int status = aggregate_register_callback(
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <webusb_set_config+0x24>)
 8003ad0:	f7ff fc10 	bl	80032f4 <debug_println>
}
 8003ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int status = aggregate_register_callback(
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003ad8:	f7ff bb98 	b.w	800320c <debug_flush>
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08004c94 	.word	0x08004c94

08003ae4 <webusb_control_vendor_request>:
	//  Handle a request for the WebUSB URL:
	//  >> typ c0, req 22, val 0001, idx 0002, len 00ff
	(void)complete;
	(void)usbd_dev;
	//  For WebUSB, only request types C0 and C1 are allowed.
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003ae4:	7808      	ldrb	r0, [r1, #0]
 8003ae6:	3040      	adds	r0, #64	; 0x40
 8003ae8:	b2c0      	uxtb	r0, r0
 8003aea:	2801      	cmp	r0, #1
 8003aec:	d815      	bhi.n	8003b1a <webusb_control_vendor_request+0x36>
static const char* webusb_https_url;

static int webusb_control_vendor_request(usbd_device *usbd_dev,
									 struct usb_setup_data *req,
									 uint8_t **buf, uint16_t *len,
									 usbd_control_complete_callback* complete) {
 8003aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//  >> typ c0, req 22, val 0001, idx 0002, len 00ff
	(void)complete;
	(void)usbd_dev;
	//  For WebUSB, only request types C0 and C1 are allowed.
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003af2:	7848      	ldrb	r0, [r1, #1]
 8003af4:	460c      	mov	r4, r1
 8003af6:	2822      	cmp	r0, #34	; 0x22
 8003af8:	d10c      	bne.n	8003b14 <webusb_control_vendor_request+0x30>
	int status = USBD_REQ_NOTSUPP;
	switch (req->wIndex) {
 8003afa:	461d      	mov	r5, r3
 8003afc:	888b      	ldrh	r3, [r1, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d10d      	bne.n	8003b1e <webusb_control_vendor_request+0x3a>
		case WEBUSB_REQ_GET_URL: {
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
			uint16_t index = req->wValue;
 8003b02:	884c      	ldrh	r4, [r1, #2]
			if (index == 0) {
 8003b04:	b10c      	cbz	r4, 8003b0a <webusb_control_vendor_request+0x26>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
 8003b06:	2c01      	cmp	r4, #1
 8003b08:	d017      	beq.n	8003b3a <webusb_control_vendor_request+0x56>
				memcpy(&url->URL, webusb_https_url, url_len);
				*len = MIN(*len, url->bLength);
				status = USBD_REQ_HANDLED;
			} else {
				// TODO: stall instead?
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8003b0a:	481a      	ldr	r0, [pc, #104]	; (8003b74 <webusb_control_vendor_request+0x90>)
 8003b0c:	f7ff fbec 	bl	80032e8 <debug_print>
 8003b10:	4620      	mov	r0, r4
 8003b12:	e008      	b.n	8003b26 <webusb_control_vendor_request+0x42>
	//  Handle a request for the WebUSB URL:
	//  >> typ c0, req 22, val 0001, idx 0002, len 00ff
	(void)complete;
	(void)usbd_dev;
	//  For WebUSB, only request types C0 and C1 are allowed.
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003b14:	2002      	movs	r0, #2
			break;
		}
	}

	return status;
}
 8003b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	//  Handle a request for the WebUSB URL:
	//  >> typ c0, req 22, val 0001, idx 0002, len 00ff
	(void)complete;
	(void)usbd_dev;
	//  For WebUSB, only request types C0 and C1 are allowed.
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003b1a:	2002      	movs	r0, #2
			break;
		}
	}

	return status;
}
 8003b1c:	4770      	bx	lr
				status = USBD_REQ_NOTSUPP;
			}
			break;
		}
		default: {
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8003b1e:	4816      	ldr	r0, [pc, #88]	; (8003b78 <webusb_control_vendor_request+0x94>)
 8003b20:	f7ff fbe2 	bl	80032e8 <debug_print>
 8003b24:	88a0      	ldrh	r0, [r4, #4]
 8003b26:	f7ff fc05 	bl	8003334 <debug_print_unsigned>
 8003b2a:	4814      	ldr	r0, [pc, #80]	; (8003b7c <webusb_control_vendor_request+0x98>)
 8003b2c:	f7ff fbe2 	bl	80032f4 <debug_println>
 8003b30:	f7ff fb6c 	bl	800320c <debug_flush>
			status = USBD_REQ_NOTSUPP;
 8003b34:	2000      	movs	r0, #0
			break;
		}
	}

	return status;
}
 8003b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (index == 0) {
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
 8003b3a:	4811      	ldr	r0, [pc, #68]	; (8003b80 <webusb_control_vendor_request+0x9c>)
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
	int status = USBD_REQ_NOTSUPP;
	switch (req->wIndex) {
		case WEBUSB_REQ_GET_URL: {
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 8003b3c:	6817      	ldr	r7, [r2, #0]
			if (index == 0) {
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
 8003b3e:	f7ff fec5 	bl	80038cc <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <webusb_control_vendor_request+0xa0>)
 8003b44:	f8d3 8000 	ldr.w	r8, [r3]
 8003b48:	4640      	mov	r0, r8
 8003b4a:	f7ff fa89 	bl	8003060 <strlen>
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
				url->bDescriptorType = WEBUSB_DT_URL;
 8003b4e:	2303      	movs	r3, #3
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
				size_t url_len = strlen(webusb_https_url);
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8003b50:	18c6      	adds	r6, r0, r3
 8003b52:	b2f6      	uxtb	r6, r6
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
				size_t url_len = strlen(webusb_https_url);
 8003b54:	4602      	mov	r2, r0
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
				url->bDescriptorType = WEBUSB_DT_URL;
 8003b56:	707b      	strb	r3, [r7, #1]
				return USBD_REQ_NOTSUPP;
			}
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
				size_t url_len = strlen(webusb_https_url);
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8003b58:	703e      	strb	r6, [r7, #0]
				url->bDescriptorType = WEBUSB_DT_URL;
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
				memcpy(&url->URL, webusb_https_url, url_len);
 8003b5a:	18f8      	adds	r0, r7, r3
 8003b5c:	4641      	mov	r1, r8
			if (index == 1) {
				dump_usb_request("weburl", req); // debug_flush(); ////
				size_t url_len = strlen(webusb_https_url);
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
				url->bDescriptorType = WEBUSB_DT_URL;
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 8003b5e:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 8003b60:	f7ff fa66 	bl	8003030 <memcpy>
				*len = MIN(*len, url->bLength);
 8003b64:	882b      	ldrh	r3, [r5, #0]
				status = USBD_REQ_HANDLED;
 8003b66:	4620      	mov	r0, r4
				size_t url_len = strlen(webusb_https_url);
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
				url->bDescriptorType = WEBUSB_DT_URL;
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
				memcpy(&url->URL, webusb_https_url, url_len);
				*len = MIN(*len, url->bLength);
 8003b68:	429e      	cmp	r6, r3
 8003b6a:	bf28      	it	cs
 8003b6c:	461e      	movcs	r6, r3
 8003b6e:	802e      	strh	r6, [r5, #0]
				status = USBD_REQ_HANDLED;
 8003b70:	e7d1      	b.n	8003b16 <webusb_control_vendor_request+0x32>
 8003b72:	bf00      	nop
 8003b74:	08004c3c 	.word	0x08004c3c
 8003b78:	08004c60 	.word	0x08004c60
 8003b7c:	080046f8 	.word	0x080046f8
 8003b80:	08004c58 	.word	0x08004c58
 8003b84:	200007d4 	.word	0x200007d4

08003b88 <webusb_setup>:
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
}

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <webusb_setup+0x48>)
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
}

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8003b8a:	b510      	push	{r4, lr}
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <webusb_setup+0x4c>)
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
}

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 8003b8e:	6011      	str	r1, [r2, #0]

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003b90:	227f      	movs	r2, #127	; 0x7f
 8003b92:	2140      	movs	r1, #64	; 0x40
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
}

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8003b94:	4604      	mov	r4, r0
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003b96:	f7ff fe3b 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	db06      	blt.n	8003bac <webusb_setup+0x24>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <webusb_setup+0x50>)
 8003ba2:	f7ff fe17 	bl	80037d4 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	db0b      	blt.n	8003bc2 <webusb_setup+0x3a>
}
 8003baa:	bd10      	pop	{r4, pc}
	int status = aggregate_register_callback(
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <webusb_setup+0x54>)
 8003bae:	f7ff fba1 	bl	80032f4 <debug_println>
 8003bb2:	f7ff fb2b 	bl	800320c <debug_flush>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <webusb_setup+0x50>)
 8003bba:	f7ff fe0b 	bl	80037d4 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	daf3      	bge.n	8003baa <webusb_setup+0x22>
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <webusb_setup+0x54>)
 8003bc4:	f7ff fb96 	bl	80032f4 <debug_println>
}
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003bcc:	f7ff bb1e 	b.w	800320c <debug_flush>
 8003bd0:	200007d4 	.word	0x200007d4
 8003bd4:	08003ae5 	.word	0x08003ae5
 8003bd8:	08003abd 	.word	0x08003abd
 8003bdc:	08004cb4 	.word	0x08004cb4

08003be0 <winusb_control_vendor_request>:
}

static int winusb_control_vendor_request(usbd_device *usbd_dev,
					struct usb_setup_data *req,
					uint8_t **buf, uint16_t *len,
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 8003be0:	b570      	push	{r4, r5, r6, lr}
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003be2:	780d      	ldrb	r5, [r1, #0]
 8003be4:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8003be8:	b2e4      	uxtb	r4, r4
 8003bea:	2c01      	cmp	r4, #1
 8003bec:	d809      	bhi.n	8003c02 <winusb_control_vendor_request+0x22>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003bee:	784c      	ldrb	r4, [r1, #1]
 8003bf0:	2c21      	cmp	r4, #33	; 0x21
 8003bf2:	d106      	bne.n	8003c02 <winusb_control_vendor_request+0x22>

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003bf4:	2dc0      	cmp	r5, #192	; 0xc0
 8003bf6:	461e      	mov	r6, r3
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	888b      	ldrh	r3, [r1, #4]
 8003bfc:	d003      	beq.n	8003c06 <winusb_control_vendor_request+0x26>
		dump_usb_request("winid", req); // debug_flush(); ////
		*buf = (uint8_t*)(&winusb_wcid);
		*len = MIN(*len, winusb_wcid.header.dwLength);
		status = USBD_REQ_HANDLED;

	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d012      	beq.n	8003c28 <winusb_control_vendor_request+0x48>
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003c02:	2002      	movs	r0, #2

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003c06:	2b07      	cmp	r3, #7
 8003c08:	d020      	beq.n	8003c4c <winusb_control_vendor_request+0x6c>
#ifdef NOTUSED
		uint8_t *b = (uint8_t*) &msos20_descriptor_set; int i;
		debug_print_unsigned(MSOS20_DESCRIPTOR_SET_SIZE); debug_print(" / ");
		for (i = 0; i < MSOS20_DESCRIPTOR_SET_SIZE; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d1f9      	bne.n	8003c02 <winusb_control_vendor_request+0x22>
		(req->wIndex == WINUSB_REQ_GET_COMPATIBLE_ID_FEATURE_DESCRIPTOR)) {
		//  Request for the MS OS 1.0 Compatible ID feature ("WINUSB"), referenced by the Extended Properties e.g.
		//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00
		dump_usb_request("winid", req); // debug_flush(); ////
 8003c0e:	4815      	ldr	r0, [pc, #84]	; (8003c64 <winusb_control_vendor_request+0x84>)
 8003c10:	f7ff fe5c 	bl	80038cc <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <winusb_control_vendor_request+0x88>)
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8003c16:	8833      	ldrh	r3, [r6, #0]
 8003c18:	6811      	ldr	r1, [r2, #0]
		status = USBD_REQ_HANDLED;
 8003c1a:	2001      	movs	r0, #1
		(req->wIndex == WINUSB_REQ_GET_COMPATIBLE_ID_FEATURE_DESCRIPTOR)) {
		//  Request for the MS OS 1.0 Compatible ID feature ("WINUSB"), referenced by the Extended Properties e.g.
		//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00
		dump_usb_request("winid", req); // debug_flush(); ////
		*buf = (uint8_t*)(&winusb_wcid);
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	bf28      	it	cs
 8003c20:	460b      	movcs	r3, r1
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
		(req->wIndex == WINUSB_REQ_GET_COMPATIBLE_ID_FEATURE_DESCRIPTOR)) {
		//  Request for the MS OS 1.0 Compatible ID feature ("WINUSB"), referenced by the Extended Properties e.g.
		//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00
		dump_usb_request("winid", req); // debug_flush(); ////
		*buf = (uint8_t*)(&winusb_wcid);
 8003c22:	6022      	str	r2, [r4, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8003c24:	8033      	strh	r3, [r6, #0]

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
		*len = MIN(*len, winusb_wcid.header.dwLength);
		status = USBD_REQ_HANDLED;

	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8003c28:	4a0f      	ldr	r2, [pc, #60]	; (8003c68 <winusb_control_vendor_request+0x88>)
 8003c2a:	884b      	ldrh	r3, [r1, #2]
 8003c2c:	7c12      	ldrb	r2, [r2, #16]
#define DESCRIPTOR_CALLBACK_TYPE USB_REQ_TYPE_DEVICE
#define DESCRIPTOR_CALLBACK_MASK USB_REQ_TYPE_RECIPIENT

#define MIN(a, b) ({ typeof(a) _a = (a); typeof(b) _b = (b); _a < _b ? _a : _b; })
static int usb_descriptor_type(uint16_t wValue) { return wValue >> 8; }
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 8003c2e:	b2db      	uxtb	r3, r3
		*buf = (uint8_t*)(&winusb_wcid);
		*len = MIN(*len, winusb_wcid.header.dwLength);
		status = USBD_REQ_HANDLED;

	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1e6      	bne.n	8003c02 <winusb_control_vendor_request+0x22>
		//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00
		//  From http://searchingforbit.blogspot.com/2014/05/winusb-communication-with-stm32-round-2.html:
		//  Note that Windows queries this descriptor only once. It can be a hassle during development. Information that OS descriptors have been queried for some device is stored in registry under
		//  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\usbflags\VVVVPPPPRRRR (VVVV - vendor ID; PPPP - product ID; RRRR - revision).
		//  Delete VVVVPPPPRRRR key and also uninstall the device with utility like USDDeview to always get fresh device plug in behavior.
		dump_usb_request("winprp", req); // debug_flush(); ////
 8003c34:	480d      	ldr	r0, [pc, #52]	; (8003c6c <winusb_control_vendor_request+0x8c>)
 8003c36:	f7ff fe49 	bl	80038cc <dump_usb_request>
		*buf = (uint8_t*)(&guid);
		*len = MIN(*len, guid.header.dwLength);
 8003c3a:	8833      	ldrh	r3, [r6, #0]
		//  From http://searchingforbit.blogspot.com/2014/05/winusb-communication-with-stm32-round-2.html:
		//  Note that Windows queries this descriptor only once. It can be a hassle during development. Information that OS descriptors have been queried for some device is stored in registry under
		//  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\usbflags\VVVVPPPPRRRR (VVVV - vendor ID; PPPP - product ID; RRRR - revision).
		//  Delete VVVVPPPPRRRR key and also uninstall the device with utility like USDDeview to always get fresh device plug in behavior.
		dump_usb_request("winprp", req); // debug_flush(); ////
		*buf = (uint8_t*)(&guid);
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <winusb_control_vendor_request+0x90>)
		*len = MIN(*len, guid.header.dwLength);
 8003c3e:	2b92      	cmp	r3, #146	; 0x92
 8003c40:	bf28      	it	cs
 8003c42:	2392      	movcs	r3, #146	; 0x92
		//  From http://searchingforbit.blogspot.com/2014/05/winusb-communication-with-stm32-round-2.html:
		//  Note that Windows queries this descriptor only once. It can be a hassle during development. Information that OS descriptors have been queried for some device is stored in registry under
		//  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\usbflags\VVVVPPPPRRRR (VVVV - vendor ID; PPPP - product ID; RRRR - revision).
		//  Delete VVVVPPPPRRRR key and also uninstall the device with utility like USDDeview to always get fresh device plug in behavior.
		dump_usb_request("winprp", req); // debug_flush(); ////
		*buf = (uint8_t*)(&guid);
 8003c44:	6022      	str	r2, [r4, #0]
		*len = MIN(*len, guid.header.dwLength);
		status = USBD_REQ_HANDLED;
 8003c46:	2001      	movs	r0, #1
		//  Note that Windows queries this descriptor only once. It can be a hassle during development. Information that OS descriptors have been queried for some device is stored in registry under
		//  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\usbflags\VVVVPPPPRRRR (VVVV - vendor ID; PPPP - product ID; RRRR - revision).
		//  Delete VVVVPPPPRRRR key and also uninstall the device with utility like USDDeview to always get fresh device plug in behavior.
		dump_usb_request("winprp", req); // debug_flush(); ////
		*buf = (uint8_t*)(&guid);
		*len = MIN(*len, guid.header.dwLength);
 8003c48:	8033      	strh	r3, [r6, #0]

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
		//  Request for the MS OS 2.0 Descriptor referenced by the BOS, e.g.
		//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2
		//  See http://download.microsoft.com/download/3/5/6/3563ED4A-F318-4B66-A181-AB1D8F6FD42D/MS_OS_2_0_desc.docx
		dump_usb_request("windes", req); // debug_flush(); ////
 8003c4c:	4809      	ldr	r0, [pc, #36]	; (8003c74 <winusb_control_vendor_request+0x94>)
 8003c4e:	f7ff fe3d 	bl	80038cc <dump_usb_request>
		*buf = (uint8_t*) &msos20_descriptor_set;
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8003c52:	8833      	ldrh	r3, [r6, #0]
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
		//  Request for the MS OS 2.0 Descriptor referenced by the BOS, e.g.
		//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2
		//  See http://download.microsoft.com/download/3/5/6/3563ED4A-F318-4B66-A181-AB1D8F6FD42D/MS_OS_2_0_desc.docx
		dump_usb_request("windes", req); // debug_flush(); ////
		*buf = (uint8_t*) &msos20_descriptor_set;
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <winusb_control_vendor_request+0x98>)
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8003c56:	2bb2      	cmp	r3, #178	; 0xb2
 8003c58:	bf28      	it	cs
 8003c5a:	23b2      	movcs	r3, #178	; 0xb2
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
		//  Request for the MS OS 2.0 Descriptor referenced by the BOS, e.g.
		//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2
		//  See http://download.microsoft.com/download/3/5/6/3563ED4A-F318-4B66-A181-AB1D8F6FD42D/MS_OS_2_0_desc.docx
		dump_usb_request("windes", req); // debug_flush(); ////
		*buf = (uint8_t*) &msos20_descriptor_set;
 8003c5c:	6022      	str	r2, [r4, #0]
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
		status = USBD_REQ_HANDLED;
 8003c5e:	2001      	movs	r0, #1
		//  Request for the MS OS 2.0 Descriptor referenced by the BOS, e.g.
		//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2
		//  See http://download.microsoft.com/download/3/5/6/3563ED4A-F318-4B66-A181-AB1D8F6FD42D/MS_OS_2_0_desc.docx
		dump_usb_request("windes", req); // debug_flush(); ////
		*buf = (uint8_t*) &msos20_descriptor_set;
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8003c60:	8033      	strh	r3, [r6, #0]

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	08004d84 	.word	0x08004d84
 8003c68:	20000504 	.word	0x20000504
 8003c6c:	08004d8c 	.word	0x08004d8c
 8003c70:	08004ccc 	.word	0x08004ccc
 8003c74:	08004d7c 	.word	0x08004d7c
 8003c78:	20000450 	.word	0x20000450

08003c7c <winusb_set_config>:

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003c7c:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003c7e:	2260      	movs	r2, #96	; 0x60
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <winusb_set_config+0x20>)
 8003c82:	2140      	movs	r1, #64	; 0x40
 8003c84:	f7ff fdc4 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	db00      	blt.n	8003c8e <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 8003c8c:	bd08      	pop	{r3, pc}
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8003c8e:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <winusb_set_config+0x24>)
 8003c90:	f7ff fb30 	bl	80032f4 <debug_println>
	}
}
 8003c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8003c98:	f7ff bab8 	b.w	800320c <debug_flush>
 8003c9c:	08003be1 	.word	0x08003be1
 8003ca0:	08004d9c 	.word	0x08004d9c

08003ca4 <winusb_descriptor_request>:
};

static int winusb_descriptor_request(usbd_device *usbd_dev,
	struct usb_setup_data *req,
	uint8_t **buf, uint16_t *len,
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 8003ca4:	b538      	push	{r3, r4, r5, lr}
	//  Skip non-standard requests not meant for me.
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8003ca6:	780c      	ldrb	r4, [r1, #0]
 8003ca8:	f014 0f60 	tst.w	r4, #96	; 0x60
 8003cac:	d102      	bne.n	8003cb4 <winusb_descriptor_request+0x10>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8003cae:	784c      	ldrb	r4, [r1, #1]
 8003cb0:	2c06      	cmp	r4, #6
 8003cb2:	d001      	beq.n	8003cb8 <winusb_descriptor_request+0x14>
static int winusb_descriptor_request(usbd_device *usbd_dev,
	struct usb_setup_data *req,
	uint8_t **buf, uint16_t *len,
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
	//  Skip non-standard requests not meant for me.
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8003cb4:	2002      	movs	r0, #2
			*len = MIN(*len, winusb_string_descriptor.bLength);
			return USBD_REQ_HANDLED;
		}
	}
	return USBD_REQ_NEXT_CALLBACK;
}
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
	struct usb_setup_data *req,
	uint8_t **buf, uint16_t *len,
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
	//  Skip non-standard requests not meant for me.
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8003cb8:	8848      	ldrh	r0, [r1, #2]
 8003cba:	0a04      	lsrs	r4, r0, #8
 8003cbc:	2c03      	cmp	r4, #3
 8003cbe:	d1f9      	bne.n	8003cb4 <winusb_descriptor_request+0x10>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8003cc0:	b2c0      	uxtb	r0, r0
 8003cc2:	28ee      	cmp	r0, #238	; 0xee
 8003cc4:	d1f6      	bne.n	8003cb4 <winusb_descriptor_request+0x10>
 8003cc6:	461c      	mov	r4, r3
			dump_usb_request("winee", req); // debug_flush(); ////
 8003cc8:	4806      	ldr	r0, [pc, #24]	; (8003ce4 <winusb_descriptor_request+0x40>)
 8003cca:	4615      	mov	r5, r2
 8003ccc:	f7ff fdfe 	bl	80038cc <dump_usb_request>
			*buf = (uint8_t*) &winusb_string_descriptor;
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8003cd0:	8823      	ldrh	r3, [r4, #0]
	//  Skip non-standard requests not meant for me.
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
			dump_usb_request("winee", req); // debug_flush(); ////
			*buf = (uint8_t*) &winusb_string_descriptor;
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <winusb_descriptor_request+0x44>)
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8003cd4:	2b12      	cmp	r3, #18
 8003cd6:	bf28      	it	cs
 8003cd8:	2312      	movcs	r3, #18
	//  Skip non-standard requests not meant for me.
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
			dump_usb_request("winee", req); // debug_flush(); ////
			*buf = (uint8_t*) &winusb_string_descriptor;
 8003cda:	602a      	str	r2, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	8023      	strh	r3, [r4, #0]
			return USBD_REQ_HANDLED;
		}
	}
	return USBD_REQ_NEXT_CALLBACK;
}
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08004d94 	.word	0x08004d94
 8003ce8:	08004dd4 	.word	0x08004dd4

08003cec <winusb_setup>:
}

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <winusb_setup+0x48>)
	if (status < 0) {
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8003cee:	b570      	push	{r4, r5, r6, lr}
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8003cf0:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8003cf2:	4911      	ldr	r1, [pc, #68]	; (8003d38 <winusb_setup+0x4c>)
	if (status < 0) {
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8003cf4:	4604      	mov	r4, r0
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8003cf6:	f7ff fd6d 	bl	80037d4 <aggregate_register_config_callback>

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <winusb_setup+0x50>)

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8003cfc:	4605      	mov	r5, r0

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8003cfe:	2260      	movs	r2, #96	; 0x60
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7ff fd84 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <winusb_setup+0x54>)
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8003d0a:	4606      	mov	r6, r0
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8003d0c:	221f      	movs	r2, #31
 8003d0e:	4620      	mov	r0, r4
 8003d10:	2100      	movs	r1, #0
 8003d12:	f7ff fd7d 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	db04      	blt.n	8003d24 <winusb_setup+0x38>
 8003d1a:	2e00      	cmp	r6, #0
 8003d1c:	db02      	blt.n	8003d24 <winusb_setup+0x38>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	db00      	blt.n	8003d24 <winusb_setup+0x38>
}
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
	int status2 = aggregate_register_callback(
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8003d24:	4807      	ldr	r0, [pc, #28]	; (8003d44 <winusb_setup+0x58>)
 8003d26:	f7ff fae5 	bl	80032f4 <debug_println>
}
 8003d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int status2 = aggregate_register_callback(
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8003d2e:	f7ff ba6d 	b.w	800320c <debug_flush>
 8003d32:	bf00      	nop
 8003d34:	20000504 	.word	0x20000504
 8003d38:	08003c7d 	.word	0x08003c7d
 8003d3c:	08003be1 	.word	0x08003be1
 8003d40:	08003ca5 	.word	0x08003ca5
 8003d44:	08004dbc 	.word	0x08004dbc

08003d48 <target_set_led>:
 8003d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d4c:	b110      	cbz	r0, 8003d54 <target_set_led+0xc>
 8003d4e:	4803      	ldr	r0, [pc, #12]	; (8003d5c <target_set_led+0x14>)
 8003d50:	f7fc bc3e 	b.w	80005d0 <gpio_clear>
 8003d54:	4801      	ldr	r0, [pc, #4]	; (8003d5c <target_set_led+0x14>)
 8003d56:	f7fc bc39 	b.w	80005cc <gpio_set>
 8003d5a:	bf00      	nop
 8003d5c:	40011000 	.word	0x40011000

08003d60 <target_gpio_setup>:
 8003d60:	b508      	push	{r3, lr}
 8003d62:	f240 3002 	movw	r0, #770	; 0x302
 8003d66:	f7fc fc47 	bl	80005f8 <rcc_periph_clock_enable>
 8003d6a:	f240 3003 	movw	r0, #771	; 0x303
 8003d6e:	f7fc fc43 	bl	80005f8 <rcc_periph_clock_enable>
 8003d72:	f44f 7041 	mov.w	r0, #772	; 0x304
 8003d76:	f7fc fc3f 	bl	80005f8 <rcc_periph_clock_enable>
 8003d7a:	f240 3097 	movw	r0, #919	; 0x397
 8003d7e:	f7fc fc3b 	bl	80005f8 <rcc_periph_clock_enable>
 8003d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d86:	480f      	ldr	r0, [pc, #60]	; (8003dc4 <target_gpio_setup+0x64>)
 8003d88:	f7fc fc20 	bl	80005cc <gpio_set>
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d92:	4611      	mov	r1, r2
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <target_gpio_setup+0x64>)
 8003d96:	f7fc fd45 	bl	8000824 <gpio_set_mode>
 8003d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2101      	movs	r1, #1
 8003da2:	4809      	ldr	r0, [pc, #36]	; (8003dc8 <target_gpio_setup+0x68>)
 8003da4:	f7fc fd3e 	bl	8000824 <gpio_set_mode>
 8003da8:	2110      	movs	r1, #16
 8003daa:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <target_gpio_setup+0x64>)
 8003dac:	f7fc fc10 	bl	80005d0 <gpio_clear>
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <target_gpio_setup+0x6c>)
 8003db2:	bf00      	nop
 8003db4:	3b01      	subs	r3, #1
 8003db6:	d1fc      	bne.n	8003db2 <target_gpio_setup+0x52>
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <target_gpio_setup+0x6c>)
 8003dba:	bf00      	nop
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	d1fc      	bne.n	8003dba <target_gpio_setup+0x5a>
 8003dc0:	bd08      	pop	{r3, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40010800 	.word	0x40010800
 8003dcc:	00030d40 	.word	0x00030d40

08003dd0 <target_usb_init>:
 8003dd0:	b508      	push	{r3, lr}
 8003dd2:	f240 2017 	movw	r0, #535	; 0x217
 8003dd6:	f7fc fc1d 	bl	8000614 <rcc_periph_reset_pulse>
 8003dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dde:	4804      	ldr	r0, [pc, #16]	; (8003df0 <target_usb_init+0x20>)
 8003de0:	f7fc fbf6 	bl	80005d0 <gpio_clear>
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <target_usb_init+0x24>)
 8003de6:	bf00      	nop
 8003de8:	3b01      	subs	r3, #1
 8003dea:	d1fc      	bne.n	8003de6 <target_usb_init+0x16>
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <target_usb_init+0x28>)
 8003dee:	bd08      	pop	{r3, pc}
 8003df0:	40010800 	.word	0x40010800
 8003df4:	000c3500 	.word	0x000c3500
 8003df8:	08004728 	.word	0x08004728

08003dfc <target_get_force_bootloader>:
 8003dfc:	b508      	push	{r3, lr}
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f000 fbb0 	bl	8004564 <backup_read>
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <target_get_force_bootloader+0x38>)
 8003e06:	4298      	cmp	r0, r3
 8003e08:	d00d      	beq.n	8003e26 <target_get_force_bootloader+0x2a>
 8003e0a:	490b      	ldr	r1, [pc, #44]	; (8003e38 <target_get_force_bootloader+0x3c>)
 8003e0c:	4288      	cmp	r0, r1
 8003e0e:	d004      	beq.n	8003e1a <target_get_force_bootloader+0x1e>
 8003e10:	2000      	movs	r0, #0
 8003e12:	f000 fb8b 	bl	800452c <backup_write>
 8003e16:	2001      	movs	r0, #1
 8003e18:	bd08      	pop	{r3, pc}
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	f000 fb85 	bl	800452c <backup_write>
 8003e22:	2000      	movs	r0, #0
 8003e24:	bd08      	pop	{r3, pc}
 8003e26:	2100      	movs	r1, #0
 8003e28:	4608      	mov	r0, r1
 8003e2a:	f000 fb7f 	bl	800452c <backup_write>
 8003e2e:	2001      	movs	r0, #1
 8003e30:	bd08      	pop	{r3, pc}
 8003e32:	bf00      	nop
 8003e34:	544f4f42 	.word	0x544f4f42
 8003e38:	3f82722a 	.word	0x3f82722a

08003e3c <target_get_serial_number>:

    return force;
}

void target_get_serial_number(char* dest, size_t max_chars) {
    desig_get_unique_id_as_string(dest, max_chars+1);
 8003e3c:	3101      	adds	r1, #1
 8003e3e:	f7fc bbfb 	b.w	8000638 <desig_get_unique_id_as_string>
 8003e42:	bf00      	nop

08003e44 <target_flash_unlock>:
void target_relocate_vector_table(void) {
    SCB_VTOR = APP_BASE_ADDRESS & 0xFFFF;
}

void target_flash_unlock(void) {
    flash_unlock();
 8003e44:	f7fc bbae 	b.w	80005a4 <flash_unlock>

08003e48 <target_flash_lock>:
}

void target_flash_lock(void) {
    flash_lock();
 8003e48:	f7fc bbb8 	b.w	80005bc <flash_lock>

08003e4c <target_flash_program_array>:

static inline uint16_t* get_flash_page_address(uint16_t* dest) {
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
}

bool target_flash_program_array(uint16_t* dest, const uint16_t* data, size_t half_word_count) {
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	4604      	mov	r4, r0
 8003e52:	460d      	mov	r5, r1
 8003e54:	4616      	mov	r6, r2
    /* Remember the bounds of erased data in the current page */
    static uint16_t* erase_start;
    static uint16_t* erase_end;

    const uint16_t* flash_end = get_flash_end();
    debug_print("target_flash_program_array dest "); debug_print_unsigned((size_t) dest); ////
 8003e56:	482e      	ldr	r0, [pc, #184]	; (8003f10 <target_flash_program_array+0xc4>)
 8003e58:	f7ff fa46 	bl	80032e8 <debug_print>
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff fa69 	bl	8003334 <debug_print_unsigned>
    debug_print(", data "); debug_print_unsigned((size_t) data); 
 8003e62:	482c      	ldr	r0, [pc, #176]	; (8003f14 <target_flash_program_array+0xc8>)
 8003e64:	f7ff fa40 	bl	80032e8 <debug_print>
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f7ff fa63 	bl	8003334 <debug_print_unsigned>
    debug_print(", half_word_count "); debug_print_unsigned((size_t) half_word_count); 
 8003e6e:	482a      	ldr	r0, [pc, #168]	; (8003f18 <target_flash_program_array+0xcc>)
 8003e70:	f7ff fa3a 	bl	80032e8 <debug_print>
 8003e74:	4630      	mov	r0, r6
 8003e76:	f7ff fa5d 	bl	8003334 <debug_print_unsigned>
    debug_print(", flash_end "); debug_print_unsigned((size_t) flash_end); 
 8003e7a:	4828      	ldr	r0, [pc, #160]	; (8003f1c <target_flash_program_array+0xd0>)
 8003e7c:	f7ff fa34 	bl	80032e8 <debug_print>
 8003e80:	4827      	ldr	r0, [pc, #156]	; (8003f20 <target_flash_program_array+0xd4>)
 8003e82:	f7ff fa57 	bl	8003334 <debug_print_unsigned>
    debug_println(""); debug_flush(); ////
 8003e86:	4827      	ldr	r0, [pc, #156]	; (8003f24 <target_flash_program_array+0xd8>)
 8003e88:	f7ff fa34 	bl	80032f4 <debug_println>
 8003e8c:	f7ff f9be 	bl	800320c <debug_flush>
    while (half_word_count > 0) {
 8003e90:	b39e      	cbz	r6, 8003efa <target_flash_program_array+0xae>
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <target_flash_program_array+0xdc>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	d833      	bhi.n	8003f00 <target_flash_program_array+0xb4>
 8003e98:	3d02      	subs	r5, #2
 8003e9a:	4699      	mov	r9, r3
 8003e9c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003f38 <target_flash_program_array+0xec>
 8003ea0:	4f22      	ldr	r7, [pc, #136]	; (8003f2c <target_flash_program_array+0xe0>)
void target_flash_lock(void) {
    flash_lock();
}

static inline uint16_t* get_flash_page_address(uint16_t* dest) {
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
 8003ea2:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003f3c <target_flash_program_array+0xf0>
 8003ea6:	e003      	b.n	8003eb0 <target_flash_program_array+0x64>
    debug_print("target_flash_program_array dest "); debug_print_unsigned((size_t) dest); ////
    debug_print(", data "); debug_print_unsigned((size_t) data); 
    debug_print(", half_word_count "); debug_print_unsigned((size_t) half_word_count); 
    debug_print(", flash_end "); debug_print_unsigned((size_t) flash_end); 
    debug_println(""); debug_flush(); ////
    while (half_word_count > 0) {
 8003ea8:	3e01      	subs	r6, #1
 8003eaa:	d026      	beq.n	8003efa <target_flash_program_array+0xae>
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {
 8003eac:	454c      	cmp	r4, r9
 8003eae:	d827      	bhi.n	8003f00 <target_flash_program_array+0xb4>
            debug_println("dest >= flash_end"); debug_flush();
            verified = false;
            break;
        }

        if (dest >= erase_end || dest < erase_start) {
 8003eb0:	f8d8 2000 	ldr.w	r2, [r8]
void target_flash_lock(void) {
    flash_lock();
}

static inline uint16_t* get_flash_page_address(uint16_t* dest) {
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
 8003eb4:	ea04 030a 	and.w	r3, r4, sl
            debug_println("dest >= flash_end"); debug_flush();
            verified = false;
            break;
        }

        if (dest >= erase_end || dest < erase_start) {
 8003eb8:	42a2      	cmp	r2, r4
            erase_start = get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 8003eba:	f503 6280 	add.w	r2, r3, #1024	; 0x400
            debug_println("dest >= flash_end"); debug_flush();
            verified = false;
            break;
        }

        if (dest >= erase_end || dest < erase_start) {
 8003ebe:	d902      	bls.n	8003ec6 <target_flash_program_array+0x7a>
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	42a1      	cmp	r1, r4
 8003ec4:	d905      	bls.n	8003ed2 <target_flash_program_array+0x86>
            erase_start = get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
            flash_erase_page((uint32_t)erase_start);
 8003ec6:	4618      	mov	r0, r3
            verified = false;
            break;
        }

        if (dest >= erase_end || dest < erase_start) {
            erase_start = get_flash_page_address(dest);
 8003ec8:	603b      	str	r3, [r7, #0]
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 8003eca:	f8c8 2000 	str.w	r2, [r8]
            flash_erase_page((uint32_t)erase_start);
 8003ece:	f7fc fc4b 	bl	8000768 <flash_erase_page>
        }
        flash_program_half_word((uint32_t)dest, *data);
 8003ed2:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8003ed6:	4620      	mov	r0, r4
        erase_start = dest + 1;
 8003ed8:	3402      	adds	r4, #2
        if (dest >= erase_end || dest < erase_start) {
            erase_start = get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
            flash_erase_page((uint32_t)erase_start);
        }
        flash_program_half_word((uint32_t)dest, *data);
 8003eda:	f7fc fbf9 	bl	80006d0 <flash_program_half_word>
        erase_start = dest + 1;
        if (*dest != *data) {
 8003ede:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8003ee2:	882b      	ldrh	r3, [r5, #0]
            erase_start = get_flash_page_address(dest);
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
            flash_erase_page((uint32_t)erase_start);
        }
        flash_program_half_word((uint32_t)dest, *data);
        erase_start = dest + 1;
 8003ee4:	603c      	str	r4, [r7, #0]
        if (*dest != *data) {
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d0de      	beq.n	8003ea8 <target_flash_program_array+0x5c>
            debug_println("*dest != *data"); debug_flush();
 8003eea:	4811      	ldr	r0, [pc, #68]	; (8003f30 <target_flash_program_array+0xe4>)
 8003eec:	f7ff fa02 	bl	80032f4 <debug_println>
 8003ef0:	f7ff f98c 	bl	800320c <debug_flush>
            verified = false;
 8003ef4:	2000      	movs	r0, #0
        data++;
        half_word_count--;
    }

    return verified;
}
 8003ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline uint16_t* get_flash_page_address(uint16_t* dest) {
    return (uint16_t*)(((uint32_t)dest / FLASH_PAGE_SIZE) * FLASH_PAGE_SIZE);
}

bool target_flash_program_array(uint16_t* dest, const uint16_t* data, size_t half_word_count) {
    bool verified = true;
 8003efa:	2001      	movs	r0, #1
        data++;
        half_word_count--;
    }

    return verified;
}
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    debug_println(""); debug_flush(); ////
    while (half_word_count > 0) {
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {
            //  TODO: Fails here
            debug_println("dest >= flash_end"); debug_flush();
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <target_flash_program_array+0xe8>)
 8003f02:	f7ff f9f7 	bl	80032f4 <debug_println>
 8003f06:	f7ff f981 	bl	800320c <debug_flush>
            verified = false;
 8003f0a:	2000      	movs	r0, #0
        data++;
        half_word_count--;
    }

    return verified;
}
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f10:	08004de8 	.word	0x08004de8
 8003f14:	08004e0c 	.word	0x08004e0c
 8003f18:	08004e14 	.word	0x08004e14
 8003f1c:	08004e28 	.word	0x08004e28
 8003f20:	08010000 	.word	0x08010000
 8003f24:	080046f8 	.word	0x080046f8
 8003f28:	0800ffff 	.word	0x0800ffff
 8003f2c:	200007dc 	.word	0x200007dc
 8003f30:	08004e4c 	.word	0x08004e4c
 8003f34:	08004e38 	.word	0x08004e38
 8003f38:	200007d8 	.word	0x200007d8
 8003f3c:	fffffc00 	.word	0xfffffc00

08003f40 <cdcacm_comm_cb>:

static void
cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
 8003f40:	b508      	push	{r3, lr}
	debug_println("comm"); debug_flush();
 8003f42:	4803      	ldr	r0, [pc, #12]	; (8003f50 <cdcacm_comm_cb+0x10>)
 8003f44:	f7ff f9d6 	bl	80032f4 <debug_println>
}
 8003f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void
cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	debug_println("comm"); debug_flush();
 8003f4c:	f7ff b95e 	b.w	800320c <debug_flush>
 8003f50:	08004e74 	.word	0x08004e74

08003f54 <cdcacm_data_rx_cb>:
 */
static void
cdcacm_data_rx_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
 8003f54:	b570      	push	{r4, r5, r6, lr}
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, cdcbuf, MAX_USB_PACKET_SIZE);
 8003f56:	4c10      	ldr	r4, [pc, #64]	; (8003f98 <cdcacm_data_rx_cb+0x44>)
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	2103      	movs	r1, #3
 */
static void
cdcacm_data_rx_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
 8003f5e:	4605      	mov	r5, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, cdcbuf, MAX_USB_PACKET_SIZE);
 8003f60:	f7fc fe04 	bl	8000b6c <usbd_ep_read_packet>
    if (len == 0) { return; }
 8003f64:	b900      	cbnz	r0, 8003f68 <cdcacm_data_rx_cb+0x14>
    cdcbuf[pos] = 0;

	usbd_ep_write_packet(usbd_dev, DATA_IN, cdcbuf, pos); ////  Echo the packet.
	
    debug_print("["); debug_println(cdcbuf); debug_print("]"); // debug_flush(); ////
}
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, cdcbuf, MAX_USB_PACKET_SIZE);
    if (len == 0) { return; }
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003f68:	2840      	cmp	r0, #64	; 0x40
 8003f6a:	bf28      	it	cs
 8003f6c:	2040      	movcs	r0, #64	; 0x40
    cdcbuf[pos] = 0;
 8003f6e:	2600      	movs	r6, #0
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, cdcbuf, MAX_USB_PACKET_SIZE);
    if (len == 0) { return; }
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003f70:	b281      	uxth	r1, r0
    cdcbuf[pos] = 0;

	usbd_ep_write_packet(usbd_dev, DATA_IN, cdcbuf, pos); ////  Echo the packet.
 8003f72:	460b      	mov	r3, r1
 8003f74:	4622      	mov	r2, r4
  uint8_t ep __attribute__((unused))
) {
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, cdcbuf, MAX_USB_PACKET_SIZE);
    if (len == 0) { return; }
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
    cdcbuf[pos] = 0;
 8003f76:	5466      	strb	r6, [r4, r1]

	usbd_ep_write_packet(usbd_dev, DATA_IN, cdcbuf, pos); ////  Echo the packet.
 8003f78:	4628      	mov	r0, r5
 8003f7a:	2183      	movs	r1, #131	; 0x83
 8003f7c:	f7fc fdee 	bl	8000b5c <usbd_ep_write_packet>
	
    debug_print("["); debug_println(cdcbuf); debug_print("]"); // debug_flush(); ////
 8003f80:	4806      	ldr	r0, [pc, #24]	; (8003f9c <cdcacm_data_rx_cb+0x48>)
 8003f82:	f7ff f9b1 	bl	80032e8 <debug_print>
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7ff f9b4 	bl	80032f4 <debug_println>
}
 8003f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
    cdcbuf[pos] = 0;

	usbd_ep_write_packet(usbd_dev, DATA_IN, cdcbuf, pos); ////  Echo the packet.
	
    debug_print("["); debug_println(cdcbuf); debug_print("]"); // debug_flush(); ////
 8003f90:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <cdcacm_data_rx_cb+0x4c>)
 8003f92:	f7ff b9a9 	b.w	80032e8 <debug_print>
 8003f96:	bf00      	nop
 8003f98:	200007e0 	.word	0x200007e0
 8003f9c:	08004ea4 	.word	0x08004ea4
 8003fa0:	08004ea8 	.word	0x08004ea8

08003fa4 <cdcacm_set_config>:
 */
static void
cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003fa4:	b510      	push	{r4, lr}
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <cdcacm_set_config+0x58>)
 */
static void
cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003fa8:	b082      	sub	sp, #8
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	9200      	str	r2, [sp, #0]
 8003fae:	2103      	movs	r1, #3
 8003fb0:	2202      	movs	r2, #2
 */
static void
cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003fb2:	4604      	mov	r4, r0
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003fb4:	f7fc fdca 	bl	8000b4c <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4620      	mov	r0, r4
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	2183      	movs	r1, #131	; 0x83
 8003fc4:	f7fc fdc2 	bl	8000b4c <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <cdcacm_set_config+0x5c>)
 8003fca:	4620      	mov	r0, r4
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	2184      	movs	r1, #132	; 0x84
 8003fd4:	f7fc fdba 	bl	8000b4c <usbd_ep_setup>
	int status = aggregate_register_callback(
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <cdcacm_set_config+0x60>)
 8003fdc:	227f      	movs	r2, #127	; 0x7f
 8003fde:	2121      	movs	r1, #33	; 0x21
 8003fe0:	f7ff fc16 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	db01      	blt.n	8003fec <cdcacm_set_config+0x48>
}
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd10      	pop	{r4, pc}
	int status = aggregate_register_callback(
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003fec:	4806      	ldr	r0, [pc, #24]	; (8004008 <cdcacm_set_config+0x64>)
 8003fee:	f7ff f981 	bl	80032f4 <debug_println>
}
 8003ff2:	b002      	add	sp, #8
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int status = aggregate_register_callback(
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003ff8:	f7ff b908 	b.w	800320c <debug_flush>
 8003ffc:	08003f55 	.word	0x08003f55
 8004000:	08003f41 	.word	0x08003f41
 8004004:	0800400d 	.word	0x0800400d
 8004008:	08004eac 	.word	0x08004eac

0800400c <cdcacm_control_request>:
  uint16_t *len,
  void (**complete)(
    usbd_device *usbd_dev,
    struct usb_setup_data *req
  ) __attribute__((unused))
) {
 800400c:	b510      	push	{r4, lr}
	//  Handle USB Control Requests
	//  dump_usb_request("*** cdc", req); ////
	switch (req->bRequest) {
 800400e:	7849      	ldrb	r1, [r1, #1]
 8004010:	2921      	cmp	r1, #33	; 0x21
 8004012:	d00a      	beq.n	800402a <cdcacm_control_request+0x1e>
 8004014:	2922      	cmp	r1, #34	; 0x22
 8004016:	d006      	beq.n	8004026 <cdcacm_control_request+0x1a>
 8004018:	2920      	cmp	r1, #32
 800401a:	d001      	beq.n	8004020 <cdcacm_control_request+0x14>
			}
			return USBD_REQ_HANDLED;
		}
	}
	//  dump_usb_request("*** cdc next", req); ////
	return USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
 800401c:	2002      	movs	r0, #2
}
 800401e:	bd10      	pop	{r4, pc}
			*buf = (uint8_t *) &line_coding;
			*len = sizeof(struct usb_cdc_line_coding);
			return USBD_REQ_HANDLED;
		}
		case USB_CDC_REQ_SET_LINE_CODING: {
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	2a06      	cmp	r2, #6
 8004024:	d90a      	bls.n	800403c <cdcacm_control_request+0x30>
			notif->wLength = 2;
			local_buf[8] = req->wValue & 3;
			local_buf[9] = 0;
			// usbd_ep_write_packet(0x83, buf, 10);
#endif  //  NOTUSED
			return USBD_REQ_HANDLED;
 8004026:	2001      	movs	r0, #1
			return USBD_REQ_HANDLED;
		}
	}
	//  dump_usb_request("*** cdc next", req); ////
	return USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
}
 8004028:	bd10      	pop	{r4, pc}
			return USBD_REQ_HANDLED;
		}
		case USB_CDC_REQ_GET_LINE_CODING: {
			//  Windows requires this request, not Mac or Linux.
			//  From https://github.com/PX4/Bootloader/blob/master/stm32/cdcacm.c
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 800402a:	8819      	ldrh	r1, [r3, #0]
 800402c:	2906      	cmp	r1, #6
 800402e:	d905      	bls.n	800403c <cdcacm_control_request+0x30>
				debug_print(", len "); debug_print_unsigned(*len);
				debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			*buf = (uint8_t *) &line_coding;
			*len = sizeof(struct usb_cdc_line_coding);
 8004030:	2107      	movs	r1, #7
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
				debug_print(", len "); debug_print_unsigned(*len);
				debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			*buf = (uint8_t *) &line_coding;
 8004032:	4c0c      	ldr	r4, [pc, #48]	; (8004064 <cdcacm_control_request+0x58>)
			*len = sizeof(struct usb_cdc_line_coding);
			return USBD_REQ_HANDLED;
 8004034:	2001      	movs	r0, #1
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
				debug_print(", len "); debug_print_unsigned(*len);
				debug_println(""); debug_flush(); ////
				return USBD_REQ_NOTSUPP;
			}
			*buf = (uint8_t *) &line_coding;
 8004036:	6014      	str	r4, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 8004038:	8019      	strh	r1, [r3, #0]
			return USBD_REQ_HANDLED;
		}
	}
	//  dump_usb_request("*** cdc next", req); ////
	return USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
}
 800403a:	bd10      	pop	{r4, pc}
		}
		case USB_CDC_REQ_GET_LINE_CODING: {
			//  Windows requires this request, not Mac or Linux.
			//  From https://github.com/PX4/Bootloader/blob/master/stm32/cdcacm.c
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 800403c:	461c      	mov	r4, r3
 800403e:	480a      	ldr	r0, [pc, #40]	; (8004068 <cdcacm_control_request+0x5c>)
 8004040:	f7ff f952 	bl	80032e8 <debug_print>
 8004044:	2007      	movs	r0, #7
 8004046:	f7ff f975 	bl	8003334 <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 800404a:	4808      	ldr	r0, [pc, #32]	; (800406c <cdcacm_control_request+0x60>)
 800404c:	f7ff f94c 	bl	80032e8 <debug_print>
 8004050:	8820      	ldrh	r0, [r4, #0]
 8004052:	f7ff f96f 	bl	8003334 <debug_print_unsigned>
				debug_println(""); debug_flush(); ////
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <cdcacm_control_request+0x64>)
 8004058:	f7ff f94c 	bl	80032f4 <debug_println>
 800405c:	f7ff f8d6 	bl	800320c <debug_flush>
				return USBD_REQ_NOTSUPP;
 8004060:	2000      	movs	r0, #0
			return USBD_REQ_HANDLED;
		}
	}
	//  dump_usb_request("*** cdc next", req); ////
	return USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
}
 8004062:	bd10      	pop	{r4, pc}
 8004064:	08004ecc 	.word	0x08004ecc
 8004068:	08004e7c 	.word	0x08004e7c
 800406c:	08004a64 	.word	0x08004a64
 8004070:	080046f8 	.word	0x080046f8

08004074 <cdc_setup>:
		CONTROL_CALLBACK_MASK,
		cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
}

void cdc_setup(usbd_device* usbd_dev) {
 8004074:	b508      	push	{r3, lr}
    //  debug_println("*** cdc_setup"); ////
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8004076:	4906      	ldr	r1, [pc, #24]	; (8004090 <cdc_setup+0x1c>)
 8004078:	f7ff fbac 	bl	80037d4 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 800407c:	2800      	cmp	r0, #0
 800407e:	db00      	blt.n	8004082 <cdc_setup+0xe>
}
 8004080:	bd08      	pop	{r3, pc}
}

void cdc_setup(usbd_device* usbd_dev) {
    //  debug_println("*** cdc_setup"); ////
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8004082:	4804      	ldr	r0, [pc, #16]	; (8004094 <cdc_setup+0x20>)
 8004084:	f7ff f936 	bl	80032f4 <debug_println>
}
 8004088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cdc_setup(usbd_device* usbd_dev) {
    //  debug_println("*** cdc_setup"); ////
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 800408c:	f7ff b8be 	b.w	800320c <debug_flush>
 8004090:	08003fa5 	.word	0x08003fa5
 8004094:	08004e5c 	.word	0x08004e5c

08004098 <hf2_set_config>:
    (void)ep;
    pokeSend();
}

/** @brief Setup the endpoints to be bulk & register the callbacks. */
static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {
 8004098:	b510      	push	{r4, lr}
 800409a:	4604      	mov	r4, r0
 800409c:	b082      	sub	sp, #8
    LOG("HF2 config");
 800409e:	480a      	ldr	r0, [pc, #40]	; (80040c8 <hf2_set_config+0x30>)
 80040a0:	f7ff f928 	bl	80032f4 <debug_println>
    (void)wValue;
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <hf2_set_config+0x34>)
 80040a6:	4620      	mov	r0, r4
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2202      	movs	r2, #2
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	2182      	movs	r1, #130	; 0x82
 80040b0:	f7fc fd4c 	bl	8000b4c <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 80040b4:	2202      	movs	r2, #2
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <hf2_set_config+0x38>)
 80040b8:	4620      	mov	r0, r4
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4611      	mov	r1, r2
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	f7fc fd44 	bl	8000b4c <usbd_ep_setup>
}
 80040c4:	b002      	add	sp, #8
 80040c6:	bd10      	pop	{r4, pc}
 80040c8:	08004f84 	.word	0x08004f84
 80040cc:	080041b5 	.word	0x080041b5
 80040d0:	080041b9 	.word	0x080041b9

080040d4 <assert.part.0>:

#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
 80040d4:	b510      	push	{r4, lr}
 80040d6:	4604      	mov	r4, r0
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_flush();
 80040d8:	4804      	ldr	r0, [pc, #16]	; (80040ec <assert.part.0+0x18>)
 80040da:	f7ff f905 	bl	80032e8 <debug_print>
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff f908 	bl	80032f4 <debug_println>
}
 80040e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_flush();
 80040e8:	f7ff b890 	b.w	800320c <debug_flush>
 80040ec:	08004ed4 	.word	0x08004ed4

080040f0 <pokeSend>:
const uint8_t *dataToSend;
volatile uint32_t dataToSendLength;
uint8_t dataToSendFlag;
static usbd_device *_usbd_dev;

static void pokeSend() {
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // debug_println("pokeSend"); debug_flush(); ////
    static uint8_t buf[64];
    bool sendIt = false;

    memset(buf, 0, sizeof(buf));
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	2100      	movs	r1, #0
 80040f8:	481a      	ldr	r0, [pc, #104]	; (8004164 <pokeSend+0x74>)
 80040fa:	f7fe ffe1 	bl	80030c0 <memset>
 80040fe:	b672      	cpsid	i

    cm_disable_interrupts();
    if (dataToSendLength) {
 8004100:	4c19      	ldr	r4, [pc, #100]	; (8004168 <pokeSend+0x78>)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	b913      	cbnz	r3, 800410c <pokeSend+0x1c>
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 8004106:	b662      	cpsie	i
    if (sendIt) {
        uint16_t len = sizeof(buf);
        // dump_buffer("hf2pkt >>", buf, len); // debug_flush(); ////
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
    }
}
 8004108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    cm_disable_interrupts();
    if (dataToSendLength) {
        int flag = dataToSendFlag;
        int s = 63;
        if (dataToSendLength <= 63) {
 800410c:	6822      	ldr	r2, [r4, #0]

    memset(buf, 0, sizeof(buf));

    cm_disable_interrupts();
    if (dataToSendLength) {
        int flag = dataToSendFlag;
 800410e:	4b17      	ldr	r3, [pc, #92]	; (800416c <pokeSend+0x7c>)
        int s = 63;
        if (dataToSendLength <= 63) {
 8004110:	2a3f      	cmp	r2, #63	; 0x3f

    memset(buf, 0, sizeof(buf));

    cm_disable_interrupts();
    if (dataToSendLength) {
        int flag = dataToSendFlag;
 8004112:	781b      	ldrb	r3, [r3, #0]
        int s = 63;
        if (dataToSendLength <= 63) {
 8004114:	d81e      	bhi.n	8004154 <pokeSend+0x64>
            s = dataToSendLength;
 8004116:	6826      	ldr	r6, [r4, #0]
 8004118:	4333      	orrs	r3, r6
 800411a:	b2db      	uxtb	r3, r3
        } else {
            if (flag == HF2_FLAG_CMDPKT_LAST)
                flag = HF2_FLAG_CMDPKT_BODY;
        }

        buf[0] = flag | s;
 800411c:	4f11      	ldr	r7, [pc, #68]	; (8004164 <pokeSend+0x74>)
        memcpy(buf + 1, dataToSend, s);
 800411e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004174 <pokeSend+0x84>
        } else {
            if (flag == HF2_FLAG_CMDPKT_LAST)
                flag = HF2_FLAG_CMDPKT_BODY;
        }

        buf[0] = flag | s;
 8004122:	4638      	mov	r0, r7
        memcpy(buf + 1, dataToSend, s);
 8004124:	f8d8 5000 	ldr.w	r5, [r8]
 8004128:	4632      	mov	r2, r6
 800412a:	4629      	mov	r1, r5
        } else {
            if (flag == HF2_FLAG_CMDPKT_LAST)
                flag = HF2_FLAG_CMDPKT_BODY;
        }

        buf[0] = flag | s;
 800412c:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(buf + 1, dataToSend, s);
 8004130:	f7fe ff7e 	bl	8003030 <memcpy>
        dataToSend += s;
        dataToSendLength -= s;
 8004134:	6823      	ldr	r3, [r4, #0]
                flag = HF2_FLAG_CMDPKT_BODY;
        }

        buf[0] = flag | s;
        memcpy(buf + 1, dataToSend, s);
        dataToSend += s;
 8004136:	4435      	add	r5, r6
        dataToSendLength -= s;
 8004138:	1b9e      	subs	r6, r3, r6
                flag = HF2_FLAG_CMDPKT_BODY;
        }

        buf[0] = flag | s;
        memcpy(buf + 1, dataToSend, s);
        dataToSend += s;
 800413a:	f8c8 5000 	str.w	r5, [r8]
        dataToSendLength -= s;
 800413e:	6026      	str	r6, [r4, #0]
 8004140:	b662      	cpsie	i
    cm_enable_interrupts();

    if (sendIt) {
        uint16_t len = sizeof(buf);
        // dump_buffer("hf2pkt >>", buf, len); // debug_flush(); ////
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <pokeSend+0x80>)
 8004144:	463a      	mov	r2, r7
    }
}
 8004146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cm_enable_interrupts();

    if (sendIt) {
        uint16_t len = sizeof(buf);
        // dump_buffer("hf2pkt >>", buf, len); // debug_flush(); ////
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	2182      	movs	r1, #130	; 0x82
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	f7fc bd04 	b.w	8000b5c <usbd_ep_write_packet>
        int flag = dataToSendFlag;
        int s = 63;
        if (dataToSendLength <= 63) {
            s = dataToSendLength;
        } else {
            if (flag == HF2_FLAG_CMDPKT_LAST)
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	bf0d      	iteet	eq
 8004158:	263f      	moveq	r6, #63	; 0x3f
 800415a:	f043 033f 	orrne.w	r3, r3, #63	; 0x3f
 800415e:	263f      	movne	r6, #63	; 0x3f
 8004160:	4633      	moveq	r3, r6
 8004162:	e7db      	b.n	800411c <pokeSend+0x2c>
 8004164:	20000868 	.word	0x20000868
 8004168:	20001f08 	.word	0x20001f08
 800416c:	20001f0c 	.word	0x20001f0c
 8004170:	20000824 	.word	0x20000824
 8004174:	20001f04 	.word	0x20001f04

08004178 <send_hf2_response>:
        // dump_buffer("hf2pkt >>", buf, len); // debug_flush(); ////
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
    }
}

static void send_hf2_response(int size) {
 8004178:	4602      	mov	r2, r0
 800417a:	b538      	push	{r3, r4, r5, lr}
    dataToSend = pkt.buf;
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
 800417c:	2540      	movs	r5, #64	; 0x40
    dataToSendLength = 4 + size;
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <send_hf2_response+0x28>)
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
    }
}

static void send_hf2_response(int size) {
    dataToSend = pkt.buf;
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <send_hf2_response+0x2c>)
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
    dataToSendLength = 4 + size;
 8004182:	1d14      	adds	r4, r2, #4
    }
}

static void send_hf2_response(int size) {
    dataToSend = pkt.buf;
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
 8004184:	4808      	ldr	r0, [pc, #32]	; (80041a8 <send_hf2_response+0x30>)
    dataToSendLength = 4 + size;
 8004186:	600c      	str	r4, [r1, #0]
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
    }
}

static void send_hf2_response(int size) {
    dataToSend = pkt.buf;
 8004188:	4c08      	ldr	r4, [pc, #32]	; (80041ac <send_hf2_response+0x34>)
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
 800418a:	7005      	strb	r5, [r0, #0]
    dataToSendLength = 4 + size;
    dump_buffer("hf2 >>", dataToSend, size); // debug_flush(); ////
 800418c:	4619      	mov	r1, r3
 800418e:	4808      	ldr	r0, [pc, #32]	; (80041b0 <send_hf2_response+0x38>)
        usbd_ep_write_packet(_usbd_dev, HF2_IN, buf, len);
    }
}

static void send_hf2_response(int size) {
    dataToSend = pkt.buf;
 8004190:	6023      	str	r3, [r4, #0]
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
    dataToSendLength = 4 + size;
    dump_buffer("hf2 >>", dataToSend, size); // debug_flush(); ////
 8004192:	f7ff fb73 	bl	800387c <dump_buffer>
    pokeSend();
}
 8004196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void send_hf2_response(int size) {
    dataToSend = pkt.buf;
    dataToSendFlag = HF2_FLAG_CMDPKT_LAST;
    dataToSendLength = 4 + size;
    dump_buffer("hf2 >>", dataToSend, size); // debug_flush(); ////
    pokeSend();
 800419a:	f7ff bfa9 	b.w	80040f0 <pokeSend>
 800419e:	bf00      	nop
 80041a0:	20001f08 	.word	0x20001f08
 80041a4:	20000ec4 	.word	0x20000ec4
 80041a8:	20001f0c 	.word	0x20001f0c
 80041ac:	20001f04 	.word	0x20001f04
 80041b0:	08004fa8 	.word	0x08004fa8

080041b4 <hf2_data_tx_cb>:
}

static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) {
    (void)usbd_dev;
    (void)ep;
    pokeSend();
 80041b4:	f7ff bf9c 	b.w	80040f0 <pokeSend>

080041b8 <hf2_data_rx_cb>:
}

static const char bad_packet_message[] = "bad packet";
static uint8_t buf[64];

static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 80041b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //  debug_print("hf2 << ep "); debug_printhex(ep); debug_println(""); // debug_flush(); ////
    int len;
    len = usbd_ep_read_packet(usbd_dev, ep, buf, sizeof(buf));    
 80041bc:	4e61      	ldr	r6, [pc, #388]	; (8004344 <hf2_data_rx_cb+0x18c>)
 80041be:	2340      	movs	r3, #64	; 0x40
 80041c0:	4632      	mov	r2, r6
 80041c2:	f7fc fcd3 	bl	8000b6c <usbd_ep_read_packet>
 80041c6:	4604      	mov	r4, r0
    debug_print("hf2 << tag "); debug_printhex(buf[0]); debug_println("");  // DMESG("HF2 read: %d", len);
 80041c8:	485f      	ldr	r0, [pc, #380]	; (8004348 <hf2_data_rx_cb+0x190>)
 80041ca:	f7ff f88d 	bl	80032e8 <debug_print>
 80041ce:	7830      	ldrb	r0, [r6, #0]
 80041d0:	f7ff f8b2 	bl	8003338 <debug_printhex>
 80041d4:	485d      	ldr	r0, [pc, #372]	; (800434c <hf2_data_rx_cb+0x194>)
 80041d6:	f7ff f88d 	bl	80032f4 <debug_println>
    // dump_buffer(",", buf, len); // debug_flush(); ////    
    if (len <= 0) return;
 80041da:	b1a4      	cbz	r4, 8004206 <hf2_data_rx_cb+0x4e>

    uint8_t tag = buf[0];
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 80041dc:	4f5c      	ldr	r7, [pc, #368]	; (8004350 <hf2_data_rx_cb+0x198>)
    len = usbd_ep_read_packet(usbd_dev, ep, buf, sizeof(buf));    
    debug_print("hf2 << tag "); debug_printhex(buf[0]); debug_println("");  // DMESG("HF2 read: %d", len);
    // dump_buffer(",", buf, len); // debug_flush(); ////    
    if (len <= 0) return;

    uint8_t tag = buf[0];
 80041de:	7834      	ldrb	r4, [r6, #0]
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 80041e0:	8838      	ldrh	r0, [r7, #0]
 80041e2:	f004 083f 	and.w	r8, r4, #63	; 0x3f
 80041e6:	b980      	cbnz	r0, 800420a <hf2_data_rx_cb+0x52>
    int size = tag & HF2_SIZE_MASK;
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
    memcpy(pkt.buf + pkt.size, buf + 1, size);
 80041e8:	4e5a      	ldr	r6, [pc, #360]	; (8004354 <hf2_data_rx_cb+0x19c>)
 80041ea:	4642      	mov	r2, r8
 80041ec:	4430      	add	r0, r6
 80041ee:	495a      	ldr	r1, [pc, #360]	; (8004358 <hf2_data_rx_cb+0x1a0>)
 80041f0:	f7fe ff1e 	bl	8003030 <memcpy>
    pkt.size += size;
 80041f4:	f836 5c04 	ldrh.w	r5, [r6, #-4]
    tag &= HF2_FLAG_MASK;
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 80041f8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
    int size = tag & HF2_SIZE_MASK;
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
    memcpy(pkt.buf + pkt.size, buf + 1, size);
    pkt.size += size;
 80041fc:	4445      	add	r5, r8
 80041fe:	b2ad      	uxth	r5, r5
 8004200:	f826 5c04 	strh.w	r5, [r6, #-4]
    tag &= HF2_FLAG_MASK;
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8004204:	d109      	bne.n	800421a <hf2_data_rx_cb+0x62>
        } else {
            // do something about serial?
        }
        pkt.size = 0;
    }
}
 8004206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // dump_buffer(",", buf, len); // debug_flush(); ////    
    if (len <= 0) return;

    uint8_t tag = buf[0];
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800420a:	0623      	lsls	r3, r4, #24
 800420c:	d40b      	bmi.n	8004226 <hf2_data_rx_cb+0x6e>
    int size = tag & HF2_SIZE_MASK;
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
 800420e:	eb08 0300 	add.w	r3, r8, r0
#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8004212:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8004216:	dc0f      	bgt.n	8004238 <hf2_data_rx_cb+0x80>
 8004218:	e7e6      	b.n	80041e8 <hf2_data_rx_cb+0x30>
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
    memcpy(pkt.buf + pkt.size, buf + 1, size);
    pkt.size += size;
    tag &= HF2_FLAG_MASK;
    if (tag != HF2_FLAG_CMDPKT_BODY) {
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 800421a:	2c40      	cmp	r4, #64	; 0x40
 800421c:	d011      	beq.n	8004242 <hf2_data_rx_cb+0x8a>
            handle_command();
        } else {
            // do something about serial?
        }
        pkt.size = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	803b      	strh	r3, [r7, #0]
    }
}
 8004222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8004226:	484d      	ldr	r0, [pc, #308]	; (800435c <hf2_data_rx_cb+0x1a4>)
 8004228:	f7ff ff54 	bl	80040d4 <assert.part.0>
 800422c:	883b      	ldrh	r3, [r7, #0]

    uint8_t tag = buf[0];
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
    int size = tag & HF2_SIZE_MASK;
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
 800422e:	eb03 0208 	add.w	r2, r3, r8
#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8004232:	f5b2 6f88 	cmp.w	r2, #1088	; 0x440
 8004236:	dd7d      	ble.n	8004334 <hf2_data_rx_cb+0x17c>
 8004238:	4848      	ldr	r0, [pc, #288]	; (800435c <hf2_data_rx_cb+0x1a4>)
 800423a:	f7ff ff4b 	bl	80040d4 <assert.part.0>
 800423e:	8838      	ldrh	r0, [r7, #0]
 8004240:	e7d2      	b.n	80041e8 <hf2_data_rx_cb+0x30>
    HF2_Response *resp = &pkt.resp;

    uint32_t cmdId = cmd->command_id;
    int sz = pkt.size;
    resp->tag = cmd->tag;
    resp->status16 = HF2_STATUS_OK;
 8004242:	2100      	movs	r1, #0

    // one has to be careful dealing with these, as they share memory
    HF2_Command *cmd = &pkt.cmd;
    HF2_Response *resp = &pkt.resp;

    uint32_t cmdId = cmd->command_id;
 8004244:	687c      	ldr	r4, [r7, #4]
    int sz = pkt.size;
    resp->tag = cmd->tag;
 8004246:	893a      	ldrh	r2, [r7, #8]
#ifdef TODO
    if (timer[TIMER_BL_WAIT] < 10000)
        timer[TIMER_BL_WAIT] = 10000;
#endif  //  TODO

    switch (cmdId) {
 8004248:	1e63      	subs	r3, r4, #1
    HF2_Response *resp = &pkt.resp;

    uint32_t cmdId = cmd->command_id;
    int sz = pkt.size;
    resp->tag = cmd->tag;
    resp->status16 = HF2_STATUS_OK;
 800424a:	80f9      	strh	r1, [r7, #6]
    HF2_Command *cmd = &pkt.cmd;
    HF2_Response *resp = &pkt.resp;

    uint32_t cmdId = cmd->command_id;
    int sz = pkt.size;
    resp->tag = cmd->tag;
 800424c:	80ba      	strh	r2, [r7, #4]
#ifdef TODO
    if (timer[TIMER_BL_WAIT] < 10000)
        timer[TIMER_BL_WAIT] = 10000;
#endif  //  TODO

    switch (cmdId) {
 800424e:	2b07      	cmp	r3, #7
 8004250:	d864      	bhi.n	800431c <hf2_data_rx_cb+0x164>
 8004252:	e8df f003 	tbb	[pc, r3]
 8004256:	4151      	.short	0x4151
 8004258:	1732393d 	.word	0x1732393d
 800425c:	0463      	.short	0x0463
            flash_write(cmd->write_flash_page.target_addr,
                        (const uint8_t *)cmd->write_flash_page.data, 256);
        }
        return;
    case HF2_CMD_READ_WORDS:
        debug_println("hf2 read"); // debug_flush(); ////
 800425e:	4840      	ldr	r0, [pc, #256]	; (8004360 <hf2_data_rx_cb+0x1a8>)
 8004260:	f7ff f848 	bl	80032f4 <debug_println>
#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8004264:	2d10      	cmp	r5, #16
 8004266:	d002      	beq.n	800426e <hf2_data_rx_cb+0xb6>
 8004268:	483e      	ldr	r0, [pc, #248]	; (8004364 <hf2_data_rx_cb+0x1ac>)
 800426a:	f7ff ff33 	bl	80040d4 <assert.part.0>
        return;
    case HF2_CMD_READ_WORDS:
        debug_println("hf2 read"); // debug_flush(); ////
        checkDataSize(read_words, 0);
        tmp = cmd->read_words.num_words;
        memcpy(resp->data32, (void *)cmd->read_words.target_addr, tmp << 2);
 800426e:	e9d7 1403 	ldrd	r1, r4, [r7, #12]
 8004272:	00a4      	lsls	r4, r4, #2
 8004274:	4622      	mov	r2, r4
 8004276:	483c      	ldr	r0, [pc, #240]	; (8004368 <hf2_data_rx_cb+0x1b0>)
 8004278:	f7fe feda 	bl	8003030 <memcpy>
        send_hf2_response(tmp << 2);
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff ff7b 	bl	8004178 <send_hf2_response>
        return;
 8004282:	e7cc      	b.n	800421e <hf2_data_rx_cb+0x66>
        // userspace can also call hf2_handover() here
        debug_println("hf2 start"); // debug_flush(); ////
        break;
    case HF2_CMD_WRITE_FLASH_PAGE:
        // first send ACK and then start writing, while getting the next packet
        debug_println("hf2 write"); // debug_flush(); ////
 8004284:	4839      	ldr	r0, [pc, #228]	; (800436c <hf2_data_rx_cb+0x1b4>)
 8004286:	f7ff f835 	bl	80032f4 <debug_println>
#define MURMUR3 0

#define checkDataSize(str, add) assert(sz == 8 + sizeof(cmd->str) + (add), "*** ERROR: checkDataSize failed")

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 800428a:	f5b5 7f86 	cmp.w	r5, #268	; 0x10c
 800428e:	d002      	beq.n	8004296 <hf2_data_rx_cb+0xde>
 8004290:	4834      	ldr	r0, [pc, #208]	; (8004364 <hf2_data_rx_cb+0x1ac>)
 8004292:	f7ff ff1f 	bl	80040d4 <assert.part.0>
        break;
    case HF2_CMD_WRITE_FLASH_PAGE:
        // first send ACK and then start writing, while getting the next packet
        debug_println("hf2 write"); // debug_flush(); ////
        checkDataSize(write_flash_page, 256);
        send_hf2_response(0);
 8004296:	2000      	movs	r0, #0
 8004298:	f7ff ff6e 	bl	8004178 <send_hf2_response>
        if (VALID_FLASH_ADDR(cmd->write_flash_page.target_addr, 256)) {
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	4b34      	ldr	r3, [pc, #208]	; (8004370 <hf2_data_rx_cb+0x1b8>)
 80042a0:	4298      	cmp	r0, r3
 80042a2:	d9bc      	bls.n	800421e <hf2_data_rx_cb+0x66>
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <hf2_data_rx_cb+0x1bc>)
 80042a6:	f500 7280 	add.w	r2, r0, #256	; 0x100
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d8b7      	bhi.n	800421e <hf2_data_rx_cb+0x66>
            flash_write(cmd->write_flash_page.target_addr,
 80042ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b2:	4931      	ldr	r1, [pc, #196]	; (8004378 <hf2_data_rx_cb+0x1c0>)
 80042b4:	f000 f9ae 	bl	8004614 <flash_write>
 80042b8:	e7b1      	b.n	800421e <hf2_data_rx_cb+0x66>
#endif  //  TODO
        break;
    case HF2_CMD_START_FLASH:
        // userspace app should reboot into bootloader on this command; we just ignore it
        // userspace can also call hf2_handover() here
        debug_println("hf2 start"); // debug_flush(); ////
 80042ba:	4830      	ldr	r0, [pc, #192]	; (800437c <hf2_data_rx_cb+0x1c4>)
 80042bc:	f7ff f81a 	bl	80032f4 <debug_println>
        debug_print("hf2 unknown cmd "); debug_print_unsigned(cmdId); debug_println(""); // debug_flush(); ////
        resp->status16 = HF2_STATUS_INVALID_CMD;
        break;
    }

    send_hf2_response(0);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7ff ff59 	bl	8004178 <send_hf2_response>
 80042c6:	e7aa      	b.n	800421e <hf2_data_rx_cb+0x66>
        resetIntoApp();
#endif  //  TODO
        break;
    case HF2_CMD_RESET_INTO_BOOTLOADER:
        //  TODO: Flush flash
        debug_println("hf2 rst boot"); // debug_flush(); ////
 80042c8:	482d      	ldr	r0, [pc, #180]	; (8004380 <hf2_data_rx_cb+0x1c8>)
 80042ca:	f7ff f813 	bl	80032f4 <debug_println>
#ifdef TODO
        resetIntoBootloader();
#endif  //  TODO
        break;
 80042ce:	e7f7      	b.n	80042c0 <hf2_data_rx_cb+0x108>
        send_hf2_response(sizeof(resp->bininfo));
        return;

    case HF2_CMD_RESET_INTO_APP:
        //  TODO: Flush flash
        debug_println("hf2 rst app"); // debug_flush(); ////
 80042d0:	482c      	ldr	r0, [pc, #176]	; (8004384 <hf2_data_rx_cb+0x1cc>)
 80042d2:	f7ff f80f 	bl	80032f4 <debug_println>
#ifdef TODO
        resetIntoApp();
#endif  //  TODO
        break;
 80042d6:	e7f3      	b.n	80042c0 <hf2_data_rx_cb+0x108>
        timer[TIMER_BL_WAIT] = 10000;
#endif  //  TODO

    switch (cmdId) {
    case HF2_CMD_INFO:
        debug_println("hf2 info"); // debug_flush(); ////
 80042d8:	482b      	ldr	r0, [pc, #172]	; (8004388 <hf2_data_rx_cb+0x1d0>)
 80042da:	f7ff f80b 	bl	80032f4 <debug_println>
        tmp = strlen(infoUf2File);
 80042de:	482b      	ldr	r0, [pc, #172]	; (800438c <hf2_data_rx_cb+0x1d4>)
 80042e0:	f7fe febe 	bl	8003060 <strlen>
 80042e4:	4604      	mov	r4, r0
        memcpy(pkt.resp.data8, infoUf2File, tmp);
 80042e6:	4602      	mov	r2, r0
 80042e8:	4928      	ldr	r1, [pc, #160]	; (800438c <hf2_data_rx_cb+0x1d4>)
 80042ea:	481f      	ldr	r0, [pc, #124]	; (8004368 <hf2_data_rx_cb+0x1b0>)
 80042ec:	f7fe fea0 	bl	8003030 <memcpy>
        send_hf2_response(tmp);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7ff ff41 	bl	8004178 <send_hf2_response>
        return;
 80042f6:	e792      	b.n	800421e <hf2_data_rx_cb+0x66>

    case HF2_CMD_BININFO:
        debug_println("hf2 bininfo"); // debug_flush(); ////
 80042f8:	4825      	ldr	r0, [pc, #148]	; (8004390 <hf2_data_rx_cb+0x1d8>)
 80042fa:	f7fe fffb 	bl	80032f4 <debug_println>
        resp->bininfo.mode = HF2_MODE_BOOTLOADER;
 80042fe:	2401      	movs	r4, #1
        resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8004300:	f44f 7380 	mov.w	r3, #256	; 0x100
        resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
        resp->bininfo.max_message_size = sizeof(pkt.buf);
 8004304:	f44f 6188 	mov.w	r1, #1088	; 0x440
        resp->bininfo.uf2_family = UF2_FAMILY;
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <hf2_data_rx_cb+0x1dc>)
        send_hf2_response(sizeof(resp->bininfo));
 800430a:	2014      	movs	r0, #20
        return;

    case HF2_CMD_BININFO:
        debug_println("hf2 bininfo"); // debug_flush(); ////
        resp->bininfo.mode = HF2_MODE_BOOTLOADER;
        resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 800430c:	e9c7 4302 	strd	r4, r3, [r7, #8]
        resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
        resp->bininfo.max_message_size = sizeof(pkt.buf);
 8004310:	e9c7 3104 	strd	r3, r1, [r7, #16]
        resp->bininfo.uf2_family = UF2_FAMILY;
 8004314:	61ba      	str	r2, [r7, #24]
        send_hf2_response(sizeof(resp->bininfo));
 8004316:	f7ff ff2f 	bl	8004178 <send_hf2_response>
        return;
 800431a:	e780      	b.n	800421e <hf2_data_rx_cb+0x66>
        send_hf2_response(8);
        return;
#endif
    default:
        // command not understood
        debug_print("hf2 unknown cmd "); debug_print_unsigned(cmdId); debug_println(""); // debug_flush(); ////
 800431c:	481e      	ldr	r0, [pc, #120]	; (8004398 <hf2_data_rx_cb+0x1e0>)
 800431e:	f7fe ffe3 	bl	80032e8 <debug_print>
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff f806 	bl	8003334 <debug_print_unsigned>
 8004328:	4808      	ldr	r0, [pc, #32]	; (800434c <hf2_data_rx_cb+0x194>)
 800432a:	f7fe ffe3 	bl	80032f4 <debug_println>
        resp->status16 = HF2_STATUS_INVALID_CMD;
 800432e:	2301      	movs	r3, #1
 8004330:	80fb      	strh	r3, [r7, #6]
        break;
 8004332:	e7c5      	b.n	80042c0 <hf2_data_rx_cb+0x108>
    uint8_t tag = buf[0];
    // serial packets not allowed when in middle of command packet
    usb_assert(pkt.size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
    int size = tag & HF2_SIZE_MASK;
    usb_assert(pkt.size + size <= (int)sizeof(pkt.buf), bad_packet_message);
    memcpy(pkt.buf + pkt.size, buf + 1, size);
 8004334:	1d38      	adds	r0, r7, #4
 8004336:	4642      	mov	r2, r8
 8004338:	1c71      	adds	r1, r6, #1
 800433a:	4418      	add	r0, r3
 800433c:	f7fe fe78 	bl	8003030 <memcpy>
    pkt.size += size;
    tag &= HF2_FLAG_MASK;
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8004340:	e76d      	b.n	800421e <hf2_data_rx_cb+0x66>
 8004342:	bf00      	nop
 8004344:	20000828 	.word	0x20000828
 8004348:	08004eec 	.word	0x08004eec
 800434c:	080046f8 	.word	0x080046f8
 8004350:	20000ec0 	.word	0x20000ec0
 8004354:	20000ec4 	.word	0x20000ec4
 8004358:	20000829 	.word	0x20000829
 800435c:	08004ee0 	.word	0x08004ee0
 8004360:	08004f64 	.word	0x08004f64
 8004364:	08004f44 	.word	0x08004f44
 8004368:	20000ec8 	.word	0x20000ec8
 800436c:	08004f38 	.word	0x08004f38
 8004370:	08003fff 	.word	0x08003fff
 8004374:	08010000 	.word	0x08010000
 8004378:	20000ed0 	.word	0x20000ed0
 800437c:	08004f2c 	.word	0x08004f2c
 8004380:	08004f1c 	.word	0x08004f1c
 8004384:	08004f10 	.word	0x08004f10
 8004388:	08004ef8 	.word	0x08004ef8
 800438c:	08005028 	.word	0x08005028
 8004390:	08004f04 	.word	0x08004f04
 8004394:	5ee21072 	.word	0x5ee21072
 8004398:	08004f70 	.word	0x08004f70

0800439c <hf2_setup>:
    (void)wValue;
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
}

void hf2_setup(usbd_device *usbd_dev) {
 800439c:	b508      	push	{r3, lr}
    _usbd_dev = usbd_dev;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <hf2_setup+0x20>)
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 80043a0:	4907      	ldr	r1, [pc, #28]	; (80043c0 <hf2_setup+0x24>)
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
}

void hf2_setup(usbd_device *usbd_dev) {
    _usbd_dev = usbd_dev;
 80043a2:	6018      	str	r0, [r3, #0]
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 80043a4:	f7ff fa16 	bl	80037d4 <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 80043a8:	2800      	cmp	r0, #0
 80043aa:	db00      	blt.n	80043ae <hf2_setup+0x12>
}
 80043ac:	bd08      	pop	{r3, pc}
}

void hf2_setup(usbd_device *usbd_dev) {
    _usbd_dev = usbd_dev;
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 80043ae:	4805      	ldr	r0, [pc, #20]	; (80043c4 <hf2_setup+0x28>)
 80043b0:	f7fe ffa0 	bl	80032f4 <debug_println>
}
 80043b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void hf2_setup(usbd_device *usbd_dev) {
    _usbd_dev = usbd_dev;
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); debug_flush(); }
 80043b8:	f7fe bf28 	b.w	800320c <debug_flush>
 80043bc:	20000824 	.word	0x20000824
 80043c0:	08004099 	.word	0x08004099
 80043c4:	08004f90 	.word	0x08004f90

080043c8 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 80043c8:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 80043ca:	22ff      	movs	r2, #255	; 0xff
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <usb21_set_config+0x20>)
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	f7ff fa1e 	bl	8003810 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80043d4:	2800      	cmp	r0, #0
 80043d6:	db00      	blt.n	80043da <usb21_set_config+0x12>
}
 80043d8:	bd08      	pop	{r3, pc}
	int status = aggregate_register_callback(
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80043da:	4804      	ldr	r0, [pc, #16]	; (80043ec <usb21_set_config+0x24>)
 80043dc:	f7fe ff8a 	bl	80032f4 <debug_println>
}
 80043e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int status = aggregate_register_callback(
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80043e4:	f7fe bf12 	b.w	800320c <debug_flush>
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004fb0 	.word	0x08004fb0

080043f0 <usb21_standard_get_descriptor>:
											usbd_control_complete_callback* complete) {
	//  Handle a BOS request: 
	//  >> typ 80, req 06, val 0f00, idx 0000, len 0005, GET_DES_BOS t 0f i 00
	(void)complete;
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
 80043f0:	8848      	ldrh	r0, [r1, #2]
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80043f2:	0a00      	lsrs	r0, r0, #8
 80043f4:	280f      	cmp	r0, #15
 80043f6:	d10f      	bne.n	8004418 <usb21_standard_get_descriptor+0x28>
static const struct usb_bos_descriptor* usb21_bos;

static int usb21_standard_get_descriptor(usbd_device* usbd_dev,
											struct usb_setup_data *req,
											uint8_t **buf, uint16_t *len,
											usbd_control_complete_callback* complete) {
 80043f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)complete;
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
	if (!usb21_bos) {
 80043fc:	4f3a      	ldr	r7, [pc, #232]	; (80044e8 <usb21_standard_get_descriptor+0xf8>)
static const struct usb_bos_descriptor* usb21_bos;

static int usb21_standard_get_descriptor(usbd_device* usbd_dev,
											struct usb_setup_data *req,
											uint8_t **buf, uint16_t *len,
											usbd_control_complete_callback* complete) {
 80043fe:	b085      	sub	sp, #20
	(void)complete;
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
	if (!usb21_bos) {
 8004400:	683d      	ldr	r5, [r7, #0]
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	4616      	mov	r6, r2
 8004406:	2d00      	cmp	r5, #0
 8004408:	d05f      	beq.n	80044ca <usb21_standard_get_descriptor+0xda>
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 800440a:	784b      	ldrb	r3, [r1, #1]
 800440c:	2b06      	cmp	r3, #6
 800440e:	d005      	beq.n	800441c <usb21_standard_get_descriptor+0x2c>
	//  >> typ 80, req 06, val 0f00, idx 0000, len 0005, GET_DES_BOS t 0f i 00
	(void)complete;
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8004410:	2002      	movs	r0, #2
		for (i = 0; i < *len; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}
 8004412:	b005      	add	sp, #20
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	//  >> typ 80, req 06, val 0f00, idx 0000, len 0005, GET_DES_BOS t 0f i 00
	(void)complete;
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8004418:	2002      	movs	r0, #2
		for (i = 0; i < *len; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}
 800441a:	4770      	bx	lr
	if (!usb21_bos) {
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
 800441c:	4833      	ldr	r0, [pc, #204]	; (80044ec <usb21_standard_get_descriptor+0xfc>)
 800441e:	f7ff fa55 	bl	80038cc <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8004422:	9b01      	ldr	r3, [sp, #4]
 8004424:	f8d7 b000 	ldr.w	fp, [r7]
 8004428:	881a      	ldrh	r2, [r3, #0]
static uint16_t build_bos_descriptor(const struct usb_bos_descriptor *bos,
									 uint8_t *buf, uint16_t len) {
	uint8_t *tmpbuf = buf;
	uint16_t i, bytes_to_copy, total = 0, totallen = 0;

	bytes_to_copy = MIN(len, bos->bLength);
 800442a:	f89b 3000 	ldrb.w	r3, [fp]
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800442e:	6831      	ldr	r1, [r6, #0]
static uint16_t build_bos_descriptor(const struct usb_bos_descriptor *bos,
									 uint8_t *buf, uint16_t len) {
	uint8_t *tmpbuf = buf;
	uint16_t i, bytes_to_copy, total = 0, totallen = 0;

	bytes_to_copy = MIN(len, bos->bLength);
 8004430:	b29d      	uxth	r5, r3
 8004432:	42aa      	cmp	r2, r5
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8004434:	9203      	str	r2, [sp, #12]
 8004436:	9102      	str	r1, [sp, #8]
static uint16_t build_bos_descriptor(const struct usb_bos_descriptor *bos,
									 uint8_t *buf, uint16_t len) {
	uint8_t *tmpbuf = buf;
	uint16_t i, bytes_to_copy, total = 0, totallen = 0;

	bytes_to_copy = MIN(len, bos->bLength);
 8004438:	d24e      	bcs.n	80044d8 <usb21_standard_get_descriptor+0xe8>
 800443a:	4614      	mov	r4, r2
 800443c:	4615      	mov	r5, r2
 800443e:	f04f 0800 	mov.w	r8, #0
	memcpy(buf, bos, bytes_to_copy);
 8004442:	9e02      	ldr	r6, [sp, #8]
 8004444:	4622      	mov	r2, r4
 8004446:	4630      	mov	r0, r6
 8004448:	4659      	mov	r1, fp
 800444a:	f7fe fdf1 	bl	8003030 <memcpy>
	buf += bytes_to_copy;
 800444e:	4633      	mov	r3, r6
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004450:	f89b 2004 	ldrb.w	r2, [fp, #4]
	uint8_t *tmpbuf = buf;
	uint16_t i, bytes_to_copy, total = 0, totallen = 0;

	bytes_to_copy = MIN(len, bos->bLength);
	memcpy(buf, bos, bytes_to_copy);
	buf += bytes_to_copy;
 8004454:	4423      	add	r3, r4
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;
 8004456:	f89b 6000 	ldrb.w	r6, [fp]

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800445a:	b34a      	cbz	r2, 80044b0 <usb21_standard_get_descriptor+0xc0>
 800445c:	f04f 0900 	mov.w	r9, #0
 8004460:	e018      	b.n	8004494 <usb21_standard_get_descriptor+0xa4>
		/* Copy device capability descriptor. */
		const struct usb_device_capability_descriptor *cap =
			bos->capabilities[i];
		bytes_to_copy = MIN(len, cap->bLength);
 8004462:	4644      	mov	r4, r8
 8004464:	4647      	mov	r7, r8
 8004466:	f04f 0800 	mov.w	r8, #0
		memcpy(buf, cap, bytes_to_copy);
 800446a:	4622      	mov	r2, r4
 800446c:	4651      	mov	r1, sl
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fdde 	bl	8003030 <memcpy>
 8004474:	4603      	mov	r3, r0
		buf += bytes_to_copy;
		len -= bytes_to_copy;
		total += bytes_to_copy;
		totallen += cap->bLength;
 8004476:	f89a 2000 	ldrb.w	r2, [sl]
 800447a:	f109 0901 	add.w	r9, r9, #1
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800447e:	f89b 1004 	ldrb.w	r1, [fp, #4]
		bytes_to_copy = MIN(len, cap->bLength);
		memcpy(buf, cap, bytes_to_copy);
		buf += bytes_to_copy;
		len -= bytes_to_copy;
		total += bytes_to_copy;
		totallen += cap->bLength;
 8004482:	4416      	add	r6, r2
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004484:	fa1f f289 	uxth.w	r2, r9
			bos->capabilities[i];
		bytes_to_copy = MIN(len, cap->bLength);
		memcpy(buf, cap, bytes_to_copy);
		buf += bytes_to_copy;
		len -= bytes_to_copy;
		total += bytes_to_copy;
 8004488:	442f      	add	r7, r5
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 800448a:	4291      	cmp	r1, r2
		bytes_to_copy = MIN(len, cap->bLength);
		memcpy(buf, cap, bytes_to_copy);
		buf += bytes_to_copy;
		len -= bytes_to_copy;
		total += bytes_to_copy;
		totallen += cap->bLength;
 800448c:	b2b6      	uxth	r6, r6
			bos->capabilities[i];
		bytes_to_copy = MIN(len, cap->bLength);
		memcpy(buf, cap, bytes_to_copy);
		buf += bytes_to_copy;
		len -= bytes_to_copy;
		total += bytes_to_copy;
 800448e:	b2bd      	uxth	r5, r7
		/* Copy device capability descriptor. */
		const struct usb_device_capability_descriptor *cap =
			bos->capabilities[i];
		bytes_to_copy = MIN(len, cap->bLength);
		memcpy(buf, cap, bytes_to_copy);
		buf += bytes_to_copy;
 8004490:	4423      	add	r3, r4
	len -= bytes_to_copy;
	total += bytes_to_copy;
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004492:	d90d      	bls.n	80044b0 <usb21_standard_get_descriptor+0xc0>
		/* Copy device capability descriptor. */
		const struct usb_device_capability_descriptor *cap =
			bos->capabilities[i];
 8004494:	f8db 2005 	ldr.w	r2, [fp, #5]
	totallen += bos->bLength;

	/* For each device capability */
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
		/* Copy device capability descriptor. */
		const struct usb_device_capability_descriptor *cap =
 8004498:	f852 a029 	ldr.w	sl, [r2, r9, lsl #2]
			bos->capabilities[i];
		bytes_to_copy = MIN(len, cap->bLength);
 800449c:	f89a 4000 	ldrb.w	r4, [sl]
 80044a0:	b2a7      	uxth	r7, r4
 80044a2:	45b8      	cmp	r8, r7
 80044a4:	d3dd      	bcc.n	8004462 <usb21_standard_get_descriptor+0x72>
 80044a6:	eba8 0807 	sub.w	r8, r8, r7
 80044aa:	fa1f f888 	uxth.w	r8, r8
 80044ae:	e7dc      	b.n	800446a <usb21_standard_get_descriptor+0x7a>
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80044b0:	9b03      	ldr	r3, [sp, #12]
#ifdef NOTUSED
		uint8_t *b = *buf; int i;
		debug_print_unsigned(*len); debug_print(" / ");
		for (i = 0; i < *len; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
		return USBD_REQ_HANDLED;
 80044b2:	2001      	movs	r0, #1
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	bf28      	it	cs
 80044b8:	462b      	movcs	r3, r5
 80044ba:	461d      	mov	r5, r3
		len -= bytes_to_copy;
		total += bytes_to_copy;
		totallen += cap->bLength;
	}
	/* Fill in wTotalLength. */
	*(uint16_t *)(tmpbuf + 2) = totallen;
 80044bc:	9b02      	ldr	r3, [sp, #8]
 80044be:	805e      	strh	r6, [r3, #2]
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
		return USBD_REQ_NOTSUPP;
	}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
		dump_usb_request("bos", req); // debug_flush(); ////
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80044c0:	9b01      	ldr	r3, [sp, #4]
 80044c2:	801d      	strh	r5, [r3, #0]
		for (i = 0; i < *len; i++) { debug_printhex(b[i]); debug_print(" "); } debug_println(""); debug_flush(); ////
#endif  //  NOTUSED
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}
 80044c4:	b005      	add	sp, #20
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)usbd_dev;
	int descr_type = req->wValue >> 8;
	//  If not BOS request, hand off to next interface.
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
	if (!usb21_bos) {
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 80044ca:	4809      	ldr	r0, [pc, #36]	; (80044f0 <usb21_standard_get_descriptor+0x100>)
 80044cc:	f7fe ff12 	bl	80032f4 <debug_println>
 80044d0:	f7fe fe9c 	bl	800320c <debug_flush>
 80044d4:	4628      	mov	r0, r5
 80044d6:	e79c      	b.n	8004412 <usb21_standard_get_descriptor+0x22>
static uint16_t build_bos_descriptor(const struct usb_bos_descriptor *bos,
									 uint8_t *buf, uint16_t len) {
	uint8_t *tmpbuf = buf;
	uint16_t i, bytes_to_copy, total = 0, totallen = 0;

	bytes_to_copy = MIN(len, bos->bLength);
 80044d8:	461c      	mov	r4, r3
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	eba3 0805 	sub.w	r8, r3, r5
 80044e0:	fa1f f888 	uxth.w	r8, r8
 80044e4:	e7ad      	b.n	8004442 <usb21_standard_get_descriptor+0x52>
 80044e6:	bf00      	nop
 80044e8:	200008a8 	.word	0x200008a8
 80044ec:	08005004 	.word	0x08005004
 80044f0:	08004fe4 	.word	0x08004fe4

080044f4 <usb21_setup>:
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
}

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <usb21_setup+0x2c>)
 80044fa:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 80044fc:	2100      	movs	r1, #0
 80044fe:	f7ff ff63 	bl	80043c8 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 8004502:	4620      	mov	r0, r4
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <usb21_setup+0x30>)
 8004506:	f7ff f965 	bl	80037d4 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 800450a:	2800      	cmp	r0, #0
 800450c:	db00      	blt.n	8004510 <usb21_setup+0x1c>
}
 800450e:	bd10      	pop	{r4, pc}
	usb21_bos = binary_object_store;

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8004510:	4805      	ldr	r0, [pc, #20]	; (8004528 <usb21_setup+0x34>)
 8004512:	f7fe feef 	bl	80032f4 <debug_println>
}
 8004516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb21_bos = binary_object_store;

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 800451a:	f7fe be77 	b.w	800320c <debug_flush>
 800451e:	bf00      	nop
 8004520:	200008a8 	.word	0x200008a8
 8004524:	080043c9 	.word	0x080043c9
 8004528:	08004fcc 	.word	0x08004fcc

0800452c <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4605      	mov	r5, r0
 8004530:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 8004532:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8004536:	f7fc f85f 	bl	80005f8 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 800453a:	f240 309b 	movw	r0, #923	; 0x39b
 800453e:	f7fc f85b 	bl	80005f8 <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 8004542:	f7fc f849 	bl	80005d8 <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8004546:	4a06      	ldr	r2, [pc, #24]	; (8004560 <backup_write+0x34>)
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8004548:	006b      	lsls	r3, r5, #1
void backup_write(enum BackupRegister reg, uint32_t value) {
    rcc_periph_clock_enable(RCC_PWR);
    rcc_periph_clock_enable(RCC_BKP);

    pwr_disable_backup_domain_write_protect();
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 800454a:	b2a1      	uxth	r1, r4
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 800454c:	3301      	adds	r3, #1
 800454e:	0c24      	lsrs	r4, r4, #16
void backup_write(enum BackupRegister reg, uint32_t value) {
    rcc_periph_clock_enable(RCC_PWR);
    rcc_periph_clock_enable(RCC_BKP);

    pwr_disable_backup_domain_write_protect();
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8004550:	f822 1035 	strh.w	r1, [r2, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 8004554:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    pwr_enable_backup_domain_write_protect();
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 8004558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rcc_periph_clock_enable(RCC_BKP);

    pwr_disable_backup_domain_write_protect();
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
    pwr_enable_backup_domain_write_protect();
 800455c:	f7fc b844 	b.w	80005e8 <pwr_enable_backup_domain_write_protect>
 8004560:	40006c04 	.word	0x40006c04

08004564 <backup_read>:
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <backup_read+0x14>)
 8004566:	0043      	lsls	r3, r0, #1
 8004568:	3301      	adds	r3, #1
 800456a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 800456e:	f832 0030 	ldrh.w	r0, [r2, r0, lsl #3]
    return value;
}
 8004572:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004576:	4770      	bx	lr
 8004578:	40006c04 	.word	0x40006c04

0800457c <flushFlash>:
static bool hadWrite = false;
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

static void flushFlash(void) {
 800457c:	b510      	push	{r4, lr}
    lastFlush = ms;
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <flushFlash+0x78>)
    if (flashAddr == NO_CACHE)
 8004580:	4c1d      	ldr	r4, [pc, #116]	; (80045f8 <flushFlash+0x7c>)
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

static void flushFlash(void) {
    lastFlush = ms;
 8004582:	6819      	ldr	r1, [r3, #0]
    if (flashAddr == NO_CACHE)
 8004584:	6823      	ldr	r3, [r4, #0]
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

static void flushFlash(void) {
    lastFlush = ms;
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <flushFlash+0x80>)
    if (flashAddr == NO_CACHE)
 8004588:	3301      	adds	r3, #1
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

static void flushFlash(void) {
    lastFlush = ms;
 800458a:	6011      	str	r1, [r2, #0]
    if (flashAddr == NO_CACHE)
 800458c:	d017      	beq.n	80045be <flushFlash+0x42>
        return;

    if (firstFlush) {
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <flushFlash+0x84>)
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	b9aa      	cbnz	r2, 80045c0 <flushFlash+0x44>
        firstFlush = false;

        // disable bootloader or something
    }
    debug_print("flushFlash "); debug_print_unsigned((size_t) flashAddr); debug_println(""); debug_flush();
 8004594:	481b      	ldr	r0, [pc, #108]	; (8004604 <flushFlash+0x88>)
 8004596:	f7fe fea7 	bl	80032e8 <debug_print>
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	f7fe feca 	bl	8003334 <debug_print_unsigned>
 80045a0:	4819      	ldr	r0, [pc, #100]	; (8004608 <flushFlash+0x8c>)
 80045a2:	f7fe fea7 	bl	80032f4 <debug_println>
 80045a6:	f7fe fe31 	bl	800320c <debug_flush>
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 80045aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	4816      	ldr	r0, [pc, #88]	; (800460c <flushFlash+0x90>)
 80045b2:	f7fe fd5d 	bl	8003070 <memcmp>
 80045b6:	b930      	cbnz	r0, 80045c6 <flushFlash+0x4a>
        bool ok = target_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        target_flash_lock();
        (void)ok;
    }

    flashAddr = NO_CACHE;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045bc:	6023      	str	r3, [r4, #0]
}
 80045be:	bd10      	pop	{r4, pc}
    lastFlush = ms;
    if (flashAddr == NO_CACHE)
        return;

    if (firstFlush) {
        firstFlush = false;
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e7e6      	b.n	8004594 <flushFlash+0x18>
        // disable bootloader or something
    }
    debug_print("flushFlash "); debug_print_unsigned((size_t) flashAddr); debug_println(""); debug_flush();
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
        debug_print("flushFlash write "); debug_print_unsigned((size_t) flashAddr); debug_println(""); debug_flush();
 80045c6:	4812      	ldr	r0, [pc, #72]	; (8004610 <flushFlash+0x94>)
 80045c8:	f7fe fe8e 	bl	80032e8 <debug_print>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	f7fe feb1 	bl	8003334 <debug_print_unsigned>
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <flushFlash+0x8c>)
 80045d4:	f7fe fe8e 	bl	80032f4 <debug_println>
 80045d8:	f7fe fe18 	bl	800320c <debug_flush>
        DBG("Write flush at %x", flashAddr);

        target_flash_unlock();
 80045dc:	f7ff fc32 	bl	8003e44 <target_flash_unlock>
        bool ok = target_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 80045e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e4:	4909      	ldr	r1, [pc, #36]	; (800460c <flushFlash+0x90>)
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	f7ff fc30 	bl	8003e4c <target_flash_program_array>
        target_flash_lock();
 80045ec:	f7ff fc2c 	bl	8003e48 <target_flash_lock>
 80045f0:	e7e2      	b.n	80045b8 <flushFlash+0x3c>
 80045f2:	bf00      	nop
 80045f4:	20000cb0 	.word	0x20000cb0
 80045f8:	2000052c 	.word	0x2000052c
 80045fc:	20000cac 	.word	0x20000cac
 8004600:	20000530 	.word	0x20000530
 8004604:	08005008 	.word	0x08005008
 8004608:	080046f8 	.word	0x080046f8
 800460c:	200008ac 	.word	0x200008ac
 8004610:	08005014 	.word	0x08005014

08004614 <flash_write>:
    }

    flashAddr = NO_CACHE;
}

void flash_write(uint32_t dst, const uint8_t *src, int len) {
 8004614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);

    hadWrite = true;

    if (newAddr != flashAddr) {
 8004618:	4e0e      	ldr	r6, [pc, #56]	; (8004654 <flash_write+0x40>)

    flashAddr = NO_CACHE;
}

void flash_write(uint32_t dst, const uint8_t *src, int len) {
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 800461a:	f420 757f 	bic.w	r5, r0, #1020	; 0x3fc

    hadWrite = true;

    if (newAddr != flashAddr) {
 800461e:	6833      	ldr	r3, [r6, #0]

    flashAddr = NO_CACHE;
}

void flash_write(uint32_t dst, const uint8_t *src, int len) {
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 8004620:	f025 0503 	bic.w	r5, r5, #3

    hadWrite = true;

    if (newAddr != flashAddr) {
 8004624:	42ab      	cmp	r3, r5
    }

    flashAddr = NO_CACHE;
}

void flash_write(uint32_t dst, const uint8_t *src, int len) {
 8004626:	4604      	mov	r4, r0
 8004628:	460f      	mov	r7, r1
 800462a:	4690      	mov	r8, r2
    uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);

    hadWrite = true;

    if (newAddr != flashAddr) {
 800462c:	d008      	beq.n	8004640 <flash_write+0x2c>
        flushFlash();
 800462e:	f7ff ffa5 	bl	800457c <flushFlash>
        flashAddr = newAddr;
        memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);
 8004632:	4629      	mov	r1, r5
 8004634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004638:	4807      	ldr	r0, [pc, #28]	; (8004658 <flash_write+0x44>)

    hadWrite = true;

    if (newAddr != flashAddr) {
        flushFlash();
        flashAddr = newAddr;
 800463a:	6035      	str	r5, [r6, #0]
        memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);
 800463c:	f7fe fcf8 	bl	8003030 <memcpy>
    }
    memcpy(flashBuf + (dst & (FLASH_PAGE_SIZE - 1)), src, len);
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <flash_write+0x44>)
 8004642:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004646:	4642      	mov	r2, r8
 8004648:	4639      	mov	r1, r7
 800464a:	4420      	add	r0, r4
}
 800464c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (newAddr != flashAddr) {
        flushFlash();
        flashAddr = newAddr;
        memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);
    }
    memcpy(flashBuf + (dst & (FLASH_PAGE_SIZE - 1)), src, len);
 8004650:	f7fe bcee 	b.w	8003030 <memcpy>
 8004654:	2000052c 	.word	0x2000052c
 8004658:	200008ac 	.word	0x200008ac
 800465c:	2d2d2d2d 	.word	0x2d2d2d2d
 8004660:	67726174 	.word	0x67726174
 8004664:	675f7465 	.word	0x675f7465
 8004668:	735f7465 	.word	0x735f7465
 800466c:	61697265 	.word	0x61697265
 8004670:	0000006c 	.word	0x0000006c
 8004674:	2a2a2a2a 	.word	0x2a2a2a2a
 8004678:	7261742a 	.word	0x7261742a
 800467c:	5f746567 	.word	0x5f746567
 8004680:	696e6170 	.word	0x696e6170
 8004684:	00002063 	.word	0x00002063
 8004688:	2d2d2d2d 	.word	0x2d2d2d2d
 800468c:	67726174 	.word	0x67726174
 8004690:	725f7465 	.word	0x725f7465
 8004694:	74657365 	.word	0x74657365
 8004698:	00000000 	.word	0x00000000
 800469c:	2d2d2d2d 	.word	0x2d2d2d2d
 80046a0:	67726174 	.word	0x67726174
 80046a4:	735f7465 	.word	0x735f7465
 80046a8:	5f646565 	.word	0x5f646565
 80046ac:	646e6172 	.word	0x646e6172
 80046b0:	00006d6f 	.word	0x00006d6f
 80046b4:	2d2d2d2d 	.word	0x2d2d2d2d
 80046b8:	67726174 	.word	0x67726174
 80046bc:	775f7465 	.word	0x775f7465
 80046c0:	00746961 	.word	0x00746961
 80046c4:	2d2d2d2d 	.word	0x2d2d2d2d
 80046c8:	67726174 	.word	0x67726174
 80046cc:	775f7465 	.word	0x775f7465
 80046d0:	5f746961 	.word	0x5f746961
 80046d4:	00007375 	.word	0x00007375
 80046d8:	70616568 	.word	0x70616568
 80046dc:	61747320 	.word	0x61747320
 80046e0:	203a7472 	.word	0x203a7472
 80046e4:	00000000 	.word	0x00000000
 80046e8:	6e65202c 	.word	0x6e65202c
 80046ec:	00203a64 	.word	0x00203a64
 80046f0:	6973202c 	.word	0x6973202c
 80046f4:	203a657a 	.word	0x203a657a
 80046f8:	00000000 	.word	0x00000000
 80046fc:	2c424b20 	.word	0x2c424b20
 8004700:	61747320 	.word	0x61747320
 8004704:	75206b63 	.word	0x75206b63
 8004708:	3a646573 	.word	0x3a646573
 800470c:	00000020 	.word	0x00000020
 8004710:	00424b20 	.word	0x00424b20
 8004714:	33323130 	.word	0x33323130
 8004718:	37363534 	.word	0x37363534
 800471c:	42413938 	.word	0x42413938
 8004720:	46454443 	.word	0x46454443
 8004724:	00000000 	.word	0x00000000

08004728 <st_usbfs_v1_usb_driver>:
 8004728:	08000a31 080014a1 080014f5 0800160d     1...............
 8004738:	08001655 08001759 08001719 080017a9     U...Y...........
 8004748:	08001831 080018e5 00000000 00000000     1...............
 8004758:	00000000                                ....

0800475c <_ctype_>:
 800475c:	20202000 20202020 28282020 20282828     .         ((((( 
 800476c:	20202020 20202020 20202020 20202020                     
 800477c:	10108820 10101010 10101010 10101010      ...............
 800478c:	04040410 04040404 10040404 10101010     ................
 800479c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80047ac:	01010101 01010101 01010101 10101010     ................
 80047bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80047cc:	02020202 02020202 02020202 10101010     ................
 80047dc:	00000020 00000000 00000000 00000000      ...............
	...
 8004860:	00000030 0000002d 65764f28 6f6c6672     0...-...(Overflo
 8004870:	00002977 0000000a 2d2d2d2d 74616c70     w)......----plat
 8004880:	6d726f66 7465735f 00007075 74616c70     form_setup..plat
 8004890:	6d726f66 6174735f 745f7472 72656d69     form_start_timer
 80048a0:	00000000 20637472 6b617761 2e2e2e65     ....rtc awake...
 80048b0:	00000000 20637472 6b617761 6b6f2065     ....rtc awake ok
 80048c0:	00000000 2d2d2d2d 746f6f62 64616f6c     ....----bootload
 80048d0:	00007265 67726174 675f7465 665f7465     er..target_get_f
 80048e0:	6563726f 6f6f625f 616f6c74 00726564     orce_bootloader.
 80048f0:	67726174 675f7465 735f7465 61697265     target_get_seria
 8004900:	756e5f6c 7265626d 00000000 5f627375     l_number....usb_
 8004910:	5f746573 69726573 6e5f6c61 65626d75     set_serial_numbe
 8004920:	00000072 5f627375 75746573 00000070     r...usb_setup...
 8004930:	64627375 6c6f7020 676e696c 002e2e2e     usbd polling....
 8004940:	00203e3e 202a2a2a 4f525245 54203a52     >> .*** ERROR: T
 8004950:	6d206f6f 20796e61 746e6f63 206c6f72     oo many control 
 8004960:	6c6c6163 6b636162 00000073 202a2a2a     callbacks...*** 
 8004970:	4f525245 54203a52 6d206f6f 20796e61     ERROR: Too many 
 8004980:	666e6f63 63206769 626c6c61 736b6361     config callbacks
 8004990:	00000000                                ....

08004994 <bos_descriptor>:
 8004994:	00000f05 00042402 00000020              .....$.. ...

080049a0 <cdc_iface_assoc>:
 80049a0:	02010b08 06010202                       ........

080049a8 <cdcacm_functional_descriptors>:
 80049a8:	10002405 01240501 24040200 24050002     .$....$....$...$
 80049b8:	00020106                                ....

080049bc <comm_endp>:
 80049bc:	03840507 00ff0010 00000000 00000000     ................

080049cc <comm_iface>:
 80049cc:	00010409 01020201 0049bc07 0049a808     ..........I...I.
 80049dc:	00001308 00000000                       ........

080049e4 <config>:
 80049e4:	00000209 80000103 004b0cfa 00000008     ..........K.....

080049f4 <data_endp>:
 80049f4:	02030507 00010040 00000000 07000000     ....@...........
 8004a04:	40028305 00000100 00000000 00000000     ...@............

08004a14 <data_iface>:
 8004a14:	00020409 00000a02 0049f408 00000008     ..........I.....
	...

08004a2c <dev>:
 8004a2c:	02100112 400102ef db421209 02010221     .......@..B.!...
 8004a3c:	00000103 00202f20 70797420 00000020     .... / . typ ...
 8004a4c:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 8004a5c:	6469202c 00002078 656c202c 0000206e     , idx .., len ..
 8004a6c:	4547202c 45445f54 00000053 5645445f     , GET_DES..._DEV
 8004a7c:	00000000 4746435f 00000000 5254535f     ...._CFG...._STR
 8004a8c:	00000000 464e495f 00000000 504e455f     ...._INF...._ENP
 8004a9c:	00000000 534f425f 00000000 4553202c     ...._BOS...., SE
 8004aac:	44415f54 20202052 00000020 4553202c     T_ADR    ..., SE
 8004abc:	46435f54 20202047 00000020 0000002c     T_CFG    ...,...
 8004acc:	00207420 00206920                        t . i .

08004ad4 <hf2_endp>:
 8004ad4:	02020507 00000040 00000000 07000000     ....@...........
 8004ae4:	40028205 00000000 00000000 00000000     ...@............

08004af4 <hf2_iface>:
 8004af4:	00000409 012aff02 004ad409 00000008     ......*...J.....
	...

08004b0c <interfaces>:
 8004b0c:	00000000 00000001 00000000 08004af4     .............J..
 8004b1c:	00000000 00000001 080049a0 080049cc     .........I...I..
 8004b2c:	00000000 00000001 00000000 08004a14     .............J..
 8004b3c:	5f746573 72676761 74616765 61635f65     set_aggregate_ca
 8004b4c:	61626c6c 00006b63 202a2a2a 4f525245     llback..*** ERRO
 8004b5c:	73203a52 615f7465 65726767 65746167     R: set_aggregate
 8004b6c:	6c61635f 6361626c 6166206b 64656c69     _callback failed
 8004b7c:	00000000 61766544 6372616e 00007968     ....Devanarchy..
 8004b8c:	42504144 20746f6f 20554644 746f6f42     DAPBoot DFU Boot
 8004b9c:	64616f6c 00007265 42504144 20746f6f     loader..DAPBoot 
 8004bac:	00554644 65756c42 6c695020 534d206c     DFU.Blue Pill MS
 8004bbc:	00000043 65756c42 6c695020 6553206c     C...Blue Pill Se
 8004bcc:	6c616972 726f5020 00000074 65756c42     rial Port...Blue
 8004bdc:	6c695020 4f43206c 00004d4d 65756c42      Pill COMM..Blue
 8004bec:	6c695020 4144206c 00004154 65756c42      Pill DATA..Blue
 8004bfc:	6c695020 4648206c 00000032 75736976      Pill HF2...visu
 8004c0c:	6c626c61 69706575 672e6c6c 75687469     albluepill.githu
 8004c1c:	6f692e62 00000000 202a2a2a 5f627375     b.io....*** usb_
 8004c2c:	75746573 61662070 64656c69 00000000     setup failed....
 8004c3c:	202a2a2a 75626577 6e206273 7573746f     *** webusb notsu
 8004c4c:	69207070 7865646e 00000020 75626577     pp index ...webu
 8004c5c:	00006c72 202a2a2a 75626577 6e206273     rl..*** webusb n
 8004c6c:	7573746f 77207070 65646e49 00002078     otsupp wIndex ..

08004c7c <webusb_platform_capability_descriptor>:
 8004c7c:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 8004c8c:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8004c9c:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 8004cac:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8004cbc:	735f6273 70757465 69616620 0064656c     sb_setup failed.

08004ccc <guid>:
 8004ccc:	00000092 00050100 00880001 00070000     ................
 8004cdc:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 8004cec:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 8004cfc:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8004d0c:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8004d1c:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8004d2c:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 8004d3c:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 8004d4c:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 8004d5c:	00000000                                ....

08004d60 <microsoft_platform_capability_descriptor>:
 8004d60:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8004d70:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8004d80:	00007365 696e6977 00000064 706e6977     es..winid...winp
 8004d90:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8004da0:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 8004db0:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 8004dc0:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 8004dd0:	0064656c                                led.

08004dd4 <winusb_string_descriptor>:
 8004dd4:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 8004de4:	00000021 67726174 665f7465 6873616c     !...target_flash
 8004df4:	6f72705f 6d617267 7272615f 64207961     _program_array d
 8004e04:	20747365 00000000 6164202c 00206174     est ...., data .
 8004e14:	6168202c 775f666c 5f64726f 6e756f63     , half_word_coun
 8004e24:	00002074 6c66202c 5f687361 20646e65     t .., flash_end 
 8004e34:	00000000 74736564 203d3e20 73616c66     ....dest >= flas
 8004e44:	6e655f68 00000064 7365642a 3d212074     h_end...*dest !=
 8004e54:	61642a20 00006174 202a2a2a 5f636463      *data..*** cdc_
 8004e64:	75746573 61662070 64656c69 00000000     setup failed....
 8004e74:	6d6d6f63 00000000 202a2a2a 61636463     comm....*** cdca
 8004e84:	635f6d63 72746e6f 6e206c6f 7573746f     cm_control notsu
 8004e94:	6c207070 5f656e69 69646f63 0020676e     pp line_coding .
 8004ea4:	0000005b 0000005d 202a2a2a 61636463     [...]...*** cdca
 8004eb4:	735f6d63 635f7465 69666e6f 61662067     cm_set_config fa
 8004ec4:	64656c69 00000000                       iled....

08004ecc <line_coding>:
 8004ecc:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 8004edc:	00203a52                                R: .

08004ee0 <bad_packet_message>:
 8004ee0:	20646162 6b636170 00007465 20326668     bad packet..hf2 
 8004ef0:	74203c3c 00206761 20326668 6f666e69     << tag .hf2 info
 8004f00:	00000000 20326668 696e6962 006f666e     ....hf2 bininfo.
 8004f10:	20326668 20747372 00707061 20326668     hf2 rst app.hf2 
 8004f20:	20747372 746f6f62 00000000 20326668     rst boot....hf2 
 8004f30:	72617473 00000074 20326668 74697277     start...hf2 writ
 8004f40:	00000065 202a2a2a 4f525245 63203a52     e...*** ERROR: c
 8004f50:	6b636568 61746144 657a6953 69616620     heckDataSize fai
 8004f60:	0064656c 20326668 64616572 00000000     led.hf2 read....
 8004f70:	20326668 6e6b6e75 206e776f 20646d63     hf2 unknown cmd 
 8004f80:	00000000 20324648 666e6f63 00006769     ....HF2 config..
 8004f90:	202a2a2a 5f326668 75746573 61662070     *** hf2_setup fa
 8004fa0:	64656c69 00000000 20326668 00003e3e     iled....hf2 >>..
 8004fb0:	202a2a2a 32627375 65735f31 6f635f74     *** usb21_set_co
 8004fc0:	6769666e 69616620 0064656c 202a2a2a     nfig failed.*** 
 8004fd0:	32627375 65735f31 20707574 6c696166     usb21_setup fail
 8004fe0:	00006465 202a2a2a 32627375 65645f31     ed..*** usb21_de
 8004ff0:	69726373 726f7470 206f6e20 20736f62     scriptor no bos 
 8005000:	00000000 00736f62 73756c66 616c4668     ....bos.flushFla
 8005010:	00206873 73756c66 616c4668 77206873     sh .flushFlash w
 8005020:	65746972 00000020                       rite ...

08005028 <infoUf2File>:
 8005028:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 8005038:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 8005048:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 8005058:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 8005068:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 8005078:	0a0d3076 00000000                       v0......

Disassembly of section .text:

08006000 <_ZN6numops5mycvtEdPc>:
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (d < 0) {
 8006004:	2300      	movs	r3, #0
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 8006006:	b083      	sub	sp, #12
 8006008:	4616      	mov	r6, r2
    if (d < 0) {
 800600a:	2200      	movs	r2, #0
//
TNumber neqq(TNumber a, TNumber b) {
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
 800600c:	4605      	mov	r5, r0
 800600e:	460c      	mov	r4, r1
    if (d < 0) {
 8006010:	f7fc f9d2 	bl	80023b8 <__wrap___aeabi_dcmplt>
 8006014:	b120      	cbz	r0, 8006020 <_ZN6numops5mycvtEdPc+0x20>
        *buf++ = '-';
 8006016:	232d      	movs	r3, #45	; 0x2d
        d = -d;
 8006018:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

void mycvt(NUMBER d, char *buf) {
    if (d < 0) {
        *buf++ = '-';
 800601c:	f806 3b01 	strb.w	r3, [r6], #1
        d = -d;
    }

    if (!d) {
 8006020:	4628      	mov	r0, r5
 8006022:	4621      	mov	r1, r4
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fc f9ac 	bl	8002384 <__wrap___aeabi_dcmpeq>
 800602c:	b130      	cbz	r0, 800603c <_ZN6numops5mycvtEdPc+0x3c>
        *buf++ = '0';
 800602e:	2230      	movs	r2, #48	; 0x30
        *buf++ = 0;
 8006030:	2300      	movs	r3, #0
        *buf++ = '-';
        d = -d;
    }

    if (!d) {
        *buf++ = '0';
 8006032:	7032      	strb	r2, [r6, #0]
        *buf++ = 0;
 8006034:	7073      	strb	r3, [r6, #1]
        *buf++ = 'e';
        itoa(e, buf);
    } else {
        *buf = 0;
    }
}
 8006036:	b003      	add	sp, #12
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *buf++ = '0';
        *buf++ = 0;
        return;
    }

    int pw = (int)log10(d);
 800603c:	4628      	mov	r0, r5
 800603e:	4621      	mov	r1, r4
 8006040:	f7fc faa8 	bl	8002594 <log10>
 8006044:	f7fc fa36 	bl	80024b4 <__wrap___aeabi_d2iz>
    int e = 1;
    int beforeDot = 1;

    if (0.000001 <= d && d < 1e21) {
 8006048:	a343      	add	r3, pc, #268	; (adr r3, 8006158 <_ZN6numops5mycvtEdPc+0x158>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
        *buf++ = '0';
        *buf++ = 0;
        return;
    }

    int pw = (int)log10(d);
 800604e:	4607      	mov	r7, r0
 8006050:	9001      	str	r0, [sp, #4]
    int e = 1;
    int beforeDot = 1;

    if (0.000001 <= d && d < 1e21) {
 8006052:	4621      	mov	r1, r4
 8006054:	4628      	mov	r0, r5
 8006056:	f7fc f9e1 	bl	800241c <__wrap___aeabi_dcmpge>
 800605a:	b140      	cbz	r0, 800606e <_ZN6numops5mycvtEdPc+0x6e>
 800605c:	a340      	add	r3, pc, #256	; (adr r3, 8006160 <_ZN6numops5mycvtEdPc+0x160>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	4628      	mov	r0, r5
 8006064:	4621      	mov	r1, r4
 8006066:	f7fc f9a7 	bl	80023b8 <__wrap___aeabi_dcmplt>
 800606a:	2800      	cmp	r0, #0
 800606c:	d15b      	bne.n	8006126 <_ZN6numops5mycvtEdPc+0x126>
        if (pw > 0) {
            d /= p10(pw);
            beforeDot = 1 + pw;
        }
    } else {
        d /= p10(pw);
 800606e:	9a01      	ldr	r2, [sp, #4]
 8006070:	2000      	movs	r0, #0
 8006072:	493d      	ldr	r1, [pc, #244]	; (8006168 <_ZN6numops5mycvtEdPc+0x168>)
 8006074:	f005 fc88 	bl	800b988 <__powidf2>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4628      	mov	r0, r5
 800607e:	4621      	mov	r1, r4
 8006080:	f7fc f920 	bl	80022c4 <__wrap___aeabi_ddiv>
        return;
    }

    int pw = (int)log10(d);
    int e = 1;
    int beforeDot = 1;
 8006084:	f04f 0a01 	mov.w	sl, #1
        if (pw > 0) {
            d /= p10(pw);
            beforeDot = 1 + pw;
        }
    } else {
        d /= p10(pw);
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
        e = pw;
    }

    int sig = 0;
 800608c:	2700      	movs	r7, #0
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
        *buf++ = '0' + c;
        d = (d - c) * 10;
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006168 <_ZN6numops5mycvtEdPc+0x168>
    }

    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f7fc fa0b 	bl	80024b4 <__wrap___aeabi_d2iz>
        *buf++ = '0' + c;
 800609e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80060a2:	7033      	strb	r3, [r6, #0]
    }

    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
 80060a4:	4683      	mov	fp, r0
        *buf++ = '0' + c;
        d = (d - c) * 10;
 80060a6:	f005 fbb5 	bl	800b814 <__aeabi_i2d>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4628      	mov	r0, r5
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7fc f94f 	bl	8002354 <__wrap___aeabi_dsub>
 80060b6:	464b      	mov	r3, r9
 80060b8:	4642      	mov	r2, r8
 80060ba:	f7fc f91b 	bl	80022f4 <__wrap___aeabi_dmul>
        if (--beforeDot == 0)
 80060be:	f1ba 0a01 	subs.w	sl, sl, #1
            *buf++ = '.';
 80060c2:	bf08      	it	eq
 80060c4:	232e      	moveq	r3, #46	; 0x2e
    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
        *buf++ = '0' + c;
        d = (d - c) * 10;
 80060c6:	4605      	mov	r5, r0
        if (--beforeDot == 0)
            *buf++ = '.';
 80060c8:	bf08      	it	eq
 80060ca:	7073      	strbeq	r3, [r6, #1]
    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
        *buf++ = '0' + c;
        d = (d - c) * 10;
 80060cc:	460c      	mov	r4, r1

    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
        // printf("%f sig=%d bd=%d\n", d, sig, beforeDot);
        int c = (int)d;
        *buf++ = '0' + c;
 80060ce:	bf14      	ite	ne
 80060d0:	3601      	addne	r6, #1
        d = (d - c) * 10;
        if (--beforeDot == 0)
            *buf++ = '.';
 80060d2:	3602      	addeq	r6, #2
        if (sig || c)
 80060d4:	b927      	cbnz	r7, 80060e0 <_ZN6numops5mycvtEdPc+0xe0>
 80060d6:	f1bb 0f00 	cmp.w	fp, #0
 80060da:	bf18      	it	ne
 80060dc:	2701      	movne	r7, #1
 80060de:	e7da      	b.n	8006096 <_ZN6numops5mycvtEdPc+0x96>
 80060e0:	3701      	adds	r7, #1
        d /= p10(pw);
        e = pw;
    }

    int sig = 0;
    while (sig < 17 || beforeDot > 0) {
 80060e2:	2f10      	cmp	r7, #16
 80060e4:	ddd7      	ble.n	8006096 <_ZN6numops5mycvtEdPc+0x96>
 80060e6:	f1ba 0f00 	cmp.w	sl, #0
 80060ea:	dcd4      	bgt.n	8006096 <_ZN6numops5mycvtEdPc+0x96>
        if (sig || c)
            sig++;
    }

    buf--;
    while (*buf == '0')
 80060ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
            *buf++ = '.';
        if (sig || c)
            sig++;
    }

    buf--;
 80060f0:	3e01      	subs	r6, #1
    while (*buf == '0')
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d103      	bne.n	80060fe <_ZN6numops5mycvtEdPc+0xfe>
 80060f6:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 80060fa:	2b30      	cmp	r3, #48	; 0x30
 80060fc:	d0fb      	beq.n	80060f6 <_ZN6numops5mycvtEdPc+0xf6>
        buf--;
    if (*buf == '.')
        buf--;
    buf++;

    if (e != 1) {
 80060fe:	9801      	ldr	r0, [sp, #4]
    }

    buf--;
    while (*buf == '0')
        buf--;
    if (*buf == '.')
 8006100:	2b2e      	cmp	r3, #46	; 0x2e
        buf--;
 8006102:	bf08      	it	eq
 8006104:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    buf++;

    if (e != 1) {
 8006108:	2801      	cmp	r0, #1
 800610a:	d007      	beq.n	800611c <_ZN6numops5mycvtEdPc+0x11c>
        *buf++ = 'e';
 800610c:	2365      	movs	r3, #101	; 0x65
        itoa(e, buf);
 800610e:	1cb1      	adds	r1, r6, #2
    if (*buf == '.')
        buf--;
    buf++;

    if (e != 1) {
        *buf++ = 'e';
 8006110:	7073      	strb	r3, [r6, #1]
        itoa(e, buf);
    } else {
        *buf = 0;
    }
}
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        buf--;
    buf++;

    if (e != 1) {
        *buf++ = 'e';
        itoa(e, buf);
 8006118:	f003 ba18 	b.w	800954c <_ZN5codal4itoaEiPc>
    } else {
        *buf = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	7073      	strb	r3, [r6, #1]
    }
}
 8006120:	b003      	add	sp, #12
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pw = (int)log10(d);
    int e = 1;
    int beforeDot = 1;

    if (0.000001 <= d && d < 1e21) {
        if (pw > 0) {
 8006126:	2f00      	cmp	r7, #0
 8006128:	dd11      	ble.n	800614e <_ZN6numops5mycvtEdPc+0x14e>
            d /= p10(pw);
 800612a:	463a      	mov	r2, r7
 800612c:	2000      	movs	r0, #0
 800612e:	490e      	ldr	r1, [pc, #56]	; (8006168 <_ZN6numops5mycvtEdPc+0x168>)
 8006130:	f005 fc2a 	bl	800b988 <__powidf2>
 8006134:	460b      	mov	r3, r1
 8006136:	4602      	mov	r2, r0
 8006138:	4621      	mov	r1, r4
 800613a:	4628      	mov	r0, r5
 800613c:	f7fc f8c2 	bl	80022c4 <__wrap___aeabi_ddiv>
        *buf++ = 0;
        return;
    }

    int pw = (int)log10(d);
    int e = 1;
 8006140:	2301      	movs	r3, #1
    int beforeDot = 1;

    if (0.000001 <= d && d < 1e21) {
        if (pw > 0) {
            d /= p10(pw);
            beforeDot = 1 + pw;
 8006142:	f107 0a01 	add.w	sl, r7, #1
    int e = 1;
    int beforeDot = 1;

    if (0.000001 <= d && d < 1e21) {
        if (pw > 0) {
            d /= p10(pw);
 8006146:	4605      	mov	r5, r0
 8006148:	460c      	mov	r4, r1
        *buf++ = 0;
        return;
    }

    int pw = (int)log10(d);
    int e = 1;
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	e79e      	b.n	800608c <_ZN6numops5mycvtEdPc+0x8c>
    int beforeDot = 1;
 800614e:	f04f 0a01 	mov.w	sl, #1
        *buf++ = 0;
        return;
    }

    int pw = (int)log10(d);
    int e = 1;
 8006152:	f8cd a004 	str.w	sl, [sp, #4]
 8006156:	e799      	b.n	800608c <_ZN6numops5mycvtEdPc+0x8c>
 8006158:	a0b5ed8d 	.word	0xa0b5ed8d
 800615c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006160:	d6e2ef50 	.word	0xd6e2ef50
 8006164:	444b1ae4 	.word	0x444b1ae4
 8006168:	40240000 	.word	0x40240000
 800616c:	00000000 	.word	0x00000000

08006170 <_ZN5Math_12randomDoubleEv>:
//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
 8006170:	b570      	push	{r4, r5, r6, lr}
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006176:	f000 fbbd 	bl	80068f4 <_ZN3pxt9getRandomEj>
 800617a:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 800617c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006180:	f000 fbb8 	bl	80068f4 <_ZN3pxt9getRandomEj>
 8006184:	4606      	mov	r6, r0
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006186:	4620      	mov	r0, r4
 8006188:	f005 fb34 	bl	800b7f4 <__aeabi_ui2d>
 800618c:	2200      	movs	r2, #0
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <_ZN5Math_12randomDoubleEv+0x50>)
 8006190:	f7fc f8b0 	bl	80022f4 <__wrap___aeabi_dmul>
 8006194:	4604      	mov	r4, r0
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 8006196:	4630      	mov	r0, r6
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
}

NUMBER randomDouble() {
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
 8006198:	460d      	mov	r5, r1
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
 800619a:	f005 fb2b 	bl	800b7f4 <__aeabi_ui2d>
 800619e:	a306      	add	r3, pc, #24	; (adr r3, 80061b8 <_ZN5Math_12randomDoubleEv+0x48>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fc f88e 	bl	80022c4 <__wrap___aeabi_ddiv>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fc f8b8 	bl	8002324 <__wrap___aeabi_dadd>
}
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	bf00      	nop
 80061b8:	dfe00000 	.word	0xdfe00000
 80061bc:	436fffff 	.word	0x436fffff
 80061c0:	3df00000 	.word	0x3df00000

080061c4 <_ZN5Math_4log2EPN3pxt12TValueStructE>:
#define SINGLE(op) return fromDouble(::op(toDouble(x)));

namespace Math_ {

//
TNumber log2(TNumber x){SINGLE(log2)}
 80061c4:	b508      	push	{r3, lr}
 80061c6:	f000 ff8f 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80061ca:	f7fc f9cf 	bl	800256c <log2>
 80061ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061d2:	f000 bd21 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80061d6:	bf00      	nop

080061d8 <_ZN5Math_3expEPN3pxt12TValueStructE>:
//
TNumber exp(TNumber x){SINGLE(exp)}
 80061d8:	b508      	push	{r3, lr}
 80061da:	f000 ff85 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80061de:	f7fc f9b7 	bl	8002550 <exp>
 80061e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061e6:	f000 bd17 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80061ea:	bf00      	nop

080061ec <_ZN5Math_4tanhEPN3pxt12TValueStructE>:
//
TNumber tanh(TNumber x){SINGLE(tanh)}
 80061ec:	b508      	push	{r3, lr}
 80061ee:	f000 ff7b 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 80061f2:	f7fc fbcd 	bl	8002990 <tanh>
 80061f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061fa:	f000 bd0d 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80061fe:	bf00      	nop

08006200 <_ZN5Math_4sinhEPN3pxt12TValueStructE>:
//
TNumber sinh(TNumber x){SINGLE(sinh)}
 8006200:	b508      	push	{r3, lr}
 8006202:	f000 ff71 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006206:	f7fc fb1d 	bl	8002844 <sinh>
 800620a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800620e:	f000 bd03 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006212:	bf00      	nop

08006214 <_ZN5Math_4coshEPN3pxt12TValueStructE>:
//
TNumber cosh(TNumber x){SINGLE(cosh)}
 8006214:	b508      	push	{r3, lr}
 8006216:	f000 ff67 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800621a:	f7fc fb67 	bl	80028ec <cosh>
 800621e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006222:	f000 bcf9 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006226:	bf00      	nop

08006228 <_ZN5Math_5atanhEPN3pxt12TValueStructE>:
//
TNumber atanh(TNumber x){SINGLE(atanh)}
 8006228:	b508      	push	{r3, lr}
 800622a:	f000 ff5d 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 800622e:	f7fc fcb1 	bl	8002b94 <atanh>
 8006232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006236:	f000 bcef 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800623a:	bf00      	nop

0800623c <_ZN5Math_5asinhEPN3pxt12TValueStructE>:
//
TNumber asinh(TNumber x){SINGLE(asinh)}
 800623c:	b508      	push	{r3, lr}
 800623e:	f000 ff53 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006242:	f7fc fbfd 	bl	8002a40 <asinh>
 8006246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800624a:	f000 bce5 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800624e:	bf00      	nop

08006250 <_ZN5Math_5acoshEPN3pxt12TValueStructE>:
//
TNumber acosh(TNumber x){SINGLE(acosh)}
 8006250:	b508      	push	{r3, lr}
 8006252:	f000 ff49 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
 8006256:	f7fc fc45 	bl	8002ae4 <acosh>
 800625a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800625e:	f000 bcdb 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006262:	bf00      	nop

08006264 <_ZN3pxtL9readBytesEPhS0_ibi>:
    }

    return 0;
}

static int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	9e04      	ldr	r6, [sp, #16]
 8006268:	460c      	mov	r4, r1
    if (szLeft < length) {
 800626a:	4296      	cmp	r6, r2
 800626c:	db24      	blt.n	80062b8 <_ZN3pxtL9readBytesEPhS0_ibi+0x54>
        memset(dst, 0, length);
        return -1;
    }

    if (swapBytes) {
 800626e:	4615      	mov	r5, r2
 8006270:	b953      	cbnz	r3, 8006288 <_ZN3pxtL9readBytesEPhS0_ibi+0x24>
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
 8006272:	2a04      	cmp	r2, #4
 8006274:	d019      	beq.n	80062aa <_ZN3pxtL9readBytesEPhS0_ibi+0x46>
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)src & 1) == 0)
 8006276:	2a02      	cmp	r2, #2
 8006278:	d110      	bne.n	800629c <_ZN3pxtL9readBytesEPhS0_ibi+0x38>
 800627a:	f010 0301 	ands.w	r3, r0, #1
 800627e:	d10d      	bne.n	800629c <_ZN3pxtL9readBytesEPhS0_ibi+0x38>
            *(uint16_t *)dst = *(uint16_t *)src;
 8006280:	8802      	ldrh	r2, [r0, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	800a      	strh	r2, [r1, #0]
        else
            memcpy(dst, src, length);
    }

    return 0;
}
 8006286:	bd70      	pop	{r4, r5, r6, pc}
        memset(dst, 0, length);
        return -1;
    }

    if (swapBytes) {
        uint8_t *p = src + length;
 8006288:	4410      	add	r0, r2
        for (int i = 0; i < length; ++i)
 800628a:	188a      	adds	r2, r1, r2
            dst[i] = *--p;
 800628c:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 8006290:	f801 3b01 	strb.w	r3, [r1], #1
        return -1;
    }

    if (swapBytes) {
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
 8006294:	4291      	cmp	r1, r2
 8006296:	d1f9      	bne.n	800628c <_ZN3pxtL9readBytesEPhS0_ibi+0x28>
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
    }

    return 0;
 8006298:	2000      	movs	r0, #0
}
 800629a:	bd70      	pop	{r4, r5, r6, pc}
        if (length == 4 && ((uint32_t)src & 3) == 0)
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)src & 1) == 0)
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 800629c:	4601      	mov	r1, r0
 800629e:	462a      	mov	r2, r5
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7fc fec5 	bl	8003030 <memcpy>
 80062a6:	2000      	movs	r0, #0
    }

    return 0;
}
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
    if (swapBytes) {
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
 80062aa:	f010 0303 	ands.w	r3, r0, #3
 80062ae:	d1f5      	bne.n	800629c <_ZN3pxtL9readBytesEPhS0_ibi+0x38>
            *(uint32_t *)dst = *(uint32_t *)src;
 80062b0:	6802      	ldr	r2, [r0, #0]
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
    }

    return 0;
 80062b2:	4618      	mov	r0, r3
        uint8_t *p = src + length;
        for (int i = 0; i < length; ++i)
            dst[i] = *--p;
    } else {
        if (length == 4 && ((uint32_t)src & 3) == 0)
            *(uint32_t *)dst = *(uint32_t *)src;
 80062b4:	600a      	str	r2, [r1, #0]
        else
            memcpy(dst, src, length);
    }

    return 0;
}
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
}

static int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
        memset(dst, 0, length);
 80062b8:	4608      	mov	r0, r1
 80062ba:	2100      	movs	r1, #0
 80062bc:	f7fc ff00 	bl	80030c0 <memset>
        return -1;
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        else
            memcpy(dst, src, length);
    }

    return 0;
}
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
 80062c6:	bf00      	nop

080062c8 <_ZN13BufferMethods8getBytesEPN3pxt11BoxedBufferE>:
//
namespace BufferMethods {
//
uint8_t *getBytes(Buffer buf) {
    return buf->data;
}
 80062c8:	3008      	adds	r0, #8
 80062ca:	4770      	bx	lr

080062cc <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi>:

//
int getByte(Buffer buf, int off) {
    if (buf && 0 <= off && off < buf->length)
 80062cc:	b128      	cbz	r0, 80062da <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0xe>
 80062ce:	2900      	cmp	r1, #0
 80062d0:	db02      	blt.n	80062d8 <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0xc>
 80062d2:	6843      	ldr	r3, [r0, #4]
 80062d4:	428b      	cmp	r3, r1
 80062d6:	dc01      	bgt.n	80062dc <_ZN13BufferMethods7getByteEPN3pxt11BoxedBufferEi+0x10>
        return buf->data[off];
    return 0;
 80062d8:	2000      	movs	r0, #0
}
 80062da:	4770      	bx	lr
}

//
int getByte(Buffer buf, int off) {
    if (buf && 0 <= off && off < buf->length)
        return buf->data[off];
 80062dc:	4408      	add	r0, r1
 80062de:	7a00      	ldrb	r0, [r0, #8]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop

080062e4 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii>:
    return 0;
}

//
void setByte(Buffer buf, int off, int v) {
    if (buf && 0 <= off && off < buf->length)
 80062e4:	b130      	cbz	r0, 80062f4 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 80062e6:	2900      	cmp	r1, #0
 80062e8:	db04      	blt.n	80062f4 <_ZN13BufferMethods7setByteEPN3pxt11BoxedBufferEii+0x10>
 80062ea:	6843      	ldr	r3, [r0, #4]
 80062ec:	428b      	cmp	r3, r1
        buf->data[off] = v;
 80062ee:	bfc4      	itt	gt
 80062f0:	1840      	addgt	r0, r0, r1
 80062f2:	7202      	strbgt	r2, [r0, #8]
}
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>:

int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
    if (length < 0)
        length = src->length;

    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db22      	blt.n	8006342 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x4a>
 80062fc:	2900      	cmp	r1, #0
 80062fe:	db20      	blt.n	8006342 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x4a>
void setByte(Buffer buf, int off, int v) {
    if (buf && 0 <= off && off < buf->length)
        buf->data[off] = v;
}

int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
 8006300:	b570      	push	{r4, r5, r6, lr}
    if (length < 0)
        length = src->length;

    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
 8006302:	6846      	ldr	r6, [r0, #4]
 8006304:	428e      	cmp	r6, r1
 8006306:	db19      	blt.n	800633c <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x44>
        return -1;

    length = min(src->length - srcOffset, buf->length - dstOffset);
 8006308:	6855      	ldr	r5, [r2, #4]
 800630a:	1a76      	subs	r6, r6, r1
 800630c:	1aec      	subs	r4, r5, r3
 800630e:	42b4      	cmp	r4, r6
 8006310:	bfa8      	it	ge
 8006312:	4634      	movge	r4, r6

    if (length < 0)
 8006314:	2c00      	cmp	r4, #0
 8006316:	db11      	blt.n	800633c <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x44>
 8006318:	4605      	mov	r5, r0
        return -1;

    if (buf == src) {
 800631a:	f102 0608 	add.w	r6, r2, #8
 800631e:	3008      	adds	r0, #8
 8006320:	42aa      	cmp	r2, r5
 8006322:	4408      	add	r0, r1
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8006324:	4622      	mov	r2, r4
 8006326:	eb06 0103 	add.w	r1, r6, r3
    length = min(src->length - srcOffset, buf->length - dstOffset);

    if (length < 0)
        return -1;

    if (buf == src) {
 800632a:	d003      	beq.n	8006334 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii+0x3c>
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
    } else {
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
 800632c:	f7fc fe80 	bl	8003030 <memcpy>
    }

    return 0;
 8006330:	2000      	movs	r0, #0
}
 8006332:	bd70      	pop	{r4, r5, r6, pc}

    if (length < 0)
        return -1;

    if (buf == src) {
        memmove(buf->data + dstOffset, src->data + srcOffset, length);
 8006334:	f7fc feaa 	bl	800308c <memmove>
    } else {
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
    }

    return 0;
 8006338:	2000      	movs	r0, #0
}
 800633a:	bd70      	pop	{r4, r5, r6, pc}
int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
    if (length < 0)
        length = src->length;

    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
        return -1;
 800633c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    } else {
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
    }

    return 0;
}
 8006340:	bd70      	pop	{r4, r5, r6, pc}
int writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {
    if (length < 0)
        length = src->length;

    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)
        return -1;
 8006342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    } else {
        memcpy(buf->data + dstOffset, src->data + srcOffset, length);
    }

    return 0;
}
 8006346:	4770      	bx	lr

08006348 <_ZN13BufferMethods6lengthEPN3pxt11BoxedBufferE>:

//
//
int length(Buffer s) {
    return s->length;
}
 8006348:	6840      	ldr	r0, [r0, #4]
 800634a:	4770      	bx	lr

0800634c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>:

//
//
//
//
void fill(Buffer buf, int value, int offset = 0, int length = -1) {
 800634c:	b410      	push	{r4}
    if (offset < 0 || offset > buf->length)
 800634e:	1e14      	subs	r4, r2, #0
 8006350:	db0f      	blt.n	8006372 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
 8006352:	6842      	ldr	r2, [r0, #4]
 8006354:	42a2      	cmp	r2, r4
 8006356:	db0c      	blt.n	8006372 <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii+0x26>
        return; // DEVICE_INVALID_PARAMETER;
    if (length < 0)
 8006358:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800635c:	bf28      	it	cs
 800635e:	4613      	movcs	r3, r2
        length = buf->length;
    length = min(length, buf->length - offset);
 8006360:	1b12      	subs	r2, r2, r4
    memset(buf->data + offset, value, length);
 8006362:	3008      	adds	r0, #8
 8006364:	429a      	cmp	r2, r3
 8006366:	4420      	add	r0, r4
 8006368:	bfa8      	it	ge
 800636a:	461a      	movge	r2, r3
}
 800636c:	bc10      	pop	{r4}
    if (offset < 0 || offset > buf->length)
        return; // DEVICE_INVALID_PARAMETER;
    if (length < 0)
        length = buf->length;
    length = min(length, buf->length - offset);
    memset(buf->data + offset, value, length);
 800636e:	f7fc bea7 	b.w	80030c0 <memset>
}
 8006372:	bc10      	pop	{r4}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <_ZN13BufferMethods5sliceEPN3pxt11BoxedBufferEii>:

//
//
//
//
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
 8006378:	b410      	push	{r4}
    offset = min((int)buf->length, offset);
 800637a:	6843      	ldr	r3, [r0, #4]
    if (length < 0)
        length = buf->length;
    length = min(length, buf->length - offset);
    return mkBuffer(buf->data + offset, length);
 800637c:	3008      	adds	r0, #8
 800637e:	428b      	cmp	r3, r1
 8006380:	461c      	mov	r4, r3
 8006382:	bfa8      	it	ge
 8006384:	460c      	movge	r4, r1
//
//
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
    offset = min((int)buf->length, offset);
    if (length < 0)
        length = buf->length;
 8006386:	ea32 0122 	bics.w	r1, r2, r2, asr #32
 800638a:	bf28      	it	cs
 800638c:	4619      	movcs	r1, r3
    length = min(length, buf->length - offset);
 800638e:	1b1b      	subs	r3, r3, r4
    return mkBuffer(buf->data + offset, length);
 8006390:	4299      	cmp	r1, r3
 8006392:	4420      	add	r0, r4
 8006394:	bfa8      	it	ge
 8006396:	4619      	movge	r1, r3
}
 8006398:	bc10      	pop	{r4}
Buffer slice(Buffer buf, int offset = 0, int length = -1) {
    offset = min((int)buf->length, offset);
    if (length < 0)
        length = buf->length;
    length = min(length, buf->length - offset);
    return mkBuffer(buf->data + offset, length);
 800639a:	f000 ba8b 	b.w	80068b4 <_ZN3pxt8mkBufferEPKhi>
 800639e:	bf00      	nop

080063a0 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii>:
//
//
//
//
//
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80063a0:	b570      	push	{r4, r5, r6, lr}
    if (length < 0)
 80063a2:	2b00      	cmp	r3, #0
        length = buf->length - start;
 80063a4:	bfb8      	it	lt
 80063a6:	6843      	ldrlt	r3, [r0, #4]
//
//
//
//
//
void shift(Buffer buf, int offset, int start = 0, int length = -1) {
 80063a8:	460e      	mov	r6, r1
    if (length < 0)
        length = buf->length - start;
 80063aa:	bfb8      	it	lt
 80063ac:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	db20      	blt.n	80063f4 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80063b2:	6844      	ldr	r4, [r0, #4]
 80063b4:	1899      	adds	r1, r3, r2
 80063b6:	42a1      	cmp	r1, r4
 80063b8:	dc1c      	bgt.n	80063f4 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80063ba:	4291      	cmp	r1, r2
 80063bc:	db1a      	blt.n	80063f4 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
 80063be:	b1cb      	cbz	r3, 80063f4 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
        offset == 0 || offset == INT_MIN)
 80063c0:	f036 4100 	bics.w	r1, r6, #2147483648	; 0x80000000
 80063c4:	d016      	beq.n	80063f4 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x54>
        return;
    if (offset <= -length || offset >= length) {
 80063c6:	4259      	negs	r1, r3
 80063c8:	42b1      	cmp	r1, r6
 80063ca:	da14      	bge.n	80063f6 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	dd12      	ble.n	80063f6 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x56>
        fill(buf, 0);
        return;
    }

    uint8_t *data = buf->data + start;
 80063d0:	3008      	adds	r0, #8
    if (offset < 0) {
 80063d2:	2e00      	cmp	r6, #0
    if (offset <= -length || offset >= length) {
        fill(buf, 0);
        return;
    }

    uint8_t *data = buf->data + start;
 80063d4:	eb00 0502 	add.w	r5, r0, r2
    if (offset < 0) {
 80063d8:	db15      	blt.n	8006406 <_ZN13BufferMethods5shiftEPN3pxt11BoxedBufferEiii+0x66>
        offset = -offset;
        memmove(data + offset, data, length - offset);
        memset(data, 0, offset);
    } else {
        length = length - offset;
 80063da:	1b9c      	subs	r4, r3, r6
        memmove(data, data + offset, length);
 80063dc:	4622      	mov	r2, r4
 80063de:	19a9      	adds	r1, r5, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7fc fe53 	bl	800308c <memmove>
        memset(data + length, 0, offset);
 80063e6:	4632      	mov	r2, r6
 80063e8:	1928      	adds	r0, r5, r4
 80063ea:	2100      	movs	r1, #0
    }
}
 80063ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memmove(data + offset, data, length - offset);
        memset(data, 0, offset);
    } else {
        length = length - offset;
        memmove(data, data + offset, length);
        memset(data + length, 0, offset);
 80063f0:	f7fc be66 	b.w	80030c0 <memset>
    }
}
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
        length = buf->length - start;
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
        offset == 0 || offset == INT_MIN)
        return;
    if (offset <= -length || offset >= length) {
        fill(buf, 0);
 80063f6:	2200      	movs	r2, #0
    } else {
        length = length - offset;
        memmove(data, data + offset, length);
        memset(data + length, 0, offset);
    }
}
 80063f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        length = buf->length - start;
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
        offset == 0 || offset == INT_MIN)
        return;
    if (offset <= -length || offset >= length) {
        fill(buf, 0);
 80063fc:	4611      	mov	r1, r2
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006402:	f7ff bfa3 	b.w	800634c <_ZN13BufferMethods4fillEPN3pxt11BoxedBufferEiii>
        return;
    }

    uint8_t *data = buf->data + start;
    if (offset < 0) {
        offset = -offset;
 8006406:	4274      	negs	r4, r6
        memmove(data + offset, data, length - offset);
 8006408:	199a      	adds	r2, r3, r6
 800640a:	4629      	mov	r1, r5
 800640c:	1928      	adds	r0, r5, r4
 800640e:	f7fc fe3d 	bl	800308c <memmove>
        memset(data, 0, offset);
 8006412:	4622      	mov	r2, r4
 8006414:	4628      	mov	r0, r5
    } else {
        length = length - offset;
        memmove(data, data + offset, length);
        memset(data + length, 0, offset);
    }
}
 8006416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    uint8_t *data = buf->data + start;
    if (offset < 0) {
        offset = -offset;
        memmove(data + offset, data, length - offset);
        memset(data, 0, offset);
 800641a:	2100      	movs	r1, #0
 800641c:	f7fc be50 	b.w	80030c0 <memset>

08006420 <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE>:

//
//
//
//
String toHex(Buffer buf) {
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4605      	mov	r5, r0
    const char *hex = "0123456789abcdef";
    auto res = mkString(NULL, buf->length * 2);
 8006424:	6841      	ldr	r1, [r0, #4]
 8006426:	2000      	movs	r0, #0
 8006428:	0049      	lsls	r1, r1, #1
 800642a:	f000 fa15 	bl	8006858 <_ZN3pxt8mkStringEPKci>
    for (int i = 0; i < buf->length; ++i) {
 800642e:	686b      	ldr	r3, [r5, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	dd12      	ble.n	800645a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3a>
 8006434:	4602      	mov	r2, r0
 8006436:	4e09      	ldr	r6, [pc, #36]	; (800645c <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x3c>)
 8006438:	1deb      	adds	r3, r5, #7
        res->data[i << 1] = hex[buf->data[i] >> 4];
 800643a:	785c      	ldrb	r4, [r3, #1]
 800643c:	1f99      	subs	r1, r3, #6
 800643e:	1124      	asrs	r4, r4, #4
 8006440:	5d34      	ldrb	r4, [r6, r4]
 8006442:	1b49      	subs	r1, r1, r5
 8006444:	7194      	strb	r4, [r2, #6]
        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];
 8006446:	785c      	ldrb	r4, [r3, #1]
 8006448:	3202      	adds	r2, #2
 800644a:	f004 040f 	and.w	r4, r4, #15
 800644e:	5d34      	ldrb	r4, [r6, r4]
 8006450:	3301      	adds	r3, #1
 8006452:	7154      	strb	r4, [r2, #5]
//
//
String toHex(Buffer buf) {
    const char *hex = "0123456789abcdef";
    auto res = mkString(NULL, buf->length * 2);
    for (int i = 0; i < buf->length; ++i) {
 8006454:	686c      	ldr	r4, [r5, #4]
 8006456:	428c      	cmp	r4, r1
 8006458:	dcef      	bgt.n	800643a <_ZN13BufferMethods5toHexEPN3pxt11BoxedBufferE+0x1a>
        res->data[i << 1] = hex[buf->data[i] >> 4];
        res->data[(i << 1) + 1] = hex[buf->data[i] & 0xf];
    }
    return res;
}
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	0800be74 	.word	0x0800be74

08006460 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii>:
//
//
//
//
void rotate(Buffer buf, int offset, int start = 0, int length = -1) {
    if (length < 0)
 8006460:	2b00      	cmp	r3, #0
        length = buf->length - start;
 8006462:	bfbc      	itt	lt
 8006464:	6843      	ldrlt	r3, [r0, #4]
 8006466:	1a9b      	sublt	r3, r3, r2
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 8006468:	2a00      	cmp	r2, #0
 800646a:	db2f      	blt.n	80064cc <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6c>
//
//
//
//
//
void rotate(Buffer buf, int offset, int start = 0, int length = -1) {
 800646c:	b430      	push	{r4, r5}
    if (length < 0)
        length = buf->length - start;
    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||
 800646e:	6844      	ldr	r4, [r0, #4]
 8006470:	189d      	adds	r5, r3, r2
 8006472:	42a5      	cmp	r5, r4
 8006474:	dc28      	bgt.n	80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 8006476:	4295      	cmp	r5, r2
 8006478:	db26      	blt.n	80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 800647a:	b32b      	cbz	r3, 80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        offset == 0 || offset == INT_MIN)
 800647c:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8006480:	d022      	beq.n	80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        return;

    if (offset < 0)
 8006482:	2900      	cmp	r1, #0
        offset += length << 8; // try to make it positive
 8006484:	bfb8      	it	lt
 8006486:	eb01 2103 	addlt.w	r1, r1, r3, lsl #8
    offset %= length;
 800648a:	fb91 f4f3 	sdiv	r4, r1, r3
 800648e:	fb03 1414 	mls	r4, r3, r4, r1
    if (offset < 0)
        offset += length;

    uint8_t *data = buf->data + start;
 8006492:	3008      	adds	r0, #8
        return;

    if (offset < 0)
        offset += length << 8; // try to make it positive
    offset %= length;
    if (offset < 0)
 8006494:	2c00      	cmp	r4, #0
        offset += length;
 8006496:	bfb8      	it	lt
 8006498:	18e4      	addlt	r4, r4, r3

    uint8_t *data = buf->data + start;
 800649a:	4402      	add	r2, r0

    uint8_t *n_first = data + offset;
 800649c:	4414      	add	r4, r2
    uint8_t *first = data;
    uint8_t *next = n_first;
    uint8_t *last = data + length;

    while (first != next) {
 800649e:	42a2      	cmp	r2, r4
    uint8_t *data = buf->data + start;

    uint8_t *n_first = data + offset;
    uint8_t *first = data;
    uint8_t *next = n_first;
    uint8_t *last = data + length;
 80064a0:	4413      	add	r3, r2

    while (first != next) {
 80064a2:	d011      	beq.n	80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
 80064a4:	4620      	mov	r0, r4
 80064a6:	e004      	b.n	80064b2 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x52>
        uint8_t tmp = *first;
        *first++ = *next;
        *next++ = tmp;
        if (next == last) {
            next = n_first;
        } else if (first == n_first) {
 80064a8:	42a2      	cmp	r2, r4
 80064aa:	4608      	mov	r0, r1
 80064ac:	d00f      	beq.n	80064ce <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x6e>
    uint8_t *n_first = data + offset;
    uint8_t *first = data;
    uint8_t *next = n_first;
    uint8_t *last = data + length;

    while (first != next) {
 80064ae:	4282      	cmp	r2, r0
 80064b0:	d00a      	beq.n	80064c8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x68>
        uint8_t tmp = *first;
        *first++ = *next;
        *next++ = tmp;
 80064b2:	4601      	mov	r1, r0
    uint8_t *first = data;
    uint8_t *next = n_first;
    uint8_t *last = data + length;

    while (first != next) {
        uint8_t tmp = *first;
 80064b4:	7815      	ldrb	r5, [r2, #0]
        *first++ = *next;
 80064b6:	7800      	ldrb	r0, [r0, #0]
 80064b8:	f802 0b01 	strb.w	r0, [r2], #1
        *next++ = tmp;
 80064bc:	f801 5b01 	strb.w	r5, [r1], #1
        if (next == last) {
 80064c0:	428b      	cmp	r3, r1
 80064c2:	d1f1      	bne.n	80064a8 <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x48>
 80064c4:	4620      	mov	r0, r4
 80064c6:	e7f2      	b.n	80064ae <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
            next = n_first;
        } else if (first == n_first) {
            n_first = next;
        }
    }
}
 80064c8:	bc30      	pop	{r4, r5}
 80064ca:	4770      	bx	lr
 80064cc:	4770      	bx	lr
        uint8_t tmp = *first;
        *first++ = *next;
        *next++ = tmp;
        if (next == last) {
            next = n_first;
        } else if (first == n_first) {
 80064ce:	460c      	mov	r4, r1
 80064d0:	e7ed      	b.n	80064ae <_ZN13BufferMethods6rotateEPN3pxt11BoxedBufferEiii+0x4e>
 80064d2:	bf00      	nop

080064d4 <_ZN13BufferMethods5writeEPN3pxt11BoxedBufferEiS2_>:

//
//
//
//
void write(Buffer buf, int dstOffset, Buffer src) {
 80064d4:	b510      	push	{r4, lr}
    // srcOff and length not supported, we only do up to 4 args :/
    writeBuffer(buf, dstOffset, src, 0, -1);
 80064d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

//
//
//
//
void write(Buffer buf, int dstOffset, Buffer src) {
 80064da:	b082      	sub	sp, #8
    // srcOff and length not supported, we only do up to 4 args :/
    writeBuffer(buf, dstOffset, src, 0, -1);
 80064dc:	2300      	movs	r3, #0
 80064de:	9400      	str	r4, [sp, #0]
 80064e0:	f7ff ff0a 	bl	80062f8 <_ZN13BufferMethods11writeBufferEPN3pxt11BoxedBufferEiS2_ii>
}
 80064e4:	b002      	add	sp, #8
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <_ZN7control12createBufferEi>:
//
//
//
//
Buffer createBuffer(int size) {
    return mkBuffer(NULL, size);
 80064e8:	4601      	mov	r1, r0
 80064ea:	2000      	movs	r0, #0
 80064ec:	f000 b9e2 	b.w	80068b4 <_ZN3pxt8mkBufferEPKhi>

080064f0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>:
    }

    return 0;
}

void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 80064f0:	b530      	push	{r4, r5, lr}
#define WRITEBYTES(isz, swap, toInt)                                                               \
    isz = toInt(value);                                                                            \
    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \
    break

    switch (format) {
 80064f2:	3a01      	subs	r2, #1
    }

    return 0;
}

void setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {
 80064f4:	b083      	sub	sp, #12
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
#define WRITEBYTES(isz, swap, toInt)                                                               \
    isz = toInt(value);                                                                            \
    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \
    break

    switch (format) {
 80064fa:	2a0f      	cmp	r2, #15
 80064fc:	d814      	bhi.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
 80064fe:	e8df f002 	tbb	[pc, r2]
 8006502:	151e      	.short	0x151e
 8006504:	1e5a6a60 	.word	0x1e5a6a60
 8006508:	31255315 	.word	0x31255315
 800650c:	08744d42 	.word	0x08744d42
 8006510:	7a8c      	.short	0x7a8c
    case NumberFormat::Float32LE:
        WRITEBYTES(f32, false, toFloat);
    case NumberFormat::Float32BE:
        WRITEBYTES(f32, true, toFloat);
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fde8 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006518:	2d07      	cmp	r5, #7
    case NumberFormat::Float32LE:
        WRITEBYTES(f32, false, toFloat);
    case NumberFormat::Float32BE:
        WRITEBYTES(f32, true, toFloat);
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
 800651a:	e9cd 0100 	strd	r0, r1, [sp]
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 800651e:	dd03      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        if (length == 4 && ((uint32_t)dst & 3) == 0)
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 8006520:	466b      	mov	r3, sp
 8006522:	cb03      	ldmia	r3!, {r0, r1}
 8006524:	6020      	str	r0, [r4, #0]
 8006526:	6061      	str	r1, [r4, #4]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8006528:	b003      	add	sp, #12
 800652a:	bd30      	pop	{r4, r5, pc}
        WRITEBYTES(u32, false, toUInt);

    case NumberFormat::Int8BE:
        WRITEBYTES(i8, true, toInt);
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fe43 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006532:	2d00      	cmp	r5, #0
        WRITEBYTES(u32, false, toUInt);

    case NumberFormat::Int8BE:
        WRITEBYTES(i8, true, toInt);
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
 8006534:	b2c0      	uxtb	r0, r0
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006536:	ddf7      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
            *--p = src[i];
 8006538:	7020      	strb	r0, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 800653a:	b003      	add	sp, #12
 800653c:	bd30      	pop	{r4, r5, pc}
        WRITEBYTES(i32, false, toInt);
    case NumberFormat::UInt32LE:
        WRITEBYTES(u32, false, toUInt);

    case NumberFormat::Int8BE:
        WRITEBYTES(i8, true, toInt);
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fe3a 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006544:	2d00      	cmp	r5, #0
 8006546:	ddef      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
            *--p = src[i];
 8006548:	7020      	strb	r0, [r4, #0]
 800654a:	e7f6      	b.n	800653a <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x4a>
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
    case NumberFormat::Int16BE:
        WRITEBYTES(i16, true, toInt);
    case NumberFormat::UInt16BE:
        WRITEBYTES(u16, true, toInt);
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fe33 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006552:	2d01      	cmp	r5, #1
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
    case NumberFormat::Int16BE:
        WRITEBYTES(i16, true, toInt);
    case NumberFormat::UInt16BE:
        WRITEBYTES(u16, true, toInt);
 8006554:	b283      	uxth	r3, r0
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006556:	dde7      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
            *--p = src[i];
 8006558:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800655c:	7023      	strb	r3, [r4, #0]
 800655e:	7060      	strb	r0, [r4, #1]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8006560:	b003      	add	sp, #12
 8006562:	bd30      	pop	{r4, r5, pc}
    case NumberFormat::Int16BE:
        WRITEBYTES(i16, true, toInt);
    case NumberFormat::UInt16BE:
        WRITEBYTES(u16, true, toInt);
    case NumberFormat::Int32BE:
        WRITEBYTES(i32, true, toInt);
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fe27 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 800656a:	2d03      	cmp	r5, #3
 800656c:	dddc      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
            *--p = src[i];
 800656e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006572:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8006576:	f3c0 6307 	ubfx	r3, r0, #24, #8
 800657a:	70e0      	strb	r0, [r4, #3]
 800657c:	70a1      	strb	r1, [r4, #2]
 800657e:	7062      	strb	r2, [r4, #1]
 8006580:	7023      	strb	r3, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8006582:	b003      	add	sp, #12
 8006584:	bd30      	pop	{r4, r5, pc}
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
    case NumberFormat::Int32LE:
        WRITEBYTES(i32, false, toInt);
    case NumberFormat::UInt32LE:
        WRITEBYTES(u32, false, toUInt);
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fdb0 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 800658c:	2d03      	cmp	r5, #3
 800658e:	ddcb      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
            *--p = src[i];
    } else {
        if (length == 4 && ((uint32_t)dst & 3) == 0)
 8006590:	07a3      	lsls	r3, r4, #30
            *(uint32_t *)dst = *(uint32_t *)src;
 8006592:	bf0c      	ite	eq
 8006594:	6020      	streq	r0, [r4, #0]
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 8006596:	6020      	strne	r0, [r4, #0]
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}
 8006598:	b003      	add	sp, #12
 800659a:	bd30      	pop	{r4, r5, pc}
    case NumberFormat::UInt16BE:
        WRITEBYTES(u16, true, toInt);
    case NumberFormat::Int32BE:
        WRITEBYTES(i32, true, toInt);
    case NumberFormat::UInt32BE:
        WRITEBYTES(u32, true, toUInt);
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fda5 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065a2:	2d03      	cmp	r5, #3
 80065a4:	dce3      	bgt.n	800656e <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x7e>
 80065a6:	e7bf      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    case NumberFormat::Int8BE:
        WRITEBYTES(i8, true, toInt);
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
    case NumberFormat::Int16BE:
        WRITEBYTES(i16, true, toInt);
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fe05 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065ae:	2d01      	cmp	r5, #1
    case NumberFormat::Int8BE:
        WRITEBYTES(i8, true, toInt);
    case NumberFormat::UInt8BE:
        WRITEBYTES(u8, true, toInt);
    case NumberFormat::Int16BE:
        WRITEBYTES(i16, true, toInt);
 80065b0:	b203      	sxth	r3, r0
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065b2:	dcd1      	bgt.n	8006558 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x68>
 80065b4:	e7b8      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
    case NumberFormat::Int32LE:
        WRITEBYTES(i32, false, toInt);
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fdfe 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065bc:	2d03      	cmp	r5, #3
 80065be:	dce7      	bgt.n	8006590 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xa0>
 80065c0:	e7b2      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    case NumberFormat::Int8LE:
        WRITEBYTES(i8, false, toInt);
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fdf8 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065c8:	2d01      	cmp	r5, #1
 80065ca:	ddad      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        for (int i = 0; i < length; ++i)
            *--p = src[i];
    } else {
        if (length == 4 && ((uint32_t)dst & 3) == 0)
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
 80065cc:	07e1      	lsls	r1, r4, #31
 80065ce:	b280      	uxth	r0, r0
 80065d0:	d409      	bmi.n	80065e6 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xf6>
            *(uint16_t *)dst = *(uint16_t *)src;
 80065d2:	8020      	strh	r0, [r4, #0]
 80065d4:	e7a8      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fdee 	bl	80071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065dc:	2d01      	cmp	r5, #1
    case NumberFormat::UInt8LE:
        WRITEBYTES(u8, false, toInt);
    case NumberFormat::Int16LE:
        WRITEBYTES(i16, false, toInt);
    case NumberFormat::UInt16LE:
        WRITEBYTES(u16, false, toInt);
 80065de:	b280      	uxth	r0, r0
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065e0:	dda2      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        for (int i = 0; i < length; ++i)
            *--p = src[i];
    } else {
        if (length == 4 && ((uint32_t)dst & 3) == 0)
            *(uint32_t *)dst = *(uint32_t *)src;
        else if (length == 2 && ((uint32_t)dst & 1) == 0)
 80065e2:	07e2      	lsls	r2, r4, #31
 80065e4:	d5f5      	bpl.n	80065d2 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xe2>
            *(uint16_t *)dst = *(uint16_t *)src;
        else
            memcpy(dst, src, length);
 80065e6:	8020      	strh	r0, [r4, #0]
 80065e8:	e79e      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        WRITEBYTES(i32, true, toInt);
    case NumberFormat::UInt32BE:
        WRITEBYTES(u32, true, toUInt);

    case NumberFormat::Float32LE:
        WRITEBYTES(f32, false, toFloat);
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fe76 	bl	80072dc <_ZN3pxt7toFloatEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065f0:	2d03      	cmp	r5, #3
 80065f2:	dccd      	bgt.n	8006590 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0xa0>
 80065f4:	e798      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
    case NumberFormat::Float32BE:
        WRITEBYTES(f32, true, toFloat);
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fd76 	bl	80070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 80065fc:	2d07      	cmp	r5, #7
    case NumberFormat::Float32BE:
        WRITEBYTES(f32, true, toFloat);
    case NumberFormat::Float64LE:
        WRITEBYTES(f64, false, toDouble);
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
 80065fe:	e9cd 0100 	strd	r0, r1, [sp]
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006602:	dd91      	ble.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        return -1;
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
 8006604:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
    if (szLeft < length) {
        return -1;
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
 8006608:	f104 0308 	add.w	r3, r4, #8
        for (int i = 0; i < length; ++i)
            *--p = src[i];
 800660c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006610:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return -1;
    }

    if (swapBytes) {
        uint8_t *p = dst + length;
        for (int i = 0; i < length; ++i)
 8006614:	429c      	cmp	r4, r3
 8006616:	d1f9      	bne.n	800660c <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x11c>
 8006618:	e786      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
        WRITEBYTES(u32, true, toUInt);

    case NumberFormat::Float32LE:
        WRITEBYTES(f32, false, toFloat);
    case NumberFormat::Float32BE:
        WRITEBYTES(f32, true, toFloat);
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fe5e 	bl	80072dc <_ZN3pxt7toFloatEPNS_12TValueStructE>
}
}

namespace pxt {
static int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {
    if (szLeft < length) {
 8006620:	2d03      	cmp	r5, #3
 8006622:	dca4      	bgt.n	800656e <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x7e>
 8006624:	e780      	b.n	8006528 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE+0x38>
 8006626:	bf00      	nop

08006628 <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE>:

//
//
//
//
void setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {
 8006628:	b430      	push	{r4, r5}
    if (offset < 0)
 800662a:	1e14      	subs	r4, r2, #0
 800662c:	db07      	blt.n	800663e <_ZN13BufferMethods9setNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEiPNS0_12TValueStructE+0x16>
        return;
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 800662e:	6845      	ldr	r5, [r0, #4]
 8006630:	3008      	adds	r0, #8
 8006632:	460a      	mov	r2, r1
 8006634:	4420      	add	r0, r4
 8006636:	1b29      	subs	r1, r5, r4
}
 8006638:	bc30      	pop	{r4, r5}
//
//
void setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {
    if (offset < 0)
        return;
    setNumberCore(buf->data + offset, buf->length - offset, format, value);
 800663a:	f7ff bf59 	b.w	80064f0 <_ZN3pxt13setNumberCoreEPhiNS_12NumberFormatEPNS_12TValueStructE>
}
 800663e:	bc30      	pop	{r4, r5}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop

08006644 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>:
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}

TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8006644:	b500      	push	{lr}
// Assume little endian
#define READBYTES(isz, swap, conv)                                                                 \
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
 8006646:	3a01      	subs	r2, #1
    case NumberFormat::Float64BE:
        WRITEBYTES(f64, true, toDouble);
    }
}

TNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {
 8006648:	b085      	sub	sp, #20
// Assume little endian
#define READBYTES(isz, swap, conv)                                                                 \
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
 800664a:	2a0f      	cmp	r2, #15
 800664c:	f200 8088 	bhi.w	8006760 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x11c>
 8006650:	e8df f002 	tbb	[pc, r2]
 8006654:	3d302316 	.word	0x3d302316
 8006658:	5c59564a 	.word	0x5c59564a
 800665c:	7165625f 	.word	0x7165625f
 8006660:	08838074 	.word	0x08838074
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
    case NumberFormat::Float64LE:
        READBYTES(f64, false, fromDouble);
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
 8006664:	2301      	movs	r3, #1
 8006666:	9100      	str	r1, [sp, #0]
 8006668:	2208      	movs	r2, #8
 800666a:	eb0d 0102 	add.w	r1, sp, r2
 800666e:	f7ff fdf9 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006676:	f000 facf 	bl	8006c18 <_ZN3pxt10fromDoubleEd>
    }

    return 0;
}
 800667a:	b005      	add	sp, #20
 800667c:	f85d fb04 	ldr.w	pc, [sp], #4
    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \
    return conv(isz)

    switch (format) {
    case NumberFormat::Int8LE:
        READBYTES(i8, false, fromInt);
 8006680:	2300      	movs	r3, #0
 8006682:	9100      	str	r1, [sp, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	a902      	add	r1, sp, #8
 8006688:	f7ff fdec 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 800668c:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8006690:	f000 fb88 	bl	8006da4 <_ZN3pxt7fromIntEi>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 8006694:	b005      	add	sp, #20
 8006696:	f85d fb04 	ldr.w	pc, [sp], #4

    switch (format) {
    case NumberFormat::Int8LE:
        READBYTES(i8, false, fromInt);
    case NumberFormat::UInt8LE:
        READBYTES(u8, false, fromInt);
 800669a:	2300      	movs	r3, #0
 800669c:	9100      	str	r1, [sp, #0]
 800669e:	2201      	movs	r2, #1
 80066a0:	a902      	add	r1, sp, #8
 80066a2:	f7ff fddf 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 80066a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80066aa:	f000 fb7b 	bl	8006da4 <_ZN3pxt7fromIntEi>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 80066ae:	b005      	add	sp, #20
 80066b0:	f85d fb04 	ldr.w	pc, [sp], #4
    case NumberFormat::Int8LE:
        READBYTES(i8, false, fromInt);
    case NumberFormat::UInt8LE:
        READBYTES(u8, false, fromInt);
    case NumberFormat::Int16LE:
        READBYTES(i16, false, fromInt);
 80066b4:	2300      	movs	r3, #0
 80066b6:	9100      	str	r1, [sp, #0]
    case NumberFormat::Int8BE:
        READBYTES(i8, true, fromInt);
    case NumberFormat::UInt8BE:
        READBYTES(u8, true, fromInt);
    case NumberFormat::Int16BE:
        READBYTES(i16, true, fromInt);
 80066b8:	2202      	movs	r2, #2
 80066ba:	a902      	add	r1, sp, #8
 80066bc:	f7ff fdd2 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 80066c0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80066c4:	f000 fb6e 	bl	8006da4 <_ZN3pxt7fromIntEi>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 80066c8:	b005      	add	sp, #20
 80066ca:	f85d fb04 	ldr.w	pc, [sp], #4
    case NumberFormat::UInt8LE:
        READBYTES(u8, false, fromInt);
    case NumberFormat::Int16LE:
        READBYTES(i16, false, fromInt);
    case NumberFormat::UInt16LE:
        READBYTES(u16, false, fromInt);
 80066ce:	2300      	movs	r3, #0
 80066d0:	9100      	str	r1, [sp, #0]
    case NumberFormat::UInt8BE:
        READBYTES(u8, true, fromInt);
    case NumberFormat::Int16BE:
        READBYTES(i16, true, fromInt);
    case NumberFormat::UInt16BE:
        READBYTES(u16, true, fromInt);
 80066d2:	2202      	movs	r2, #2
 80066d4:	a902      	add	r1, sp, #8
 80066d6:	f7ff fdc5 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 80066da:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80066de:	f000 fb61 	bl	8006da4 <_ZN3pxt7fromIntEi>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 80066e2:	b005      	add	sp, #20
 80066e4:	f85d fb04 	ldr.w	pc, [sp], #4
    case NumberFormat::Int16LE:
        READBYTES(i16, false, fromInt);
    case NumberFormat::UInt16LE:
        READBYTES(u16, false, fromInt);
    case NumberFormat::Int32LE:
        READBYTES(i32, false, fromInt);
 80066e8:	2300      	movs	r3, #0
 80066ea:	9100      	str	r1, [sp, #0]
    case NumberFormat::Int16BE:
        READBYTES(i16, true, fromInt);
    case NumberFormat::UInt16BE:
        READBYTES(u16, true, fromInt);
    case NumberFormat::Int32BE:
        READBYTES(i32, true, fromInt);
 80066ec:	2204      	movs	r2, #4
 80066ee:	a902      	add	r1, sp, #8
 80066f0:	f7ff fdb8 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 80066f4:	9802      	ldr	r0, [sp, #8]
 80066f6:	f000 fb55 	bl	8006da4 <_ZN3pxt7fromIntEi>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 80066fa:	b005      	add	sp, #20
 80066fc:	f85d fb04 	ldr.w	pc, [sp], #4
        READBYTES(i32, false, fromInt);
    case NumberFormat::UInt32LE:
        READBYTES(u32, false, fromUInt);

    case NumberFormat::Int8BE:
        READBYTES(i8, true, fromInt);
 8006700:	2301      	movs	r3, #1
 8006702:	9100      	str	r1, [sp, #0]
 8006704:	e7be      	b.n	8006684 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x40>
    case NumberFormat::UInt8BE:
        READBYTES(u8, true, fromInt);
 8006706:	2301      	movs	r3, #1
 8006708:	9100      	str	r1, [sp, #0]
 800670a:	e7c8      	b.n	800669e <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x5a>
    case NumberFormat::Int16BE:
        READBYTES(i16, true, fromInt);
 800670c:	9100      	str	r1, [sp, #0]
 800670e:	2301      	movs	r3, #1
 8006710:	e7d2      	b.n	80066b8 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x74>
    case NumberFormat::UInt16BE:
        READBYTES(u16, true, fromInt);
 8006712:	9100      	str	r1, [sp, #0]
 8006714:	2301      	movs	r3, #1
 8006716:	e7dc      	b.n	80066d2 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x8e>
    case NumberFormat::Int32BE:
        READBYTES(i32, true, fromInt);
 8006718:	9100      	str	r1, [sp, #0]
 800671a:	2301      	movs	r3, #1
 800671c:	e7e6      	b.n	80066ec <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xa8>
    case NumberFormat::UInt16LE:
        READBYTES(u16, false, fromInt);
    case NumberFormat::Int32LE:
        READBYTES(i32, false, fromInt);
    case NumberFormat::UInt32LE:
        READBYTES(u32, false, fromUInt);
 800671e:	2300      	movs	r3, #0
 8006720:	9100      	str	r1, [sp, #0]
    case NumberFormat::UInt16BE:
        READBYTES(u16, true, fromInt);
    case NumberFormat::Int32BE:
        READBYTES(i32, true, fromInt);
    case NumberFormat::UInt32BE:
        READBYTES(u32, true, fromUInt);
 8006722:	2204      	movs	r2, #4
 8006724:	a902      	add	r1, sp, #8
 8006726:	f7ff fd9d 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 800672a:	9802      	ldr	r0, [sp, #8]
 800672c:	f000 fb44 	bl	8006db8 <_ZN3pxt8fromUIntEj>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 8006730:	b005      	add	sp, #20
 8006732:	f85d fb04 	ldr.w	pc, [sp], #4
    case NumberFormat::UInt16BE:
        READBYTES(u16, true, fromInt);
    case NumberFormat::Int32BE:
        READBYTES(i32, true, fromInt);
    case NumberFormat::UInt32BE:
        READBYTES(u32, true, fromUInt);
 8006736:	9100      	str	r1, [sp, #0]
 8006738:	2301      	movs	r3, #1
 800673a:	e7f2      	b.n	8006722 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xde>

    case NumberFormat::Float32LE:
        READBYTES(f32, false, fromFloat);
 800673c:	2300      	movs	r3, #0
 800673e:	9100      	str	r1, [sp, #0]
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
 8006740:	2204      	movs	r2, #4
 8006742:	a902      	add	r1, sp, #8
 8006744:	f7ff fd8e 	bl	8006264 <_ZN3pxtL9readBytesEPhS0_ibi>
 8006748:	9802      	ldr	r0, [sp, #8]
 800674a:	f000 fb23 	bl	8006d94 <_ZN3pxt9fromFloatEf>
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
}
 800674e:	b005      	add	sp, #20
 8006750:	f85d fb04 	ldr.w	pc, [sp], #4
    case NumberFormat::Float32LE:
        READBYTES(f32, false, fromFloat);
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
    case NumberFormat::Float64LE:
        READBYTES(f64, false, fromDouble);
 8006754:	9100      	str	r1, [sp, #0]
 8006756:	2300      	movs	r3, #0
 8006758:	e786      	b.n	8006668 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x24>
        READBYTES(u32, true, fromUInt);

    case NumberFormat::Float32LE:
        READBYTES(f32, false, fromFloat);
    case NumberFormat::Float32BE:
        READBYTES(f32, true, fromFloat);
 800675a:	9100      	str	r1, [sp, #0]
 800675c:	2301      	movs	r3, #1
 800675e:	e7ef      	b.n	8006740 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0xfc>
        READBYTES(f64, false, fromDouble);
    case NumberFormat::Float64BE:
        READBYTES(f64, true, fromDouble);
    }

    return 0;
 8006760:	2000      	movs	r0, #0
 8006762:	e78a      	b.n	800667a <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE+0x36>

08006764 <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi>:
//
//
//
//
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
    if (offset < 0)
 8006764:	1e13      	subs	r3, r2, #0
 8006766:	db08      	blt.n	800677a <_ZN13BufferMethods9getNumberEPN3pxt11BoxedBufferENS0_12NumberFormatEi+0x16>

//
//
//
//
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
 8006768:	b410      	push	{r4}
    if (offset < 0)
        return fromInt(0);
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 800676a:	6844      	ldr	r4, [r0, #4]
 800676c:	3008      	adds	r0, #8
 800676e:	460a      	mov	r2, r1
 8006770:	4418      	add	r0, r3
 8006772:	1ae1      	subs	r1, r4, r3
}
 8006774:	bc10      	pop	{r4}
//
//
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
    if (offset < 0)
        return fromInt(0);
    return getNumberCore(buf->data + offset, buf->length - offset, format);
 8006776:	f7ff bf65 	b.w	8006644 <_ZN3pxt13getNumberCoreEPhiNS_12NumberFormatE>
//
//
//
TNumber getNumber(Buffer buf, NumberFormat format, int offset) {
    if (offset < 0)
        return fromInt(0);
 800677a:	2000      	movs	r0, #0
 800677c:	f000 bb12 	b.w	8006da4 <_ZN3pxt7fromIntEi>

08006780 <_ZN7control6millisEv>:
//
//
//
//
    int millis() {
        return current_time_ms();
 8006780:	f002 bb74 	b.w	8008e6c <_ZN3pxt15current_time_msEv>

08006784 <_ZN7control15internalOnEventEiiPN3pxt12TValueStructEi>:
//
//
//
//
    void internalOnEvent(int src, int value, Action handler, int flags = 16) {
        registerWithDal(src, value, handler, flags);
 8006784:	f002 bc16 	b.w	8008fb4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08006788 <_ZN7control5resetEv>:
//
//
//
//
    void reset() {
        target_reset();
 8006788:	f7f9 bdaa 	b.w	80002e0 <target_reset>

0800678c <_ZN7control10waitMicrosEi>:
//
//
//
//
    void waitMicros(int micros) {
        sleep_us(micros);
 800678c:	17c1      	asrs	r1, r0, #31
 800678e:	f002 ba9b 	b.w	8008cc8 <_ZN3pxt8sleep_usEy>
 8006792:	bf00      	nop

08006794 <_ZN7control13runInParallelEPN3pxt12TValueStructE>:
//
//
//
//
    void runInParallel(Action a) {
        pxt::runInParallel(a);
 8006794:	f002 baac 	b.w	8008cf0 <_ZN3pxt13runInParallelEPNS_12TValueStructE>

08006798 <_ZN7control12waitForEventEii>:
//
//
//
//
    void waitForEvent(int src, int value) {
        pxt::waitForEvent(src, value);
 8006798:	f002 babc 	b.w	8008d14 <_ZN3pxt12waitForEventEii>

0800679c <_ZN7control18deviceSerialNumberEv>:
//
//
//
//
    int deviceSerialNumber() {
        return pxt::getSerialNumber();
 800679c:	f002 bb64 	b.w	8008e68 <_ZN3pxt15getSerialNumberEv>

080067a0 <_ZN7control5__logEiPN3pxt11BoxedStringE>:
//
//
//
//
    void __log(int prority, String text) {
        if (NULL == text) return;
 80067a0:	4608      	mov	r0, r1
 80067a2:	b119      	cbz	r1, 80067ac <_ZN7control5__logEiPN3pxt11BoxedStringE+0xc>
        pxt::sendSerial(text->data, text->length);
 80067a4:	8889      	ldrh	r1, [r1, #4]
 80067a6:	3006      	adds	r0, #6
 80067a8:	f002 be7c 	b.w	80094a4 <_ZN3pxt10sendSerialEPKci>
    }
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <_ZN7control10dmesgValueEPN3pxt12TValueStructE>:
//
//
//
//
    void dmesgValue(TValue v) {
        anyPrint(v);
 80067b0:	f001 b9ca 	b.w	8007b48 <_ZN3pxt8anyPrintEPNS_12TValueStructE>

080067b4 <_ZN7control2gcEv>:
//
//
//
//
    void gc() {
        pxt::gc(1);
 80067b4:	2001      	movs	r0, #1
 80067b6:	f001 bb4d 	b.w	8007e54 <_ZN3pxt2gcEi>
 80067ba:	bf00      	nop

080067bc <_ZN7control8heapDumpEv>:

//
//
//
//
    void heapDump() {
 80067bc:	b508      	push	{r3, lr}
        pxt::gc(2);
 80067be:	2002      	movs	r0, #2
 80067c0:	f001 fb48 	bl	8007e54 <_ZN3pxt2gcEi>
        target_panic(PANIC_HEAP_DUMPED);
    }
 80067c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//
//
//
    void heapDump() {
        pxt::gc(2);
        target_panic(PANIC_HEAP_DUMPED);
 80067c8:	f240 3093 	movw	r0, #915	; 0x393
 80067cc:	f7f9 bdf0 	b.w	80003b0 <target_panic>

080067d0 <_ZN7control16profilingEnabledEv>:
#ifdef PXT_PROFILE
        return true;
#else
        return false;
#endif
    }
 80067d0:	2000      	movs	r0, #0
 80067d2:	4770      	bx	lr

080067d4 <_ZN3pxtL13dtorDoNothingEv>:
        decr((TValue)s);
#endif
    }
}

static void dtorDoNothing() {}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <_ZN3pxtL11string_sizeEPNS_11BoxedStringE>:
#else
#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \
    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint)
#endif

PRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)
 80067d8:	8880      	ldrh	r0, [r0, #4]
 80067da:	300c      	adds	r0, #12
 80067dc:	0880      	lsrs	r0, r0, #2
 80067de:	4770      	bx	lr

080067e0 <_ZN3pxtL11number_sizeEPNS_11BoxedNumberE>:
PRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)
 80067e0:	2003      	movs	r0, #3
 80067e2:	4770      	bx	lr

080067e4 <_ZN3pxtL11buffer_sizeEPNS_11BoxedBufferE>:
PRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)
 80067e4:	6840      	ldr	r0, [r0, #4]
 80067e6:	300b      	adds	r0, #11
 80067e8:	0880      	lsrs	r0, r0, #2
 80067ea:	4770      	bx	lr

080067ec <_ZN3pxt11findBindingEii>:
namespace pxt {

static HandlerBinding *handlerBindings;

HandlerBinding *findBinding(int source, int value) {
    for (auto p = handlerBindings; p; p = p->next) {
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_ZN3pxt11findBindingEii+0x18>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	b12b      	cbz	r3, 80067fe <_ZN3pxt11findBindingEii+0x12>
        if (p->source == source && p->value == value) {
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	4282      	cmp	r2, r0
 80067f6:	d1fa      	bne.n	80067ee <_ZN3pxt11findBindingEii+0x2>
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d1f7      	bne.n	80067ee <_ZN3pxt11findBindingEii+0x2>
            return p;
        }
    }
    return 0;
}
 80067fe:	4618      	mov	r0, r3
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20002808 	.word	0x20002808

08006808 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>:

void setBinding(int source, int value, Action act) {
 8006808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
namespace pxt {

static HandlerBinding *handlerBindings;

HandlerBinding *findBinding(int source, int value) {
    for (auto p = handlerBindings; p; p = p->next) {
 800680c:	4e11      	ldr	r6, [pc, #68]	; (8006854 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x4c>)
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	b913      	cbnz	r3, 8006818 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x10>
 8006812:	e00a      	b.n	800682a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	b143      	cbz	r3, 800682a <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0x22>
        if (p->source == source && p->value == value) {
 8006818:	685c      	ldr	r4, [r3, #4]
 800681a:	42a0      	cmp	r0, r4
 800681c:	d1fa      	bne.n	8006814 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
 800681e:	689c      	ldr	r4, [r3, #8]
 8006820:	42a1      	cmp	r1, r4
 8006822:	d1f7      	bne.n	8006814 <_ZN3pxt10setBindingEiiPNS_12TValueStructE+0xc>
void setBinding(int source, int value, Action act) {
    auto curr = findBinding(source, value);
    incr(act);
    if (curr) {
        decr(curr->action);
        curr->action = act;
 8006824:	60da      	str	r2, [r3, #12]
    curr->source = source;
    curr->value = value;
    curr->action = act;
    registerGC(&curr->action);
    handlerBindings = curr;
}
 8006826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682a:	4604      	mov	r4, r0
    if (curr) {
        decr(curr->action);
        curr->action = act;
        return;
    }
    curr = new HandlerBinding();
 800682c:	2010      	movs	r0, #16
 800682e:	4617      	mov	r7, r2
 8006830:	460d      	mov	r5, r1
 8006832:	f7fc fded 	bl	8003410 <_Znwj>
 8006836:	4680      	mov	r8, r0
    curr->next = handlerBindings;
 8006838:	6833      	ldr	r3, [r6, #0]
    curr->source = source;
 800683a:	6044      	str	r4, [r0, #4]
    curr->value = value;
 800683c:	6085      	str	r5, [r0, #8]
        decr(curr->action);
        curr->action = act;
        return;
    }
    curr = new HandlerBinding();
    curr->next = handlerBindings;
 800683e:	6003      	str	r3, [r0, #0]
    curr->source = source;
    curr->value = value;
    curr->action = act;
    registerGC(&curr->action);
 8006840:	2101      	movs	r1, #1
    }
    curr = new HandlerBinding();
    curr->next = handlerBindings;
    curr->source = source;
    curr->value = value;
    curr->action = act;
 8006842:	f840 7f0c 	str.w	r7, [r0, #12]!
    registerGC(&curr->action);
 8006846:	f001 fe05 	bl	8008454 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
    handlerBindings = curr;
 800684a:	f8c6 8000 	str.w	r8, [r6]
}
 800684e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006852:	bf00      	nop
 8006854:	20002808 	.word	0x20002808

08006858 <_ZN3pxt8mkStringEPKci>:

PXT_DEF_STRING(emptyString, "")

static const char emptyBuffer[] __attribute__((aligned(4))) = "@PXT#:\x00\x00\x00";

String mkString(const char *data, int len) {
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (len < 0)
 800685a:	1e0c      	subs	r4, r1, #0

PXT_DEF_STRING(emptyString, "")

static const char emptyBuffer[] __attribute__((aligned(4))) = "@PXT#:\x00\x00\x00";

String mkString(const char *data, int len) {
 800685c:	4607      	mov	r7, r0
    if (len < 0)
 800685e:	db12      	blt.n	8006886 <_ZN3pxt8mkStringEPKci+0x2e>
        len = strlen(data);
    if (len == 0)
 8006860:	d102      	bne.n	8006868 <_ZN3pxt8mkStringEPKci+0x10>
        return (String)emptyString;
 8006862:	4d12      	ldr	r5, [pc, #72]	; (80068ac <_ZN3pxt8mkStringEPKci+0x54>)
    if (data)
        memcpy(r->data, data, len);
    r->data[len] = 0;
    MEMDBG("mkString: len=%d => %p", len, r);
    return r;
}
 8006864:	4628      	mov	r0, r5
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String mkString(const char *data, int len) {
    if (len < 0)
        len = strlen(data);
    if (len == 0)
        return (String)emptyString;
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 8006868:	f104 0009 	add.w	r0, r4, #9
 800686c:	f001 fcac 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <_ZN3pxt8mkStringEPKci+0x58>)
 8006872:	4605      	mov	r5, r0
    r->length = len;
 8006874:	8084      	strh	r4, [r0, #4]
 8006876:	6003      	str	r3, [r0, #0]
String mkString(const char *data, int len) {
    if (len < 0)
        len = strlen(data);
    if (len == 0)
        return (String)emptyString;
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 8006878:	4626      	mov	r6, r4
    r->length = len;
    if (data)
 800687a:	b98f      	cbnz	r7, 80068a0 <_ZN3pxt8mkStringEPKci+0x48>
        memcpy(r->data, data, len);
    r->data[len] = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	442c      	add	r4, r5
 8006880:	71a3      	strb	r3, [r4, #6]
    MEMDBG("mkString: len=%d => %p", len, r);
    return r;
}
 8006882:	4628      	mov	r0, r5
 8006884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

static const char emptyBuffer[] __attribute__((aligned(4))) = "@PXT#:\x00\x00\x00";

String mkString(const char *data, int len) {
    if (len < 0)
        len = strlen(data);
 8006886:	f7fc fbeb 	bl	8003060 <strlen>
 800688a:	4606      	mov	r6, r0
 800688c:	4604      	mov	r4, r0
    if (len == 0)
 800688e:	2800      	cmp	r0, #0
 8006890:	d0e7      	beq.n	8006862 <_ZN3pxt8mkStringEPKci+0xa>
        return (String)emptyString;
    String r = new (gcAllocate(sizeof(BoxedString) + len + 1)) BoxedString();
 8006892:	3009      	adds	r0, #9
 8006894:	f001 fc98 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8006898:	4605      	mov	r5, r0
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <_ZN3pxt8mkStringEPKci+0x58>)
    r->length = len;
 800689c:	8086      	strh	r6, [r0, #4]
 800689e:	6003      	str	r3, [r0, #0]
    if (data)
        memcpy(r->data, data, len);
 80068a0:	4632      	mov	r2, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	1da8      	adds	r0, r5, #6
 80068a6:	f7fc fbc3 	bl	8003030 <memcpy>
 80068aa:	e7e7      	b.n	800687c <_ZN3pxt8mkStringEPKci+0x24>
 80068ac:	0800bf64 	.word	0x0800bf64
 80068b0:	0800bd90 	.word	0x0800bd90

080068b4 <_ZN3pxt8mkBufferEPKhi>:
    r->data[len] = 0;
    MEMDBG("mkString: len=%d => %p", len, r);
    return r;
}

Buffer mkBuffer(const uint8_t *data, int len) {
 80068b4:	b570      	push	{r4, r5, r6, lr}
    if (len <= 0)
 80068b6:	1e0c      	subs	r4, r1, #0
 80068b8:	dd10      	ble.n	80068dc <_ZN3pxt8mkBufferEPKhi+0x28>
        return (Buffer)emptyBuffer;
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
 80068ba:	4606      	mov	r6, r0
 80068bc:	f104 0008 	add.w	r0, r4, #8
 80068c0:	f001 fc82 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <_ZN3pxt8mkBufferEPKhi+0x38>)
 80068c6:	4605      	mov	r5, r0
 80068c8:	e9c0 3400 	strd	r3, r4, [r0]
    r->length = len;
    if (data)
        memcpy(r->data, data, len);
 80068cc:	4622      	mov	r2, r4
 80068ce:	4631      	mov	r1, r6
 80068d0:	3008      	adds	r0, #8
Buffer mkBuffer(const uint8_t *data, int len) {
    if (len <= 0)
        return (Buffer)emptyBuffer;
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
    r->length = len;
    if (data)
 80068d2:	b136      	cbz	r6, 80068e2 <_ZN3pxt8mkBufferEPKhi+0x2e>
        memcpy(r->data, data, len);
 80068d4:	f7fc fbac 	bl	8003030 <memcpy>
    else
        memset(r->data, 0, len);
    MEMDBG("mkBuffer: len=%d => %p", len, r);
    return r;
}
 80068d8:	4628      	mov	r0, r5
 80068da:	bd70      	pop	{r4, r5, r6, pc}
    return r;
}

Buffer mkBuffer(const uint8_t *data, int len) {
    if (len <= 0)
        return (Buffer)emptyBuffer;
 80068dc:	4d04      	ldr	r5, [pc, #16]	; (80068f0 <_ZN3pxt8mkBufferEPKhi+0x3c>)
        memcpy(r->data, data, len);
    else
        memset(r->data, 0, len);
    MEMDBG("mkBuffer: len=%d => %p", len, r);
    return r;
}
 80068de:	4628      	mov	r0, r5
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();
    r->length = len;
    if (data)
        memcpy(r->data, data, len);
    else
        memset(r->data, 0, len);
 80068e2:	f7fc fbed 	bl	80030c0 <memset>
    MEMDBG("mkBuffer: len=%d => %p", len, r);
    return r;
}
 80068e6:	4628      	mov	r0, r5
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
 80068ea:	bf00      	nop
 80068ec:	0800bd30 	.word	0x0800bd30
 80068f0:	0800bf58 	.word	0x0800bf58

080068f4 <_ZN3pxt9getRandomEj>:

void seedRandom(unsigned seed) {
    random_value = seed;
}

unsigned getRandom(unsigned max) {
 80068f4:	b430      	push	{r4, r5}
 80068f6:	4604      	mov	r4, r0
 80068f8:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <_ZN3pxt9getRandomEj+0x3c>)
 80068fa:	682a      	ldr	r2, [r5, #0]
    unsigned m, result;

    do {
        m = (unsigned)max;
 80068fc:	4621      	mov	r1, r4
        result = 0;
 80068fe:	2000      	movs	r0, #0
            // "Pseudo-Random Sequence Generator for 32-Bit CPUs: A fast, machine-independent
            // generator for 32-bit Microprocessors"
            // https://www.schneier.com/paper-pseudorandom-sequence.html
            unsigned r = random_value;

            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |
 8006900:	0993      	lsrs	r3, r2, #6
 8006902:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 8006906:	4053      	eors	r3, r2
 8006908:	ea83 1312 	eor.w	r3, r3, r2, lsr #4
 800690c:	ea83 0392 	eor.w	r3, r3, r2, lsr #2
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	4053      	eors	r3, r2
 8006914:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
                (r >> 1);

            random_value = r;

            result = ((result << 1) | (r & 0x00000001));
 8006918:	f002 0301 	and.w	r3, r2, #1
        } while (m >>= 1);
 800691c:	0849      	lsrs	r1, r1, #1
            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |
                (r >> 1);

            random_value = r;

            result = ((result << 1) | (r & 0x00000001));
 800691e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
        } while (m >>= 1);
 8006922:	d1ed      	bne.n	8006900 <_ZN3pxt9getRandomEj+0xc>
    } while (result > (unsigned)max);
 8006924:	4284      	cmp	r4, r0
 8006926:	d3e9      	bcc.n	80068fc <_ZN3pxt9getRandomEj+0x8>
 8006928:	602a      	str	r2, [r5, #0]

    return result;
}
 800692a:	bc30      	pop	{r4, r5}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20002800 	.word	0x20002800

08006934 <_ZN7String_7mkEmptyEv>:

namespace String_ {

//
String mkEmpty() {
    return mkString("", 0);
 8006934:	2100      	movs	r1, #0
 8006936:	4801      	ldr	r0, [pc, #4]	; (800693c <_ZN7String_7mkEmptyEv+0x8>)
 8006938:	f7ff bf8e 	b.w	8006858 <_ZN3pxt8mkStringEPKci>
 800693c:	0800c384 	.word	0x0800c384

08006940 <_ZN7String_12fromCharCodeEi>:
}

//
String fromCharCode(int code) {
    char buf[] = {(char)code, 0};
 8006940:	2300      	movs	r3, #0
String mkEmpty() {
    return mkString("", 0);
}

//
String fromCharCode(int code) {
 8006942:	b500      	push	{lr}
 8006944:	b083      	sub	sp, #12
    char buf[] = {(char)code, 0};
 8006946:	f8ad 3004 	strh.w	r3, [sp, #4]
    return mkString(buf, 1);
 800694a:	2101      	movs	r1, #1
    return mkString("", 0);
}

//
String fromCharCode(int code) {
    char buf[] = {(char)code, 0};
 800694c:	f88d 0004 	strb.w	r0, [sp, #4]
    return mkString(buf, 1);
 8006950:	a801      	add	r0, sp, #4
 8006952:	f7ff ff81 	bl	8006858 <_ZN3pxt8mkStringEPKci>
}
 8006956:	b003      	add	sp, #12
 8006958:	f85d fb04 	ldr.w	pc, [sp], #4

0800695c <_ZN7String_6charAtEPN3pxt11BoxedStringEi>:

//
String charAt(String s, int pos) {
 800695c:	b500      	push	{lr}
 800695e:	b083      	sub	sp, #12
    if (s && 0 <= pos && pos < s->length) {
 8006960:	b120      	cbz	r0, 800696c <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8006962:	2900      	cmp	r1, #0
 8006964:	db02      	blt.n	800696c <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x10>
 8006966:	8883      	ldrh	r3, [r0, #4]
 8006968:	428b      	cmp	r3, r1
 800696a:	dc06      	bgt.n	800697a <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x1e>

namespace String_ {

//
String mkEmpty() {
    return mkString("", 0);
 800696c:	2100      	movs	r1, #0
 800696e:	480a      	ldr	r0, [pc, #40]	; (8006998 <_ZN7String_6charAtEPN3pxt11BoxedStringEi+0x3c>)
 8006970:	f7ff ff72 	bl	8006858 <_ZN3pxt8mkStringEPKci>
    if (s && 0 <= pos && pos < s->length) {
        return fromCharCode(s->data[pos]);
    } else {
        return mkEmpty();
    }
}
 8006974:	b003      	add	sp, #12
 8006976:	f85d fb04 	ldr.w	pc, [sp], #4
    return mkString("", 0);
}

//
String fromCharCode(int code) {
    char buf[] = {(char)code, 0};
 800697a:	2200      	movs	r2, #0
}

//
String charAt(String s, int pos) {
    if (s && 0 <= pos && pos < s->length) {
        return fromCharCode(s->data[pos]);
 800697c:	4408      	add	r0, r1
 800697e:	7983      	ldrb	r3, [r0, #6]
}

//
String fromCharCode(int code) {
    char buf[] = {(char)code, 0};
    return mkString(buf, 1);
 8006980:	2101      	movs	r1, #1
 8006982:	a801      	add	r0, sp, #4
    return mkString("", 0);
}

//
String fromCharCode(int code) {
    char buf[] = {(char)code, 0};
 8006984:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006988:	f88d 3004 	strb.w	r3, [sp, #4]
    return mkString(buf, 1);
 800698c:	f7ff ff64 	bl	8006858 <_ZN3pxt8mkStringEPKci>
    if (s && 0 <= pos && pos < s->length) {
        return fromCharCode(s->data[pos]);
    } else {
        return mkEmpty();
    }
}
 8006990:	b003      	add	sp, #12
 8006992:	f85d fb04 	ldr.w	pc, [sp], #4
 8006996:	bf00      	nop
 8006998:	0800c384 	.word	0x0800c384

0800699c <_ZN7String_6concatEPN3pxt11BoxedStringES2_>:
        return TAG_NAN;
    }
}

//
String concat(String s, String other) {
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	460d      	mov	r5, r1
    if (!s)
 80069a0:	b150      	cbz	r0, 80069b8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x1c>
        s = (String)sNull;
    if (!other)
 80069a2:	4604      	mov	r4, r0
 80069a4:	8881      	ldrh	r1, [r0, #4]
 80069a6:	b11d      	cbz	r5, 80069b0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x14>
        other = (String)sNull;
    if (s->length == 0)
 80069a8:	bb51      	cbnz	r1, 8006a00 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x64>
 80069aa:	462e      	mov	r6, r5
        return (String)incrRC(s);
    String r = mkString(NULL, s->length + other->length);
    memcpy(r->data, s->data, s->length);
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}
 80069ac:	4630      	mov	r0, r6
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
    if (!other)
        other = (String)sNull;
    if (s->length == 0)
 80069b0:	b961      	cbnz	r1, 80069cc <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x30>
//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
    if (!other)
        other = (String)sNull;
 80069b2:	4e14      	ldr	r6, [pc, #80]	; (8006a04 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
        return (String)incrRC(s);
    String r = mkString(NULL, s->length + other->length);
    memcpy(r->data, s->data, s->length);
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}
 80069b4:	4630      	mov	r0, r6
 80069b6:	bd70      	pop	{r4, r5, r6, pc}

//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
    if (!other)
 80069b8:	b1f1      	cbz	r1, 80069f8 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x5c>
 80069ba:	f44f 5169 	mov.w	r1, #14912	; 0x3a40
}

//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
 80069be:	4e11      	ldr	r6, [pc, #68]	; (8006a04 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    if (!other)
        other = (String)sNull;
    if (s->length == 0)
        return (String)incrRC(other);
    if (other->length == 0)
 80069c0:	88ab      	ldrh	r3, [r5, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f2      	beq.n	80069ac <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x10>
 80069c6:	4634      	mov	r4, r6
 80069c8:	4419      	add	r1, r3
 80069ca:	e002      	b.n	80069d2 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x36>
 80069cc:	f501 5169 	add.w	r1, r1, #14912	; 0x3a40
//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
    if (!other)
        other = (String)sNull;
 80069d0:	4d0c      	ldr	r5, [pc, #48]	; (8006a04 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
    if (s->length == 0)
        return (String)incrRC(other);
    if (other->length == 0)
        return (String)incrRC(s);
    String r = mkString(NULL, s->length + other->length);
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7ff ff40 	bl	8006858 <_ZN3pxt8mkStringEPKci>
    memcpy(r->data, s->data, s->length);
 80069d8:	1d83      	adds	r3, r0, #6
        other = (String)sNull;
    if (s->length == 0)
        return (String)incrRC(other);
    if (other->length == 0)
        return (String)incrRC(s);
    String r = mkString(NULL, s->length + other->length);
 80069da:	4606      	mov	r6, r0
    memcpy(r->data, s->data, s->length);
 80069dc:	88a2      	ldrh	r2, [r4, #4]
 80069de:	1da1      	adds	r1, r4, #6
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fc fb25 	bl	8003030 <memcpy>
 80069e6:	4603      	mov	r3, r0
    memcpy(r->data + s->length, other->data, other->length);
 80069e8:	88a0      	ldrh	r0, [r4, #4]
 80069ea:	88aa      	ldrh	r2, [r5, #4]
 80069ec:	4418      	add	r0, r3
 80069ee:	1da9      	adds	r1, r5, #6
 80069f0:	f7fc fb1e 	bl	8003030 <memcpy>
    return r;
}
 80069f4:	4630      	mov	r0, r6
 80069f6:	bd70      	pop	{r4, r5, r6, pc}

//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
    if (!other)
 80069f8:	f44f 41e9 	mov.w	r1, #29824	; 0x7480
}

//
String concat(String s, String other) {
    if (!s)
        s = (String)sNull;
 80069fc:	4c01      	ldr	r4, [pc, #4]	; (8006a04 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x68>)
 80069fe:	e7e7      	b.n	80069d0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x34>
 8006a00:	4606      	mov	r6, r0
 8006a02:	e7dd      	b.n	80069c0 <_ZN7String_6concatEPN3pxt11BoxedStringES2_+0x24>
 8006a04:	0800bfb8 	.word	0x0800bfb8

08006a08 <_ZN7String_7compareEPN3pxt11BoxedStringES2_>:
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
    if (a == b)
 8006a08:	4288      	cmp	r0, r1
 8006a0a:	d00d      	beq.n	8006a28 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x20>
    memcpy(r->data, s->data, s->length);
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
 8006a0c:	b508      	push	{r3, lr}
    if (a == b)
        return 0;

    int compareResult = strcmp(a->data, b->data);
 8006a0e:	3106      	adds	r1, #6
 8006a10:	3006      	adds	r0, #6
 8006a12:	f7fc fb1b 	bl	800304c <strcmp>
    if (compareResult < 0)
 8006a16:	2800      	cmp	r0, #0
 8006a18:	db03      	blt.n	8006a22 <_ZN7String_7compareEPN3pxt11BoxedStringES2_+0x1a>
        return -1;
    else if (compareResult > 0)
 8006a1a:	bf14      	ite	ne
 8006a1c:	2001      	movne	r0, #1
 8006a1e:	2000      	moveq	r0, #0
        return 1;
    return 0;
}
 8006a20:	bd08      	pop	{r3, pc}
    if (a == b)
        return 0;

    int compareResult = strcmp(a->data, b->data);
    if (compareResult < 0)
        return -1;
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    else if (compareResult > 0)
        return 1;
    return 0;
}
 8006a26:	bd08      	pop	{r3, pc}
    return r;
}

int compare(String a, String b) {
    if (a == b)
        return 0;
 8006a28:	2000      	movs	r0, #0
    if (compareResult < 0)
        return -1;
    else if (compareResult > 0)
        return 1;
    return 0;
}
 8006a2a:	4770      	bx	lr

08006a2c <_ZN7String_6lengthEPN3pxt11BoxedStringE>:

//
int length(String s) {
    return s->length;
}
 8006a2c:	8880      	ldrh	r0, [r0, #4]
 8006a2e:	4770      	bx	lr

08006a30 <_ZN7String_8mystrtodEPKcPPc>:

#define isspace(c) ((c) == ' ')

NUMBER mystrtod(const char *p, char **endp) {
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (isspace(*p))
 8006a34:	7803      	ldrb	r3, [r0, #0]
    return s->length;
}

#define isspace(c) ((c) == ' ')

NUMBER mystrtod(const char *p, char **endp) {
 8006a36:	b083      	sub	sp, #12
    while (isspace(*p))
 8006a38:	2b20      	cmp	r3, #32
    return s->length;
}

#define isspace(c) ((c) == ' ')

NUMBER mystrtod(const char *p, char **endp) {
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460f      	mov	r7, r1
    while (isspace(*p))
 8006a3e:	d103      	bne.n	8006a48 <_ZN7String_8mystrtodEPKcPPc+0x18>
 8006a40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d0fb      	beq.n	8006a40 <_ZN7String_8mystrtodEPKcPPc+0x10>
        p++;
    NUMBER m = 1;
    NUMBER v = 0;
    int dot = 0;
    if (*p == '+')
 8006a48:	2b2b      	cmp	r3, #43	; 0x2b
        p++;
 8006a4a:	bf08      	it	eq
 8006a4c:	3401      	addeq	r4, #1
    if (*p == '-') {
 8006a4e:	7823      	ldrb	r3, [r4, #0]
 8006a50:	2b2d      	cmp	r3, #45	; 0x2d
 8006a52:	d05c      	beq.n	8006b0e <_ZN7String_8mystrtodEPKcPPc+0xde>
#define isspace(c) ((c) == ' ')

NUMBER mystrtod(const char *p, char **endp) {
    while (isspace(*p))
        p++;
    NUMBER m = 1;
 8006a54:	2100      	movs	r1, #0
 8006a56:	4a4d      	ldr	r2, [pc, #308]	; (8006b8c <_ZN7String_8mystrtodEPKcPPc+0x15c>)
 8006a58:	e9cd 1200 	strd	r1, r2, [sp]
        p++;
    if (*p == '-') {
        m = -1;
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d043      	beq.n	8006ae8 <_ZN7String_8mystrtodEPKcPPc+0xb8>
        return m * strtol(p, endp, 16);
    }
    while (*p) {
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 808d 	beq.w	8006b80 <_ZN7String_8mystrtodEPKcPPc+0x150>
#define isspace(c) ((c) == ' ')

NUMBER mystrtod(const char *p, char **endp) {
    while (isspace(*p))
        p++;
    NUMBER m = 1;
 8006a66:	2600      	movs	r6, #0
 8006a68:	f04f 0800 	mov.w	r8, #0
 8006a6c:	f04f 0900 	mov.w	r9, #0
        return m * strtol(p, endp, 16);
    }
    while (*p) {
        int c = *p - '0';
        if (0 <= c && c <= 9) {
            v *= 10;
 8006a70:	f04f 0a00 	mov.w	sl, #0
 8006a74:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8006b94 <_ZN7String_8mystrtodEPKcPPc+0x164>
 8006a78:	e01c      	b.n	8006ab4 <_ZN7String_8mystrtodEPKcPPc+0x84>
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4649      	mov	r1, r9
 8006a82:	f7fb fc37 	bl	80022f4 <__wrap___aeabi_dmul>
 8006a86:	4680      	mov	r8, r0
 8006a88:	4689      	mov	r9, r1
            v += c;
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f004 fec2 	bl	800b814 <__aeabi_i2d>
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	f7fb fc46 	bl	8002324 <__wrap___aeabi_dadd>
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4689      	mov	r9, r1
            if (dot)
 8006a9c:	b13e      	cbz	r6, 8006aae <_ZN7String_8mystrtodEPKcPPc+0x7e>
                m /= 10;
 8006a9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aa2:	4652      	mov	r2, sl
 8006aa4:	465b      	mov	r3, fp
 8006aa6:	f7fb fc0d 	bl	80022c4 <__wrap___aeabi_ddiv>
 8006aaa:	e9cd 0100 	strd	r0, r1, [sp]
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
        return m * strtol(p, endp, 16);
    }
    while (*p) {
 8006aae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006ab2:	b15b      	cbz	r3, 8006acc <_ZN7String_8mystrtodEPKcPPc+0x9c>
        int c = *p - '0';
 8006ab4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
        if (0 <= c && c <= 9) {
 8006ab8:	2d09      	cmp	r5, #9
 8006aba:	d9de      	bls.n	8006a7a <_ZN7String_8mystrtodEPKcPPc+0x4a>
            v *= 10;
            v += c;
            if (dot)
                m /= 10;
        } else if (!dot && *p == '.') {
 8006abc:	bb76      	cbnz	r6, 8006b1c <_ZN7String_8mystrtodEPKcPPc+0xec>
 8006abe:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac0:	d12c      	bne.n	8006b1c <_ZN7String_8mystrtodEPKcPPc+0xec>
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
        return m * strtol(p, endp, 16);
    }
    while (*p) {
 8006ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
            v *= 10;
            v += c;
            if (dot)
                m /= 10;
        } else if (!dot && *p == '.') {
            dot = 1;
 8006ac6:	2601      	movs	r6, #1
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
        return m * strtol(p, endp, 16);
    }
    while (*p) {
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f3      	bne.n	8006ab4 <_ZN7String_8mystrtodEPKcPPc+0x84>
            break;
        }
        p++;
    }

    v *= m;
 8006acc:	4640      	mov	r0, r8
 8006ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7fb fc0e 	bl	80022f4 <__wrap___aeabi_dmul>
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4689      	mov	r9, r1
    if (*p) {
        p++;
        int pw = strtol(p, endp, 10);
        v *= p10(pw);
    } else {
        *endp = (char *)p;
 8006adc:	603c      	str	r4, [r7, #0]
    }

    return v;
}
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p++;
    if (*p == '-') {
        m = -1;
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
 8006ae8:	7862      	ldrb	r2, [r4, #1]
 8006aea:	f042 0220 	orr.w	r2, r2, #32
 8006aee:	2a78      	cmp	r2, #120	; 0x78
 8006af0:	d1b9      	bne.n	8006a66 <_ZN7String_8mystrtodEPKcPPc+0x36>
        return m * strtol(p, endp, 16);
 8006af2:	2210      	movs	r2, #16
 8006af4:	4639      	mov	r1, r7
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7fc fa90 	bl	800301c <strtol>
 8006afc:	f004 fe8a 	bl	800b814 <__aeabi_i2d>
 8006b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b04:	f7fb fbf6 	bl	80022f4 <__wrap___aeabi_dmul>
 8006b08:	4680      	mov	r8, r0
 8006b0a:	4689      	mov	r9, r1
 8006b0c:	e7e7      	b.n	8006ade <_ZN7String_8mystrtodEPKcPPc+0xae>
    NUMBER v = 0;
    int dot = 0;
    if (*p == '+')
        p++;
    if (*p == '-') {
        m = -1;
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <_ZN7String_8mystrtodEPKcPPc+0x160>)
 8006b12:	7863      	ldrb	r3, [r4, #1]
 8006b14:	e9cd 1200 	strd	r1, r2, [sp]
        p++;
 8006b18:	3401      	adds	r4, #1
 8006b1a:	e79f      	b.n	8006a5c <_ZN7String_8mystrtodEPKcPPc+0x2c>
            v += c;
            if (dot)
                m /= 10;
        } else if (!dot && *p == '.') {
            dot = 1;
        } else if (*p == 'e' || *p == 'E') {
 8006b1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b20:	2b45      	cmp	r3, #69	; 0x45
 8006b22:	7825      	ldrb	r5, [r4, #0]
 8006b24:	d122      	bne.n	8006b6c <_ZN7String_8mystrtodEPKcPPc+0x13c>
            break;
        }
        p++;
    }

    v *= m;
 8006b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7fb fbe1 	bl	80022f4 <__wrap___aeabi_dmul>
 8006b32:	4680      	mov	r8, r0
 8006b34:	4689      	mov	r9, r1

    if (*p) {
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	d0d0      	beq.n	8006adc <_ZN7String_8mystrtodEPKcPPc+0xac>
        p++;
        int pw = strtol(p, endp, 10);
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	1c60      	adds	r0, r4, #1
 8006b3e:	220a      	movs	r2, #10
 8006b40:	f7fc fa6c 	bl	800301c <strtol>
        v *= p10(pw);
 8006b44:	4913      	ldr	r1, [pc, #76]	; (8006b94 <_ZN7String_8mystrtodEPKcPPc+0x164>)
 8006b46:	4602      	mov	r2, r0
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f004 ff1d 	bl	800b988 <__powidf2>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4640      	mov	r0, r8
 8006b54:	4649      	mov	r1, r9
 8006b56:	f7fb fbcd 	bl	80022f4 <__wrap___aeabi_dmul>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
    } else {
        *endp = (char *)p;
    }

    return v;
}
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	b003      	add	sp, #12
 8006b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (!dot && *p == '.') {
            dot = 1;
        } else if (*p == 'e' || *p == 'E') {
            break;
        } else {
            while (isspace(*p))
 8006b68:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8006b6c:	2d20      	cmp	r5, #32
 8006b6e:	d0fb      	beq.n	8006b68 <_ZN7String_8mystrtodEPKcPPc+0x138>
                p++;
            if (*p)
 8006b70:	b90d      	cbnz	r5, 8006b76 <_ZN7String_8mystrtodEPKcPPc+0x146>
 8006b72:	7825      	ldrb	r5, [r4, #0]
 8006b74:	e7d7      	b.n	8006b26 <_ZN7String_8mystrtodEPKcPPc+0xf6>
                return NAN;
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8006b98 <_ZN7String_8mystrtodEPKcPPc+0x168>
 8006b7e:	e7ae      	b.n	8006ade <_ZN7String_8mystrtodEPKcPPc+0xae>
        p++;
    }
    if (*p == '0' && (p[1] | 0x20) == 'x') {
        return m * strtol(p, endp, 16);
    }
    while (*p) {
 8006b80:	f04f 0800 	mov.w	r8, #0
 8006b84:	f04f 0900 	mov.w	r9, #0
 8006b88:	e7a0      	b.n	8006acc <_ZN7String_8mystrtodEPKcPPc+0x9c>
 8006b8a:	bf00      	nop
 8006b8c:	3ff00000 	.word	0x3ff00000
 8006b90:	bff00000 	.word	0xbff00000
 8006b94:	40240000 	.word	0x40240000
 8006b98:	7ff80000 	.word	0x7ff80000

08006b9c <_ZN7String_6substrEPN3pxt11BoxedStringEii>:
        v = NAN;
    return fromDouble(v);
}

//
String substr(String s, int start, int length) {
 8006b9c:	460b      	mov	r3, r1
    if (length <= 0)
 8006b9e:	1e11      	subs	r1, r2, #0
 8006ba0:	dd10      	ble.n	8006bc4 <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x28>
        v = NAN;
    return fromDouble(v);
}

//
String substr(String s, int start, int length) {
 8006ba2:	b410      	push	{r4}
 8006ba4:	8884      	ldrh	r4, [r0, #4]
    if (length <= 0)
        return mkEmpty();
    if (start < 0)
 8006ba6:	2b00      	cmp	r3, #0
        start = max(s->length + start, 0);
 8006ba8:	bfbc      	itt	lt
 8006baa:	191b      	addlt	r3, r3, r4
 8006bac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
    length = min(length, s->length - start);
 8006bb0:	1ae4      	subs	r4, r4, r3
    return mkString(s->data + start, length);
 8006bb2:	42a1      	cmp	r1, r4
 8006bb4:	f100 0006 	add.w	r0, r0, #6
 8006bb8:	bfa8      	it	ge
 8006bba:	4621      	movge	r1, r4
 8006bbc:	4418      	add	r0, r3
}
 8006bbe:	bc10      	pop	{r4}
    if (length <= 0)
        return mkEmpty();
    if (start < 0)
        start = max(s->length + start, 0);
    length = min(length, s->length - start);
    return mkString(s->data + start, length);
 8006bc0:	f7ff be4a 	b.w	8006858 <_ZN3pxt8mkStringEPKci>

namespace String_ {

//
String mkEmpty() {
    return mkString("", 0);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4801      	ldr	r0, [pc, #4]	; (8006bcc <_ZN7String_6substrEPN3pxt11BoxedStringEii+0x30>)
 8006bc8:	f7ff be46 	b.w	8006858 <_ZN3pxt8mkStringEPKci>
 8006bcc:	0800c384 	.word	0x0800c384

08006bd0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>:
    return mkString(s->data + start, length);
}

//
int indexOf(String s, String searchString, int start) {
    if (!s || !searchString)
 8006bd0:	b180      	cbz	r0, 8006bf4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
 8006bd2:	b179      	cbz	r1, 8006bf4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
        return -1;
    if (start < 0 || start + searchString->length > s->length)
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	db0d      	blt.n	8006bf4 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x24>
    length = min(length, s->length - start);
    return mkString(s->data + start, length);
}

//
int indexOf(String s, String searchString, int start) {
 8006bd8:	b510      	push	{r4, lr}
    if (!s || !searchString)
        return -1;
    if (start < 0 || start + searchString->length > s->length)
 8006bda:	888b      	ldrh	r3, [r1, #4]
 8006bdc:	8884      	ldrh	r4, [r0, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	dc0a      	bgt.n	8006bfa <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
        return -1;
    const char *match = strstr(((const char *)s->data + start), searchString->data);
 8006be4:	1d84      	adds	r4, r0, #6
 8006be6:	18a0      	adds	r0, r4, r2
 8006be8:	3106      	adds	r1, #6
 8006bea:	f7fc fa71 	bl	80030d0 <strstr>
    if (NULL == match)
 8006bee:	b120      	cbz	r0, 8006bfa <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i+0x2a>
        return -1;
    return match - s->data;
 8006bf0:	1b00      	subs	r0, r0, r4
}
 8006bf2:	bd10      	pop	{r4, pc}
}

//
int indexOf(String s, String searchString, int start) {
    if (!s || !searchString)
        return -1;
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    const char *match = strstr(((const char *)s->data + start), searchString->data);
    if (NULL == match)
        return -1;
    return match - s->data;
}
 8006bf8:	4770      	bx	lr
}

//
int indexOf(String s, String searchString, int start) {
    if (!s || !searchString)
        return -1;
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    const char *match = strstr(((const char *)s->data + start), searchString->data);
    if (NULL == match)
        return -1;
    return match - s->data;
}
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <_ZN7String_8includesEPN3pxt11BoxedStringES2_i>:

//
int includes(String s, String searchString, int start) {
 8006c00:	b508      	push	{r3, lr}
    return -1 != indexOf(s, searchString, start);
 8006c02:	f7ff ffe5 	bl	8006bd0 <_ZN7String_7indexOfEPN3pxt11BoxedStringES2_i>
}
 8006c06:	3001      	adds	r0, #1
 8006c08:	bf18      	it	ne
 8006c0a:	2001      	movne	r0, #1
 8006c0c:	bd08      	pop	{r3, pc}
 8006c0e:	bf00      	nop

08006c10 <_ZN8Boolean_4bangEi>:

namespace Boolean_ {
//
bool bang(int v) {
    return v == 0;
}
 8006c10:	fab0 f080 	clz	r0, r0
 8006c14:	0940      	lsrs	r0, r0, #5
 8006c16:	4770      	bx	lr

08006c18 <_ZN3pxt10fromDoubleEd>:
        return (TNumber)(ri | 1);
    return TAG_UNDEFINED;
}
#endif

TNumber fromDouble(NUMBER r) {
 8006c18:	b538      	push	{r3, r4, r5, lr}

static inline TValue doubleToInt(double x) {
    NumberConv cnv;
    cnv.v = x;

    if (cnv.word1 == 0 && cnv.word0 == 0)
 8006c1a:	1e0c      	subs	r4, r1, #0
 8006c1c:	d111      	bne.n	8006c42 <_ZN3pxt10fromDoubleEd+0x2a>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d045      	beq.n	8006cae <_ZN3pxt10fromDoubleEd+0x96>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4605      	mov	r5, r0
 8006c28:	460c      	mov	r4, r1
 8006c2a:	f7fb fc29 	bl	8002480 <__wrap___aeabi_dcmpun>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d13f      	bne.n	8006cb2 <_ZN3pxt10fromDoubleEd+0x9a>
    if (i)
        return i;
#endif
    if (isnan(r))
        return TAG_NAN;
    BoxedNumber *p = NEW_GC(BoxedNumber);
 8006c32:	200c      	movs	r0, #12
 8006c34:	f001 fac8 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8006c38:	4b1f      	ldr	r3, [pc, #124]	; (8006cb8 <_ZN3pxt10fromDoubleEd+0xa0>)
    p->num = r;
 8006c3a:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8006c3e:	6003      	str	r3, [r0, #0]
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
    cnv.v = x;

    if (cnv.word1 == 0 && cnv.word0 == 0)
        return TAG_NUMBER(0);

    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;
 8006c42:	f3c4 520a 	ubfx	r2, r4, #20, #11
 8006c46:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff

    // DMESG("v=%d/1000 %p %p %d", (int)(x * 1000), cnv.word0, cnv.word1, ex);

    if (ex < 0 || ex > 29) {
 8006c4a:	2b1d      	cmp	r3, #29
 8006c4c:	d80f      	bhi.n	8006c6e <_ZN3pxt10fromDoubleEd+0x56>
        return NULL;
    }

    int32_t r;

    if (ex <= 20) {
 8006c4e:	2b14      	cmp	r3, #20
 8006c50:	4605      	mov	r5, r0
 8006c52:	dc15      	bgt.n	8006c80 <_ZN3pxt10fromDoubleEd+0x68>
        if (cnv.word0)
            return TAG_UNDEFINED;
        if (cnv.word1 << (ex + 12))
 8006c54:	f2a2 32f3 	subw	r2, r2, #1011	; 0x3f3
 8006c58:	fa04 f202 	lsl.w	r2, r4, r2
 8006c5c:	4302      	orrs	r2, r0
 8006c5e:	d1e0      	bne.n	8006c22 <_ZN3pxt10fromDoubleEd+0xa>
            return TAG_UNDEFINED;
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8006c60:	02e0      	lsls	r0, r4, #11
 8006c62:	f1c3 031f 	rsb	r3, r3, #31
 8006c66:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006c6a:	40d8      	lsrs	r0, r3
 8006c6c:	e018      	b.n	8006ca0 <_ZN3pxt10fromDoubleEd+0x88>

    // DMESG("v=%d/1000 %p %p %d", (int)(x * 1000), cnv.word0, cnv.word1, ex);

    if (ex < 0 || ex > 29) {
        // the 'MININT' case
        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)
 8006c6e:	2b1e      	cmp	r3, #30
 8006c70:	d1d7      	bne.n	8006c22 <_ZN3pxt10fromDoubleEd+0xa>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1d5      	bne.n	8006c22 <_ZN3pxt10fromDoubleEd+0xa>
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <_ZN3pxt10fromDoubleEd+0xa4>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	d1d2      	bne.n	8006c22 <_ZN3pxt10fromDoubleEd+0xa>
            return (TValue)(0x80000001);
 8006c7c:	4810      	ldr	r0, [pc, #64]	; (8006cc0 <_ZN3pxt10fromDoubleEd+0xa8>)
        return TAG_NAN;
    BoxedNumber *p = NEW_GC(BoxedNumber);
    p->num = r;
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
            return TAG_UNDEFINED;
        if (cnv.word1 << (ex + 12))
            return TAG_UNDEFINED;
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
    } else {
        if (cnv.word0 << (ex - 20))
 8006c80:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006c84:	fa10 f202 	lsls.w	r2, r0, r2
 8006c88:	d1cb      	bne.n	8006c22 <_ZN3pxt10fromDoubleEd+0xa>
            return TAG_UNDEFINED;
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8006c8a:	02e0      	lsls	r0, r4, #11
 8006c8c:	f1c3 021f 	rsb	r2, r3, #31
 8006c90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
        r |= cnv.word0 >> (32 - (ex - 20));
 8006c94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
            return TAG_UNDEFINED;
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
    } else {
        if (cnv.word0 << (ex - 20))
            return TAG_UNDEFINED;
        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);
 8006c98:	40d0      	lsrs	r0, r2
        r |= cnv.word0 >> (32 - (ex - 20));
 8006c9a:	fa25 f303 	lsr.w	r3, r5, r3
 8006c9e:	4318      	orrs	r0, r3
    }

    if (cnv.word1 >> 31)
 8006ca0:	2c00      	cmp	r4, #0
        return TAG_NUMBER(-r);
 8006ca2:	bfb8      	it	lt
 8006ca4:	4240      	neglt	r0, r0
    else
        return TAG_NUMBER(r);
 8006ca6:	0040      	lsls	r0, r0, #1
 8006ca8:	f040 0001 	orr.w	r0, r0, #1
        return TAG_NAN;
    BoxedNumber *p = NEW_GC(BoxedNumber);
    p->num = r;
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
static inline TValue doubleToInt(double x) {
    NumberConv cnv;
    cnv.v = x;

    if (cnv.word1 == 0 && cnv.word0 == 0)
        return TAG_NUMBER(0);
 8006cae:	2001      	movs	r0, #1
        return TAG_NAN;
    BoxedNumber *p = NEW_GC(BoxedNumber);
    p->num = r;
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
    auto i = doubleToInt(r);
    if (i)
        return i;
#endif
    if (isnan(r))
        return TAG_NAN;
 8006cb2:	200e      	movs	r0, #14
    BoxedNumber *p = NEW_GC(BoxedNumber);
    p->num = r;
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	bf00      	nop
 8006cb8:	0800bd60 	.word	0x0800bd60
 8006cbc:	c1d00000 	.word	0xc1d00000
 8006cc0:	80000001 	.word	0x80000001

08006cc4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>:

    return v;
}

//
TNumber toNumber(String s) {
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	b083      	sub	sp, #12
    // JSCHECK
    char *endptr;
    NUMBER v = mystrtod(s->data, &endptr);
 8006cca:	1d84      	adds	r4, r0, #6
 8006ccc:	4620      	mov	r0, r4
 8006cce:	a901      	add	r1, sp, #4
 8006cd0:	f7ff feae 	bl	8006a30 <_ZN7String_8mystrtodEPKcPPc>
    if (endptr != s->data + s->length)
 8006cd4:	88ba      	ldrh	r2, [r7, #4]
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	4414      	add	r4, r2
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	d007      	beq.n	8006cee <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x2a>
        v = NAN;
    else if (v == 0.0 || v == -0.0)
        v = v;
    else if (!isnormal(v))
        v = NAN;
 8006cde:	2500      	movs	r5, #0
 8006ce0:	4e1f      	ldr	r6, [pc, #124]	; (8006d60 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x9c>)
    return fromDouble(v);
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f7ff ff97 	bl	8006c18 <_ZN3pxt10fromDoubleEd>
}
 8006cea:	b003      	add	sp, #12
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // JSCHECK
    char *endptr;
    NUMBER v = mystrtod(s->data, &endptr);
    if (endptr != s->data + s->length)
        v = NAN;
    else if (v == 0.0 || v == -0.0)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	f7fb fb45 	bl	8002384 <__wrap___aeabi_dcmpeq>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d1f1      	bne.n	8006ce2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }
 8006cfe:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8006d02:	4628      	mov	r0, r5
 8006d04:	4621      	mov	r1, r4
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0a:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0xa0>)
 8006d0c:	f04f 0701 	mov.w	r7, #1
 8006d10:	f7fb fbb6 	bl	8002480 <__wrap___aeabi_dcmpun>
 8006d14:	b938      	cbnz	r0, 8006d26 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x62>
 8006d16:	4628      	mov	r0, r5
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0xa0>)
 8006d20:	f7fb fb94 	bl	800244c <__wrap___aeabi_dcmpgt>
 8006d24:	b1c0      	cbz	r0, 8006d58 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x94>
        v = v;
    else if (!isnormal(v))
 8006d26:	f017 0fff 	tst.w	r7, #255	; 0xff
 8006d2a:	d1d8      	bne.n	8006cde <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	4621      	mov	r1, r4
 8006d30:	2200      	movs	r2, #0
 8006d32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d36:	f04f 0701 	mov.w	r7, #1
 8006d3a:	f7fb fba1 	bl	8002480 <__wrap___aeabi_dcmpun>
 8006d3e:	b938      	cbnz	r0, 8006d50 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x8c>
 8006d40:	4628      	mov	r0, r5
 8006d42:	4621      	mov	r1, r4
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d4a:	f7fb fb35 	bl	80023b8 <__wrap___aeabi_dcmplt>
 8006d4e:	b128      	cbz	r0, 8006d5c <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x98>
 8006d50:	f017 0fff 	tst.w	r7, #255	; 0xff
 8006d54:	d0c5      	beq.n	8006ce2 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1e>
 8006d56:	e7c2      	b.n	8006cde <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x1a>
 8006d58:	4607      	mov	r7, r0
 8006d5a:	e7e4      	b.n	8006d26 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x62>
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	e7f7      	b.n	8006d50 <_ZN7String_8toNumberEPN3pxt11BoxedStringE+0x8c>
 8006d60:	7ff80000 	.word	0x7ff80000
 8006d64:	7fefffff 	.word	0x7fefffff

08006d68 <_ZN3pxt7fromIntEi.part.8>:
TNumber fromFloat(float r) {
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
 8006d68:	b508      	push	{r3, lr}
    if (canBeTagged(v))
        return TAG_NUMBER(v);
    return fromDouble(v);
 8006d6a:	f004 fd53 	bl	800b814 <__aeabi_i2d>
}
 8006d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
    return fromDouble(v);
 8006d72:	f7ff bf51 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006d76:	bf00      	nop

08006d78 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi>:
    }
}

//
TNumber charCodeAt(String s, int pos) {
    if (s && 0 <= pos && pos < s->length) {
 8006d78:	b150      	cbz	r0, 8006d90 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	db08      	blt.n	8006d90 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
 8006d7e:	8883      	ldrh	r3, [r0, #4]
 8006d80:	428b      	cmp	r3, r1
 8006d82:	dd05      	ble.n	8006d90 <_ZN7String_10charCodeAtEPN3pxt11BoxedStringEi+0x18>
        return fromInt(s->data[pos]);
 8006d84:	4408      	add	r0, r1
 8006d86:	7980      	ldrb	r0, [r0, #6]
inline bool canBeTagged(int) {
    return false;
}
#else
inline bool canBeTagged(int v) {
    return (v << 1) >> 1 == v;
 8006d88:	0040      	lsls	r0, r0, #1
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 8006d8a:	f040 0001 	orr.w	r0, r0, #1
 8006d8e:	4770      	bx	lr
//
TNumber charCodeAt(String s, int pos) {
    if (s && 0 <= pos && pos < s->length) {
        return fromInt(s->data[pos]);
    } else {
        return TAG_NAN;
 8006d90:	200e      	movs	r0, #14
    }
}
 8006d92:	4770      	bx	lr

08006d94 <_ZN3pxt9fromFloatEf>:
    p->num = r;
    MEMDBG("mkNum: %d/1000 => %p", (int)(r * 1000), p);
    return (TNumber)p;
}

TNumber fromFloat(float r) {
 8006d94:	b508      	push	{r3, lr}
    // TODO optimize
    return fromDouble(r);
 8006d96:	f004 fd4f 	bl	800b838 <__aeabi_f2d>
}
 8006d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return (TNumber)p;
}

TNumber fromFloat(float r) {
    // TODO optimize
    return fromDouble(r);
 8006d9e:	f7ff bf3b 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006da2:	bf00      	nop

08006da4 <_ZN3pxt7fromIntEi>:
 8006da4:	0043      	lsls	r3, r0, #1
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 8006da6:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8006daa:	d001      	beq.n	8006db0 <_ZN3pxt7fromIntEi+0xc>
 8006dac:	f7ff bfdc 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
        return TAG_NUMBER(v);
 8006db0:	f043 0001 	orr.w	r0, r3, #1
    return fromDouble(v);
}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop

08006db8 <_ZN3pxt8fromUIntEj>:

TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
 8006db8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    if (canBeTagged(v))
        return TAG_NUMBER(v);
    return fromDouble(v);
}

TNumber fromUInt(unsigned v) {
 8006dbc:	b508      	push	{r3, lr}
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
 8006dbe:	d203      	bcs.n	8006dc8 <_ZN3pxt8fromUIntEj+0x10>
        return TAG_NUMBER(v);
 8006dc0:	0040      	lsls	r0, r0, #1
 8006dc2:	f040 0001 	orr.w	r0, r0, #1
#endif
    return fromDouble(v);
}
 8006dc6:	bd08      	pop	{r3, pc}
TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
        return TAG_NUMBER(v);
#endif
    return fromDouble(v);
 8006dc8:	f004 fd14 	bl	800b7f4 <__aeabi_ui2d>
}
 8006dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
        return TAG_NUMBER(v);
#endif
    return fromDouble(v);
 8006dd0:	f7ff bf22 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>

08006dd4 <_ZN3pxt8fromBoolEb>:
}

TValue fromBool(bool v) {
    if (v)
 8006dd4:	2800      	cmp	r0, #0
        return TAG_TRUE;
    else
        return TAG_FALSE;
}
 8006dd6:	bf14      	ite	ne
 8006dd8:	2042      	movne	r0, #66	; 0x42
 8006dda:	200a      	moveq	r0, #10
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop

08006de0 <_ZN5Math_6randomEv>:
    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
}

//
TNumber random() {
 8006de0:	b508      	push	{r3, lr}
    return fromDouble(randomDouble());
 8006de2:	f7ff f9c5 	bl	8006170 <_ZN5Math_12randomDoubleEv>
}
 8006de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);
}

//
TNumber random() {
    return fromDouble(randomDouble());
 8006dea:	f7ff bf15 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8006dee:	bf00      	nop

08006df0 <_ZN5Math_4imulEii>:
}

//
int imul(int x, int y) {
    return x * y;
}
 8006df0:	fb01 f000 	mul.w	r0, r1, r0
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop

08006df8 <_ZN5Math_4idivEii>:

//
int idiv(int x, int y) {
    return x / y;
}
 8006df8:	fb90 f0f1 	sdiv	r0, r0, r1
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop

08006e00 <_ZN6Array_2mkEv>:
} // namespace Math_

namespace Array_ {
RefCollection *mk() {
 8006e00:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefCollection);
 8006e02:	200c      	movs	r0, #12
 8006e04:	f001 f9e0 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	f001 fda7 	bl	800895c <_ZN3pxt13RefCollectionC1Ev>
    MEMDBG("mkColl: => %p", r);
    return r;
}
 8006e0e:	4620      	mov	r0, r4
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	bf00      	nop

08006e14 <_ZN6Array_6lengthEPN3pxt13RefCollectionE>:
int length(RefCollection *c) {
    return c->length();
}
 8006e14:	8900      	ldrh	r0, [r0, #8]
 8006e16:	4770      	bx	lr

08006e18 <_ZN6Array_9setLengthEPN3pxt13RefCollectionEi>:
    static void scan(RefCollection *coll);
    static unsigned gcsize(RefCollection *coll);
    static void print(RefCollection *coll);

    unsigned length() { return head.getLength(); }
    void setLength(unsigned newLength) { head.setLength(newLength); }
 8006e18:	3004      	adds	r0, #4
 8006e1a:	f001 bd0d 	b.w	8008838 <_ZN3pxt7Segment9setLengthEj>
 8006e1e:	bf00      	nop

08006e20 <_ZN6Array_4pushEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
void setLength(RefCollection *c, int newLength) {
    c->setLength(newLength);
}
void push(RefCollection *c, TValue x) {
 8006e20:	4603      	mov	r3, r0
    void set(unsigned i, TValue value);

    unsigned getLength() { return length; };
    void setLength(unsigned newLength);

    void push(TValue value) { set(length, value); }
 8006e22:	460a      	mov	r2, r1
 8006e24:	3004      	adds	r0, #4
 8006e26:	8919      	ldrh	r1, [r3, #8]
 8006e28:	f001 bcec 	b.w	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08006e2c <_ZN6Array_3popEPN3pxt13RefCollectionE>:
    c->head.push(x);
}
TValue pop(RefCollection *c) {
    return c->head.pop();
 8006e2c:	3004      	adds	r0, #4
 8006e2e:	f001 bd13 	b.w	8008858 <_ZN3pxt7Segment3popEv>
 8006e32:	bf00      	nop

08006e34 <_ZN6Array_5getAtEPN3pxt13RefCollectionEi>:
    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;
    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL

    Segment() : data(nullptr), length(0), size(0) {}

    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8006e34:	8903      	ldrh	r3, [r0, #8]
 8006e36:	4299      	cmp	r1, r3
 8006e38:	bf3a      	itte	cc
 8006e3a:	6843      	ldrcc	r3, [r0, #4]
 8006e3c:	f853 0021 	ldrcc.w	r0, [r3, r1, lsl #2]
 8006e40:	2000      	movcs	r0, #0
}
TValue getAt(RefCollection *c, int x) {
    return c->head.get(x);
}
 8006e42:	4770      	bx	lr

08006e44 <_ZN6Array_5setAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
void setAt(RefCollection *c, int x, TValue y) {
    c->head.set(x, y);
 8006e44:	3004      	adds	r0, #4
 8006e46:	f001 bcdd 	b.w	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 8006e4a:	bf00      	nop

08006e4c <_ZN6Array_8removeAtEPN3pxt13RefCollectionEi>:
}
TValue removeAt(RefCollection *c, int x) {
    return c->head.remove(x);
 8006e4c:	3004      	adds	r0, #4
 8006e4e:	f001 bd11 	b.w	8008874 <_ZN3pxt7Segment6removeEj>
 8006e52:	bf00      	nop

08006e54 <_ZN6Array_8insertAtEPN3pxt13RefCollectionEiPNS0_12TValueStructE>:
}
void insertAt(RefCollection *c, int x, TValue value) {
    c->head.insert(x, value);
 8006e54:	3004      	adds	r0, #4
 8006e56:	f001 bd33 	b.w	80088c0 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>
 8006e5a:	bf00      	nop

08006e5c <_ZN3pxt11programSizeEv>:
//
void *ptrOfLiteral(int offset);

//
unsigned programSize() {
    return bytecode[17] * 8;
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <_ZN3pxt11programSizeEv+0xc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 8006e62:	00c0      	lsls	r0, r0, #3
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20002830 	.word	0x20002830

08006e6c <_ZN3pxt9getConfigEii>:
            if (cfgData[i] == 0)
                break;
        }
#endif

    cfgData = *(int **)&bytecode[18];
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <_ZN3pxt9getConfigEii+0x38>)
unsigned programSize() {
    return bytecode[17] * 8;
}

//
int getConfig(int key, int defl) {
 8006e6e:	b430      	push	{r4, r5}
            if (cfgData[i] == 0)
                break;
        }
#endif

    cfgData = *(int **)&bytecode[18];
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    for (int i = 0;; i += 2) {
        if (cfgData[i] == key)
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	d011      	beq.n	8006e9e <_ZN3pxt9getConfigEii+0x32>
            return cfgData[i + 1];
        if (cfgData[i] == 0)
 8006e7a:	b16b      	cbz	r3, 8006e98 <_ZN3pxt9getConfigEii+0x2c>
                break;
        }
#endif

    cfgData = *(int **)&bytecode[18];
    for (int i = 0;; i += 2) {
 8006e7c:	2400      	movs	r4, #0
 8006e7e:	e001      	b.n	8006e84 <_ZN3pxt9getConfigEii+0x18>
 8006e80:	4614      	mov	r4, r2
        if (cfgData[i] == key)
            return cfgData[i + 1];
        if (cfgData[i] == 0)
 8006e82:	b14b      	cbz	r3, 8006e98 <_ZN3pxt9getConfigEii+0x2c>
                break;
        }
#endif

    cfgData = *(int **)&bytecode[18];
    for (int i = 0;; i += 2) {
 8006e84:	1ca2      	adds	r2, r4, #2
        if (cfgData[i] == key)
 8006e86:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8006e8a:	4283      	cmp	r3, r0
 8006e8c:	d1f8      	bne.n	8006e80 <_ZN3pxt9getConfigEii+0x14>
 8006e8e:	3403      	adds	r4, #3
 8006e90:	00a4      	lsls	r4, r4, #2
            return cfgData[i + 1];
 8006e92:	5928      	ldr	r0, [r5, r4]
        if (cfgData[i] == 0)
            return defl;
    }
}
 8006e94:	bc30      	pop	{r4, r5}
 8006e96:	4770      	bx	lr
    cfgData = *(int **)&bytecode[18];
    for (int i = 0;; i += 2) {
        if (cfgData[i] == key)
            return cfgData[i + 1];
        if (cfgData[i] == 0)
            return defl;
 8006e98:	4608      	mov	r0, r1
    }
}
 8006e9a:	bc30      	pop	{r4, r5}
 8006e9c:	4770      	bx	lr
        }
#endif

    cfgData = *(int **)&bytecode[18];
    for (int i = 0;; i += 2) {
        if (cfgData[i] == key)
 8006e9e:	2404      	movs	r4, #4
 8006ea0:	e7f7      	b.n	8006e92 <_ZN3pxt9getConfigEii+0x26>
 8006ea2:	bf00      	nop
 8006ea4:	20002830 	.word	0x20002830

08006ea8 <_ZN5pxtrt8ldlocRefEPN3pxt11RefRefLocalE>:
//
TValue ldlocRef(RefRefLocal *r) {
    TValue tmp = r->v;
    incr(tmp);
    return tmp;
}
 8006ea8:	6840      	ldr	r0, [r0, #4]
 8006eaa:	4770      	bx	lr

08006eac <_ZN5pxtrt8stlocRefEPN3pxt11RefRefLocalEPNS0_12TValueStructE>:

//
void stlocRef(RefRefLocal *r, TValue v) {
    decr(r->v);
    r->v = v;
 8006eac:	6041      	str	r1, [r0, #4]
}
 8006eae:	4770      	bx	lr

08006eb0 <_ZN5pxtrt8mklocRefEv>:

//
RefRefLocal *mklocRef() {
 8006eb0:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefRefLocal);
 8006eb2:	2008      	movs	r0, #8
 8006eb4:	f001 f988 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	f001 fd57 	bl	800896c <_ZN3pxt11RefRefLocalC1Ev>
    MEMDBG("mklocRef: => %p", r);
    return r;
}
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop

08006ec4 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE>:

// Store a captured local in a closure. It returns the action, so it can be chained.
//
RefAction *stclo(RefAction *a, int idx, TValue v) {
 8006ec4:	b570      	push	{r4, r5, r6, lr}

    RefAction();

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
 8006ec6:	1e0c      	subs	r4, r1, #0
 8006ec8:	4605      	mov	r5, r0
 8006eca:	4616      	mov	r6, r2
 8006ecc:	db09      	blt.n	8006ee2 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x1e>
 8006ece:	8883      	ldrh	r3, [r0, #4]
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	da06      	bge.n	8006ee2 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x1e>
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
 8006ed4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return !isTagged(e) && (*((uint16_t *)e) & 1) == 1;
#endif
}

inline void check(int cond, PXT_PANIC code, int subcode = 0) {
    if (!cond)
 8006ed8:	68e3      	ldr	r3, [r4, #12]
 8006eda:	b963      	cbnz	r3, 8006ef6 <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x32>

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
        fields[idx] = v;
 8006edc:	60e6      	str	r6, [r4, #12]
    // DBG("STCLO "); a->print(); DBG("@%d = %p\n", idx, (void*)v);
    a->stCore(idx, v);
    return a;
}
 8006ede:	4628      	mov	r0, r5
 8006ee0:	bd70      	pop	{r4, r5, r6, pc}
#endif
}

inline void check(int cond, PXT_PANIC code, int subcode = 0) {
    if (!cond)
        error(code, subcode);
 8006ee2:	210a      	movs	r1, #10
 8006ee4:	f240 3086 	movw	r0, #902	; 0x386
 8006ee8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8006eec:	f001 fd84 	bl	80089f8 <_ZN3pxt5errorENS_9PXT_PANICEi>
    return !isTagged(e) && (*((uint16_t *)e) & 1) == 1;
#endif
}

inline void check(int cond, PXT_PANIC code, int subcode = 0) {
    if (!cond)
 8006ef0:	68e3      	ldr	r3, [r4, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0f2      	beq.n	8006edc <_ZN5pxtrt5stcloEPN3pxt9RefActionEiPNS0_12TValueStructE+0x18>
        error(code, subcode);
 8006ef6:	210b      	movs	r1, #11
 8006ef8:	f240 3086 	movw	r0, #902	; 0x386
 8006efc:	f001 fd7c 	bl	80089f8 <_ZN3pxt5errorENS_9PXT_PANICEi>

    inline void stCore(int idx, TValue v) {
        // DMESG("ST [%d] = %d ", idx, v); this->print();
        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);
        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted
        fields[idx] = v;
 8006f00:	60e6      	str	r6, [r4, #12]
 8006f02:	4628      	mov	r0, r5
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	bf00      	nop

08006f08 <_ZN5pxtrt5panicEi>:

//
void panic(int code) {
    target_panic(code);
 8006f08:	f7f9 ba52 	b.w	80003b0 <target_panic>

08006f0c <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE>:
}

//
String emptyToNull(String s) {
    if (!s || s->length == 0)
 8006f0c:	b118      	cbz	r0, 8006f16 <_ZN5pxtrt11emptyToNullEPN3pxt11BoxedStringE+0xa>
 8006f0e:	8883      	ldrh	r3, [r0, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf08      	it	eq
 8006f14:	2000      	moveq	r0, #0
        return NULL;
    return s;
}
 8006f16:	4770      	bx	lr

08006f18 <_ZN5pxtrt9ptrToBoolEPN3pxt12TValueStructE>:
        decr(p);
        return 1;
    } else {
        return 0;
    }
}
 8006f18:	3000      	adds	r0, #0
 8006f1a:	bf18      	it	ne
 8006f1c:	2001      	movne	r0, #1
 8006f1e:	4770      	bx	lr

08006f20 <_ZN5pxtrt5mkMapEv>:

//
RefMap *mkMap() {
 8006f20:	b510      	push	{r4, lr}
    auto r = NEW_GC(RefMap);
 8006f22:	2014      	movs	r0, #20
 8006f24:	f001 f950 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	f001 fd27 	bl	800897c <_ZN3pxt6RefMapC1Ev>
    MEMDBG("mkMap: => %p", r);
    return r;
}
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop

08006f34 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>:

//
TValue mapGetByString(RefMap *map, String key) {
 8006f34:	b510      	push	{r4, lr}
 8006f36:	4604      	mov	r4, r0
    int i = map->findIdx(key);
 8006f38:	f001 fd2a 	bl	8008990 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	db06      	blt.n	8006f4e <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;
    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL

    Segment() : data(nullptr), length(0), size(0) {}

    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
 8006f40:	8a23      	ldrh	r3, [r4, #16]
 8006f42:	4298      	cmp	r0, r3
 8006f44:	d203      	bcs.n	8006f4e <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE+0x1a>
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
        return 0;
    }
    TValue r = incr(map->values.get(i));
    return r;
}
 8006f4c:	bd10      	pop	{r4, pc}

//
TValue mapGetByString(RefMap *map, String key) {
    int i = map->findIdx(key);
    if (i < 0) {
        return 0;
 8006f4e:	2000      	movs	r0, #0
    }
    TValue r = incr(map->values.get(i));
    return r;
}
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop

08006f54 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE>:

//
int lookupMapKey(String key) {
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    auto arr = *(uintptr_t **)&bytecode[22];
 8006f58:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x8c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
    auto len = *arr++;
    auto ikey = (uintptr_t)key;
    auto l = 0U;
    auto r = len - 1;
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8006f5e:	686a      	ldr	r2, [r5, #4]
}

//
int lookupMapKey(String key) {
    auto arr = *(uintptr_t **)&bytecode[22];
    auto len = *arr++;
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
    auto ikey = (uintptr_t)key;
    auto l = 0U;
    auto r = len - 1;
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8006f64:	4282      	cmp	r2, r0
int lookupMapKey(String key) {
    auto arr = *(uintptr_t **)&bytecode[22];
    auto len = *arr++;
    auto ikey = (uintptr_t)key;
    auto l = 0U;
    auto r = len - 1;
 8006f66:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
 8006f6a:	d806      	bhi.n	8006f7a <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x26>
 8006f6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f76:	4283      	cmp	r3, r0
 8006f78:	d21a      	bcs.n	8006fb0 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x5c>
 8006f7a:	2700      	movs	r7, #0
 8006f7c:	4680      	mov	r8, r0

int compare(String a, String b) {
    if (a == b)
        return 0;

    int compareResult = strcmp(a->data, b->data);
 8006f7e:	f100 0906 	add.w	r9, r0, #6
            else
                r = m - 1;
        }
    } else {
        while (l <= r) {
            auto m = (l + r) >> 1;
 8006f82:	19bc      	adds	r4, r7, r6
 8006f84:	0864      	lsrs	r4, r4, #1
            auto cmp = String_::compare((String)arr[m], key);
 8006f86:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
    if (a == b)
 8006f8a:	4543      	cmp	r3, r8
        return 0;

    int compareResult = strcmp(a->data, b->data);
 8006f8c:	f103 0006 	add.w	r0, r3, #6
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
    if (a == b)
 8006f90:	d005      	beq.n	8006f9e <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x4a>
        return 0;

    int compareResult = strcmp(a->data, b->data);
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7fc f85a 	bl	800304c <strcmp>
    if (compareResult < 0)
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	db1f      	blt.n	8006fdc <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x88>
        return -1;
    else if (compareResult > 0)
 8006f9c:	d102      	bne.n	8006fa4 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x50>
    } else {
        while (l <= r) {
            auto m = (l + r) >> 1;
            auto cmp = String_::compare((String)arr[m], key);
            if (cmp == 0)
                return m;
 8006f9e:	4620      	mov	r0, r4
            else
                r = m - 1;
        }
    }
    return 0;
}
 8006fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if (cmp == 0)
                return m;
            else if (cmp < 0)
                l = m + 1;
            else
                r = m - 1;
 8006fa4:	1e66      	subs	r6, r4, #1
                l = m + 1;
            else
                r = m - 1;
        }
    } else {
        while (l <= r) {
 8006fa6:	42b7      	cmp	r7, r6
 8006fa8:	d9eb      	bls.n	8006f82 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x2e>
                l = m + 1;
            else
                r = m - 1;
        }
    }
    return 0;
 8006faa:	2000      	movs	r0, #0
}
 8006fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//
int lookupMapKey(String key) {
    auto arr = *(uintptr_t **)&bytecode[22];
    auto len = *arr++;
    auto ikey = (uintptr_t)key;
    auto l = 0U;
 8006fb0:	2200      	movs	r2, #0
    auto r = len - 1;
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
        while (l <= r) {
            auto m = (l + r) >> 1;
 8006fb2:	1993      	adds	r3, r2, r6
 8006fb4:	085b      	lsrs	r3, r3, #1
            if (arr[m] == ikey)
 8006fb6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8006fba:	4281      	cmp	r1, r0
 8006fbc:	d00b      	beq.n	8006fd6 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x82>
                return m;
            else if (arr[m] < ikey)
                l = m + 1;
 8006fbe:	bf34      	ite	cc
 8006fc0:	1c5a      	addcc	r2, r3, #1
            else
                r = m - 1;
 8006fc2:	f103 36ff 	addcs.w	r6, r3, #4294967295	; 0xffffffff
    auto len = *arr++;
    auto ikey = (uintptr_t)key;
    auto l = 0U;
    auto r = len - 1;
    if (arr[0] <= ikey && ikey <= arr[len - 1]) {
        while (l <= r) {
 8006fc6:	4296      	cmp	r6, r2
 8006fc8:	d3ef      	bcc.n	8006faa <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x56>
            auto m = (l + r) >> 1;
 8006fca:	1993      	adds	r3, r2, r6
 8006fcc:	085b      	lsrs	r3, r3, #1
            if (arr[m] == ikey)
 8006fce:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8006fd2:	4281      	cmp	r1, r0
 8006fd4:	d1f3      	bne.n	8006fbe <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x6a>
                return m;
 8006fd6:	4618      	mov	r0, r3
            else
                r = m - 1;
        }
    }
    return 0;
}
 8006fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            auto m = (l + r) >> 1;
            auto cmp = String_::compare((String)arr[m], key);
            if (cmp == 0)
                return m;
            else if (cmp < 0)
                l = m + 1;
 8006fdc:	1c67      	adds	r7, r4, #1
 8006fde:	e7e2      	b.n	8006fa6 <_ZN5pxtrt12lookupMapKeyEPN3pxt11BoxedStringE+0x52>
 8006fe0:	20002830 	.word	0x20002830

08006fe4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj>:
    return 0;
}

//
TValue mapGet(RefMap *map, unsigned key) {
    auto arr = *(String **)&bytecode[22];
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <_ZN5pxtrt6mapGetEPN3pxt6RefMapEj+0x10>)
    auto r = mapGetByString(map, arr[key + 1]);
 8006fe6:	3101      	adds	r1, #1
    return 0;
}

//
TValue mapGet(RefMap *map, unsigned key) {
    auto arr = *(String **)&bytecode[22];
 8006fe8:	681b      	ldr	r3, [r3, #0]
    auto r = mapGetByString(map, arr[key + 1]);
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006ff0:	f7ff bfa0 	b.w	8006f34 <_ZN5pxtrt14mapGetByStringEPN3pxt6RefMapEPNS0_11BoxedStringE>
 8006ff4:	20002830 	.word	0x20002830

08006ff8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>:
    map->unref();
    return r;
}

//
void mapSetByString(RefMap *map, String key, TValue val) {
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	4616      	mov	r6, r2
    int i = map->findIdx(key);
 8007000:	f001 fcc6 	bl	8008990 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>
    if (i < 0) {
 8007004:	1e01      	subs	r1, r0, #0
 8007006:	f104 050c 	add.w	r5, r4, #12
 800700a:	db05      	blt.n	8007018 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE+0x20>
        incrRC(key);
        map->keys.push((TValue)key);
        map->values.push(val);
    } else {
        map->values.set(i, val);
 800700c:	4632      	mov	r2, r6
 800700e:	4628      	mov	r0, r5
    }
    incr(val);
}
 8007010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (i < 0) {
        incrRC(key);
        map->keys.push((TValue)key);
        map->values.push(val);
    } else {
        map->values.set(i, val);
 8007014:	f001 bbf6 	b.w	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
    void set(unsigned i, TValue value);

    unsigned getLength() { return length; };
    void setLength(unsigned newLength);

    void push(TValue value) { set(length, value); }
 8007018:	463a      	mov	r2, r7
 800701a:	8921      	ldrh	r1, [r4, #8]
 800701c:	1d20      	adds	r0, r4, #4
 800701e:	f001 fbf1 	bl	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>
 8007022:	4632      	mov	r2, r6
 8007024:	8a21      	ldrh	r1, [r4, #16]
 8007026:	4628      	mov	r0, r5
    }
    incr(val);
}
 8007028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800702c:	f001 bbea 	b.w	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08007030 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE>:

//
void mapSet(RefMap *map, unsigned key, TValue val) {
    auto arr = *(String **)&bytecode[22];
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <_ZN5pxtrt6mapSetEPN3pxt6RefMapEjPNS0_12TValueStructE+0x10>)
    mapSetByString(map, arr[key + 1], val);
 8007032:	3101      	adds	r1, #1
    incr(val);
}

//
void mapSet(RefMap *map, unsigned key, TValue val) {
    auto arr = *(String **)&bytecode[22];
 8007034:	681b      	ldr	r3, [r3, #0]
    mapSetByString(map, arr[key + 1], val);
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800703c:	f7ff bfdc 	b.w	8006ff8 <_ZN5pxtrt14mapSetByStringEPN3pxt6RefMapEPNS0_11BoxedStringEPNS0_12TValueStructE>
 8007040:	20002830 	.word	0x20002830

08007044 <_ZN5pxtrt13getGlobalsPtrEv>:
void *getGlobalsPtr() {
#ifdef DEVICE_GROUP_ID_USER
    fiber_set_group(DEVICE_GROUP_ID_USER);
#endif

    return globals;
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <_ZN5pxtrt13getGlobalsPtrEv+0x8>)
}
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	2000282c 	.word	0x2000282c

08007050 <_ZN5pxtrt14runtimeWarningEPN3pxt11BoxedStringE>:

//
void runtimeWarning(String s) {
    // noop for now
}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop

08007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>:
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8007054:	0782      	lsls	r2, r0, #30
#endif

namespace pxt {

//
ValType valType(TValue v) {
 8007056:	b508      	push	{r3, lr}
 8007058:	d108      	bne.n	800706c <_ZN3pxt7valTypeEPNS_12TValueStructE+0x18>
 800705a:	b130      	cbz	r0, 800706a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	f023 0301 	bic.w	r3, r3, #1
            oops(1);
            return ValType::Object;
        }
    } else {
        auto vt = getVTable((RefObject *)v);
        if (vt->magic == VTABLE_MAGIC)
 8007062:	78da      	ldrb	r2, [r3, #3]
 8007064:	2af9      	cmp	r2, #249	; 0xf9
 8007066:	d013      	beq.n	8007090 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x3c>
            return vt->objectType;
        else
            return ValType::Object;
 8007068:	2004      	movs	r0, #4
    }
}
 800706a:	bd08      	pop	{r3, pc}
namespace pxt {

//
ValType valType(TValue v) {
    if (isTagged(v)) {
        if (!v)
 800706c:	2800      	cmp	r0, #0
 800706e:	d0fc      	beq.n	800706a <_ZN3pxt7valTypeEPNS_12TValueStructE+0x16>
            return ValType::Undefined;

        if (isNumber(v) || v == TAG_NAN)
 8007070:	07c3      	lsls	r3, r0, #31
 8007072:	d40f      	bmi.n	8007094 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
 8007074:	280e      	cmp	r0, #14
 8007076:	d00d      	beq.n	8007094 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x40>
            return ValType::Number;
        if (v == TAG_TRUE || v == TAG_FALSE)
 8007078:	2842      	cmp	r0, #66	; 0x42
 800707a:	d00d      	beq.n	8007098 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
 800707c:	280a      	cmp	r0, #10
 800707e:	d00b      	beq.n	8007098 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x44>
            return ValType::Boolean;
        else if (v == TAG_NULL)
 8007080:	2806      	cmp	r0, #6
 8007082:	d0f1      	beq.n	8007068 <_ZN3pxt7valTypeEPNS_12TValueStructE+0x14>
    if (!cond)
        error(code, subcode);
}

inline void oops(int subcode = 0) {
    target_panic(800 + subcode);
 8007084:	f240 3021 	movw	r0, #801	; 0x321
 8007088:	f7f9 f992 	bl	80003b0 <target_panic>
 800708c:	2004      	movs	r0, #4
        if (vt->magic == VTABLE_MAGIC)
            return vt->objectType;
        else
            return ValType::Object;
    }
}
 800708e:	bd08      	pop	{r3, pc}
            return ValType::Object;
        }
    } else {
        auto vt = getVTable((RefObject *)v);
        if (vt->magic == VTABLE_MAGIC)
            return vt->objectType;
 8007090:	7898      	ldrb	r0, [r3, #2]
        else
            return ValType::Object;
    }
}
 8007092:	bd08      	pop	{r3, pc}
    if (isTagged(v)) {
        if (!v)
            return ValType::Undefined;

        if (isNumber(v) || v == TAG_NAN)
            return ValType::Number;
 8007094:	2002      	movs	r0, #2
        if (vt->magic == VTABLE_MAGIC)
            return vt->objectType;
        else
            return ValType::Object;
    }
}
 8007096:	bd08      	pop	{r3, pc}
            return ValType::Undefined;

        if (isNumber(v) || v == TAG_NAN)
            return ValType::Number;
        if (v == TAG_TRUE || v == TAG_FALSE)
            return ValType::Boolean;
 8007098:	2001      	movs	r0, #1
        if (vt->magic == VTABLE_MAGIC)
            return vt->objectType;
        else
            return ValType::Object;
    }
}
 800709a:	bd08      	pop	{r3, pc}

0800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>:
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 800709c:	280e      	cmp	r0, #14
 800709e:	d01e      	beq.n	80070de <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x42>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4604      	mov	r4, r0
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 80070a4:	b180      	cbz	r0, 80070c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x2c>
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 80070a6:	07a3      	lsls	r3, r4, #30
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80070a8:	4620      	mov	r0, r4
 80070aa:	d110      	bne.n	80070ce <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x32>
    if (v == TAG_NAN || v == TAG_UNDEFINED)
        return NAN;
    if (isTagged(v))
        return toInt(v);

    ValType t = valType(v);
 80070ac:	f7ff ffd2 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::Number) {
 80070b0:	2802      	cmp	r0, #2
 80070b2:	d011      	beq.n	80070d8 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x3c>
        BoxedNumber *p = (BoxedNumber *)v;
        return p->num;
    } else if (t == ValType::String) {
 80070b4:	2803      	cmp	r0, #3
 80070b6:	d107      	bne.n	80070c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x2c>
        // TODO avoid allocation
        auto tmp = String_::toNumber((String)v);
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7ff fe03 	bl	8006cc4 <_ZN7String_8toNumberEPN3pxt11BoxedStringE>
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 80070be:	280e      	cmp	r0, #14
    if (t == ValType::Number) {
        BoxedNumber *p = (BoxedNumber *)v;
        return p->num;
    } else if (t == ValType::String) {
        // TODO avoid allocation
        auto tmp = String_::toNumber((String)v);
 80070c0:	4604      	mov	r4, r0
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
    if (v == TAG_NAN || v == TAG_UNDEFINED)
 80070c2:	d001      	beq.n	80070c8 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x2c>
 80070c4:	2c00      	cmp	r4, #0
 80070c6:	d1ee      	bne.n	80070a6 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0xa>
        return NAN;
 80070c8:	2000      	movs	r0, #0
 80070ca:	4906      	ldr	r1, [pc, #24]	; (80070e4 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x48>)
        decr(tmp);
        return r;
    } else {
        return NAN;
    }
}
 80070cc:	bd10      	pop	{r4, pc}
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80070ce:	f000 f80d 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>

NUMBER toDouble(TNumber v) {
    if (v == TAG_NAN || v == TAG_UNDEFINED)
        return NAN;
    if (isTagged(v))
        return toInt(v);
 80070d2:	f004 fb9f 	bl	800b814 <__aeabi_i2d>
        decr(tmp);
        return r;
    } else {
        return NAN;
    }
}
 80070d6:	bd10      	pop	{r4, pc}
        return toInt(v);

    ValType t = valType(v);
    if (t == ValType::Number) {
        BoxedNumber *p = (BoxedNumber *)v;
        return p->num;
 80070d8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
        decr(tmp);
        return r;
    } else {
        return NAN;
    }
}
 80070dc:	bd10      	pop	{r4, pc}
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
    if (v == TAG_NAN || v == TAG_UNDEFINED)
        return NAN;
 80070de:	2000      	movs	r0, #0
 80070e0:	4900      	ldr	r1, [pc, #0]	; (80070e4 <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12+0x48>)
        decr(tmp);
        return r;
    } else {
        return NAN;
    }
}
 80070e2:	4770      	bx	lr
 80070e4:	7ff80000 	.word	0x7ff80000

080070e8 <_ZN3pxt8toDoubleEPNS_12TValueStructE>:
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 80070e8:	f7ff bfd8 	b.w	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>

080070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>:

namespace pxt {

// ES5 9.5, 9.6
unsigned toUInt(TNumber v) {
    if (isNumber(v))
 80070ec:	07c1      	lsls	r1, r0, #31
} // namespace Boolean_

namespace pxt {

// ES5 9.5, 9.6
unsigned toUInt(TNumber v) {
 80070ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f0:	4603      	mov	r3, r0
    if (isNumber(v))
 80070f2:	d501      	bpl.n	80070f8 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc>
inline bool bothNumbers(TValue a, TValue b) {
    return (intptr_t)a & (intptr_t)b & 1;
}

inline int numValue(TValue n) {
    return (intptr_t)n >> 1;
 80070f4:	1040      	asrs	r0, r0, #1
    double rem = fmod(trunc(num), 4294967296.0);
#endif
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

// ES5 9.5, 9.6
unsigned toUInt(TNumber v) {
    if (isNumber(v))
        return numValue(v);
    if (isSpecial(v)) {
 80070f8:	0782      	lsls	r2, r0, #30
 80070fa:	d504      	bpl.n	8007106 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x1a>
        if ((intptr_t)v >> 6)
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	bf14      	ite	ne
 8007100:	2001      	movne	r0, #1
 8007102:	2000      	moveq	r0, #0
    double rem = fmod(trunc(num), 4294967296.0);
#endif
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((intptr_t)v >> 6)
            return 1;
        else
            return 0;
    }
    if (!v)
 8007106:	2800      	cmp	r0, #0
 8007108:	d042      	beq.n	8007190 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 800710a:	f7ff ffc7 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800710e:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 8007112:	460e      	mov	r6, r1
 8007114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007118:	4629      	mov	r1, r5
 800711a:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 800711c:	4604      	mov	r4, r0
 800711e:	f04f 0701 	mov.w	r7, #1
 8007122:	f7fb f9ad 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007126:	b938      	cbnz	r0, 8007138 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4c>
 8007128:	4620      	mov	r0, r4
 800712a:	4629      	mov	r1, r5
 800712c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007130:	4b1f      	ldr	r3, [pc, #124]	; (80071b0 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc4>)
 8007132:	f7fb f98b 	bl	800244c <__wrap___aeabi_dcmpgt>
 8007136:	b368      	cbz	r0, 8007194 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa8>
    }
    if (!v)
        return 0;

    NUMBER num = toDouble(v);
    if (!isnormal(num))
 8007138:	f017 0fff 	tst.w	r7, #255	; 0xff
 800713c:	d128      	bne.n	8007190 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	2200      	movs	r2, #0
 8007144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007148:	f04f 0701 	mov.w	r7, #1
 800714c:	f7fb f998 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007150:	b938      	cbnz	r0, 8007162 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	2200      	movs	r2, #0
 8007158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800715c:	f7fb f92c 	bl	80023b8 <__wrap___aeabi_dcmplt>
 8007160:	b318      	cbz	r0, 80071aa <_ZN3pxt6toUIntEPNS_12TValueStructE+0xbe>
 8007162:	f017 0fff 	tst.w	r7, #255	; 0xff
 8007166:	d113      	bne.n	8007190 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xa4>
        return 0;
#ifdef PXT_USE_FLOAT
    float rem = fmodf(truncf(num), 4294967296.0);
#else
    double rem = fmod(trunc(num), 4294967296.0);
 8007168:	4620      	mov	r0, r4
 800716a:	4631      	mov	r1, r6
 800716c:	f7fb fd70 	bl	8002c50 <trunc>
 8007170:	2200      	movs	r2, #0
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc8>)
 8007174:	f7fb fe3a 	bl	8002dec <fmod>
#endif
    if (rem < 0.0)
 8007178:	2200      	movs	r2, #0
 800717a:	2300      	movs	r3, #0
    if (!isnormal(num))
        return 0;
#ifdef PXT_USE_FLOAT
    float rem = fmodf(truncf(num), 4294967296.0);
#else
    double rem = fmod(trunc(num), 4294967296.0);
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
#endif
    if (rem < 0.0)
 8007180:	f7fb f91a 	bl	80023b8 <__wrap___aeabi_dcmplt>
 8007184:	b940      	cbnz	r0, 8007198 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xac>
        rem += 4294967296.0;
    return (unsigned)rem;
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7fb f9a9 	bl	80024e0 <__wrap___aeabi_d2uiz>
}
 800718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 1;
        else
            return 0;
    }
    if (!v)
        return 0;
 8007190:	2000      	movs	r0, #0
    double rem = fmod(trunc(num), 4294967296.0);
#endif
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007194:	4607      	mov	r7, r0
 8007196:	e7cf      	b.n	8007138 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x4c>
    float rem = fmodf(truncf(num), 4294967296.0);
#else
    double rem = fmod(trunc(num), 4294967296.0);
#endif
    if (rem < 0.0)
        rem += 4294967296.0;
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	2200      	movs	r2, #0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <_ZN3pxt6toUIntEPNS_12TValueStructE+0xc8>)
 80071a0:	f7fb f8c0 	bl	8002324 <__wrap___aeabi_dadd>
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	e7ed      	b.n	8007186 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x9a>
 80071aa:	4607      	mov	r7, r0
 80071ac:	e7d9      	b.n	8007162 <_ZN3pxt6toUIntEPNS_12TValueStructE+0x76>
 80071ae:	bf00      	nop
 80071b0:	7fefffff 	.word	0x7fefffff
 80071b4:	41f00000 	.word	0x41f00000

080071b8 <_ZN3pxt5toIntEPNS_12TValueStructE>:
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80071b8:	f7ff bf98 	b.w	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>

080071bc <_ZN6numops4lslsEPN3pxt12TValueStructES2_>:
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}

//
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	460d      	mov	r5, r1
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80071c0:	f7ff ff94 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80071c4:	4604      	mov	r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7ff ff90 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}

//
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80071cc:	fa04 f000 	lsl.w	r0, r4, r0
inline bool canBeTagged(int) {
    return false;
}
#else
inline bool canBeTagged(int v) {
    return (v << 1) >> 1 == v;
 80071d0:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 80071d2:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80071d6:	d003      	beq.n	80071e0 <_ZN6numops4lslsEPN3pxt12TValueStructES2_+0x24>
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}

//
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80071d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071dc:	f7ff bdc4 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 80071e0:	f043 0001 	orr.w	r0, r3, #1
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}

//
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop

080071e8 <_ZN6numops4asrsEPN3pxt12TValueStructES2_>:
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	460d      	mov	r5, r1
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80071ec:	f7ff ff7e 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80071f0:	4604      	mov	r4, r0
 80071f2:	4628      	mov	r0, r5
 80071f4:	f7ff ff7a 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 80071f8:	fa44 f000 	asr.w	r0, r4, r0
 80071fc:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 80071fe:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007202:	d003      	beq.n	800720c <_ZN6numops4asrsEPN3pxt12TValueStructES2_+0x24>
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007208:	f7ff bdae 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 800720c:	f043 0001 	orr.w	r0, r3, #1
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop

08007214 <_ZN6numops4eorsEPN3pxt12TValueStructES2_>:

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	460d      	mov	r5, r1
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 8007218:	f7ff ff68 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 800721c:	4604      	mov	r4, r0
 800721e:	4628      	mov	r0, r5
 8007220:	f7ff ff64 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 8007224:	4060      	eors	r0, r4
 8007226:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 8007228:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 800722c:	d003      	beq.n	8007236 <_ZN6numops4eorsEPN3pxt12TValueStructES2_+0x22>

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 800722e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007232:	f7ff bd99 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 8007236:	f043 0001 	orr.w	r0, r3, #1

//
TNumber asrs(TNumber a, TNumber b){BITOP(>>)}

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}
 800723a:	bd38      	pop	{r3, r4, r5, pc}

0800723c <_ZN6numops4orrsEPN3pxt12TValueStructES2_>:

//
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	460d      	mov	r5, r1
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 8007240:	f7ff ff54 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 8007244:	4604      	mov	r4, r0
 8007246:	4628      	mov	r0, r5
 8007248:	f7ff ff50 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}

//
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 800724c:	4320      	orrs	r0, r4
 800724e:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 8007250:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007254:	d003      	beq.n	800725e <_ZN6numops4orrsEPN3pxt12TValueStructES2_+0x22>

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}

//
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725a:	f7ff bd85 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 800725e:	f043 0001 	orr.w	r0, r3, #1

//
TNumber eors(TNumber a, TNumber b){BITOP (^)}

//
TNumber orrs(TNumber a, TNumber b){BITOP(|)}
 8007262:	bd38      	pop	{r3, r4, r5, pc}

08007264 <_ZN6numops4bnotEPN3pxt12TValueStructE>:

//
TNumber bnot(TNumber a) {
 8007264:	b508      	push	{r3, lr}
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 8007266:	f7ff ff41 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
//
TNumber orrs(TNumber a, TNumber b){BITOP(|)}

//
TNumber bnot(TNumber a) {
    return fromInt(~toInt(a));
 800726a:	43c0      	mvns	r0, r0
 800726c:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 800726e:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007272:	d003      	beq.n	800727c <_ZN6numops4bnotEPN3pxt12TValueStructE+0x18>
TNumber orrs(TNumber a, TNumber b){BITOP(|)}

//
TNumber bnot(TNumber a) {
    return fromInt(~toInt(a));
}
 8007274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007278:	f7ff bd76 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 800727c:	f043 0001 	orr.w	r0, r3, #1
TNumber orrs(TNumber a, TNumber b){BITOP(|)}

//
TNumber bnot(TNumber a) {
    return fromInt(~toInt(a));
}
 8007280:	bd08      	pop	{r3, pc}
 8007282:	bf00      	nop

08007284 <_ZN6numops4andsEPN3pxt12TValueStructES2_>:

//
TNumber ands(TNumber a, TNumber b) {
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	460d      	mov	r5, r1
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 8007288:	f7ff ff30 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 800728c:	4604      	mov	r4, r0
 800728e:	4628      	mov	r0, r5
 8007290:	f7ff ff2c 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
    return fromInt(~toInt(a));
}

//
TNumber ands(TNumber a, TNumber b) {
    BITOP(&)
 8007294:	4020      	ands	r0, r4
 8007296:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 8007298:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 800729c:	d003      	beq.n	80072a6 <_ZN6numops4andsEPN3pxt12TValueStructES2_+0x22>
}

//
TNumber ands(TNumber a, TNumber b) {
    BITOP(&)
}
 800729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a2:	f7ff bd61 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 80072a6:	f043 0001 	orr.w	r0, r3, #1
}

//
TNumber ands(TNumber a, TNumber b) {
    BITOP(&)
}
 80072aa:	bd38      	pop	{r3, r4, r5, pc}

080072ac <_ZN6numops4lsrsEPN3pxt12TValueStructES2_>:

//
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}

//
TNumber lsrs(TNumber a, TNumber b) {
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	460d      	mov	r5, r1
    return fromUInt(toUInt(a) >> toUInt(b));
 80072b0:	f7ff ff1c 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80072b4:	4604      	mov	r4, r0
 80072b6:	4628      	mov	r0, r5
 80072b8:	f7ff ff18 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80072bc:	fa24 f000 	lsr.w	r0, r4, r0
    return fromDouble(v);
}

TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
 80072c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80072c4:	d203      	bcs.n	80072ce <_ZN6numops4lsrsEPN3pxt12TValueStructES2_+0x22>
        return TAG_NUMBER(v);
 80072c6:	0040      	lsls	r0, r0, #1
 80072c8:	f040 0001 	orr.w	r0, r0, #1
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}

//
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
        return TAG_NUMBER(v);
#endif
    return fromDouble(v);
 80072ce:	f004 fa91 	bl	800b7f4 <__aeabi_ui2d>
TNumber lsls(TNumber a, TNumber b){BITOP(<<)}

//
TNumber lsrs(TNumber a, TNumber b) {
    return fromUInt(toUInt(a) >> toUInt(b));
}
 80072d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
TNumber fromUInt(unsigned v) {
#ifndef PXT_BOX_DEBUG
    if (v <= 0x3fffffff)
        return TAG_NUMBER(v);
#endif
    return fromDouble(v);
 80072d6:	f7ff bc9f 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80072da:	bf00      	nop

080072dc <_ZN3pxt7toFloatEPNS_12TValueStructE>:
    } else {
        return NAN;
    }
}

float toFloat(TNumber v) {
 80072dc:	b508      	push	{r3, lr}
 80072de:	f7ff fedd 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
    // TODO optimize?
    return (float)toDouble(v);
 80072e2:	f004 fb01 	bl	800b8e8 <__aeabi_d2f>
}
 80072e6:	bd08      	pop	{r3, pc}

080072e8 <_ZN6numops4addsEPN3pxt12TValueStructES2_>:

// TODO
// The integer, non-overflow case for add/sub/bit opts is handled in assembly

//
TNumber adds(TNumber a, TNumber b){NUMOP(+)}
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460e      	mov	r6, r1
 80072ec:	f7ff fed6 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fed1 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>

// TODO
// The integer, non-overflow case for add/sub/bit opts is handled in assembly

//
TNumber adds(TNumber a, TNumber b){NUMOP(+)}
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	f7fb f811 	bl	8002324 <__wrap___aeabi_dadd>
 8007302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007306:	f7ff bc87 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800730a:	bf00      	nop

0800730c <_ZN6numops4subsEPN3pxt12TValueStructES2_>:

//
TNumber subs(TNumber a, TNumber b){NUMOP(-)}
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	460e      	mov	r6, r1
 8007310:	f7ff fec4 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007314:	4604      	mov	r4, r0
 8007316:	4630      	mov	r0, r6
 8007318:	460d      	mov	r5, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 800731a:	f7ff febf 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>

//
TNumber adds(TNumber a, TNumber b){NUMOP(+)}

//
TNumber subs(TNumber a, TNumber b){NUMOP(-)}
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7fb f815 	bl	8002354 <__wrap___aeabi_dsub>
 800732a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800732e:	f7ff bc73 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007332:	bf00      	nop

08007334 <_ZN6numops4mulsEPN3pxt12TValueStructES2_>:
inline bool isSpecial(TValue v) {
    return (intptr_t)v & 2;
}

inline bool bothNumbers(TValue a, TValue b) {
    return (intptr_t)a & (intptr_t)b & 1;
 8007334:	ea00 0301 	and.w	r3, r0, r1

//
TNumber muls(TNumber a, TNumber b) {
    if (bothNumbers(a, b)) {
 8007338:	07db      	lsls	r3, r3, #31
 800733a:	d503      	bpl.n	8007344 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
        int aa = (int)a;
        int bb = (int)b;
        // if both operands fit 15 bits, the result will not overflow int
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 800733c:	13c3      	asrs	r3, r0, #15
 800733e:	3301      	adds	r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d910      	bls.n	8007366 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x32>

//
TNumber subs(TNumber a, TNumber b){NUMOP(-)}

//
TNumber muls(TNumber a, TNumber b) {
 8007344:	b5d0      	push	{r4, r6, r7, lr}
 8007346:	460c      	mov	r4, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007348:	f7ff fea8 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff fea3 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
            // it may overflow 31 bit int though - use fromInt to convert properly
            return fromInt((aa >> 1) * (bb >> 1));
        }
    }
    NUMOP(*)
 8007356:	4632      	mov	r2, r6
 8007358:	463b      	mov	r3, r7
 800735a:	f7fa ffcb 	bl	80022f4 <__wrap___aeabi_dmul>
}
 800735e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
            // it may overflow 31 bit int though - use fromInt to convert properly
            return fromInt((aa >> 1) * (bb >> 1));
        }
    }
    NUMOP(*)
 8007362:	f7ff bc59 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
TNumber muls(TNumber a, TNumber b) {
    if (bothNumbers(a, b)) {
        int aa = (int)a;
        int bb = (int)b;
        // if both operands fit 15 bits, the result will not overflow int
        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {
 8007366:	13cb      	asrs	r3, r1, #15
 8007368:	3301      	adds	r3, #1
 800736a:	2b01      	cmp	r3, #1
 800736c:	d8ea      	bhi.n	8007344 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x10>
            // it may overflow 31 bit int though - use fromInt to convert properly
            return fromInt((aa >> 1) * (bb >> 1));
 800736e:	1040      	asrs	r0, r0, #1
 8007370:	1049      	asrs	r1, r1, #1
 8007372:	fb01 f000 	mul.w	r0, r1, r0
inline bool canBeTagged(int) {
    return false;
}
#else
inline bool canBeTagged(int v) {
    return (v << 1) >> 1 == v;
 8007376:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 8007378:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 800737c:	d001      	beq.n	8007382 <_ZN6numops4mulsEPN3pxt12TValueStructES2_+0x4e>
 800737e:	f7ff bcf3 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
        return TAG_NUMBER(v);
 8007382:	f043 0001 	orr.w	r0, r3, #1
            // it may overflow 31 bit int though - use fromInt to convert properly
            return fromInt((aa >> 1) * (bb >> 1));
        }
    }
    NUMOP(*)
}
 8007386:	4770      	bx	lr

08007388 <_ZN6numops3divEPN3pxt12TValueStructES2_>:

//
TNumber div(TNumber a, TNumber b){NUMOP(/)}
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	460e      	mov	r6, r1
 800738c:	f7ff fe86 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007390:	4604      	mov	r4, r0
 8007392:	4630      	mov	r0, r6
 8007394:	460d      	mov	r5, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007396:	f7ff fe81 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
    }
    NUMOP(*)
}

//
TNumber div(TNumber a, TNumber b){NUMOP(/)}
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7fa ff8f 	bl	80022c4 <__wrap___aeabi_ddiv>
 80073a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073aa:	f7ff bc35 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80073ae:	bf00      	nop

080073b0 <_ZN6numops3modEPN3pxt12TValueStructES2_>:

//
TNumber mod(TNumber a, TNumber b) {
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	460c      	mov	r4, r1
    if (isNumber(a) && isNumber(b) && numValue(b))
 80073b4:	07c1      	lsls	r1, r0, #31

//
TNumber div(TNumber a, TNumber b){NUMOP(/)}

//
TNumber mod(TNumber a, TNumber b) {
 80073b6:	4603      	mov	r3, r0
    if (isNumber(a) && isNumber(b) && numValue(b))
 80073b8:	d503      	bpl.n	80073c2 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 80073ba:	07e2      	lsls	r2, r4, #31
 80073bc:	d501      	bpl.n	80073c2 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x12>
 80073be:	0862      	lsrs	r2, r4, #1
 80073c0:	d111      	bne.n	80073e6 <_ZN6numops3modEPN3pxt12TValueStructES2_+0x36>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fe6a 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80073c8:	4606      	mov	r6, r0
 80073ca:	4620      	mov	r0, r4
 80073cc:	460f      	mov	r7, r1
 80073ce:	f7ff fe65 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>

//
TNumber mod(TNumber a, TNumber b) {
    if (isNumber(a) && isNumber(b) && numValue(b))
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80073d2:	460b      	mov	r3, r1
 80073d4:	4602      	mov	r2, r0
 80073d6:	4639      	mov	r1, r7
 80073d8:	4630      	mov	r0, r6
 80073da:	f7fb fd07 	bl	8002dec <fmod>
}
 80073de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

//
TNumber mod(TNumber a, TNumber b) {
    if (isNumber(a) && isNumber(b) && numValue(b))
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
 80073e2:	f7ff bc19 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
    if (rem < 0.0)
        rem += 4294967296.0;
    return (unsigned)rem;
}
int toInt(TNumber v) {
    return (int)toUInt(v);
 80073e6:	f7ff fe81 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
 80073ea:	4605      	mov	r5, r0
 80073ec:	4620      	mov	r0, r4
 80073ee:	f7ff fe7d 	bl	80070ec <_ZN3pxt6toUIntEPNS_12TValueStructE>
TNumber div(TNumber a, TNumber b){NUMOP(/)}

//
TNumber mod(TNumber a, TNumber b) {
    if (isNumber(a) && isNumber(b) && numValue(b))
        BITOP(%)
 80073f2:	fb95 f3f0 	sdiv	r3, r5, r0
 80073f6:	fb03 5010 	mls	r0, r3, r0, r5
 80073fa:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 80073fc:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007400:	d003      	beq.n	800740a <_ZN6numops3modEPN3pxt12TValueStructES2_+0x5a>
//
TNumber mod(TNumber a, TNumber b) {
    if (isNumber(a) && isNumber(b) && numValue(b))
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}
 8007402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007406:	f7ff bcaf 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 800740a:	f043 0001 	orr.w	r0, r3, #1
//
TNumber mod(TNumber a, TNumber b) {
    if (isNumber(a) && isNumber(b) && numValue(b))
        BITOP(%)
    return fromDouble(fmod(toDouble(a), toDouble(b)));
}
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007410 <_ZN5Math_3powEPN3pxt12TValueStructES2_>:

} // namespace numops

namespace Math_ {
//
TNumber pow(TNumber x, TNumber y) {
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	460e      	mov	r6, r1
 8007414:	f7ff fe42 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007418:	4604      	mov	r4, r0
 800741a:	4630      	mov	r0, r6
 800741c:	460d      	mov	r5, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 800741e:	f7ff fe3d 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
TNumber pow(TNumber x, TNumber y) {
#ifdef PXT_POWI
    // regular pow() from math.h is 4k of code
    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));
#else
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7fb f8c7 	bl	80025bc <pow>
#endif
}
 800742e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
TNumber pow(TNumber x, TNumber y) {
#ifdef PXT_POWI
    // regular pow() from math.h is 4k of code
    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));
#else
    return fromDouble(::pow(toDouble(x), toDouble(y)));
 8007432:	f7ff bbf1 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007436:	bf00      	nop

08007438 <_ZN5Math_5atan2EPN3pxt12TValueStructES2_>:
#endif
}

//
TNumber atan2(TNumber y, TNumber x) {
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	460e      	mov	r6, r1
 800743c:	f7ff fe2e 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007440:	4604      	mov	r4, r0
 8007442:	4630      	mov	r0, r6
 8007444:	460d      	mov	r5, r1
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007446:	f7ff fe29 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
#endif
}

//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7fb f92f 	bl	80026b4 <atan2>
}
 8007456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#endif
}

//
TNumber atan2(TNumber y, TNumber x) {
    return fromDouble(::atan2(toDouble(y), toDouble(x)));
 800745a:	f7ff bbdd 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800745e:	bf00      	nop

08007460 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_>:
    return fromDouble(randomDouble());
}

//
TNumber randomRange(TNumber min, TNumber max) {
    if (isNumber(min) && isNumber(max)) {
 8007460:	07c2      	lsls	r2, r0, #31
TNumber random() {
    return fromDouble(randomDouble());
}

//
TNumber randomRange(TNumber min, TNumber max) {
 8007462:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007466:	460c      	mov	r4, r1
    if (isNumber(min) && isNumber(max)) {
 8007468:	d50a      	bpl.n	8007480 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x20>
 800746a:	07cb      	lsls	r3, r1, #31
 800746c:	d508      	bpl.n	8007480 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x20>
inline bool bothNumbers(TValue a, TValue b) {
    return (intptr_t)a & (intptr_t)b & 1;
}

inline int numValue(TValue n) {
    return (intptr_t)n >> 1;
 800746e:	104c      	asrs	r4, r1, #1
 8007470:	1043      	asrs	r3, r0, #1
        int mini = numValue(min);
        int maxi = numValue(max);
        if (mini > maxi) {
 8007472:	429c      	cmp	r4, r3
 8007474:	db3e      	blt.n	80074f4 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x94>
            int temp = mini;
            mini = maxi;
            maxi = temp;
        }
        if (maxi == mini)
 8007476:	d13a      	bne.n	80074ee <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x8e>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 8007478:	f040 0001 	orr.w	r0, r0, #1
            return fromDouble(mind);
        else {
            return fromDouble(mind + randomDouble() * (maxd - mind));
        }
    }
}
 800747c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007480:	f7ff fe0c 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007484:	4606      	mov	r6, r0
 8007486:	460f      	mov	r7, r1
 8007488:	4620      	mov	r0, r4
 800748a:	f7ff fe07 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
        else
            return fromInt(mini + getRandom(maxi - mini));
    } else {
        auto mind = toDouble(min);
        auto maxd = toDouble(max);
        if (mind > maxd) {
 800748e:	4632      	mov	r2, r6
 8007490:	463b      	mov	r3, r7
 8007492:	4604      	mov	r4, r0
 8007494:	460d      	mov	r5, r1
 8007496:	f7fa ff8f 	bl	80023b8 <__wrap___aeabi_dcmplt>
 800749a:	b990      	cbnz	r0, 80074c2 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x62>
            auto temp = mind;
            mind = maxd;
            maxd = temp;
        }
        if (maxd == mind)
 800749c:	4632      	mov	r2, r6
 800749e:	463b      	mov	r3, r7
 80074a0:	4620      	mov	r0, r4
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7fa ff6e 	bl	8002384 <__wrap___aeabi_dcmpeq>
 80074a8:	b128      	cbz	r0, 80074b6 <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x56>
            return fromDouble(mind);
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
        else {
            return fromDouble(mind + randomDouble() * (maxd - mind));
        }
    }
}
 80074ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            auto temp = mind;
            mind = maxd;
            maxd = temp;
        }
        if (maxd == mind)
            return fromDouble(mind);
 80074b2:	f7ff bbb1 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
        if (maxi == mini)
            return fromInt(mini);
        else
            return fromInt(mini + getRandom(maxi - mini));
    } else {
        auto mind = toDouble(min);
 80074ba:	4634      	mov	r4, r6
 80074bc:	463d      	mov	r5, r7
        auto maxd = toDouble(max);
 80074be:	4616      	mov	r6, r2
 80074c0:	461f      	mov	r7, r3
            maxd = temp;
        }
        if (maxd == mind)
            return fromDouble(mind);
        else {
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80074c2:	f7fe fe55 	bl	8006170 <_ZN5Math_12randomDoubleEv>
 80074c6:	4680      	mov	r8, r0
 80074c8:	4689      	mov	r9, r1
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7fa ff3f 	bl	8002354 <__wrap___aeabi_dsub>
 80074d6:	4642      	mov	r2, r8
 80074d8:	464b      	mov	r3, r9
 80074da:	f7fa ff0b 	bl	80022f4 <__wrap___aeabi_dmul>
 80074de:	4622      	mov	r2, r4
 80074e0:	462b      	mov	r3, r5
 80074e2:	f7fa ff1f 	bl	8002324 <__wrap___aeabi_dadd>
        }
    }
}
 80074e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            maxd = temp;
        }
        if (maxd == mind)
            return fromDouble(mind);
        else {
            return fromDouble(mind + randomDouble() * (maxd - mind));
 80074ea:	f7ff bb95 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80074ee:	4622      	mov	r2, r4
 80074f0:	461c      	mov	r4, r3
 80074f2:	4613      	mov	r3, r2
            maxi = temp;
        }
        if (maxi == mini)
            return fromInt(mini);
        else
            return fromInt(mini + getRandom(maxi - mini));
 80074f4:	1b18      	subs	r0, r3, r4
 80074f6:	f7ff f9fd 	bl	80068f4 <_ZN3pxt9getRandomEj>
 80074fa:	4420      	add	r0, r4
inline bool canBeTagged(int) {
    return false;
}
#else
inline bool canBeTagged(int v) {
    return (v << 1) >> 1 == v;
 80074fc:	0043      	lsls	r3, r0, #1
    // TODO optimize
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
 80074fe:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8007502:	d003      	beq.n	800750c <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0xac>
            return fromDouble(mind);
        else {
            return fromDouble(mind + randomDouble() * (maxd - mind));
        }
    }
}
 8007504:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007508:	f7ff bc2e 	b.w	8006d68 <_ZN3pxt7fromIntEi.part.8>
    return fromDouble(r);
}

TNumber fromInt(int v) {
    if (canBeTagged(v))
        return TAG_NUMBER(v);
 800750c:	f043 0001 	orr.w	r0, r3, #1
 8007510:	e7b4      	b.n	800747c <_ZN5Math_11randomRangeEPN3pxt12TValueStructES2_+0x1c>
 8007512:	bf00      	nop

08007514 <_ZN5Math_3logEPN3pxt12TValueStructE>:
}

#define SINGLE(op) return fromDouble(::op(toDouble(x)));

//
TNumber log(TNumber x){SINGLE(log)}
 8007514:	b508      	push	{r3, lr}
 8007516:	f7ff fdc1 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800751a:	f7fb f80b 	bl	8002534 <log>
 800751e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007522:	f7ff bb79 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007526:	bf00      	nop

08007528 <_ZN5Math_5log10EPN3pxt12TValueStructE>:

//
TNumber log10(TNumber x){SINGLE(log10)}
 8007528:	b508      	push	{r3, lr}
 800752a:	f7ff fdb7 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800752e:	f7fb f831 	bl	8002594 <log10>
 8007532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007536:	f7ff bb6f 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800753a:	bf00      	nop

0800753c <_ZN5Math_3tanEPN3pxt12TValueStructE>:

//
TNumber tan(TNumber x){SINGLE(tan)}
 800753c:	b508      	push	{r3, lr}
 800753e:	f7ff fdad 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007542:	f7fb f8a9 	bl	8002698 <tan>
 8007546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800754a:	f7ff bb65 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800754e:	bf00      	nop

08007550 <_ZN5Math_3sinEPN3pxt12TValueStructE>:

//
TNumber sin(TNumber x){SINGLE(sin)}
 8007550:	b508      	push	{r3, lr}
 8007552:	f7ff fda3 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007556:	f7fb f877 	bl	8002648 <sin>
 800755a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800755e:	f7ff bb5b 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007562:	bf00      	nop

08007564 <_ZN5Math_3cosEPN3pxt12TValueStructE>:

//
TNumber cos(TNumber x){SINGLE(cos)}
 8007564:	b508      	push	{r3, lr}
 8007566:	f7ff fd99 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800756a:	f7fb f87b 	bl	8002664 <cos>
 800756e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007572:	f7ff bb51 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007576:	bf00      	nop

08007578 <_ZN5Math_4atanEPN3pxt12TValueStructE>:

//
TNumber atan(TNumber x){SINGLE(atan)}
 8007578:	b508      	push	{r3, lr}
 800757a:	f7ff fd8f 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800757e:	f7fb f8c3 	bl	8002708 <atan>
 8007582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007586:	f7ff bb47 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800758a:	bf00      	nop

0800758c <_ZN5Math_4asinEPN3pxt12TValueStructE>:

//
TNumber asin(TNumber x){SINGLE(asin)}
 800758c:	b508      	push	{r3, lr}
 800758e:	f7ff fd85 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007592:	f7fb f90f 	bl	80027b4 <asin>
 8007596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800759a:	f7ff bb3d 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800759e:	bf00      	nop

080075a0 <_ZN5Math_4acosEPN3pxt12TValueStructE>:

//
TNumber acos(TNumber x){SINGLE(acos)}
 80075a0:	b508      	push	{r3, lr}
 80075a2:	f7ff fd7b 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80075a6:	f7fa fe27 	bl	80021f8 <acos>
 80075aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075ae:	f7ff bb33 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80075b2:	bf00      	nop

080075b4 <_ZN5Math_4sqrtEPN3pxt12TValueStructE>:

//
TNumber sqrt(TNumber x){SINGLE(sqrt)}
 80075b4:	b508      	push	{r3, lr}
 80075b6:	f7ff fd71 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80075ba:	f7fa ffad 	bl	8002518 <sqrt>
 80075be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075c2:	f7ff bb29 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80075c6:	bf00      	nop

080075c8 <_ZN5Math_5floorEPN3pxt12TValueStructE>:

//
TNumber floor(TNumber x){SINGLE(floor)}
 80075c8:	b508      	push	{r3, lr}
 80075ca:	f7ff fd67 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80075ce:	f7fb fb85 	bl	8002cdc <floor>
 80075d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075d6:	f7ff bb1f 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80075da:	bf00      	nop

080075dc <_ZN5Math_4ceilEPN3pxt12TValueStructE>:

//
TNumber ceil(TNumber x){SINGLE(ceil)}
 80075dc:	b508      	push	{r3, lr}
 80075de:	f7ff fd5d 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80075e2:	f7fb fbbf 	bl	8002d64 <ceil>
 80075e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075ea:	f7ff bb15 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 80075ee:	bf00      	nop

080075f0 <_ZN5Math_5truncEPN3pxt12TValueStructE>:

//
TNumber trunc(TNumber x){SINGLE(trunc)}
 80075f0:	b508      	push	{r3, lr}
 80075f2:	f7ff fd53 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80075f6:	f7fb fb2b 	bl	8002c50 <trunc>
 80075fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075fe:	f7ff bb0b 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 8007602:	bf00      	nop

08007604 <_ZN5Math_5roundEPN3pxt12TValueStructE>:

//
TNumber round(TNumber x) {
 8007604:	b508      	push	{r3, lr}
 8007606:	f7ff fd49 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for
    // consistency between simulator and device. The following does rounding with ties (x.5) going
    // towards positive infinity.
    return fromDouble(::floor(toDouble(x) + 0.5));
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <_ZN5Math_5roundEPN3pxt12TValueStructE+0x1c>)
 800760c:	2200      	movs	r2, #0
 800760e:	f7fa fe89 	bl	8002324 <__wrap___aeabi_dadd>
 8007612:	f7fb fb63 	bl	8002cdc <floor>
}
 8007616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//
TNumber round(TNumber x) {
    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for
    // consistency between simulator and device. The following does rounding with ties (x.5) going
    // towards positive infinity.
    return fromDouble(::floor(toDouble(x) + 0.5));
 800761a:	f7ff bafd 	b.w	8006c18 <_ZN3pxt10fromDoubleEd>
 800761e:	bf00      	nop
 8007620:	3fe00000 	.word	0x3fe00000

08007624 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>:
    else
        return a == b;
}

bool eqq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
 8007624:	280e      	cmp	r0, #14
 8007626:	d02e      	beq.n	8007686 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x62>
 8007628:	290e      	cmp	r1, #14
 800762a:	d02c      	beq.n	8007686 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x62>
        return false;

    if (a == b)
 800762c:	4288      	cmp	r0, r1
        return toDouble(a) == toDouble(b);
    else
        return a == b;
}

bool eqq_bool(TValue a, TValue b) {
 800762e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007630:	4605      	mov	r5, r0
    if (a == TAG_NAN || b == TAG_NAN)
        return false;

    if (a == b)
 8007632:	d02a      	beq.n	800768a <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x66>
inline bool isSpecial(TValue v) {
    return (intptr_t)v & 2;
}

inline bool bothNumbers(TValue a, TValue b) {
    return (intptr_t)a & (intptr_t)b & 1;
 8007634:	ea00 0201 	and.w	r2, r0, r1
        return true;

    if (bothNumbers(a, b))
 8007638:	07d2      	lsls	r2, r2, #31
 800763a:	d501      	bpl.n	8007640 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x1c>
        return a == b;
}

bool eqq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;
 800763c:	2000      	movs	r0, #0

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 800763e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007640:	460c      	mov	r4, r1
        return true;

    if (bothNumbers(a, b))
        return false;

    ValType ta = valType(a);
 8007642:	f7ff fd07 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8007646:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff fd03 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>

    if (ta != tb)
 800764e:	4286      	cmp	r6, r0
 8007650:	d1f4      	bne.n	800763c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
#ifndef PXT_BOX_DEBUG
    int aa = (int)a;
    int bb = (int)b;

    // if at least one of the values is tagged, they are not equal
    if ((aa | bb) & 3)
 8007652:	ea45 0304 	orr.w	r3, r5, r4
 8007656:	079b      	lsls	r3, r3, #30
 8007658:	d1f0      	bne.n	800763c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
        return false;
#endif

    if (ta == ValType::String)
 800765a:	2e03      	cmp	r6, #3
 800765c:	d017      	beq.n	800768e <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x6a>
        return String_::compare((String)a, (String)b) == 0;
    else if (ta == ValType::Number)
 800765e:	2e02      	cmp	r6, #2
 8007660:	d1ec      	bne.n	800763c <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_+0x18>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff fd1a 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007668:	4606      	mov	r6, r0
 800766a:	4620      	mov	r0, r4
 800766c:	460f      	mov	r7, r1
 800766e:	f7ff fd15 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
#endif

    if (ta == ValType::String)
        return String_::compare((String)a, (String)b) == 0;
    else if (ta == ValType::Number)
        return toDouble(a) == toDouble(b);
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7fa fe83 	bl	8002384 <__wrap___aeabi_dcmpeq>
 800767e:	3000      	adds	r0, #0
 8007680:	bf18      	it	ne
 8007682:	2001      	movne	r0, #1

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 8007684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return a == b;
}

bool eqq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;
 8007686:	2000      	movs	r0, #0

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 8007688:	4770      	bx	lr
bool eqq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;

    if (a == b)
        return true;
 800768a:	2001      	movs	r0, #1

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 800768c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

int compare(String a, String b) {
    if (a == b)
        return 0;

    int compareResult = strcmp(a->data, b->data);
 800768e:	1da1      	adds	r1, r4, #6
 8007690:	1da8      	adds	r0, r5, #6
 8007692:	f7fb fcdb 	bl	800304c <strcmp>
    if (compareResult < 0)
        return -1;
    else if (compareResult > 0)
 8007696:	fab0 f080 	clz	r0, r0
 800769a:	0940      	lsrs	r0, r0, #5

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769e:	bf00      	nop

080076a0 <_ZN6numops3eqqEPN3pxt12TValueStructES2_>:
TNumber neq(TNumber a, TNumber b) {
    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
}

//
TNumber eqq(TNumber a, TNumber b) {
 80076a0:	b508      	push	{r3, lr}
    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80076a2:	f7ff ffbf 	bl	8007624 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 80076a6:	2800      	cmp	r0, #0
}
 80076a8:	bf14      	ite	ne
 80076aa:	2042      	movne	r0, #66	; 0x42
 80076ac:	200a      	moveq	r0, #10
 80076ae:	bd08      	pop	{r3, pc}

080076b0 <_ZN6numops4neqqEPN3pxt12TValueStructES2_>:

//
TNumber neqq(TNumber a, TNumber b) {
 80076b0:	b508      	push	{r3, lr}
    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80076b2:	f7ff ffb7 	bl	8007624 <_ZN3pxt8eqq_boolEPNS_12TValueStructES1_>
 80076b6:	2800      	cmp	r0, #0
}
 80076b8:	bf0c      	ite	eq
 80076ba:	2042      	moveq	r0, #66	; 0x42
 80076bc:	200a      	movne	r0, #10
 80076be:	bd08      	pop	{r3, pc}

080076c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>:

    return eq_core(a, b, ta);
}

bool eq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
 80076c0:	280e      	cmp	r0, #14
 80076c2:	d047      	beq.n	8007754 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x94>
 80076c4:	290e      	cmp	r1, #14
        return false;

    return eq_core(a, b, ta);
}

bool eq_bool(TValue a, TValue b) {
 80076c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c8:	460c      	mov	r4, r1
    if (a == TAG_NAN || b == TAG_NAN)
 80076ca:	d026      	beq.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 80076cc:	2806      	cmp	r0, #6
 80076ce:	4605      	mov	r5, r0
 80076d0:	d062      	beq.n	8007798 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xd8>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 80076d2:	2842      	cmp	r0, #66	; 0x42
 80076d4:	d040      	beq.n	8007758 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x98>
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
 80076d6:	280a      	cmp	r0, #10
 80076d8:	d032      	beq.n	8007740 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x80>
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 80076da:	2906      	cmp	r1, #6
 80076dc:	4603      	mov	r3, r0
 80076de:	d073      	beq.n	80077c8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x108>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 80076e0:	2c42      	cmp	r4, #66	; 0x42
 80076e2:	d032      	beq.n	800774a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x8a>
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
        return TAG_NUMBER(0);
 80076e4:	2c0a      	cmp	r4, #10
 80076e6:	bf14      	ite	ne
 80076e8:	4622      	movne	r2, r4
 80076ea:	2201      	moveq	r2, #1

bool eq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;

    if (eqFixup(a) == eqFixup(b))
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d02f      	beq.n	8007750 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x90>
 80076f0:	ea04 0305 	and.w	r3, r4, r5
        return true;

    if (bothNumbers(a, b))
 80076f4:	07da      	lsls	r2, r3, #31
 80076f6:	d410      	bmi.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return false;

    ValType ta = valType(a);
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7ff fcab 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 80076fe:	4606      	mov	r6, r0
    ValType tb = valType(b);
 8007700:	4620      	mov	r0, r4
 8007702:	f7ff fca7 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>

    if ((ta == ValType::String && tb == ValType::Number) ||
 8007706:	2e03      	cmp	r6, #3
 8007708:	d009      	beq.n	800771e <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5e>
 800770a:	2803      	cmp	r0, #3
 800770c:	d030      	beq.n	8007770 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb0>
        (tb == ValType::String && ta == ValType::Number))
        return toDouble(a) == toDouble(b);

    if (ta == ValType::Boolean) {
 800770e:	2e01      	cmp	r6, #1
 8007710:	d048      	beq.n	80077a4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xe4>
        a = eqFixup(a);
        ta = ValType::Number;
    }
    if (tb == ValType::Boolean) {
 8007712:	2801      	cmp	r0, #1
 8007714:	d022      	beq.n	800775c <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x9c>
        b = eqFixup(b);
        tb = ValType::Number;
    }

    if (ta != tb)
 8007716:	4286      	cmp	r6, r0
 8007718:	d005      	beq.n	8007726 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x66>
    return eq_core(a, b, ta);
}

bool eq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;
 800771a:	2000      	movs	r0, #0

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 800771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;

    ValType ta = valType(a);
    ValType tb = valType(b);

    if ((ta == ValType::String && tb == ValType::Number) ||
 800771e:	2802      	cmp	r0, #2
 8007720:	d028      	beq.n	8007774 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb4>
 8007722:	2803      	cmp	r0, #3
 8007724:	d1f5      	bne.n	8007712 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x52>
#ifndef PXT_BOX_DEBUG
    int aa = (int)a;
    int bb = (int)b;

    // if at least one of the values is tagged, they are not equal
    if ((aa | bb) & 3)
 8007726:	ea45 0304 	orr.w	r3, r5, r4
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d1f5      	bne.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return false;
#endif

    if (ta == ValType::String)
 800772e:	2e03      	cmp	r6, #3
 8007730:	d04c      	beq.n	80077cc <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x10c>
        return String_::compare((String)a, (String)b) == 0;
    else if (ta == ValType::Number)
 8007732:	2e02      	cmp	r6, #2
 8007734:	d01e      	beq.n	8007774 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xb4>
        return toDouble(a) == toDouble(b);
    else
        return a == b;
 8007736:	1b60      	subs	r0, r4, r5
 8007738:	fab0 f080 	clz	r0, r0
 800773c:	0940      	lsrs	r0, r0, #5

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
        return TAG_NUMBER(0);
 8007740:	2301      	movs	r3, #1
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 8007742:	2c06      	cmp	r4, #6
 8007744:	d0d8      	beq.n	80076f8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x38>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 8007746:	2c42      	cmp	r4, #66	; 0x42
 8007748:	d1cc      	bne.n	80076e4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x24>
        return TAG_NUMBER(1);
 800774a:	2203      	movs	r2, #3

bool eq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;

    if (eqFixup(a) == eqFixup(b))
 800774c:	429a      	cmp	r2, r3
 800774e:	d1cf      	bne.n	80076f0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x30>
        return true;
 8007750:	2001      	movs	r0, #1

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 8007752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return eq_core(a, b, ta);
}

bool eq_bool(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return false;
 8007754:	2000      	movs	r0, #0

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 8007756:	4770      	bx	lr

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
        return TAG_NUMBER(1);
 8007758:	2303      	movs	r3, #3
 800775a:	e7f2      	b.n	8007742 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x82>
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 800775c:	2c06      	cmp	r4, #6
 800775e:	d041      	beq.n	80077e4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x124>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 8007760:	2c42      	cmp	r4, #66	; 0x42
 8007762:	d0da      	beq.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
 8007764:	2c0a      	cmp	r4, #10
        a = eqFixup(a);
        ta = ValType::Number;
    }
    if (tb == ValType::Boolean) {
        b = eqFixup(b);
        tb = ValType::Number;
 8007766:	f04f 0002 	mov.w	r0, #2
TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
 800776a:	d1d4      	bne.n	8007716 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>
        return TAG_NUMBER(0);
 800776c:	2401      	movs	r4, #1
 800776e:	e7d2      	b.n	8007716 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>

    ValType ta = valType(a);
    ValType tb = valType(b);

    if ((ta == ValType::String && tb == ValType::Number) ||
        (tb == ValType::String && ta == ValType::Number))
 8007770:	2e02      	cmp	r6, #2
 8007772:	d121      	bne.n	80077b8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xf8>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007774:	4628      	mov	r0, r5
 8007776:	f7ff fc91 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 800777a:	4606      	mov	r6, r0
 800777c:	4620      	mov	r0, r4
 800777e:	460f      	mov	r7, r1
 8007780:	f7ff fc8c 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
#endif

    if (ta == ValType::String)
        return String_::compare((String)a, (String)b) == 0;
    else if (ta == ValType::Number)
        return toDouble(a) == toDouble(b);
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7fa fdfa 	bl	8002384 <__wrap___aeabi_dcmpeq>
 8007790:	3000      	adds	r0, #0
 8007792:	bf18      	it	ne
 8007794:	2001      	movne	r0, #1

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 8007796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 8007798:	2906      	cmp	r1, #6
 800779a:	d0d9      	beq.n	8007750 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x90>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 800779c:	2942      	cmp	r1, #66	; 0x42
 800779e:	d0a7      	beq.n	80076f0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x30>
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e79f      	b.n	80076e4 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x24>
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 80077a4:	2d06      	cmp	r5, #6
 80077a6:	d00c      	beq.n	80077c2 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x102>
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 80077a8:	2d42      	cmp	r5, #66	; 0x42
        (tb == ValType::String && ta == ValType::Number))
        return toDouble(a) == toDouble(b);

    if (ta == ValType::Boolean) {
        a = eqFixup(a);
        ta = ValType::Number;
 80077aa:	f04f 0602 	mov.w	r6, #2
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
 80077ae:	d017      	beq.n	80077e0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x120>
        return TAG_NUMBER(1);
    if (v == TAG_FALSE)
 80077b0:	2d0a      	cmp	r5, #10
 80077b2:	d1ae      	bne.n	8007712 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x52>
        return TAG_NUMBER(0);
 80077b4:	2501      	movs	r5, #1
 80077b6:	e7ac      	b.n	8007712 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x52>

    if ((ta == ValType::String && tb == ValType::Number) ||
        (tb == ValType::String && ta == ValType::Number))
        return toDouble(a) == toDouble(b);

    if (ta == ValType::Boolean) {
 80077b8:	2e01      	cmp	r6, #1
 80077ba:	d1ae      	bne.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
    else
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
 80077bc:	2d06      	cmp	r5, #6
 80077be:	d1f3      	bne.n	80077a8 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0xe8>
 80077c0:	e7ab      	b.n	800771a <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x5a>
        (tb == ValType::String && ta == ValType::Number))
        return toDouble(a) == toDouble(b);

    if (ta == ValType::Boolean) {
        a = eqFixup(a);
        ta = ValType::Number;
 80077c2:	2602      	movs	r6, #2
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
 80077c4:	2500      	movs	r5, #0
 80077c6:	e7a4      	b.n	8007712 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x52>
 80077c8:	2200      	movs	r2, #0
 80077ca:	e78f      	b.n	80076ec <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x2c>
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
    if (a == b)
 80077cc:	42ac      	cmp	r4, r5
 80077ce:	d0bf      	beq.n	8007750 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x90>
        return 0;

    int compareResult = strcmp(a->data, b->data);
 80077d0:	1da1      	adds	r1, r4, #6
 80077d2:	1da8      	adds	r0, r5, #6
 80077d4:	f7fb fc3a 	bl	800304c <strcmp>
    if (compareResult < 0)
        return -1;
    else if (compareResult > 0)
 80077d8:	fab0 f080 	clz	r0, r0
 80077dc:	0940      	lsrs	r0, r0, #5

    if (ta != tb)
        return false;

    return eq_core(a, b, ta);
}
 80077de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
    if (v == TAG_TRUE)
        return TAG_NUMBER(1);
 80077e0:	2503      	movs	r5, #3
 80077e2:	e796      	b.n	8007712 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x52>
        a = eqFixup(a);
        ta = ValType::Number;
    }
    if (tb == ValType::Boolean) {
        b = eqFixup(b);
        tb = ValType::Number;
 80077e4:	2002      	movs	r0, #2
        return TAG_FALSE;
}

TNumber eqFixup(TNumber v) {
    if (v == TAG_NULL)
        return TAG_UNDEFINED;
 80077e6:	2400      	movs	r4, #0
 80077e8:	e795      	b.n	8007716 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_+0x56>
 80077ea:	bf00      	nop

080077ec <_ZN3pxt9switch_eqEPNS_12TValueStructES1_>:
}

// TODO move to assembly
//
bool switch_eq(TValue a, TValue b) {
    if (eq_bool(a, b)) {
 80077ec:	f7ff bf68 	b.w	80076c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>

080077f0 <_ZN6numops2eqEPN3pxt12TValueStructES2_>:

//
TNumber gt(TNumber a, TNumber b){CMPOP(>)}

//
TNumber eq(TNumber a, TNumber b) {
 80077f0:	b508      	push	{r3, lr}
    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 80077f2:	f7ff ff65 	bl	80076c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 80077f6:	2800      	cmp	r0, #0
}
 80077f8:	bf14      	ite	ne
 80077fa:	2042      	movne	r0, #66	; 0x42
 80077fc:	200a      	moveq	r0, #10
 80077fe:	bd08      	pop	{r3, pc}

08007800 <_ZN6numops3neqEPN3pxt12TValueStructES2_>:

//
TNumber neq(TNumber a, TNumber b) {
 8007800:	b508      	push	{r3, lr}
    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;
 8007802:	f7ff ff5d 	bl	80076c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 8007806:	2800      	cmp	r0, #0
}
 8007808:	bf0c      	ite	eq
 800780a:	2042      	moveq	r0, #66	; 0x42
 800780c:	200a      	movne	r0, #10
 800780e:	bd08      	pop	{r3, pc}

08007810 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>:
    return c->head.remove(x);
}
void insertAt(RefCollection *c, int x, TValue value) {
    c->head.insert(x, value);
}
int indexOf(RefCollection *c, TValue x, int start) {
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Segment() : data(nullptr), length(0), size(0) {}

    TValue get(unsigned i) { return i < length ? data[i] : NULL; }
    void set(unsigned i, TValue value);

    unsigned getLength() { return length; };
 8007812:	8907      	ldrh	r7, [r0, #8]
    auto data = c->head.getData();
 8007814:	6845      	ldr	r5, [r0, #4]
    auto len = c->head.getLength();
    for (unsigned i = 0; i < len; i++) {
 8007816:	b17f      	cbz	r7, 8007838 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
 8007818:	460e      	mov	r6, r1
 800781a:	2400      	movs	r4, #0
 800781c:	3d04      	subs	r5, #4
 800781e:	e002      	b.n	8007826 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x16>
 8007820:	3401      	adds	r4, #1
 8007822:	42a7      	cmp	r7, r4
 8007824:	d008      	beq.n	8007838 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x28>
        if (pxt::eq_bool(data[i], x)) {
 8007826:	4631      	mov	r1, r6
 8007828:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800782c:	f7ff ff48 	bl	80076c0 <_ZN3pxt7eq_boolEPNS_12TValueStructES1_>
 8007830:	2800      	cmp	r0, #0
 8007832:	d0f5      	beq.n	8007820 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi+0x10>
            return (int)i;
 8007834:	4620      	mov	r0, r4
        }
    }
    return -1;
}
 8007836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (unsigned i = 0; i < len; i++) {
        if (pxt::eq_bool(data[i], x)) {
            return (int)i;
        }
    }
    return -1;
 8007838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783e:	bf00      	nop

08007840 <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE>:
bool removeElement(RefCollection *c, TValue x) {
 8007840:	b510      	push	{r4, lr}
    int idx = indexOf(c, x, 0);
 8007842:	2200      	movs	r2, #0
            return (int)i;
        }
    }
    return -1;
}
bool removeElement(RefCollection *c, TValue x) {
 8007844:	4604      	mov	r4, r0
    int idx = indexOf(c, x, 0);
 8007846:	f7ff ffe3 	bl	8007810 <_ZN6Array_7indexOfEPN3pxt13RefCollectionEPNS0_12TValueStructEi>
    if (idx >= 0) {
 800784a:	1e01      	subs	r1, r0, #0
 800784c:	da01      	bge.n	8007852 <_ZN6Array_13removeElementEPN3pxt13RefCollectionEPNS0_12TValueStructE+0x12>
        decr(removeAt(c, idx));
        return 1;
    }
    return 0;
 800784e:	2000      	movs	r0, #0
}
 8007850:	bd10      	pop	{r4, pc}
}
void setAt(RefCollection *c, int x, TValue y) {
    c->head.set(x, y);
}
TValue removeAt(RefCollection *c, int x) {
    return c->head.remove(x);
 8007852:	1d20      	adds	r0, r4, #4
 8007854:	f001 f80e 	bl	8008874 <_ZN3pxt7Segment6removeEj>
}
bool removeElement(RefCollection *c, TValue x) {
    int idx = indexOf(c, x, 0);
    if (idx >= 0) {
        decr(removeAt(c, idx));
        return 1;
 8007858:	2001      	movs	r0, #1
    }
    return 0;
}
 800785a:	bd10      	pop	{r4, pc}

0800785c <_ZN6numops6toBoolEPN3pxt12TValueStructE>:

#define NUMOP(op) return fromDouble(toDouble(a) op toDouble(b));
#define BITOP(op) return fromInt(toInt(a) op toInt(b));
namespace numops {

int toBool(TValue v) {
 800785c:	b538      	push	{r3, r4, r5, lr}
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 800785e:	0783      	lsls	r3, r0, #30
 8007860:	4604      	mov	r4, r0
 8007862:	d108      	bne.n	8007876 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x1a>
 8007864:	b328      	cbz	r0, 80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
            return 0;
        else
            return 1;
    }

    ValType t = valType(v);
 8007866:	f7ff fbf5 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    if (t == ValType::String) {
 800786a:	2803      	cmp	r0, #3
 800786c:	d023      	beq.n	80078b6 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x5a>
        String s = (String)v;
        if (s->length == 0)
            return 0;
    } else if (t == ValType::Number) {
 800786e:	2802      	cmp	r0, #2
 8007870:	d00d      	beq.n	800788e <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x32>
            return 0;
        else
            return 1;
    }

    return 1;
 8007872:	2001      	movs	r0, #1
}
 8007874:	bd38      	pop	{r3, r4, r5, pc}
#define BITOP(op) return fromInt(toInt(a) op toInt(b));
namespace numops {

int toBool(TValue v) {
    if (isTagged(v)) {
        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||
 8007876:	280a      	cmp	r0, #10
 8007878:	d01b      	beq.n	80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
 800787a:	b1d0      	cbz	r0, 80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
 800787c:	280e      	cmp	r0, #14
 800787e:	d018      	beq.n	80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
 8007880:	2806      	cmp	r0, #6
 8007882:	d016      	beq.n	80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
 8007884:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8007888:	bf18      	it	ne
 800788a:	2001      	movne	r0, #1
        else
            return 1;
    }

    return 1;
}
 800788c:	bd38      	pop	{r3, r4, r5, pc}
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 800788e:	4620      	mov	r0, r4
 8007890:	f7ff fc04 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4604      	mov	r4, r0
 800789a:	460d      	mov	r5, r1
 800789c:	f7fa fdf0 	bl	8002480 <__wrap___aeabi_dcmpun>
 80078a0:	b938      	cbnz	r0, 80078b2 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x56>
        String s = (String)v;
        if (s->length == 0)
            return 0;
    } else if (t == ValType::Number) {
        auto x = toDouble(v);
        if (isnan(x) || x == 0.0 || x == -0.0)
 80078a2:	4620      	mov	r0, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	2200      	movs	r2, #0
 80078a8:	2300      	movs	r3, #0
 80078aa:	f7fa fd6b 	bl	8002384 <__wrap___aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d0df      	beq.n	8007872 <_ZN6numops6toBoolEPN3pxt12TValueStructE+0x16>
            return 0;
 80078b2:	2000      	movs	r0, #0
        else
            return 1;
    }

    return 1;
}
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
    }

    ValType t = valType(v);
    if (t == ValType::String) {
        String s = (String)v;
        if (s->length == 0)
 80078b6:	88a0      	ldrh	r0, [r4, #4]
 80078b8:	3000      	adds	r0, #0
 80078ba:	bf18      	it	ne
 80078bc:	2001      	movne	r0, #1
        else
            return 1;
    }

    return 1;
}
 80078be:	bd38      	pop	{r3, r4, r5, pc}

080078c0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE>:

int toBoolDecr(TValue v) {
    if (v == TAG_TRUE)
 80078c0:	2842      	cmp	r0, #66	; 0x42
 80078c2:	d005      	beq.n	80078d0 <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0x10>
        return 1;
    if (v == TAG_FALSE)
 80078c4:	280a      	cmp	r0, #10
 80078c6:	d001      	beq.n	80078cc <_ZN6numops10toBoolDecrEPN3pxt12TValueStructE+0xc>
        return 0;
    int r = toBool(v);
 80078c8:	f7ff bfc8 	b.w	800785c <_ZN6numops6toBoolEPN3pxt12TValueStructE>

int toBoolDecr(TValue v) {
    if (v == TAG_TRUE)
        return 1;
    if (v == TAG_FALSE)
        return 0;
 80078cc:	2000      	movs	r0, #0
    int r = toBool(v);
    decr(v);
    return r;
}
 80078ce:	4770      	bx	lr
    return 1;
}

int toBoolDecr(TValue v) {
    if (v == TAG_TRUE)
        return 1;
 80078d0:	2001      	movs	r0, #1
 80078d2:	4770      	bx	lr

080078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>:

#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)

// 7.2.13 Abstract Relational Comparison
static int valCompare(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
 80078d4:	280e      	cmp	r0, #14
 80078d6:	d04d      	beq.n	8007974 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
 80078d8:	290e      	cmp	r1, #14
 80078da:	d04b      	beq.n	8007974 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0xa0>
    return cmp != -2 && cmp op 0 ? t : f;

#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)

// 7.2.13 Abstract Relational Comparison
static int valCompare(TValue a, TValue b) {
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460c      	mov	r4, r1
    if (a == TAG_NAN || b == TAG_NAN)
        return -2;

    ValType ta = valType(a);
 80078e0:	4605      	mov	r5, r0
 80078e2:	f7ff fbb7 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 80078e6:	4606      	mov	r6, r0
    ValType tb = valType(b);
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7ff fbb3 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>

    if (ta == ValType::String && tb == ValType::String)
 80078ee:	2e03      	cmp	r6, #3
 80078f0:	d02a      	beq.n	8007948 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x74>
        return String_::compare((String)a, (String)b);

    if (a == b)
 80078f2:	42a5      	cmp	r5, r4
 80078f4:	d036      	beq.n	8007964 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x90>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 80078f6:	4628      	mov	r0, r5
 80078f8:	f7ff fbd0 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 80078fc:	4606      	mov	r6, r0
 80078fe:	4620      	mov	r0, r4
 8007900:	460f      	mov	r7, r1
 8007902:	f7ff fbcb 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
 8007906:	4632      	mov	r2, r6
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	463b      	mov	r3, r7
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	f7fa fdb5 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007916:	bb38      	cbnz	r0, 8007968 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
 8007918:	4622      	mov	r2, r4
 800791a:	462b      	mov	r3, r5
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7fa fdae 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007924:	bb00      	cbnz	r0, 8007968 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x94>
    auto db = toDouble(b);

    if (isnan(da) || isnan(db))
        return -2;

    if (da < db)
 8007926:	4632      	mov	r2, r6
 8007928:	463b      	mov	r3, r7
 800792a:	4620      	mov	r0, r4
 800792c:	4629      	mov	r1, r5
 800792e:	f7fa fd8d 	bl	800244c <__wrap___aeabi_dcmpgt>
 8007932:	b9e0      	cbnz	r0, 800796e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
        return -1;
    else if (da > db)
 8007934:	4632      	mov	r2, r6
 8007936:	463b      	mov	r3, r7
 8007938:	4620      	mov	r0, r4
 800793a:	4629      	mov	r1, r5
 800793c:	f7fa fd3c 	bl	80023b8 <__wrap___aeabi_dcmplt>
 8007940:	3000      	adds	r0, #0
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
        return 1;
    else
        return 0;
}
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;

    ValType ta = valType(a);
    ValType tb = valType(b);

    if (ta == ValType::String && tb == ValType::String)
 8007948:	2803      	cmp	r0, #3
 800794a:	d1d2      	bne.n	80078f2 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x1e>
    memcpy(r->data + s->length, other->data, other->length);
    return r;
}

int compare(String a, String b) {
    if (a == b)
 800794c:	42a5      	cmp	r5, r4
 800794e:	d009      	beq.n	8007964 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x90>
        return 0;

    int compareResult = strcmp(a->data, b->data);
 8007950:	1da1      	adds	r1, r4, #6
 8007952:	1da8      	adds	r0, r5, #6
 8007954:	f7fb fb7a 	bl	800304c <strcmp>
    if (compareResult < 0)
 8007958:	2800      	cmp	r0, #0
 800795a:	db08      	blt.n	800796e <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_+0x9a>
        return -1;
    else if (compareResult > 0)
 800795c:	bf14      	ite	ne
 800795e:	2001      	movne	r0, #1
 8007960:	2000      	moveq	r0, #0
        return -1;
    else if (da > db)
        return 1;
    else
        return 0;
}
 8007962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return r;
}

int compare(String a, String b) {
    if (a == b)
        return 0;
 8007964:	2000      	movs	r0, #0
        return -1;
    else if (da > db)
        return 1;
    else
        return 0;
}
 8007966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)

// 7.2.13 Abstract Relational Comparison
static int valCompare(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return -2;
 8007968:	f06f 0001 	mvn.w	r0, #1
        return -1;
    else if (da > db)
        return 1;
    else
        return 0;
}
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (a == b)
        return 0;

    int compareResult = strcmp(a->data, b->data);
    if (compareResult < 0)
        return -1;
 800796e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    else if (da > db)
        return 1;
    else
        return 0;
}
 8007972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)

// 7.2.13 Abstract Relational Comparison
static int valCompare(TValue a, TValue b) {
    if (a == TAG_NAN || b == TAG_NAN)
        return -2;
 8007974:	f06f 0001 	mvn.w	r0, #1
        return -1;
    else if (da > db)
        return 1;
    else
        return 0;
}
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop

0800797c <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_>:

//
bool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}
 800797c:	b538      	push	{r3, r4, r5, lr}
inline bool isSpecial(TValue v) {
    return (intptr_t)v & 2;
}

inline bool bothNumbers(TValue a, TValue b) {
    return (intptr_t)a & (intptr_t)b & 1;
 800797e:	ea00 0301 	and.w	r3, r0, r1
 8007982:	f013 0401 	ands.w	r4, r3, #1
 8007986:	d004      	beq.n	8007992 <_ZN6numops7lt_boolEPN3pxt12TValueStructES2_+0x16>
 8007988:	4288      	cmp	r0, r1
 800798a:	bfac      	ite	ge
 800798c:	2000      	movge	r0, #0
 800798e:	2001      	movlt	r0, #1
 8007990:	bd38      	pop	{r3, r4, r5, pc}
 8007992:	f7ff ff9f 	bl	80078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8007996:	1c83      	adds	r3, r0, #2
 8007998:	bf14      	ite	ne
 800799a:	0fc0      	lsrne	r0, r0, #31
 800799c:	4620      	moveq	r0, r4
 800799e:	bd38      	pop	{r3, r4, r5, pc}

080079a0 <_ZN6numops2leEPN3pxt12TValueStructES2_>:

//
TNumber le(TNumber a, TNumber b){CMPOP(<=)}
 80079a0:	b510      	push	{r4, lr}
 80079a2:	ea00 0401 	and.w	r4, r0, r1
 80079a6:	07e2      	lsls	r2, r4, #31
 80079a8:	d503      	bpl.n	80079b2 <_ZN6numops2leEPN3pxt12TValueStructES2_+0x12>
 80079aa:	4288      	cmp	r0, r1
 80079ac:	dc07      	bgt.n	80079be <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 80079ae:	2042      	movs	r0, #66	; 0x42
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	f7ff ff8f 	bl	80078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80079b6:	1c83      	adds	r3, r0, #2
 80079b8:	d001      	beq.n	80079be <_ZN6numops2leEPN3pxt12TValueStructES2_+0x1e>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	ddf7      	ble.n	80079ae <_ZN6numops2leEPN3pxt12TValueStructES2_+0xe>
 80079be:	200a      	movs	r0, #10
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop

080079c4 <_ZN6numops2ltEPN3pxt12TValueStructES2_>:

//
TNumber lt(TNumber a, TNumber b){CMPOP(<)}
 80079c4:	b510      	push	{r4, lr}
 80079c6:	ea00 0401 	and.w	r4, r0, r1
 80079ca:	07e2      	lsls	r2, r4, #31
 80079cc:	d503      	bpl.n	80079d6 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x12>
 80079ce:	4288      	cmp	r0, r1
 80079d0:	da07      	bge.n	80079e2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 80079d2:	2042      	movs	r0, #66	; 0x42
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	f7ff ff7d 	bl	80078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80079da:	1c83      	adds	r3, r0, #2
 80079dc:	d001      	beq.n	80079e2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0x1e>
 80079de:	2800      	cmp	r0, #0
 80079e0:	dbf7      	blt.n	80079d2 <_ZN6numops2ltEPN3pxt12TValueStructES2_+0xe>
 80079e2:	200a      	movs	r0, #10
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop

080079e8 <_ZN6numops2geEPN3pxt12TValueStructES2_>:

//
TNumber ge(TNumber a, TNumber b){CMPOP(>=)}
 80079e8:	b510      	push	{r4, lr}
 80079ea:	ea00 0401 	and.w	r4, r0, r1
 80079ee:	07e3      	lsls	r3, r4, #31
 80079f0:	d503      	bpl.n	80079fa <_ZN6numops2geEPN3pxt12TValueStructES2_+0x12>
 80079f2:	4288      	cmp	r0, r1
 80079f4:	db05      	blt.n	8007a02 <_ZN6numops2geEPN3pxt12TValueStructES2_+0x1a>
 80079f6:	2042      	movs	r0, #66	; 0x42
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	f7ff ff6b 	bl	80078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	daf9      	bge.n	80079f6 <_ZN6numops2geEPN3pxt12TValueStructES2_+0xe>
 8007a02:	200a      	movs	r0, #10
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop

08007a08 <_ZN6numops2gtEPN3pxt12TValueStructES2_>:

//
TNumber gt(TNumber a, TNumber b){CMPOP(>)}
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	ea00 0401 	and.w	r4, r0, r1
 8007a0e:	07e3      	lsls	r3, r4, #31
 8007a10:	d503      	bpl.n	8007a1a <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x12>
 8007a12:	4288      	cmp	r0, r1
 8007a14:	dd05      	ble.n	8007a22 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0x1a>
 8007a16:	2042      	movs	r0, #66	; 0x42
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	f7ff ff5b 	bl	80078d4 <_ZN6numopsL10valCompareEPN3pxt12TValueStructES2_>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	dcf9      	bgt.n	8007a16 <_ZN6numops2gtEPN3pxt12TValueStructES2_+0xe>
 8007a22:	200a      	movs	r0, #10
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop

08007a28 <_ZN6numops8toStringEPN3pxt12TValueStructE>:





String toString(TValue v) {
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	b090      	sub	sp, #64	; 0x40
 8007a2c:	4604      	mov	r4, r0
    ValType t = valType(v);
 8007a2e:	f7ff fb11 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>

    if (t == ValType::String) {
 8007a32:	2803      	cmp	r0, #3
 8007a34:	d039      	beq.n	8007aaa <_ZN6numops8toStringEPN3pxt12TValueStructE+0x82>
        return (String)(void *)incr(v);
    } else if (t == ValType::Number) {
 8007a36:	2802      	cmp	r0, #2
 8007a38:	d010      	beq.n	8007a5c <_ZN6numops8toStringEPN3pxt12TValueStructE+0x34>
            return (String)(void *)sNaN;
        }
        mycvt(x, buf);

        return mkString(buf);
    } else if (t == ValType::Function) {
 8007a3a:	2805      	cmp	r0, #5
 8007a3c:	d04b      	beq.n	8007ad6 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xae>
        return (String)(void *)sFunction;
    } else {
        if (v == TAG_UNDEFINED)
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	d04b      	beq.n	8007ada <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb2>
            return (String)(void *)sUndefined;
        else if (v == TAG_FALSE)
 8007a42:	2c0a      	cmp	r4, #10
 8007a44:	d04b      	beq.n	8007ade <_ZN6numops8toStringEPN3pxt12TValueStructE+0xb6>
            return (String)(void *)sFalse;
        else if (v == TAG_NAN)
 8007a46:	2c0e      	cmp	r4, #14
 8007a48:	d043      	beq.n	8007ad2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xaa>
            return (String)(void *)sNaN;
        else if (v == TAG_TRUE)
 8007a4a:	2c42      	cmp	r4, #66	; 0x42
 8007a4c:	d054      	beq.n	8007af8 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd0>
            return (String)(void *)sTrue;
        else if (v == TAG_NULL)
            return (String)(void *)sNull;
        return (String)(void *)sObject;
 8007a4e:	4b2b      	ldr	r3, [pc, #172]	; (8007afc <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd4>)
 8007a50:	482b      	ldr	r0, [pc, #172]	; (8007b00 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xd8>)
 8007a52:	2c06      	cmp	r4, #6
 8007a54:	bf08      	it	eq
 8007a56:	4618      	moveq	r0, r3
    }
}
 8007a58:	b010      	add	sp, #64	; 0x40
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
    if (t == ValType::String) {
        return (String)(void *)incr(v);
    } else if (t == ValType::Number) {
        char buf[64];

        if (isNumber(v)) {
 8007a5c:	07e3      	lsls	r3, r4, #31
 8007a5e:	d427      	bmi.n	8007ab0 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x88>
            itoa(numValue(v), buf);
            return mkString(buf);
        }

        if (v == TAG_NAN)
 8007a60:	2c0e      	cmp	r4, #14
 8007a62:	d036      	beq.n	8007ad2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xaa>
}
int toInt(TNumber v) {
    return (int)toUInt(v);
}

NUMBER toDouble(TNumber v) {
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7ff fb19 	bl	800709c <_ZN3pxt8toDoubleEPNS_12TValueStructE.part.12>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8007a6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a6e:	460d      	mov	r5, r1
            itoa((int)x, buf);
            return mkString(buf);
        }
#endif

        if (isinf(x)) {
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a74:	4631      	mov	r1, r6
 8007a76:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xdc>)
 8007a78:	4604      	mov	r4, r0
 8007a7a:	f7fa fd01 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007a7e:	bb08      	cbnz	r0, 8007ac4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x9c>
 8007a80:	4620      	mov	r0, r4
 8007a82:	4631      	mov	r1, r6
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a88:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xdc>)
 8007a8a:	f7fa fcad 	bl	80023e8 <__wrap___aeabi_dcmple>
 8007a8e:	b9c8      	cbnz	r0, 8007ac4 <_ZN6numops8toStringEPN3pxt12TValueStructE+0x9c>
            if (x < 0)
 8007a90:	4620      	mov	r0, r4
 8007a92:	2300      	movs	r3, #0
 8007a94:	4629      	mov	r1, r5
 8007a96:	2200      	movs	r2, #0
 8007a98:	f7fa fc8e 	bl	80023b8 <__wrap___aeabi_dcmplt>
                return (String)(void *)sMInf;
            else
                return (String)(void *)sInf;
 8007a9c:	4c1a      	ldr	r4, [pc, #104]	; (8007b08 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe0>)
 8007a9e:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe4>)
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	bf14      	ite	ne
 8007aa4:	4620      	movne	r0, r4
 8007aa6:	4618      	moveq	r0, r3
 8007aa8:	e000      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
 8007aaa:	4620      	mov	r0, r4
            return (String)(void *)sTrue;
        else if (v == TAG_NULL)
            return (String)(void *)sNull;
        return (String)(void *)sObject;
    }
}
 8007aac:	b010      	add	sp, #64	; 0x40
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
        return (String)(void *)incr(v);
    } else if (t == ValType::Number) {
        char buf[64];

        if (isNumber(v)) {
            itoa(numValue(v), buf);
 8007ab0:	4669      	mov	r1, sp
 8007ab2:	1060      	asrs	r0, r4, #1
 8007ab4:	f001 fd4a 	bl	800954c <_ZN5codal4itoaEiPc>
            return mkString(buf);
 8007ab8:	4668      	mov	r0, sp
 8007aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007abe:	f7fe fecb 	bl	8006858 <_ZN3pxt8mkStringEPKci>
 8007ac2:	e7f3      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7fa fcd8 	bl	8002480 <__wrap___aeabi_dcmpun>
 8007ad0:	b138      	cbz	r0, 8007ae2 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xba>
        if (v == TAG_UNDEFINED)
            return (String)(void *)sUndefined;
        else if (v == TAG_FALSE)
            return (String)(void *)sFalse;
        else if (v == TAG_NAN)
            return (String)(void *)sNaN;
 8007ad2:	480f      	ldr	r0, [pc, #60]	; (8007b10 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xe8>)
 8007ad4:	e7ea      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
        }
        mycvt(x, buf);

        return mkString(buf);
    } else if (t == ValType::Function) {
        return (String)(void *)sFunction;
 8007ad6:	480f      	ldr	r0, [pc, #60]	; (8007b14 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xec>)
 8007ad8:	e7e8      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
    } else {
        if (v == TAG_UNDEFINED)
            return (String)(void *)sUndefined;
 8007ada:	480f      	ldr	r0, [pc, #60]	; (8007b18 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf0>)
 8007adc:	e7e6      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
        else if (v == TAG_FALSE)
            return (String)(void *)sFalse;
 8007ade:	480f      	ldr	r0, [pc, #60]	; (8007b1c <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf4>)
 8007ae0:	e7e4      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
            else
                return (String)(void *)sInf;
        } else if (isnan(x)) {
            return (String)(void *)sNaN;
        }
        mycvt(x, buf);
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	466a      	mov	r2, sp
 8007ae8:	f7fe fa8a 	bl	8006000 <_ZN6numops5mycvtEdPc>

        return mkString(buf);
 8007aec:	4668      	mov	r0, sp
 8007aee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007af2:	f7fe feb1 	bl	8006858 <_ZN3pxt8mkStringEPKci>
 8007af6:	e7d9      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
        else if (v == TAG_FALSE)
            return (String)(void *)sFalse;
        else if (v == TAG_NAN)
            return (String)(void *)sNaN;
        else if (v == TAG_TRUE)
            return (String)(void *)sTrue;
 8007af8:	4809      	ldr	r0, [pc, #36]	; (8007b20 <_ZN6numops8toStringEPN3pxt12TValueStructE+0xf8>)
 8007afa:	e7d7      	b.n	8007aac <_ZN6numops8toStringEPN3pxt12TValueStructE+0x84>
 8007afc:	0800bfb8 	.word	0x0800bfb8
 8007b00:	0800bfdc 	.word	0x0800bfdc
 8007b04:	7fefffff 	.word	0x7fefffff
 8007b08:	0800bfa8 	.word	0x0800bfa8
 8007b0c:	0800bf8c 	.word	0x0800bf8c
 8007b10:	0800bf9c 	.word	0x0800bf9c
 8007b14:	0800bfec 	.word	0x0800bfec
 8007b18:	0800bf48 	.word	0x0800bf48
 8007b1c:	0800bfd0 	.word	0x0800bfd0
 8007b20:	0800bfc4 	.word	0x0800bfc4

08007b24 <_ZN3pxt6typeOfEPNS_12TValueStructE>:
PXT_DEF_STRING(sNumberTp, "number")
PXT_DEF_STRING(sFunctionTp, "function")
PXT_DEF_STRING(sUndefinedTp, "undefined")

//
String typeOf(TValue v) {
 8007b24:	b508      	push	{r3, lr}
    switch (valType(v)) {
 8007b26:	f7ff fa95 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8007b2a:	2805      	cmp	r0, #5
 8007b2c:	d803      	bhi.n	8007b36 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x12>
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <_ZN3pxt6typeOfEPNS_12TValueStructE+0x20>)
 8007b30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
        return (String)sFunctionTp;
    default:
        oops(2);
        return 0;
    }
}
 8007b34:	bd08      	pop	{r3, pc}
    if (!cond)
        error(code, subcode);
}

inline void oops(int subcode = 0) {
    target_panic(800 + subcode);
 8007b36:	f240 3022 	movw	r0, #802	; 0x322
 8007b3a:	f7f8 fc39 	bl	80003b0 <target_panic>
        return (String)sObjectTp;
    case ValType::Function:
        return (String)sFunctionTp;
    default:
        oops(2);
        return 0;
 8007b3e:	2000      	movs	r0, #0
    }
}
 8007b40:	bd08      	pop	{r3, pc}
 8007b42:	bf00      	nop
 8007b44:	0800be88 	.word	0x0800be88

08007b48 <_ZN3pxt8anyPrintEPNS_12TValueStructE>:

// Maybe in future we will want separate print methods; for now ignore
void anyPrint(TValue v) {
 8007b48:	b530      	push	{r4, r5, lr}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	4604      	mov	r4, r0
    if (valType(v) == ValType::Object) {
 8007b4e:	f7ff fa81 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
 8007b52:	2804      	cmp	r0, #4
 8007b54:	d117      	bne.n	8007b86 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x3e>
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8007b56:	f014 0103 	ands.w	r1, r4, #3
 8007b5a:	d006      	beq.n	8007b6a <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x22>
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
                      vt->numbytes);
            else
                meth(o);
        } else {
            DMESG("[Native %p]", v);
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4816      	ldr	r0, [pc, #88]	; (8007bb8 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x70>)
        String s = numops::toString(v);
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
        decr((TValue)s);
#endif
    }
}
 8007b60:	b003      	add	sp, #12
 8007b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
                      vt->numbytes);
            else
                meth(o);
        } else {
            DMESG("[Native %p]", v);
 8007b66:	f001 bee5 	b.w	8009934 <codal_dmesg>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d0f6      	beq.n	8007b5c <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x14>
// Maybe in future we will want separate print methods; for now ignore
void anyPrint(TValue v) {
    if (valType(v) == ValType::Object) {
        if (isRefCounted(v)) {
            auto o = (RefObject *)v;
            auto vt = getVTable(o);
 8007b6e:	6822      	ldr	r2, [r4, #0]
            auto meth = ((RefObjectMethod)vt->methods[1]);
            if ((void *)meth == (void *)&anyPrint)
 8007b70:	4d12      	ldr	r5, [pc, #72]	; (8007bbc <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x74>)
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 8007b72:	f022 0001 	bic.w	r0, r2, #1
void anyPrint(TValue v) {
    if (valType(v) == ValType::Object) {
        if (isRefCounted(v)) {
            auto o = (RefObject *)v;
            auto vt = getVTable(o);
            auto meth = ((RefObjectMethod)vt->methods[1]);
 8007b76:	6943      	ldr	r3, [r0, #20]
            if ((void *)meth == (void *)&anyPrint)
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	d014      	beq.n	8007ba6 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x5e>
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
                      vt->numbytes);
            else
                meth(o);
 8007b7c:	4620      	mov	r0, r4
        String s = numops::toString(v);
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
        decr((TValue)s);
#endif
    }
}
 8007b7e:	b003      	add	sp, #12
 8007b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            auto meth = ((RefObjectMethod)vt->methods[1]);
            if ((void *)meth == (void *)&anyPrint)
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
                      vt->numbytes);
            else
                meth(o);
 8007b84:	4718      	bx	r3
        } else {
            DMESG("[Native %p]", v);
        }
    } else {
#ifndef X86_64
        String s = numops::toString(v);
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ff4e 	bl	8007a28 <_ZN6numops8toStringEPN3pxt12TValueStructE>
 8007b8c:	4605      	mov	r5, r0
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7ff ffc8 	bl	8007b24 <_ZN3pxt6typeOfEPNS_12TValueStructE>
 8007b94:	4622      	mov	r2, r4
 8007b96:	1d81      	adds	r1, r0, #6
 8007b98:	4809      	ldr	r0, [pc, #36]	; (8007bc0 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x78>)
 8007b9a:	1dab      	adds	r3, r5, #6
        decr((TValue)s);
#endif
    }
}
 8007b9c:	b003      	add	sp, #12
 8007b9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            DMESG("[Native %p]", v);
        }
    } else {
#ifndef X86_64
        String s = numops::toString(v);
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
 8007ba2:	f001 bec7 	b.w	8009934 <codal_dmesg>
        if (isRefCounted(v)) {
            auto o = (RefObject *)v;
            auto vt = getVTable(o);
            auto meth = ((RefObjectMethod)vt->methods[1]);
            if ((void *)meth == (void *)&anyPrint)
                DMESG("[RefObject refs=%d vt=%p cl=%d sz=%d]", REFCNT(o), o->vtable, vt->classNo,
 8007ba6:	8903      	ldrh	r3, [r0, #8]
 8007ba8:	8800      	ldrh	r0, [r0, #0]
 8007baa:	9000      	str	r0, [sp, #0]
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <_ZN3pxt8anyPrintEPNS_12TValueStructE+0x7c>)
 8007bae:	f001 fec1 	bl	8009934 <codal_dmesg>
        String s = numops::toString(v);
        DMESG("[%s %p = %s]", pxt::typeOf(v)->data, v, s->data);
        decr((TValue)s);
#endif
    }
}
 8007bb2:	b003      	add	sp, #12
 8007bb4:	bd30      	pop	{r4, r5, pc}
 8007bb6:	bf00      	nop
 8007bb8:	0800bf1c 	.word	0x0800bf1c
 8007bbc:	08007b49 	.word	0x08007b49
 8007bc0:	0800bf28 	.word	0x0800bf28
 8007bc4:	0800bef4 	.word	0x0800bef4

08007bc8 <_ZN3pxt10failedCastEPNS_12TValueStructE>:
PRIM_VTABLE(string, ValType::String, BoxedString, p->length + 1)
PRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)
PRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)
// PRIM_VTABLE(action, ValType::Function, RefAction, )

void failedCast(TValue v) {
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
    DMESG("failed type check for %p", v);
 8007bcc:	4812      	ldr	r0, [pc, #72]	; (8007c18 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x50>)
 8007bce:	4621      	mov	r1, r4
 8007bd0:	f001 feb0 	bl	8009934 <codal_dmesg>
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8007bd4:	07a3      	lsls	r3, r4, #30
 8007bd6:	d106      	bne.n	8007be6 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x1e>
 8007bd8:	b16c      	cbz	r4, 8007bf6 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 8007bda:	6821      	ldr	r1, [r4, #0]
 8007bdc:	f021 0101 	bic.w	r1, r1, #1

static inline VTable *getAnyVTable(TValue v) {
    if (!isRefCounted(v))
        return NULL;
    auto vt = getVTable((RefObject *)v);
    if (vt->magic == VTABLE_MAGIC)
 8007be0:	78cb      	ldrb	r3, [r1, #3]
 8007be2:	2bf9      	cmp	r3, #249	; 0xf9
 8007be4:	d010      	beq.n	8007c08 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x40>
    if (vt) {
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
    }

    int code;
    if (v == TAG_NULL)
 8007be6:	2c06      	cmp	r4, #6
 8007be8:	d105      	bne.n	8007bf6 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
}
 8007bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
    }

    int code;
    if (v == TAG_NULL)
        code = PANIC_CAST_FROM_NULL;
 8007bee:	f240 30dd 	movw	r0, #989	; 0x3dd
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
 8007bf2:	f7f8 bbdd 	b.w	80003b0 <target_panic>

    int code;
    if (v == TAG_NULL)
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7ff fa2c 	bl	8007054 <_ZN3pxt7valTypeEPNS_12TValueStructE>
    target_panic(code);
}
 8007bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    int code;
    if (v == TAG_NULL)
        code = PANIC_CAST_FROM_NULL;
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
 8007c00:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
    target_panic(code);
 8007c04:	f7f8 bbd4 	b.w	80003b0 <target_panic>

void failedCast(TValue v) {
    DMESG("failed type check for %p", v);
    auto vt = getAnyVTable(v);
    if (vt) {
        DMESG("VT %p - objtype %d classNo %d", vt, vt->objectType, vt->classNo);
 8007c08:	890b      	ldrh	r3, [r1, #8]
 8007c0a:	788a      	ldrb	r2, [r1, #2]
 8007c0c:	4803      	ldr	r0, [pc, #12]	; (8007c1c <_ZN3pxt10failedCastEPNS_12TValueStructE+0x54>)
 8007c0e:	f001 fe91 	bl	8009934 <codal_dmesg>
    }

    int code;
    if (v == TAG_NULL)
 8007c12:	2c06      	cmp	r4, #6
 8007c14:	d0e9      	beq.n	8007bea <_ZN3pxt10failedCastEPNS_12TValueStructE+0x22>
 8007c16:	e7ee      	b.n	8007bf6 <_ZN3pxt10failedCastEPNS_12TValueStructE+0x2e>
 8007c18:	0800bea0 	.word	0x0800bea0
 8007c1c:	0800bebc 	.word	0x0800bebc

08007c20 <_ZN3pxt15missingPropertyEPNS_12TValueStructE>:
    else
        code = PANIC_CAST_FIRST + (int)valType(v);
    target_panic(code);
}

void missingProperty(TValue v) {
 8007c20:	b508      	push	{r3, lr}
    DMESG("missing property on %p", v);
 8007c22:	4601      	mov	r1, r0
 8007c24:	4804      	ldr	r0, [pc, #16]	; (8007c38 <_ZN3pxt15missingPropertyEPNS_12TValueStructE+0x18>)
 8007c26:	f001 fe85 	bl	8009934 <codal_dmesg>
    target_panic(PANIC_MISSING_PROPERTY);
}
 8007c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    target_panic(code);
}

void missingProperty(TValue v) {
    DMESG("missing property on %p", v);
    target_panic(PANIC_MISSING_PROPERTY);
 8007c2e:	f44f 7064 	mov.w	r0, #912	; 0x390
 8007c32:	f7f8 bbbd 	b.w	80003b0 <target_panic>
 8007c36:	bf00      	nop
 8007c38:	0800bedc 	.word	0x0800bedc

08007c3c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	6804      	ldr	r4, [r0, #0]
 8007c40:	4605      	mov	r5, r0
 8007c42:	f034 0403 	bics.w	r4, r4, #3
 8007c46:	d00f      	beq.n	8007c68 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x2c>
 8007c48:	0fa3      	lsrs	r3, r4, #30
 8007c4a:	d011      	beq.n	8007c70 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x34>
 8007c4c:	f3c4 0591 	ubfx	r5, r4, #2, #18
 8007c50:	b125      	cbz	r5, 8007c5c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x20>
 8007c52:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007c56:	d905      	bls.n	8007c64 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x28>
 8007c58:	2c00      	cmp	r4, #0
 8007c5a:	db03      	blt.n	8007c64 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x28>
 8007c5c:	f44f 7054 	mov.w	r0, #848	; 0x350
 8007c60:	f7f8 fba6 	bl	80003b0 <target_panic>
 8007c64:	4628      	mov	r0, r5
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	f240 3051 	movw	r0, #849	; 0x351
 8007c6c:	f7f8 fba0 	bl	80003b0 <target_panic>
 8007c70:	4628      	mov	r0, r5
 8007c72:	69e3      	ldr	r3, [r4, #28]
 8007c74:	4798      	blx	r3
 8007c76:	4605      	mov	r5, r0
 8007c78:	e7ea      	b.n	8007c50 <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE+0x14>
 8007c7a:	bf00      	nop

08007c7c <_ZN3pxtL9removePtrEPNS_12TValueStructE>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
 8007c80:	889d      	ldrh	r5, [r3, #4]
 8007c82:	681c      	ldr	r4, [r3, #0]
 8007c84:	b175      	cbz	r5, 8007ca4 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x28>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	4298      	cmp	r0, r3
 8007c8a:	d011      	beq.n	8007cb0 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x34>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	1d22      	adds	r2, r4, #4
 8007c90:	e005      	b.n	8007c9e <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x22>
 8007c92:	6811      	ldr	r1, [r2, #0]
 8007c94:	4614      	mov	r4, r2
 8007c96:	4281      	cmp	r1, r0
 8007c98:	f102 0204 	add.w	r2, r2, #4
 8007c9c:	d009      	beq.n	8007cb2 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x36>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	d1f6      	bne.n	8007c92 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x16>
 8007ca4:	f44f 7052 	mov.w	r0, #840	; 0x348
 8007ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cac:	f7f8 bb80 	b.w	80003b0 <target_panic>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	3d01      	subs	r5, #1
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	4805      	ldr	r0, [pc, #20]	; (8007ccc <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x50>)
 8007cb8:	d003      	beq.n	8007cc2 <_ZN3pxtL9removePtrEPNS_12TValueStructE+0x46>
 8007cba:	f000 fd4f 	bl	800875c <_ZN3pxt9LLSegment3popEv>
 8007cbe:	6020      	str	r0, [r4, #0]
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc6:	f000 bd49 	b.w	800875c <_ZN3pxt9LLSegment3popEv>
 8007cca:	bf00      	nop
 8007ccc:	20002814 	.word	0x20002814

08007cd0 <_ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
 8007cd0:	6803      	ldr	r3, [r0, #0]
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	8818      	ldrh	r0, [r3, #0]
 8007cd8:	0880      	lsrs	r0, r0, #2
 8007cda:	4770      	bx	lr

08007cdc <_ZN3pxt16popThreadContextEPNS_13ThreadContextE>:
 8007cdc:	b390      	cbz	r0, 8007d44 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x68>
 8007cde:	b538      	push	{r3, r4, r5, lr}
 8007ce0:	68c5      	ldr	r5, [r0, #12]
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	b1cd      	cbz	r5, 8007d1a <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x3e>
 8007ce6:	e955 3101 	ldrd	r3, r1, [r5, #-4]
 8007cea:	6868      	ldr	r0, [r5, #4]
 8007cec:	0f5a      	lsrs	r2, r3, #29
 8007cee:	6061      	str	r1, [r4, #4]
 8007cf0:	68a9      	ldr	r1, [r5, #8]
 8007cf2:	2a03      	cmp	r2, #3
 8007cf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007cf8:	d104      	bne.n	8007d04 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x28>
 8007cfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cfe:	f845 3c04 	str.w	r3, [r5, #-4]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	f240 3049 	movw	r0, #841	; 0x349
 8007d08:	f7f8 fb52 	bl	80003b0 <target_panic>
 8007d0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	f845 3c04 	str.w	r3, [r5, #-4]
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007d1e:	0f5a      	lsrs	r2, r3, #29
 8007d20:	2a03      	cmp	r2, #3
 8007d22:	d108      	bne.n	8007d36 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x5a>
 8007d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d32:	f001 b8a3 	b.w	8008e7c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 8007d36:	f240 3049 	movw	r0, #841	; 0x349
 8007d3a:	f7f8 fb39 	bl	80003b0 <target_panic>
 8007d3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007d42:	e7ef      	b.n	8007d24 <_ZN3pxt16popThreadContextEPNS_13ThreadContextE+0x48>
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop

08007d48 <_ZN3pxt6gcScanEPNS_12TValueStructE>:
 8007d48:	0783      	lsls	r3, r0, #30
 8007d4a:	d109      	bne.n	8007d60 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8007d4c:	b140      	cbz	r0, 8007d60 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8007d4e:	0f03      	lsrs	r3, r0, #28
 8007d50:	d006      	beq.n	8007d60 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8007d52:	6803      	ldr	r3, [r0, #0]
 8007d54:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x30>)
 8007d56:	4213      	tst	r3, r2
 8007d58:	d102      	bne.n	8007d60 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x18>
 8007d5a:	78da      	ldrb	r2, [r3, #3]
 8007d5c:	2af9      	cmp	r2, #249	; 0xf9
 8007d5e:	d000      	beq.n	8007d62 <_ZN3pxt6gcScanEPNS_12TValueStructE+0x1a>
 8007d60:	4770      	bx	lr
 8007d62:	b410      	push	{r4}
 8007d64:	4c05      	ldr	r4, [pc, #20]	; (8007d7c <_ZN3pxt6gcScanEPNS_12TValueStructE+0x34>)
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6003      	str	r3, [r0, #0]
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	88a1      	ldrh	r1, [r4, #4]
 8007d70:	4620      	mov	r0, r4
 8007d72:	bc10      	pop	{r4}
 8007d74:	f000 bcda 	b.w	800872c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8007d78:	40000003 	.word	0x40000003
 8007d7c:	20002824 	.word	0x20002824

08007d80 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>:
 8007d80:	b1e1      	cbz	r1, 8007dbc <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x3c>
 8007d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d84:	1f04      	subs	r4, r0, #4
 8007d86:	4e0e      	ldr	r6, [pc, #56]	; (8007dc0 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x40>)
 8007d88:	4f0e      	ldr	r7, [pc, #56]	; (8007dc4 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8007d8a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 8007d8e:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8007d92:	0793      	lsls	r3, r2, #30
 8007d94:	d10f      	bne.n	8007db6 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8007d96:	b172      	cbz	r2, 8007db6 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8007d98:	0f13      	lsrs	r3, r2, #28
 8007d9a:	d00c      	beq.n	8007db6 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8007d9c:	6813      	ldr	r3, [r2, #0]
 8007d9e:	4233      	tst	r3, r6
 8007da0:	d109      	bne.n	8007db6 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8007da2:	78d9      	ldrb	r1, [r3, #3]
 8007da4:	29f9      	cmp	r1, #249	; 0xf9
 8007da6:	d106      	bne.n	8007db6 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x36>
 8007da8:	f043 0301 	orr.w	r3, r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	88b9      	ldrh	r1, [r7, #4]
 8007db0:	4804      	ldr	r0, [pc, #16]	; (8007dc4 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0x44>)
 8007db2:	f000 fcbb 	bl	800872c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8007db6:	42ac      	cmp	r4, r5
 8007db8:	d1e9      	bne.n	8007d8e <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj+0xe>
 8007dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40000003 	.word	0x40000003
 8007dc4:	20002824 	.word	0x20002824

08007dc8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	6804      	ldr	r4, [r0, #0]
 8007dcc:	b1ac      	cbz	r4, 8007dfa <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x32>
 8007dce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	07da      	lsls	r2, r3, #31
 8007dd6:	d409      	bmi.n	8007dec <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x24>
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007de0:	88a9      	ldrh	r1, [r5, #4]
 8007de2:	4620      	mov	r0, r4
 8007de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de8:	f7ff bfca 	b.w	8007d80 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
 8007dec:	f240 304f 	movw	r0, #847	; 0x34f
 8007df0:	f7f8 fade 	bl	80003b0 <target_panic>
 8007df4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007df8:	e7ee      	b.n	8007dd8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE+0x10>
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}

08007dfc <_ZN3pxt9gcProcessEPNS_12TValueStructE>:
 8007dfc:	0782      	lsls	r2, r0, #30
 8007dfe:	d121      	bne.n	8007e44 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x48>
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	b1f0      	cbz	r0, 8007e42 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x46>
 8007e04:	0f02      	lsrs	r2, r0, #28
 8007e06:	d01c      	beq.n	8007e42 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x46>
 8007e08:	6802      	ldr	r2, [r0, #0]
 8007e0a:	4910      	ldr	r1, [pc, #64]	; (8007e4c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x50>)
 8007e0c:	420a      	tst	r2, r1
 8007e0e:	d118      	bne.n	8007e42 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x46>
 8007e10:	78d1      	ldrb	r1, [r2, #3]
 8007e12:	29f9      	cmp	r1, #249	; 0xf9
 8007e14:	d115      	bne.n	8007e42 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x46>
 8007e16:	f022 0103 	bic.w	r1, r2, #3
 8007e1a:	6989      	ldr	r1, [r1, #24]
 8007e1c:	f042 0201 	orr.w	r2, r2, #1
 8007e20:	6002      	str	r2, [r0, #0]
 8007e22:	b101      	cbz	r1, 8007e26 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x2a>
 8007e24:	4788      	blx	r1
 8007e26:	4c0a      	ldr	r4, [pc, #40]	; (8007e50 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x54>)
 8007e28:	4625      	mov	r5, r4
 8007e2a:	e007      	b.n	8007e3c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x40>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 fc95 	bl	800875c <_ZN3pxt9LLSegment3popEv>
 8007e32:	6803      	ldr	r3, [r0, #0]
 8007e34:	f023 0303 	bic.w	r3, r3, #3
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	b923      	cbnz	r3, 8007e46 <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x4a>
 8007e3c:	88a3      	ldrh	r3, [r4, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f4      	bne.n	8007e2c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x30>
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	4770      	bx	lr
 8007e46:	4798      	blx	r3
 8007e48:	e7f8      	b.n	8007e3c <_ZN3pxt9gcProcessEPNS_12TValueStructE+0x40>
 8007e4a:	bf00      	nop
 8007e4c:	40000003 	.word	0x40000003
 8007e50:	20002824 	.word	0x20002824

08007e54 <_ZN3pxt2gcEi>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80080a4 <_ZN3pxt2gcEi+0x250>
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	f898 3000 	ldrb.w	r3, [r8]
 8007e62:	4683      	mov	fp, r0
 8007e64:	079a      	lsls	r2, r3, #30
 8007e66:	f100 80f2 	bmi.w	800804e <_ZN3pxt2gcEi+0x1fa>
 8007e6a:	4a82      	ldr	r2, [pc, #520]	; (8008074 <_ZN3pxt2gcEi+0x220>)
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	f01b 0602 	ands.w	r6, fp, #2
 8007e74:	f888 3000 	strb.w	r3, [r8]
 8007e78:	6814      	ldr	r4, [r2, #0]
 8007e7a:	8895      	ldrh	r5, [r2, #4]
 8007e7c:	f040 80d3 	bne.w	8008026 <_ZN3pxt2gcEi+0x1d2>
 8007e80:	b165      	cbz	r5, 8007e9c <_ZN3pxt2gcEi+0x48>
 8007e82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e86:	f854 0b04 	ldr.w	r0, [r4], #4
 8007e8a:	07c7      	lsls	r7, r0, #31
 8007e8c:	bf44      	itt	mi
 8007e8e:	f020 0001 	bicmi.w	r0, r0, #1
 8007e92:	6800      	ldrmi	r0, [r0, #0]
 8007e94:	f7ff ffb2 	bl	8007dfc <_ZN3pxt9gcProcessEPNS_12TValueStructE>
 8007e98:	42a5      	cmp	r5, r4
 8007e9a:	d1f4      	bne.n	8007e86 <_ZN3pxt2gcEi+0x32>
 8007e9c:	4d76      	ldr	r5, [pc, #472]	; (8008078 <_ZN3pxt2gcEi+0x224>)
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f000 fff2 	bl	8008e88 <_ZN3pxt15gcProcessStacksEi>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b1b3      	cbz	r3, 8007ed6 <_ZN3pxt2gcEi+0x82>
 8007ea8:	4b74      	ldr	r3, [pc, #464]	; (800807c <_ZN3pxt2gcEi+0x228>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8b3 902a 	ldrh.w	r9, [r3, #42]	; 0x2a
 8007eb0:	f000 fdbc 	bl	8008a2c <_ZN3pxt13getNumGlobalsEv>
 8007eb4:	682c      	ldr	r4, [r5, #0]
 8007eb6:	eba0 0709 	sub.w	r7, r0, r9
 8007eba:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 8007ebe:	2e00      	cmp	r6, #0
 8007ec0:	f040 80cc 	bne.w	800805c <_ZN3pxt2gcEi+0x208>
 8007ec4:	b13f      	cbz	r7, 8007ed6 <_ZN3pxt2gcEi+0x82>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	3501      	adds	r5, #1
 8007eca:	f854 0b04 	ldr.w	r0, [r4], #4
 8007ece:	f7ff ff95 	bl	8007dfc <_ZN3pxt9gcProcessEPNS_12TValueStructE>
 8007ed2:	42af      	cmp	r7, r5
 8007ed4:	d1f8      	bne.n	8007ec8 <_ZN3pxt2gcEi+0x74>
 8007ed6:	4a6a      	ldr	r2, [pc, #424]	; (8008080 <_ZN3pxt2gcEi+0x22c>)
 8007ed8:	4b6a      	ldr	r3, [pc, #424]	; (8008084 <_ZN3pxt2gcEi+0x230>)
 8007eda:	7815      	ldrb	r5, [r2, #0]
 8007edc:	681e      	ldr	r6, [r3, #0]
 8007ede:	b13d      	cbz	r5, 8007ef0 <_ZN3pxt2gcEi+0x9c>
 8007ee0:	2400      	movs	r4, #0
 8007ee2:	3401      	adds	r4, #1
 8007ee4:	f856 0b04 	ldr.w	r0, [r6], #4
 8007ee8:	f7ff ff88 	bl	8007dfc <_ZN3pxt9gcProcessEPNS_12TValueStructE>
 8007eec:	42a5      	cmp	r5, r4
 8007eee:	d1f8      	bne.n	8007ee2 <_ZN3pxt2gcEi+0x8e>
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	4b65      	ldr	r3, [pc, #404]	; (8008088 <_ZN3pxt2gcEi+0x234>)
 8007ef4:	681f      	ldr	r7, [r3, #0]
 8007ef6:	4b65      	ldr	r3, [pc, #404]	; (800808c <_ZN3pxt2gcEi+0x238>)
 8007ef8:	601d      	str	r5, [r3, #0]
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	f000 80b7 	beq.w	800806e <_ZN3pxt2gcEi+0x21a>
 8007f00:	46aa      	mov	sl, r5
 8007f02:	9501      	str	r5, [sp, #4]
 8007f04:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f107 0408 	add.w	r4, r7, #8
 8007f0e:	089b      	lsrs	r3, r3, #2
 8007f10:	9a01      	ldr	r2, [sp, #4]
 8007f12:	eb04 0983 	add.w	r9, r4, r3, lsl #2
 8007f16:	441a      	add	r2, r3
 8007f18:	454c      	cmp	r4, r9
 8007f1a:	9201      	str	r2, [sp, #4]
 8007f1c:	d30b      	bcc.n	8007f36 <_ZN3pxt2gcEi+0xe2>
 8007f1e:	e04c      	b.n	8007fba <_ZN3pxt2gcEi+0x166>
 8007f20:	f023 0301 	bic.w	r3, r3, #1
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff fe88 	bl	8007c3c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 8007f2c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8007f30:	45b1      	cmp	r9, r6
 8007f32:	d942      	bls.n	8007fba <_ZN3pxt2gcEi+0x166>
 8007f34:	4634      	mov	r4, r6
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	07d8      	lsls	r0, r3, #31
 8007f3a:	d4f1      	bmi.n	8007f20 <_ZN3pxt2gcEi+0xcc>
 8007f3c:	0f1a      	lsrs	r2, r3, #28
 8007f3e:	2a06      	cmp	r2, #6
 8007f40:	d0ee      	beq.n	8007f20 <_ZN3pxt2gcEi+0xcc>
 8007f42:	45a1      	cmp	r9, r4
 8007f44:	d967      	bls.n	8008016 <_ZN3pxt2gcEi+0x1c2>
 8007f46:	4626      	mov	r6, r4
 8007f48:	e000      	b.n	8007f4c <_ZN3pxt2gcEi+0xf8>
 8007f4a:	6833      	ldr	r3, [r6, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	ea4f 7213 	mov.w	r2, r3, lsr #28
 8007f52:	db0f      	blt.n	8007f74 <_ZN3pxt2gcEi+0x120>
 8007f54:	07d9      	lsls	r1, r3, #31
 8007f56:	d414      	bmi.n	8007f82 <_ZN3pxt2gcEi+0x12e>
 8007f58:	2a06      	cmp	r2, #6
 8007f5a:	d012      	beq.n	8007f82 <_ZN3pxt2gcEi+0x12e>
 8007f5c:	005a      	lsls	r2, r3, #1
 8007f5e:	d409      	bmi.n	8007f74 <_ZN3pxt2gcEi+0x120>
 8007f60:	78db      	ldrb	r3, [r3, #3]
 8007f62:	2bf9      	cmp	r3, #249	; 0xf9
 8007f64:	d003      	beq.n	8007f6e <_ZN3pxt2gcEi+0x11a>
 8007f66:	f240 3049 	movw	r0, #841	; 0x349
 8007f6a:	f7f8 fa21 	bl	80003b0 <target_panic>
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 fbc4 	bl	80086fc <_ZN3pxt9RefObject9destroyVTEv>
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff fe61 	bl	8007c3c <_ZN3pxtL13getObjectSizeEPNS_9RefObjectE>
 8007f7a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8007f7e:	45b1      	cmp	r9, r6
 8007f80:	d8e3      	bhi.n	8007f4a <_ZN3pxt2gcEi+0xf6>
 8007f82:	1b33      	subs	r3, r6, r4
 8007f84:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8007f88:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8007f8c:	465a      	mov	r2, fp
 8007f8e:	21ff      	movs	r1, #255	; 0xff
 8007f90:	4620      	mov	r0, r4
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	4465      	add	r5, ip
 8007f96:	f7fb f893 	bl	80030c0 <memset>
 8007f9a:	9b02      	ldr	r3, [sp, #8]
 8007f9c:	f04b 4200 	orr.w	r2, fp, #2147483648	; 0x80000000
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	6022      	str	r2, [r4, #0]
 8007fa4:	ddc4      	ble.n	8007f30 <_ZN3pxt2gcEi+0xdc>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6063      	str	r3, [r4, #4]
 8007faa:	f1ba 0f00 	cmp.w	sl, #0
 8007fae:	d02e      	beq.n	800800e <_ZN3pxt2gcEi+0x1ba>
 8007fb0:	45b1      	cmp	r9, r6
 8007fb2:	f8ca 4004 	str.w	r4, [sl, #4]
 8007fb6:	46a2      	mov	sl, r4
 8007fb8:	d8bc      	bhi.n	8007f34 <_ZN3pxt2gcEi+0xe0>
 8007fba:	683f      	ldr	r7, [r7, #0]
 8007fbc:	2f00      	cmp	r7, #0
 8007fbe:	d1a3      	bne.n	8007f08 <_ZN3pxt2gcEi+0xb4>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	4e33      	ldr	r6, [pc, #204]	; (8008090 <_ZN3pxt2gcEi+0x23c>)
 8007fc4:	009a      	lsls	r2, r3, #2
 8007fc6:	6833      	ldr	r3, [r6, #0]
 8007fc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007fcc:	00a9      	lsls	r1, r5, #2
 8007fce:	b193      	cbz	r3, 8007ff6 <_ZN3pxt2gcEi+0x1a2>
 8007fd0:	4b2e      	ldr	r3, [pc, #184]	; (800808c <_ZN3pxt2gcEi+0x238>)
 8007fd2:	086d      	lsrs	r5, r5, #1
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	b173      	cbz	r3, 8007ff6 <_ZN3pxt2gcEi+0x1a2>
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f3c0 0091 	ubfx	r0, r0, #2, #18
 8007fde:	4285      	cmp	r5, r0
 8007fe0:	d206      	bcs.n	8007ff0 <_ZN3pxt2gcEi+0x19c>
 8007fe2:	e029      	b.n	8008038 <_ZN3pxt2gcEi+0x1e4>
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	f3c4 0491 	ubfx	r4, r4, #2, #18
 8007fea:	4420      	add	r0, r4
 8007fec:	4285      	cmp	r5, r0
 8007fee:	d323      	bcc.n	8008038 <_ZN3pxt2gcEi+0x1e4>
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f6      	bne.n	8007fe4 <_ZN3pxt2gcEi+0x190>
 8007ff6:	f01b 0f01 	tst.w	fp, #1
 8007ffa:	d124      	bne.n	8008046 <_ZN3pxt2gcEi+0x1f2>
 8007ffc:	f898 3000 	ldrb.w	r3, [r8]
 8008000:	f023 0302 	bic.w	r3, r3, #2
 8008004:	f888 3000 	strb.w	r3, [r8]
 8008008:	b005      	add	sp, #20
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	4b1f      	ldr	r3, [pc, #124]	; (800808c <_ZN3pxt2gcEi+0x238>)
 8008010:	46a2      	mov	sl, r4
 8008012:	601c      	str	r4, [r3, #0]
 8008014:	e78c      	b.n	8007f30 <_ZN3pxt2gcEi+0xdc>
 8008016:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800801a:	683f      	ldr	r7, [r7, #0]
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	2f00      	cmp	r7, #0
 8008020:	f47f af72 	bne.w	8007f08 <_ZN3pxt2gcEi+0xb4>
 8008024:	e7cc      	b.n	8007fc0 <_ZN3pxt2gcEi+0x16c>
 8008026:	481b      	ldr	r0, [pc, #108]	; (8008094 <_ZN3pxt2gcEi+0x240>)
 8008028:	f001 fc84 	bl	8009934 <codal_dmesg>
 800802c:	462a      	mov	r2, r5
 800802e:	4621      	mov	r1, r4
 8008030:	4819      	ldr	r0, [pc, #100]	; (8008098 <_ZN3pxt2gcEi+0x244>)
 8008032:	f001 fc7f 	bl	8009934 <codal_dmesg>
 8008036:	e723      	b.n	8007e80 <_ZN3pxt2gcEi+0x2c>
 8008038:	1b45      	subs	r5, r0, r5
 800803a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800803e:	f01b 0f01 	tst.w	fp, #1
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	d0da      	beq.n	8007ffc <_ZN3pxt2gcEi+0x1a8>
 8008046:	4815      	ldr	r0, [pc, #84]	; (800809c <_ZN3pxt2gcEi+0x248>)
 8008048:	f001 fc74 	bl	8009934 <codal_dmesg>
 800804c:	e7d6      	b.n	8007ffc <_ZN3pxt2gcEi+0x1a8>
 800804e:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008052:	f7f8 f9ad 	bl	80003b0 <target_panic>
 8008056:	f898 3000 	ldrb.w	r3, [r8]
 800805a:	e706      	b.n	8007e6a <_ZN3pxt2gcEi+0x16>
 800805c:	463a      	mov	r2, r7
 800805e:	4621      	mov	r1, r4
 8008060:	480f      	ldr	r0, [pc, #60]	; (80080a0 <_ZN3pxt2gcEi+0x24c>)
 8008062:	f001 fc67 	bl	8009934 <codal_dmesg>
 8008066:	2f00      	cmp	r7, #0
 8008068:	f47f af2d 	bne.w	8007ec6 <_ZN3pxt2gcEi+0x72>
 800806c:	e733      	b.n	8007ed6 <_ZN3pxt2gcEi+0x82>
 800806e:	463a      	mov	r2, r7
 8008070:	4639      	mov	r1, r7
 8008072:	e7c0      	b.n	8007ff6 <_ZN3pxt2gcEi+0x1a2>
 8008074:	20002814 	.word	0x20002814
 8008078:	2000282c 	.word	0x2000282c
 800807c:	20002830 	.word	0x20002830
 8008080:	20002e4d 	.word	0x20002e4d
 8008084:	2000281c 	.word	0x2000281c
 8008088:	2000280c 	.word	0x2000280c
 800808c:	20002820 	.word	0x20002820
 8008090:	20002810 	.word	0x20002810
 8008094:	0800c030 	.word	0x0800c030
 8008098:	0800c038 	.word	0x0800c038
 800809c:	0800c050 	.word	0x0800c050
 80080a0:	0800c044 	.word	0x0800c044
 80080a4:	20002e4c 	.word	0x20002e4c

080080a8 <_ZN3pxtL13allocateBlockEv>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	4e30      	ldr	r6, [pc, #192]	; (800816c <_ZN3pxtL13allocateBlockEv+0xc4>)
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	b12b      	cbz	r3, 80080bc <_ZN3pxtL13allocateBlockEv+0x14>
 80080b0:	2002      	movs	r0, #2
 80080b2:	f7ff fecf 	bl	8007e54 <_ZN3pxt2gcEi>
 80080b6:	2015      	movs	r0, #21
 80080b8:	f7f8 f97a 	bl	80003b0 <target_panic>
 80080bc:	2100      	movs	r1, #0
 80080be:	20cf      	movs	r0, #207	; 0xcf
 80080c0:	f7fe fed4 	bl	8006e6c <_ZN3pxt9getConfigEii>
 80080c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080c8:	4607      	mov	r7, r0
 80080ca:	20ce      	movs	r0, #206	; 0xce
 80080cc:	f7fe fece 	bl	8006e6c <_ZN3pxt9getConfigEii>
 80080d0:	4604      	mov	r4, r0
 80080d2:	2000      	movs	r0, #0
 80080d4:	f002 f8d8 	bl	800a288 <_Z16device_heap_sizeh>
 80080d8:	1b04      	subs	r4, r0, r4
 80080da:	b15f      	cbz	r7, 80080f4 <_ZN3pxtL13allocateBlockEv+0x4c>
 80080dc:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
 80080e0:	307f      	adds	r0, #127	; 0x7f
 80080e2:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80080e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080ea:	eba3 2787 	sub.w	r7, r3, r7, lsl #10
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	dc24      	bgt.n	800813c <_ZN3pxtL13allocateBlockEv+0x94>
 80080f2:	2700      	movs	r7, #0
 80080f4:	4620      	mov	r0, r4
 80080f6:	f002 f921 	bl	800a33c <device_malloc>
 80080fa:	f1a4 0208 	sub.w	r2, r4, #8
 80080fe:	0793      	lsls	r3, r2, #30
 8008100:	4605      	mov	r5, r0
 8008102:	6042      	str	r2, [r0, #4]
 8008104:	d120      	bne.n	8008148 <_ZN3pxtL13allocateBlockEv+0xa0>
 8008106:	2000      	movs	r0, #0
 8008108:	4b19      	ldr	r3, [pc, #100]	; (8008170 <_ZN3pxtL13allocateBlockEv+0xc8>)
 800810a:	61af      	str	r7, [r5, #24]
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	f105 0708 	add.w	r7, r5, #8
 8008112:	6834      	ldr	r4, [r6, #0]
 8008114:	601f      	str	r7, [r3, #0]
 8008116:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
 800811a:	6028      	str	r0, [r5, #0]
 800811c:	60e9      	str	r1, [r5, #12]
 800811e:	60ab      	str	r3, [r5, #8]
 8008120:	b90c      	cbnz	r4, 8008126 <_ZN3pxtL13allocateBlockEv+0x7e>
 8008122:	e017      	b.n	8008154 <_ZN3pxtL13allocateBlockEv+0xac>
 8008124:	461c      	mov	r4, r3
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1fb      	bne.n	8008124 <_ZN3pxtL13allocateBlockEv+0x7c>
 800812c:	42a5      	cmp	r5, r4
 800812e:	d917      	bls.n	8008160 <_ZN3pxtL13allocateBlockEv+0xb8>
 8008130:	4b10      	ldr	r3, [pc, #64]	; (8008174 <_ZN3pxtL13allocateBlockEv+0xcc>)
 8008132:	eb07 0292 	add.w	r2, r7, r2, lsr #2
 8008136:	6025      	str	r5, [r4, #0]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813c:	4638      	mov	r0, r7
 800813e:	f002 f8fd 	bl	800a33c <device_malloc>
 8008142:	1be4      	subs	r4, r4, r7
 8008144:	4607      	mov	r7, r0
 8008146:	e7d5      	b.n	80080f4 <_ZN3pxtL13allocateBlockEv+0x4c>
 8008148:	f44f 7052 	mov.w	r0, #840	; 0x348
 800814c:	f7f8 f930 	bl	80003b0 <target_panic>
 8008150:	686a      	ldr	r2, [r5, #4]
 8008152:	e7d8      	b.n	8008106 <_ZN3pxtL13allocateBlockEv+0x5e>
 8008154:	4b07      	ldr	r3, [pc, #28]	; (8008174 <_ZN3pxtL13allocateBlockEv+0xcc>)
 8008156:	eb07 0292 	add.w	r2, r7, r2, lsr #2
 800815a:	6035      	str	r5, [r6, #0]
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8008164:	f7f8 f924 	bl	80003b0 <target_panic>
 8008168:	686a      	ldr	r2, [r5, #4]
 800816a:	e7e1      	b.n	8008130 <_ZN3pxtL13allocateBlockEv+0x88>
 800816c:	2000280c 	.word	0x2000280c
 8008170:	20002820 	.word	0x20002820
 8008174:	20002810 	.word	0x20002810

08008178 <free>:
 8008178:	b1b0      	cbz	r0, 80081a8 <free+0x30>
 800817a:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <free+0x4c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	b1fb      	cbz	r3, 80081c0 <free+0x48>
 8008180:	f103 0208 	add.w	r2, r3, #8
 8008184:	4290      	cmp	r0, r2
 8008186:	d9f9      	bls.n	800817c <free+0x4>
 8008188:	6859      	ldr	r1, [r3, #4]
 800818a:	440a      	add	r2, r1
 800818c:	4290      	cmp	r0, r2
 800818e:	d2f5      	bcs.n	800817c <free+0x4>
 8008190:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008194:	b510      	push	{r4, lr}
 8008196:	0f5a      	lsrs	r2, r3, #29
 8008198:	2a03      	cmp	r2, #3
 800819a:	4604      	mov	r4, r0
 800819c:	d105      	bne.n	80081aa <free+0x32>
 800819e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	4770      	bx	lr
 80081aa:	f240 3049 	movw	r0, #841	; 0x349
 80081ae:	f7f8 f8ff 	bl	80003b0 <target_panic>
 80081b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80081b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	f002 b8ea 	b.w	800a398 <device_free>
 80081c4:	2000280c 	.word	0x2000280c

080081c8 <_ZN3pxt10gcAllocateEi>:
 80081c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80081d0:	f100 0703 	add.w	r7, r0, #3
 80081d4:	ea4f 07a7 	mov.w	r7, r7, asr #2
 80081d8:	dc79      	bgt.n	80082ce <_ZN3pxt10gcAllocateEi+0x106>
 80081da:	f7f8 f88b 	bl	80002f4 <target_in_isr>
 80081de:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80082ec <_ZN3pxt10gcAllocateEi+0x124>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d13e      	bne.n	8008264 <_ZN3pxt10gcAllocateEi+0x9c>
 80081e6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ea:	07da      	lsls	r2, r3, #31
 80081ec:	d43a      	bmi.n	8008264 <_ZN3pxt10gcAllocateEi+0x9c>
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	f88a 3000 	strb.w	r3, [sl]
 80081f6:	f000 fe3b 	bl	8008e70 <_ZN3pxt16getThreadContextEv>
 80081fa:	b110      	cbz	r0, 8008202 <_ZN3pxt10gcAllocateEi+0x3a>
 80081fc:	6843      	ldr	r3, [r0, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d06f      	beq.n	80082e2 <_ZN3pxt10gcAllocateEi+0x11a>
 8008202:	2600      	movs	r6, #0
 8008204:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80082f0 <_ZN3pxt10gcAllocateEi+0x128>
 8008208:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80082f4 <_ZN3pxt10gcAllocateEi+0x12c>
 800820c:	f8db 4000 	ldr.w	r4, [fp]
 8008210:	f04f 0800 	mov.w	r8, #0
 8008214:	b1ec      	cbz	r4, 8008252 <_ZN3pxt10gcAllocateEi+0x8a>
 8008216:	b91e      	cbnz	r6, 8008220 <_ZN3pxt10gcAllocateEi+0x58>
 8008218:	f8d9 3000 	ldr.w	r3, [r9]
 800821c:	42a3      	cmp	r3, r4
 800821e:	d34f      	bcc.n	80082c0 <_ZN3pxt10gcAllocateEi+0xf8>
 8008220:	07a3      	lsls	r3, r4, #30
 8008222:	d101      	bne.n	8008228 <_ZN3pxt10gcAllocateEi+0x60>
 8008224:	0f23      	lsrs	r3, r4, #28
 8008226:	d103      	bne.n	8008230 <_ZN3pxt10gcAllocateEi+0x68>
 8008228:	f240 3051 	movw	r0, #849	; 0x351
 800822c:	f7f8 f8c0 	bl	80003b0 <target_panic>
 8008230:	6825      	ldr	r5, [r4, #0]
 8008232:	2d00      	cmp	r5, #0
 8008234:	db03      	blt.n	800823e <_ZN3pxt10gcAllocateEi+0x76>
 8008236:	f240 304b 	movw	r0, #843	; 0x34b
 800823a:	f7f8 f8b9 	bl	80003b0 <target_panic>
 800823e:	f3c5 0591 	ubfx	r5, r5, #2, #18
 8008242:	1bed      	subs	r5, r5, r7
 8008244:	2d00      	cmp	r5, #0
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	da13      	bge.n	8008272 <_ZN3pxt10gcAllocateEi+0xaa>
 800824a:	46a0      	mov	r8, r4
 800824c:	461c      	mov	r4, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e1      	bne.n	8008216 <_ZN3pxt10gcAllocateEi+0x4e>
 8008252:	b3ae      	cbz	r6, 80082c0 <_ZN3pxt10gcAllocateEi+0xf8>
 8008254:	2e01      	cmp	r6, #1
 8008256:	d037      	beq.n	80082c8 <_ZN3pxt10gcAllocateEi+0x100>
 8008258:	f44f 7053 	mov.w	r0, #844	; 0x34c
 800825c:	f7f8 f8a8 	bl	80003b0 <target_panic>
 8008260:	3601      	adds	r6, #1
 8008262:	e7d3      	b.n	800820c <_ZN3pxt10gcAllocateEi+0x44>
 8008264:	f240 3092 	movw	r0, #914	; 0x392
 8008268:	f7f8 f8a2 	bl	80003b0 <target_panic>
 800826c:	f89a 3000 	ldrb.w	r3, [sl]
 8008270:	e7bd      	b.n	80081ee <_ZN3pxt10gcAllocateEi+0x26>
 8008272:	d114      	bne.n	800829e <_ZN3pxt10gcAllocateEi+0xd6>
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d01f      	beq.n	80082ba <_ZN3pxt10gcAllocateEi+0xf2>
 800827a:	f8c8 3004 	str.w	r3, [r8, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	6022      	str	r2, [r4, #0]
 8008282:	b11b      	cbz	r3, 800828c <_ZN3pxt10gcAllocateEi+0xc4>
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	b10b      	cbz	r3, 800828c <_ZN3pxt10gcAllocateEi+0xc4>
 8008288:	0d1b      	lsrs	r3, r3, #20
 800828a:	d025      	beq.n	80082d8 <_ZN3pxt10gcAllocateEi+0x110>
 800828c:	f89a 3000 	ldrb.w	r3, [sl]
 8008290:	4620      	mov	r0, r4
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	f88a 3000 	strb.w	r3, [sl]
 800829a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	00aa      	lsls	r2, r5, #2
 80082a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80082a4:	f844 2027 	str.w	r2, [r4, r7, lsl #2]
 80082a8:	2d01      	cmp	r5, #1
 80082aa:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80082ae:	bf1c      	itt	ne
 80082b0:	607b      	strne	r3, [r7, #4]
 80082b2:	463b      	movne	r3, r7
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	d1df      	bne.n	800827a <_ZN3pxt10gcAllocateEi+0xb2>
 80082ba:	f8cb 3000 	str.w	r3, [fp]
 80082be:	e7de      	b.n	800827e <_ZN3pxt10gcAllocateEi+0xb6>
 80082c0:	2000      	movs	r0, #0
 80082c2:	f7ff fdc7 	bl	8007e54 <_ZN3pxt2gcEi>
 80082c6:	e7cb      	b.n	8008260 <_ZN3pxt10gcAllocateEi+0x98>
 80082c8:	f7ff feee 	bl	80080a8 <_ZN3pxtL13allocateBlockEv>
 80082cc:	e7c8      	b.n	8008260 <_ZN3pxt10gcAllocateEi+0x98>
 80082ce:	f240 304d 	movw	r0, #845	; 0x34d
 80082d2:	f7f8 f86d 	bl	80003b0 <target_panic>
 80082d6:	e780      	b.n	80081da <_ZN3pxt10gcAllocateEi+0x12>
 80082d8:	f44f 7054 	mov.w	r0, #848	; 0x350
 80082dc:	f7f8 f868 	bl	80003b0 <target_panic>
 80082e0:	e7d4      	b.n	800828c <_ZN3pxt10gcAllocateEi+0xc4>
 80082e2:	f240 304e 	movw	r0, #846	; 0x34e
 80082e6:	f7f8 f863 	bl	80003b0 <target_panic>
 80082ea:	e78a      	b.n	8008202 <_ZN3pxt10gcAllocateEi+0x3a>
 80082ec:	20002e4c 	.word	0x20002e4c
 80082f0:	20002820 	.word	0x20002820
 80082f4:	20002810 	.word	0x20002810

080082f8 <_ZN3pxt15gcAllocateArrayEi>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	1cc4      	adds	r4, r0, #3
 80082fc:	f024 0403 	bic.w	r4, r4, #3
 8008300:	3404      	adds	r4, #4
 8008302:	4620      	mov	r0, r4
 8008304:	f7ff ff60 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8008308:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 800830c:	f840 4b04 	str.w	r4, [r0], #4
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop

08008314 <app_alloc>:
 8008314:	b160      	cbz	r0, 8008330 <app_alloc+0x1c>
 8008316:	3003      	adds	r0, #3
 8008318:	f020 0003 	bic.w	r0, r0, #3
 800831c:	b510      	push	{r4, lr}
 800831e:	1d04      	adds	r4, r0, #4
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff ff51 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8008326:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800832a:	f840 4b04 	str.w	r4, [r0], #4
 800832e:	bd10      	pop	{r4, pc}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <malloc>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4604      	mov	r4, r0
 8008338:	f7f7 ffdc 	bl	80002f4 <target_in_isr>
 800833c:	b910      	cbnz	r0, 8008344 <malloc+0x10>
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <malloc+0x24>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b123      	cbz	r3, 800834e <malloc+0x1a>
 8008344:	4620      	mov	r0, r4
 8008346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800834a:	f001 bff7 	b.w	800a33c <device_malloc>
 800834e:	4620      	mov	r0, r4
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008354:	f7ff bfde 	b.w	8008314 <app_alloc>
 8008358:	20002e4c 	.word	0x20002e4c

0800835c <realloc>:
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <realloc+0x70>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	b38b      	cbz	r3, 80083c6 <realloc+0x6a>
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	f103 0408 	add.w	r4, r3, #8
 8008368:	42a0      	cmp	r0, r4
 800836a:	d903      	bls.n	8008374 <realloc+0x18>
 800836c:	685d      	ldr	r5, [r3, #4]
 800836e:	442c      	add	r4, r5
 8008370:	42a0      	cmp	r0, r4
 8008372:	d306      	bcc.n	8008382 <realloc+0x26>
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f4      	bne.n	8008364 <realloc+0x8>
 800837a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800837e:	f002 b83b 	b.w	800a3f8 <device_realloc>
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	460d      	mov	r5, r1
 8008388:	f7ff ffd4 	bl	8008334 <malloc>
 800838c:	4606      	mov	r6, r0
 800838e:	b1c4      	cbz	r4, 80083c2 <realloc+0x66>
 8008390:	b1be      	cbz	r6, 80083c2 <realloc+0x66>
 8008392:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008396:	0f5a      	lsrs	r2, r3, #29
 8008398:	2a03      	cmp	r2, #3
 800839a:	d005      	beq.n	80083a8 <realloc+0x4c>
 800839c:	f240 3049 	movw	r0, #841	; 0x349
 80083a0:	f7f8 f806 	bl	80003b0 <target_panic>
 80083a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80083a8:	f3c3 0391 	ubfx	r3, r3, #2, #18
 80083ac:	009a      	lsls	r2, r3, #2
 80083ae:	42aa      	cmp	r2, r5
 80083b0:	bf28      	it	cs
 80083b2:	462a      	movcs	r2, r5
 80083b4:	4621      	mov	r1, r4
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7fa fe3a 	bl	8003030 <memcpy>
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff fedb 	bl	8008178 <free>
 80083c2:	4630      	mov	r0, r6
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	f002 b817 	b.w	800a3f8 <device_realloc>
 80083ca:	bf00      	nop
 80083cc:	2000280c 	.word	0x2000280c

080083d0 <_ZN3pxt17pushThreadContextEPvS0_>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	4606      	mov	r6, r0
 80083d4:	460f      	mov	r7, r1
 80083d6:	f7f7 ff8d 	bl	80002f4 <target_in_isr>
 80083da:	b9e0      	cbnz	r0, 8008416 <_ZN3pxt17pushThreadContextEPvS0_+0x46>
 80083dc:	f000 fd48 	bl	8008e70 <_ZN3pxt16getThreadContextEv>
 80083e0:	4d17      	ldr	r5, [pc, #92]	; (8008440 <_ZN3pxt17pushThreadContextEPvS0_+0x70>)
 80083e2:	1bf3      	subs	r3, r6, r7
 80083e4:	4a17      	ldr	r2, [pc, #92]	; (8008444 <_ZN3pxt17pushThreadContextEPvS0_+0x74>)
 80083e6:	109b      	asrs	r3, r3, #2
 80083e8:	702b      	strb	r3, [r5, #0]
 80083ea:	4604      	mov	r4, r0
 80083ec:	6017      	str	r7, [r2, #0]
 80083ee:	b1b8      	cbz	r0, 8008420 <_ZN3pxt17pushThreadContextEPvS0_+0x50>
 80083f0:	2010      	movs	r0, #16
 80083f2:	f7ff fee9 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <_ZN3pxt17pushThreadContextEPvS0_+0x78>)
 80083f8:	6862      	ldr	r2, [r4, #4]
 80083fa:	6003      	str	r3, [r0, #0]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	6042      	str	r2, [r0, #4]
 8008400:	68e2      	ldr	r2, [r4, #12]
 8008402:	6083      	str	r3, [r0, #8]
 8008404:	1d03      	adds	r3, r0, #4
 8008406:	60c2      	str	r2, [r0, #12]
 8008408:	60e3      	str	r3, [r4, #12]
 800840a:	2300      	movs	r3, #0
 800840c:	60a6      	str	r6, [r4, #8]
 800840e:	702b      	strb	r3, [r5, #0]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	4620      	mov	r0, r4
 8008414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008416:	f240 3092 	movw	r0, #914	; 0x392
 800841a:	f7f7 ffc9 	bl	80003b0 <target_panic>
 800841e:	e7dd      	b.n	80083dc <_ZN3pxt17pushThreadContextEPvS0_+0xc>
 8008420:	2014      	movs	r0, #20
 8008422:	f7ff fed1 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8008426:	4604      	mov	r4, r0
 8008428:	2200      	movs	r2, #0
 800842a:	4b08      	ldr	r3, [pc, #32]	; (800844c <_ZN3pxt17pushThreadContextEPvS0_+0x7c>)
 800842c:	4908      	ldr	r1, [pc, #32]	; (8008450 <_ZN3pxt17pushThreadContextEPvS0_+0x80>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f844 1b04 	str.w	r1, [r4], #4
 8008434:	6102      	str	r2, [r0, #16]
 8008436:	6043      	str	r3, [r0, #4]
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fd1f 	bl	8008e7c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>
 800843e:	e7e4      	b.n	800840a <_ZN3pxt17pushThreadContextEPvS0_+0x3a>
 8008440:	20002e4d 	.word	0x20002e4d
 8008444:	2000281c 	.word	0x2000281c
 8008448:	60000010 	.word	0x60000010
 800844c:	2000282c 	.word	0x2000282c
 8008450:	60000014 	.word	0x60000014

08008454 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>:
 8008454:	b1a9      	cbz	r1, 8008482 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x2e>
 8008456:	2901      	cmp	r1, #1
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	dd09      	ble.n	8008470 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x1c>
 800845c:	1e4c      	subs	r4, r1, #1
 800845e:	3c01      	subs	r4, #1
 8008460:	2101      	movs	r1, #1
 8008462:	1d05      	adds	r5, r0, #4
 8008464:	f7ff fff6 	bl	8008454 <_ZN3pxt10registerGCEPPNS_12TValueStructEi>
 8008468:	1c63      	adds	r3, r4, #1
 800846a:	4628      	mov	r0, r5
 800846c:	d1f7      	bne.n	800845e <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0xa>
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <_ZN3pxt10registerGCEPPNS_12TValueStructEi+0x30>)
 8008472:	f040 0201 	orr.w	r2, r0, #1
 8008476:	8899      	ldrh	r1, [r3, #4]
 8008478:	4618      	mov	r0, r3
 800847a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847e:	f000 b955 	b.w	800872c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 8008482:	4770      	bx	lr
 8008484:	20002814 	.word	0x20002814

08008488 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>:
 8008488:	0783      	lsls	r3, r0, #30
 800848a:	d102      	bne.n	8008492 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
 800848c:	b108      	cbz	r0, 8008492 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xa>
 800848e:	0f03      	lsrs	r3, r0, #28
 8008490:	d100      	bne.n	8008494 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0xc>
 8008492:	4770      	bx	lr
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE+0x18>)
 8008496:	4602      	mov	r2, r0
 8008498:	8899      	ldrh	r1, [r3, #4]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 b946 	b.w	800872c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>
 80084a0:	20002814 	.word	0x20002814

080084a4 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>:
 80084a4:	0782      	lsls	r2, r0, #30
 80084a6:	4603      	mov	r3, r0
 80084a8:	d102      	bne.n	80084b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
 80084aa:	b108      	cbz	r0, 80084b0 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xc>
 80084ac:	0f1b      	lsrs	r3, r3, #28
 80084ae:	d100      	bne.n	80084b2 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE+0xe>
 80084b0:	4770      	bx	lr
 80084b2:	f7ff bbe3 	b.w	8007c7c <_ZN3pxtL9removePtrEPNS_12TValueStructE>
 80084b6:	bf00      	nop

080084b8 <_ZN3pxt13RefCollection4scanEPS0_>:
 80084b8:	3004      	adds	r0, #4
 80084ba:	f7ff bc85 	b.w	8007dc8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80084be:	bf00      	nop

080084c0 <_ZN3pxt9RefAction4scanEPS0_>:
 80084c0:	8881      	ldrh	r1, [r0, #4]
 80084c2:	300c      	adds	r0, #12
 80084c4:	f7ff bc5c 	b.w	8007d80 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>

080084c8 <_ZN3pxt11RefRefLocal4scanEPS0_>:
 80084c8:	6840      	ldr	r0, [r0, #4]
 80084ca:	f7ff bc3d 	b.w	8007d48 <_ZN3pxt6gcScanEPNS_12TValueStructE>
 80084ce:	bf00      	nop

080084d0 <_ZN3pxt6RefMap4scanEPS0_>:

void RefRefLocal::scan(RefRefLocal *t) {
    gcScan(t->v);
}

void RefMap::scan(RefMap *t) {
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4604      	mov	r4, r0
    gcScanSegment(t->keys);
 80084d4:	3004      	adds	r0, #4
 80084d6:	f7ff fc77 	bl	8007dc8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
    gcScanSegment(t->values);
 80084da:	f104 000c 	add.w	r0, r4, #12
}
 80084de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gcScan(t->v);
}

void RefMap::scan(RefMap *t) {
    gcScanSegment(t->keys);
    gcScanSegment(t->values);
 80084e2:	f7ff bc71 	b.w	8007dc8 <_ZN3pxt13gcScanSegmentERNS_7SegmentE>
 80084e6:	bf00      	nop

080084e8 <_ZN3pxt14RefRecord_scanEPNS_9RefRecordE>:
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 80084e8:	f850 3b04 	ldr.w	r3, [r0], #4
 80084ec:	f023 0301 	bic.w	r3, r3, #1
}

void RefRecord_scan(RefRecord *r) {
    VTable *tbl = getVTable(r);
    gcScanMany(r->fields, (tbl->numbytes - sizeof(RefRecord)) >> 2);
 80084f0:	8819      	ldrh	r1, [r3, #0]
 80084f2:	3904      	subs	r1, #4
 80084f4:	0889      	lsrs	r1, r1, #2
 80084f6:	f7ff bc43 	b.w	8007d80 <_ZN3pxt10gcScanManyEPPNS_12TValueStructEj>
 80084fa:	bf00      	nop

080084fc <_ZN3pxt13RefCollection6gcsizeEPS0_>:
    return SIZE(t->length());
}

unsigned RefCollection::gcsize(RefCollection *t) {
    return SIZE(0);
}
 80084fc:	2003      	movs	r0, #3
 80084fe:	4770      	bx	lr

08008500 <_ZN3pxt9RefAction6gcsizeEPS0_>:

unsigned RefAction::gcsize(RefAction *t) {
    return SIZE(t->len << 2);
 8008500:	8880      	ldrh	r0, [r0, #4]
 8008502:	0080      	lsls	r0, r0, #2
 8008504:	300f      	adds	r0, #15
}
 8008506:	0880      	lsrs	r0, r0, #2
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <_ZN3pxt11RefRefLocal6gcsizeEPS0_>:

unsigned RefRefLocal::gcsize(RefRefLocal *t) {
    return SIZE(0);
}
 800850c:	2002      	movs	r0, #2
 800850e:	4770      	bx	lr

08008510 <_ZN3pxt6RefMap6gcsizeEPS0_>:

unsigned RefMap::gcsize(RefMap *t) {
    return SIZE(0);
}
 8008510:	2005      	movs	r0, #5
 8008512:	4770      	bx	lr

08008514 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE>:
    TValue *data;
    ramint_t length;
    ramint_t size;

  public:
    LLSegment() : data(nullptr), length(0), size(0) {}
 8008514:	2300      	movs	r3, #0
 8008516:	4903      	ldr	r1, [pc, #12]	; (8008524 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x10>)
 8008518:	4a03      	ldr	r2, [pc, #12]	; (8008528 <_GLOBAL__sub_I__ZN3pxt16RefRecord_gcsizeEPNS_9RefRecordE+0x14>)
 800851a:	e9c1 3300 	strd	r3, r3, [r1]
 800851e:	e9c2 3300 	strd	r3, r3, [r2]

#endif

} // namespace pxt
 8008522:	4770      	bx	lr
 8008524:	20002814 	.word	0x20002814
 8008528:	20002824 	.word	0x20002824

0800852c <_ZN5loops7foreverEPN3pxt12TValueStructE>:
//
//
//
//
void forever(Action a) {
    runForever(a);
 800852c:	f000 bbce 	b.w	8008ccc <_ZN3pxt10runForeverEPNS_12TValueStructE>

08008530 <_ZN5loops5pauseEi>:
//
//
//
//
void pause(int ms) {
    if (ms < 0) return;
 8008530:	2800      	cmp	r0, #0
 8008532:	db01      	blt.n	8008538 <_ZN5loops5pauseEi+0x8>
    sleep_ms(ms);
 8008534:	f000 bbc6 	b.w	8008cc4 <_ZN3pxt8sleep_msEj>
}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <_ZN3pxt17RefRecord_destroyEPNS_9RefRecordE>:
}

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop

08008540 <_ZN3pxt13RefCollection7destroyEPS0_>:
 8008540:	2300      	movs	r3, #0
 8008542:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8008546:	4770      	bx	lr

08008548 <_ZN3pxt6RefMap7destroyEPS0_>:
 8008548:	2300      	movs	r3, #0
 800854a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800854e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008552:	4770      	bx	lr

08008554 <_ZN3pxt9RefAction5printEPS0_>:
 8008554:	4601      	mov	r1, r0
 8008556:	b500      	push	{lr}
 8008558:	4b06      	ldr	r3, [pc, #24]	; (8008574 <_ZN3pxt9RefAction5printEPS0_+0x20>)
 800855a:	6880      	ldr	r0, [r0, #8]
 800855c:	888a      	ldrh	r2, [r1, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	b083      	sub	sp, #12
 8008562:	1ac3      	subs	r3, r0, r3
 8008564:	9200      	str	r2, [sp, #0]
 8008566:	4804      	ldr	r0, [pc, #16]	; (8008578 <_ZN3pxt9RefAction5printEPS0_+0x24>)
 8008568:	2200      	movs	r2, #0
 800856a:	f001 f9e3 	bl	8009934 <codal_dmesg>
 800856e:	b003      	add	sp, #12
 8008570:	f85d fb04 	ldr.w	pc, [sp], #4
 8008574:	20002830 	.word	0x20002830
 8008578:	0800c22c 	.word	0x0800c22c

0800857c <_ZN3pxt11RefRefLocal5printEPS0_>:
 800857c:	4601      	mov	r1, r0
 800857e:	6843      	ldr	r3, [r0, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	4801      	ldr	r0, [pc, #4]	; (8008588 <_ZN3pxt11RefRefLocal5printEPS0_+0xc>)
 8008584:	f001 b9d6 	b.w	8009934 <codal_dmesg>
 8008588:	0800c060 	.word	0x0800c060

0800858c <_ZN3pxt6RefMap5printEPS0_>:
 800858c:	4601      	mov	r1, r0
 800858e:	8903      	ldrh	r3, [r0, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	4801      	ldr	r0, [pc, #4]	; (8008598 <_ZN3pxt6RefMap5printEPS0_+0xc>)
 8008594:	f001 b9ce 	b.w	8009934 <codal_dmesg>
 8008598:	0800c1c0 	.word	0x0800c1c0

0800859c <_ZN3pxt9LLSegment9setLengthEj.part.7>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	88c3      	ldrh	r3, [r0, #6]
 80085a0:	4605      	mov	r5, r0
 80085a2:	428b      	cmp	r3, r1
 80085a4:	460e      	mov	r6, r1
 80085a6:	d225      	bcs.n	80085f4 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x58>
 80085a8:	b34b      	cbz	r3, 80085fe <_ZN3pxt9LLSegment9setLengthEj.part.7+0x62>
 80085aa:	2b3f      	cmp	r3, #63	; 0x3f
 80085ac:	dd40      	ble.n	8008630 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x94>
 80085ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b2:	db26      	blt.n	8008602 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x66>
 80085b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80085bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085c0:	4293      	cmp	r3, r2
 80085c2:	bf98      	it	ls
 80085c4:	461c      	movls	r4, r3
 80085c6:	42b4      	cmp	r4, r6
 80085c8:	bfb8      	it	lt
 80085ca:	4634      	movlt	r4, r6
 80085cc:	00a0      	lsls	r0, r4, #2
 80085ce:	f001 feb5 	bl	800a33c <device_malloc>
 80085d2:	88eb      	ldrh	r3, [r5, #6]
 80085d4:	4607      	mov	r7, r0
 80085d6:	bb2b      	cbnz	r3, 8008624 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x88>
 80085d8:	1ae2      	subs	r2, r4, r3
 80085da:	0092      	lsls	r2, r2, #2
 80085dc:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 80085e0:	2100      	movs	r1, #0
 80085e2:	f7fa fd6d 	bl	80030c0 <memset>
 80085e6:	6828      	ldr	r0, [r5, #0]
 80085e8:	f001 fed6 	bl	800a398 <device_free>
 80085ec:	602f      	str	r7, [r5, #0]
 80085ee:	80ec      	strh	r4, [r5, #6]
 80085f0:	80ae      	strh	r6, [r5, #4]
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	8882      	ldrh	r2, [r0, #4]
 80085f6:	4291      	cmp	r1, r2
 80085f8:	d30a      	bcc.n	8008610 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x74>
 80085fa:	80ae      	strh	r6, [r5, #4]
 80085fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fe:	2404      	movs	r4, #4
 8008600:	e7e1      	b.n	80085c6 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x2a>
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x98>)
 8008604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008608:	fba4 3403 	umull	r3, r4, r4, r3
 800860c:	0864      	lsrs	r4, r4, #1
 800860e:	e7da      	b.n	80085c6 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x2a>
 8008610:	6800      	ldr	r0, [r0, #0]
 8008612:	1a52      	subs	r2, r2, r1
 8008614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008618:	0092      	lsls	r2, r2, #2
 800861a:	2100      	movs	r1, #0
 800861c:	f7fa fd50 	bl	80030c0 <memset>
 8008620:	80ae      	strh	r6, [r5, #4]
 8008622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008624:	009a      	lsls	r2, r3, #2
 8008626:	6829      	ldr	r1, [r5, #0]
 8008628:	f7fa fd02 	bl	8003030 <memcpy>
 800862c:	88eb      	ldrh	r3, [r5, #6]
 800862e:	e7d3      	b.n	80085d8 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x3c>
 8008630:	005c      	lsls	r4, r3, #1
 8008632:	e7c8      	b.n	80085c6 <_ZN3pxt9LLSegment9setLengthEj.part.7+0x2a>
 8008634:	aaaaaaab 	.word	0xaaaaaaab

08008638 <_ZN3pxt8checkStrEbPKc.part.8>:
 8008638:	4604      	mov	r4, r0
 800863a:	b508      	push	{r3, lr}
 800863c:	4804      	ldr	r0, [pc, #16]	; (8008650 <_ZN3pxt8checkStrEbPKc.part.8+0x18>)
 800863e:	f7fa fe53 	bl	80032e8 <debug_print>
 8008642:	4620      	mov	r0, r4
 8008644:	f7fa fe56 	bl	80032f4 <debug_println>
 8008648:	f7fa fde0 	bl	800320c <debug_flush>
 800864c:	e7fe      	b.n	800864c <_ZN3pxt8checkStrEbPKc.part.8+0x14>
 800864e:	bf00      	nop
 8008650:	0800c204 	.word	0x0800c204

08008654 <_ZN3pxt9RefAction7destroyEPS0_>:
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop

08008658 <_ZN3pxt11RefRefLocal7destroyEPS0_>:
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop

0800865c <_ZN3pxt8mkActionEiPNS_9RefActionE>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	680b      	ldr	r3, [r1, #0]
 8008660:	460c      	mov	r4, r1
 8008662:	f023 0301 	bic.w	r3, r3, #1
 8008666:	891b      	ldrh	r3, [r3, #8]
 8008668:	4605      	mov	r5, r0
 800866a:	2b04      	cmp	r3, #4
 800866c:	d114      	bne.n	8008698 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x3c>
 800866e:	b18d      	cbz	r5, 8008694 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x38>
 8008670:	1ce8      	adds	r0, r5, #3
 8008672:	0080      	lsls	r0, r0, #2
 8008674:	f7ff fda8 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 8008678:	4603      	mov	r3, r0
 800867a:	490d      	ldr	r1, [pc, #52]	; (80086b0 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x54>)
 800867c:	68a0      	ldr	r0, [r4, #8]
 800867e:	b2aa      	uxth	r2, r5
 8008680:	6098      	str	r0, [r3, #8]
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	809d      	strh	r5, [r3, #4]
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	f103 000c 	add.w	r0, r3, #12
 800868c:	2100      	movs	r1, #0
 800868e:	461c      	mov	r4, r3
 8008690:	f7fa fd16 	bl	80030c0 <memset>
 8008694:	4620      	mov	r0, r4
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	2201      	movs	r2, #1
 800869a:	f240 3185 	movw	r1, #901	; 0x385
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <_ZN3pxt8mkActionEiPNS_9RefActionE+0x58>)
 80086a0:	f001 f948 	bl	8009934 <codal_dmesg>
 80086a4:	f240 3085 	movw	r0, #901	; 0x385
 80086a8:	f7f7 fe82 	bl	80003b0 <target_panic>
 80086ac:	e7df      	b.n	800866e <_ZN3pxt8mkActionEiPNS_9RefActionE+0x12>
 80086ae:	bf00      	nop
 80086b0:	0800bdc0 	.word	0x0800bdc0
 80086b4:	0800c21c 	.word	0x0800c21c

080086b8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	6902      	ldr	r2, [r0, #16]
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x3c>)
 80086be:	4604      	mov	r4, r0
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d10c      	bne.n	80086de <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x26>
 80086c4:	8820      	ldrh	r0, [r4, #0]
 80086c6:	f7ff fd7f 	bl	80081c8 <_ZN3pxt10gcAllocateEi>
 80086ca:	4605      	mov	r5, r0
 80086cc:	8822      	ldrh	r2, [r4, #0]
 80086ce:	2100      	movs	r1, #0
 80086d0:	f840 4b04 	str.w	r4, [r0], #4
 80086d4:	3a04      	subs	r2, #4
 80086d6:	f7fa fcf3 	bl	80030c0 <memset>
 80086da:	4628      	mov	r0, r5
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	2203      	movs	r2, #3
 80086e0:	f44f 7162 	mov.w	r1, #904	; 0x388
 80086e4:	4804      	ldr	r0, [pc, #16]	; (80086f8 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0x40>)
 80086e6:	f001 f925 	bl	8009934 <codal_dmesg>
 80086ea:	f44f 7062 	mov.w	r0, #904	; 0x388
 80086ee:	f7f7 fe5f 	bl	80003b0 <target_panic>
 80086f2:	e7e7      	b.n	80086c4 <_ZN3pxt15mkClassInstanceEPNS_6VTableE+0xc>
 80086f4:	0800853d 	.word	0x0800853d
 80086f8:	0800c21c 	.word	0x0800c21c

080086fc <_ZN3pxt9RefObject9destroyVTEv>:
 80086fc:	6803      	ldr	r3, [r0, #0]
 80086fe:	f023 0301 	bic.w	r3, r3, #1
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	4718      	bx	r3
 8008706:	bf00      	nop

08008708 <_ZN3pxt15deleteRefObjectEPNS_9RefObjectE>:
 8008708:	6803      	ldr	r3, [r0, #0]
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	4718      	bx	r3
 8008712:	bf00      	nop

08008714 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE>:
 8008714:	6803      	ldr	r3, [r0, #0]
 8008716:	4601      	mov	r1, r0
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <_ZN3pxt15RefRecord_printEPNS_9RefRecordE+0x14>)
 8008722:	f001 b907 	b.w	8009934 <codal_dmesg>
 8008726:	bf00      	nop
 8008728:	0800c190 	.word	0x0800c190

0800872c <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE>:
 800872c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008730:	4299      	cmp	r1, r3
 8008732:	d811      	bhi.n	8008758 <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x2c>
 8008734:	8883      	ldrh	r3, [r0, #4]
 8008736:	b570      	push	{r4, r5, r6, lr}
 8008738:	428b      	cmp	r3, r1
 800873a:	4605      	mov	r5, r0
 800873c:	4616      	mov	r6, r2
 800873e:	460c      	mov	r4, r1
 8008740:	d903      	bls.n	800874a <_ZN3pxt9LLSegment3setEjPNS_12TValueStructE+0x1e>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	3101      	adds	r1, #1
 800874c:	f7ff ff26 	bl	800859c <_ZN3pxt9LLSegment9setLengthEj.part.7>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop

0800875c <_ZN3pxt9LLSegment3popEv>:
 800875c:	8883      	ldrh	r3, [r0, #4]
 800875e:	b14b      	cbz	r3, 8008774 <_ZN3pxt9LLSegment3popEv+0x18>
 8008760:	2100      	movs	r1, #0
 8008762:	6802      	ldr	r2, [r0, #0]
 8008764:	3b01      	subs	r3, #1
 8008766:	b29b      	uxth	r3, r3
 8008768:	8083      	strh	r3, [r0, #4]
 800876a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800876e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8008772:	4770      	bx	lr
 8008774:	4618      	mov	r0, r3
 8008776:	4770      	bx	lr

08008778 <_ZN3pxt7Segment9growByMinEt>:
 8008778:	88c3      	ldrh	r3, [r0, #6]
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	b18b      	cbz	r3, 80087a2 <_ZN3pxt7Segment9growByMinEt+0x2a>
 800877e:	2b3f      	cmp	r3, #63	; 0x3f
 8008780:	dd24      	ble.n	80087cc <_ZN3pxt7Segment9growByMinEt+0x54>
 8008782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008786:	db27      	blt.n	80087d8 <_ZN3pxt7Segment9growByMinEt+0x60>
 8008788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800878c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8008790:	4294      	cmp	r4, r2
 8008792:	d82c      	bhi.n	80087ee <_ZN3pxt7Segment9growByMinEt+0x76>
 8008794:	b2a4      	uxth	r4, r4
 8008796:	428c      	cmp	r4, r1
 8008798:	bf38      	it	cc
 800879a:	460c      	movcc	r4, r1
 800879c:	42a3      	cmp	r3, r4
 800879e:	d304      	bcc.n	80087aa <_ZN3pxt7Segment9growByMinEt+0x32>
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	2904      	cmp	r1, #4
 80087a4:	bf38      	it	cc
 80087a6:	2104      	movcc	r1, #4
 80087a8:	460c      	mov	r4, r1
 80087aa:	4605      	mov	r5, r0
 80087ac:	00a0      	lsls	r0, r4, #2
 80087ae:	f7ff fda3 	bl	80082f8 <_ZN3pxt15gcAllocateArrayEi>
 80087b2:	88eb      	ldrh	r3, [r5, #6]
 80087b4:	4606      	mov	r6, r0
 80087b6:	b9eb      	cbnz	r3, 80087f4 <_ZN3pxt7Segment9growByMinEt+0x7c>
 80087b8:	1ae2      	subs	r2, r4, r3
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80087c0:	2100      	movs	r1, #0
 80087c2:	f7fa fc7d 	bl	80030c0 <memset>
 80087c6:	602e      	str	r6, [r5, #0]
 80087c8:	80ec      	strh	r4, [r5, #6]
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	005c      	lsls	r4, r3, #1
 80087ce:	b2a4      	uxth	r4, r4
 80087d0:	428c      	cmp	r4, r1
 80087d2:	bf38      	it	cc
 80087d4:	460c      	movcc	r4, r1
 80087d6:	e7e1      	b.n	800879c <_ZN3pxt7Segment9growByMinEt+0x24>
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <_ZN3pxt7Segment9growByMinEt+0x88>)
 80087da:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80087de:	fba2 2404 	umull	r2, r4, r2, r4
 80087e2:	f3c4 044f 	ubfx	r4, r4, #1, #16
 80087e6:	428c      	cmp	r4, r1
 80087e8:	bf38      	it	cc
 80087ea:	460c      	movcc	r4, r1
 80087ec:	e7d6      	b.n	800879c <_ZN3pxt7Segment9growByMinEt+0x24>
 80087ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80087f2:	e7d3      	b.n	800879c <_ZN3pxt7Segment9growByMinEt+0x24>
 80087f4:	009a      	lsls	r2, r3, #2
 80087f6:	6829      	ldr	r1, [r5, #0]
 80087f8:	f7fa fc1a 	bl	8003030 <memcpy>
 80087fc:	88eb      	ldrh	r3, [r5, #6]
 80087fe:	e7db      	b.n	80087b8 <_ZN3pxt7Segment9growByMinEt+0x40>
 8008800:	aaaaaaab 	.word	0xaaaaaaab

08008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>:
 8008804:	88c3      	ldrh	r3, [r0, #6]
 8008806:	b570      	push	{r4, r5, r6, lr}
 8008808:	428b      	cmp	r3, r1
 800880a:	4605      	mov	r5, r0
 800880c:	460c      	mov	r4, r1
 800880e:	4616      	mov	r6, r2
 8008810:	d808      	bhi.n	8008824 <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x20>
 8008812:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008816:	4299      	cmp	r1, r3
 8008818:	d900      	bls.n	800881c <_ZN3pxt7Segment3setEjPNS_12TValueStructE+0x18>
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	3101      	adds	r1, #1
 800881e:	b289      	uxth	r1, r1
 8008820:	f7ff ffaa 	bl	8008778 <_ZN3pxt7Segment9growByMinEt>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800882a:	88ab      	ldrh	r3, [r5, #4]
 800882c:	42a3      	cmp	r3, r4
 800882e:	bf9c      	itt	ls
 8008830:	3401      	addls	r4, #1
 8008832:	80ac      	strhls	r4, [r5, #4]
 8008834:	bd70      	pop	{r4, r5, r6, pc}
 8008836:	bf00      	nop

08008838 <_ZN3pxt7Segment9setLengthEj>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	88c3      	ldrh	r3, [r0, #6]
 800883c:	4604      	mov	r4, r0
 800883e:	428b      	cmp	r3, r1
 8008840:	460d      	mov	r5, r1
 8008842:	d202      	bcs.n	800884a <_ZN3pxt7Segment9setLengthEj+0x12>
 8008844:	8881      	ldrh	r1, [r0, #4]
 8008846:	428b      	cmp	r3, r1
 8008848:	d901      	bls.n	800884e <_ZN3pxt7Segment9setLengthEj+0x16>
 800884a:	80a5      	strh	r5, [r4, #4]
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	f7ff ff93 	bl	8008778 <_ZN3pxt7Segment9growByMinEt>
 8008852:	80a5      	strh	r5, [r4, #4]
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop

08008858 <_ZN3pxt7Segment3popEv>:
 8008858:	8883      	ldrh	r3, [r0, #4]
 800885a:	b14b      	cbz	r3, 8008870 <_ZN3pxt7Segment3popEv+0x18>
 800885c:	2100      	movs	r1, #0
 800885e:	6802      	ldr	r2, [r0, #0]
 8008860:	3b01      	subs	r3, #1
 8008862:	b29b      	uxth	r3, r3
 8008864:	8083      	strh	r3, [r0, #4]
 8008866:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800886a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800886e:	4770      	bx	lr
 8008870:	4618      	mov	r0, r3
 8008872:	4770      	bx	lr

08008874 <_ZN3pxt7Segment6removeEj>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	8883      	ldrh	r3, [r0, #4]
 8008878:	428b      	cmp	r3, r1
 800887a:	d911      	bls.n	80088a0 <_ZN3pxt7Segment6removeEj+0x2c>
 800887c:	6804      	ldr	r4, [r0, #0]
 800887e:	1c4a      	adds	r2, r1, #1
 8008880:	008f      	lsls	r7, r1, #2
 8008882:	4293      	cmp	r3, r2
 8008884:	4605      	mov	r5, r0
 8008886:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
 800888a:	eb04 0007 	add.w	r0, r4, r7
 800888e:	d80a      	bhi.n	80088a6 <_ZN3pxt7Segment6removeEj+0x32>
 8008890:	2200      	movs	r2, #0
 8008892:	3b01      	subs	r3, #1
 8008894:	b29b      	uxth	r3, r3
 8008896:	80ab      	strh	r3, [r5, #4]
 8008898:	4630      	mov	r0, r6
 800889a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a0:	2600      	movs	r6, #0
 80088a2:	4630      	mov	r0, r6
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	1a5a      	subs	r2, r3, r1
 80088a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80088ac:	3a01      	subs	r2, #1
 80088ae:	1d39      	adds	r1, r7, #4
 80088b0:	4421      	add	r1, r4
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	f7fa fbea 	bl	800308c <memmove>
 80088b8:	88ab      	ldrh	r3, [r5, #4]
 80088ba:	682c      	ldr	r4, [r5, #0]
 80088bc:	e7e8      	b.n	8008890 <_ZN3pxt7Segment6removeEj+0x1c>
 80088be:	bf00      	nop

080088c0 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE>:
 80088c0:	8883      	ldrh	r3, [r0, #4]
 80088c2:	428b      	cmp	r3, r1
 80088c4:	d91c      	bls.n	8008900 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x40>
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	460e      	mov	r6, r1
 80088ca:	4615      	mov	r5, r2
 80088cc:	1c59      	adds	r1, r3, #1
 80088ce:	88c2      	ldrh	r2, [r0, #6]
 80088d0:	b289      	uxth	r1, r1
 80088d2:	428a      	cmp	r2, r1
 80088d4:	4604      	mov	r4, r0
 80088d6:	d90f      	bls.n	80088f8 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x38>
 80088d8:	1c70      	adds	r0, r6, #1
 80088da:	6821      	ldr	r1, [r4, #0]
 80088dc:	0080      	lsls	r0, r0, #2
 80088de:	1b9b      	subs	r3, r3, r6
 80088e0:	1f06      	subs	r6, r0, #4
 80088e2:	009a      	lsls	r2, r3, #2
 80088e4:	4408      	add	r0, r1
 80088e6:	4431      	add	r1, r6
 80088e8:	f7fa fbd0 	bl	800308c <memmove>
 80088ec:	88a3      	ldrh	r3, [r4, #4]
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	5195      	str	r5, [r2, r6]
 80088f4:	80a3      	strh	r3, [r4, #4]
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f7ff ff3e 	bl	8008778 <_ZN3pxt7Segment9growByMinEt>
 80088fc:	88a3      	ldrh	r3, [r4, #4]
 80088fe:	e7eb      	b.n	80088d8 <_ZN3pxt7Segment6insertEjPNS_12TValueStructE+0x18>
 8008900:	f7ff bf80 	b.w	8008804 <_ZN3pxt7Segment3setEjPNS_12TValueStructE>

08008904 <_ZN3pxt7Segment5printEv>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4605      	mov	r5, r0
 8008908:	480a      	ldr	r0, [pc, #40]	; (8008934 <_ZN3pxt7Segment5printEv+0x30>)
 800890a:	88eb      	ldrh	r3, [r5, #6]
 800890c:	88aa      	ldrh	r2, [r5, #4]
 800890e:	6829      	ldr	r1, [r5, #0]
 8008910:	f001 f810 	bl	8009934 <codal_dmesg>
 8008914:	88eb      	ldrh	r3, [r5, #6]
 8008916:	b15b      	cbz	r3, 8008930 <_ZN3pxt7Segment5printEv+0x2c>
 8008918:	2400      	movs	r4, #0
 800891a:	4e07      	ldr	r6, [pc, #28]	; (8008938 <_ZN3pxt7Segment5printEv+0x34>)
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	4630      	mov	r0, r6
 8008920:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008924:	f001 f806 	bl	8009934 <codal_dmesg>
 8008928:	88eb      	ldrh	r3, [r5, #6]
 800892a:	3401      	adds	r4, #1
 800892c:	42a3      	cmp	r3, r4
 800892e:	d8f5      	bhi.n	800891c <_ZN3pxt7Segment5printEv+0x18>
 8008930:	bd70      	pop	{r4, r5, r6, pc}
 8008932:	bf00      	nop
 8008934:	0800c1d8 	.word	0x0800c1d8
 8008938:	0800c1fc 	.word	0x0800c1fc

0800893c <_ZN3pxt13RefCollection5printEPS0_>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	8903      	ldrh	r3, [r0, #8]
 8008942:	4601      	mov	r1, r0
 8008944:	2200      	movs	r2, #0
 8008946:	4804      	ldr	r0, [pc, #16]	; (8008958 <_ZN3pxt13RefCollection5printEPS0_+0x1c>)
 8008948:	f000 fff4 	bl	8009934 <codal_dmesg>
 800894c:	1d20      	adds	r0, r4, #4
 800894e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008952:	f7ff bfd7 	b.w	8008904 <_ZN3pxt7Segment5printEv>
 8008956:	bf00      	nop
 8008958:	0800c170 	.word	0x0800c170

0800895c <_ZN3pxt13RefCollectionC1Ev>:
 800895c:	2200      	movs	r2, #0
 800895e:	4902      	ldr	r1, [pc, #8]	; (8008968 <_ZN3pxt13RefCollectionC1Ev+0xc>)
 8008960:	6082      	str	r2, [r0, #8]
 8008962:	e9c0 1200 	strd	r1, r2, [r0]
 8008966:	4770      	bx	lr
 8008968:	0800be50 	.word	0x0800be50

0800896c <_ZN3pxt11RefRefLocalC1Ev>:
 800896c:	2100      	movs	r1, #0
 800896e:	4a02      	ldr	r2, [pc, #8]	; (8008978 <_ZN3pxt11RefRefLocalC1Ev+0xc>)
 8008970:	e9c0 2100 	strd	r2, r1, [r0]
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	0800be20 	.word	0x0800be20

0800897c <_ZN3pxt6RefMapC1Ev>:
 800897c:	2200      	movs	r2, #0
 800897e:	4903      	ldr	r1, [pc, #12]	; (800898c <_ZN3pxt6RefMapC1Ev+0x10>)
 8008980:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8008984:	e9c0 1200 	strd	r1, r2, [r0]
 8008988:	6102      	str	r2, [r0, #16]
 800898a:	4770      	bx	lr
 800898c:	0800bdf0 	.word	0x0800bdf0

08008990 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE>:
 8008990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008994:	8906      	ldrh	r6, [r0, #8]
 8008996:	6845      	ldr	r5, [r0, #4]
 8008998:	b336      	cbz	r6, 80089e8 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x58>
 800899a:	6828      	ldr	r0, [r5, #0]
 800899c:	4281      	cmp	r1, r0
 800899e:	d027      	beq.n	80089f0 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x60>
 80089a0:	2300      	movs	r3, #0
 80089a2:	462a      	mov	r2, r5
 80089a4:	e003      	b.n	80089ae <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x1e>
 80089a6:	f852 4f04 	ldr.w	r4, [r2, #4]!
 80089aa:	428c      	cmp	r4, r1
 80089ac:	d019      	beq.n	80089e2 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x52>
 80089ae:	3301      	adds	r3, #1
 80089b0:	42b3      	cmp	r3, r6
 80089b2:	d1f8      	bne.n	80089a6 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x16>
 80089b4:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80089b8:	1d8f      	adds	r7, r1, #6
 80089ba:	2400      	movs	r4, #0
 80089bc:	e004      	b.n	80089c8 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x38>
 80089be:	3401      	adds	r4, #1
 80089c0:	42b4      	cmp	r4, r6
 80089c2:	d011      	beq.n	80089e8 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x58>
 80089c4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80089c8:	8883      	ldrh	r3, [r0, #4]
 80089ca:	4543      	cmp	r3, r8
 80089cc:	d1f7      	bne.n	80089be <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
 80089ce:	3006      	adds	r0, #6
 80089d0:	4642      	mov	r2, r8
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7fa fb4c 	bl	8003070 <memcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d1f0      	bne.n	80089be <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x2e>
 80089dc:	4620      	mov	r0, r4
 80089de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e2:	4618      	mov	r0, r3
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7f7      	b.n	80089e4 <_ZN3pxt6RefMap7findIdxEPNS_11BoxedStringE+0x54>

080089f4 <_ZN3pxt13debugMemLeaksEv>:
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop

080089f8 <_ZN3pxt5errorENS_9PXT_PANICEi>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	460a      	mov	r2, r1
 80089fe:	4804      	ldr	r0, [pc, #16]	; (8008a10 <_ZN3pxt5errorENS_9PXT_PANICEi+0x18>)
 8008a00:	4621      	mov	r1, r4
 8008a02:	f000 ff97 	bl	8009934 <codal_dmesg>
 8008a06:	4620      	mov	r0, r4
 8008a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a0c:	f7f7 bcd0 	b.w	80003b0 <target_panic>
 8008a10:	0800c21c 	.word	0x0800c21c

08008a14 <_ZN3pxt12templateHashEv>:
        }
    }
}

int templateHash() {
    return ((int *)bytecode)[4];
 8008a14:	4b01      	ldr	r3, [pc, #4]	; (8008a1c <_ZN3pxt12templateHashEv+0x8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
}
 8008a18:	6918      	ldr	r0, [r3, #16]
 8008a1a:	4770      	bx	lr
 8008a1c:	20002830 	.word	0x20002830

08008a20 <_ZN3pxt11programHashEv>:

int programHash() {
    return ((int *)bytecode)[6];
 8008a20:	4b01      	ldr	r3, [pc, #4]	; (8008a28 <_ZN3pxt11programHashEv+0x8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
}
 8008a24:	6998      	ldr	r0, [r3, #24]
 8008a26:	4770      	bx	lr
 8008a28:	20002830 	.word	0x20002830

08008a2c <_ZN3pxt13getNumGlobalsEv>:

int getNumGlobals() {
    return bytecode[16];
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <_ZN3pxt13getNumGlobalsEv+0x8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
}
 8008a30:	8c18      	ldrh	r0, [r3, #32]
 8008a32:	4770      	bx	lr
 8008a34:	20002830 	.word	0x20002830

08008a38 <_ZN3pxt11exec_binaryEPj>:

#ifndef X86_64
void exec_binary(unsigned *pc) {
 8008a38:	b570      	push	{r4, r5, r6, lr}

    ////  If the runtime version fails, then we are probably running an empty executable e.g.
    ////  pxt-maker/libs/stm32bluepill/built/dockercodal/build/STM32_BLUE_PILL.bin
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	f854 6b03 	ldr.w	r6, [r4], #3
int getNumGlobals() {
    return bytecode[16];
}

#ifndef X86_64
void exec_binary(unsigned *pc) {
 8008a40:	4605      	mov	r5, r0
    ////  If the runtime version fails, then we are probably running an empty executable e.g.
    ////  pxt-maker/libs/stm32bluepill/built/dockercodal/build/STM32_BLUE_PILL.bin
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
 8008a42:	4831      	ldr	r0, [pc, #196]	; (8008b08 <_ZN3pxt11exec_binaryEPj+0xd0>)
 8008a44:	f7fa fc50 	bl	80032e8 <debug_print>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7fa fc99 	bl	8003380 <debug_printhex_unsigned>
 8008a4e:	482f      	ldr	r0, [pc, #188]	; (8008b0c <_ZN3pxt11exec_binaryEPj+0xd4>)
 8008a50:	f7fa fc4a 	bl	80032e8 <debug_print>
 8008a54:	4630      	mov	r0, r6
 8008a56:	f7fa fc93 	bl	8003380 <debug_printhex_unsigned>
 8008a5a:	482d      	ldr	r0, [pc, #180]	; (8008b10 <_ZN3pxt11exec_binaryEPj+0xd8>)
 8008a5c:	f7fa fc4a 	bl	80032f4 <debug_println>
 8008a60:	f7fa fbd4 	bl	800320c <debug_flush>

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
    if (!cond) {
 8008a64:	f244 2310 	movw	r3, #16912	; 0x4210
 8008a68:	429e      	cmp	r6, r3
 8008a6a:	d146      	bne.n	8008afa <_ZN3pxt11exec_binaryEPj+0xc2>
    ////  We should run a proper MakeCode project executable e.g.
    ////  pxt-maker/projects/blink/built/flash.bin
    unsigned ver = *pc++;
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO
 8008a6c:	4829      	ldr	r0, [pc, #164]	; (8008b14 <_ZN3pxt11exec_binaryEPj+0xdc>)
 8008a6e:	f7fa fc41 	bl	80032f4 <debug_println>
 8008a72:	f7fa fbcb 	bl	800320c <debug_flush>

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8008a76:	686b      	ldr	r3, [r5, #4]
 8008a78:	4c27      	ldr	r4, [pc, #156]	; (8008b18 <_ZN3pxt11exec_binaryEPj+0xe0>)
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8008a7a:	8c18      	ldrh	r0, [r3, #32]
    unsigned ver = *pc++;
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
 8008a7c:	6023      	str	r3, [r4, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8008a7e:	0080      	lsls	r0, r0, #2
 8008a80:	f7ff fc48 	bl	8008314 <app_alloc>
int programHash() {
    return ((int *)bytecode)[6];
}

int getNumGlobals() {
    return bytecode[16];
 8008a84:	6823      	ldr	r3, [r4, #0]
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8008a86:	4e25      	ldr	r6, [pc, #148]	; (8008b1c <_ZN3pxt11exec_binaryEPj+0xe4>)
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8008a88:	8c1a      	ldrh	r2, [r3, #32]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	0092      	lsls	r2, r2, #2
    debug_print("---exec_binary addr "); debug_printhex_unsigned((size_t) pc - 1); debug_print(", ver "); debug_printhex_unsigned((size_t) ver); debug_println(""); debug_flush();  //// TODO
    checkStr(ver == 0x4210, ":( Bad runtime version");
    debug_println("---exec_binary allocate"); debug_flush();  //// TODO

    bytecode = *((uint16_t **)pc++); // the actual bytecode is here
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
 8008a8e:	6030      	str	r0, [r6, #0]
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
 8008a90:	f7fa fb16 	bl	80030c0 <memset>
    debug_println("---exec_binary compare"); debug_flush();  //// TODO
 8008a94:	4822      	ldr	r0, [pc, #136]	; (8008b20 <_ZN3pxt11exec_binaryEPj+0xe8>)
 8008a96:	f7fa fc2d 	bl	80032f4 <debug_println>
 8008a9a:	f7fa fbb7 	bl	800320c <debug_flush>
    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	4a20      	ldr	r2, [pc, #128]	; (8008b24 <_ZN3pxt11exec_binaryEPj+0xec>)
 8008aa2:	6819      	ldr	r1, [r3, #0]
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
    debug_println("---exec_binary compare"); debug_flush();  //// TODO

    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;
 8008aa4:	6830      	ldr	r0, [r6, #0]

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8008aa6:	4291      	cmp	r1, r2
    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());
    memset(globals, 0, sizeof(TValue) * getNumGlobals());
    debug_println("---exec_binary compare"); debug_flush();  //// TODO

    // can be any valid address, best in RAM for speed
    globals[0] = (TValue)&globals;
 8008aa8:	6006      	str	r6, [r0, #0]

    // just compare the first word
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
 8008aaa:	d129      	bne.n	8008b00 <_ZN3pxt11exec_binaryEPj+0xc8>
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	68ab      	ldr	r3, [r5, #8]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d125      	bne.n	8008b00 <_ZN3pxt11exec_binaryEPj+0xc8>
             ":( Failed partial flash");
    debug_println("---exec_binary initPerfCounters"); debug_flush();  //// TODO
 8008ab4:	481c      	ldr	r0, [pc, #112]	; (8008b28 <_ZN3pxt11exec_binaryEPj+0xf0>)
 8008ab6:	f7fa fc1d 	bl	80032f4 <debug_println>
 8008aba:	f7fa fba7 	bl	800320c <debug_flush>
    uintptr_t startptr = (uintptr_t)bytecode;

    startptr += 64; // header

    initPerfCounters();
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8008abe:	481b      	ldr	r0, [pc, #108]	; (8008b2c <_ZN3pxt11exec_binaryEPj+0xf4>)
    // TODO
    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,
             ":( Failed partial flash");
    debug_println("---exec_binary initPerfCounters"); debug_flush();  //// TODO

    uintptr_t startptr = (uintptr_t)bytecode;
 8008ac0:	6825      	ldr	r5, [r4, #0]

    startptr += 64; // header

    initPerfCounters();
    debug_println("---exec_binary initRuntime"); debug_flush();  //// TODO
 8008ac2:	f7fa fc17 	bl	80032f4 <debug_println>
 8008ac6:	f7fa fba1 	bl	800320c <debug_flush>

    initRuntime();
 8008aca:	f000 f927 	bl	8008d1c <_ZN3pxt11initRuntimeEv>
    debug_println("---exec_binary runAction0"); debug_flush();  //// TODO
 8008ace:	4818      	ldr	r0, [pc, #96]	; (8008b30 <_ZN3pxt11exec_binaryEPj+0xf8>)
 8008ad0:	f7fa fc10 	bl	80032f4 <debug_println>
 8008ad4:	f7fa fb9a 	bl	800320c <debug_flush>
}
static inline TValue runAction1(Action a, TValue arg0) {
    return asmRunAction3(a, arg0, 0, 0);
}
static inline TValue runAction0(Action a) {
    return asmRunAction3(a, 0, 0, 0);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008ae0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	47a0      	blx	r4

    runAction0((Action)startptr);
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO
 8008ae8:	4812      	ldr	r0, [pc, #72]	; (8008b34 <_ZN3pxt11exec_binaryEPj+0xfc>)
 8008aea:	f7fa fc03 	bl	80032f4 <debug_println>
 8008aee:	f7fa fb8d 	bl	800320c <debug_flush>

    pxt::releaseFiber();
}
 8008af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("---exec_binary runAction0"); debug_flush();  //// TODO

    runAction0((Action)startptr);
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO

    pxt::releaseFiber();
 8008af6:	f000 b8e3 	b.w	8008cc0 <_ZN3pxt12releaseFiberEv>
 8008afa:	480f      	ldr	r0, [pc, #60]	; (8008b38 <_ZN3pxt11exec_binaryEPj+0x100>)
 8008afc:	f7ff fd9c 	bl	8008638 <_ZN3pxt8checkStrEbPKc.part.8>

uint16_t *bytecode;
TValue *globals;

void checkStr(bool cond, const char *msg) {
    if (!cond) {
 8008b00:	480e      	ldr	r0, [pc, #56]	; (8008b3c <_ZN3pxt11exec_binaryEPj+0x104>)
 8008b02:	f7ff fd99 	bl	8008638 <_ZN3pxt8checkStrEbPKc.part.8>
 8008b06:	bf00      	nop
 8008b08:	0800c07c 	.word	0x0800c07c
 8008b0c:	0800c094 	.word	0x0800c094
 8008b10:	0800c384 	.word	0x0800c384
 8008b14:	0800c0b4 	.word	0x0800c0b4
 8008b18:	20002830 	.word	0x20002830
 8008b1c:	2000282c 	.word	0x2000282c
 8008b20:	0800c0cc 	.word	0x0800c0cc
 8008b24:	923b8e70 	.word	0x923b8e70
 8008b28:	0800c0e4 	.word	0x0800c0e4
 8008b2c:	0800c104 	.word	0x0800c104
 8008b30:	0800c120 	.word	0x0800c120
 8008b34:	0800c13c 	.word	0x0800c13c
 8008b38:	0800c09c 	.word	0x0800c09c
 8008b3c:	0800c158 	.word	0x0800c158

08008b40 <_ZN3pxt5startEv>:
    debug_println("---exec_binary releaseFiber"); debug_flush();  //// TODO

    pxt::releaseFiber();
}

void start() {
 8008b40:	b508      	push	{r3, lr}
    ////  Enable debug and init the target.
    target_enable_debug();  //// TODO
 8008b42:	f7f7 fbb3 	bl	80002ac <target_enable_debug>
    target_init(); //// TODO
 8008b46:	f7f7 fbb3 	bl	80002b0 <target_init>
    debug_println("---pxt::start"); debug_flush();  //// TODO
 8008b4a:	4805      	ldr	r0, [pc, #20]	; (8008b60 <_ZN3pxt5startEv+0x20>)
 8008b4c:	f7fa fbd2 	bl	80032f4 <debug_println>
 8008b50:	f7fa fb5c 	bl	800320c <debug_flush>
    exec_binary((unsigned *)functionsAndBytecode);
}
 8008b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void start() {
    ////  Enable debug and init the target.
    target_enable_debug();  //// TODO
    target_init(); //// TODO
    debug_println("---pxt::start"); debug_flush();  //// TODO
    exec_binary((unsigned *)functionsAndBytecode);
 8008b58:	4802      	ldr	r0, [pc, #8]	; (8008b64 <_ZN3pxt5startEv+0x24>)
 8008b5a:	f7ff bf6d 	b.w	8008a38 <_ZN3pxt11exec_binaryEPj>
 8008b5e:	bf00      	nop
 8008b60:	0800c1b0 	.word	0x0800c1b0
 8008b64:	0800ba00 	.word	0x0800ba00

08008b68 <_ZN6Array_7isArrayEPN3pxt12TValueStructE>:
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8008b68:	f010 0303 	ands.w	r3, r0, #3
 8008b6c:	d108      	bne.n	8008b80 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x18>
 8008b6e:	b130      	cbz	r0, 8008b7e <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x16>
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 8008b70:	6802      	ldr	r2, [r0, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1

static inline VTable *getAnyVTable(TValue v) {
    if (!isRefCounted(v))
        return NULL;
    auto vt = getVTable((RefObject *)v);
    if (vt->magic == VTABLE_MAGIC)
 8008b76:	78d1      	ldrb	r1, [r2, #3]
 8008b78:	29f9      	cmp	r1, #249	; 0xf9
 8008b7a:	d003      	beq.n	8008b84 <_ZN6Array_7isArrayEPN3pxt12TValueStructE+0x1c>

namespace Array_ {
//
bool isArray(TValue arr) {
    auto vt = getAnyVTable(arr);
    return vt && vt->classNo == BuiltInType::RefCollection;
 8008b7c:	4618      	mov	r0, r3
}
 8008b7e:	4770      	bx	lr

namespace Array_ {
//
bool isArray(TValue arr) {
    auto vt = getAnyVTable(arr);
    return vt && vt->classNo == BuiltInType::RefCollection;
 8008b80:	2000      	movs	r0, #0
 8008b82:	4770      	bx	lr
 8008b84:	8910      	ldrh	r0, [r2, #8]
 8008b86:	f1a0 0006 	sub.w	r0, r0, #6
 8008b8a:	fab0 f080 	clz	r0, r0
 8008b8e:	0940      	lsrs	r0, r0, #5
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop

08008b94 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE>:
}
} // namespace Array_

namespace pxtrt {
//
RefCollection *keysOf(TValue v) {
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4605      	mov	r5, r0
    auto r = NEW_GC(RefCollection);
 8008b98:	200c      	movs	r0, #12
 8008b9a:	f7ff fb15 	bl	80081c8 <_ZN3pxt10gcAllocateEi>

  public:
    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;
    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL

    Segment() : data(nullptr), length(0), size(0) {}
 8008b9e:	2300      	movs	r3, #0
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8008ba0:	4a10      	ldr	r2, [pc, #64]	; (8008be4 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x50>)
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8008ba2:	f015 0103 	ands.w	r1, r5, #3
 8008ba6:	4604      	mov	r4, r0
class RefObject {
  public:
#ifdef PXT_GC
    uint32_t vtable;

    RefObject(const VTable *vt) { vtable = PXT_VTABLE_TO_INT(vt); }
 8008ba8:	e9c0 2300 	strd	r2, r3, [r0]

  public:
    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;
    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL

    Segment() : data(nullptr), length(0), size(0) {}
 8008bac:	6083      	str	r3, [r0, #8]
#define TAG_NULL TAGGED_SPECIAL(1) // 6
#define TAG_NAN TAGGED_SPECIAL(3)  // 14
#define TAG_NUMBER(n) (TNumber)(void *)((n << 1) | 1)

inline bool isTagged(TValue v) {
    return ((intptr_t)v & 3) || !v;
 8008bae:	d106      	bne.n	8008bbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
 8008bb0:	b12d      	cbz	r5, 8008bbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
    void stref(int idx, TValue v);
};

static inline VTable *getVTable(RefObject *r) {
#ifdef PXT_GC
    return (VTable *)(r->vtable & ~1);
 8008bb2:	682b      	ldr	r3, [r5, #0]
 8008bb4:	f023 0301 	bic.w	r3, r3, #1

static inline VTable *getAnyVTable(TValue v) {
    if (!isRefCounted(v))
        return NULL;
    auto vt = getVTable((RefObject *)v);
    if (vt->magic == VTABLE_MAGIC)
 8008bb8:	78da      	ldrb	r2, [r3, #3]
 8008bba:	2af9      	cmp	r2, #249	; 0xf9
 8008bbc:	d001      	beq.n	8008bc2 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2e>
    auto dst = r->getData();
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
    for (unsigned i = 0; i < len; ++i)
        incr(dst[i]);
    return r;
}
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	bd70      	pop	{r4, r5, r6, pc}
namespace pxtrt {
//
RefCollection *keysOf(TValue v) {
    auto r = NEW_GC(RefCollection);
    MEMDBG("mkColl[keys]: => %p", r);
    if (getAnyVTable(v) != &RefMap_vtable)
 8008bc2:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x54>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d1fa      	bne.n	8008bbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>
        return r;
    auto rm = (RefMap *)v;
    auto len = rm->keys.getLength();
 8008bc8:	892e      	ldrh	r6, [r5, #8]
    if (!len)
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0f7      	beq.n	8008bbe <_ZN5pxtrt6keysOfEPN3pxt12TValueStructE+0x2a>

void Segment::ensure(ramint_t newSize) {
    if (newSize < size) {
        return;
    }
    growByMin(newSize);
 8008bce:	3004      	adds	r0, #4
 8008bd0:	f7ff fdd2 	bl	8008778 <_ZN3pxt7Segment9growByMinEt>

void Segment::setLength(unsigned newLength) {
    if (newLength > size) {
        ensure(length);
    }
    length = newLength;
 8008bd4:	8126      	strh	r6, [r4, #8]
    auto len = rm->keys.getLength();
    if (!len)
        return r;
    r->setLength(len);
    auto dst = r->getData();
    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));
 8008bd6:	00b2      	lsls	r2, r6, #2
 8008bd8:	6869      	ldr	r1, [r5, #4]
 8008bda:	6860      	ldr	r0, [r4, #4]
 8008bdc:	f7fa fa28 	bl	8003030 <memcpy>
    for (unsigned i = 0; i < len; ++i)
        incr(dst[i]);
    return r;
}
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	0800be50 	.word	0x0800be50
 8008be8:	0800bdf0 	.word	0x0800bdf0

08008bec <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 8008bec:	4800      	ldr	r0, [pc, #0]	; (8008bf0 <_ZN5codal14CodalComponent4initEv+0x4>)
 8008bee:	4770      	bx	lr
 8008bf0:	fffffc16 	.word	0xfffffc16

08008bf4 <_ZN3pxtL10runAction0EPNS_12TValueStructE>:
}
static inline TValue runAction1(Action a, TValue arg0) {
    return asmRunAction3(a, arg0, 0, 0);
}
static inline TValue runAction0(Action a) {
    return asmRunAction3(a, 0, 0, 0);
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4904      	ldr	r1, [pc, #16]	; (8008c08 <_ZN3pxtL10runAction0EPNS_12TValueStructE+0x14>)
    return asmRunAction3(a, arg0, arg1, 0);
}
static inline TValue runAction1(Action a, TValue arg0) {
    return asmRunAction3(a, arg0, 0, 0);
}
static inline TValue runAction0(Action a) {
 8008bf8:	b410      	push	{r4}
    return asmRunAction3(a, 0, 0, 0);
 8008bfa:	680c      	ldr	r4, [r1, #0]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8008c00:	4619      	mov	r1, r3
 8008c02:	46a4      	mov	ip, r4
}
 8008c04:	bc10      	pop	{r4}
}
static inline TValue runAction1(Action a, TValue arg0) {
    return asmRunAction3(a, arg0, 0, 0);
}
static inline TValue runAction0(Action a) {
    return asmRunAction3(a, 0, 0, 0);
 8008c06:	4760      	bx	ip
 8008c08:	20002830 	.word	0x20002830

08008c0c <_ZN3pxt13dispatchEventEN5codal5EventE>:
// ---------------------------------------------------------------------------

// We have the invariant that if [dispatchEvent] is registered against the DAL
// for a given event, then [handlersMap] contains a valid entry for that
// event.
void dispatchEvent(Event e) {
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	466b      	mov	r3, sp
 8008c12:	e883 0003 	stmia.w	r3, {r0, r1}
    lastEvent = e;
 8008c16:	4a17      	ldr	r2, [pc, #92]	; (8008c74 <_ZN3pxt13dispatchEventEN5codal5EventE+0x68>)
 8008c18:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8008c1c:	f8bd 4000 	ldrh.w	r4, [sp]
 8008c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c24:	e882 0003 	stmia.w	r2, {r0, r1}

    auto curr = findBinding(e.source, e.value);
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7fd fdde 	bl	80067ec <_ZN3pxt11findBindingEii>
 8008c30:	4606      	mov	r6, r0
    auto value = fromInt(e.value);
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7fe f8b6 	bl	8006da4 <_ZN3pxt7fromIntEi>
 8008c38:	4605      	mov	r5, r0
    if (curr)
 8008c3a:	b13e      	cbz	r6, 8008c4c <_ZN3pxt13dispatchEventEN5codal5EventE+0x40>
}
static inline TValue runAction2(Action a, TValue arg0, TValue arg1) {
    return asmRunAction3(a, arg0, arg1, 0);
}
static inline TValue runAction1(Action a, TValue arg0) {
    return asmRunAction3(a, arg0, 0, 0);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4a0e      	ldr	r2, [pc, #56]	; (8008c78 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 8008c40:	68f0      	ldr	r0, [r6, #12]
 8008c42:	6811      	ldr	r1, [r2, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8008c48:	4629      	mov	r1, r5
 8008c4a:	47b0      	blx	r6
        runAction1(curr->action, value);

    curr = findBinding(e.source, DEVICE_EVT_ANY);
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	2100      	movs	r1, #0
 8008c50:	f7fd fdcc 	bl	80067ec <_ZN3pxt11findBindingEii>
    if (curr)
 8008c54:	b158      	cbz	r0, 8008c6e <_ZN3pxt13dispatchEventEN5codal5EventE+0x62>
 8008c56:	2300      	movs	r3, #0
 8008c58:	4a07      	ldr	r2, [pc, #28]	; (8008c78 <_ZN3pxt13dispatchEventEN5codal5EventE+0x6c>)
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	68c0      	ldr	r0, [r0, #12]
 8008c60:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c62:	461a      	mov	r2, r3
 8008c64:	46a4      	mov	ip, r4
        runAction1(curr->action, value);
}
 8008c66:	b002      	add	sp, #8
 8008c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c6c:	4760      	bx	ip
 8008c6e:	b002      	add	sp, #8
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	bf00      	nop
 8008c74:	2000287c 	.word	0x2000287c
 8008c78:	20002830 	.word	0x20002830

08008c7c <_ZN3pxt9fiberDoneEPv>:
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
}

void fiberDone(void *a) {
 8008c7c:	b508      	push	{r3, lr}
    decr((Action)a);
    unregisterGCPtr((Action)a);
 8008c7e:	f7ff fc11 	bl	80084a4 <_ZN3pxt15unregisterGCPtrEPNS_12TValueStructE>
    release_fiber();
}
 8008c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void fiberDone(void *a) {
    decr((Action)a);
    unregisterGCPtr((Action)a);
    release_fiber();
 8008c86:	f001 ba21 	b.w	800a0cc <_ZN5codal13release_fiberEv>
 8008c8a:	bf00      	nop

08008c8c <_ZN3pxt12forever_stubEPv>:

void sleep_us(uint64_t us) {
    target_wait_us(us);
}

void forever_stub(void *a) {
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	b508      	push	{r3, lr}
 8008c90:	4d05      	ldr	r5, [pc, #20]	; (8008ca8 <_ZN3pxt12forever_stubEPv+0x1c>)
}
static inline TValue runAction0(Action a) {
    return asmRunAction3(a, 0, 0, 0);
 8008c92:	2300      	movs	r3, #0
 8008c94:	6828      	ldr	r0, [r5, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	47a0      	blx	r4
    while (true) {
        runAction0((Action)a);
        fiber_sleep(20);
 8008ca0:	2014      	movs	r0, #20
 8008ca2:	f001 f9d9 	bl	800a058 <_ZN5codal11fiber_sleepEm>
 8008ca6:	e7f4      	b.n	8008c92 <_ZN3pxt12forever_stubEPv+0x6>
 8008ca8:	20002830 	.word	0x20002830

08008cac <_ZN5codal3_cm5TimerD1Ev>:

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 8008cac:	b510      	push	{r4, lr}
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <_ZN5codal3_cm5TimerD1Ev+0x10>)
 8008cb2:	6003      	str	r3, [r0, #0]
 8008cb4:	f001 fd12 	bl	800a6dc <_ZN5codal5TimerD1Ev>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd10      	pop	{r4, pc}
 8008cbc:	0800c59c 	.word	0x0800c59c

08008cc0 <_ZN3pxt12releaseFiberEv>:
    unregisterGCPtr((Action)a);
    release_fiber();
}

void releaseFiber() {
    release_fiber();
 8008cc0:	f001 ba04 	b.w	800a0cc <_ZN5codal13release_fiberEv>

08008cc4 <_ZN3pxt8sleep_msEj>:
}

void sleep_ms(unsigned ms) {
    fiber_sleep(ms);
 8008cc4:	f001 b9c8 	b.w	800a058 <_ZN5codal11fiber_sleepEm>

08008cc8 <_ZN3pxt8sleep_usEy>:
}

void sleep_us(uint64_t us) {
    target_wait_us(us);
 8008cc8:	f7f7 bb44 	b.w	8000354 <target_wait_us>

08008ccc <_ZN3pxt10runForeverEPNS_12TValueStructE>:
        fiber_sleep(20);
    }
}

void runForever(Action a) {
    if (a != 0) {
 8008ccc:	b150      	cbz	r0, 8008ce4 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x18>
        runAction0((Action)a);
        fiber_sleep(20);
    }
}

void runForever(Action a) {
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	4604      	mov	r4, r0
    if (a != 0) {
        incr(a);
        registerGCPtr(a);
 8008cd2:	f7ff fbd9 	bl	8008488 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber(forever_stub, (void *)a);
 8008cd6:	4621      	mov	r1, r4
    }
}
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void runForever(Action a) {
    if (a != 0) {
        incr(a);
        registerGCPtr(a);
        create_fiber(forever_stub, (void *)a);
 8008cdc:	4a02      	ldr	r2, [pc, #8]	; (8008ce8 <_ZN3pxt10runForeverEPNS_12TValueStructE+0x1c>)
 8008cde:	4803      	ldr	r0, [pc, #12]	; (8008cec <_ZN3pxt10runForeverEPNS_12TValueStructE+0x20>)
 8008ce0:	f001 b8ac 	b.w	8009e3c <_ZN5codal12create_fiberEPFvPvES0_S2_>
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	0800a159 	.word	0x0800a159
 8008cec:	08008c8d 	.word	0x08008c8d

08008cf0 <_ZN3pxt13runInParallelEPNS_12TValueStructE>:
    }
}

void runInParallel(Action a) {
    if (a != 0) {
 8008cf0:	b150      	cbz	r0, 8008d08 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x18>
        registerGCPtr(a);
        create_fiber(forever_stub, (void *)a);
    }
}

void runInParallel(Action a) {
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	4604      	mov	r4, r0
    if (a != 0) {
        incr(a);
        registerGCPtr(a);
 8008cf6:	f7ff fbc7 	bl	8008488 <_ZN3pxt13registerGCPtrEPNS_12TValueStructE>
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 8008cfa:	4621      	mov	r1, r4
    }
}
 8008cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void runInParallel(Action a) {
    if (a != 0) {
        incr(a);
        registerGCPtr(a);
        create_fiber((void (*)(void *))runAction0, (void *)a, fiberDone);
 8008d00:	4a02      	ldr	r2, [pc, #8]	; (8008d0c <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x1c>)
 8008d02:	4803      	ldr	r0, [pc, #12]	; (8008d10 <_ZN3pxt13runInParallelEPNS_12TValueStructE+0x20>)
 8008d04:	f001 b89a 	b.w	8009e3c <_ZN5codal12create_fiberEPFvPvES0_S2_>
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	08008c7d 	.word	0x08008c7d
 8008d10:	08008bf5 	.word	0x08008bf5

08008d14 <_ZN3pxt12waitForEventEii>:
    }
}

void waitForEvent(int id, int event) {
    fiber_wait_for_event(id, event);
 8008d14:	b289      	uxth	r1, r1
 8008d16:	b280      	uxth	r0, r0
 8008d18:	f001 b9c2 	b.w	800a0a0 <_ZN5codal20fiber_wait_for_eventEtt>

08008d1c <_ZN3pxt11initRuntimeEv>:
}

void initRuntime() {
 8008d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
        xfree(p);
    }
}

static void initCodal() {
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 8008d1e:	483f      	ldr	r0, [pc, #252]	; (8008e1c <_ZN3pxt11initRuntimeEv+0x100>)

void waitForEvent(int id, int event) {
    fiber_wait_for_event(id, event);
}

void initRuntime() {
 8008d20:	b083      	sub	sp, #12
        xfree(p);
    }
}

static void initCodal() {
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
 8008d22:	f7fa fae7 	bl	80032f4 <debug_println>
 8008d26:	f7fa fa71 	bl	800320c <debug_flush>
    cpu_clock_init();
 8008d2a:	f000 fb2f 	bl	800938c <_Z14cpu_clock_initv>
    debug_println("---initCodal commInit"); debug_flush();  //// TODO
 8008d2e:	483c      	ldr	r0, [pc, #240]	; (8008e20 <_ZN3pxt11initRuntimeEv+0x104>)
 8008d30:	f7fa fae0 	bl	80032f4 <debug_println>
 8008d34:	f7fa fa6a 	bl	800320c <debug_flush>
struct FreeList {
    FreeList *next;
};

static void commInit() {
    int commSize = bytecode[20];
 8008d38:	4b3a      	ldr	r3, [pc, #232]	; (8008e24 <_ZN3pxt11initRuntimeEv+0x108>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	8d1e      	ldrh	r6, [r3, #40]	; 0x28
    if (!commSize)
 8008d3e:	b35e      	cbz	r6, 8008d98 <_ZN3pxt11initRuntimeEv+0x7c>
        return;

    FreeList *head = NULL;
 8008d40:	2400      	movs	r4, #0
        volatile unsigned hp = (unsigned)p;
        if (hp & 4) {
            xfree(p);
            p = xmalloc(8);
        }
        if (p == commBase) {
 8008d42:	4f39      	ldr	r7, [pc, #228]	; (8008e28 <_ZN3pxt11initRuntimeEv+0x10c>)
 8008d44:	e004      	b.n	8008d50 <_ZN3pxt11initRuntimeEv+0x34>
 8008d46:	42bd      	cmp	r5, r7
 8008d48:	d012      	beq.n	8008d70 <_ZN3pxt11initRuntimeEv+0x54>
            p = xmalloc(commSize);
            if (p != commBase)
                oops(10);
            break;
        }
        if (p > commBase)
 8008d4a:	d862      	bhi.n	8008e12 <_ZN3pxt11initRuntimeEv+0xf6>
            oops(11);
        auto f = (FreeList *)p;
        f->next = head;
 8008d4c:	602c      	str	r4, [r5, #0]
 8008d4e:	462c      	mov	r4, r5
        return;

    FreeList *head = NULL;
    void *commBase = (void *)PXT_COMM_BASE;
    for (;;) {
        void *p = xmalloc(4);
 8008d50:	2004      	movs	r0, #4
 8008d52:	f001 faf3 	bl	800a33c <device_malloc>
        // assume 4 byte alloc header; if we're not hitting 8 byte alignment, try allocating 8
        // bytes, not 4 without the volatile, gcc assumes 8 byte alignment on malloc()
        volatile unsigned hp = (unsigned)p;
 8008d56:	9001      	str	r0, [sp, #4]
        if (hp & 4) {
 8008d58:	9b01      	ldr	r3, [sp, #4]
        return;

    FreeList *head = NULL;
    void *commBase = (void *)PXT_COMM_BASE;
    for (;;) {
        void *p = xmalloc(4);
 8008d5a:	4605      	mov	r5, r0
        // assume 4 byte alloc header; if we're not hitting 8 byte alignment, try allocating 8
        // bytes, not 4 without the volatile, gcc assumes 8 byte alignment on malloc()
        volatile unsigned hp = (unsigned)p;
        if (hp & 4) {
 8008d5c:	075b      	lsls	r3, r3, #29
 8008d5e:	d5f2      	bpl.n	8008d46 <_ZN3pxt11initRuntimeEv+0x2a>
            xfree(p);
 8008d60:	f001 fb1a 	bl	800a398 <device_free>
            p = xmalloc(8);
 8008d64:	2008      	movs	r0, #8
 8008d66:	f001 fae9 	bl	800a33c <device_malloc>
 8008d6a:	4605      	mov	r5, r0
        }
        if (p == commBase) {
 8008d6c:	42bd      	cmp	r5, r7
 8008d6e:	d1ec      	bne.n	8008d4a <_ZN3pxt11initRuntimeEv+0x2e>
            xfree(p);
 8008d70:	4628      	mov	r0, r5
 8008d72:	f001 fb11 	bl	800a398 <device_free>
            // allocate the comm section; this is never freed
            p = xmalloc(commSize);
 8008d76:	4630      	mov	r0, r6
 8008d78:	f001 fae0 	bl	800a33c <device_malloc>
            if (p != commBase)
 8008d7c:	4285      	cmp	r5, r0
 8008d7e:	d003      	beq.n	8008d88 <_ZN3pxt11initRuntimeEv+0x6c>
    if (!cond)
        error(code, subcode);
}

inline void oops(int subcode = 0) {
    target_panic(800 + subcode);
 8008d80:	f240 302a 	movw	r0, #810	; 0x32a
 8008d84:	f7f7 fb14 	bl	80003b0 <target_panic>
        auto f = (FreeList *)p;
        f->next = head;
        head = f;
    }
    // free all the filler stuff
    while (head) {
 8008d88:	b134      	cbz	r4, 8008d98 <_ZN3pxt11initRuntimeEv+0x7c>
        auto p = head;
        head = head->next;
 8008d8a:	6825      	ldr	r5, [r4, #0]
        xfree(p);
 8008d8c:	4620      	mov	r0, r4
        auto f = (FreeList *)p;
        f->next = head;
        head = f;
    }
    // free all the filler stuff
    while (head) {
 8008d8e:	462c      	mov	r4, r5
        auto p = head;
        head = head->next;
        xfree(p);
 8008d90:	f001 fb02 	bl	800a398 <device_free>
        auto f = (FreeList *)p;
        f->next = head;
        head = f;
    }
    // free all the filler stuff
    while (head) {
 8008d94:	2c00      	cmp	r4, #0
 8008d96:	d1f8      	bne.n	8008d8a <_ZN3pxt11initRuntimeEv+0x6e>
    debug_println("---initCodal cpu_clock_init"); debug_flush();  //// TODO
    cpu_clock_init();
    debug_println("---initCodal commInit"); debug_flush();  //// TODO

    commInit();
    debug_println("---initCodal scheduler_init"); debug_flush();  //// TODO
 8008d98:	4824      	ldr	r0, [pc, #144]	; (8008e2c <_ZN3pxt11initRuntimeEv+0x110>)
 8008d9a:	f7fa faab 	bl	80032f4 <debug_println>
 8008d9e:	4c24      	ldr	r4, [pc, #144]	; (8008e30 <_ZN3pxt11initRuntimeEv+0x114>)
 8008da0:	f7fa fa34 	bl	800320c <debug_flush>

    // Bring up fiber scheduler.
    scheduler_init(devMessageBus);
 8008da4:	4823      	ldr	r0, [pc, #140]	; (8008e34 <_ZN3pxt11initRuntimeEv+0x118>)
 8008da6:	f000 ff59 	bl	8009c5c <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("---initCodal components.init"); debug_flush();  //// TODO
 8008daa:	4823      	ldr	r0, [pc, #140]	; (8008e38 <_ZN3pxt11initRuntimeEv+0x11c>)
 8008dac:	f7fa faa2 	bl	80032f4 <debug_println>
 8008db0:	4e22      	ldr	r6, [pc, #136]	; (8008e3c <_ZN3pxt11initRuntimeEv+0x120>)
 8008db2:	f7fa fa2b 	bl	800320c <debug_flush>
    // We probably don't need that - components are initialized when one obtains
    // the reference to it.
    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,
    // &CircuitPlayground::onListenerRegisteredEvent);

    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 8008db6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8008dba:	e001      	b.n	8008dc0 <_ZN3pxt11initRuntimeEv+0xa4>
 8008dbc:	42ac      	cmp	r4, r5
 8008dbe:	d00a      	beq.n	8008dd6 <_ZN3pxt11initRuntimeEv+0xba>
        if (CodalComponent::components[i])
 8008dc0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d0f9      	beq.n	8008dbc <_ZN3pxt11initRuntimeEv+0xa0>
            CodalComponent::components[i]->init();
 8008dc8:	6803      	ldr	r3, [r0, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	42b3      	cmp	r3, r6
 8008dce:	d0f5      	beq.n	8008dbc <_ZN3pxt11initRuntimeEv+0xa0>
 8008dd0:	4798      	blx	r3
    // We probably don't need that - components are initialized when one obtains
    // the reference to it.
    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,
    // &CircuitPlayground::onListenerRegisteredEvent);

    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {
 8008dd2:	42ac      	cmp	r4, r5
 8008dd4:	d1f4      	bne.n	8008dc0 <_ZN3pxt11initRuntimeEv+0xa4>
        if (CodalComponent::components[i])
            CodalComponent::components[i]->init();
    }
    debug_println("---initCodal usb_init"); debug_flush();  //// TODO
 8008dd6:	481a      	ldr	r0, [pc, #104]	; (8008e40 <_ZN3pxt11initRuntimeEv+0x124>)
 8008dd8:	f7fa fa8c 	bl	80032f4 <debug_println>
 8008ddc:	f7fa fa16 	bl	800320c <debug_flush>

    usb_init();
 8008de0:	f000 fb5e 	bl	80094a0 <_ZN3pxt8usb_initEv>
    debug_println("---initCodal done"); debug_flush();  //// TODO
 8008de4:	4817      	ldr	r0, [pc, #92]	; (8008e44 <_ZN3pxt11initRuntimeEv+0x128>)
 8008de6:	f7fa fa85 	bl	80032f4 <debug_println>
 8008dea:	f7fa fa0f 	bl	800320c <debug_flush>

    auto led = LOOKUP_PIN(LED);
 8008dee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008df2:	200d      	movs	r0, #13
 8008df4:	f7fe f83a 	bl	8006e6c <_ZN3pxt9getConfigEii>
 8008df8:	b2c0      	uxtb	r0, r0
 8008dfa:	f000 fa07 	bl	800920c <_ZN3pxt9lookupPinEi>
    if (led) {
 8008dfe:	b118      	cbz	r0, 8008e08 <_ZN3pxt11initRuntimeEv+0xec>
        led->setDigitalValue(0);
 8008e00:	6803      	ldr	r3, [r0, #0]
 8008e02:	2100      	movs	r1, #0
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4798      	blx	r3
}

void initRuntime() {
    initCodal();
    platform_init();
}
 8008e08:	b003      	add	sp, #12
 8008e0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    fiber_wait_for_event(id, event);
}

void initRuntime() {
    initCodal();
    platform_init();
 8008e0e:	f000 baaf 	b.w	8009370 <_ZN3pxt13platform_initEv>
 8008e12:	f240 302b 	movw	r0, #811	; 0x32b
 8008e16:	f7f7 facb 	bl	80003b0 <target_panic>
 8008e1a:	e797      	b.n	8008d4c <_ZN3pxt11initRuntimeEv+0x30>
 8008e1c:	0800c24c 	.word	0x0800c24c
 8008e20:	0800c268 	.word	0x0800c268
 8008e24:	20002830 	.word	0x20002830
 8008e28:	20001000 	.word	0x20001000
 8008e2c:	0800c280 	.word	0x0800c280
 8008e30:	20002910 	.word	0x20002910
 8008e34:	20002834 	.word	0x20002834
 8008e38:	0800c29c 	.word	0x0800c29c
 8008e3c:	08008bed 	.word	0x08008bed
 8008e40:	0800c2bc 	.word	0x0800c2bc
 8008e44:	0800c2d4 	.word	0x0800c2d4

08008e48 <_ZN3pxt16afterProgramPageEv>:
}

//
unsigned afterProgramPage() {
    unsigned ptr = (unsigned)&bytecode[0];
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <_ZN3pxt16afterProgramPageEv+0x1c>)
    initCodal();
    platform_init();
}

//
unsigned afterProgramPage() {
 8008e4a:	b510      	push	{r4, lr}
    unsigned ptr = (unsigned)&bytecode[0];
 8008e4c:	681c      	ldr	r4, [r3, #0]
    ptr += programSize();
 8008e4e:	f7fe f805 	bl	8006e5c <_ZN3pxt11programSizeEv>
    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
 8008e52:	f204 34ff 	addw	r4, r4, #1023	; 0x3ff
 8008e56:	4420      	add	r0, r4
    return ptr;
}
 8008e58:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8008e5c:	f020 0003 	bic.w	r0, r0, #3
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	bf00      	nop
 8008e64:	20002830 	.word	0x20002830

08008e68 <_ZN3pxt15getSerialNumberEv>:
          * Determines a unique 32 bit ID for this device, if provided by the hardware.
          * @return A 32 bit unique identifier.
          */
        virtual uint32_t getSerialNumber()
        {
            return target_get_serial();
 8008e68:	f7f7 ba96 	b.w	8000398 <target_get_serial>

08008e6c <_ZN3pxt15current_time_msEv>:
int getSerialNumber() {
    return device.getSerialNumber();
}

int current_time_ms() {
    return system_timer_current_time();
 8008e6c:	f001 bc38 	b.w	800a6e0 <_ZN5codal25system_timer_current_timeEv>

08008e70 <_ZN3pxt16getThreadContextEv>:
}

#ifdef PXT_GC
ThreadContext *getThreadContext() {
    return (ThreadContext *)currentFiber->user_data;
 8008e70:	4b01      	ldr	r3, [pc, #4]	; (8008e78 <_ZN3pxt16getThreadContextEv+0x8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	6a18      	ldr	r0, [r3, #32]
 8008e76:	4770      	bx	lr
 8008e78:	20002e18 	.word	0x20002e18

08008e7c <_ZN3pxt16setThreadContextEPNS_13ThreadContextE>:

void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
 8008e7c:	4b01      	ldr	r3, [pc, #4]	; (8008e84 <_ZN3pxt16setThreadContextEPNS_13ThreadContextE+0x8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6218      	str	r0, [r3, #32]
}
 8008e82:	4770      	bx	lr
 8008e84:	20002e18 	.word	0x20002e18

08008e88 <_ZN3pxt15gcProcessStacksEi>:
    if (fib == currentFiber)
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
}

void gcProcessStacks(int flags) {
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	b085      	sub	sp, #20
    int numFibers = codal::list_fibers(NULL);
 8008e90:	2000      	movs	r0, #0
 8008e92:	f000 fd7d 	bl	8009990 <_ZN5codal11list_fibersEPPNS_5FiberE>
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 8008e96:	0085      	lsls	r5, r0, #2
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
}

void gcProcessStacks(int flags) {
    int numFibers = codal::list_fibers(NULL);
 8008e98:	4604      	mov	r4, r0
    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f001 fa4e 	bl	800a33c <device_malloc>
 8008ea0:	9003      	str	r0, [sp, #12]
    int num2 = codal::list_fibers(fibers);
 8008ea2:	f000 fd75 	bl	8009990 <_ZN5codal11list_fibersEPPNS_5FiberE>
    if (numFibers != num2)
 8008ea6:	4284      	cmp	r4, r0
 8008ea8:	d003      	beq.n	8008eb2 <_ZN3pxt15gcProcessStacksEi+0x2a>
 8008eaa:	f44f 704b 	mov.w	r0, #812	; 0x32c
 8008eae:	f7f7 fa7f 	bl	80003b0 <target_panic>
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
 8008eb2:	2c00      	cmp	r4, #0
 8008eb4:	dd3b      	ble.n	8008f2e <_ZN3pxt15gcProcessStacksEi+0xa6>
 8008eb6:	f04f 0900 	mov.w	r9, #0
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008f58 <_ZN3pxt15gcProcessStacksEi+0xd0>
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	442b      	add	r3, r5
 8008ec6:	f00a 0a02 	and.w	sl, sl, #2
 8008eca:	9302      	str	r3, [sp, #8]
        auto fib = fibers[i];
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f853 7f04 	ldr.w	r7, [r3, #4]!
        auto ctx = (ThreadContext *)fib->user_data;
 8008ed2:	6a3e      	ldr	r6, [r7, #32]
    if (numFibers != num2)
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
        auto fib = fibers[i];
 8008ed4:	9301      	str	r3, [sp, #4]
        auto ctx = (ThreadContext *)fib->user_data;
        if (!ctx)
 8008ed6:	b336      	cbz	r6, 8008f26 <_ZN3pxt15gcProcessStacksEi+0x9e>
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 8008ed8:	3604      	adds	r6, #4
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008eda:	f8d8 3000 	ldr.w	r3, [r8]
        auto fib = fibers[i];
        auto ctx = (ThreadContext *)fib->user_data;
        if (!ctx)
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
 8008ede:	6834      	ldr	r4, [r6, #0]
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008ee0:	429f      	cmp	r7, r3
 8008ee2:	d034      	beq.n	8008f4e <_ZN3pxt15gcProcessStacksEi+0xc6>
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8008ee4:	6838      	ldr	r0, [r7, #0]
 8008ee6:	68bd      	ldr	r5, [r7, #8]
 8008ee8:	f7f7 fa80 	bl	80003ec <tcb_get_stack_base>
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008eec:	f8d8 3000 	ldr.w	r3, [r8]
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8008ef0:	1a28      	subs	r0, r5, r0
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008ef2:	429f      	cmp	r7, r3
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8008ef4:	4404      	add	r4, r0
        auto ctx = (ThreadContext *)fib->user_data;
        if (!ctx)
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 8008ef6:	6875      	ldr	r5, [r6, #4]
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008ef8:	d007      	beq.n	8008f0a <_ZN3pxt15gcProcessStacksEi+0x82>
        return sp;
    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));
 8008efa:	6838      	ldr	r0, [r7, #0]
 8008efc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8008f00:	f7f7 fa74 	bl	80003ec <tcb_get_stack_base>
 8008f04:	ebab 0000 	sub.w	r0, fp, r0
 8008f08:	4405      	add	r5, r0
        if (!ctx)
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
            if (flags & 2)
 8008f0a:	f1ba 0f00 	cmp.w	sl, #0
 8008f0e:	d114      	bne.n	8008f3a <_ZN3pxt15gcProcessStacksEi+0xb2>
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
            // VLOG("mark: %p - %p", ptr, end);
            while (ptr < end) {
 8008f10:	42ac      	cmp	r4, r5
 8008f12:	d205      	bcs.n	8008f20 <_ZN3pxt15gcProcessStacksEi+0x98>
                gcProcess(*ptr++);
 8008f14:	f854 0b04 	ldr.w	r0, [r4], #4
 8008f18:	f7fe ff70 	bl	8007dfc <_ZN3pxt9gcProcessEPNS_12TValueStructE>
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
            if (flags & 2)
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
            // VLOG("mark: %p - %p", ptr, end);
            while (ptr < end) {
 8008f1c:	42ac      	cmp	r4, r5
 8008f1e:	d3f9      	bcc.n	8008f14 <_ZN3pxt15gcProcessStacksEi+0x8c>
    for (int i = 0; i < numFibers; ++i) {
        auto fib = fibers[i];
        auto ctx = (ThreadContext *)fib->user_data;
        if (!ctx)
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
 8008f20:	68b6      	ldr	r6, [r6, #8]
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d1d9      	bne.n	8008eda <_ZN3pxt15gcProcessStacksEi+0x52>
    int num2 = codal::list_fibers(fibers);
    if (numFibers != num2)
        oops(12);
    int cnt = 0;

    for (int i = 0; i < numFibers; ++i) {
 8008f26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d1ce      	bne.n	8008ecc <_ZN3pxt15gcProcessStacksEi+0x44>
            while (ptr < end) {
                gcProcess(*ptr++);
            }
        }
    }
    xfree(fibers);
 8008f2e:	9803      	ldr	r0, [sp, #12]
}
 8008f30:	b005      	add	sp, #20
 8008f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            while (ptr < end) {
                gcProcess(*ptr++);
            }
        }
    }
    xfree(fibers);
 8008f36:	f001 ba2f 	b.w	800a398 <device_free>
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
            if (flags & 2)
                DMESG("RS%d:%p/%d", cnt++, ptr, end - ptr);
 8008f3a:	1b2b      	subs	r3, r5, r4
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	109b      	asrs	r3, r3, #2
 8008f40:	4622      	mov	r2, r4
 8008f42:	4804      	ldr	r0, [pc, #16]	; (8008f54 <_ZN3pxt15gcProcessStacksEi+0xcc>)
 8008f44:	f109 0901 	add.w	r9, r9, #1
 8008f48:	f000 fcf4 	bl	8009934 <codal_dmesg>
 8008f4c:	e7e0      	b.n	8008f10 <_ZN3pxt15gcProcessStacksEi+0x88>
        auto ctx = (ThreadContext *)fib->user_data;
        if (!ctx)
            continue;
        for (auto seg = &ctx->stack; seg; seg = seg->next) {
            auto ptr = (TValue *)threadAddressFor(fib, seg->top);
            auto end = (TValue *)threadAddressFor(fib, seg->bottom);
 8008f4e:	6875      	ldr	r5, [r6, #4]
void setThreadContext(ThreadContext *ctx) {
    currentFiber->user_data = ctx;
}

static void *threadAddressFor(codal::Fiber *fib, void *sp) {
    if (fib == currentFiber)
 8008f50:	e7db      	b.n	8008f0a <_ZN3pxt15gcProcessStacksEi+0x82>
 8008f52:	bf00      	nop
 8008f54:	0800c2e8 	.word	0x0800c2e8
 8008f58:	20002e18 	.word	0x20002e18

08008f5c <_GLOBAL__sub_I__ZN3pxt8devTimerE>:
    }
    xfree(fibers);
}
#endif

} // namespace pxt
 8008f5c:	b570      	push	{r4, r5, r6, lr}
__attribute__((section(".binmeta"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {
    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,
    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,
};

CODAL_TIMER devTimer;
 8008f5e:	4e0d      	ldr	r6, [pc, #52]	; (8008f94 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x38>)
 8008f60:	4d0d      	ldr	r5, [pc, #52]	; (8008f98 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x3c>)
 8008f62:	4630      	mov	r0, r6
 8008f64:	f002 f99e 	bl	800b2a4 <_ZN5codal3_cm5TimerC1Ev>
Event lastEvent;
MessageBus devMessageBus;
 8008f68:	4c0c      	ldr	r4, [pc, #48]	; (8008f9c <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x40>)
__attribute__((section(".binmeta"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {
    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,
    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,
};

CODAL_TIMER devTimer;
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	490c      	ldr	r1, [pc, #48]	; (8008fa0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x44>)
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7f7 fa80 	bl	8000474 <__aeabi_atexit>
Event lastEvent;
 8008f74:	480b      	ldr	r0, [pc, #44]	; (8008fa4 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x48>)
 8008f76:	f001 ff07 	bl	800ad88 <_ZN5codal5EventC1Ev>
MessageBus devMessageBus;
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f001 fe46 	bl	800ac0c <_ZN5codal10MessageBusC1Ev>
 8008f80:	462a      	mov	r2, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	4908      	ldr	r1, [pc, #32]	; (8008fa8 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x4c>)
 8008f86:	f7f7 fa75 	bl	8000474 <__aeabi_atexit>

        /**
          * The default constructor of a DeviceComponent
          */
        CodalDevice()
        {
 8008f8a:	4b08      	ldr	r3, [pc, #32]	; (8008fac <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x50>)
 8008f8c:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <_GLOBAL__sub_I__ZN3pxt8devTimerE+0x54>)
 8008f8e:	601a      	str	r2, [r3, #0]
    }
    xfree(fibers);
}
#endif

} // namespace pxt
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	bf00      	nop
 8008f94:	2000285c 	.word	0x2000285c
 8008f98:	2000053c 	.word	0x2000053c
 8008f9c:	20002834 	.word	0x20002834
 8008fa0:	08008cad 	.word	0x08008cad
 8008fa4:	2000287c 	.word	0x2000287c
 8008fa8:	0800aca1 	.word	0x0800aca1
 8008fac:	20002858 	.word	0x20002858
 8008fb0:	0800c394 	.word	0x0800c394

08008fb4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>:
    curr = findBinding(e.source, DEVICE_EVT_ANY);
    if (curr)
        runAction1(curr->action, value);
}

void registerWithDal(int id, int event, Action a, int flags) {
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	4616      	mov	r6, r2
 8008fbc:	461f      	mov	r7, r3
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	460d      	mov	r5, r1
    // first time?
    if (!findBinding(id, event))
 8008fc2:	f7fd fc13 	bl	80067ec <_ZN3pxt11findBindingEii>
 8008fc6:	b138      	cbz	r0, 8008fd8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x24>
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4620      	mov	r0, r4
}
 8008fce:	b002      	add	sp, #8
 8008fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

void registerWithDal(int id, int event, Action a, int flags) {
    // first time?
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
    setBinding(id, event, a);
 8008fd4:	f7fd bc18 	b.w	8006808 <_ZN3pxt10setBindingEiiPNS_12TValueStructE>
        int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 8008fd8:	2c0f      	cmp	r4, #15
}

void registerWithDal(int id, int event, Action a, int flags) {
    // first time?
    if (!findBinding(id, event))
        devMessageBus.listen(id, event, dispatchEvent, flags);
 8008fda:	b2bf      	uxth	r7, r7
 8008fdc:	d101      	bne.n	8008fe2 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x2e>
 8008fde:	2fc0      	cmp	r7, #192	; 0xc0
 8008fe0:	d1f2      	bne.n	8008fc8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8008fe2:	2020      	movs	r0, #32
 8008fe4:	f7fa fa14 	bl	8003410 <_Znwj>
 8008fe8:	4680      	mov	r8, r0
 8008fea:	b2a1      	uxth	r1, r4
 8008fec:	9700      	str	r7, [sp, #0]
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x5c>)
 8008ff0:	b2aa      	uxth	r2, r5
 8008ff2:	f001 fa19 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4806      	ldr	r0, [pc, #24]	; (8009014 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x60>)
 8008ffa:	f001 fc31 	bl	800a860 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0e2      	beq.n	8008fc8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
                return DEVICE_OK;

            delete newListener;
 8009002:	4640      	mov	r0, r8
 8009004:	f001 fa28 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 8009008:	4640      	mov	r0, r8
 800900a:	f7fa fa03 	bl	8003414 <_ZdlPv>

            return DEVICE_NOT_SUPPORTED;
 800900e:	e7db      	b.n	8008fc8 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi+0x14>
 8009010:	08008c0d 	.word	0x08008c0d
 8009014:	20002834 	.word	0x20002834

08009018 <_ZN7control10raiseEventEii>:
//
//
//
//
//
void raiseEvent(int src, int value) {
 8009018:	b500      	push	{lr}
 800901a:	b083      	sub	sp, #12
    Event evt(src, value);
 800901c:	b28a      	uxth	r2, r1
 800901e:	2301      	movs	r3, #1
 8009020:	b281      	uxth	r1, r0
 8009022:	4668      	mov	r0, sp
 8009024:	f001 fe96 	bl	800ad54 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 8009028:	b003      	add	sp, #12
 800902a:	f85d fb04 	ldr.w	pc, [sp], #4
 800902e:	bf00      	nop

08009030 <_ZN7control16deviceDalVersionEv>:
//
//
//
//
String deviceDalVersion() {
    return mkString(device.getVersion());
 8009030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <_ZN7control16deviceDalVersionEv+0xc>)
 8009036:	f7fd bc0f 	b.w	8006858 <_ZN3pxt8mkStringEPKci>
 800903a:	bf00      	nop
 800903c:	0800c2f4 	.word	0x0800c2f4

08009040 <_ZN7control19allocateNotifyEventEv>:

//
//
//
//
int allocateNotifyEvent() {
 8009040:	b508      	push	{r3, lr}
    return ::allocateNotifyEvent();
 8009042:	f001 fda9 	bl	800ab98 <_ZN5codal19allocateNotifyEventEv>
}
 8009046:	bd08      	pop	{r3, pc}

08009048 <_ZN7control5dmesgEPN3pxt11BoxedStringE>:

//
//
void dmesg(String s) {
    DMESG("# %s", s->data);
 8009048:	1d81      	adds	r1, r0, #6
 800904a:	4801      	ldr	r0, [pc, #4]	; (8009050 <_ZN7control5dmesgEPN3pxt11BoxedStringE+0x8>)
 800904c:	f000 bc72 	b.w	8009934 <codal_dmesg>
 8009050:	0800c2fc 	.word	0x0800c2fc

08009054 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv>:
}

//
//
void dmesgPtr(String str, Object_ ptr) {
    DMESG("# %s: %p", str->data, ptr);
 8009054:	460a      	mov	r2, r1
 8009056:	1d81      	adds	r1, r0, #6
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <_ZN7control8dmesgPtrEPN3pxt11BoxedStringEPv+0xc>)
 800905a:	f000 bc6b 	b.w	8009934 <codal_dmesg>
 800905e:	bf00      	nop
 8009060:	0800c304 	.word	0x0800c304

08009064 <_ZN4pinsL7initI2CEv.part.0>:
#include "ErrorNo.h"

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
 8009064:	b570      	push	{r4, r5, r6, lr}
      if (NULL == i2c) {
        i2c = new CODAL_I2C(*LOOKUP_PIN(SDA), *LOOKUP_PIN(SCL));
 8009066:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800906a:	2019      	movs	r0, #25
 800906c:	f7fd fefe 	bl	8006e6c <_ZN3pxt9getConfigEii>
 8009070:	b2c0      	uxtb	r0, r0
 8009072:	f000 f8cb 	bl	800920c <_ZN3pxt9lookupPinEi>
 8009076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800907a:	4605      	mov	r5, r0
 800907c:	2018      	movs	r0, #24
 800907e:	f7fd fef5 	bl	8006e6c <_ZN3pxt9getConfigEii>
 8009082:	b2c0      	uxtb	r0, r0
 8009084:	f000 f8c2 	bl	800920c <_ZN3pxt9lookupPinEi>
 8009088:	4606      	mov	r6, r0
 800908a:	2010      	movs	r0, #16
 800908c:	f7fa f9c0 	bl	8003410 <_Znwj>
 8009090:	4604      	mov	r4, r0
 8009092:	4632      	mov	r2, r6
 8009094:	4629      	mov	r1, r5
 8009096:	f001 feb9 	bl	800ae0c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 800909a:	4b01      	ldr	r3, [pc, #4]	; (80090a0 <_ZN4pinsL7initI2CEv.part.0+0x3c>)
 800909c:	601c      	str	r4, [r3, #0]
      }
    }
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	20002884 	.word	0x20002884

080090a4 <_ZN4pins13i2cReadBufferEiib>:
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090a8:	4f10      	ldr	r7, [pc, #64]	; (80090ec <_ZN4pins13i2cReadBufferEiib+0x48>)
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 80090aa:	b082      	sub	sp, #8

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090ac:	683b      	ldr	r3, [r7, #0]
//
//
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
 80090ae:	4604      	mov	r4, r0
 80090b0:	460e      	mov	r6, r1
 80090b2:	4690      	mov	r8, r2

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090b4:	b1b3      	cbz	r3, 80090e4 <_ZN4pins13i2cReadBufferEiib+0x40>
//
//
    Buffer i2cReadBuffer(int address, int size, bool repeat = false)
    {
      initI2C();
      Buffer buf = mkBuffer(NULL, size);
 80090b6:	4631      	mov	r1, r6
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7fd fbfb 	bl	80068b4 <_ZN3pxt8mkBufferEPKhi>
 80090be:	4605      	mov	r5, r0
      int status = i2c->read(address << 1, buf->data, size, repeat);
 80090c0:	6838      	ldr	r0, [r7, #0]
 80090c2:	0061      	lsls	r1, r4, #1
 80090c4:	6804      	ldr	r4, [r0, #0]
 80090c6:	f8cd 8000 	str.w	r8, [sp]
 80090ca:	b289      	uxth	r1, r1
 80090cc:	4633      	mov	r3, r6
 80090ce:	69e4      	ldr	r4, [r4, #28]
 80090d0:	f105 0208 	add.w	r2, r5, #8
 80090d4:	47a0      	blx	r4
      if (status != ErrorCode::DEVICE_OK) {
 80090d6:	2800      	cmp	r0, #0
        decrRC(buf);
        buf = 0;
      }
      return buf;
    }
 80090d8:	bf0c      	ite	eq
 80090da:	4628      	moveq	r0, r5
 80090dc:	2000      	movne	r0, #0
 80090de:	b002      	add	sp, #8
 80090e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e4:	f7ff ffbe 	bl	8009064 <_ZN4pinsL7initI2CEv.part.0>
 80090e8:	e7e5      	b.n	80090b6 <_ZN4pins13i2cReadBufferEiib+0x12>
 80090ea:	bf00      	nop
 80090ec:	20002884 	.word	0x20002884

080090f0 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb>:
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 80090f0:	b570      	push	{r4, r5, r6, lr}

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090f2:	4e0b      	ldr	r6, [pc, #44]	; (8009120 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x30>)
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 80090f4:	4604      	mov	r4, r0

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090f6:	6830      	ldr	r0, [r6, #0]
//
//
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
 80090f8:	b084      	sub	sp, #16
 80090fa:	460d      	mov	r5, r1

namespace pins {
    static CODAL_I2C *i2c;

    static void initI2C() {
      if (NULL == i2c) {
 80090fc:	b150      	cbz	r0, 8009114 <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0x24>
//
//
    int i2cWriteBuffer(int address, Buffer buf, bool repeat = false)
    {
      initI2C();
      return i2c->write(address << 1, buf->data, buf->length, repeat);
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	0061      	lsls	r1, r4, #1
 8009102:	9200      	str	r2, [sp, #0]
 8009104:	695c      	ldr	r4, [r3, #20]
 8009106:	b289      	uxth	r1, r1
 8009108:	686b      	ldr	r3, [r5, #4]
 800910a:	f105 0208 	add.w	r2, r5, #8
 800910e:	47a0      	blx	r4
    }
 8009110:	b004      	add	sp, #16
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	f7ff ffa5 	bl	8009064 <_ZN4pinsL7initI2CEv.part.0>
 800911a:	6830      	ldr	r0, [r6, #0]
 800911c:	9a03      	ldr	r2, [sp, #12]
 800911e:	e7ee      	b.n	80090fe <_ZN4pins14i2cWriteBufferEiPN3pxt11BoxedBufferEb+0xe>
 8009120:	20002884 	.word	0x20002884

08009124 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009124:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop

0800912c <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800912c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop

08009134 <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009134:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop

0800913c <_ZN3pxt6getPinEi>:
static uint8_t numPinPtrs;
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
    if (id < 0 || id >= DEV_NUM_PINS)
 800913c:	287f      	cmp	r0, #127	; 0x7f
static DevicePin **pinPtrs;
static uint8_t numPinPtrs;
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
 800913e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009142:	4605      	mov	r5, r0
    if (id < 0 || id >= DEV_NUM_PINS)
 8009144:	d80b      	bhi.n	800915e <_ZN3pxt6getPinEi+0x22>
        target_panic(PANIC_NO_SUCH_PIN);

    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
 8009146:	4f27      	ldr	r7, [pc, #156]	; (80091e4 <_ZN3pxt6getPinEi+0xa8>)
 8009148:	4e27      	ldr	r6, [pc, #156]	; (80091e8 <_ZN3pxt6getPinEi+0xac>)
 800914a:	5d7c      	ldrb	r4, [r7, r5]
    if (ptr == 0) {
 800914c:	6830      	ldr	r0, [r6, #0]
 800914e:	b15c      	cbz	r4, 8009168 <_ZN3pxt6getPinEi+0x2c>
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
        ptr = numPinPtrs;
        pinPos[id] = ptr;
    }
    return pinPtrs[ptr - 1];
 8009150:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8009154:	3b01      	subs	r3, #1
}
 8009156:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800915a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
static uint8_t pinPos[DEV_NUM_PINS];

//
DevicePin *getPin(int id) {
    if (id < 0 || id >= DEV_NUM_PINS)
        target_panic(PANIC_NO_SUCH_PIN);
 800915e:	f44f 7063 	mov.w	r0, #908	; 0x38c
 8009162:	f7f7 f925 	bl	80003b0 <target_panic>
 8009166:	e7ee      	b.n	8009146 <_ZN3pxt6getPinEi+0xa>

    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
    if (ptr == 0) {
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
 8009168:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80091f4 <_ZN3pxt6getPinEi+0xb8>
 800916c:	f898 1000 	ldrb.w	r1, [r8]
 8009170:	3101      	adds	r1, #1
 8009172:	0089      	lsls	r1, r1, #2
 8009174:	f7ff f8f2 	bl	800835c <realloc>
 8009178:	6030      	str	r0, [r6, #0]
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 800917a:	2020      	movs	r0, #32
 800917c:	f7fa f948 	bl	8003410 <_Znwj>
    // we could use lookupComponent() here - it would be slightly slower

    int ptr = pinPos[id];
    if (ptr == 0) {
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
        bool isAnalog = IS_ANALOG_PIN(id);
 8009180:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8009184:	4623      	mov	r3, r4
 8009186:	4919      	ldr	r1, [pc, #100]	; (80091ec <_ZN3pxt6getPinEi+0xb0>)
 8009188:	f1c5 0c20 	rsb	ip, r5, #32
 800918c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8009190:	40e9      	lsrs	r1, r5
 8009192:	ea41 010c 	orr.w	r1, r1, ip
 8009196:	f1a5 0c20 	sub.w	ip, r5, #32
 800919a:	fa2e fc0c 	lsr.w	ip, lr, ip
 800919e:	ea41 010c 	orr.w	r1, r1, ip
 80091a2:	f001 0201 	and.w	r2, r1, #1
        // GCTODO
        pinPtrs[numPinPtrs++] =
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
 80091a6:	4313      	orrs	r3, r2
        //  Codal constructor.  Called by pxt-maker.
        STM32BluePillPin(
            int id,              //  e.g. DEVICE_ID_IO_P0 + CM_PIN_PC13
            PinName       name,  //  e.g. CM_PIN_PC13
            PinCapability capability  //  e.g. PIN_CAPABILITY_DIGITAL
        ): codal::_cm::Pin(id, name, capability) {}
 80091a8:	bf14      	ite	ne
 80091aa:	2303      	movne	r3, #3
 80091ac:	2301      	moveq	r3, #1
 80091ae:	b2ea      	uxtb	r2, r5
 80091b0:	f105 0164 	add.w	r1, r5, #100	; 0x64
 80091b4:	4681      	mov	r9, r0
 80091b6:	f001 ff33 	bl	800b020 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>
    int ptr = pinPos[id];
    if (ptr == 0) {
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
 80091ba:	f898 2000 	ldrb.w	r2, [r8]
 80091be:	6830      	ldr	r0, [r6, #0]
 80091c0:	1c53      	adds	r3, r2, #1
 80091c2:	b2db      	uxtb	r3, r3
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
        ptr = numPinPtrs;
 80091c4:	461c      	mov	r4, r3
 80091c6:	490a      	ldr	r1, [pc, #40]	; (80091f0 <_ZN3pxt6getPinEi+0xb4>)
    int ptr = pinPos[id];
    if (ptr == 0) {
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
 80091c8:	f888 3000 	strb.w	r3, [r8]
            new DevicePin(DEVICE_ID_IO_P0 + id, (PinName)id,
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
        ptr = numPinPtrs;
        pinPos[id] = ptr;
 80091cc:	557b      	strb	r3, [r7, r5]
    }
    return pinPtrs[ptr - 1];
 80091ce:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80091d2:	f8c9 1000 	str.w	r1, [r9]
 80091d6:	3b01      	subs	r3, #1
    int ptr = pinPos[id];
    if (ptr == 0) {
        pinPtrs = (DevicePin **)realloc(pinPtrs, (numPinPtrs + 1) * sizeof(void *));
        bool isAnalog = IS_ANALOG_PIN(id);
        // GCTODO
        pinPtrs[numPinPtrs++] =
 80091d8:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
                          isAnalog ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);
        ptr = numPinPtrs;
        pinPos[id] = ptr;
    }
    return pinPtrs[ptr - 1];
}
 80091dc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	20002888 	.word	0x20002888
 80091e8:	20002908 	.word	0x20002908
 80091ec:	e0030fff 	.word	0xe0030fff
 80091f0:	0800c318 	.word	0x0800c318
 80091f4:	20002e4e 	.word	0x20002e4e

080091f8 <_ZN3pxt9getPinCfgEi>:

//
DevicePin *getPinCfg(int key) {
 80091f8:	b508      	push	{r3, lr}
    return getPin(getConfig(key));
 80091fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091fe:	f7fd fe35 	bl	8006e6c <_ZN3pxt9getConfigEii>
}
 8009202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pinPtrs[ptr - 1];
}

//
DevicePin *getPinCfg(int key) {
    return getPin(getConfig(key));
 8009206:	f7ff bf99 	b.w	800913c <_ZN3pxt6getPinEi>
 800920a:	bf00      	nop

0800920c <_ZN3pxt9lookupPinEi>:
    pinPos[from] = pinPos[to];
}

//
DevicePin *lookupPin(int pinName) {
    if (pinName < 0 || pinName == 0xff)
 800920c:	1e03      	subs	r3, r0, #0
 800920e:	db03      	blt.n	8009218 <_ZN3pxt9lookupPinEi+0xc>
 8009210:	2bff      	cmp	r3, #255	; 0xff
 8009212:	d001      	beq.n	8009218 <_ZN3pxt9lookupPinEi+0xc>
        return NULL;
    return getPin(pinName);
 8009214:	f7ff bf92 	b.w	800913c <_ZN3pxt6getPinEi>
}
 8009218:	2000      	movs	r0, #0
 800921a:	4770      	bx	lr

0800921c <_ZN4pins12createBufferEi>:
//
//
//
//
Buffer createBuffer(int size) {
    return mkBuffer(NULL, size);
 800921c:	4601      	mov	r1, r0
 800921e:	2000      	movs	r0, #0
 8009220:	f7fd bb48 	b.w	80068b4 <_ZN3pxt8mkBufferEPKhi>

08009224 <_ZN4pins13pulseDurationEv>:
//
//
//
//
int pulseDuration() {
    return pxt::lastEvent.timestamp;
 8009224:	4b01      	ldr	r3, [pc, #4]	; (800922c <_ZN4pins13pulseDurationEv+0x8>)
}
 8009226:	6858      	ldr	r0, [r3, #4]
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	2000287c 	.word	0x2000287c

08009230 <_ZN18AnalogInPinMethods10analogReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
int analogRead(AnalogInPin name) {
    return PINOP(getAnalogValue());
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	4718      	bx	r3
 8009236:	bf00      	nop

08009238 <_ZN19AnalogOutPinMethods11analogWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogWrite(AnalogOutPin name, int value) {
    PINOP(setAnalogValue(value));
 8009238:	6803      	ldr	r3, [r0, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4718      	bx	r3
 800923e:	bf00      	nop

08009240 <_ZN22DigitalInOutPinMethods11digitalReadEPN5codal16STM32BluePillPinE>:
//
//
//
//
//
bool digitalRead(DigitalInOutPin name) {
 8009240:	b508      	push	{r3, lr}
    return PINOP(getDigitalValue()) != 0;
 8009242:	6803      	ldr	r3, [r0, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	4798      	blx	r3
}
 8009248:	3000      	adds	r0, #0
 800924a:	bf18      	it	ne
 800924c:	2001      	movne	r0, #1
 800924e:	bd08      	pop	{r3, pc}

08009250 <_ZN22DigitalInOutPinMethods12digitalWriteEPN5codal16STM32BluePillPinEb>:
//
//
//
//
void digitalWrite(DigitalInOutPin name, bool value) {
    PINOP(setDigitalValue(value));
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4718      	bx	r3
 8009256:	bf00      	nop

08009258 <_ZN22DigitalInOutPinMethods8onPulsedEPN5codal16STM32BluePillPinE10PulseValuePN3pxt12TValueStructE>:
//
//
//
//
//
void onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
 800925e:	4616      	mov	r6, r2
    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 8009260:	6803      	ldr	r3, [r0, #0]
 8009262:	2102      	movs	r1, #2
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	4798      	blx	r3
    registerWithDal(pin->id, (int)pulse, body);
 8009268:	4632      	mov	r2, r6
 800926a:	4629      	mov	r1, r5
 800926c:	89e0      	ldrh	r0, [r4, #14]
 800926e:	2310      	movs	r3, #16
}
 8009270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//
//
//
void onPulsed(DigitalInOutPin pin, PulseValue pulse, Action body) {
    pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
    registerWithDal(pin->id, (int)pulse, body);
 8009274:	f7ff be9e 	b.w	8008fb4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>

08009278 <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE>:
//
//
//
//
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
    switch(event) {
 8009278:	1e8b      	subs	r3, r1, #2
//
//
//
//
//
void onEvent(DigitalInOutPin pin, PinEvent event, Action body) {
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	460d      	mov	r5, r1
 800927e:	4604      	mov	r4, r0
 8009280:	4616      	mov	r6, r2
    switch(event) {
 8009282:	2b03      	cmp	r3, #3
 8009284:	d813      	bhi.n	80092ae <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x36>
 8009286:	e8df f003 	tbb	[pc, r3]
 800928a:	0f0f      	.short	0x0f0f
 800928c:	0202      	.short	0x0202
        case PinEvent::PulseHigh:
        case PinEvent::PulseLow:
            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
 800928e:	2102      	movs	r1, #2
 8009290:	6803      	ldr	r3, [r0, #0]
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 8009292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009294:	4620      	mov	r0, r4
 8009296:	4798      	blx	r3
            registerWithDal(pin->id, (int)event, body);
 8009298:	4632      	mov	r2, r6
 800929a:	4629      	mov	r1, r5
 800929c:	89e0      	ldrh	r0, [r4, #14]
 800929e:	2310      	movs	r3, #16
            break;    
    }    
}
 80092a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
            registerWithDal(pin->id, (int)event, body);
 80092a4:	f7ff be86 	b.w	8008fb4 <_ZN3pxt15registerWithDalEiiPNS_12TValueStructEi>
            pin->eventOn(DEVICE_PIN_EVENT_ON_PULSE);
            registerWithDal(pin->id, (int)event, body);
            break;
        case PinEvent::Rise:
        case PinEvent::Fall:
            pin->eventOn(DEVICE_PIN_EVENT_ON_EDGE);
 80092a8:	6803      	ldr	r3, [r0, #0]
 80092aa:	2101      	movs	r1, #1
 80092ac:	e7f1      	b.n	8009292 <_ZN22DigitalInOutPinMethods7onEventEPN5codal16STM32BluePillPinE8PinEventPN3pxt12TValueStructE+0x1a>
            registerWithDal(pin->id, (int)event, body);
            break;    
    }    
}
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei>:
//
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int pulse = PulseValue::High == value ? 1 : 0;
 80092b4:	f1a1 0b04 	sub.w	fp, r1, #4
//
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
 80092b8:	b083      	sub	sp, #12
 80092ba:	4690      	mov	r8, r2
 80092bc:	4682      	mov	sl, r0
    int pulse = PulseValue::High == value ? 1 : 0;
 80092be:	fabb fb8b 	clz	fp, fp
    uint64_t tick = system_timer_current_time_us();
 80092c2:	f001 fa1b 	bl	800a6fc <_ZN5codal28system_timer_current_time_usEv>
//
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
    int pulse = PulseValue::High == value ? 1 : 0;
 80092c6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    uint64_t tick = system_timer_current_time_us();
    uint64_t maxd = (uint64_t)maxDuration;
 80092ca:	ea4f 79e8 	mov.w	r9, r8, asr #31
//
//
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
    int pulse = PulseValue::High == value ? 1 : 0;
    uint64_t tick = system_timer_current_time_us();
 80092ce:	4604      	mov	r4, r0
 80092d0:	2500      	movs	r5, #0
    uint64_t maxd = (uint64_t)maxDuration;
 80092d2:	e009      	b.n	80092e8 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x38>
    while (pin->getDigitalValue() != pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 80092d4:	f001 fa12 	bl	800a6fc <_ZN5codal28system_timer_current_time_usEv>
 80092d8:	2100      	movs	r1, #0
 80092da:	1b06      	subs	r6, r0, r4
 80092dc:	eb61 0705 	sbc.w	r7, r1, r5
 80092e0:	45b9      	cmp	r9, r7
 80092e2:	bf08      	it	eq
 80092e4:	45b0      	cmpeq	r8, r6
 80092e6:	d325      	bcc.n	8009334 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x84>
//
int pulseIn(DigitalInOutPin pin, PulseValue value, int maxDuration = 2000000) {
    int pulse = PulseValue::High == value ? 1 : 0;
    uint64_t tick = system_timer_current_time_us();
    uint64_t maxd = (uint64_t)maxDuration;
    while (pin->getDigitalValue() != pulse) {
 80092e8:	f8da 3000 	ldr.w	r3, [sl]
 80092ec:	4650      	mov	r0, sl
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4798      	blx	r3
 80092f2:	4558      	cmp	r0, fp
 80092f4:	d1ee      	bne.n	80092d4 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x24>
        if (system_timer_current_time_us() - tick > maxd)
            return 0;
    }

    uint64_t start = system_timer_current_time_us();
 80092f6:	f001 fa01 	bl	800a6fc <_ZN5codal28system_timer_current_time_usEv>
 80092fa:	4606      	mov	r6, r0
 80092fc:	e00d      	b.n	800931a <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x6a>
    while (pin->getDigitalValue() == pulse) {
        if (system_timer_current_time_us() - tick > maxd)
 80092fe:	f001 f9fd 	bl	800a6fc <_ZN5codal28system_timer_current_time_usEv>
 8009302:	2100      	movs	r1, #0
 8009304:	1b03      	subs	r3, r0, r4
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	eb61 0305 	sbc.w	r3, r1, r5
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009312:	4599      	cmp	r9, r3
 8009314:	bf08      	it	eq
 8009316:	4590      	cmpeq	r8, r2
 8009318:	d30c      	bcc.n	8009334 <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x84>
        if (system_timer_current_time_us() - tick > maxd)
            return 0;
    }

    uint64_t start = system_timer_current_time_us();
    while (pin->getDigitalValue() == pulse) {
 800931a:	f8da 3000 	ldr.w	r3, [sl]
 800931e:	4650      	mov	r0, sl
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	4798      	blx	r3
 8009324:	4558      	cmp	r0, fp
 8009326:	d0ea      	beq.n	80092fe <_ZN22DigitalInOutPinMethods7pulseInEPN5codal16STM32BluePillPinE10PulseValuei+0x4e>
        if (system_timer_current_time_us() - tick > maxd)
            return 0;
    }
    uint64_t end = system_timer_current_time_us();
 8009328:	f001 f9e8 	bl	800a6fc <_ZN5codal28system_timer_current_time_usEv>
    return end - start;
 800932c:	1b80      	subs	r0, r0, r6
}
 800932e:	b003      	add	sp, #12
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int pulse = PulseValue::High == value ? 1 : 0;
    uint64_t tick = system_timer_current_time_us();
    uint64_t maxd = (uint64_t)maxDuration;
    while (pin->getDigitalValue() != pulse) {
        if (system_timer_current_time_us() - tick > maxd)
            return 0;
 8009334:	2000      	movs	r0, #0
        if (system_timer_current_time_us() - tick > maxd)
            return 0;
    }
    uint64_t end = system_timer_current_time_us();
    return end - start;
}
 8009336:	b003      	add	sp, #12
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800933c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode>:
//
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800933c:	b131      	cbz	r1, 800934c <_ZN22DigitalInOutPinMethods7setPullEPN5codal16STM32BluePillPinE11PinPullMode+0x10>
                                                                        ? PullMode::Up
                                                                        : PullMode::None;
    PINOP(setPull(m));
 800933e:	6803      	ldr	r3, [r0, #0]
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
                                                                        ? PullMode::Up
 8009340:	2901      	cmp	r1, #1
 8009342:	bf0c      	ite	eq
 8009344:	2102      	moveq	r1, #2
 8009346:	2100      	movne	r1, #0
                                                                        : PullMode::None;
    PINOP(setPull(m));
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	4718      	bx	r3
 800934c:	6803      	ldr	r3, [r0, #0]
//
//
//
//
void setPull(DigitalInOutPin name, PinPullMode pull) {
    PullMode m = pull == PinPullMode::PullDown ? PullMode::Down : pull == PinPullMode::PullUp
 800934e:	2101      	movs	r1, #1
                                                                        ? PullMode::Up
                                                                        : PullMode::None;
    PINOP(setPull(m));
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	4718      	bx	r3

08009354 <_ZN17PwmOnlyPinMethods15analogSetPeriodEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void analogSetPeriod(PwmOnlyPin name, int period) {
    PINOP(setAnalogPeriodUs(period));
 8009354:	f001 bea0 	b.w	800b098 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>

08009358 <_ZN17PwmOnlyPinMethods10servoWriteEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
    PINOP(setServoValue(value));
 8009358:	6802      	ldr	r2, [r0, #0]
//
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
 800935a:	b410      	push	{r4}
    PINOP(setServoValue(value));
 800935c:	6914      	ldr	r4, [r2, #16]
 800935e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009362:	46a4      	mov	ip, r4
 8009364:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
}
 8009368:	bc10      	pop	{r4}
//
//
//
//
void servoWrite(PwmOnlyPin name, int value) {
    PINOP(setServoValue(value));
 800936a:	4760      	bx	ip

0800936c <_ZN17PwmOnlyPinMethods13servoSetPulseEPN5codal16STM32BluePillPinEi>:
//
//
//
//
void servoSetPulse(PwmOnlyPin name, int duration) {
    PINOP(setServoPulseUs(duration));
 800936c:	f001 be92 	b.w	800b094 <_ZN5codal3_cm3Pin15setServoPulseUsEi>

08009370 <_ZN3pxt13platform_initEv>:

    void platformSendSerial(const char *data, int len) {
        //  TODO
    }

    void platform_init() {
 8009370:	b508      	push	{r3, lr}
        target_enable_debug();  //// TODO
 8009372:	f7f6 ff9b 	bl	80002ac <target_enable_debug>
        target_init();
 8009376:	f7f6 ff9b 	bl	80002b0 <target_init>
        debug_println("---pxt::platform_init"); debug_flush();  //// TODO
 800937a:	4803      	ldr	r0, [pc, #12]	; (8009388 <_ZN3pxt13platform_initEv+0x18>)
 800937c:	f7f9 ffba 	bl	80032f4 <debug_println>
        initRandomSeed();
        //  setSendToUART(platformSendSerial);
    }
 8009380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }

    void platform_init() {
        target_enable_debug();  //// TODO
        target_init();
        debug_println("---pxt::platform_init"); debug_flush();  //// TODO
 8009384:	f7f9 bf42 	b.w	800320c <debug_flush>
 8009388:	0800c364 	.word	0x0800c364

0800938c <_Z14cpu_clock_initv>:
}

void cpu_clock_init() {
    //  TODO
    // missing in Codal
}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <_ZN4pinsL7initSPIEv.part.0>:
#include "pxt.h"
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (NULL == spi)
            spi = new CODAL_SPI(*LOOKUP_PIN(MOSI), *LOOKUP_PIN(MISO), *LOOKUP_PIN(SCK));
 8009392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009396:	2013      	movs	r0, #19
 8009398:	f7fd fd68 	bl	8006e6c <_ZN3pxt9getConfigEii>
 800939c:	b2c0      	uxtb	r0, r0
 800939e:	f7ff ff35 	bl	800920c <_ZN3pxt9lookupPinEi>
 80093a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093a6:	4605      	mov	r5, r0
 80093a8:	2012      	movs	r0, #18
 80093aa:	f7fd fd5f 	bl	8006e6c <_ZN3pxt9getConfigEii>
 80093ae:	b2c0      	uxtb	r0, r0
 80093b0:	f7ff ff2c 	bl	800920c <_ZN3pxt9lookupPinEi>
 80093b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093b8:	4606      	mov	r6, r0
 80093ba:	2017      	movs	r0, #23
 80093bc:	f7fd fd56 	bl	8006e6c <_ZN3pxt9getConfigEii>
 80093c0:	b2c0      	uxtb	r0, r0
 80093c2:	f7ff ff23 	bl	800920c <_ZN3pxt9lookupPinEi>
 80093c6:	4607      	mov	r7, r0
 80093c8:	2028      	movs	r0, #40	; 0x28
 80093ca:	f7fa f821 	bl	8003410 <_Znwj>
 80093ce:	4604      	mov	r4, r0
 80093d0:	463b      	mov	r3, r7
 80093d2:	4632      	mov	r2, r6
 80093d4:	4629      	mov	r1, r5
 80093d6:	f001 fef5 	bl	800b1c4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>
 80093da:	4b01      	ldr	r3, [pc, #4]	; (80093e0 <_ZN4pinsL7initSPIEv.part.0+0x50>)
 80093dc:	601c      	str	r4, [r3, #0]
    }
 80093de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e0:	2000290c 	.word	0x2000290c

080093e4 <_ZN4pins8spiWriteEi>:
//
//
//
//
//
    int spiWrite(int value) {
 80093e4:	b510      	push	{r4, lr}
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 80093e6:	4c08      	ldr	r4, [pc, #32]	; (8009408 <_ZN4pins8spiWriteEi+0x24>)
//
//
//
//
//
    int spiWrite(int value) {
 80093e8:	4601      	mov	r1, r0
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 80093ea:	6820      	ldr	r0, [r4, #0]
//
//
//
//
//
    int spiWrite(int value) {
 80093ec:	b082      	sub	sp, #8
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 80093ee:	b128      	cbz	r0, 80093fc <_ZN4pins8spiWriteEi+0x18>
//
//
//
    int spiWrite(int value) {
        initSPI();
        return spi->write(value);
 80093f0:	6802      	ldr	r2, [r0, #0]
 80093f2:	6892      	ldr	r2, [r2, #8]
    }
 80093f4:	b002      	add	sp, #8
 80093f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//
//
//
    int spiWrite(int value) {
        initSPI();
        return spi->write(value);
 80093fa:	4710      	bx	r2
 80093fc:	9101      	str	r1, [sp, #4]
 80093fe:	f7ff ffc7 	bl	8009390 <_ZN4pinsL7initSPIEv.part.0>
 8009402:	6820      	ldr	r0, [r4, #0]
 8009404:	9901      	ldr	r1, [sp, #4]
 8009406:	e7f3      	b.n	80093f0 <_ZN4pins8spiWriteEi+0xc>
 8009408:	2000290c 	.word	0x2000290c

0800940c <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_>:
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 800940c:	b570      	push	{r4, r5, r6, lr}
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 800940e:	4e0e      	ldr	r6, [pc, #56]	; (8009448 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x3c>)
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 8009410:	4604      	mov	r4, r0
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 8009412:	6830      	ldr	r0, [r6, #0]
//
//
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
 8009414:	b082      	sub	sp, #8
 8009416:	460d      	mov	r5, r1
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 8009418:	b190      	cbz	r0, 8009440 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x34>
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
 800941a:	b174      	cbz	r4, 800943a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2e>
 800941c:	6862      	ldr	r2, [r4, #4]
 800941e:	f104 0108 	add.w	r1, r4, #8
        auto clength = NULL == command ? 0 : command->length;
        auto rdata = NULL == response ? NULL : response->data;
 8009422:	b145      	cbz	r5, 8009436 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x2a>
 8009424:	f105 0308 	add.w	r3, r5, #8
        auto rlength = NULL == response ? 0 : response->length;
 8009428:	686d      	ldr	r5, [r5, #4]
        spi->transfer(cdata, clength, rdata, rlength);
 800942a:	6804      	ldr	r4, [r0, #0]
 800942c:	9500      	str	r5, [sp, #0]
 800942e:	68e4      	ldr	r4, [r4, #12]
 8009430:	47a0      	blx	r4
    }
 8009432:	b002      	add	sp, #8
 8009434:	bd70      	pop	{r4, r5, r6, pc}
//
    void spiTransfer(Buffer command, Buffer response) {
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
        auto clength = NULL == command ? 0 : command->length;
        auto rdata = NULL == response ? NULL : response->data;
 8009436:	462b      	mov	r3, r5
 8009438:	e7f7      	b.n	800942a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x1e>
 800943a:	4622      	mov	r2, r4
//
//
//
    void spiTransfer(Buffer command, Buffer response) {
        initSPI();
        auto cdata = NULL == command ? NULL : command->data;
 800943c:	4621      	mov	r1, r4
 800943e:	e7f0      	b.n	8009422 <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0x16>
 8009440:	f7ff ffa6 	bl	8009390 <_ZN4pinsL7initSPIEv.part.0>
 8009444:	6830      	ldr	r0, [r6, #0]
 8009446:	e7e8      	b.n	800941a <_ZN4pins11spiTransferEPN3pxt11BoxedBufferES2_+0xe>
 8009448:	2000290c 	.word	0x2000290c

0800944c <_ZN4pins12spiFrequencyEi>:
//
//
//
//
//
    void spiFrequency(int frequency) {
 800944c:	b510      	push	{r4, lr}
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 800944e:	4c08      	ldr	r4, [pc, #32]	; (8009470 <_ZN4pins12spiFrequencyEi+0x24>)
//
//
//
//
//
    void spiFrequency(int frequency) {
 8009450:	4601      	mov	r1, r0
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 8009452:	6820      	ldr	r0, [r4, #0]
//
//
//
//
//
    void spiFrequency(int frequency) {
 8009454:	b082      	sub	sp, #8
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 8009456:	b128      	cbz	r0, 8009464 <_ZN4pins12spiFrequencyEi+0x18>
//
//
//
    void spiFrequency(int frequency) {
        initSPI();
        spi->setFrequency(frequency);
 8009458:	6802      	ldr	r2, [r0, #0]
 800945a:	6812      	ldr	r2, [r2, #0]
    }
 800945c:	b002      	add	sp, #8
 800945e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//
//
//
    void spiFrequency(int frequency) {
        initSPI();
        spi->setFrequency(frequency);
 8009462:	4710      	bx	r2
 8009464:	9101      	str	r1, [sp, #4]
 8009466:	f7ff ff93 	bl	8009390 <_ZN4pinsL7initSPIEv.part.0>
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	e7f3      	b.n	8009458 <_ZN4pins12spiFrequencyEi+0xc>
 8009470:	2000290c 	.word	0x2000290c

08009474 <_ZN4pins7spiModeEi>:
//
//
//
//
//
    void spiMode(int mode) {
 8009474:	b510      	push	{r4, lr}
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 8009476:	4c09      	ldr	r4, [pc, #36]	; (800949c <_ZN4pins7spiModeEi+0x28>)
//
//
//
//
//
    void spiMode(int mode) {
 8009478:	4601      	mov	r1, r0
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 800947a:	6820      	ldr	r0, [r4, #0]
//
//
//
//
//
    void spiMode(int mode) {
 800947c:	b082      	sub	sp, #8
#include "ErrorNo.h"

namespace pins {
    static codal::SPI *spi = NULL;
    static void initSPI() {
        if (NULL == spi)
 800947e:	b138      	cbz	r0, 8009490 <_ZN4pins7spiModeEi+0x1c>
//
//
//
    void spiMode(int mode) {
        initSPI();
        spi->setMode(mode);        
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	6854      	ldr	r4, [r2, #4]
 8009484:	2208      	movs	r2, #8
 8009486:	4623      	mov	r3, r4
    }
 8009488:	b002      	add	sp, #8
 800948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//
//
//
    void spiMode(int mode) {
        initSPI();
        spi->setMode(mode);        
 800948e:	4718      	bx	r3
 8009490:	9101      	str	r1, [sp, #4]
 8009492:	f7ff ff7d 	bl	8009390 <_ZN4pinsL7initSPIEv.part.0>
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	9901      	ldr	r1, [sp, #4]
 800949a:	e7f1      	b.n	8009480 <_ZN4pins7spiModeEi+0xc>
 800949c:	2000290c 	.word	0x2000290c

080094a0 <_ZN3pxt8usb_initEv>:
    create_fiber(start_usb);
}


#else
void usb_init() {}
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop

080094a4 <_ZN3pxt10sendSerialEPKci>:
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 80094a4:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <_ZN3pxt10sendSerialEPKci+0xc>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	b103      	cbz	r3, 80094ac <_ZN3pxt10sendSerialEPKci+0x8>
        pSendToUART(data, len);
 80094aa:	4718      	bx	r3
}
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20002910 	.word	0x20002910

080094b4 <_ZN3pxt9dumpDmesgEv>:

void dumpDmesg() {
 80094b4:	b510      	push	{r4, lr}
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 80094b6:	4c0a      	ldr	r4, [pc, #40]	; (80094e0 <_ZN3pxt9dumpDmesgEv+0x2c>)
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	b17b      	cbz	r3, 80094dc <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 80094bc:	2108      	movs	r1, #8
 80094be:	4809      	ldr	r0, [pc, #36]	; (80094e4 <_ZN3pxt9dumpDmesgEv+0x30>)
 80094c0:	4798      	blx	r3
}

void dumpDmesg() {
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 80094c2:	4809      	ldr	r0, [pc, #36]	; (80094e8 <_ZN3pxt9dumpDmesgEv+0x34>)
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 80094c4:	6823      	ldr	r3, [r4, #0]
        pSendToUART(data, len);
}

void dumpDmesg() {
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
 80094c6:	6801      	ldr	r1, [r0, #0]
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 80094c8:	b143      	cbz	r3, 80094dc <_ZN3pxt9dumpDmesgEv+0x28>
        pSendToUART(data, len);
 80094ca:	3004      	adds	r0, #4
 80094cc:	4798      	blx	r3
void sendSerial(const char *data, int len) {
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	b123      	cbz	r3, 80094dc <_ZN3pxt9dumpDmesgEv+0x28>

void dumpDmesg() {
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
    sendSerial("\n\n", 2);
}
 80094d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if CONFIG_ENABLED(DEVICE_USB)
    hf2.sendSerial(data, len);
    webhf2.sendSerial(data, len);
#endif    
    if (pSendToUART)
        pSendToUART(data, len);
 80094d6:	2102      	movs	r1, #2
 80094d8:	4804      	ldr	r0, [pc, #16]	; (80094ec <_ZN3pxt9dumpDmesgEv+0x38>)
 80094da:	4718      	bx	r3

void dumpDmesg() {
    sendSerial("\nDMESG:\n", 8);
    sendSerial(codalLogStore.buffer, codalLogStore.ptr);
    sendSerial("\n\n", 2);
}
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	bf00      	nop
 80094e0:	20002910 	.word	0x20002910
 80094e4:	0800c37c 	.word	0x0800c37c
 80094e8:	20002a14 	.word	0x20002a14
 80094ec:	0800c388 	.word	0x0800c388

080094f0 <main>:

#include "pxt.h"
#ifdef PXT_MAIN
PXT_MAIN
 80094f0:	b508      	push	{r3, lr}
 80094f2:	f7ff fb25 	bl	8008b40 <_ZN3pxt5startEv>
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd08      	pop	{r3, pc}
 80094fa:	bf00      	nop

080094fc <_ZN3pxt4incrEPNS_12TValueStructE>:
void decr(TValue e);

#ifdef PXT_GC
inline TValue incr(TValue e) {
    return e;
}
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop

08009500 <_ZN3pxt4decrEPNS_12TValueStructE>:
inline void decr(TValue e) {}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <_ZN3pxt12ptrOfLiteralEi>:
static inline void decrRC(RefObject *r) {
    decr((TValue)r);
}

inline void *ptrOfLiteral(int offset) {
    return &bytecode[offset];
 8009504:	4b02      	ldr	r3, [pc, #8]	; (8009510 <_ZN3pxt12ptrOfLiteralEi+0xc>)
 8009506:	681b      	ldr	r3, [r3, #0]
}
 8009508:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20002830 	.word	0x20002830

08009514 <_ZN3pxt16startPerfCounterENS_12PerfCountersE>:
//
void startPerfCounter(PerfCounters n);
//
void stopPerfCounter(PerfCounters n);
#else
inline void startPerfCounter(PerfCounters n) {}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop

08009518 <_ZN3pxt15stopPerfCounterENS_12PerfCountersE>:
inline void stopPerfCounter(PerfCounters n) {}
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop

0800951c <_ZN3pxt16dumpPerfCountersEv>:
inline void initPerfCounters() {}
inline void dumpPerfCounters() {}
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop

08009520 <_ZN5codal14string_reverseEPc>:
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
    //sanity check...
    if(s == NULL)
 8009520:	b188      	cbz	r0, 8009546 <_ZN5codal14string_reverseEPc+0x26>
  * @param s the string to reverse.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
 8009522:	b510      	push	{r4, lr}
 8009524:	4604      	mov	r4, r0
        return DEVICE_INVALID_PARAMETER;

    char *j;
    int c;

    j = s + strlen(s) - 1;
 8009526:	f7f9 fd9b 	bl	8003060 <strlen>
 800952a:	3801      	subs	r0, #1
 800952c:	4420      	add	r0, r4

    while(s < j)
 800952e:	4284      	cmp	r4, r0
 8009530:	d207      	bcs.n	8009542 <_ZN5codal14string_reverseEPc+0x22>
    {
        c = *s;
 8009532:	7823      	ldrb	r3, [r4, #0]
        *s++ = *j;
 8009534:	7802      	ldrb	r2, [r0, #0]
 8009536:	f804 2b01 	strb.w	r2, [r4], #1
        *j-- = c;
 800953a:	f800 3901 	strb.w	r3, [r0], #-1
    char *j;
    int c;

    j = s + strlen(s) - 1;

    while(s < j)
 800953e:	4284      	cmp	r4, r0
 8009540:	d3f7      	bcc.n	8009532 <_ZN5codal14string_reverseEPc+0x12>
        c = *s;
        *s++ = *j;
        *j-- = c;
    }

    return DEVICE_OK;
 8009542:	2000      	movs	r0, #0
}
 8009544:	bd10      	pop	{r4, pc}
  */
int codal::string_reverse(char *s)
{
    //sanity check...
    if(s == NULL)
        return DEVICE_INVALID_PARAMETER;
 8009546:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        *s++ = *j;
        *j-- = c;
    }

    return DEVICE_OK;
}
 800954a:	4770      	bx	lr

0800954c <_ZN5codal4itoaEiPc>:
  * @param s A pointer to the buffer where the resulting string will be stored.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::itoa(int n, char *s)
{
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 800954e:	b349      	cbz	r1, 80095a4 <_ZN5codal4itoaEiPc+0x58>
        return DEVICE_INVALID_PARAMETER;

    // Record the sign of the number,
    // Ensure our working value is positive.
    if (positive)
 8009550:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8009554:	ebc4 74e0 	rsb	r4, r4, r0, asr #31
 8009558:	1e4f      	subs	r7, r1, #1
 800955a:	2500      	movs	r5, #0
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 800955c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80095ac <_ZN5codal4itoaEiPc+0x60>
 8009560:	e000      	b.n	8009564 <_ZN5codal4itoaEiPc+0x18>
 8009562:	461d      	mov	r5, r3
 8009564:	fb8c 2304 	smull	r2, r3, ip, r4
 8009568:	17e2      	asrs	r2, r4, #31
 800956a:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800956e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009572:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
 8009576:	3330      	adds	r3, #48	; 0x30
    } while (abs(n /= 10) > 0);
 8009578:	4256      	negs	r6, r2
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 800957a:	f807 3f01 	strb.w	r3, [r7, #1]!
    } while (abs(n /= 10) > 0);
 800957e:	4614      	mov	r4, r2
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8009580:	1c6b      	adds	r3, r5, #1
    } while (abs(n /= 10) > 0);
 8009582:	2e00      	cmp	r6, #0
 8009584:	d1ed      	bne.n	8009562 <_ZN5codal4itoaEiPc+0x16>

    // Add a negative sign as needed
    if (!positive)
 8009586:	2800      	cmp	r0, #0
 8009588:	eb01 0203 	add.w	r2, r1, r3
 800958c:	da03      	bge.n	8009596 <_ZN5codal4itoaEiPc+0x4a>
        s[i++] = '-';
 800958e:	202d      	movs	r0, #45	; 0x2d
 8009590:	3502      	adds	r5, #2
 8009592:	194a      	adds	r2, r1, r5
 8009594:	54c8      	strb	r0, [r1, r3]

    // Terminate the string.
    s[i] = '\0';
 8009596:	2300      	movs	r3, #0
 8009598:	4608      	mov	r0, r1
 800959a:	7013      	strb	r3, [r2, #0]

    // Flip the order.
    string_reverse(s);
 800959c:	f7ff ffc0 	bl	8009520 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
}
 80095a0:	4630      	mov	r0, r6
 80095a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
        return DEVICE_INVALID_PARAMETER;
 80095a4:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 80095a8:	e7fa      	b.n	80095a0 <_ZN5codal4itoaEiPc+0x54>
 80095aa:	bf00      	nop
 80095ac:	66666667 	.word	0x66666667

080095b0 <_ZN5codal14CodalComponent16periodicCallbackEv>:

        /**
          * Implement this function to receive a callback every SCHEDULER_TICK_PERIOD_MS.
          */
        virtual void periodicCallback() {}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop

080095b4 <_ZN5codal14CodalComponent12idleCallbackEv>:

        /**
          * Implement this function to receive a callback when the device is idling.
          */
        virtual void idleCallback() {}
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop

080095b8 <_ZN5codal10EventModel3addEPNS_8ListenerE>:
         * @return This default implementation simply returns DEVICE_NOT_SUPPORTED.
         */
        virtual int add(Listener*)
        {
            return DEVICE_NOT_SUPPORTED;
        }
 80095b8:	4800      	ldr	r0, [pc, #0]	; (80095bc <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 80095ba:	4770      	bx	lr
 80095bc:	fffffc16 	.word	0xfffffc16

080095c0 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	ab02      	add	r3, sp, #8
 80095c6:	e903 0003 	stmdb	r3, {r0, r1}
 80095ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d013      	beq.n	80095fa <_Z18component_callbackN5codal5EventE+0x3a>

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d10f      	bne.n	80095f6 <_Z18component_callbackN5codal5EventE+0x36>
 80095d6:	4c14      	ldr	r4, [pc, #80]	; (8009628 <_Z18component_callbackN5codal5EventE+0x68>)
 80095d8:	4e14      	ldr	r6, [pc, #80]	; (800962c <_Z18component_callbackN5codal5EventE+0x6c>)
 80095da:	f504 7580 	add.w	r5, r4, #256	; 0x100
    {
        while(i < DEVICE_COMPONENT_COUNT)
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 80095de:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80095e2:	b130      	cbz	r0, 80095f2 <_Z18component_callbackN5codal5EventE+0x32>
 80095e4:	88c3      	ldrh	r3, [r0, #6]
 80095e6:	045b      	lsls	r3, r3, #17
 80095e8:	d503      	bpl.n	80095f2 <_Z18component_callbackN5codal5EventE+0x32>
                CodalComponent::components[i]->idleCallback();
 80095ea:	6803      	ldr	r3, [r0, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	42b3      	cmp	r3, r6
 80095f0:	d117      	bne.n	8009622 <_Z18component_callbackN5codal5EventE+0x62>
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
    {
        while(i < DEVICE_COMPONENT_COUNT)
 80095f2:	42ac      	cmp	r4, r5
 80095f4:	d1f3      	bne.n	80095de <_Z18component_callbackN5codal5EventE+0x1e>
                CodalComponent::components[i]->idleCallback();

            i++;
        }
    }
}
 80095f6:	b002      	add	sp, #8
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	4c0b      	ldr	r4, [pc, #44]	; (8009628 <_Z18component_callbackN5codal5EventE+0x68>)
 80095fc:	4e0c      	ldr	r6, [pc, #48]	; (8009630 <_Z18component_callbackN5codal5EventE+0x70>)
 80095fe:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8009602:	e001      	b.n	8009608 <_Z18component_callbackN5codal5EventE+0x48>
{
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
    {
        while(i < DEVICE_COMPONENT_COUNT)
 8009604:	42a5      	cmp	r5, r4
 8009606:	d0f6      	beq.n	80095f6 <_Z18component_callbackN5codal5EventE+0x36>
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 8009608:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800960c:	2800      	cmp	r0, #0
 800960e:	d0f9      	beq.n	8009604 <_Z18component_callbackN5codal5EventE+0x44>
 8009610:	88c3      	ldrh	r3, [r0, #6]
 8009612:	049a      	lsls	r2, r3, #18
 8009614:	d5f6      	bpl.n	8009604 <_Z18component_callbackN5codal5EventE+0x44>
                CodalComponent::components[i]->periodicCallback();
 8009616:	6803      	ldr	r3, [r0, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	42b3      	cmp	r3, r6
 800961c:	d0f2      	beq.n	8009604 <_Z18component_callbackN5codal5EventE+0x44>
 800961e:	4798      	blx	r3
 8009620:	e7f0      	b.n	8009604 <_Z18component_callbackN5codal5EventE+0x44>
    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
    {
        while(i < DEVICE_COMPONENT_COUNT)
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
                CodalComponent::components[i]->idleCallback();
 8009622:	4798      	blx	r3
 8009624:	e7e5      	b.n	80095f2 <_Z18component_callbackN5codal5EventE+0x32>
 8009626:	bf00      	nop
 8009628:	20002910 	.word	0x20002910
 800962c:	080095b5 	.word	0x080095b5
 8009630:	080095b1 	.word	0x080095b1

08009634 <_ZN5codal14CodalComponent12addComponentEv>:

/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
 8009634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009638:	4c2f      	ldr	r4, [pc, #188]	; (80096f8 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 800963a:	b082      	sub	sp, #8
 800963c:	4622      	mov	r2, r4
 800963e:	2300      	movs	r3, #0
 8009640:	e002      	b.n	8009648 <_ZN5codal14CodalComponent12addComponentEv+0x14>
 8009642:	3301      	adds	r3, #1
    uint8_t i = 0;

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	d005      	beq.n	8009654 <_ZN5codal14CodalComponent12addComponentEv+0x20>
    {
        if(components[i] == NULL)
 8009648:	f852 1b04 	ldr.w	r1, [r2], #4
 800964c:	2900      	cmp	r1, #0
 800964e:	d1f8      	bne.n	8009642 <_ZN5codal14CodalComponent12addComponentEv+0xe>
        {
            components[i] = this;
 8009650:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        }

        i++;
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 8009654:	4c29      	ldr	r4, [pc, #164]	; (80096fc <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8009656:	7823      	ldrb	r3, [r4, #0]
 8009658:	07db      	lsls	r3, r3, #31
 800965a:	d409      	bmi.n	8009670 <_ZN5codal14CodalComponent12addComponentEv+0x3c>
 800965c:	4d28      	ldr	r5, [pc, #160]	; (8009700 <_ZN5codal14CodalComponent12addComponentEv+0xcc>)
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b133      	cbz	r3, 8009670 <_ZN5codal14CodalComponent12addComponentEv+0x3c>
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 8009662:	2201      	movs	r2, #1
 8009664:	2110      	movs	r1, #16
 8009666:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800966a:	f001 f855 	bl	800a718 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 800966e:	b110      	cbz	r0, 8009676 <_ZN5codal14CodalComponent12addComponentEv+0x42>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 8009670:	b002      	add	sp, #8
 8009672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8009676:	2020      	movs	r0, #32
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);

        if(ret == DEVICE_OK)
        {
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009678:	f8d5 8000 	ldr.w	r8, [r5]
 800967c:	f7f9 fec8 	bl	8003410 <_Znwj>
 8009680:	22c0      	movs	r2, #192	; 0xc0
 8009682:	4b20      	ldr	r3, [pc, #128]	; (8009704 <_ZN5codal14CodalComponent12addComponentEv+0xd0>)
 8009684:	9200      	str	r2, [sp, #0]
 8009686:	2110      	movs	r1, #16
 8009688:	2201      	movs	r2, #1
 800968a:	4607      	mov	r7, r0
 800968c:	f000 fecc 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009690:	f8d8 3000 	ldr.w	r3, [r8]
 8009694:	4e1c      	ldr	r6, [pc, #112]	; (8009708 <_ZN5codal14CodalComponent12addComponentEv+0xd4>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	42b3      	cmp	r3, r6
 800969a:	d120      	bne.n	80096de <_ZN5codal14CodalComponent12addComponentEv+0xaa>
                return DEVICE_OK;

            delete newListener;
 800969c:	4638      	mov	r0, r7
 800969e:	f000 fedb 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7f9 feb6 	bl	8003414 <_ZdlPv>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 80096a8:	2020      	movs	r0, #32
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 80096aa:	682f      	ldr	r7, [r5, #0]
 80096ac:	f7f9 feb0 	bl	8003410 <_Znwj>
 80096b0:	22c0      	movs	r2, #192	; 0xc0
 80096b2:	4b14      	ldr	r3, [pc, #80]	; (8009704 <_ZN5codal14CodalComponent12addComponentEv+0xd0>)
 80096b4:	9200      	str	r2, [sp, #0]
 80096b6:	210f      	movs	r1, #15
 80096b8:	2202      	movs	r2, #2
 80096ba:	4605      	mov	r5, r0
 80096bc:	f000 feb4 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	42b3      	cmp	r3, r6
 80096c6:	d110      	bne.n	80096ea <_ZN5codal14CodalComponent12addComponentEv+0xb6>
                return DEVICE_OK;

            delete newListener;
 80096c8:	4628      	mov	r0, r5
 80096ca:	f000 fec5 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7f9 fea0 	bl	8003414 <_ZdlPv>

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 80096d4:	7823      	ldrb	r3, [r4, #0]
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	7023      	strb	r3, [r4, #0]
        }
    }
}
 80096dc:	e7c8      	b.n	8009670 <_ZN5codal14CodalComponent12addComponentEv+0x3c>
            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);

            if(add(newListener) == DEVICE_OK)
 80096de:	4640      	mov	r0, r8
 80096e0:	4639      	mov	r1, r7
 80096e2:	4798      	blx	r3
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0df      	beq.n	80096a8 <_ZN5codal14CodalComponent12addComponentEv+0x74>
 80096e8:	e7d8      	b.n	800969c <_ZN5codal14CodalComponent12addComponentEv+0x68>
 80096ea:	4638      	mov	r0, r7
 80096ec:	4629      	mov	r1, r5
 80096ee:	4798      	blx	r3
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d0ef      	beq.n	80096d4 <_ZN5codal14CodalComponent12addComponentEv+0xa0>
 80096f4:	e7e8      	b.n	80096c8 <_ZN5codal14CodalComponent12addComponentEv+0x94>
 80096f6:	bf00      	nop
 80096f8:	20002914 	.word	0x20002914
 80096fc:	20002e4f 	.word	0x20002e4f
 8009700:	20002e44 	.word	0x20002e44
 8009704:	080095c1 	.word	0x080095c1
 8009708:	080095b9 	.word	0x080095b9

0800970c <_ZN5codal14CodalComponent15removeComponentEv>:

/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
 800970c:	b410      	push	{r4}
 800970e:	4c08      	ldr	r4, [pc, #32]	; (8009730 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 8009710:	2300      	movs	r3, #0
 8009712:	4622      	mov	r2, r4
 8009714:	e002      	b.n	800971c <_ZN5codal14CodalComponent15removeComponentEv+0x10>
 8009716:	3301      	adds	r3, #1
    uint8_t i = 0;

    while(i < DEVICE_COMPONENT_COUNT)
 8009718:	2b40      	cmp	r3, #64	; 0x40
 800971a:	d006      	beq.n	800972a <_ZN5codal14CodalComponent15removeComponentEv+0x1e>
    {
        if(components[i] == this)
 800971c:	f852 1b04 	ldr.w	r1, [r2], #4
 8009720:	4281      	cmp	r1, r0
 8009722:	d1f8      	bne.n	8009716 <_ZN5codal14CodalComponent15removeComponentEv+0xa>
        {
            components[i] = NULL;
 8009724:	2200      	movs	r2, #0
 8009726:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            return;
        }

        i++;
    }
}
 800972a:	bc10      	pop	{r4}
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	20002914 	.word	0x20002914

08009734 <_ZN5codal11CodalDevice10getVersionEv>:
         */
        virtual const char *
        getVersion()
        {
            return DEVICE_DAL_VERSION;
        }
 8009734:	4800      	ldr	r0, [pc, #0]	; (8009738 <_ZN5codal11CodalDevice10getVersionEv+0x4>)
 8009736:	4770      	bx	lr
 8009738:	0800c2f4 	.word	0x0800c2f4

0800973c <_ZN5codal11CodalDevice5sleepEm>:

using namespace codal;

void CodalDevice::sleep(unsigned long milliseconds)
{
    fiber_sleep(milliseconds);
 800973c:	4608      	mov	r0, r1
 800973e:	f000 bc8b 	b.w	800a058 <_ZN5codal11fiber_sleepEm>
 8009742:	bf00      	nop

08009744 <_ZN5codal11CodalDevice10seedRandomEm>:
         * @param seed an unsigned 32 bit value used to seed codal's lightweight Galois LFSR.
         * @return DEVICE_OK on success
         */
        virtual int seedRandom(uint32_t seed)
        {
            return target_seed_random(seed);
 8009744:	4608      	mov	r0, r1
 8009746:	f7f6 be1f 	b.w	8000388 <target_seed_random>
 800974a:	bf00      	nop

0800974c <_ZN5codal11CodalDevice5panicEi>:
         * Default: Disables all interrupts and user processing and periodically outputs the status code over the default USB serial port.
         * @param statusCode the appropriate status code, must be in the range 0-999.
         */
        virtual void panic(int statusCode)
        {
            target_panic(statusCode);
 800974c:	4608      	mov	r0, r1
 800974e:	f7f6 be2f 	b.w	80003b0 <target_panic>
 8009752:	bf00      	nop

08009754 <_ZN5codal11CodalDevice15getSerialNumberEv>:
          * Determines a unique 32 bit ID for this device, if provided by the hardware.
          * @return A 32 bit unique identifier.
          */
        virtual uint32_t getSerialNumber()
        {
            return target_get_serial();
 8009754:	f7f6 be20 	b.w	8000398 <target_get_serial>

08009758 <_ZN5codal11CodalDevice4waitEm>:
          * A blocking pause without using the fiber scheduler
          * @param milliseconds the time to wait in milliseconds
          */
        virtual void wait(uint32_t milliseconds)
        {
            target_wait(milliseconds);
 8009758:	4608      	mov	r0, r1
 800975a:	f7f6 bde7 	b.w	800032c <target_wait>
 800975e:	bf00      	nop

08009760 <_ZN5codal11CodalDevice5resetEv>:
          * Perform a hard reset of the device.
          * default: Use CMSIS NVIC reset vector.
          */
        virtual void reset()
        {
            target_reset();
 8009760:	f7f6 bdbe 	b.w	80002e0 <target_reset>

08009764 <_ZL9logwritenPKci>:
using namespace codal;

static void logwrite(const char *msg);

static void logwriten(const char *msg, int l)
{
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	4d18      	ldr	r5, [pc, #96]	; (80097cc <_ZL9logwritenPKci+0x68>)
 800976a:	4607      	mov	r7, r0
 800976c:	462e      	mov	r6, r5
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 800976e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80097d4 <_ZL9logwritenPKci+0x70>
 8009772:	f856 4b04 	ldr.w	r4, [r6], #4
{
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
    {
        const int jump = sizeof(codalLogStore.buffer) / 4;
        codalLogStore.ptr -= jump;
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 8009776:	f505 7982 	add.w	r9, r5, #260	; 0x104

static void logwrite(const char *msg);

static void logwriten(const char *msg, int l)
{
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
 800977a:	190b      	adds	r3, r1, r4
 800977c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009780:	468a      	mov	sl, r1
 8009782:	d20c      	bcs.n	800979e <_ZL9logwritenPKci+0x3a>
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
    {
        logwrite("DMESG line too long!\n");
        return;
    }
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
 8009784:	4639      	mov	r1, r7
 8009786:	4652      	mov	r2, sl
 8009788:	1930      	adds	r0, r6, r4
 800978a:	f7f9 fc51 	bl	8003030 <memcpy>
    codalLogStore.ptr += l;
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 800978e:	2100      	movs	r1, #0
    {
        logwrite("DMESG line too long!\n");
        return;
    }
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
    codalLogStore.ptr += l;
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	4453      	add	r3, sl
    codalLogStore.buffer[codalLogStore.ptr] = 0;
 8009794:	18ea      	adds	r2, r5, r3
 8009796:	7111      	strb	r1, [r2, #4]
    {
        logwrite("DMESG line too long!\n");
        return;
    }
    memcpy(codalLogStore.buffer + codalLogStore.ptr, msg, l);
    codalLogStore.ptr += l;
 8009798:	602b      	str	r3, [r5, #0]
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static void logwriten(const char *msg, int l)
{
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
    {
        const int jump = sizeof(codalLogStore.buffer) / 4;
        codalLogStore.ptr -= jump;
 800979e:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 80097a2:	4622      	mov	r2, r4
 80097a4:	4649      	mov	r1, r9
 80097a6:	480a      	ldr	r0, [pc, #40]	; (80097d0 <_ZL9logwritenPKci+0x6c>)
static void logwriten(const char *msg, int l)
{
    if (codalLogStore.ptr + l >= sizeof(codalLogStore.buffer))
    {
        const int jump = sizeof(codalLogStore.buffer) / 4;
        codalLogStore.ptr -= jump;
 80097a8:	602c      	str	r4, [r5, #0]
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
 80097aa:	f7f9 fc6f 	bl	800308c <memmove>
        // zero-out the rest so it looks OK in the debugger
        memset(codalLogStore.buffer + codalLogStore.ptr, 0, sizeof(codalLogStore.buffer) - codalLogStore.ptr);
 80097ae:	f5c4 6280 	rsb	r2, r4, #1024	; 0x400
 80097b2:	1930      	adds	r0, r6, r4
 80097b4:	2100      	movs	r1, #0
 80097b6:	f7f9 fc83 	bl	80030c0 <memset>
    }
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 80097ba:	682c      	ldr	r4, [r5, #0]
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 80097bc:	2115      	movs	r1, #21
        codalLogStore.ptr -= jump;
        memmove(codalLogStore.buffer, codalLogStore.buffer + jump, codalLogStore.ptr);
        // zero-out the rest so it looks OK in the debugger
        memset(codalLogStore.buffer + codalLogStore.ptr, 0, sizeof(codalLogStore.buffer) - codalLogStore.ptr);
    }
    if (l + codalLogStore.ptr >= sizeof(codalLogStore.buffer))
 80097be:	eb0a 0304 	add.w	r3, sl, r4
 80097c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c6:	d3dd      	bcc.n	8009784 <_ZL9logwritenPKci+0x20>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 80097c8:	4647      	mov	r7, r8
 80097ca:	e7d6      	b.n	800977a <_ZL9logwritenPKci+0x16>
 80097cc:	20002a14 	.word	0x20002a14
 80097d0:	20002a18 	.word	0x20002a18
 80097d4:	0800c3b4 	.word	0x0800c3b4

080097d8 <_ZL11logwritenummbb>:
    }
    buf[i] = 0;
}

static void logwritenum(uint32_t n, bool full, bool hex)
{
 80097d8:	b530      	push	{r4, r5, lr}
 80097da:	b087      	sub	sp, #28
    char buff[20];

    if (hex)
 80097dc:	b3aa      	cbz	r2, 800984a <_ZL11logwritenummbb+0x72>
 80097de:	4605      	mov	r5, r0
    logwriten(msg, strlen(msg));
}

static void writeNum(char *buf, uint32_t n, bool full)
{
    int i = 0;
 80097e0:	2400      	movs	r4, #0
    int sh = 28;
 80097e2:	201c      	movs	r0, #28
    while (sh >= 0)
    {
        int d = (n >> sh) & 0xf;
 80097e4:	fa25 f200 	lsr.w	r2, r5, r0
 80097e8:	f002 020f 	and.w	r2, r2, #15
        if (full || d || sh == 0 || i)
 80097ec:	b9f9      	cbnz	r1, 800982e <_ZL11logwritenummbb+0x56>
 80097ee:	b9f2      	cbnz	r2, 800982e <_ZL11logwritenummbb+0x56>
 80097f0:	b380      	cbz	r0, 8009854 <_ZL11logwritenummbb+0x7c>
 80097f2:	b134      	cbz	r4, 8009802 <_ZL11logwritenummbb+0x2a>
 80097f4:	460b      	mov	r3, r1
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 80097f6:	3330      	adds	r3, #48	; 0x30
 80097f8:	aa06      	add	r2, sp, #24
 80097fa:	4422      	add	r2, r4
 80097fc:	f802 3c14 	strb.w	r3, [r2, #-20]
 8009800:	3401      	adds	r4, #1
        }
        sh -= 4;
 8009802:	3804      	subs	r0, #4

static void writeNum(char *buf, uint32_t n, bool full)
{
    int i = 0;
    int sh = 28;
    while (sh >= 0)
 8009804:	1d03      	adds	r3, r0, #4
 8009806:	d1ed      	bne.n	80097e4 <_ZL11logwritenummbb+0xc>
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
        }
        sh -= 4;
    }
    buf[i] = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	aa06      	add	r2, sp, #24
 800980c:	4414      	add	r4, r2
 800980e:	f804 3c14 	strb.w	r3, [r4, #-20]
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 8009812:	2102      	movs	r1, #2
 8009814:	4811      	ldr	r0, [pc, #68]	; (800985c <_ZL11logwritenummbb+0x84>)
 8009816:	ac01      	add	r4, sp, #4
 8009818:	f7ff ffa4 	bl	8009764 <_ZL9logwritenPKci>
 800981c:	4620      	mov	r0, r4
 800981e:	f7f9 fc1f 	bl	8003060 <strlen>
 8009822:	4601      	mov	r1, r0
 8009824:	4620      	mov	r0, r4
 8009826:	f7ff ff9d 	bl	8009764 <_ZL9logwritenPKci>
    {
        itoa(n, buff);
    }

    logwrite(buff);
}
 800982a:	b007      	add	sp, #28
 800982c:	bd30      	pop	{r4, r5, pc}
    while (sh >= 0)
    {
        int d = (n >> sh) & 0xf;
        if (full || d || sh == 0 || i)
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800982e:	2a09      	cmp	r2, #9
 8009830:	b253      	sxtb	r3, r2
 8009832:	dde0      	ble.n	80097f6 <_ZL11logwritenummbb+0x1e>
 8009834:	aa06      	add	r2, sp, #24
 8009836:	3337      	adds	r3, #55	; 0x37
 8009838:	4422      	add	r2, r4
        }
        sh -= 4;
 800983a:	3804      	subs	r0, #4
    while (sh >= 0)
    {
        int d = (n >> sh) & 0xf;
        if (full || d || sh == 0 || i)
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 800983c:	f802 3c14 	strb.w	r3, [r2, #-20]

static void writeNum(char *buf, uint32_t n, bool full)
{
    int i = 0;
    int sh = 28;
    while (sh >= 0)
 8009840:	1d03      	adds	r3, r0, #4
    {
        int d = (n >> sh) & 0xf;
        if (full || d || sh == 0 || i)
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 8009842:	f104 0401 	add.w	r4, r4, #1

static void writeNum(char *buf, uint32_t n, bool full)
{
    int i = 0;
    int sh = 28;
    while (sh >= 0)
 8009846:	d1cd      	bne.n	80097e4 <_ZL11logwritenummbb+0xc>
 8009848:	e7de      	b.n	8009808 <_ZL11logwritenummbb+0x30>
        writeNum(buff, n, full);
        logwrite("0x");
    }
    else
    {
        itoa(n, buff);
 800984a:	ac01      	add	r4, sp, #4
 800984c:	4621      	mov	r1, r4
 800984e:	f7ff fe7d 	bl	800954c <_ZN5codal4itoaEiPc>
 8009852:	e7e3      	b.n	800981c <_ZL11logwritenummbb+0x44>
    int i = 0;
    int sh = 28;
    while (sh >= 0)
    {
        int d = (n >> sh) & 0xf;
        if (full || d || sh == 0 || i)
 8009854:	4603      	mov	r3, r0
        {
            buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;
 8009856:	3330      	adds	r3, #48	; 0x30
 8009858:	e7ce      	b.n	80097f8 <_ZL11logwritenummbb+0x20>
 800985a:	bf00      	nop
 800985c:	0800c3b0 	.word	0x0800c3b0

08009860 <codal_vdmesg>:
    if (dmesg_flush_fn)
        dmesg_flush_fn();
}

void codal_vdmesg(const char *format, va_list ap)
{
 8009860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009864:	b083      	sub	sp, #12
 8009866:	4606      	mov	r6, r0
 8009868:	460f      	mov	r7, r1
    const char *end = format;

    target_disable_irq();
 800986a:	f7f6 fd4d 	bl	8000308 <target_disable_irq>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 800986e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800992c <codal_vdmesg+0xcc>
 8009872:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8009930 <codal_vdmesg+0xd0>
 8009876:	4634      	mov	r4, r6
 8009878:	e001      	b.n	800987e <codal_vdmesg+0x1e>
    const char *end = format;

    target_disable_irq();
    while (*end)
    {
        if (*end++ == '%')
 800987a:	2b25      	cmp	r3, #37	; 0x25
 800987c:	d011      	beq.n	80098a2 <codal_vdmesg+0x42>
 800987e:	4625      	mov	r5, r4
void codal_vdmesg(const char *format, va_list ap)
{
    const char *end = format;

    target_disable_irq();
    while (*end)
 8009880:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f8      	bne.n	800987a <codal_vdmesg+0x1a>
                break;
            }
            format = end;
        }
    }
    logwriten(format, end - format);
 8009888:	1ba9      	subs	r1, r5, r6
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ff6a 	bl	8009764 <_ZL9logwritenPKci>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 8009890:	2102      	movs	r1, #2
 8009892:	4825      	ldr	r0, [pc, #148]	; (8009928 <codal_vdmesg+0xc8>)
 8009894:	f7ff ff66 	bl	8009764 <_ZL9logwritenPKci>
            format = end;
        }
    }
    logwriten(format, end - format);
    logwrite("\r\n");
    target_enable_irq();
 8009898:	f7f6 fd34 	bl	8000304 <target_enable_irq>
}
 800989c:	b003      	add	sp, #12
 800989e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    target_disable_irq();
    while (*end)
    {
        if (*end++ == '%')
        {
            logwriten(format, end - format - 1);
 80098a2:	1ba1      	subs	r1, r4, r6
 80098a4:	4630      	mov	r0, r6
 80098a6:	3901      	subs	r1, #1
 80098a8:	f7ff ff5c 	bl	8009764 <_ZL9logwritenPKci>
            uint32_t val = va_arg(ap, uint32_t);
            switch (*end++)
 80098ac:	7823      	ldrb	r3, [r4, #0]
    while (*end)
    {
        if (*end++ == '%')
        {
            logwriten(format, end - format - 1);
            uint32_t val = va_arg(ap, uint32_t);
 80098ae:	f857 4b04 	ldr.w	r4, [r7], #4
            switch (*end++)
 80098b2:	2b64      	cmp	r3, #100	; 0x64
 80098b4:	f105 0602 	add.w	r6, r5, #2
    while (*end)
    {
        if (*end++ == '%')
        {
            logwriten(format, end - format - 1);
            uint32_t val = va_arg(ap, uint32_t);
 80098b8:	9401      	str	r4, [sp, #4]
            switch (*end++)
 80098ba:	d02f      	beq.n	800991c <codal_vdmesg+0xbc>
 80098bc:	d90a      	bls.n	80098d4 <codal_vdmesg+0x74>
 80098be:	2b73      	cmp	r3, #115	; 0x73
 80098c0:	d01f      	beq.n	8009902 <codal_vdmesg+0xa2>
 80098c2:	2b78      	cmp	r3, #120	; 0x78
 80098c4:	d011      	beq.n	80098ea <codal_vdmesg+0x8a>
 80098c6:	2b70      	cmp	r3, #112	; 0x70
 80098c8:	d015      	beq.n	80098f6 <codal_vdmesg+0x96>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 80098ca:	2103      	movs	r1, #3
 80098cc:	4648      	mov	r0, r9
 80098ce:	f7ff ff49 	bl	8009764 <_ZL9logwritenPKci>
                break;
            default:
                logwrite("???");
                break;
            }
            format = end;
 80098d2:	e7d0      	b.n	8009876 <codal_vdmesg+0x16>
    {
        if (*end++ == '%')
        {
            logwriten(format, end - format - 1);
            uint32_t val = va_arg(ap, uint32_t);
            switch (*end++)
 80098d4:	2b58      	cmp	r3, #88	; 0x58
 80098d6:	d00e      	beq.n	80098f6 <codal_vdmesg+0x96>
 80098d8:	2b63      	cmp	r3, #99	; 0x63
 80098da:	d01a      	beq.n	8009912 <codal_vdmesg+0xb2>
 80098dc:	2b25      	cmp	r3, #37	; 0x25
 80098de:	d1f4      	bne.n	80098ca <codal_vdmesg+0x6a>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 80098e0:	2101      	movs	r1, #1
 80098e2:	4640      	mov	r0, r8
 80098e4:	f7ff ff3e 	bl	8009764 <_ZL9logwritenPKci>
 80098e8:	e7c5      	b.n	8009876 <codal_vdmesg+0x16>
                break;
            case 'd':
                logwritenum(val, false, false);
                break;
            case 'x':
                logwritenum(val, false, true);
 80098ea:	4620      	mov	r0, r4
 80098ec:	2201      	movs	r2, #1
 80098ee:	2100      	movs	r1, #0
 80098f0:	f7ff ff72 	bl	80097d8 <_ZL11logwritenummbb>
                break;
 80098f4:	e7bf      	b.n	8009876 <codal_vdmesg+0x16>
            case 'p':
            case 'X':
                logwritenum(val, true, true);
 80098f6:	2201      	movs	r2, #1
 80098f8:	4620      	mov	r0, r4
 80098fa:	4611      	mov	r1, r2
 80098fc:	f7ff ff6c 	bl	80097d8 <_ZL11logwritenummbb>
                break;
 8009900:	e7b9      	b.n	8009876 <codal_vdmesg+0x16>
    codalLogStore.buffer[codalLogStore.ptr] = 0;
}

static void logwrite(const char *msg)
{
    logwriten(msg, strlen(msg));
 8009902:	4620      	mov	r0, r4
 8009904:	f7f9 fbac 	bl	8003060 <strlen>
 8009908:	4601      	mov	r1, r0
 800990a:	4620      	mov	r0, r4
 800990c:	f7ff ff2a 	bl	8009764 <_ZL9logwritenPKci>
 8009910:	e7b1      	b.n	8009876 <codal_vdmesg+0x16>
            logwriten(format, end - format - 1);
            uint32_t val = va_arg(ap, uint32_t);
            switch (*end++)
            {
            case 'c':
                logwriten((const char *)&val, 1);
 8009912:	2101      	movs	r1, #1
 8009914:	a801      	add	r0, sp, #4
 8009916:	f7ff ff25 	bl	8009764 <_ZL9logwritenPKci>
                break;
 800991a:	e7ac      	b.n	8009876 <codal_vdmesg+0x16>
            case 'd':
                logwritenum(val, false, false);
 800991c:	2200      	movs	r2, #0
 800991e:	4620      	mov	r0, r4
 8009920:	4611      	mov	r1, r2
 8009922:	f7ff ff59 	bl	80097d8 <_ZL11logwritenummbb>
                break;
 8009926:	e7a6      	b.n	8009876 <codal_vdmesg+0x16>
 8009928:	0800c3d4 	.word	0x0800c3d4
 800992c:	0800c3d0 	.word	0x0800c3d0
 8009930:	0800c3cc 	.word	0x0800c3cc

08009934 <codal_dmesg>:

    logwrite(buff);
}

void codal_dmesg(const char *format, ...)
{
 8009934:	b40f      	push	{r0, r1, r2, r3}
 8009936:	b500      	push	{lr}
 8009938:	b083      	sub	sp, #12
 800993a:	ab04      	add	r3, sp, #16
 800993c:	f853 0b04 	ldr.w	r0, [r3], #4
    va_list arg;
    va_start(arg, format);
    codal_vdmesg(format, arg);
 8009940:	4619      	mov	r1, r3
}

void codal_dmesg(const char *format, ...)
{
    va_list arg;
    va_start(arg, format);
 8009942:	9301      	str	r3, [sp, #4]
    codal_vdmesg(format, arg);
 8009944:	f7ff ff8c 	bl	8009860 <codal_vdmesg>
    va_end(arg);
}
 8009948:	b003      	add	sp, #12
 800994a:	f85d eb04 	ldr.w	lr, [sp], #4
 800994e:	b004      	add	sp, #16
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop

08009954 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
         * @return This default implementation simply returns DEVICE_NOT_SUPPORTED.
         */
        virtual int remove(Listener *)
        {
            return DEVICE_NOT_SUPPORTED;
        }
 8009954:	4800      	ldr	r0, [pc, #0]	; (8009958 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 8009956:	4770      	bx	lr
 8009958:	fffffc16 	.word	0xfffffc16

0800995c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>:

using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
 800995c:	b1b2      	cbz	r2, 800998c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x30>
}

using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
 800995e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (queue && queue->prev) target_panic(30);
 8009960:	69d3      	ldr	r3, [r2, #28]
 8009962:	4605      	mov	r5, r0
 8009964:	460f      	mov	r7, r1
 8009966:	4614      	mov	r4, r2
 8009968:	b113      	cbz	r3, 8009970 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x14>
 800996a:	201e      	movs	r0, #30
 800996c:	f7f6 fd20 	bl	80003b0 <target_panic>
    while (queue) {
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	3201      	adds	r2, #1
        if (*dest)
 8009974:	682b      	ldr	r3, [r5, #0]
            *(*dest)++ = queue;
        (*sum)++;
 8009976:	4616      	mov	r6, r2

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
    while (queue) {
        if (*dest)
 8009978:	b113      	cbz	r3, 8009980 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x24>
            *(*dest)++ = queue;
 800997a:	1d18      	adds	r0, r3, #4
 800997c:	6028      	str	r0, [r5, #0]
 800997e:	601c      	str	r4, [r3, #0]
        (*sum)++;
        queue = queue->next;
 8009980:	69a4      	ldr	r4, [r4, #24]
using namespace codal;

static void get_fibers_from(Fiber ***dest, int *sum, Fiber *queue)
{
    if (queue && queue->prev) target_panic(30);
    while (queue) {
 8009982:	3201      	adds	r2, #1
 8009984:	2c00      	cmp	r4, #0
 8009986:	d1f5      	bne.n	8009974 <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_+0x18>
 8009988:	603e      	str	r6, [r7, #0]
        if (*dest)
            *(*dest)++ = queue;
        (*sum)++;
        queue = queue->next;
    }
}
 800998a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <_ZN5codal11list_fibersEPPNS_5FiberE>:
  *
  * @return the number of fibers (potentially) stored
  */
int codal::list_fibers(Fiber **dest)
{
    int sum = 0;
 8009990:	2300      	movs	r3, #0
  * @param dest If non-null, it points to an array of pointers to fibers to store results in.
  *
  * @return the number of fibers (potentially) stored
  */
int codal::list_fibers(Fiber **dest)
{
 8009992:	b500      	push	{lr}
 8009994:	b085      	sub	sp, #20
 8009996:	9001      	str	r0, [sp, #4]
    int sum = 0;
 8009998:	9303      	str	r3, [sp, #12]

    // interrupts might move fibers between queues, but should not create new ones
    target_disable_irq();
 800999a:	f7f6 fcb5 	bl	8000308 <target_disable_irq>
    get_fibers_from(&dest, &sum, runQueue);
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <_ZN5codal11list_fibersEPPNS_5FiberE+0x4c>)
 80099a0:	a903      	add	r1, sp, #12
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	a801      	add	r0, sp, #4
 80099a6:	f7ff ffd9 	bl	800995c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, sleepQueue);
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <_ZN5codal11list_fibersEPPNS_5FiberE+0x50>)
 80099ac:	a903      	add	r1, sp, #12
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	a801      	add	r0, sp, #4
 80099b2:	f7ff ffd3 	bl	800995c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    get_fibers_from(&dest, &sum, waitQueue);
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <_ZN5codal11list_fibersEPPNS_5FiberE+0x54>)
 80099b8:	a903      	add	r1, sp, #12
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	a801      	add	r0, sp, #4
 80099be:	f7ff ffcd 	bl	800995c <_ZL15get_fibers_fromPPPN5codal5FiberEPiS1_>
    target_enable_irq();
 80099c2:	f7f6 fc9f 	bl	8000304 <target_enable_irq>

    // idleFiber is used to start event handlers using invoke(),
    // so it may in fact have the user_data set if in FOB context
    if (dest)
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	b113      	cbz	r3, 80099d0 <_ZN5codal11list_fibersEPPNS_5FiberE+0x40>
        *dest++ = idleFiber;
 80099ca:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <_ZN5codal11list_fibersEPPNS_5FiberE+0x58>)
 80099cc:	6812      	ldr	r2, [r2, #0]
 80099ce:	601a      	str	r2, [r3, #0]
    sum++;
 80099d0:	9803      	ldr	r0, [sp, #12]
    return sum;
}
 80099d2:	3001      	adds	r0, #1
 80099d4:	b005      	add	sp, #20
 80099d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80099da:	bf00      	nop
 80099dc:	20002e28 	.word	0x20002e28
 80099e0:	20002e20 	.word	0x20002e20
 80099e4:	20002e34 	.word	0x20002e34
 80099e8:	20002e30 	.word	0x20002e30

080099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
  * @param f The fiber to add to the queue
  *
  * @param queue The run queue to add the fiber to.
  */
void codal::queue_fiber(Fiber *f, Fiber **queue)
{
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	460d      	mov	r5, r1
 80099f0:	4604      	mov	r4, r0
    target_disable_irq();
 80099f2:	f7f6 fc89 	bl	8000308 <target_disable_irq>
    // Record which queue this fiber is on.
    f->queue = queue;

    // Add the fiber to the tail of the queue. Although this involves scanning the
    // list, it results in fairer scheduling.
    if (*queue == NULL)
 80099f6:	682a      	ldr	r2, [r5, #0]
void codal::queue_fiber(Fiber *f, Fiber **queue)
{
    target_disable_irq();

    // Record which queue this fiber is on.
    f->queue = queue;
 80099f8:	6165      	str	r5, [r4, #20]

    // Add the fiber to the tail of the queue. Although this involves scanning the
    // list, it results in fairer scheduling.
    if (*queue == NULL)
 80099fa:	b90a      	cbnz	r2, 8009a00 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x14>
 80099fc:	e00a      	b.n	8009a14 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
 80099fe:	461a      	mov	r2, r3
    {
        // Scan to the end of the queue.
        // We don't maintain a tail pointer to save RAM (queues are nrmally very short).
        Fiber *last = *queue;

        while (last->next != NULL)
 8009a00:	6993      	ldr	r3, [r2, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1fb      	bne.n	80099fe <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x12>
            last = last->next;

        last->next = f;
 8009a06:	6194      	str	r4, [r2, #24]
        f->prev = last;
        f->next = NULL;
 8009a08:	e9c4 3206 	strd	r3, r2, [r4, #24]
    }

    target_enable_irq();
}
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        last->next = f;
        f->prev = last;
        f->next = NULL;
    }

    target_enable_irq();
 8009a10:	f7f6 bc78 	b.w	8000304 <target_enable_irq>
    // Add the fiber to the tail of the queue. Although this involves scanning the
    // list, it results in fairer scheduling.
    if (*queue == NULL)
    {
        f->next = NULL;
        f->prev = NULL;
 8009a14:	e9c4 2206 	strd	r2, r2, [r4, #24]
        *queue = f;
 8009a18:	602c      	str	r4, [r5, #0]
        f->prev = last;
        f->next = NULL;
    }

    target_enable_irq();
}
 8009a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        last->next = f;
        f->prev = last;
        f->next = NULL;
    }

    target_enable_irq();
 8009a1e:	f7f6 bc71 	b.w	8000304 <target_enable_irq>
 8009a22:	bf00      	nop

08009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>:
  * @param f the fiber to remove.
  */
void codal::dequeue_fiber(Fiber *f)
{
    // If this fiber is already dequeued, nothing the there's nothing to do.
    if (f->queue == NULL)
 8009a24:	6943      	ldr	r3, [r0, #20]
 8009a26:	b1b3      	cbz	r3, 8009a56 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x32>
  * Utility function to the given fiber from whichever queue it is currently stored on.
  *
  * @param f the fiber to remove.
  */
void codal::dequeue_fiber(Fiber *f)
{
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	4604      	mov	r4, r0
    // If this fiber is already dequeued, nothing the there's nothing to do.
    if (f->queue == NULL)
        return;

    // Remove this fiber fromm whichever queue it is on.
    target_disable_irq();
 8009a2c:	f7f6 fc6c 	bl	8000308 <target_disable_irq>

    if (f->prev != NULL)
        f->prev->next = f->next;
 8009a30:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
        return;

    // Remove this fiber fromm whichever queue it is on.
    target_disable_irq();

    if (f->prev != NULL)
 8009a34:	b163      	cbz	r3, 8009a50 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x2c>
        f->prev->next = f->next;
 8009a36:	619a      	str	r2, [r3, #24]
    else
        *(f->queue) = f->next;

    if(f->next)
 8009a38:	69a3      	ldr	r3, [r4, #24]
 8009a3a:	b10b      	cbz	r3, 8009a40 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x1c>
        f->next->prev = f->prev;
 8009a3c:	69e2      	ldr	r2, [r4, #28]
 8009a3e:	61da      	str	r2, [r3, #28]

    f->next = NULL;
 8009a40:	2300      	movs	r3, #0
    f->prev = NULL;
 8009a42:	e9c4 3306 	strd	r3, r3, [r4, #24]
    f->queue = NULL;
 8009a46:	6163      	str	r3, [r4, #20]

    target_enable_irq();
}
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    f->next = NULL;
    f->prev = NULL;
    f->queue = NULL;

    target_enable_irq();
 8009a4c:	f7f6 bc5a 	b.w	8000304 <target_enable_irq>
    target_disable_irq();

    if (f->prev != NULL)
        f->prev->next = f->next;
    else
        *(f->queue) = f->next;
 8009a50:	6963      	ldr	r3, [r4, #20]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e7f0      	b.n	8009a38 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x14>
 8009a56:	4770      	bx	lr

08009a58 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8009a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    Fiber *f = sleepQueue;
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <_ZN5codal14scheduler_tickENS_5EventE+0x3c>)
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8009a5c:	b083      	sub	sp, #12
    Fiber *f = sleepQueue;
 8009a5e:	681c      	ldr	r4, [r3, #0]
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8009a60:	aa02      	add	r2, sp, #8
 8009a62:	e902 0003 	stmdb	r2, {r0, r1}
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8009a66:	b194      	cbz	r4, 8009a8e <_ZN5codal14scheduler_tickENS_5EventE+0x36>
 8009a68:	9e01      	ldr	r6, [sp, #4]

        if (evt.timestamp >= f->context)
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 8009a6a:	4f0b      	ldr	r7, [pc, #44]	; (8009a98 <_ZN5codal14scheduler_tickENS_5EventE+0x40>)
 8009a6c:	e001      	b.n	8009a72 <_ZN5codal14scheduler_tickENS_5EventE+0x1a>
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8009a6e:	462c      	mov	r4, r5
 8009a70:	b16d      	cbz	r5, 8009a8e <_ZN5codal14scheduler_tickENS_5EventE+0x36>
    {
        t = f->next;

        if (evt.timestamp >= f->context)
 8009a72:	68e3      	ldr	r3, [r4, #12]
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
    {
        t = f->next;
 8009a74:	69a5      	ldr	r5, [r4, #24]

        if (evt.timestamp >= f->context)
 8009a76:	42b3      	cmp	r3, r6
 8009a78:	d8f9      	bhi.n	8009a6e <_ZN5codal14scheduler_tickENS_5EventE+0x16>
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff ffd2 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8009a80:	4620      	mov	r0, r4
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7ff ffb2 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8009a88:	462c      	mov	r4, r5
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	d1f1      	bne.n	8009a72 <_ZN5codal14scheduler_tickENS_5EventE+0x1a>
            queue_fiber(f,&runQueue);
        }

        f = t;
    }
}
 8009a8e:	b003      	add	sp, #12
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20002e20 	.word	0x20002e20
 8009a98:	20002e28 	.word	0x20002e28

08009a9c <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8009a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 8009aa0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8009b7c <_ZN5codal15scheduler_eventENS_5EventE+0xe0>
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8009aa4:	b08f      	sub	sp, #60	; 0x3c
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 8009aa6:	f8d9 2000 	ldr.w	r2, [r9]
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8009aaa:	ab04      	add	r3, sp, #16
 8009aac:	e883 0003 	stmia.w	r3, {r0, r1}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 8009ab0:	b1fa      	cbz	r2, 8009af2 <_ZN5codal15scheduler_eventENS_5EventE+0x56>
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
    Fiber *f = waitQueue;
 8009ab2:	4b2e      	ldr	r3, [pc, #184]	; (8009b6c <_ZN5codal15scheduler_eventENS_5EventE+0xd0>)
 8009ab4:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8009ab8:	681c      	ldr	r4, [r3, #0]
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
 8009aba:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8009abe:	b1a4      	cbz	r4, 8009aea <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
  */
void codal::scheduler_event(Event evt)
{
    Fiber *f = waitQueue;
    Fiber *t;
    int notifyOneComplete = 0;
 8009ac0:	2300      	movs	r3, #0
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009ac2:	f240 3afe 	movw	sl, #1022	; 0x3fe
 8009ac6:	f240 38ff 	movw	r8, #1023	; 0x3ff
        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 8009aca:	4f29      	ldr	r7, [pc, #164]	; (8009b70 <_ZN5codal15scheduler_eventENS_5EventE+0xd4>)
  */
void codal::scheduler_event(Event evt)
{
    Fiber *f = waitQueue;
    Fiber *t;
    int notifyOneComplete = 0;
 8009acc:	9303      	str	r3, [sp, #12]
    while (f != NULL)
    {
        t = f->next;

        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
 8009ace:	68e3      	ldr	r3, [r4, #12]
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009ad0:	45d3      	cmp	fp, sl
    {
        t = f->next;

        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 8009ad2:	ea4f 4113 	mov.w	r1, r3, lsr #16
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
    {
        t = f->next;
 8009ad6:	69a5      	ldr	r5, [r4, #24]

        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
 8009ad8:	b29b      	uxth	r3, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 8009ada:	b288      	uxth	r0, r1

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009adc:	d00c      	beq.n	8009af8 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>
                notifyOneComplete = 1;
            }
        }

        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009ade:	b1db      	cbz	r3, 8009b18 <_ZN5codal15scheduler_eventENS_5EventE+0x7c>
 8009ae0:	459b      	cmp	fp, r3
 8009ae2:	d019      	beq.n	8009b18 <_ZN5codal15scheduler_eventENS_5EventE+0x7c>
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
        return;

    // Check the wait queue, and wake up any fibers as necessary.
    while (f != NULL)
 8009ae4:	462c      	mov	r4, r5
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	d1f1      	bne.n	8009ace <_ZN5codal15scheduler_eventENS_5EventE+0x32>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 8009aea:	f2ab 33fe 	subw	r3, fp, #1022	; 0x3fe
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d823      	bhi.n	8009b3a <_ZN5codal15scheduler_eventENS_5EventE+0x9e>
        messageBus->ignore(evt.source, evt.value, scheduler_event);
}
 8009af2:	b00f      	add	sp, #60	; 0x3c
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009af8:	4543      	cmp	r3, r8
 8009afa:	d1f0      	bne.n	8009ade <_ZN5codal15scheduler_eventENS_5EventE+0x42>
 8009afc:	b9b9      	cbnz	r1, 8009b2e <_ZN5codal15scheduler_eventENS_5EventE+0x92>
        {
            if (!notifyOneComplete)
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1ef      	bne.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
            {
                // Wakey wakey!
                dequeue_fiber(f);
 8009b04:	4620      	mov	r0, r4
 8009b06:	f7ff ff8d 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
                queue_fiber(f,&runQueue);
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7ff ff6d 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	9303      	str	r3, [sp, #12]
 8009b16:	e7e5      	b.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
            }
        }

        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009b18:	b109      	cbz	r1, 8009b1e <_ZN5codal15scheduler_eventENS_5EventE+0x82>
 8009b1a:	42b0      	cmp	r0, r6
 8009b1c:	d1e2      	bne.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f7ff ff80 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8009b24:	4639      	mov	r1, r7
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff ff60 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 8009b2c:	e7da      	b.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8009b2e:	42b0      	cmp	r0, r6
 8009b30:	d1d8      	bne.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
        {
            if (!notifyOneComplete)
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1d5      	bne.n	8009ae4 <_ZN5codal15scheduler_eventENS_5EventE+0x48>
 8009b38:	e7e4      	b.n	8009b04 <_ZN5codal15scheduler_eventENS_5EventE+0x68>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 8009b3a:	2310      	movs	r3, #16
        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 8009b3c:	f8d9 4000 	ldr.w	r4, [r9]
 8009b40:	4632      	mov	r2, r6
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4659      	mov	r1, fp
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <_ZN5codal15scheduler_eventENS_5EventE+0xd8>)
 8009b48:	a806      	add	r0, sp, #24
 8009b4a:	f000 fc6d 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <_ZN5codal15scheduler_eventENS_5EventE+0xdc>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d105      	bne.n	8009b64 <_ZN5codal15scheduler_eventENS_5EventE+0xc8>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 8009b58:	a806      	add	r0, sp, #24
 8009b5a:	f000 fc7d 	bl	800a458 <_ZN5codal8ListenerD1Ev>
}
 8009b5e:	b00f      	add	sp, #60	; 0x3c
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            remove(&listener);
 8009b64:	4620      	mov	r0, r4
 8009b66:	a906      	add	r1, sp, #24
 8009b68:	4798      	blx	r3
 8009b6a:	e7f5      	b.n	8009b58 <_ZN5codal15scheduler_eventENS_5EventE+0xbc>
 8009b6c:	20002e34 	.word	0x20002e34
 8009b70:	20002e28 	.word	0x20002e28
 8009b74:	08009a9d 	.word	0x08009a9d
 8009b78:	08009955 	.word	0x08009955
 8009b7c:	20002e1c 	.word	0x20002e1c

08009b80 <_Z15getFiberContextv>:

/**
  * Allocates a fiber from the fiber pool if availiable. Otherwise, allocates a new one from the heap.
  */
Fiber *getFiberContext()
{
 8009b80:	b538      	push	{r3, r4, r5, lr}
    Fiber *f;

    target_disable_irq();
 8009b82:	f7f6 fbc1 	bl	8000308 <target_disable_irq>

    if (fiberPool != NULL)
 8009b86:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <_Z15getFiberContextv+0x4c>)
 8009b88:	681c      	ldr	r4, [r3, #0]
 8009b8a:	b184      	cbz	r4, 8009bae <_Z15getFiberContextv+0x2e>
    {
        f = fiberPool;
        dequeue_fiber(f);
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7ff ff49 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

        f->stack_bottom = 0;
        f->stack_top = 0;
    }

    target_enable_irq();
 8009b92:	f7f6 fbb7 	bl	8000304 <target_enable_irq>

    // Ensure this fiber is in suitable state for reuse.
    f->flags = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	6123      	str	r3, [r4, #16]

    #if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
    f->user_data = 0;
 8009b9a:	6223      	str	r3, [r4, #32]
    #endif

    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 8009b9c:	6825      	ldr	r5, [r4, #0]
 8009b9e:	f7f6 fc17 	bl	80003d0 <fiber_initial_stack_base>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7f6 fc1f 	bl	80003e8 <tcb_configure_stack_base>

    return f;
}
 8009baa:	4620      	mov	r0, r4
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
        f = fiberPool;
        dequeue_fiber(f);
    }
    else
    {
        f = new Fiber();
 8009bae:	2024      	movs	r0, #36	; 0x24
 8009bb0:	f7f9 fc2e 	bl	8003410 <_Znwj>
 8009bb4:	2224      	movs	r2, #36	; 0x24
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4604      	mov	r4, r0
 8009bba:	f7f9 fa81 	bl	80030c0 <memset>
        if (f == NULL) {
            target_enable_irq();
            return NULL;
        }

        f->tcb = tcb_allocate();
 8009bbe:	f7f6 fc0b 	bl	80003d8 <tcb_allocate>

        f->stack_bottom = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e9c4 0300 	strd	r0, r3, [r4]
        f->stack_top = 0;
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	e7e2      	b.n	8009b92 <_Z15getFiberContextv+0x12>
 8009bcc:	20002e2c 	.word	0x20002e2c

08009bd0 <_ZL10handle_fobv>:
        messageBus->ignore(evt.source, evt.value, scheduler_event);
}

static Fiber* handle_fob()
{
    Fiber *f = currentFiber;
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <_ZL10handle_fobv+0x2c>)
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
        messageBus->ignore(evt.source, evt.value, scheduler_event);
}

static Fiber* handle_fob()
{
 8009bd2:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 8009bd4:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 8009bd6:	6923      	ldr	r3, [r4, #16]
 8009bd8:	07db      	lsls	r3, r3, #31
 8009bda:	d401      	bmi.n	8009be0 <_ZL10handle_fobv+0x10>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 8009bdc:	4620      	mov	r0, r4
 8009bde:	bd10      	pop	{r4, pc}
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
    {
        // Allocate a TCB from the new fiber. This will come from the tread pool if availiable,
        // else a new one will be allocated on the heap.
        forkedFiber = getFiberContext();
 8009be0:	f7ff ffce 	bl	8009b80 <_Z15getFiberContextv>
 8009be4:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <_ZL10handle_fobv+0x30>)
 8009be6:	6018      	str	r0, [r3, #0]
         // If we're out of memory, there's nothing we can do.
        // keep running in the context of the current thread as a best effort.
        if (forkedFiber != NULL) {
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0f7      	beq.n	8009bdc <_ZL10handle_fobv+0xc>
#if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
            forkedFiber->user_data = f->user_data;
            f->user_data = NULL;
 8009bec:	2300      	movs	r3, #0
        forkedFiber = getFiberContext();
         // If we're out of memory, there's nothing we can do.
        // keep running in the context of the current thread as a best effort.
        if (forkedFiber != NULL) {
#if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
            forkedFiber->user_data = f->user_data;
 8009bee:	6a22      	ldr	r2, [r4, #32]
 8009bf0:	6202      	str	r2, [r0, #32]
            f->user_data = NULL;
 8009bf2:	6223      	str	r3, [r4, #32]
#endif
            f = forkedFiber;
 8009bf4:	4604      	mov	r4, r0
        }
    }
    return f;
}
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20002e18 	.word	0x20002e18
 8009c00:	20002e24 	.word	0x20002e24

08009c04 <_Z14__create_fibermmmi.part.2>:
    // If we get here, then the completion routine didn't recycle the fiber... so do it anyway. :-)
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
 8009c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4690      	mov	r8, r2
 8009c0e:	461d      	mov	r5, r3
    if (ep == 0 || cp == 0)
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 8009c10:	f7ff ffb6 	bl	8009b80 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 8009c14:	4604      	mov	r4, r0
 8009c16:	b1c0      	cbz	r0, 8009c4a <_Z14__create_fibermmmi.part.2+0x46>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 8009c18:	4643      	mov	r3, r8
 8009c1a:	463a      	mov	r2, r7
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	6800      	ldr	r0, [r0, #0]
 8009c20:	f7f6 fbea 	bl	80003f8 <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 8009c24:	6826      	ldr	r6, [r4, #0]
 8009c26:	f7f6 fbd3 	bl	80003d0 <fiber_initial_stack_base>
 8009c2a:	1f01      	subs	r1, r0, #4
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7f6 fbd9 	bl	80003e4 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <_Z14__create_fibermmmi.part.2+0x4c>)
 8009c34:	4907      	ldr	r1, [pc, #28]	; (8009c54 <_Z14__create_fibermmmi.part.2+0x50>)
 8009c36:	6820      	ldr	r0, [r4, #0]
 8009c38:	2d00      	cmp	r5, #0
 8009c3a:	bf18      	it	ne
 8009c3c:	4619      	movne	r1, r3
 8009c3e:	f7f6 fbcf 	bl	80003e0 <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 8009c42:	4905      	ldr	r1, [pc, #20]	; (8009c58 <_Z14__create_fibermmmi.part.2+0x54>)
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff fed1 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c50:	0800a20d 	.word	0x0800a20d
 8009c54:	0800a149 	.word	0x0800a149
 8009c58:	20002e28 	.word	0x20002e28

08009c5c <_ZN5codal14scheduler_initERNS_10EventModelE>:
  * This function must be called once only from the main thread, and before any other Fiber operation.
  *
  * @param _messageBus An event model, used to direct the priorities of the scheduler.
  */
void codal::scheduler_init(EventModel &_messageBus)
{
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8009c60:	4d43      	ldr	r5, [pc, #268]	; (8009d70 <_ZN5codal14scheduler_initERNS_10EventModelE+0x114>)
  * This function must be called once only from the main thread, and before any other Fiber operation.
  *
  * @param _messageBus An event model, used to direct the priorities of the scheduler.
  */
void codal::scheduler_init(EventModel &_messageBus)
{
 8009c62:	b082      	sub	sp, #8
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8009c64:	782a      	ldrb	r2, [r5, #0]
 8009c66:	f012 0401 	ands.w	r4, r2, #1
 8009c6a:	d16c      	bne.n	8009d46 <_ZN5codal14scheduler_initERNS_10EventModelE+0xea>
    if (fiber_scheduler_running())
        return;

        // Store a reference to the messageBus provided.
    // This parameter will be NULL if we're being run without a message bus.
    messageBus = &_messageBus;
 8009c6c:	4e41      	ldr	r6, [pc, #260]	; (8009d74 <_ZN5codal14scheduler_initERNS_10EventModelE+0x118>)
    // Add ourselves to the run queue.
    queue_fiber(currentFiber, &runQueue);

    // Create the IDLE fiber.
    // Configure the fiber to directly enter the idle task.
    idleFiber = getFiberContext();
 8009c6e:	4f42      	ldr	r7, [pc, #264]	; (8009d78 <_ZN5codal14scheduler_initERNS_10EventModelE+0x11c>)
    if (fiber_scheduler_running())
        return;

        // Store a reference to the messageBus provided.
    // This parameter will be NULL if we're being run without a message bus.
    messageBus = &_messageBus;
 8009c70:	6030      	str	r0, [r6, #0]

    // Create a new fiber context
    currentFiber = getFiberContext();
 8009c72:	f7ff ff85 	bl	8009b80 <_Z15getFiberContextv>
 8009c76:	4b41      	ldr	r3, [pc, #260]	; (8009d7c <_ZN5codal14scheduler_initERNS_10EventModelE+0x120>)

    // Add ourselves to the run queue.
    queue_fiber(currentFiber, &runQueue);
 8009c78:	4941      	ldr	r1, [pc, #260]	; (8009d80 <_ZN5codal14scheduler_initERNS_10EventModelE+0x124>)
        // Store a reference to the messageBus provided.
    // This parameter will be NULL if we're being run without a message bus.
    messageBus = &_messageBus;

    // Create a new fiber context
    currentFiber = getFiberContext();
 8009c7a:	6018      	str	r0, [r3, #0]

    // Add ourselves to the run queue.
    queue_fiber(currentFiber, &runQueue);
 8009c7c:	f7ff feb6 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Create the IDLE fiber.
    // Configure the fiber to directly enter the idle task.
    idleFiber = getFiberContext();
 8009c80:	f7ff ff7e 	bl	8009b80 <_Z15getFiberContextv>
 8009c84:	6038      	str	r0, [r7, #0]

    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8009c86:	f8d0 8000 	ldr.w	r8, [r0]
 8009c8a:	f7f6 fba1 	bl	80003d0 <fiber_initial_stack_base>
 8009c8e:	1f01      	subs	r1, r0, #4
 8009c90:	4640      	mov	r0, r8
 8009c92:	f7f6 fba7 	bl	80003e4 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	493a      	ldr	r1, [pc, #232]	; (8009d84 <_ZN5codal14scheduler_initERNS_10EventModelE+0x128>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	f7f6 fba0 	bl	80003e0 <tcb_configure_lr>

    if (messageBus)
 8009ca0:	6837      	ldr	r7, [r6, #0]
 8009ca2:	2f00      	cmp	r7, #0
 8009ca4:	d04b      	beq.n	8009d3e <_ZN5codal14scheduler_initERNS_10EventModelE+0xe2>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8009ca6:	2020      	movs	r0, #32
 8009ca8:	f7f9 fbb2 	bl	8003410 <_Znwj>
 8009cac:	23c0      	movs	r3, #192	; 0xc0
 8009cae:	4622      	mov	r2, r4
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009cb6:	4b34      	ldr	r3, [pc, #208]	; (8009d88 <_ZN5codal14scheduler_initERNS_10EventModelE+0x12c>)
 8009cb8:	4680      	mov	r8, r0
 8009cba:	f000 fbb5 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	4c32      	ldr	r4, [pc, #200]	; (8009d8c <_ZN5codal14scheduler_initERNS_10EventModelE+0x130>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d141      	bne.n	8009d4c <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
                return DEVICE_OK;

            delete newListener;
 8009cc8:	4640      	mov	r0, r8
 8009cca:	f000 fbc5 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7f9 fba0 	bl	8003414 <_ZdlPv>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8009cd4:	2020      	movs	r0, #32
    {
        // Register to receive events in the NOTIFY channel - this is used to implement wait-notify semantics
        messageBus->listen(DEVICE_ID_NOTIFY, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009cd6:	f8d6 8000 	ldr.w	r8, [r6]
 8009cda:	f7f9 fb99 	bl	8003410 <_Znwj>
 8009cde:	22c0      	movs	r2, #192	; 0xc0
 8009ce0:	4b29      	ldr	r3, [pc, #164]	; (8009d88 <_ZN5codal14scheduler_initERNS_10EventModelE+0x12c>)
 8009ce2:	9200      	str	r2, [sp, #0]
 8009ce4:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4607      	mov	r7, r0
 8009cec:	f000 fb9c 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	d134      	bne.n	8009d64 <_ZN5codal14scheduler_initERNS_10EventModelE+0x108>
                return DEVICE_OK;

            delete newListener;
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f000 fbac 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7f9 fb87 	bl	8003414 <_ZdlPv>

        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 8009d06:	2201      	movs	r2, #1
 8009d08:	210f      	movs	r1, #15
 8009d0a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8009d0e:	f000 fd03 	bl	800a718 <_ZN5codal27system_timer_event_every_usEmtt>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8009d12:	2020      	movs	r0, #32
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009d14:	6837      	ldr	r7, [r6, #0]
 8009d16:	f7f9 fb7b 	bl	8003410 <_Znwj>
 8009d1a:	22c0      	movs	r2, #192	; 0xc0
 8009d1c:	4b1c      	ldr	r3, [pc, #112]	; (8009d90 <_ZN5codal14scheduler_initERNS_10EventModelE+0x134>)
 8009d1e:	9200      	str	r2, [sp, #0]
 8009d20:	210f      	movs	r1, #15
 8009d22:	2201      	movs	r2, #1
 8009d24:	4606      	mov	r6, r0
 8009d26:	f000 fb7f 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	d112      	bne.n	8009d58 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>
                return DEVICE_OK;

            delete newListener;
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 fb90 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7f9 fb6b 	bl	8003414 <_ZdlPv>
    }

    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 8009d3e:	782b      	ldrb	r3, [r5, #0]
 8009d40:	f043 0301 	orr.w	r3, r3, #1
 8009d44:	702b      	strb	r3, [r5, #0]
}
 8009d46:	b002      	add	sp, #8
 8009d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);

            if(add(newListener) == DEVICE_OK)
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4798      	blx	r3
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d0be      	beq.n	8009cd4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x78>
 8009d56:	e7b7      	b.n	8009cc8 <_ZN5codal14scheduler_initERNS_10EventModelE+0x6c>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4798      	blx	r3
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d0ed      	beq.n	8009d3e <_ZN5codal14scheduler_initERNS_10EventModelE+0xe2>
 8009d62:	e7e6      	b.n	8009d32 <_ZN5codal14scheduler_initERNS_10EventModelE+0xd6>
 8009d64:	4640      	mov	r0, r8
 8009d66:	4639      	mov	r1, r7
 8009d68:	4798      	blx	r3
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0cb      	beq.n	8009d06 <_ZN5codal14scheduler_initERNS_10EventModelE+0xaa>
 8009d6e:	e7c4      	b.n	8009cfa <_ZN5codal14scheduler_initERNS_10EventModelE+0x9e>
 8009d70:	20002e50 	.word	0x20002e50
 8009d74:	20002e1c 	.word	0x20002e1c
 8009d78:	20002e30 	.word	0x20002e30
 8009d7c:	20002e18 	.word	0x20002e18
 8009d80:	20002e28 	.word	0x20002e28
 8009d84:	0800a235 	.word	0x0800a235
 8009d88:	08009a9d 	.word	0x08009a9d
 8009d8c:	080095b9 	.word	0x080095b9
 8009d90:	08009a59 	.word	0x08009a59

08009d94 <_ZN5codal23fiber_scheduler_runningEv>:
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8009d94:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <_ZN5codal23fiber_scheduler_runningEv+0xc>)
 8009d96:	7818      	ldrb	r0, [r3, #0]
        return 1;

    return 0;
}
 8009d98:	f000 0001 	and.w	r0, r0, #1
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20002e50 	.word	0x20002e50

08009da4 <_ZN5codal19fiber_wake_on_eventEtt>:
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 8009da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (messageBus == NULL || !fiber_scheduler_running())
 8009da6:	4e1f      	ldr	r6, [pc, #124]	; (8009e24 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 8009da8:	b083      	sub	sp, #12
    if (messageBus == NULL || !fiber_scheduler_running())
 8009daa:	6833      	ldr	r3, [r6, #0]
 8009dac:	b11b      	cbz	r3, 8009db6 <_ZN5codal19fiber_wake_on_eventEtt+0x12>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8009dae:	4b1e      	ldr	r3, [pc, #120]	; (8009e28 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	07db      	lsls	r3, r3, #31
 8009db4:	d402      	bmi.n	8009dbc <_ZN5codal19fiber_wake_on_eventEtt+0x18>
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
    if (messageBus == NULL || !fiber_scheduler_running())
        return DEVICE_NOT_SUPPORTED;
 8009db6:	481d      	ldr	r0, [pc, #116]	; (8009e2c <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);

    return DEVICE_OK;
}
 8009db8:	b003      	add	sp, #12
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
    if (messageBus == NULL || !fiber_scheduler_running())
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f7ff ff06 	bl	8009bd0 <_ZL10handle_fobv>
 8009dc4:	4607      	mov	r7, r0

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 8009dc6:	ea44 4305 	orr.w	r3, r4, r5, lsl #16
 8009dca:	60c3      	str	r3, [r0, #12]

    // Remove ourselves from the run queue
    dequeue_fiber(f);
 8009dcc:	f7ff fe2a 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	4917      	ldr	r1, [pc, #92]	; (8009e30 <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 8009dd4:	f7ff fe0a 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 8009dd8:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d802      	bhi.n	8009de6 <_ZN5codal19fiber_wake_on_eventEtt+0x42>
                return DEVICE_OK;

            delete newListener;
 8009de0:	2000      	movs	r0, #0
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);

    return DEVICE_OK;
}
 8009de2:	b003      	add	sp, #12
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8009de6:	2020      	movs	r0, #32
    queue_fiber(f, &waitQueue);

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8009de8:	6837      	ldr	r7, [r6, #0]
 8009dea:	f7f9 fb11 	bl	8003410 <_Znwj>
 8009dee:	23c0      	movs	r3, #192	; 0xc0
 8009df0:	462a      	mov	r2, r5
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4621      	mov	r1, r4
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <_ZN5codal19fiber_wake_on_eventEtt+0x90>)
 8009df8:	4606      	mov	r6, r0
 8009dfa:	f000 fb15 	bl	800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	4a0d      	ldr	r2, [pc, #52]	; (8009e38 <_ZN5codal19fiber_wake_on_eventEtt+0x94>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d107      	bne.n	8009e18 <_ZN5codal19fiber_wake_on_eventEtt+0x74>
                return DEVICE_OK;

            delete newListener;
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 fb25 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7f9 fb00 	bl	8003414 <_ZdlPv>
 8009e14:	2000      	movs	r0, #0
 8009e16:	e7e4      	b.n	8009de2 <_ZN5codal19fiber_wake_on_eventEtt+0x3e>
            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);

            if(add(newListener) == DEVICE_OK)
 8009e18:	4638      	mov	r0, r7
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4798      	blx	r3
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0de      	beq.n	8009de0 <_ZN5codal19fiber_wake_on_eventEtt+0x3c>
 8009e22:	e7f1      	b.n	8009e08 <_ZN5codal19fiber_wake_on_eventEtt+0x64>
 8009e24:	20002e1c 	.word	0x20002e1c
 8009e28:	20002e50 	.word	0x20002e50
 8009e2c:	fffffc16 	.word	0xfffffc16
 8009e30:	20002e34 	.word	0x20002e34
 8009e34:	08009a9d 	.word	0x08009a9d
 8009e38:	080095b9 	.word	0x080095b9

08009e3c <_ZN5codal12create_fiberEPFvPvES0_S2_>:
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x28>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	07db      	lsls	r3, r3, #31
 8009e42:	d401      	bmi.n	8009e48 <_ZN5codal12create_fiberEPFvPvES0_S2_+0xc>
{
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
}
 8009e44:	2000      	movs	r0, #0
 8009e46:	4770      	bx	lr
  *                      Defaults to release_fiber.
  *
  * @return The new Fiber, or NULL if the operation could not be completed.
  */
Fiber *codal::create_fiber(void (*entry_fn)(void *), void *param, void (*completion_fn)(void *))
{
 8009e48:	b410      	push	{r4}
 8009e4a:	4614      	mov	r4, r2


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 8009e4c:	b130      	cbz	r0, 8009e5c <_ZN5codal12create_fiberEPFvPvES0_S2_+0x20>
 8009e4e:	b12c      	cbz	r4, 8009e5c <_ZN5codal12create_fiberEPFvPvES0_S2_+0x20>
 8009e50:	460a      	mov	r2, r1
 8009e52:	2301      	movs	r3, #1
 8009e54:	4621      	mov	r1, r4
{
    if (!fiber_scheduler_running())
        return NULL;

    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
}
 8009e56:	bc10      	pop	{r4}
 8009e58:	f7ff bed4 	b.w	8009c04 <_Z14__create_fibermmmi.part.2>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	bc10      	pop	{r4}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20002e50 	.word	0x20002e50

08009e68 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 8009e6a:	6818      	ldr	r0, [r3, #0]
}
 8009e6c:	fab0 f080 	clz	r0, r0
 8009e70:	0940      	lsrs	r0, r0, #5
 8009e72:	4770      	bx	lr
 8009e74:	20002e28 	.word	0x20002e28

08009e78 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 8009e78:	b530      	push	{r4, r5, lr}
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 8009e7a:	4d0f      	ldr	r5, [pc, #60]	; (8009eb8 <_ZN5codal4idleEv+0x40>)
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 8009e7c:	b083      	sub	sp, #12
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 8009e7e:	782b      	ldrb	r3, [r5, #0]
 8009e80:	079a      	lsls	r2, r3, #30
 8009e82:	d504      	bpl.n	8009e8e <_ZN5codal4idleEv+0x16>
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8009e84:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <_ZN5codal4idleEv+0x44>)
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	b173      	cbz	r3, 8009ea8 <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 8009e8a:	b003      	add	sp, #12
 8009e8c:	bd30      	pop	{r4, r5, pc}
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
    {
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 8009e8e:	f043 0402 	orr.w	r4, r3, #2
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 8009e92:	2202      	movs	r2, #2
 8009e94:	2301      	movs	r3, #1
 8009e96:	210f      	movs	r1, #15
 8009e98:	4668      	mov	r0, sp
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
    {
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 8009e9a:	702c      	strb	r4, [r5, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 8009e9c:	f000 ff5a 	bl	800ad54 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8009ea0:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <_ZN5codal4idleEv+0x44>)
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f0      	bne.n	8009e8a <_ZN5codal4idleEv+0x12>
    {
        // unset our DEVICE_SCHEDULER_IDLE flag, we have processed all of the events
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 8009ea8:	782b      	ldrb	r3, [r5, #0]
 8009eaa:	f023 0302 	bic.w	r3, r3, #2
 8009eae:	702b      	strb	r3, [r5, #0]
        target_wait_for_event();
 8009eb0:	f7f6 fa2c 	bl	800030c <target_wait_for_event>
    }
}
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bd30      	pop	{r4, r5, pc}
 8009eb8:	20002e50 	.word	0x20002e50
 8009ebc:	20002e28 	.word	0x20002e28

08009ec0 <_ZN5codal8scheduleEv.part.6>:
/**
  * Calls the Fiber scheduler.
  * The calling Fiber will likely be blocked, and control given to another waiting fiber.
  * Call this function to yield control of the processor when you have nothing more to do.
  */
void codal::schedule()
 8009ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
    if (!fiber_scheduler_running())
        return;

    // First, take a reference to the currently running fiber;
    Fiber *oldFiber = currentFiber;
 8009ec4:	4d59      	ldr	r5, [pc, #356]	; (800a02c <_ZN5codal8scheduleEv.part.6+0x16c>)
 8009ec6:	682c      	ldr	r4, [r5, #0]

    // First, see if we're in Fork on Block context. If so, we simply want to store the full context
    // of the currently running thread in a newly created fiber, and restore the context of the
    // currently running fiber, back to the point where it entered FOB.

    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	07d1      	lsls	r1, r2, #31
 8009ecc:	d42f      	bmi.n	8009f2e <_ZN5codal8scheduleEv.part.6+0x6e>
        return;
    }

    // We're in a normal scheduling context, so perform a round robin algorithm across runnable fibers.
    // OK - if we've nothing to do, then run the IDLE task (power saving sleep)
    if (runQueue == NULL)
 8009ece:	4e58      	ldr	r6, [pc, #352]	; (800a030 <_ZN5codal8scheduleEv.part.6+0x170>)
 8009ed0:	4f58      	ldr	r7, [pc, #352]	; (800a034 <_ZN5codal8scheduleEv.part.6+0x174>)
 8009ed2:	6833      	ldr	r3, [r6, #0]
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d06b      	beq.n	8009fb2 <_ZN5codal8scheduleEv.part.6+0xf2>
        currentFiber = idleFiber;

    else if (currentFiber->queue == &runQueue)
 8009eda:	6960      	ldr	r0, [r4, #20]
 8009edc:	42b0      	cmp	r0, r6
 8009ede:	d078      	beq.n	8009fd2 <_ZN5codal8scheduleEv.part.6+0x112>
        // If the current fiber is on the run queue, round robin.
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;

    else
        // Otherwise, just pick the head of the run queue.
        currentFiber = runQueue;
 8009ee0:	602b      	str	r3, [r5, #0]

    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	d066      	beq.n	8009fb4 <_ZN5codal8scheduleEv.part.6+0xf4>
        currentFiber = runQueue;
    }

    // Swap to the context of the chosen fiber, and we're done.
    // Don't bother with the overhead of switching if there's only one fiber on the runqueue!
    if (currentFiber != oldFiber)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d058      	beq.n	8009f9c <_ZN5codal8scheduleEv.part.6+0xdc>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
        }

        // If we're returning for IDLE or our last fiber has been destroyed, we don't need to waste time
        // saving the processor context - Just swap in the new fiber, and discard changes to stack and register context.
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 8009eea:	428c      	cmp	r4, r1
 8009eec:	d058      	beq.n	8009fa0 <_ZN5codal8scheduleEv.part.6+0xe0>
 8009eee:	4b52      	ldr	r3, [pc, #328]	; (800a038 <_ZN5codal8scheduleEv.part.6+0x178>)
 8009ef0:	6962      	ldr	r2, [r4, #20]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d054      	beq.n	8009fa0 <_ZN5codal8scheduleEv.part.6+0xe0>
    // Ensure the stack buffer is large enough to hold the stack Reallocate if necessary.
    PROCESSOR_WORD_TYPE stackDepth;
    PROCESSOR_WORD_TYPE bufferSize;

    // Calculate the stack depth.
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	f7f6 fa78 	bl	80003ec <tcb_get_stack_base>
 8009efc:	4606      	mov	r6, r0
 8009efe:	f7f6 fa77 	bl	80003f0 <get_current_sp>

    // Calculate the size of our allocated stack buffer
    bufferSize = f->stack_top - f->stack_bottom;
 8009f02:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    // Ensure the stack buffer is large enough to hold the stack Reallocate if necessary.
    PROCESSOR_WORD_TYPE stackDepth;
    PROCESSOR_WORD_TYPE bufferSize;

    // Calculate the stack depth.
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8009f06:	1a30      	subs	r0, r6, r0

    // Calculate the size of our allocated stack buffer
    bufferSize = f->stack_top - f->stack_bottom;
 8009f08:	1aca      	subs	r2, r1, r3

    // If we're too small, increase our buffer size.
    if (bufferSize < stackDepth)
 8009f0a:	4290      	cmp	r0, r2
 8009f0c:	d968      	bls.n	8009fe0 <_ZN5codal8scheduleEv.part.6+0x120>
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
        currentFiber = f;

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8009f0e:	f100 0120 	add.w	r1, r0, #32
    if (bufferSize < stackDepth)
    {
        // We are only here, when the current stack is the stack of fiber [f].
        // Make sure the contents of [currentFiber] variable reflects that, otherwise
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
 8009f12:	682f      	ldr	r7, [r5, #0]
        currentFiber = f;

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8009f14:	f021 061f 	bic.w	r6, r1, #31
    {
        // We are only here, when the current stack is the stack of fiber [f].
        // Make sure the contents of [currentFiber] variable reflects that, otherwise
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
        currentFiber = f;
 8009f18:	602c      	str	r4, [r5, #0]

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;

        // Release the old memory
        if (f->stack_bottom != 0)
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d17e      	bne.n	800a01c <_ZN5codal8scheduleEv.part.6+0x15c>
            free((void *)f->stack_bottom);

        // Allocate a new one of the appropriate size.
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7fe fa08 	bl	8008334 <malloc>

        // Recalculate where the top of the stack is and we're done.
        f->stack_top = f->stack_bottom + bufferSize;
 8009f24:	1831      	adds	r1, r6, r0
        // Release the old memory
        if (f->stack_bottom != 0)
            free((void *)f->stack_bottom);

        // Allocate a new one of the appropriate size.
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8009f26:	e9c4 0101 	strd	r0, r1, [r4, #4]

        // Recalculate where the top of the stack is and we're done.
        f->stack_top = f->stack_bottom + bufferSize;

        currentFiber = prevCurrFiber;
 8009f2a:	602f      	str	r7, [r5, #0]
 8009f2c:	e059      	b.n	8009fe2 <_ZN5codal8scheduleEv.part.6+0x122>

    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
    {
        // Record that the fibers have a parent/child relationship
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8009f2e:	4e43      	ldr	r6, [pc, #268]	; (800a03c <_ZN5codal8scheduleEv.part.6+0x17c>)
    // currently running fiber, back to the point where it entered FOB.

    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
    {
        // Record that the fibers have a parent/child relationship
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 8009f30:	f042 0202 	orr.w	r2, r2, #2
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8009f34:	6833      	ldr	r3, [r6, #0]
    // currently running fiber, back to the point where it entered FOB.

    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
    {
        // Record that the fibers have a parent/child relationship
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 8009f36:	6122      	str	r2, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8009f38:	691a      	ldr	r2, [r3, #16]

        // Define the stack base of the forked fiber to be align with the entry point of the parent fiber
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8009f3a:	6820      	ldr	r0, [r4, #0]

    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
    {
        // Record that the fibers have a parent/child relationship
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8009f3c:	f042 0204 	orr.w	r2, r2, #4
 8009f40:	611a      	str	r2, [r3, #16]

        // Define the stack base of the forked fiber to be align with the entry point of the parent fiber
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8009f42:	681c      	ldr	r4, [r3, #0]
 8009f44:	f7f6 fa56 	bl	80003f4 <tcb_get_sp>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7f6 fa4c 	bl	80003e8 <tcb_configure_stack_base>

        // Ensure the stack allocation of the new fiber is large enough
        verify_stack_size(forkedFiber);
 8009f50:	6837      	ldr	r7, [r6, #0]
    // Ensure the stack buffer is large enough to hold the stack Reallocate if necessary.
    PROCESSOR_WORD_TYPE stackDepth;
    PROCESSOR_WORD_TYPE bufferSize;

    // Calculate the stack depth.
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8009f52:	6838      	ldr	r0, [r7, #0]
 8009f54:	f7f6 fa4a 	bl	80003ec <tcb_get_stack_base>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	f7f6 fa49 	bl	80003f0 <get_current_sp>

    // Calculate the size of our allocated stack buffer
    bufferSize = f->stack_top - f->stack_bottom;
 8009f5e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    // Ensure the stack buffer is large enough to hold the stack Reallocate if necessary.
    PROCESSOR_WORD_TYPE stackDepth;
    PROCESSOR_WORD_TYPE bufferSize;

    // Calculate the stack depth.
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8009f62:	1a20      	subs	r0, r4, r0

    // Calculate the size of our allocated stack buffer
    bufferSize = f->stack_top - f->stack_bottom;
 8009f64:	1a9b      	subs	r3, r3, r2

    // If we're too small, increase our buffer size.
    if (bufferSize < stackDepth)
 8009f66:	4298      	cmp	r0, r3
 8009f68:	d90f      	bls.n	8009f8a <_ZN5codal8scheduleEv.part.6+0xca>
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
        currentFiber = f;

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8009f6a:	3020      	adds	r0, #32
    if (bufferSize < stackDepth)
    {
        // We are only here, when the current stack is the stack of fiber [f].
        // Make sure the contents of [currentFiber] variable reflects that, otherwise
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
 8009f6c:	f8d5 8000 	ldr.w	r8, [r5]
        currentFiber = f;

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8009f70:	f020 041f 	bic.w	r4, r0, #31
    {
        // We are only here, when the current stack is the stack of fiber [f].
        // Make sure the contents of [currentFiber] variable reflects that, otherwise
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
        currentFiber = f;
 8009f74:	602f      	str	r7, [r5, #0]

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;

        // Release the old memory
        if (f->stack_bottom != 0)
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d154      	bne.n	800a024 <_ZN5codal8scheduleEv.part.6+0x164>
            free((void *)f->stack_bottom);

        // Allocate a new one of the appropriate size.
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7fe f9da 	bl	8008334 <malloc>

        // Recalculate where the top of the stack is and we're done.
        f->stack_top = f->stack_bottom + bufferSize;
 8009f80:	4404      	add	r4, r0
        // Release the old memory
        if (f->stack_bottom != 0)
            free((void *)f->stack_bottom);

        // Allocate a new one of the appropriate size.
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8009f82:	e9c7 0401 	strd	r0, r4, [r7, #4]

        // Recalculate where the top of the stack is and we're done.
        f->stack_top = f->stack_bottom + bufferSize;

        currentFiber = prevCurrFiber;
 8009f86:	f8c5 8000 	str.w	r8, [r5]

        // Ensure the stack allocation of the new fiber is large enough
        verify_stack_size(forkedFiber);

        // Store the full context of this fiber.
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 8009f8a:	6833      	ldr	r3, [r6, #0]
 8009f8c:	6899      	ldr	r1, [r3, #8]
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	f7f6 fab3 	bl	80004fa <save_context>

        // We may now be either the newly created thread, or the one that created it.
        // if the DEVICE_FIBER_FLAG_PARENT flag is still set, we're the old thread, so
        // restore the current fiber to its stored context and we're done.
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	0792      	lsls	r2, r2, #30
 8009f9a:	d43a      	bmi.n	800a012 <_ZN5codal8scheduleEv.part.6+0x152>

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
        }
    }
}
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        // If we're returning for IDLE or our last fiber has been destroyed, we don't need to waste time
        // saving the processor context - Just swap in the new fiber, and discard changes to stack and register context.
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
        {
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	682a      	ldr	r2, [r5, #0]
 8009fa4:	4608      	mov	r0, r1

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
        }
    }
}
 8009fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

        // If we're returning for IDLE or our last fiber has been destroyed, we don't need to waste time
        // saving the processor context - Just swap in the new fiber, and discard changes to stack and register context.
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
        {
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8009faa:	6893      	ldr	r3, [r2, #8]
 8009fac:	6812      	ldr	r2, [r2, #0]
 8009fae:	f7f6 ba63 	b.w	8000478 <swap_context>
    }

    // We're in a normal scheduling context, so perform a round robin algorithm across runnable fibers.
    // OK - if we've nothing to do, then run the IDLE task (power saving sleep)
    if (runQueue == NULL)
        currentFiber = idleFiber;
 8009fb2:	6029      	str	r1, [r5, #0]

    else
        // Otherwise, just pick the head of the run queue.
        currentFiber = runQueue;

    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 8009fb4:	0713      	lsls	r3, r2, #28
 8009fb6:	d51b      	bpl.n	8009ff0 <_ZN5codal8scheduleEv.part.6+0x130>
        // Run the idle task right here using the old fiber's stack.
        // Keep idling while the runqueue is empty, or there is data to process.

        // Run in the context of the original fiber, to preserve state of flags...
        // as we are running on top of this fiber's stack.
        currentFiber = oldFiber;
 8009fb8:	602c      	str	r4, [r5, #0]

        do
        {
            idle();
 8009fba:	f7ff ff5d 	bl	8009e78 <_ZN5codal4idleEv>
        }
        while (runQueue == NULL);
 8009fbe:	6833      	ldr	r3, [r6, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0fa      	beq.n	8009fba <_ZN5codal8scheduleEv.part.6+0xfa>
        currentFiber = runQueue;
    }

    // Swap to the context of the chosen fiber, and we're done.
    // Don't bother with the overhead of switching if there's only one fiber on the runqueue!
    if (currentFiber != oldFiber)
 8009fc4:	429c      	cmp	r4, r3
        }
        while (runQueue == NULL);

        // Switch to a non-idle fiber.
        // If this fiber is the same as the old one then there'll be no switching at all.
        currentFiber = runQueue;
 8009fc6:	602b      	str	r3, [r5, #0]
    }

    // Swap to the context of the chosen fiber, and we're done.
    // Don't bother with the overhead of switching if there's only one fiber on the runqueue!
    if (currentFiber != oldFiber)
 8009fc8:	d0e8      	beq.n	8009f9c <_ZN5codal8scheduleEv.part.6+0xdc>
    {

        // Special case for the idle task, as we don't maintain a stack context (just to save memory).
        if (currentFiber == idleFiber)
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	428b      	cmp	r3, r1
 8009fce:	d18c      	bne.n	8009eea <_ZN5codal8scheduleEv.part.6+0x2a>
 8009fd0:	e011      	b.n	8009ff6 <_ZN5codal8scheduleEv.part.6+0x136>
    if (runQueue == NULL)
        currentFiber = idleFiber;

    else if (currentFiber->queue == &runQueue)
        // If the current fiber is on the run queue, round robin.
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 8009fd2:	69a0      	ldr	r0, [r4, #24]
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	bf08      	it	eq
 8009fd8:	4618      	moveq	r0, r3
 8009fda:	6028      	str	r0, [r5, #0]
 8009fdc:	4603      	mov	r3, r0
 8009fde:	e780      	b.n	8009ee2 <_ZN5codal8scheduleEv.part.6+0x22>
 8009fe0:	682f      	ldr	r7, [r5, #0]
        {
            // Ensure the stack allocation of the fiber being scheduled out is large enough
            verify_stack_size(oldFiber);

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	683a      	ldr	r2, [r7, #0]
        }
    }
}
 8009fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        {
            // Ensure the stack allocation of the fiber being scheduled out is large enough
            verify_stack_size(oldFiber);

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 8009fec:	f7f6 ba44 	b.w	8000478 <swap_context>
        currentFiber = runQueue;
    }

    // Swap to the context of the chosen fiber, and we're done.
    // Don't bother with the overhead of switching if there's only one fiber on the runqueue!
    if (currentFiber != oldFiber)
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d0d2      	beq.n	8009f9c <_ZN5codal8scheduleEv.part.6+0xdc>
    {

        // Special case for the idle task, as we don't maintain a stack context (just to save memory).
        if (currentFiber == idleFiber)
        {
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8009ff6:	680e      	ldr	r6, [r1, #0]
 8009ff8:	f7f6 f9ea 	bl	80003d0 <fiber_initial_stack_base>
 8009ffc:	1f01      	subs	r1, r0, #4
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7f6 f9f0 	bl	80003e4 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	490e      	ldr	r1, [pc, #56]	; (800a040 <_ZN5codal8scheduleEv.part.6+0x180>)
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	f7f6 f9e9 	bl	80003e0 <tcb_configure_lr>
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	e76b      	b.n	8009eea <_ZN5codal8scheduleEv.part.6+0x2a>

        // We may now be either the newly created thread, or the one that created it.
        // if the DEVICE_FIBER_FLAG_PARENT flag is still set, we're the old thread, so
        // restore the current fiber to its stored context and we're done.
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
            restore_register_context(currentFiber->tcb);
 800a012:	6818      	ldr	r0, [r3, #0]

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
        }
    }
}
 800a014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

        // We may now be either the newly created thread, or the one that created it.
        // if the DEVICE_FIBER_FLAG_PARENT flag is still set, we're the old thread, so
        // restore the current fiber to its stored context and we're done.
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
            restore_register_context(currentFiber->tcb);
 800a018:	f7f6 baa9 	b.w	800056e <restore_register_context>
        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;

        // Release the old memory
        if (f->stack_bottom != 0)
            free((void *)f->stack_bottom);
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe f8ab 	bl	8008178 <free>
 800a022:	e77c      	b.n	8009f1e <_ZN5codal8scheduleEv.part.6+0x5e>
 800a024:	4610      	mov	r0, r2
 800a026:	f7fe f8a7 	bl	8008178 <free>
 800a02a:	e7a6      	b.n	8009f7a <_ZN5codal8scheduleEv.part.6+0xba>
 800a02c:	20002e18 	.word	0x20002e18
 800a030:	20002e28 	.word	0x20002e28
 800a034:	20002e30 	.word	0x20002e30
 800a038:	20002e2c 	.word	0x20002e2c
 800a03c:	20002e24 	.word	0x20002e24
 800a040:	0800a235 	.word	0x0800a235

0800a044 <_ZN5codal8scheduleEv>:
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a044:	4b03      	ldr	r3, [pc, #12]	; (800a054 <_ZN5codal8scheduleEv+0x10>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d400      	bmi.n	800a04e <_ZN5codal8scheduleEv+0xa>

            // Schedule in the new fiber.
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
        }
    }
}
 800a04c:	4770      	bx	lr
 800a04e:	f7ff bf37 	b.w	8009ec0 <_ZN5codal8scheduleEv.part.6>
 800a052:	bf00      	nop
 800a054:	20002e50 	.word	0x20002e50

0800a058 <_ZN5codal11fiber_sleepEm>:
  *
  * @note the fiber will not be be made runnable until after the elapsed time, but there
  * are no guarantees precisely when the fiber will next be scheduled.
  */
void codal::fiber_sleep(unsigned long t)
{
 800a058:	b570      	push	{r4, r5, r6, lr}
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a05a:	4d0f      	ldr	r5, [pc, #60]	; (800a098 <_ZN5codal11fiber_sleepEm+0x40>)
 800a05c:	782a      	ldrb	r2, [r5, #0]
 800a05e:	07d2      	lsls	r2, r2, #31
 800a060:	d403      	bmi.n	800a06a <_ZN5codal11fiber_sleepEm+0x12>
    // Add fiber to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &sleepQueue);

    // Finally, enter the scheduler.
    schedule();
}
 800a062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void codal::fiber_sleep(unsigned long t)
{
    // If the scheduler is not running, then simply perform a spin wait and exit.
    if (!fiber_scheduler_running())
    {
        target_wait(t);
 800a066:	f7f6 b961 	b.w	800032c <target_wait>
        return;
    }

    Fiber *f = handle_fob();
 800a06a:	4604      	mov	r4, r0
 800a06c:	f7ff fdb0 	bl	8009bd0 <_ZL10handle_fobv>
 800a070:	4606      	mov	r6, r0

    // Calculate and store the time we want to wake up.
    f->context = system_timer_current_time() + t;
 800a072:	f000 fb35 	bl	800a6e0 <_ZN5codal25system_timer_current_timeEv>
 800a076:	4420      	add	r0, r4
 800a078:	60f0      	str	r0, [r6, #12]

    // Remove fiber from the run queue
    dequeue_fiber(f);
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff fcd2 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add fiber to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &sleepQueue);
 800a080:	4630      	mov	r0, r6
 800a082:	4906      	ldr	r1, [pc, #24]	; (800a09c <_ZN5codal11fiber_sleepEm+0x44>)
 800a084:	f7ff fcb2 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a088:	782b      	ldrb	r3, [r5, #0]
 800a08a:	07db      	lsls	r3, r3, #31
 800a08c:	d400      	bmi.n	800a090 <_ZN5codal11fiber_sleepEm+0x38>
    // Add fiber to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &sleepQueue);

    // Finally, enter the scheduler.
    schedule();
}
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a094:	f7ff bf14 	b.w	8009ec0 <_ZN5codal8scheduleEv.part.6>
 800a098:	20002e50 	.word	0x20002e50
 800a09c:	20002e20 	.word	0x20002e20

0800a0a0 <_ZN5codal20fiber_wait_for_eventEtt>:
  *
  * @note the fiber will not be be made runnable until after the event is raised, but there
  * are no guarantees precisely when the fiber will next be scheduled.
  */
int codal::fiber_wait_for_event(uint16_t id, uint16_t value)
{
 800a0a0:	b500      	push	{lr}
 800a0a2:	b083      	sub	sp, #12
    int ret = fiber_wake_on_event(id, value);
 800a0a4:	f7ff fe7e 	bl	8009da4 <_ZN5codal19fiber_wake_on_eventEtt>

    if(ret == DEVICE_OK)
 800a0a8:	b918      	cbnz	r0, 800a0b2 <_ZN5codal20fiber_wait_for_eventEtt+0x12>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a0aa:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <_ZN5codal20fiber_wait_for_eventEtt+0x28>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	07db      	lsls	r3, r3, #31
 800a0b0:	d402      	bmi.n	800a0b8 <_ZN5codal20fiber_wait_for_eventEtt+0x18>

    if(ret == DEVICE_OK)
        schedule();

    return ret;
}
 800a0b2:	b003      	add	sp, #12
 800a0b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0b8:	9001      	str	r0, [sp, #4]
 800a0ba:	f7ff ff01 	bl	8009ec0 <_ZN5codal8scheduleEv.part.6>
 800a0be:	9801      	ldr	r0, [sp, #4]
 800a0c0:	b003      	add	sp, #12
 800a0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0c6:	bf00      	nop
 800a0c8:	20002e50 	.word	0x20002e50

0800a0cc <_ZN5codal13release_fiberEv>:
  * Exit point for all fibers.
  *
  * Any fiber reaching the end of its entry function will return here  for recycling.
  */
void codal::release_fiber(void)
{
 800a0cc:	b570      	push	{r4, r5, r6, lr}
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a0ce:	4d1b      	ldr	r5, [pc, #108]	; (800a13c <_ZN5codal13release_fiberEv+0x70>)
 800a0d0:	782b      	ldrb	r3, [r5, #0]
 800a0d2:	07da      	lsls	r2, r3, #31
 800a0d4:	d400      	bmi.n	800a0d8 <_ZN5codal13release_fiberEv+0xc>
    currentFiber->flags = 0;
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());

    // Find something else to do!
    schedule();
}
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
{
    if (!fiber_scheduler_running())
        return;

    // Remove ourselves form the runqueue.
    dequeue_fiber(currentFiber);
 800a0d8:	4e19      	ldr	r6, [pc, #100]	; (800a140 <_ZN5codal13release_fiberEv+0x74>)

    // Add ourselves to the list of free fibers
    queue_fiber(currentFiber, &fiberPool);
 800a0da:	4c1a      	ldr	r4, [pc, #104]	; (800a144 <_ZN5codal13release_fiberEv+0x78>)
{
    if (!fiber_scheduler_running())
        return;

    // Remove ourselves form the runqueue.
    dequeue_fiber(currentFiber);
 800a0dc:	6830      	ldr	r0, [r6, #0]
 800a0de:	f7ff fca1 	bl	8009a24 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the list of free fibers
    queue_fiber(currentFiber, &fiberPool);
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	6830      	ldr	r0, [r6, #0]
 800a0e6:	f7ff fc81 	bl	80099ec <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // limit the number of fibers in the pool
    int numFree = 0;
    for (Fiber *p = fiberPool; p; p = p->next) {
 800a0ea:	6824      	ldr	r4, [r4, #0]
 800a0ec:	b14c      	cbz	r4, 800a102 <_ZN5codal13release_fiberEv+0x36>
        if (!p->next && numFree > 3) {
 800a0ee:	69a3      	ldr	r3, [r4, #24]

    // Add ourselves to the list of free fibers
    queue_fiber(currentFiber, &fiberPool);

    // limit the number of fibers in the pool
    int numFree = 0;
 800a0f0:	2200      	movs	r2, #0
    for (Fiber *p = fiberPool; p; p = p->next) {
        if (!p->next && numFree > 3) {
 800a0f2:	b123      	cbz	r3, 800a0fe <_ZN5codal13release_fiberEv+0x32>
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	69a3      	ldr	r3, [r4, #24]
            free((void *)p->stack_bottom);
            memset(p, 0, sizeof(*p));
            free(p);
            break;
        }
        numFree++;
 800a0f8:	3201      	adds	r2, #1
    queue_fiber(currentFiber, &fiberPool);

    // limit the number of fibers in the pool
    int numFree = 0;
    for (Fiber *p = fiberPool; p; p = p->next) {
        if (!p->next && numFree > 3) {
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1fa      	bne.n	800a0f4 <_ZN5codal13release_fiberEv+0x28>
 800a0fe:	2a03      	cmp	r2, #3
 800a100:	dc10      	bgt.n	800a124 <_ZN5codal13release_fiberEv+0x58>
        }
        numFree++;
    }

    // Reset fiber state, to ensure it can be safely reused.
    currentFiber->flags = 0;
 800a102:	2200      	movs	r2, #0
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800a108:	681c      	ldr	r4, [r3, #0]
 800a10a:	f7f6 f961 	bl	80003d0 <fiber_initial_stack_base>
 800a10e:	4601      	mov	r1, r0
 800a110:	4620      	mov	r0, r4
 800a112:	f7f6 f969 	bl	80003e8 <tcb_configure_stack_base>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a116:	782b      	ldrb	r3, [r5, #0]
 800a118:	07db      	lsls	r3, r3, #31
 800a11a:	d5dc      	bpl.n	800a0d6 <_ZN5codal13release_fiberEv+0xa>
    currentFiber->flags = 0;
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());

    // Find something else to do!
    schedule();
}
 800a11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a120:	f7ff bece 	b.w	8009ec0 <_ZN5codal8scheduleEv.part.6>

    // limit the number of fibers in the pool
    int numFree = 0;
    for (Fiber *p = fiberPool; p; p = p->next) {
        if (!p->next && numFree > 3) {
            p->prev->next = NULL;
 800a124:	69e2      	ldr	r2, [r4, #28]
            free(p->tcb);
 800a126:	6820      	ldr	r0, [r4, #0]

    // limit the number of fibers in the pool
    int numFree = 0;
    for (Fiber *p = fiberPool; p; p = p->next) {
        if (!p->next && numFree > 3) {
            p->prev->next = NULL;
 800a128:	6193      	str	r3, [r2, #24]
            free(p->tcb);
 800a12a:	f7fe f825 	bl	8008178 <free>
            free((void *)p->stack_bottom);
 800a12e:	6860      	ldr	r0, [r4, #4]
 800a130:	f7fe f822 	bl	8008178 <free>
            memset(p, 0, sizeof(*p));
            free(p);
 800a134:	4620      	mov	r0, r4
 800a136:	f7fe f81f 	bl	8008178 <free>
            break;
 800a13a:	e7e2      	b.n	800a102 <_ZN5codal13release_fiberEv+0x36>
 800a13c:	20002e50 	.word	0x20002e50
 800a140:	20002e18 	.word	0x20002e18
 800a144:	20002e2c 	.word	0x20002e2c

0800a148 <_ZN5codal16launch_new_fiberEPFvvES1_>:
 * @param ep the entry point for the fiber.
 *
 * @param cp the completion routine after ep has finished execution
 */
void codal::launch_new_fiber(void (*ep)(void), void (*cp)(void))
{
 800a148:	b510      	push	{r4, lr}
 800a14a:	460c      	mov	r4, r1
    // Execute the thread's entrypoint
    ep();
 800a14c:	4780      	blx	r0

    // Execute the thread's completion routine;
    cp();
 800a14e:	47a0      	blx	r4

    // If we get here, then the completion routine didn't recycle the fiber... so do it anyway. :-)
    release_fiber();
}
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Execute the thread's completion routine;
    cp();

    // If we get here, then the completion routine didn't recycle the fiber... so do it anyway. :-)
    release_fiber();
 800a154:	f7ff bfba 	b.w	800a0cc <_ZN5codal13release_fiberEv>

0800a158 <_ZN5codal13release_fiberEPv>:
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a158:	4b03      	ldr	r3, [pc, #12]	; (800a168 <_ZN5codal13release_fiberEPv+0x10>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	07db      	lsls	r3, r3, #31
 800a15e:	d400      	bmi.n	800a162 <_ZN5codal13release_fiberEPv+0xa>
{
    if (!fiber_scheduler_running())
        return;

    release_fiber();
}
 800a160:	4770      	bx	lr
void codal::release_fiber(void *)
{
    if (!fiber_scheduler_running())
        return;

    release_fiber();
 800a162:	f7ff bfb3 	b.w	800a0cc <_ZN5codal13release_fiberEv>
 800a166:	bf00      	nop
 800a168:	20002e50 	.word	0x20002e50

0800a16c <_ZN5codal6invokeEPFvPvES0_>:
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::invoke(void (*entry_fn)(void *), void *param)
{
    // Validate our parameters.
    if (entry_fn == NULL)
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d042      	beq.n	800a1f6 <_ZN5codal6invokeEPFvPvES0_+0x8a>
  * @param param an untyped parameter passed into the entry_fn and completion_fn.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::invoke(void (*entry_fn)(void *), void *param)
{
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a174:	4e21      	ldr	r6, [pc, #132]	; (800a1fc <_ZN5codal6invokeEPFvPvES0_+0x90>)
 800a176:	7833      	ldrb	r3, [r6, #0]
 800a178:	07dc      	lsls	r4, r3, #31
 800a17a:	d402      	bmi.n	800a182 <_ZN5codal6invokeEPFvPvES0_+0x16>
    // Validate our parameters.
    if (entry_fn == NULL)
        return DEVICE_INVALID_PARAMETER;

    if (!fiber_scheduler_running())
        return DEVICE_NOT_SUPPORTED;
 800a17c:	4820      	ldr	r0, [pc, #128]	; (800a200 <_ZN5codal6invokeEPFvPvES0_+0x94>)
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
        release_fiber(param);

    return DEVICE_OK;
}
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return DEVICE_INVALID_PARAMETER;

    if (!fiber_scheduler_running())
        return DEVICE_NOT_SUPPORTED;

    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800a182:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a208 <_ZN5codal6invokeEPFvPvES0_+0x9c>
 800a186:	4605      	mov	r5, r0
 800a188:	f8d8 3000 	ldr.w	r3, [r8]
 800a18c:	460f      	mov	r7, r1
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	0752      	lsls	r2, r2, #29
 800a192:	d101      	bne.n	800a198 <_ZN5codal6invokeEPFvPvES0_+0x2c>
 800a194:	6a1c      	ldr	r4, [r3, #32]
 800a196:	b144      	cbz	r4, 800a1aa <_ZN5codal6invokeEPFvPvES0_+0x3e>


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 800a198:	463a      	mov	r2, r7
 800a19a:	4628      	mov	r0, r5
 800a19c:	2301      	movs	r3, #1
 800a19e:	4919      	ldr	r1, [pc, #100]	; (800a204 <_ZN5codal6invokeEPFvPvES0_+0x98>)
 800a1a0:	f7ff fd30 	bl	8009c04 <_Z14__create_fibermmmi.part.2>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
    {
        // If we attempt a fork on block whilst already in a fork on block context, or if the thread 
        // already has user data set, simply launch a fiber to deal with the request and we're done.
        create_fiber(entry_fn, param);
        return DEVICE_OK;
 800a1a4:	2000      	movs	r0, #0
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
        release_fiber(param);

    return DEVICE_OK;
}
 800a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return DEVICE_OK;
    }

    // Snapshot current context, but also update the Link Register to
    // refer to our calling function.
    save_register_context(currentFiber->tcb);
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	f7f6 f9c7 	bl	800053e <save_register_context>
    // If we're here, there are two possibilities:
    // 1) We're about to attempt to execute the user code
    // 2) We've already tried to execute the code, it blocked, and we've backtracked.

    // If we're returning from the user function and we forked another fiber then cleanup and exit.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 800a1b0:	f8d8 2000 	ldr.w	r2, [r8]
 800a1b4:	6913      	ldr	r3, [r2, #16]
 800a1b6:	f013 0902 	ands.w	r9, r3, #2
 800a1ba:	d117      	bne.n	800a1ec <_ZN5codal6invokeEPFvPvES0_+0x80>
    }

    // Otherwise, we're here for the first time. Enter FORK ON BLOCK mode, and
    // execute the function directly. If the code tries to block, we detect this and
    // spawn a thread to deal with it.
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800a1bc:	f043 0301 	orr.w	r3, r3, #1
 800a1c0:	6113      	str	r3, [r2, #16]
    entry_fn(param);
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47a8      	blx	r5
    #if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
    currentFiber->user_data = NULL;
 800a1c6:	f8d8 3000 	ldr.w	r3, [r8]
    #endif
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800a1ca:	6918      	ldr	r0, [r3, #16]
    // execute the function directly. If the code tries to block, we detect this and
    // spawn a thread to deal with it.
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
    entry_fn(param);
    #if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
    currentFiber->user_data = NULL;
 800a1cc:	f8c3 9020 	str.w	r9, [r3, #32]
    #endif
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800a1d0:	f020 0201 	bic.w	r2, r0, #1

    // If this is is an exiting fiber that for spawned to handle a blocking call, recycle it.
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800a1d4:	f010 0004 	ands.w	r0, r0, #4
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
    entry_fn(param);
    #if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
    currentFiber->user_data = NULL;
    #endif
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 800a1d8:	611a      	str	r2, [r3, #16]

    // If this is is an exiting fiber that for spawned to handle a blocking call, recycle it.
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 800a1da:	d0d0      	beq.n	800a17e <_ZN5codal6invokeEPFvPvES0_+0x12>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a1dc:	7830      	ldrb	r0, [r6, #0]
 800a1de:	f010 0001 	ands.w	r0, r0, #1
 800a1e2:	d0cc      	beq.n	800a17e <_ZN5codal6invokeEPFvPvES0_+0x12>
void codal::release_fiber(void *)
{
    if (!fiber_scheduler_running())
        return;

    release_fiber();
 800a1e4:	f7ff ff72 	bl	800a0cc <_ZN5codal13release_fiberEv>
    // If this is is an exiting fiber that for spawned to handle a blocking call, recycle it.
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
        release_fiber(param);

    return DEVICE_OK;
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	e7c8      	b.n	800a17e <_ZN5codal6invokeEPFvPvES0_+0x12>

    // If we're returning from the user function and we forked another fiber then cleanup and exit.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
    {
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 800a1ec:	f023 0303 	bic.w	r3, r3, #3
 800a1f0:	6113      	str	r3, [r2, #16]
        return DEVICE_OK;
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	e7c3      	b.n	800a17e <_ZN5codal6invokeEPFvPvES0_+0x12>
  */
int codal::invoke(void (*entry_fn)(void *), void *param)
{
    // Validate our parameters.
    if (entry_fn == NULL)
        return DEVICE_INVALID_PARAMETER;
 800a1f6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
    // The fiber will then re-enter the scheduler, so no need for further cleanup.
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
        release_fiber(param);

    return DEVICE_OK;
}
 800a1fa:	4770      	bx	lr
 800a1fc:	20002e50 	.word	0x20002e50
 800a200:	fffffc16 	.word	0xfffffc16
 800a204:	0800a159 	.word	0x0800a159
 800a208:	20002e18 	.word	0x20002e18

0800a20c <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
 * @param cp the completion routine after ep has finished execution
 *
 * @param pm the parameter to provide to ep and cp.
 */
void codal::launch_new_fiber_param(void (*ep)(void *), void (*cp)(void *), void *pm)
{
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4614      	mov	r4, r2
 800a210:	4603      	mov	r3, r0
    // Execute the thread's entrypoint.
    ep(pm);
 800a212:	4610      	mov	r0, r2
 * @param cp the completion routine after ep has finished execution
 *
 * @param pm the parameter to provide to ep and cp.
 */
void codal::launch_new_fiber_param(void (*ep)(void *), void (*cp)(void *), void *pm)
{
 800a214:	460d      	mov	r5, r1
    // Execute the thread's entrypoint.
    ep(pm);
 800a216:	4798      	blx	r3

    // Execute the thread's completion routine.
    cp(pm);
 800a218:	4620      	mov	r0, r4
 800a21a:	47a8      	blx	r5
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a21c:	4b04      	ldr	r3, [pc, #16]	; (800a230 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x24>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d400      	bmi.n	800a226 <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_+0x1a>
    // Execute the thread's completion routine.
    cp(pm);

    // If we get here, then the completion routine didn't recycle the fiber... so do it anyway. :-)
    release_fiber(pm);
}
 800a224:	bd38      	pop	{r3, r4, r5, pc}
 800a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void codal::release_fiber(void *)
{
    if (!fiber_scheduler_running())
        return;

    release_fiber();
 800a22a:	f7ff bf4f 	b.w	800a0cc <_ZN5codal13release_fiberEv>
 800a22e:	bf00      	nop
 800a230:	20002e50 	.word	0x20002e50

0800a234 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 800a234:	b508      	push	{r3, lr}
 800a236:	4c04      	ldr	r4, [pc, #16]	; (800a248 <_ZN5codal9idle_taskEv+0x14>)
    while(1)
    {
        idle();
 800a238:	f7ff fe1e 	bl	8009e78 <_ZN5codal4idleEv>
  *
  * @return 1 if the fber scheduler is running, 0 otherwise.
  */
int codal::fiber_scheduler_running()
{
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800a23c:	7823      	ldrb	r3, [r4, #0]
 800a23e:	07db      	lsls	r3, r3, #31
 800a240:	d5fa      	bpl.n	800a238 <_ZN5codal9idle_taskEv+0x4>
 800a242:	f7ff fe3d 	bl	8009ec0 <_ZN5codal8scheduleEv.part.6>
 800a246:	e7f7      	b.n	800a238 <_ZN5codal9idle_taskEv+0x4>
 800a248:	20002e50 	.word	0x20002e50

0800a24c <_Z18device_create_heapmm>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	4605      	mov	r5, r0
 800a250:	460e      	mov	r6, r1
 800a252:	4c0b      	ldr	r4, [pc, #44]	; (800a280 <_Z18device_create_heapmm+0x34>)
 800a254:	7827      	ldrb	r7, [r4, #0]
 800a256:	f7f6 f857 	bl	8000308 <target_disable_irq>
 800a25a:	4a0a      	ldr	r2, [pc, #40]	; (800a284 <_Z18device_create_heapmm+0x38>)
 800a25c:	1b73      	subs	r3, r6, r5
 800a25e:	089b      	lsrs	r3, r3, #2
 800a260:	f842 5037 	str.w	r5, [r2, r7, lsl #3]
 800a264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a268:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800a26c:	6056      	str	r6, [r2, #4]
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	7823      	ldrb	r3, [r4, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	7023      	strb	r3, [r4, #0]
 800a276:	f7f6 f845 	bl	8000304 <target_enable_irq>
 800a27a:	2000      	movs	r0, #0
 800a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a27e:	bf00      	nop
 800a280:	20002e52 	.word	0x20002e52
 800a284:	20002e38 	.word	0x20002e38

0800a288 <_Z16device_heap_sizeh>:
 800a288:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <_Z16device_heap_sizeh+0x1c>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4283      	cmp	r3, r0
 800a28e:	d907      	bls.n	800a2a0 <_Z16device_heap_sizeh+0x18>
 800a290:	4a05      	ldr	r2, [pc, #20]	; (800a2a8 <_Z16device_heap_sizeh+0x20>)
 800a292:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 800a29c:	1a18      	subs	r0, r3, r0
 800a29e:	4770      	bx	lr
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	4770      	bx	lr
 800a2a4:	20002e52 	.word	0x20002e52
 800a2a8:	20002e38 	.word	0x20002e38

0800a2ac <_Z16device_malloc_injR14HeapDefinition>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	0783      	lsls	r3, r0, #30
 800a2b0:	ea4f 0690 	mov.w	r6, r0, lsr #2
 800a2b4:	d101      	bne.n	800a2ba <_Z16device_malloc_injR14HeapDefinition+0xe>
 800a2b6:	b908      	cbnz	r0, 800a2bc <_Z16device_malloc_injR14HeapDefinition+0x10>
 800a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ba:	3601      	adds	r6, #1
 800a2bc:	460d      	mov	r5, r1
 800a2be:	1c77      	adds	r7, r6, #1
 800a2c0:	f7f6 f822 	bl	8000308 <target_disable_irq>
 800a2c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2c8:	42a5      	cmp	r5, r4
 800a2ca:	d906      	bls.n	800a2da <_Z16device_malloc_injR14HeapDefinition+0x2e>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	db07      	blt.n	800a2e2 <_Z16device_malloc_injR14HeapDefinition+0x36>
 800a2d2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a2d6:	42a5      	cmp	r5, r4
 800a2d8:	d8f8      	bhi.n	800a2cc <_Z16device_malloc_injR14HeapDefinition+0x20>
 800a2da:	f7f6 f813 	bl	8000304 <target_enable_irq>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e6:	e007      	b.n	800a2f8 <_Z16device_malloc_injR14HeapDefinition+0x4c>
 800a2e8:	4285      	cmp	r5, r0
 800a2ea:	d90c      	bls.n	800a306 <_Z16device_malloc_injR14HeapDefinition+0x5a>
 800a2ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800a2fc:	0099      	lsls	r1, r3, #2
 800a2fe:	2a00      	cmp	r2, #0
 800a300:	eb04 0001 	add.w	r0, r4, r1
 800a304:	dbf0      	blt.n	800a2e8 <_Z16device_malloc_injR14HeapDefinition+0x3c>
 800a306:	429f      	cmp	r7, r3
 800a308:	d901      	bls.n	800a30e <_Z16device_malloc_injR14HeapDefinition+0x62>
 800a30a:	440c      	add	r4, r1
 800a30c:	e7dc      	b.n	800a2c8 <_Z16device_malloc_injR14HeapDefinition+0x1c>
 800a30e:	3602      	adds	r6, #2
 800a310:	429e      	cmp	r6, r3
 800a312:	d307      	bcc.n	800a324 <_Z16device_malloc_injR14HeapDefinition+0x78>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	f7f5 fff2 	bl	8000304 <target_enable_irq>
 800a320:	1d20      	adds	r0, r4, #4
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a328:	42b5      	cmp	r5, r6
 800a32a:	d9f3      	bls.n	800a314 <_Z16device_malloc_injR14HeapDefinition+0x68>
 800a32c:	1bdb      	subs	r3, r3, r7
 800a32e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a332:	f846 3c04 	str.w	r3, [r6, #-4]
 800a336:	6027      	str	r7, [r4, #0]
 800a338:	e7f0      	b.n	800a31c <_Z16device_malloc_injR14HeapDefinition+0x70>
 800a33a:	bf00      	nop

0800a33c <device_malloc>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4604      	mov	r4, r0
 800a340:	b140      	cbz	r0, 800a354 <device_malloc+0x18>
 800a342:	4d10      	ldr	r5, [pc, #64]	; (800a384 <device_malloc+0x48>)
 800a344:	782b      	ldrb	r3, [r5, #0]
 800a346:	b13b      	cbz	r3, 800a358 <device_malloc+0x1c>
 800a348:	4620      	mov	r0, r4
 800a34a:	490f      	ldr	r1, [pc, #60]	; (800a388 <device_malloc+0x4c>)
 800a34c:	f7ff ffae 	bl	800a2ac <_Z16device_malloc_injR14HeapDefinition>
 800a350:	4604      	mov	r4, r0
 800a352:	b188      	cbz	r0, 800a378 <device_malloc+0x3c>
 800a354:	4620      	mov	r0, r4
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	490c      	ldr	r1, [pc, #48]	; (800a38c <device_malloc+0x50>)
 800a35a:	4a0d      	ldr	r2, [pc, #52]	; (800a390 <device_malloc+0x54>)
 800a35c:	6808      	ldr	r0, [r1, #0]
 800a35e:	490d      	ldr	r1, [pc, #52]	; (800a394 <device_malloc+0x58>)
 800a360:	7013      	strb	r3, [r2, #0]
 800a362:	f7ff ff73 	bl	800a24c <_Z18device_create_heapmm>
 800a366:	2301      	movs	r3, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	4907      	ldr	r1, [pc, #28]	; (800a388 <device_malloc+0x4c>)
 800a36c:	702b      	strb	r3, [r5, #0]
 800a36e:	f7ff ff9d 	bl	800a2ac <_Z16device_malloc_injR14HeapDefinition>
 800a372:	4604      	mov	r4, r0
 800a374:	2800      	cmp	r0, #0
 800a376:	d1ed      	bne.n	800a354 <device_malloc+0x18>
 800a378:	2014      	movs	r0, #20
 800a37a:	f7f6 f819 	bl	80003b0 <target_panic>
 800a37e:	4620      	mov	r0, r4
 800a380:	bd38      	pop	{r3, r4, r5, pc}
 800a382:	bf00      	nop
 800a384:	20002e51 	.word	0x20002e51
 800a388:	20002e38 	.word	0x20002e38
 800a38c:	20000000 	.word	0x20000000
 800a390:	20002e52 	.word	0x20002e52
 800a394:	20004800 	.word	0x20004800

0800a398 <device_free>:
 800a398:	b148      	cbz	r0, 800a3ae <device_free+0x16>
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <device_free+0x3c>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4282      	cmp	r2, r0
 800a3a0:	d202      	bcs.n	800a3a8 <device_free+0x10>
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4283      	cmp	r3, r0
 800a3a6:	d803      	bhi.n	800a3b0 <device_free+0x18>
 800a3a8:	201e      	movs	r0, #30
 800a3aa:	f7f6 b801 	b.w	80003b0 <target_panic>
 800a3ae:	4770      	bx	lr
 800a3b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	dd04      	ble.n	800a3c6 <device_free+0x2e>
 800a3bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	201e      	movs	r0, #30
 800a3c8:	f7f5 fff2 	bl	80003b0 <target_panic>
 800a3cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a3d0:	e7f4      	b.n	800a3bc <device_free+0x24>
 800a3d2:	bf00      	nop
 800a3d4:	20002e38 	.word	0x20002e38

0800a3d8 <calloc>:
    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
}

void* calloc (size_t num, size_t size)
{
 800a3d8:	b538      	push	{r3, r4, r5, lr}
    void *mem = malloc(num*size);
 800a3da:	fb01 f500 	mul.w	r5, r1, r0
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f7fd ffa8 	bl	8008334 <malloc>

    if (mem) {
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	b128      	cbz	r0, 800a3f4 <calloc+0x1c>
        // without this write, GCC will happily optimize malloc() above into calloc()
        // and remove the memset
        ((uint32_t*)mem)[0] = 1;
 800a3e8:	2301      	movs	r3, #1
        memset(mem, 0, num*size);
 800a3ea:	462a      	mov	r2, r5
    void *mem = malloc(num*size);

    if (mem) {
        // without this write, GCC will happily optimize malloc() above into calloc()
        // and remove the memset
        ((uint32_t*)mem)[0] = 1;
 800a3ec:	6003      	str	r3, [r0, #0]
        memset(mem, 0, num*size);
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	f7f8 fe66 	bl	80030c0 <memset>
    }

    return mem;
}
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}

0800a3f8 <device_realloc>:

extern "C" void* device_realloc (void* ptr, size_t size)
{
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4604      	mov	r4, r0
    void *mem = malloc(size);
 800a3fc:	4608      	mov	r0, r1

    return mem;
}

extern "C" void* device_realloc (void* ptr, size_t size)
{
 800a3fe:	460e      	mov	r6, r1
    void *mem = malloc(size);
 800a400:	f7fd ff98 	bl	8008334 <malloc>
 800a404:	4605      	mov	r5, r0

    // handle the simplest case - no previous memory allocted.
    if (ptr != NULL && mem != NULL)
 800a406:	b164      	cbz	r4, 800a422 <device_realloc+0x2a>
 800a408:	b158      	cbz	r0, 800a422 <device_realloc+0x2a>
    {

        // Otherwise we need to copy and free up the old data.
        PROCESSOR_WORD_TYPE *cb = ((PROCESSOR_WORD_TYPE *)ptr) - 1;
        PROCESSOR_WORD_TYPE blockSize = *cb & ~DEVICE_HEAP_BLOCK_FREE;
 800a40a:	f854 2c04 	ldr.w	r2, [r4, #-4]

        memcpy(mem, ptr, min(blockSize * sizeof(PROCESSOR_WORD_TYPE), size));
 800a40e:	4621      	mov	r1, r4
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	42b2      	cmp	r2, r6
 800a414:	bfa8      	it	ge
 800a416:	4632      	movge	r2, r6
 800a418:	f7f8 fe0a 	bl	8003030 <memcpy>
        free(ptr);
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7fd feab 	bl	8008178 <free>
    }

    return mem;
}
 800a422:	4628      	mov	r0, r5
 800a424:	bd70      	pop	{r4, r5, r6, pc}
 800a426:	bf00      	nop

0800a428 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 800a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	4604      	mov	r4, r0
 800a42e:	3010      	adds	r0, #16
 800a430:	4688      	mov	r8, r1
 800a432:	4617      	mov	r7, r2
 800a434:	461e      	mov	r6, r3
 800a436:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800a43a:	f000 fca5 	bl	800ad88 <_ZN5codal5EventC1Ev>
{
	this->id = id;
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 800a43e:	2000      	movs	r0, #0
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
{
	this->id = id;
 800a440:	f8a4 8000 	strh.w	r8, [r4]
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 800a444:	60e0      	str	r0, [r4, #12]
    this->flags = flags;
	this->next = NULL;
    this->evt_queue = NULL;
 800a446:	e9c4 0006 	strd	r0, r0, [r4, #24]
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
{
	this->id = id;
	this->value = value;
 800a44a:	8067      	strh	r7, [r4, #2]
	this->cb = handler;
 800a44c:	60a6      	str	r6, [r4, #8]
	this->cb_arg = NULL;
    this->flags = flags;
 800a44e:	80a5      	strh	r5, [r4, #4]
	this->next = NULL;
    this->evt_queue = NULL;
}
 800a450:	4620      	mov	r0, r4
 800a452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a456:	bf00      	nop

0800a458 <_ZN5codal8ListenerD1Ev>:
/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800a458:	8883      	ldrh	r3, [r0, #4]
}

/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
 800a45a:	b510      	push	{r4, lr}
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800a45c:	079b      	lsls	r3, r3, #30
}

/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
 800a45e:	4604      	mov	r4, r0
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 800a460:	d401      	bmi.n	800a466 <_ZN5codal8ListenerD1Ev+0xe>
        delete cb_method;
}
 800a462:	4620      	mov	r0, r4
 800a464:	bd10      	pop	{r4, pc}
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
        delete cb_method;
 800a466:	6880      	ldr	r0, [r0, #8]
 800a468:	f7f8 ffd4 	bl	8003414 <_ZdlPv>
}
 800a46c:	4620      	mov	r0, r4
 800a46e:	bd10      	pop	{r4, pc}

0800a470 <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	4604      	mov	r4, r0
    int queueDepth;

    EventQueueItem *p = evt_queue;
 800a476:	6983      	ldr	r3, [r0, #24]
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 800a478:	4668      	mov	r0, sp
 800a47a:	e880 0006 	stmia.w	r0, {r1, r2}
    int queueDepth;

    EventQueueItem *p = evt_queue;

    if (evt_queue == NULL)
 800a47e:	b1e3      	cbz	r3, 800a4ba <_ZN5codal8Listener5queueENS_5EventE+0x4a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800a480:	689c      	ldr	r4, [r3, #8]
 800a482:	b154      	cbz	r4, 800a49a <_ZN5codal8Listener5queueENS_5EventE+0x2a>

    if (evt_queue == NULL)
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;
 800a484:	2201      	movs	r2, #1
 800a486:	e000      	b.n	800a48a <_ZN5codal8Listener5queueENS_5EventE+0x1a>
 800a488:	461c      	mov	r4, r3

        while (p->next != NULL)
 800a48a:	68a3      	ldr	r3, [r4, #8]
        {
            p = p->next;
            queueDepth++;
 800a48c:	3201      	adds	r2, #1
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1fa      	bne.n	800a488 <_ZN5codal8Listener5queueENS_5EventE+0x18>
        {
            p = p->next;
            queueDepth++;
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800a492:	2a09      	cmp	r2, #9
 800a494:	dd02      	ble.n	800a49c <_ZN5codal8Listener5queueENS_5EventE+0x2c>
            p->next = new EventQueueItem(e);
    }
}
 800a496:	b004      	add	sp, #16
 800a498:	bd70      	pop	{r4, r5, r6, pc}
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;

        while (p->next != NULL)
 800a49a:	461c      	mov	r4, r3
            p = p->next;
            queueDepth++;
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
            p->next = new EventQueueItem(e);
 800a49c:	c803      	ldmia	r0, {r0, r1}
 800a49e:	ad02      	add	r5, sp, #8
 800a4a0:	e885 0003 	stmia.w	r5, {r0, r1}
 800a4a4:	200c      	movs	r0, #12
 800a4a6:	f7f8 ffb3 	bl	8003410 <_Znwj>
 800a4aa:	e895 0006 	ldmia.w	r5, {r1, r2}
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	f000 fc74 	bl	800ad9c <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800a4b4:	60a6      	str	r6, [r4, #8]
    }
}
 800a4b6:	b004      	add	sp, #16
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}
    int queueDepth;

    EventQueueItem *p = evt_queue;

    if (evt_queue == NULL)
        evt_queue = new EventQueueItem(e);
 800a4ba:	ad02      	add	r5, sp, #8
 800a4bc:	c803      	ldmia	r0, {r0, r1}
 800a4be:	e885 0005 	stmia.w	r5, {r0, r2}
 800a4c2:	200c      	movs	r0, #12
 800a4c4:	f7f8 ffa4 	bl	8003410 <_Znwj>
 800a4c8:	e895 0006 	ldmia.w	r5, {r1, r2}
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	f000 fc65 	bl	800ad9c <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800a4d2:	61a6      	str	r6, [r4, #24]
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
            p->next = new EventQueueItem(e);
    }
}
 800a4d4:	b004      	add	sp, #16
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}

0800a4d8 <_ZN5codal5Timer17disableInterruptsEv>:
 */
CODAL_TIMESTAMP Timer::getTimeUs()
{
    syncRequest();
    return currentTimeUs;
}
 800a4d8:	b508      	push	{r3, lr}
 800a4da:	f7f5 ff15 	bl	8000308 <target_disable_irq>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	bd08      	pop	{r3, pc}
 800a4e2:	bf00      	nop

0800a4e4 <_ZN5codal5Timer16enableInterruptsEv>:
 800a4e4:	b508      	push	{r3, lr}
 800a4e6:	f7f5 ff0d 	bl	8000304 <target_enable_irq>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	bd08      	pop	{r3, pc}
 800a4ee:	bf00      	nop

0800a4f0 <_ZN5codal5TimerC1Ev>:
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	4908      	ldr	r1, [pc, #32]	; (800a518 <_ZN5codal5TimerC1Ev+0x28>)
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <_ZN5codal5TimerC1Ev+0x2c>)
 800a4fa:	6001      	str	r1, [r0, #0]
 800a4fc:	6182      	str	r2, [r0, #24]
 800a4fe:	2101      	movs	r1, #1
 800a500:	2078      	movs	r0, #120	; 0x78
 800a502:	601c      	str	r4, [r3, #0]
 800a504:	f7ff ff68 	bl	800a3d8 <calloc>
 800a508:	2300      	movs	r3, #0
 800a50a:	e9c4 0304 	strd	r0, r3, [r4, #16]
 800a50e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a512:	4620      	mov	r0, r4
 800a514:	bd10      	pop	{r4, pc}
 800a516:	bf00      	nop
 800a518:	0800c3e0 	.word	0x0800c3e0
 800a51c:	20002e40 	.word	0x20002e40

0800a520 <_ZN5codal5Timer8setEventEmttb>:
    target_enable_irq();
    return DEVICE_OK;
}

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
Timer* codal::system_timer = NULL;

TimerEvent *Timer::getTimerEvent()
{
    // Find the first unused slot, and assign it.
    for (int i=0; i<eventListSize; i++)
 800a524:	f8d0 c018 	ldr.w	ip, [r0, #24]
    target_enable_irq();
    return DEVICE_OK;
}

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
 800a528:	f89d 8020 	ldrb.w	r8, [sp, #32]
Timer* codal::system_timer = NULL;

TimerEvent *Timer::getTimerEvent()
{
    // Find the first unused slot, and assign it.
    for (int i=0; i<eventListSize; i++)
 800a52c:	f1bc 0f00 	cmp.w	ip, #0
 800a530:	dd0d      	ble.n	800a54e <_ZN5codal5Timer8setEventEmttb+0x2e>
    {
        if (timerEventList[i].id == 0)
 800a532:	6906      	ldr	r6, [r0, #16]
 800a534:	8834      	ldrh	r4, [r6, #0]
 800a536:	b174      	cbz	r4, 800a556 <_ZN5codal5Timer8setEventEmttb+0x36>
 800a538:	4634      	mov	r4, r6
Timer* codal::system_timer = NULL;

TimerEvent *Timer::getTimerEvent()
{
    // Find the first unused slot, and assign it.
    for (int i=0; i<eventListSize; i++)
 800a53a:	2500      	movs	r5, #0
 800a53c:	e002      	b.n	800a544 <_ZN5codal5Timer8setEventEmttb+0x24>
    {
        if (timerEventList[i].id == 0)
 800a53e:	8827      	ldrh	r7, [r4, #0]
 800a540:	4626      	mov	r6, r4
 800a542:	b147      	cbz	r7, 800a556 <_ZN5codal5Timer8setEventEmttb+0x36>
Timer* codal::system_timer = NULL;

TimerEvent *Timer::getTimerEvent()
{
    // Find the first unused slot, and assign it.
    for (int i=0; i<eventListSize; i++)
 800a544:	3501      	adds	r5, #1
 800a546:	4565      	cmp	r5, ip
 800a548:	f104 040c 	add.w	r4, r4, #12
 800a54c:	d1f7      	bne.n	800a53e <_ZN5codal5Timer8setEventEmttb+0x1e>

int Timer::setEvent(CODAL_TIMESTAMP period, uint16_t id, uint16_t value, bool repeat)
{
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;
 800a54e:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
    }

    enableInterrupts();

    return DEVICE_OK;
}
 800a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a556:	460d      	mov	r5, r1
 800a558:	4604      	mov	r4, r0
 *
 * @return the timestamp in microseconds
 */
CODAL_TIMESTAMP Timer::getTimeUs()
{
    syncRequest();
 800a55a:	461f      	mov	r7, r3
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	4691      	mov	r9, r2
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4798      	blx	r3
{
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;

    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800a564:	f1b8 0f00 	cmp.w	r8, #0
 800a568:	bf14      	ite	ne
 800a56a:	4628      	movne	r0, r5
 800a56c:	2000      	moveq	r0, #0

    disableInterrupts();
 800a56e:	6822      	ldr	r2, [r4, #0]
{
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;

    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800a570:	68a3      	ldr	r3, [r4, #8]

    disableInterrupts();
 800a572:	68d1      	ldr	r1, [r2, #12]
 800a574:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <_ZN5codal5Timer8setEventEmttb+0xb0>)
{
    TimerEvent *evt = getTimerEvent();
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;

    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800a576:	442b      	add	r3, r5
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 800a578:	4291      	cmp	r1, r2
 800a57a:	e9c6 0301 	strd	r0, r3, [r6, #4]
            this->period = period;
            this->id = id;
 800a57e:	f8a6 9000 	strh.w	r9, [r6]
            this->value = value;
 800a582:	8077      	strh	r7, [r6, #2]

    disableInterrupts();
 800a584:	d121      	bne.n	800a5ca <_ZN5codal5Timer8setEventEmttb+0xaa>
    return currentTimeUs;
}

int Timer::disableInterrupts()
{
    target_disable_irq();
 800a586:	f7f5 febf 	bl	8000308 <target_disable_irq>

    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);

    disableInterrupts();

    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800a58a:	6963      	ldr	r3, [r4, #20]
 800a58c:	b16b      	cbz	r3, 800a5aa <_ZN5codal5Timer8setEventEmttb+0x8a>
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	68b2      	ldr	r2, [r6, #8]
 800a592:	429a      	cmp	r2, r3
 800a594:	d309      	bcc.n	800a5aa <_ZN5codal5Timer8setEventEmttb+0x8a>
    {
        nextTimerEvent = evt;
        triggerIn(period);
    }

    enableInterrupts();
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	4a0e      	ldr	r2, [pc, #56]	; (800a5d4 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d10f      	bne.n	800a5c0 <_ZN5codal5Timer8setEventEmttb+0xa0>
    return DEVICE_OK;
}

int Timer::enableInterrupts()
{
    target_enable_irq();
 800a5a0:	f7f5 feb0 	bl	8000304 <target_enable_irq>
        triggerIn(period);
    }

    enableInterrupts();

    return DEVICE_OK;
 800a5a4:	2000      	movs	r0, #0
}
 800a5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    disableInterrupts();

    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
    {
        nextTimerEvent = evt;
        triggerIn(period);
 800a5aa:	6823      	ldr	r3, [r4, #0]

    disableInterrupts();

    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
    {
        nextTimerEvent = evt;
 800a5ac:	6166      	str	r6, [r4, #20]
        triggerIn(period);
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4798      	blx	r3
    }

    enableInterrupts();
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	4a06      	ldr	r2, [pc, #24]	; (800a5d4 <_ZN5codal5Timer8setEventEmttb+0xb4>)
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d0ef      	beq.n	800a5a0 <_ZN5codal5Timer8setEventEmttb+0x80>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	4798      	blx	r3

    return DEVICE_OK;
 800a5c4:	2000      	movs	r0, #0
}
 800a5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (evt == NULL)
        return DEVICE_NO_RESOURCES;

    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);

    disableInterrupts();
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4788      	blx	r1
 800a5ce:	e7dc      	b.n	800a58a <_ZN5codal5Timer8setEventEmttb+0x6a>
 800a5d0:	0800a4d9 	.word	0x0800a4d9
 800a5d4:	0800a4e5 	.word	0x0800a4e5

0800a5d8 <_ZN5codal5Timer4syncEm>:
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;
 800a5d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 * @param t Indication that t time units (typically microsends) have elapsed.
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
 800a5dc:	440b      	add	r3, r1
    overflow += t;
 800a5de:	4411      	add	r1, r2

    while(overflow >= 1000)
 800a5e0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 */
void Timer::sync(CODAL_TIMESTAMP t)
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;
 800a5e4:	e9c0 3102 	strd	r3, r1, [r0, #8]

    while(overflow >= 1000)
 800a5e8:	d30c      	bcc.n	800a604 <_ZN5codal5Timer4syncEm+0x2c>
 800a5ea:	6843      	ldr	r3, [r0, #4]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <_ZN5codal5Timer4syncEm+0x1a>
 800a5f0:	4613      	mov	r3, r2
    {
        overflow -= 1000;
 800a5f2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
{
    // First, update our timestamps.
    currentTimeUs += t;
    overflow += t;

    while(overflow >= 1000)
 800a5f6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800a5fa:	f103 0201 	add.w	r2, r3, #1
 800a5fe:	d2f7      	bcs.n	800a5f0 <_ZN5codal5Timer4syncEm+0x18>
 800a600:	60c1      	str	r1, [r0, #12]
 800a602:	6043      	str	r3, [r0, #4]
    {
        overflow -= 1000;
        currentTime += 1;
    }
}
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <_ZN5codal5Timer7triggerEv>:

/**
 * Callback from physical timer implementation code.
 */
void Timer::trigger()
{
 800a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	4606      	mov	r6, r0
        {
            if (e->id != 0 && currentTimeUs >= e->timestamp)
            {
                // We need to trigger this event.
#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
                Event evt(e->id, e->value, currentTime);
 800a60e:	f04f 0801 	mov.w	r8, #1
 */
void Timer::trigger()
{
    int eventsFired;

    syncRequest();
 800a612:	6803      	ldr	r3, [r0, #0]

/**
 * Callback from physical timer implementation code.
 */
void Timer::trigger()
{
 800a614:	b084      	sub	sp, #16
    int eventsFired;

    syncRequest();
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4798      	blx	r3
 800a61a:	69b3      	ldr	r3, [r6, #24]
    do
    {
        eventsFired = 0;
        TimerEvent *e = timerEventList;

        for (int i=0; i<eventListSize; i++)
 800a61c:	2b00      	cmp	r3, #0

    // Now, walk the list and trigger any events that are pending.
    do
    {
        eventsFired = 0;
        TimerEvent *e = timerEventList;
 800a61e:	6934      	ldr	r4, [r6, #16]

        for (int i=0; i<eventListSize; i++)
 800a620:	dd57      	ble.n	800a6d2 <_ZN5codal5Timer7triggerEv+0xca>
 800a622:	2500      	movs	r5, #0
 800a624:	340c      	adds	r4, #12
    syncRequest();

    // Now, walk the list and trigger any events that are pending.
    do
    {
        eventsFired = 0;
 800a626:	462f      	mov	r7, r5
 800a628:	e004      	b.n	800a634 <_ZN5codal5Timer7triggerEv+0x2c>
        TimerEvent *e = timerEventList;

        for (int i=0; i<eventListSize; i++)
 800a62a:	3501      	adds	r5, #1
 800a62c:	42ab      	cmp	r3, r5
 800a62e:	f104 040c 	add.w	r4, r4, #12
 800a632:	dd22      	ble.n	800a67a <_ZN5codal5Timer7triggerEv+0x72>
        {
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 800a634:	f834 1c0c 	ldrh.w	r1, [r4, #-12]
 800a638:	2900      	cmp	r1, #0
 800a63a:	d0f6      	beq.n	800a62a <_ZN5codal5Timer7triggerEv+0x22>
 800a63c:	68b0      	ldr	r0, [r6, #8]
 800a63e:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800a642:	4290      	cmp	r0, r2
 800a644:	d3f1      	bcc.n	800a62a <_ZN5codal5Timer7triggerEv+0x22>
            {
                // We need to trigger this event.
#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
                Event evt(e->id, e->value, currentTime);
 800a646:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
 800a64a:	f8cd 8000 	str.w	r8, [sp]
 800a64e:	6873      	ldr	r3, [r6, #4]
 800a650:	a802      	add	r0, sp, #8
 800a652:	f000 fb8d 	bl	800ad70 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
#else
                Event evt(e->id, e->value, currentTimeUs);
#endif

                if (e->period == 0)
 800a656:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d131      	bne.n	800a6c2 <_ZN5codal5Timer7triggerEv+0xba>
    return NULL;
}

void Timer::releaseTimerEvent(TimerEvent *event)
{
    event->id = 0;
 800a65e:	4622      	mov	r2, r4
    if (nextTimerEvent == event)
 800a660:	6971      	ldr	r1, [r6, #20]
    return NULL;
}

void Timer::releaseTimerEvent(TimerEvent *event)
{
    event->id = 0;
 800a662:	f822 3d0c 	strh.w	r3, [r2, #-12]!
    if (nextTimerEvent == event)
 800a666:	4291      	cmp	r1, r2
 800a668:	d031      	beq.n	800a6ce <_ZN5codal5Timer7triggerEv+0xc6>
                    releaseTimerEvent(e);
                else
                    e->timestamp += e->period;

                // TODO: Handle rollover case above...
                eventsFired++;
 800a66a:	69b3      	ldr	r3, [r6, #24]
    do
    {
        eventsFired = 0;
        TimerEvent *e = timerEventList;

        for (int i=0; i<eventListSize; i++)
 800a66c:	3501      	adds	r5, #1
 800a66e:	42ab      	cmp	r3, r5
                    releaseTimerEvent(e);
                else
                    e->timestamp += e->period;

                // TODO: Handle rollover case above...
                eventsFired++;
 800a670:	f107 0701 	add.w	r7, r7, #1
            }
            e++;
 800a674:	f104 040c 	add.w	r4, r4, #12
    do
    {
        eventsFired = 0;
        TimerEvent *e = timerEventList;

        for (int i=0; i<eventListSize; i++)
 800a678:	dcdc      	bgt.n	800a634 <_ZN5codal5Timer7triggerEv+0x2c>
                eventsFired++;
            }
            e++;
        }

    } while (eventsFired);
 800a67a:	2f00      	cmp	r7, #0
 800a67c:	d1ce      	bne.n	800a61c <_ZN5codal5Timer7triggerEv+0x14>
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800a67e:	2b00      	cmp	r3, #0
        }

    } while (eventsFired);

    // always recompute nextTimerEvent - event firing could have added new timer events
    nextTimerEvent = NULL;
 800a680:	6177      	str	r7, [r6, #20]

    TimerEvent *e = timerEventList;
 800a682:	6932      	ldr	r2, [r6, #16]

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800a684:	dd1a      	ble.n	800a6bc <_ZN5codal5Timer7triggerEv+0xb4>
 800a686:	4638      	mov	r0, r7
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800a688:	8811      	ldrh	r1, [r2, #0]
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800a68a:	3701      	adds	r7, #1
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800a68c:	b131      	cbz	r1, 800a69c <_ZN5codal5Timer7triggerEv+0x94>
 800a68e:	b118      	cbz	r0, 800a698 <_ZN5codal5Timer7triggerEv+0x90>
 800a690:	6894      	ldr	r4, [r2, #8]
 800a692:	6881      	ldr	r1, [r0, #8]
 800a694:	428c      	cmp	r4, r1
 800a696:	d201      	bcs.n	800a69c <_ZN5codal5Timer7triggerEv+0x94>
            nextTimerEvent = e;
 800a698:	4610      	mov	r0, r2
 800a69a:	6172      	str	r2, [r6, #20]
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800a69c:	42bb      	cmp	r3, r7
    {
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
            nextTimerEvent = e;
        e++;
 800a69e:	f102 020c 	add.w	r2, r2, #12
    nextTimerEvent = NULL;

    TimerEvent *e = timerEventList;

    // Find the next most recent and schedule it.
    for (int i=0; i<eventListSize; i++)
 800a6a2:	d1f1      	bne.n	800a688 <_ZN5codal5Timer7triggerEv+0x80>
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
            nextTimerEvent = e;
        e++;
    }

    if (nextTimerEvent) {
 800a6a4:	b150      	cbz	r0, 800a6bc <_ZN5codal5Timer7triggerEv+0xb4>
        // this may possibly happen if a new timer event was added to the queue while
        // we were running - it might be already in the past
        if (currentTimeUs < nextTimerEvent->timestamp)
 800a6a6:	6881      	ldr	r1, [r0, #8]
 800a6a8:	68b3      	ldr	r3, [r6, #8]
 800a6aa:	6832      	ldr	r2, [r6, #0]
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	6812      	ldr	r2, [r2, #0]
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 800a6b0:	bf39      	ittee	cc
 800a6b2:	1ac9      	subcc	r1, r1, r3
 800a6b4:	4630      	movcc	r0, r6
        else
            triggerIn(1);
 800a6b6:	4630      	movcs	r0, r6
 800a6b8:	2101      	movcs	r1, #1
 800a6ba:	4790      	blx	r2
    }
}
 800a6bc:	b004      	add	sp, #16
 800a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif

                if (e->period == 0)
                    releaseTimerEvent(e);
                else
                    e->timestamp += e->period;
 800a6c2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6cc:	e7cd      	b.n	800a66a <_ZN5codal5Timer7triggerEv+0x62>

void Timer::releaseTimerEvent(TimerEvent *event)
{
    event->id = 0;
    if (nextTimerEvent == event)
        nextTimerEvent = NULL;
 800a6ce:	6173      	str	r3, [r6, #20]
 800a6d0:	e7cb      	b.n	800a66a <_ZN5codal5Timer7triggerEv+0x62>
        }

    } while (eventsFired);

    // always recompute nextTimerEvent - event firing could have added new timer events
    nextTimerEvent = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6173      	str	r3, [r6, #20]
        if (currentTimeUs < nextTimerEvent->timestamp)
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
        else
            triggerIn(1);
    }
}
 800a6d6:	b004      	add	sp, #16
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6dc <_ZN5codal5TimerD1Ev>:
/**
 * Destructor for this Timer instance
 */
Timer::~Timer()
{
}
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop

0800a6e0 <_ZN5codal25system_timer_current_timeEv>:
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
 800a6e0:	4b05      	ldr	r3, [pc, #20]	; (800a6f8 <_ZN5codal25system_timer_current_timeEv+0x18>)
  * Determines the time since the device was powered on.
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
 800a6e2:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800a6e4:	681c      	ldr	r4, [r3, #0]
 800a6e6:	b12c      	cbz	r4, 800a6f4 <_ZN5codal25system_timer_current_timeEv+0x14>
 *
 * @return the timestamp in milliseconds
 */
CODAL_TIMESTAMP Timer::getTime()
{
    syncRequest();
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	4798      	blx	r3
    return currentTime;
 800a6f0:	6860      	ldr	r0, [r4, #4]
{
    if(system_timer == NULL)
        return 0;

    return system_timer->getTime();
}
 800a6f2:	bd10      	pop	{r4, pc}
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
        return 0;
 800a6f4:	4620      	mov	r0, r4

    return system_timer->getTime();
}
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	20002e40 	.word	0x20002e40

0800a6fc <_ZN5codal28system_timer_current_time_usEv>:
  *
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
    if(system_timer == NULL)
 800a6fc:	4b05      	ldr	r3, [pc, #20]	; (800a714 <_ZN5codal28system_timer_current_time_usEv+0x18>)
  * Determines the time since the device was powered on.
  *
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
 800a6fe:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 800a700:	681c      	ldr	r4, [r3, #0]
 800a702:	b12c      	cbz	r4, 800a710 <_ZN5codal28system_timer_current_time_usEv+0x14>
 *
 * @return the timestamp in microseconds
 */
CODAL_TIMESTAMP Timer::getTimeUs()
{
    syncRequest();
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	4620      	mov	r0, r4
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	4798      	blx	r3
    return currentTimeUs;
 800a70c:	68a0      	ldr	r0, [r4, #8]
{
    if(system_timer == NULL)
        return 0;

    return system_timer->getTimeUs();
}
 800a70e:	bd10      	pop	{r4, pc}
  * @return the current time since power on in microseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time_us()
{
    if(system_timer == NULL)
        return 0;
 800a710:	4620      	mov	r0, r4

    return system_timer->getTimeUs();
}
 800a712:	bd10      	pop	{r4, pc}
 800a714:	20002e40 	.word	0x20002e40

0800a718 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 800a718:	b530      	push	{r4, r5, lr}
    if(system_timer == NULL)
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <_ZN5codal27system_timer_event_every_usEmtt+0x24>)
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 800a71c:	b083      	sub	sp, #12
    if(system_timer == NULL)
 800a71e:	681c      	ldr	r4, [r3, #0]
 800a720:	b14c      	cbz	r4, 800a736 <_ZN5codal27system_timer_event_every_usEmtt+0x1e>
 *
 * @param value the value to place into the Events' value field.
 */
int Timer::eventEveryUs(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
    return setEvent(period, id, value, true);
 800a722:	2501      	movs	r5, #1
 800a724:	4613      	mov	r3, r2
 800a726:	9500      	str	r5, [sp, #0]
 800a728:	460a      	mov	r2, r1
 800a72a:	4601      	mov	r1, r0
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff fef7 	bl	800a520 <_ZN5codal5Timer8setEventEmttb>
{
    if(system_timer == NULL)
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
}
 800a732:	b003      	add	sp, #12
 800a734:	bd30      	pop	{r4, r5, pc}
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
    if(system_timer == NULL)
        return DEVICE_NOT_SUPPORTED;
 800a736:	4802      	ldr	r0, [pc, #8]	; (800a740 <_ZN5codal27system_timer_event_every_usEmtt+0x28>)
 800a738:	e7fb      	b.n	800a732 <_ZN5codal27system_timer_event_every_usEmtt+0x1a>
 800a73a:	bf00      	nop
 800a73c:	20002e40 	.word	0x20002e40
 800a740:	fffffc16 	.word	0xfffffc16

0800a744 <_ZN5codal10EventModel4sendENS_5EventE>:
 800a744:	b082      	sub	sp, #8
 800a746:	4803      	ldr	r0, [pc, #12]	; (800a754 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
 800a748:	ab02      	add	r3, sp, #8
 800a74a:	e903 0006 	stmdb	r3, {r1, r2}
 800a74e:	b002      	add	sp, #8
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	fffffc16 	.word	0xfffffc16

0800a758 <_ZN5codal10MessageBus9elementAtEi>:
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800a758:	2900      	cmp	r1, #0
  *
  * @return the Listener at postion n in the list, or NULL if the position is invalid.
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;
 800a75a:	6940      	ldr	r0, [r0, #20]

    while (n > 0)
 800a75c:	dd05      	ble.n	800a76a <_ZN5codal10MessageBus9elementAtEi+0x12>
    {
        if (l == NULL)
 800a75e:	b908      	cbnz	r0, 800a764 <_ZN5codal10MessageBus9elementAtEi+0xc>
 800a760:	e004      	b.n	800a76c <_ZN5codal10MessageBus9elementAtEi+0x14>
 800a762:	b110      	cbz	r0, 800a76a <_ZN5codal10MessageBus9elementAtEi+0x12>
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800a764:	3901      	subs	r1, #1
    {
        if (l == NULL)
            return NULL;

        n--;
        l = l->next;
 800a766:	69c0      	ldr	r0, [r0, #28]
  */
Listener* MessageBus::elementAt(int n)
{
    Listener *l = listeners;

    while (n > 0)
 800a768:	d1fb      	bne.n	800a762 <_ZN5codal10MessageBus9elementAtEi+0xa>
        n--;
        l = l->next;
    }

    return l;
}
 800a76a:	4770      	bx	lr
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop

0800a770 <_ZN5codal14CodalComponentD1Ev>:
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800a770:	2200      	movs	r2, #0

        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
 800a772:	b510      	push	{r4, lr}
 800a774:	4604      	mov	r4, r0
        {
 800a776:	4b03      	ldr	r3, [pc, #12]	; (800a784 <_ZN5codal14CodalComponentD1Ev+0x14>)
            status = 0;
 800a778:	80c2      	strh	r2, [r0, #6]
        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
 800a77a:	6003      	str	r3, [r0, #0]
            status = 0;
            removeComponent();
 800a77c:	f7fe ffc6 	bl	800970c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800a780:	4620      	mov	r0, r4
 800a782:	bd10      	pop	{r4, pc}
 800a784:	0800c3f8 	.word	0x0800c3f8

0800a788 <_ZN5codal14CodalComponentD0Ev>:
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800a788:	2200      	movs	r2, #0

        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
 800a78a:	b510      	push	{r4, lr}
 800a78c:	4604      	mov	r4, r0
        {
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <_ZN5codal14CodalComponentD0Ev+0x1c>)
            status = 0;
 800a790:	80c2      	strh	r2, [r0, #6]
        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
 800a792:	6003      	str	r3, [r0, #0]
            status = 0;
            removeComponent();
 800a794:	f7fe ffba 	bl	800970c <_ZN5codal14CodalComponent15removeComponentEv>
        }
 800a798:	4620      	mov	r0, r4
 800a79a:	f7f8 fe3b 	bl	8003414 <_ZdlPv>
 800a79e:	4620      	mov	r0, r4
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	bf00      	nop
 800a7a4:	0800c3f8 	.word	0x0800c3f8

0800a7a8 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800a7a8:	b470      	push	{r4, r5, r6}
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	4606      	mov	r6, r0
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 800a7b0:	6849      	ldr	r1, [r1, #4]
 800a7b2:	6820      	ldr	r0, [r4, #0]
 800a7b4:	ac02      	add	r4, sp, #8
 800a7b6:	c403      	stmia	r4!, {r0, r1}
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800a7b8:	4669      	mov	r1, sp
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));

        (o->*m)(e);
 800a7ba:	9c03      	ldr	r4, [sp, #12]
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800a7bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));

        (o->*m)(e);
 800a7c0:	1065      	asrs	r5, r4, #1
 800a7c2:	07e3      	lsls	r3, r4, #31
 800a7c4:	bf45      	ittet	mi
 800a7c6:	5972      	ldrmi	r2, [r6, r5]
 800a7c8:	9b02      	ldrmi	r3, [sp, #8]
 800a7ca:	9b02      	ldrpl	r3, [sp, #8]
 800a7cc:	58d3      	ldrmi	r3, [r2, r3]
 800a7ce:	1970      	adds	r0, r6, r5
 800a7d0:	c906      	ldmia	r1, {r1, r2}
    }
 800a7d2:	b005      	add	sp, #20
 800a7d4:	bc70      	pop	{r4, r5, r6}
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));

        (o->*m)(e);
 800a7d6:	4718      	bx	r3

0800a7d8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
{
    Listener *l;
    int removed = 0;

    //handler can't be NULL!
    if (listener == NULL)
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	d03b      	beq.n	800a854 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x7c>
  * @param listener The Listener to remove.
  *
  * @return DEVICE_OK if the listener is valid, DEVICE_INVALID_PARAMETER otherwise.
  */
int MessageBus::remove(Listener *listener)
{
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    //handler can't be NULL!
    if (listener == NULL)
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 800a7de:	6944      	ldr	r4, [r0, #20]

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800a7e0:	2c00      	cmp	r4, #0
 800a7e2:	d034      	beq.n	800a84e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x76>
 800a7e4:	460d      	mov	r5, r1
  * @return DEVICE_OK if the listener is valid, DEVICE_INVALID_PARAMETER otherwise.
  */
int MessageBus::remove(Listener *listener)
{
    Listener *l;
    int removed = 0;
 800a7e6:	2700      	movs	r7, #0
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a7e8:	4e1c      	ldr	r6, [pc, #112]	; (800a85c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x84>)
 800a7ea:	e005      	b.n	800a7f8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
    while (l != NULL)
    {
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
        {
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800a7ec:	68a2      	ldr	r2, [r4, #8]
 800a7ee:	68ab      	ldr	r3, [r5, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d00d      	beq.n	800a810 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x38>
                    removed++;
                }
            }
        }

        l = l->next;
 800a7f4:	69e4      	ldr	r4, [r4, #28]
        return DEVICE_INVALID_PARAMETER;

    l = listeners;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800a7f6:	b1cc      	cbz	r4, 800a82c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x54>
    {
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 800a7f8:	88aa      	ldrh	r2, [r5, #4]
 800a7fa:	88a3      	ldrh	r3, [r4, #4]
 800a7fc:	4053      	eors	r3, r2
 800a7fe:	0799      	lsls	r1, r3, #30
 800a800:	d4f8      	bmi.n	800a7f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
        {
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800a802:	0792      	lsls	r2, r2, #30
 800a804:	d5f2      	bpl.n	800a7ec <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
 800a806:	68a9      	ldr	r1, [r5, #8]
 800a808:	68a0      	ldr	r0, [r4, #8]
 800a80a:	f000 fae9 	bl	800ade0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800a80e:	b190      	cbz	r0, 800a836 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x5e>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800a810:	882b      	ldrh	r3, [r5, #0]
 800a812:	b113      	cbz	r3, 800a81a <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x42>
 800a814:	8822      	ldrh	r2, [r4, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d1ec      	bne.n	800a7f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800a81a:	886b      	ldrh	r3, [r5, #2]
 800a81c:	b97b      	cbnz	r3, 800a83e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x66>
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a81e:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 800a820:	3701      	adds	r7, #1
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a822:	4333      	orrs	r3, r6
 800a824:	80a3      	strh	r3, [r4, #4]
                    removed++;
                }
            }
        }

        l = l->next;
 800a826:	69e4      	ldr	r4, [r4, #28]
        return DEVICE_INVALID_PARAMETER;

    l = listeners;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800a828:	2c00      	cmp	r4, #0
 800a82a:	d1e5      	bne.n	800a7f8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x20>
        }

        l = l->next;
    }

    if (removed > 0)
 800a82c:	2f00      	cmp	r7, #0
        return DEVICE_OK;
 800a82e:	bfc8      	it	gt
 800a830:	4620      	movgt	r0, r4
        }

        l = l->next;
    }

    if (removed > 0)
 800a832:	dd0c      	ble.n	800a84e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x76>
        return DEVICE_OK;
    else
        return DEVICE_INVALID_PARAMETER;
}
 800a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
    {
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
        {
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800a836:	88ab      	ldrh	r3, [r5, #4]
 800a838:	079b      	lsls	r3, r3, #30
 800a83a:	d4db      	bmi.n	800a7f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
 800a83c:	e7d6      	b.n	800a7ec <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x14>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800a83e:	8862      	ldrh	r2, [r4, #2]
 800a840:	429a      	cmp	r2, r3
 800a842:	d1d7      	bne.n	800a7f4 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1c>
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a844:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 800a846:	3701      	adds	r7, #1
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a848:	4333      	orrs	r3, r6
 800a84a:	80a3      	strh	r3, [r4, #4]
                    removed++;
 800a84c:	e7eb      	b.n	800a826 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x4e>
    }

    if (removed > 0)
        return DEVICE_OK;
    else
        return DEVICE_INVALID_PARAMETER;
 800a84e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    if (removed > 0)
        return DEVICE_OK;
    else
        return DEVICE_INVALID_PARAMETER;
 800a854:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	ffff8000 	.word	0xffff8000

0800a860 <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
{
    Listener *l, *p;
    int methodCallback;

    //handler can't be NULL!
    if (newListener == NULL)
 800a860:	2900      	cmp	r1, #0
 800a862:	d06b      	beq.n	800a93c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xdc>
  * @param listener The Listener to add.
  *
  * @return DEVICE_OK if the listener is valid, DEVICE_INVALID_PARAMETER otherwise.
  */
int MessageBus::add(Listener *newListener)
{
 800a864:	b5f0      	push	{r4, r5, r6, r7, lr}

    //handler can't be NULL!
    if (newListener == NULL)
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 800a866:	6944      	ldr	r4, [r0, #20]
  * @param listener The Listener to add.
  *
  * @return DEVICE_OK if the listener is valid, DEVICE_INVALID_PARAMETER otherwise.
  */
int MessageBus::add(Listener *newListener)
{
 800a868:	b083      	sub	sp, #12
 800a86a:	460d      	mov	r5, r1
 800a86c:	4606      	mov	r6, r0
    // Firstly, we treat a listener as an idempotent operation. Ensure we don't already have this handler
    // registered in a that will already capture these events. If we do, silently ignore.

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
 800a86e:	b93c      	cbnz	r4, 800a880 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
 800a870:	e060      	b.n	800a934 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd4>
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800a872:	88a3      	ldrh	r3, [r4, #4]
 800a874:	0798      	lsls	r0, r3, #30
 800a876:	d508      	bpl.n	800a88a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x2a>

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800a878:	4291      	cmp	r1, r2
 800a87a:	d012      	beq.n	800a8a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
        }

        l = l->next;
 800a87c:	69e4      	ldr	r4, [r4, #28]
    // Firstly, we treat a listener as an idempotent operation. Ensure we don't already have this handler
    // registered in a that will already capture these events. If we do, silently ignore.

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
 800a87e:	b1cc      	cbz	r4, 800a8b4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x54>
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 800a880:	88ab      	ldrh	r3, [r5, #4]
 800a882:	682a      	ldr	r2, [r5, #0]
 800a884:	079f      	lsls	r7, r3, #30
 800a886:	6821      	ldr	r1, [r4, #0]
 800a888:	d4f3      	bmi.n	800a872 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800a88a:	4291      	cmp	r1, r2
 800a88c:	d1f6      	bne.n	800a87c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
 800a88e:	68a2      	ldr	r2, [r4, #8]
 800a890:	68ab      	ldr	r3, [r5, #8]
 800a892:	429a      	cmp	r2, r3
 800a894:	d1f2      	bne.n	800a87c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>
        {
            // We have a perfect match for this event listener already registered.
            // If it's marked for deletion, we simply resurrect the listener, and we're done.
            // Either way, we return an error code, as the *new* listener should be released...
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800a896:	88a3      	ldrh	r3, [r4, #4]
 800a898:	041a      	lsls	r2, r3, #16
 800a89a:	d446      	bmi.n	800a92a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xca>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
 800a89c:	4829      	ldr	r0, [pc, #164]	; (800a944 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
        p->next = newListener;
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
    return DEVICE_OK;
}
 800a89e:	b003      	add	sp, #12
 800a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 800a8a2:	68a9      	ldr	r1, [r5, #8]
 800a8a4:	68a0      	ldr	r0, [r4, #8]
 800a8a6:	f000 fa9b 	bl	800ade0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d1f3      	bne.n	800a896 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
        }

        l = l->next;
 800a8ae:	69e4      	ldr	r4, [r4, #28]
    // Firstly, we treat a listener as an idempotent operation. Ensure we don't already have this handler
    // registered in a that will already capture these events. If we do, silently ignore.

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	d1e5      	bne.n	800a880 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x20>
        l = l->next;
    }

    // We have a valid, new event handler. Add it to the list.
    // if listeners is null - we can automatically add this listener to the list at the beginning...
    if (listeners == NULL)
 800a8b4:	6977      	ldr	r7, [r6, #20]
 800a8b6:	882a      	ldrh	r2, [r5, #0]
 800a8b8:	b1e7      	cbz	r7, 800a8f4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x94>
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	463b      	mov	r3, r7
 800a8be:	e000      	b.n	800a8c2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x62>
 800a8c0:	460b      	mov	r3, r1
    // Adding a listener is a rare occurance, so we just walk the list...

    p = listeners;
    l = listeners;

    while (l != NULL && l->id < newListener->id)
 800a8c2:	8819      	ldrh	r1, [r3, #0]
 800a8c4:	4291      	cmp	r1, r2
 800a8c6:	d217      	bcs.n	800a8f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x98>
    {
        p = l;
        l = l->next;
 800a8c8:	69d9      	ldr	r1, [r3, #28]
    // Adding a listener is a rare occurance, so we just walk the list...

    p = listeners;
    l = listeners;

    while (l != NULL && l->id < newListener->id)
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d1f7      	bne.n	800a8c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x60>
        p = l;
        l = l->next;
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800a8d0:	42bb      	cmp	r3, r7
 800a8d2:	d00b      	beq.n	800a8ec <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x8c>
    }

    //add after p
    else
    {
        newListener->next = p->next;
 800a8d4:	69d9      	ldr	r1, [r3, #28]
 800a8d6:	61e9      	str	r1, [r5, #28]
        p->next = newListener;
 800a8d8:	61dd      	str	r5, [r3, #28]
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800a8da:	2301      	movs	r3, #1
 800a8dc:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800a8e0:	4668      	mov	r0, sp
 800a8e2:	f000 fa37 	bl	800ad54 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800a8e6:	2000      	movs	r0, #0
}
 800a8e8:	b003      	add	sp, #12
 800a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p = l;
        l = l->next;
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800a8ec:	8819      	ldrh	r1, [r3, #0]
 800a8ee:	4291      	cmp	r1, r2
 800a8f0:	d915      	bls.n	800a91e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xbe>
    {
        newListener->next = p;
 800a8f2:	61ef      	str	r7, [r5, #28]

        //this new listener is now the front!
        listeners = newListener;
 800a8f4:	6175      	str	r5, [r6, #20]
 800a8f6:	e7f0      	b.n	800a8da <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
    {
        p = l;
        l = l->next;
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800a8f8:	d11e      	bne.n	800a938 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800a8fa:	886c      	ldrh	r4, [r5, #2]
 800a8fc:	8859      	ldrh	r1, [r3, #2]
 800a8fe:	42a1      	cmp	r1, r4
 800a900:	d304      	bcc.n	800a90c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
 800a902:	e019      	b.n	800a938 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 800a904:	8848      	ldrh	r0, [r1, #2]
 800a906:	42a0      	cmp	r0, r4
 800a908:	d2e2      	bcs.n	800a8d0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x70>
 800a90a:	460b      	mov	r3, r1
    {
        p = l;
        l = l->next;
 800a90c:	69d9      	ldr	r1, [r3, #28]
    {
        p = l;
        l = l->next;
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800a90e:	2900      	cmp	r1, #0
 800a910:	d0de      	beq.n	800a8d0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x70>
 800a912:	8808      	ldrh	r0, [r1, #0]
 800a914:	4290      	cmp	r0, r2
 800a916:	d0f5      	beq.n	800a904 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa4>
        p = l;
        l = l->next;
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 800a918:	42bb      	cmp	r3, r7
 800a91a:	d1db      	bne.n	800a8d4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x74>
 800a91c:	e7e6      	b.n	800a8ec <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x8c>
 800a91e:	d1d9      	bne.n	800a8d4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x74>
 800a920:	8858      	ldrh	r0, [r3, #2]
 800a922:	8869      	ldrh	r1, [r5, #2]
 800a924:	4288      	cmp	r0, r1
 800a926:	d9d5      	bls.n	800a8d4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x74>
 800a928:	e7e3      	b.n	800a8f2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
        {
            // We have a perfect match for this event listener already registered.
            // If it's marked for deletion, we simply resurrect the listener, and we're done.
            // Either way, we return an error code, as the *new* listener should be released...
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 800a92a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a92e:	80a3      	strh	r3, [r4, #4]

            return DEVICE_NOT_SUPPORTED;
 800a930:	4804      	ldr	r0, [pc, #16]	; (800a944 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 800a932:	e7b4      	b.n	800a89e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3e>
 800a934:	880a      	ldrh	r2, [r1, #0]
 800a936:	e7dd      	b.n	800a8f4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x94>
    {
        p = l;
        l = l->next;
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800a938:	4603      	mov	r3, r0
 800a93a:	e7c9      	b.n	800a8d0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x70>
    Listener *l, *p;
    int methodCallback;

    //handler can't be NULL!
    if (newListener == NULL)
        return DEVICE_INVALID_PARAMETER;
 800a93c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        p->next = newListener;
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
    return DEVICE_OK;
}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	fffffc16 	.word	0xfffffc16

0800a948 <_Z14async_callbackPv>:
    // OK, now we need to decide how to behave depending on our configuration.
    // If this a fiber f already active within this listener then check our
    // configuration to determine the correct course of action.
    //

    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800a948:	8883      	ldrh	r3, [r0, #4]
  *
  * Internal wrapper function, used to enable
  * parameterised callbacks through the fiber scheduler.
  */
void async_callback(void *param)
{
 800a94a:	b570      	push	{r4, r5, r6, lr}
    // OK, now we need to decide how to behave depending on our configuration.
    // If this a fiber f already active within this listener then check our
    // configuration to determine the correct course of action.
    //

    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800a94c:	075a      	lsls	r2, r3, #29
  *
  * Internal wrapper function, used to enable
  * parameterised callbacks through the fiber scheduler.
  */
void async_callback(void *param)
{
 800a94e:	4604      	mov	r4, r0
    // OK, now we need to decide how to behave depending on our configuration.
    // If this a fiber f already active within this listener then check our
    // configuration to determine the correct course of action.
    //

    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800a950:	d503      	bpl.n	800a95a <_Z14async_callbackPv+0x12>
    {
        // Drop this event, if that's how we've been configured.
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 800a952:	069e      	lsls	r6, r3, #26
 800a954:	d428      	bmi.n	800a9a8 <_Z14async_callbackPv+0x60>
            return;

        // Queue this event up for later, if that's how we've been configured.
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 800a956:	06dd      	lsls	r5, r3, #27
 800a958:	d42d      	bmi.n	800a9b6 <_Z14async_callbackPv+0x6e>

    // Determine the calling convention for the callback, and invoke...
    // C++ is really bad at this! Especially as the ARM compiler is yet to support C++ 11 :-/

    // Record that we have a fiber going into this listener...
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 800a95a:	f043 0304 	orr.w	r3, r3, #4
 800a95e:	80a3      	strh	r3, [r4, #4]
  * Invokes a callback on a given Listener
  *
  * Internal wrapper function, used to enable
  * parameterised callbacks through the fiber scheduler.
  */
void async_callback(void *param)
 800a960:	f104 0510 	add.w	r5, r4, #16
 800a964:	e012      	b.n	800a98c <_Z14async_callbackPv+0x44>
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
            listener->cb_method->fire(listener->evt);

        // Now a parameterised C function
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
            listener->cb_param(listener->evt, listener->cb_arg);
 800a966:	68e2      	ldr	r2, [r4, #12]
 800a968:	47b0      	blx	r6
        else
            listener->cb(listener->evt);


        // If there are more events to process, dequeue the next one and process it.
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800a96a:	88a2      	ldrh	r2, [r4, #4]
 800a96c:	06d3      	lsls	r3, r2, #27
 800a96e:	d518      	bpl.n	800a9a2 <_Z14async_callbackPv+0x5a>
 800a970:	69a3      	ldr	r3, [r4, #24]
 800a972:	b1b3      	cbz	r3, 800a9a2 <_Z14async_callbackPv+0x5a>
        {
            EventQueueItem *item = listener->evt_queue;

            listener->evt = item->evt;
 800a974:	e893 0003 	ldmia.w	r3, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800a978:	689a      	ldr	r2, [r3, #8]
        // If there are more events to process, dequeue the next one and process it.
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
        {
            EventQueueItem *item = listener->evt_queue;

            listener->evt = item->evt;
 800a97a:	e885 0003 	stmia.w	r5, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
            delete item;
 800a97e:	4618      	mov	r0, r3
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
        {
            EventQueueItem *item = listener->evt_queue;

            listener->evt = item->evt;
            listener->evt_queue = listener->evt_queue->next;
 800a980:	61a2      	str	r2, [r4, #24]
            delete item;
 800a982:	f7f8 fd47 	bl	8003414 <_ZdlPv>

            // We spin the scheduler here, to preven any particular event handler from continuously holding onto resources.
            schedule();
 800a986:	f7ff fb5d 	bl	800a044 <_ZN5codal8scheduleEv>
 800a98a:	88a3      	ldrh	r3, [r4, #4]
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;

    while (1)
    {
        // Firstly, check for a method callback into an object.
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800a98c:	0799      	lsls	r1, r3, #30
 800a98e:	68a6      	ldr	r6, [r4, #8]
 800a990:	d40b      	bmi.n	800a9aa <_Z14async_callbackPv+0x62>
            listener->cb_method->fire(listener->evt);

        // Now a parameterised C function
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
            listener->cb_param(listener->evt, listener->cb_arg);
 800a992:	e895 0003 	ldmia.w	r5, {r0, r1}
        // Firstly, check for a method callback into an object.
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
            listener->cb_method->fire(listener->evt);

        // Now a parameterised C function
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 800a996:	07da      	lsls	r2, r3, #31
 800a998:	d4e5      	bmi.n	800a966 <_Z14async_callbackPv+0x1e>
            listener->cb_param(listener->evt, listener->cb_arg);

        // We must have a plain C function
        else
            listener->cb(listener->evt);
 800a99a:	47b0      	blx	r6


        // If there are more events to process, dequeue the next one and process it.
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800a99c:	88a2      	ldrh	r2, [r4, #4]
 800a99e:	06d3      	lsls	r3, r2, #27
 800a9a0:	d4e6      	bmi.n	800a970 <_Z14async_callbackPv+0x28>
        else
            break;
    }

    // The fiber of exiting... clear our state.
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 800a9a2:	f022 0204 	bic.w	r2, r2, #4
 800a9a6:	80a2      	strh	r2, [r4, #4]
}
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}

    while (1)
    {
        // Firstly, check for a method callback into an object.
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
            listener->cb_method->fire(listener->evt);
 800a9aa:	e895 0006 	ldmia.w	r5, {r1, r2}
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 fa06 	bl	800adc0 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 800a9b4:	e7d9      	b.n	800a96a <_Z14async_callbackPv+0x22>
            return;

        // Queue this event up for later, if that's how we've been configured.
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
        {
            listener->queue(listener->evt);
 800a9b6:	3410      	adds	r4, #16
 800a9b8:	e894 0006 	ldmia.w	r4, {r1, r2}
            break;
    }

    // The fiber of exiting... clear our state.
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
}
 800a9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return;

        // Queue this event up for later, if that's how we've been configured.
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
        {
            listener->queue(listener->evt);
 800a9c0:	f7ff bd56 	b.w	800a470 <_ZN5codal8Listener5queueENS_5EventE>

0800a9c4 <_ZN5codal10MessageBus12dequeueEventEv>:
  * Extract the next event from the front of the event queue (if present).
  *
  * @return a pointer to the EventQueueItem that is at the head of the list.
  */
EventQueueItem* MessageBus::dequeueEvent()
{
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4604      	mov	r4, r0
    EventQueueItem *item = NULL;

    target_disable_irq();
 800a9c8:	f7f5 fc9e 	bl	8000308 <target_disable_irq>

    if (evt_queue_head != NULL)
 800a9cc:	69a5      	ldr	r5, [r4, #24]
 800a9ce:	b12d      	cbz	r5, 800a9dc <_ZN5codal10MessageBus12dequeueEventEv+0x18>
    {
        item = evt_queue_head;
        evt_queue_head = item->next;
 800a9d0:	68ab      	ldr	r3, [r5, #8]
 800a9d2:	61a3      	str	r3, [r4, #24]

        if (evt_queue_head == NULL)
 800a9d4:	b133      	cbz	r3, 800a9e4 <_ZN5codal10MessageBus12dequeueEventEv+0x20>
            evt_queue_tail = NULL;

        queueLength--;
 800a9d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	8463      	strh	r3, [r4, #34]	; 0x22
    }

    target_enable_irq();
 800a9dc:	f7f5 fc92 	bl	8000304 <target_enable_irq>


    return item;
}
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
    {
        item = evt_queue_head;
        evt_queue_head = item->next;

        if (evt_queue_head == NULL)
            evt_queue_tail = NULL;
 800a9e4:	61e3      	str	r3, [r4, #28]
 800a9e6:	e7f6      	b.n	800a9d6 <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800a9e8 <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
  * Cleanup any Listeners marked for deletion from the list.
  *
  * @return The number of listeners removed from the list.
  */
int MessageBus::deleteMarkedListeners()
{
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Listener *l, *p;
    int removed = 0;

    l = listeners;
 800a9ec:	6944      	ldr	r4, [r0, #20]
    p = NULL;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800a9ee:	b304      	cbz	r4, 800aa32 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x4a>
  * @return The number of listeners removed from the list.
  */
int MessageBus::deleteMarkedListeners()
{
    Listener *l, *p;
    int removed = 0;
 800a9f0:	2700      	movs	r7, #0
 800a9f2:	4680      	mov	r8, r0

    l = listeners;
    p = NULL;
 800a9f4:	463e      	mov	r6, r7

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
    {
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800a9f6:	88a3      	ldrh	r3, [r4, #4]
 800a9f8:	69e5      	ldr	r5, [r4, #28]
 800a9fa:	041a      	lsls	r2, r3, #16
 800a9fc:	d406      	bmi.n	800aa0c <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x24>
 800a9fe:	4626      	mov	r6, r4

            continue;
        }

        p = l;
        l = l->next;
 800aa00:	462c      	mov	r4, r5

    l = listeners;
    p = NULL;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	d1f7      	bne.n	800a9f6 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xe>
        p = l;
        l = l->next;
    }

    return removed;
}
 800aa06:	4638      	mov	r0, r7
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p = NULL;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
    {
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800aa0c:	075b      	lsls	r3, r3, #29
 800aa0e:	d4f6      	bmi.n	800a9fe <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x16>
        {
            if (p == NULL)
 800aa10:	b166      	cbz	r6, 800aa2c <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x44>
                listeners = l->next;
            else
                p->next = l->next;
 800aa12:	61f5      	str	r5, [r6, #28]
 800aa14:	69e5      	ldr	r5, [r4, #28]

            // delete the listener.
            Listener *t = l;
            l = l->next;

            delete t;
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7ff fd1e 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 800aa1c:	4620      	mov	r0, r4
            removed++;
 800aa1e:	3701      	adds	r7, #1

            // delete the listener.
            Listener *t = l;
            l = l->next;

            delete t;
 800aa20:	f7f8 fcf8 	bl	8003414 <_ZdlPv>
            else
                p->next = l->next;

            // delete the listener.
            Listener *t = l;
            l = l->next;
 800aa24:	462c      	mov	r4, r5

    l = listeners;
    p = NULL;

    // Walk this list of event handlers. Delete any that match the given listener.
    while (l != NULL)
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	d1e5      	bne.n	800a9f6 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xe>
 800aa2a:	e7ec      	b.n	800aa06 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x1e>
    {
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
        {
            if (p == NULL)
                listeners = l->next;
 800aa2c:	f8c8 5014 	str.w	r5, [r8, #20]
 800aa30:	e7f1      	b.n	800aa16 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x2e>
  * @return The number of listeners removed from the list.
  */
int MessageBus::deleteMarkedListeners()
{
    Listener *l, *p;
    int removed = 0;
 800aa32:	4627      	mov	r7, r4
        p = l;
        l = l->next;
    }

    return removed;
}
 800aa34:	4638      	mov	r0, r7
 800aa36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3a:	bf00      	nop

0800aa3c <_ZN5codal10MessageBus7processERNS_5EventEb>:
  *
  * @note It is recommended that all external code uses the send() function instead of this function,
  *       or the constructors provided by Event.
  */
int MessageBus::process(Event &evt, bool urgent)
{
 800aa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Listener *l;
    int complete = 1;
    bool listenerUrgent;

    l = listeners;
 800aa40:	6944      	ldr	r4, [r0, #20]

    while (l != NULL)
 800aa42:	2c00      	cmp	r4, #0
 800aa44:	d042      	beq.n	800aacc <_ZN5codal10MessageBus7processERNS_5EventEb+0x90>
 800aa46:	4616      	mov	r6, r2
 800aa48:	460d      	mov	r5, r1
  *       or the constructors provided by Event.
  */
int MessageBus::process(Event &evt, bool urgent)
{
    Listener *l;
    int complete = 1;
 800aa4a:	2701      	movs	r7, #1
                // should the event handler attempt a blocking operation, but doesn't have the overhead
                // of creating a fiber needlessly. (cool huh?)
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
                    async_callback(l);
                else
                    invoke(async_callback, l);
 800aa4c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800aad4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x98>
 800aa50:	e00c      	b.n	800aa6c <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
        {
            // If we're running under the fiber scheduler, then derive the THREADING_MODE for the callback based on the
            // metadata in the listener itself.
            if (fiber_scheduler_running())
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 800aa52:	88a3      	ldrh	r3, [r4, #4]
 800aa54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa58:	f1a3 03c0 	sub.w	r3, r3, #192	; 0xc0
 800aa5c:	fab3 f383 	clz	r3, r3
 800aa60:	095b      	lsrs	r3, r3, #5
            else
                listenerUrgent = true;

            // If we should process this event hander in this pass, then activate the listener.
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800aa62:	42b3      	cmp	r3, r6
 800aa64:	d015      	beq.n	800aa92 <_ZN5codal10MessageBus7processERNS_5EventEb+0x56>
                    async_callback(l);
                else
                    invoke(async_callback, l);
            }
            else
                complete = 0;
 800aa66:	2700      	movs	r7, #0
        }

        l = l->next;
 800aa68:	69e4      	ldr	r4, [r4, #28]
    int complete = 1;
    bool listenerUrgent;

    l = listeners;

    while (l != NULL)
 800aa6a:	b31c      	cbz	r4, 800aab4 <_ZN5codal10MessageBus7processERNS_5EventEb+0x78>
    {
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 800aa6c:	8823      	ldrh	r3, [r4, #0]
 800aa6e:	8829      	ldrh	r1, [r5, #0]
 800aa70:	4299      	cmp	r1, r3
 800aa72:	d001      	beq.n	800aa78 <_ZN5codal10MessageBus7processERNS_5EventEb+0x3c>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1f7      	bne.n	800aa68 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
 800aa78:	8863      	ldrh	r3, [r4, #2]
 800aa7a:	886a      	ldrh	r2, [r5, #2]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d001      	beq.n	800aa84 <_ZN5codal10MessageBus7processERNS_5EventEb+0x48>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1f1      	bne.n	800aa68 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
        {
            // If we're running under the fiber scheduler, then derive the THREADING_MODE for the callback based on the
            // metadata in the listener itself.
            if (fiber_scheduler_running())
 800aa84:	f7ff f986 	bl	8009d94 <_ZN5codal23fiber_scheduler_runningEv>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1e2      	bne.n	800aa52 <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
            else
                listenerUrgent = true;
 800aa8c:	2301      	movs	r3, #1

            // If we should process this event hander in this pass, then activate the listener.
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800aa8e:	42b3      	cmp	r3, r6
 800aa90:	d1e9      	bne.n	800aa66 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
 800aa92:	88a3      	ldrh	r3, [r4, #4]
 800aa94:	041a      	lsls	r2, r3, #16
 800aa96:	d4e6      	bmi.n	800aa66 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2a>
            {
                l->evt = evt;
 800aa98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa9c:	f104 0210 	add.w	r2, r4, #16
                // OK, if this handler has regisitered itself as non-blocking, we just execute it directly...
                // This is normally only done for trusted system components.
                // Otherwise, we invoke it in a 'fork on block' context, that will automatically create a fiber
                // should the event handler attempt a blocking operation, but doesn't have the overhead
                // of creating a fiber needlessly. (cool huh?)
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800aaa0:	065b      	lsls	r3, r3, #25
                listenerUrgent = true;

            // If we should process this event hander in this pass, then activate the listener.
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
            {
                l->evt = evt;
 800aaa2:	e882 0003 	stmia.w	r2, {r0, r1}
                // OK, if this handler has regisitered itself as non-blocking, we just execute it directly...
                // This is normally only done for trusted system components.
                // Otherwise, we invoke it in a 'fork on block' context, that will automatically create a fiber
                // should the event handler attempt a blocking operation, but doesn't have the overhead
                // of creating a fiber needlessly. (cool huh?)
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800aaa6:	d508      	bpl.n	800aaba <_ZN5codal10MessageBus7processERNS_5EventEb+0x7e>
                    async_callback(l);
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff ff4d 	bl	800a948 <_Z14async_callbackPv>
            }
            else
                complete = 0;
        }

        l = l->next;
 800aaae:	69e4      	ldr	r4, [r4, #28]
    int complete = 1;
    bool listenerUrgent;

    l = listeners;

    while (l != NULL)
 800aab0:	2c00      	cmp	r4, #0
 800aab2:	d1db      	bne.n	800aa6c <_ZN5codal10MessageBus7processERNS_5EventEb+0x30>

    //Serial.println("EXIT");
    //while (!(UCSR0A & _BV(TXC0)));

    return complete;
}
 800aab4:	4638      	mov	r0, r7
 800aab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                // OK, if this handler has regisitered itself as non-blocking, we just execute it directly...
                // This is normally only done for trusted system components.
                // Otherwise, we invoke it in a 'fork on block' context, that will automatically create a fiber
                // should the event handler attempt a blocking operation, but doesn't have the overhead
                // of creating a fiber needlessly. (cool huh?)
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800aaba:	f7ff f96b 	bl	8009d94 <_ZN5codal23fiber_scheduler_runningEv>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d0f2      	beq.n	800aaa8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x6c>
                    async_callback(l);
                else
                    invoke(async_callback, l);
 800aac2:	4621      	mov	r1, r4
 800aac4:	4640      	mov	r0, r8
 800aac6:	f7ff fb51 	bl	800a16c <_ZN5codal6invokeEPFvPvES0_>
 800aaca:	e7cd      	b.n	800aa68 <_ZN5codal10MessageBus7processERNS_5EventEb+0x2c>
  *       or the constructors provided by Event.
  */
int MessageBus::process(Event &evt, bool urgent)
{
    Listener *l;
    int complete = 1;
 800aacc:	2701      	movs	r7, #1

    //Serial.println("EXIT");
    //while (!(UCSR0A & _BV(TXC0)));

    return complete;
}
 800aace:	4638      	mov	r0, r7
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	0800a949 	.word	0x0800a949

0800aad8 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
  * Add the given event at the tail of our queue.
  *
  * @param The event to queue.
  */
void MessageBus::queueEvent(Event &evt)
{
 800aad8:	b5f0      	push	{r4, r5, r6, r7, lr}

    EventQueueItem *prev = evt_queue_tail;

    // Now process all handler regsitered as URGENT.
    // These pre-empt the queue, and are useful for fast, high priority services.
    processingComplete = this->process(evt, true);
 800aada:	2201      	movs	r2, #1
  * Add the given event at the tail of our queue.
  *
  * @param The event to queue.
  */
void MessageBus::queueEvent(Event &evt)
{
 800aadc:	b083      	sub	sp, #12
 800aade:	4604      	mov	r4, r0
    int processingComplete;

    EventQueueItem *prev = evt_queue_tail;
 800aae0:	69c5      	ldr	r5, [r0, #28]
  * Add the given event at the tail of our queue.
  *
  * @param The event to queue.
  */
void MessageBus::queueEvent(Event &evt)
{
 800aae2:	460e      	mov	r6, r1

    EventQueueItem *prev = evt_queue_tail;

    // Now process all handler regsitered as URGENT.
    // These pre-empt the queue, and are useful for fast, high priority services.
    processingComplete = this->process(evt, true);
 800aae4:	f7ff ffaa 	bl	800aa3c <_ZN5codal10MessageBus7processERNS_5EventEb>

    // If we've already processed all event handlers, we're all done.
    // No need to queue the event.
    if (processingComplete)
 800aae8:	b910      	cbnz	r0, 800aaf0 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
        return;

    // If we need to queue, but there is no space, then there's nothg we can do.
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800aaea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800aaec:	2b09      	cmp	r3, #9
 800aaee:	d901      	bls.n	800aaf4 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
        evt_queue_tail = item;

    queueLength++;

    target_enable_irq();
}
 800aaf0:	b003      	add	sp, #12
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

    // Otherwise, we need to queue this event for later processing...
    // We queue this event at the tail of the queue at the point where we entered queueEvent()
    // This is important as the processing above *may* have generated further events, and
    // we want to maintain ordering of events.
    EventQueueItem *item = new EventQueueItem(evt);
 800aaf4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aaf8:	466e      	mov	r6, sp
 800aafa:	e886 0003 	stmia.w	r6, {r0, r1}
 800aafe:	200c      	movs	r0, #12
 800ab00:	f7f8 fc86 	bl	8003410 <_Znwj>
 800ab04:	e896 0006 	ldmia.w	r6, {r1, r2}
 800ab08:	4607      	mov	r7, r0
 800ab0a:	f000 f947 	bl	800ad9c <_ZN5codal14EventQueueItemC1ENS_5EventE>

    // The queue was empty when we entered this function, so queue our event at the start of the queue.
    target_disable_irq();
 800ab0e:	f7f5 fbfb 	bl	8000308 <target_disable_irq>

    if (prev == NULL)
 800ab12:	b165      	cbz	r5, 800ab2e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x56>
        item->next = evt_queue_head;
        evt_queue_head = item;
    }
    else
    {
        item->next = prev->next;
 800ab14:	68ab      	ldr	r3, [r5, #8]
 800ab16:	60bb      	str	r3, [r7, #8]
        prev->next = item;
 800ab18:	60af      	str	r7, [r5, #8]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
    }

    if (item->next == NULL)
 800ab1c:	b15b      	cbz	r3, 800ab36 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5e>
        evt_queue_tail = item;

    queueLength++;
 800ab1e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ab20:	3301      	adds	r3, #1
 800ab22:	8463      	strh	r3, [r4, #34]	; 0x22

    target_enable_irq();
}
 800ab24:	b003      	add	sp, #12
 800ab26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (item->next == NULL)
        evt_queue_tail = item;

    queueLength++;

    target_enable_irq();
 800ab2a:	f7f5 bbeb 	b.w	8000304 <target_enable_irq>
    // The queue was empty when we entered this function, so queue our event at the start of the queue.
    target_disable_irq();

    if (prev == NULL)
    {
        item->next = evt_queue_head;
 800ab2e:	69a3      	ldr	r3, [r4, #24]
        evt_queue_head = item;
 800ab30:	61a7      	str	r7, [r4, #24]
    // The queue was empty when we entered this function, so queue our event at the start of the queue.
    target_disable_irq();

    if (prev == NULL)
    {
        item->next = evt_queue_head;
 800ab32:	60bb      	str	r3, [r7, #8]
        evt_queue_head = item;
 800ab34:	e7f2      	b.n	800ab1c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x44>
        item->next = prev->next;
        prev->next = item;
    }

    if (item->next == NULL)
        evt_queue_tail = item;
 800ab36:	61e7      	str	r7, [r4, #28]
 800ab38:	e7f1      	b.n	800ab1e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>
 800ab3a:	bf00      	nop

0800ab3c <_ZN5codal10MessageBus4sendENS_5EventE>:
  * // This has the same effect!
  * evt1.fire()
  * @endcode
  */
int MessageBus::send(Event evt)
{
 800ab3c:	b500      	push	{lr}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	466b      	mov	r3, sp
 800ab42:	e883 0006 	stmia.w	r3, {r1, r2}
    // We simply queue processing of the event until we're scheduled in normal thread context.
    // We do this to avoid the possibility of executing event handler code in IRQ context, which may bring
    // hidden race conditions to kids code. Queuing all events ensures causal ordering (total ordering in fact).
    this->queueEvent(evt);
 800ab46:	4619      	mov	r1, r3
 800ab48:	f7ff ffc6 	bl	800aad8 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
    return DEVICE_OK;
}
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	b003      	add	sp, #12
 800ab50:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab54 <_ZN5codal10MessageBus4idleENS_5EventE>:
  *
  * Process at least one event from the event queue, if it is not empty.
  * We then continue processing events until something appears on the runqueue.
  */
void MessageBus::idle(Event)
{
 800ab54:	b530      	push	{r4, r5, lr}
 800ab56:	4605      	mov	r5, r0
 800ab58:	b083      	sub	sp, #12
 800ab5a:	ab02      	add	r3, sp, #8
 800ab5c:	e903 0006 	stmdb	r3, {r1, r2}
    // Clear out any listeners marked for deletion
    this->deleteMarkedListeners();
 800ab60:	f7ff ff42 	bl	800a9e8 <_ZN5codal10MessageBus21deleteMarkedListenersEv>

    EventQueueItem *item = this->dequeueEvent();
 800ab64:	4628      	mov	r0, r5
 800ab66:	f7ff ff2d 	bl	800a9c4 <_ZN5codal10MessageBus12dequeueEventEv>

    // Whilst there are events to process and we have no useful other work to do, pull them off the queue and process them.
    while (item)
 800ab6a:	b190      	cbz	r0, 800ab92 <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	e004      	b.n	800ab7a <_ZN5codal10MessageBus4idleENS_5EventE+0x26>
        // also reducing the RAM footprint.
        if(!scheduler_runqueue_empty())
            break;

        // Pull the next event to process, if there is one.
        item = this->dequeueEvent();
 800ab70:	4628      	mov	r0, r5
 800ab72:	f7ff ff27 	bl	800a9c4 <_ZN5codal10MessageBus12dequeueEventEv>
    this->deleteMarkedListeners();

    EventQueueItem *item = this->dequeueEvent();

    // Whilst there are events to process and we have no useful other work to do, pull them off the queue and process them.
    while (item)
 800ab76:	4604      	mov	r4, r0
 800ab78:	b158      	cbz	r0, 800ab92 <_ZN5codal10MessageBus4idleENS_5EventE+0x3e>
    {
        // send the event to all standard event listeners.
        this->process(item->evt);
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7ff ff5c 	bl	800aa3c <_ZN5codal10MessageBus7processERNS_5EventEb>

        // Free the queue item.
        delete item;
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7f8 fc45 	bl	8003414 <_ZdlPv>

        // If we have created some useful work to do, we stop processing.
        // This helps to minimise the number of blocked fibers we create at any point in time, therefore
        // also reducing the RAM footprint.
        if(!scheduler_runqueue_empty())
 800ab8a:	f7ff f96d 	bl	8009e68 <_ZN5codal24scheduler_runqueue_emptyEv>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1ee      	bne.n	800ab70 <_ZN5codal10MessageBus4idleENS_5EventE+0x1c>
            break;

        // Pull the next event to process, if there is one.
        item = this->dequeueEvent();
    }
}
 800ab92:	b003      	add	sp, #12
 800ab94:	bd30      	pop	{r4, r5, pc}
 800ab96:	bf00      	nop

0800ab98 <_ZN5codal19allocateNotifyEventEv>:
/**
 * Allocate a NOTIFY event code dynamicaly, for generally purpose condition synchronisation.
 */
uint16_t allocateNotifyEvent()
{
    return userNotifyId++;
 800ab98:	4b02      	ldr	r3, [pc, #8]	; (800aba4 <_ZN5codal19allocateNotifyEventEv+0xc>)
 800ab9a:	8818      	ldrh	r0, [r3, #0]
 800ab9c:	1c42      	adds	r2, r0, #1
 800ab9e:	801a      	strh	r2, [r3, #0]
}
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20002804 	.word	0x20002804

0800aba8 <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>:
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800aba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	460e      	mov	r6, r1
 800abb0:	4615      	mov	r5, r2
 800abb2:	b083      	sub	sp, #12
 800abb4:	3010      	adds	r0, #16
 800abb6:	4699      	mov	r9, r3
 800abb8:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800abbc:	f000 f8e4 	bl	800ad88 <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800abc0:	8026      	strh	r6, [r4, #0]
        this->value = value;
 800abc2:	8065      	strh	r5, [r4, #2]
        this->cb_method = new MemberFunctionCallback(object, method);
 800abc4:	2018      	movs	r0, #24
 800abc6:	f7f8 fc23 	bl	8003410 <_Znwj>
 800abca:	4602      	mov	r2, r0
 800abcc:	46ec      	mov	ip, sp
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
    {
        this->object = object;
 800abce:	4617      	mov	r7, r2
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 800abd0:	2500      	movs	r5, #0
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 800abd2:	4666      	mov	r6, ip
 800abd4:	ab0a      	add	r3, sp, #40	; 0x28
 800abd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abda:	e88c 0003 	stmia.w	ip, {r0, r1}
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
    {
        this->object = object;
 800abde:	f847 9b0c 	str.w	r9, [r7], #12
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 800abe2:	ce03      	ldmia	r6!, {r0, r1}
 800abe4:	60d5      	str	r5, [r2, #12]
 800abe6:	607d      	str	r5, [r7, #4]
 800abe8:	6050      	str	r0, [r2, #4]
        this->cb_arg = NULL;
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
        this->evt_queue = NULL;
        this->next = NULL;
    }
 800abea:	4620      	mov	r0, r4
        invoke = &MemberFunctionCallback::methodCall<T>;
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt+0x60>)
    {
        this->id = id;
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
        this->cb_arg = NULL;
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800abee:	f048 0802 	orr.w	r8, r8, #2
 800abf2:	f8a4 8004 	strh.w	r8, [r4, #4]
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
    {
        this->id = id;
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
 800abf6:	60a2      	str	r2, [r4, #8]
        this->cb_arg = NULL;
 800abf8:	60e5      	str	r5, [r4, #12]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
        this->evt_queue = NULL;
        this->next = NULL;
 800abfa:	e9c4 5506 	strd	r5, r5, [r4, #24]
 800abfe:	6153      	str	r3, [r2, #20]
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
    {
        this->object = object;
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 800ac00:	6091      	str	r1, [r2, #8]
    }
 800ac02:	b003      	add	sp, #12
 800ac04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac08:	0800a7a9 	.word	0x0800a7a9

0800ac0c <_ZN5codal10MessageBusC1Ev>:
  * Default constructor.
  *
  * Adds itself as a fiber component, and also configures itself to be the
  * default EventModel if defaultEventBus is NULL.
  */
MessageBus::MessageBus()
 800ac0c:	b530      	push	{r4, r5, lr}
        /**
          * The default constructor of a CodalComponent
          */
        CodalComponent()
        {
            this->id = 0;
 800ac0e:	2500      	movs	r5, #0
 800ac10:	4604      	mov	r4, r0
  *
  * An EventModel implementation is provided in the DeviceMessageBus class.
  */
namespace codal
{
    class EventModel
 800ac12:	4a1e      	ldr	r2, [pc, #120]	; (800ac8c <_ZN5codal10MessageBusC1Ev+0x80>)

        /**
          * The default constructor of a CodalComponent
          */
        CodalComponent()
        {
 800ac14:	4b1e      	ldr	r3, [pc, #120]	; (800ac90 <_ZN5codal10MessageBusC1Ev+0x84>)
 800ac16:	b087      	sub	sp, #28
 800ac18:	6002      	str	r2, [r0, #0]
            this->id = 0;
 800ac1a:	e9c0 3502 	strd	r3, r5, [r0, #8]
            this->status = 0;

            addComponent();
 800ac1e:	3008      	adds	r0, #8
 800ac20:	f7fe fd08 	bl	8009634 <_ZN5codal14CodalComponent12addComponentEv>
 800ac24:	4b1b      	ldr	r3, [pc, #108]	; (800ac94 <_ZN5codal10MessageBusC1Ev+0x88>)
 800ac26:	4a1c      	ldr	r2, [pc, #112]	; (800ac98 <_ZN5codal10MessageBusC1Ev+0x8c>)
 800ac28:	f103 0120 	add.w	r1, r3, #32
{
    this->listeners = NULL;
    this->evt_queue_head = NULL;
 800ac2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    this->evt_queue_tail = NULL;
 800ac30:	61e5      	str	r5, [r4, #28]
    this->queueLength = 0;
 800ac32:	8465      	strh	r5, [r4, #34]	; 0x22
  * Default constructor.
  *
  * Adds itself as a fiber component, and also configures itself to be the
  * default EventModel if defaultEventBus is NULL.
  */
MessageBus::MessageBus()
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	60a1      	str	r1, [r4, #8]
            return DEVICE_INVALID_PARAMETER;

        if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
            return DEVICE_INVALID_PARAMETER;

        Listener *newListener = new Listener(id, value, object, handler, flags);
 800ac38:	2020      	movs	r0, #32
 800ac3a:	e9cd 2504 	strd	r2, r5, [sp, #16]
 800ac3e:	f7f8 fbe7 	bl	8003410 <_Znwj>
 800ac42:	22c0      	movs	r2, #192	; 0xc0
 800ac44:	4605      	mov	r5, r0
 800ac46:	ab06      	add	r3, sp, #24
 800ac48:	e913 0003 	ldmdb	r3, {r0, r1}
 800ac4c:	9202      	str	r2, [sp, #8]
 800ac4e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ac52:	4623      	mov	r3, r4
 800ac54:	210f      	movs	r1, #15
 800ac56:	4628      	mov	r0, r5
 800ac58:	2202      	movs	r2, #2
 800ac5a:	f7ff ffa5 	bl	800aba8 <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>

        if(add(newListener) == DEVICE_OK)
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7ff fdfd 	bl	800a860 <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 800ac66:	b948      	cbnz	r0, 800ac7c <_ZN5codal10MessageBusC1Ev+0x70>
    this->queueLength = 0;

    // ANY listeners for scheduler events MUST be immediate, or else they will not be registered.
    listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, this, &MessageBus::idle, MESSAGE_BUS_LISTENER_IMMEDIATE);

    if(EventModel::defaultEventBus == NULL)
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <_ZN5codal10MessageBusC1Ev+0x90>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	b112      	cbz	r2, 800ac74 <_ZN5codal10MessageBusC1Ev+0x68>
        EventModel::defaultEventBus = this;
}
 800ac6e:	4620      	mov	r0, r4
 800ac70:	b007      	add	sp, #28
 800ac72:	bd30      	pop	{r4, r5, pc}
 800ac74:	4620      	mov	r0, r4

    // ANY listeners for scheduler events MUST be immediate, or else they will not be registered.
    listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, this, &MessageBus::idle, MESSAGE_BUS_LISTENER_IMMEDIATE);

    if(EventModel::defaultEventBus == NULL)
        EventModel::defaultEventBus = this;
 800ac76:	601c      	str	r4, [r3, #0]
}
 800ac78:	b007      	add	sp, #28
 800ac7a:	bd30      	pop	{r4, r5, pc}
            return DEVICE_OK;

        delete newListener;
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f7ff fbeb 	bl	800a458 <_ZN5codal8ListenerD1Ev>
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7f8 fbc6 	bl	8003414 <_ZdlPv>
 800ac88:	e7ee      	b.n	800ac68 <_ZN5codal10MessageBusC1Ev+0x5c>
 800ac8a:	bf00      	nop
 800ac8c:	0800c414 	.word	0x0800c414
 800ac90:	0800c3f8 	.word	0x0800c3f8
 800ac94:	0800c428 	.word	0x0800c428
 800ac98:	0800ab55 	.word	0x0800ab55
 800ac9c:	20002e44 	.word	0x20002e44

0800aca0 <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	2500      	movs	r5, #0
    int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
 800aca4:	2610      	movs	r6, #16
 800aca6:	4604      	mov	r4, r0
 800aca8:	4a13      	ldr	r2, [pc, #76]	; (800acf8 <_ZN5codal10MessageBusD1Ev+0x58>)
 800acaa:	b08e      	sub	sp, #56	; 0x38
 800acac:	e9cd 2504 	strd	r2, r5, [sp, #16]
 800acb0:	4b12      	ldr	r3, [pc, #72]	; (800acfc <_ZN5codal10MessageBusD1Ev+0x5c>)
 800acb2:	eb0d 0206 	add.w	r2, sp, r6
 800acb6:	f103 0108 	add.w	r1, r3, #8
 800acba:	3328      	adds	r3, #40	; 0x28
 800acbc:	6083      	str	r3, [r0, #8]
 800acbe:	6001      	str	r1, [r0, #0]
 800acc0:	4623      	mov	r3, r4
 800acc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800acc6:	462a      	mov	r2, r5
 800acc8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800accc:	9602      	str	r6, [sp, #8]
 800acce:	a806      	add	r0, sp, #24
 800acd0:	210f      	movs	r1, #15
 800acd2:	f7ff ff69 	bl	800aba8 <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>
        remove(&listener);
 800acd6:	a906      	add	r1, sp, #24
 800acd8:	4620      	mov	r0, r4
 800acda:	f7ff fd7d 	bl	800a7d8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>
    int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
 800acde:	a806      	add	r0, sp, #24
 800ace0:	f7ff fbba 	bl	800a458 <_ZN5codal8ListenerD1Ev>
        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
 800ace4:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <_ZN5codal10MessageBusD1Ev+0x60>)
            status = 0;
            removeComponent();
 800ace6:	f104 0008 	add.w	r0, r4, #8
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
            status = 0;
 800acea:	81e5      	strh	r5, [r4, #14]
        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
 800acec:	60a3      	str	r3, [r4, #8]
            status = 0;
            removeComponent();
 800acee:	f7fe fd0d 	bl	800970c <_ZN5codal14CodalComponent15removeComponentEv>
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800acf2:	4620      	mov	r0, r4
 800acf4:	b00e      	add	sp, #56	; 0x38
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	0800ab55 	.word	0x0800ab55
 800acfc:	0800c420 	.word	0x0800c420
 800ad00:	0800c3f8 	.word	0x0800c3f8

0800ad04 <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800ad04:	f1a0 0008 	sub.w	r0, r0, #8
 800ad08:	f7ff bfca 	b.w	800aca0 <_ZN5codal10MessageBusD1Ev>

0800ad0c <_ZN5codal10MessageBusD0Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	4604      	mov	r4, r0
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800ad10:	f7ff ffc6 	bl	800aca0 <_ZN5codal10MessageBusD1Ev>
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7f8 fb7d 	bl	8003414 <_ZdlPv>
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	bf00      	nop

0800ad20 <_ZThn8_N5codal10MessageBusD0Ev>:
 800ad20:	f1a0 0008 	sub.w	r0, r0, #8
 800ad24:	f7ff bff2 	b.w	800ad0c <_ZN5codal10MessageBusD0Ev>

0800ad28 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>:
 800ad28:	4b08      	ldr	r3, [pc, #32]	; (800ad4c <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x24>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	b13b      	cbz	r3, 800ad3e <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x16>
 800ad2e:	6819      	ldr	r1, [r3, #0]
 800ad30:	b410      	push	{r4}
 800ad32:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x28>)
 800ad34:	680c      	ldr	r4, [r1, #0]
 800ad36:	4294      	cmp	r4, r2
 800ad38:	d102      	bne.n	800ad40 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0+0x18>
 800ad3a:	bc10      	pop	{r4}
 800ad3c:	4770      	bx	lr
 800ad3e:	4770      	bx	lr
 800ad40:	e890 0006 	ldmia.w	r0, {r1, r2}
 800ad44:	4618      	mov	r0, r3
 800ad46:	4623      	mov	r3, r4
 800ad48:	bc10      	pop	{r4}
 800ad4a:	4718      	bx	r3
 800ad4c:	20002e44 	.word	0x20002e44
 800ad50:	0800a745 	.word	0x0800a745

0800ad54 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
  *
  * // Create an event only, do not fire onto an EventModel.
  * Event evt(id,DEVICE_BUTTON_EVT_CLICK,CREATE_AND_FIRE);
  * @endcode
  */
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800ad54:	b538      	push	{r3, r4, r5, lr}
{
    this->source = source;
 800ad56:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800ad58:	8042      	strh	r2, [r0, #2]
  *
  * // Create an event only, do not fire onto an EventModel.
  * Event evt(id,DEVICE_BUTTON_EVT_CLICK,CREATE_AND_FIRE);
  * @endcode
  */
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	461d      	mov	r5, r3
{
    this->source = source;
    this->value = value;

#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    this->timestamp = system_timer_current_time();
 800ad5e:	f7ff fcbf 	bl	800a6e0 <_ZN5codal25system_timer_current_timeEv>
 800ad62:	6060      	str	r0, [r4, #4]
#else
    this->timestamp = system_timer_current_time_us();
#endif

    if(mode != CREATE_ONLY)
 800ad64:	b115      	cbz	r5, 800ad6c <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x18>
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7ff ffde 	bl	800ad28 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
        this->fire();
}
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}

0800ad70 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  *
  * // Create an event only, do not fire onto an EventModel.
  * Event evt(id,DEVICE_BUTTON_EVT_CLICK,CREATE_AND_FIRE);
  * @endcode
  */
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ad76:	4604      	mov	r4, r0
  {
      this->source = source;
 800ad78:	8001      	strh	r1, [r0, #0]
      this->value = value;
 800ad7a:	8042      	strh	r2, [r0, #2]
      this->timestamp = currentTimeUs;
 800ad7c:	6043      	str	r3, [r0, #4]

      if(mode != CREATE_ONLY)
 800ad7e:	b10d      	cbz	r5, 800ad84 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
 800ad80:	f7ff ffd2 	bl	800ad28 <_ZN5codal5EventC2EttNS_15EventLaunchModeE.part.0>
          this->fire();
  }
 800ad84:	4620      	mov	r0, r4
 800ad86:	bd38      	pop	{r3, r4, r5, pc}

0800ad88 <_ZN5codal5EventC1Ev>:
/**
  * Default constructor - initialises all values, and sets timestamp to the current time.
  */
Event::Event()
{
    this->source = 0;
 800ad88:	2300      	movs	r3, #0


/**
  * Default constructor - initialises all values, and sets timestamp to the current time.
  */
Event::Event()
 800ad8a:	b510      	push	{r4, lr}
{
    this->source = 0;
 800ad8c:	6003      	str	r3, [r0, #0]


/**
  * Default constructor - initialises all values, and sets timestamp to the current time.
  */
Event::Event()
 800ad8e:	4604      	mov	r4, r0
{
    this->source = 0;
    this->value = 0;

#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    this->timestamp = system_timer_current_time();
 800ad90:	f7ff fca6 	bl	800a6e0 <_ZN5codal25system_timer_current_timeEv>
 800ad94:	6060      	str	r0, [r4, #4]
#else
    this->timestamp = system_timer_current_time_us();
#endif
}
 800ad96:	4620      	mov	r0, r4
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	bf00      	nop

0800ad9c <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800ad9c:	b570      	push	{r4, r5, r6, lr}
/**
  * Default constructor - initialises all values, and sets timestamp to the current time.
  */
Event::Event()
{
    this->source = 0;
 800ad9e:	2600      	movs	r6, #0
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800ada0:	b082      	sub	sp, #8
 800ada2:	4604      	mov	r4, r0
 800ada4:	466d      	mov	r5, sp
/**
  * Default constructor - initialises all values, and sets timestamp to the current time.
  */
Event::Event()
{
    this->source = 0;
 800ada6:	6006      	str	r6, [r0, #0]
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800ada8:	e885 0006 	stmia.w	r5, {r1, r2}
{
    this->source = 0;
    this->value = 0;

#if CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    this->timestamp = system_timer_current_time();
 800adac:	f7ff fc98 	bl	800a6e0 <_ZN5codal25system_timer_current_timeEv>
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
{
    this->evt = evt;
 800adb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800adb4:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
}
 800adb8:	4620      	mov	r0, r4
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
{
    this->evt = evt;
    this->next = NULL;
 800adba:	60a6      	str	r6, [r4, #8]
}
 800adbc:	b002      	add	sp, #8
 800adbe:	bd70      	pop	{r4, r5, r6, pc}

0800adc0 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800adc0:	b430      	push	{r4, r5}
 800adc2:	b082      	sub	sp, #8
    invoke(object, method, e);
 800adc4:	4604      	mov	r4, r0
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800adc6:	466b      	mov	r3, sp
    invoke(object, method, e);
 800adc8:	6945      	ldr	r5, [r0, #20]
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800adca:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800adce:	f854 2b04 	ldr.w	r2, [r4], #4
 800add2:	46ac      	mov	ip, r5
 800add4:	4610      	mov	r0, r2
 800add6:	cb0c      	ldmia	r3, {r2, r3}
 800add8:	4621      	mov	r1, r4
}
 800adda:	b002      	add	sp, #8
 800addc:	bc30      	pop	{r4, r5}
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
    invoke(object, method, e);
 800adde:	4760      	bx	ip

0800ade0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800ade0:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800ade2:	6802      	ldr	r2, [r0, #0]
 800ade4:	680b      	ldr	r3, [r1, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d001      	beq.n	800adee <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800adea:	2000      	movs	r0, #0
}
 800adec:	bd08      	pop	{r3, pc}
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800adee:	3104      	adds	r1, #4
 800adf0:	2210      	movs	r2, #16
 800adf2:	3004      	adds	r0, #4
 800adf4:	f7f8 f93c 	bl	8003070 <memcmp>
 800adf8:	fab0 f080 	clz	r0, r0
 800adfc:	0940      	lsrs	r0, r0, #5
}
 800adfe:	bd08      	pop	{r3, pc}

0800ae00 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800ae00:	2000      	movs	r0, #0
 800ae02:	4770      	bx	lr

0800ae04 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800ae04:	2000      	movs	r0, #0
 800ae06:	4770      	bx	lr

0800ae08 <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800ae08:	2000      	movs	r0, #0
 800ae0a:	4770      	bx	lr

0800ae0c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
            int res = HAL_I2C_Init(&i2c);
            CODAL_ASSERT(res == HAL_OK);
#endif  //  TODO            
        }

        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4604      	mov	r4, r0
 800ae10:	460e      	mov	r6, r1
 800ae12:	4615      	mov	r5, r2
 800ae14:	f000 fba6 	bl	800b564 <_ZN5codal3I2CC1ERNS_3PinES2_>
 800ae18:	4b02      	ldr	r3, [pc, #8]	; (800ae24 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800ae1a:	e9c4 6501 	strd	r6, r5, [r4, #4]
 800ae1e:	6023      	str	r3, [r4, #0]
            i2c.Init.OwnAddress1 = 0xFE;
            i2c.Init.OwnAddress2 = 0xFE;

            needsInit = true;
#endif  //  TODO            
        }
 800ae20:	4620      	mov	r0, r4
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	0800c464 	.word	0x0800c464

0800ae28 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
    if(status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE))
        return ((TimedInterruptIn *)pin)->read();

    return ((DigitalIn *)pin)->read();
#endif  //  TODO
}
 800ae28:	2001      	movs	r0, #1
 800ae2a:	4770      	bx	lr

0800ae2c <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800ae2c:	7903      	ldrb	r3, [r0, #4]
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d506      	bpl.n	800ae40 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x14>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 800ae32:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
        return DEVICE_INVALID_PARAMETER;
 800ae36:	bf34      	ite	cc
 800ae38:	2000      	movcc	r0, #0
 800ae3a:	f46f 707a 	mvncs.w	r0, #1000	; 0x3e8
 800ae3e:	4770      	bx	lr
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
        return DEVICE_NOT_SUPPORTED;
 800ae40:	4800      	ldr	r0, [pc, #0]	; (800ae44 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>)
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
}
 800ae42:	4770      	bx	lr
 800ae44:	fffffc16 	.word	0xfffffc16

0800ae48 <_ZN5codal3_cm3Pin13setServoValueEiii>:
  *         if the given pin does not have analog capability.
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
 800ae48:	7900      	ldrb	r0, [r0, #4]
 800ae4a:	f010 0f02 	tst.w	r0, #2
 800ae4e:	d00c      	beq.n	800ae6a <_ZN5codal3_cm3Pin13setServoValueEiii+0x22>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
 800ae50:	2900      	cmp	r1, #0
 800ae52:	db07      	blt.n	800ae64 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	dd05      	ble.n	800ae64 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
 800ae58:	2b00      	cmp	r3, #0
    value = value * 1000;

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
 800ae5a:	bfd4      	ite	le
 800ae5c:	f46f 707a 	mvnle.w	r0, #1000	; 0x3e8
 800ae60:	2000      	movgt	r0, #0
 800ae62:	4770      	bx	lr
    if(!(PIN_CAPABILITY_ANALOG & capability))
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
        return DEVICE_INVALID_PARAMETER;
 800ae64:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
}
 800ae68:	4770      	bx	lr
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
        return DEVICE_NOT_SUPPORTED;
 800ae6a:	4801      	ldr	r0, [pc, #4]	; (800ae70 <_ZN5codal3_cm3Pin13setServoValueEiii+0x28>)
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	fffffc16 	.word	0xfffffc16

0800ae74 <_ZN5codal3_cm3Pin14getAnalogValueEv>:
    }

    //perform a read!
    return (((AnalogIn *)pin)->read_u16() >> 6);
#endif  //  TODO
}
 800ae74:	20e1      	movs	r0, #225	; 0xe1
 800ae76:	4770      	bx	lr

0800ae78 <_ZN5codal3_cm3Pin7isInputEv>:
  *
  * @return 1 if pin is an analog or digital input, 0 otherwise.
  */
int Pin::isInput()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800ae78:	8980      	ldrh	r0, [r0, #12]
 800ae7a:	f000 0005 	and.w	r0, r0, #5
}
 800ae7e:	3000      	adds	r0, #0
 800ae80:	bf18      	it	ne
 800ae82:	2001      	movne	r0, #1
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop

0800ae88 <_ZN5codal3_cm3Pin8isOutputEv>:
  *
  * @return 1 if pin is an analog or digital output, 0 otherwise.
  */
int Pin::isOutput()
{
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800ae88:	8980      	ldrh	r0, [r0, #12]
 800ae8a:	f000 000a 	and.w	r0, r0, #10
}
 800ae8e:	3000      	adds	r0, #0
 800ae90:	bf18      	it	ne
 800ae92:	2001      	movne	r0, #1
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop

0800ae98 <_ZN5codal3_cm3Pin9isDigitalEv>:
  *
  * @return 1 if pin is digital, 0 otherwise.
  */
int Pin::isDigital()
{
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800ae98:	8980      	ldrh	r0, [r0, #12]
}
 800ae9a:	f010 0003 	ands.w	r0, r0, #3
 800ae9e:	bf18      	it	ne
 800aea0:	2001      	movne	r0, #1
 800aea2:	4770      	bx	lr

0800aea4 <_ZN5codal3_cm3Pin8isAnalogEv>:
  *
  * @return 1 if pin is analog, 0 otherwise.
  */
int Pin::isAnalog()
{
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800aea4:	8980      	ldrh	r0, [r0, #12]
 800aea6:	f000 000c 	and.w	r0, r0, #12
}
 800aeaa:	3000      	adds	r0, #0
 800aeac:	bf18      	it	ne
 800aeae:	2001      	movne	r0, #1
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 800aeb4:	4800      	ldr	r0, [pc, #0]	; (800aeb8 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 800aeb6:	4770      	bx	lr
 800aeb8:	fffffc16 	.word	0xfffffc16

0800aebc <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 800aebc:	4800      	ldr	r0, [pc, #0]	; (800aec0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 800aebe:	4770      	bx	lr
 800aec0:	fffffc16 	.word	0xfffffc16

0800aec4 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800aec4:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800aec6:	2000      	movs	r0, #0
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop

0800aecc <_ZN5codal3_cm3Pin15setDigitalValueEi>:
  * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_BOTH);
  * P0.setDigitalValue(1); // P0 is now HI
  * @endcode
  */
int Pin::setDigitalValue(int value)
{
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4605      	mov	r5, r0
    debug_println("setDigitalValue"); debug_flush();
 800aed0:	4819      	ldr	r0, [pc, #100]	; (800af38 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x6c>)
  * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_BOTH);
  * P0.setDigitalValue(1); // P0 is now HI
  * @endcode
  */
int Pin::setDigitalValue(int value)
{
 800aed2:	460c      	mov	r4, r1
    debug_println("setDigitalValue"); debug_flush();
 800aed4:	f7f8 fa0e 	bl	80032f4 <debug_println>
 800aed8:	f7f8 f998 	bl	800320c <debug_flush>

    // Check if this pin has a digital mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800aedc:	792b      	ldrb	r3, [r5, #4]
 800aede:	07db      	lsls	r3, r3, #31
 800aee0:	d528      	bpl.n	800af34 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x68>
        return DEVICE_NOT_SUPPORTED;

    // Ensure we have a valid value.
    if (value < 0 || value > 1)
 800aee2:	2c01      	cmp	r4, #1
 800aee4:	d823      	bhi.n	800af2e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x62>
        return DEVICE_INVALID_PARAMETER;

    ////TODO: For now, setting any digital pin will affect the Blue Pill LED GPIO13.
	//  Set up Blue Pill LED GPIO (GPIO13).
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 800aee6:	f44f 7041 	mov.w	r0, #772	; 0x304
 800aeea:	f7f5 fb85 	bl	80005f8 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 800aeee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aef2:	2200      	movs	r2, #0
 800aef4:	2102      	movs	r1, #2
 800aef6:	4811      	ldr	r0, [pc, #68]	; (800af3c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x70>)
 800aef8:	f7f5 fc94 	bl	8000824 <gpio_set_mode>
    if (value) {
 800aefc:	b15c      	cbz	r4, 800af16 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4a>
        //  If value is 1, set the pin to HI.  For LED: Switches off the LED (i.e. reversed).
        debug_println("gpio_set(GPIOC, GPIO13)"); debug_flush();
 800aefe:	4810      	ldr	r0, [pc, #64]	; (800af40 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x74>)
 800af00:	f7f8 f9f8 	bl	80032f4 <debug_println>
 800af04:	f7f8 f982 	bl	800320c <debug_flush>
        gpio_set(GPIOC, GPIO13);
 800af08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af0c:	480b      	ldr	r0, [pc, #44]	; (800af3c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x70>)
 800af0e:	f7f5 fb5d 	bl	80005cc <gpio_set>
 800af12:	2000      	movs	r0, #0
    // Write the value.
    ((DigitalOut *)pin)->write(value);
#endif  //  TODO

    return DEVICE_OK;
}
 800af14:	bd38      	pop	{r3, r4, r5, pc}
        //  If value is 1, set the pin to HI.  For LED: Switches off the LED (i.e. reversed).
        debug_println("gpio_set(GPIOC, GPIO13)"); debug_flush();
        gpio_set(GPIOC, GPIO13);
    } else {
        //  If value is 0, set the pin to LO.  For LED: Switched on the LED (i.e. reversed).
        debug_println("gpio_clear(GPIOC, GPIO13)"); debug_flush();
 800af16:	480b      	ldr	r0, [pc, #44]	; (800af44 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x78>)
 800af18:	f7f8 f9ec 	bl	80032f4 <debug_println>
 800af1c:	f7f8 f976 	bl	800320c <debug_flush>
	    gpio_clear(GPIOC, GPIO13);
 800af20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af24:	4805      	ldr	r0, [pc, #20]	; (800af3c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x70>)
 800af26:	f7f5 fb53 	bl	80005d0 <gpio_clear>

    // Write the value.
    ((DigitalOut *)pin)->write(value);
#endif  //  TODO

    return DEVICE_OK;
 800af2a:	4620      	mov	r0, r4
}
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
    if(!(PIN_CAPABILITY_DIGITAL & capability))
        return DEVICE_NOT_SUPPORTED;

    // Ensure we have a valid value.
    if (value < 0 || value > 1)
        return DEVICE_INVALID_PARAMETER;
 800af2e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
    // Write the value.
    ((DigitalOut *)pin)->write(value);
#endif  //  TODO

    return DEVICE_OK;
}
 800af32:	bd38      	pop	{r3, r4, r5, pc}
{
    debug_println("setDigitalValue"); debug_flush();

    // Check if this pin has a digital mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
        return DEVICE_NOT_SUPPORTED;
 800af34:	4804      	ldr	r0, [pc, #16]	; (800af48 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x7c>)
    // Write the value.
    ((DigitalOut *)pin)->write(value);
#endif  //  TODO

    return DEVICE_OK;
}
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	0800c488 	.word	0x0800c488
 800af3c:	40011000 	.word	0x40011000
 800af40:	0800c498 	.word	0x0800c498
 800af44:	0800c4b0 	.word	0x0800c4b0
 800af48:	fffffc16 	.word	0xfffffc16

0800af4c <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
  *
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
 800af4c:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 800af4e:	6803      	ldr	r3, [r0, #0]
 800af50:	4a05      	ldr	r2, [pc, #20]	; (800af68 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x1c>)
 800af52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af54:	4293      	cmp	r3, r2
 800af56:	d101      	bne.n	800af5c <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x10>
 800af58:	4804      	ldr	r0, [pc, #16]	; (800af6c <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x20>)
}
 800af5a:	bd08      	pop	{r3, pc}
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
    return getAnalogPeriodUs()/1000;
 800af5c:	4798      	blx	r3
 800af5e:	4b04      	ldr	r3, [pc, #16]	; (800af70 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x24>)
 800af60:	fba3 3000 	umull	r3, r0, r3, r0
 800af64:	0980      	lsrs	r0, r0, #6
}
 800af66:	bd08      	pop	{r3, pc}
 800af68:	0800aebd 	.word	0x0800aebd
 800af6c:	00418936 	.word	0x00418936
 800af70:	10624dd3 	.word	0x10624dd3

0800af74 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
 * P0.getDigitalValue(PullUp); // P0 is either 0 or 1;
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
    setPull(pull);
 800af74:	6803      	ldr	r3, [r0, #0]
 * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_BOTH);
 * P0.getDigitalValue(PullUp); // P0 is either 0 or 1;
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
 800af76:	b570      	push	{r4, r5, r6, lr}
    setPull(pull);
 800af78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af7a:	4d0a      	ldr	r5, [pc, #40]	; (800afa4 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x30>)
 * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_BOTH);
 * P0.getDigitalValue(PullUp); // P0 is either 0 or 1;
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
 800af7c:	4604      	mov	r4, r0
 800af7e:	42aa      	cmp	r2, r5
 800af80:	d106      	bne.n	800af90 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x1c>
    setPull(pull);
    return getDigitalValue();
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	4a08      	ldr	r2, [pc, #32]	; (800afa8 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800af86:	60a1      	str	r1, [r4, #8]
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
    setPull(pull);
    return getDigitalValue();
 800af88:	4293      	cmp	r3, r2
 800af8a:	d107      	bne.n	800af9c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x28>
}
 800af8c:	2001      	movs	r0, #1
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 * P0.getDigitalValue(PullUp); // P0 is either 0 or 1;
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
    setPull(pull);
 800af90:	4790      	blx	r2
 800af92:	6823      	ldr	r3, [r4, #0]
    return getDigitalValue();
 800af94:	4a04      	ldr	r2, [pc, #16]	; (800afa8 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x34>)
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	4293      	cmp	r3, r2
 800af9a:	d0f7      	beq.n	800af8c <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE+0x18>
 800af9c:	4620      	mov	r0, r4
}
 800af9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @endcode
 */
int Pin::getDigitalValue(PullMode pull)
{
    setPull(pull);
    return getDigitalValue();
 800afa2:	4718      	bx	r3
 800afa4:	0800aec5 	.word	0x0800aec5
 800afa8:	0800ae29 	.word	0x0800ae29

0800afac <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800afac:	b508      	push	{r3, lr}
    switch(eventType)
 800afae:	2903      	cmp	r1, #3
 800afb0:	d817      	bhi.n	800afe2 <_ZN5codal3_cm3Pin7eventOnEi+0x36>
 800afb2:	e8df f001 	tbb	[pc, r1]
 800afb6:	070a      	.short	0x070a
 800afb8:	0207      	.short	0x0207
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 800afba:	6803      	ldr	r3, [r0, #0]
 800afbc:	4a0a      	ldr	r2, [pc, #40]	; (800afe8 <_ZN5codal3_cm3Pin7eventOnEi+0x3c>)
 800afbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d10b      	bne.n	800afdc <_ZN5codal3_cm3Pin7eventOnEi+0x30>
 800afc4:	2100      	movs	r1, #0
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 800afc6:	4608      	mov	r0, r1
 800afc8:	bd08      	pop	{r3, pc}
  *
  * @return DEVICE_OK on success.
  */
int Pin::disableEvents()
{
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800afca:	8983      	ldrh	r3, [r0, #12]
 800afcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0f8      	beq.n	800afc6 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
  * Disconnect any attached mBed IO from this pin.
  *
  * Used only when pin changes mode (i.e. Input/Output/Analog/Digital)
  */
void Pin::disconnect() {
    this->status = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	8183      	strh	r3, [r0, #12]
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 800afd8:	4608      	mov	r0, r1
 800afda:	bd08      	pop	{r3, pc}
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 800afdc:	4798      	blx	r3
 800afde:	2100      	movs	r1, #0
 800afe0:	e7f1      	b.n	800afc6 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
        case DEVICE_PIN_EVENT_NONE:
            disableEvents();
            break;

        default:
            return DEVICE_INVALID_PARAMETER;
 800afe2:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 800afe6:	e7ee      	b.n	800afc6 <_ZN5codal3_cm3Pin7eventOnEi+0x1a>
 800afe8:	0800aeb5 	.word	0x0800aeb5

0800afec <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>:
    int ret;

    if (!(status & IO_STATUS_ANALOG_OUT))
    {
        // Drop this pin into PWM mode, but with a LOW value.
        ret = setAnalogValue(0);
 800afec:	6802      	ldr	r2, [r0, #0]
 800afee:	4906      	ldr	r1, [pc, #24]	; (800b008 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x1c>)
 800aff0:	68d2      	ldr	r2, [r2, #12]
 800aff2:	428a      	cmp	r2, r1
 800aff4:	d106      	bne.n	800b004 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x18>
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800aff6:	7903      	ldrb	r3, [r0, #4]
        return DEVICE_NOT_SUPPORTED;
 800aff8:	4804      	ldr	r0, [pc, #16]	; (800b00c <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1+0x20>)
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 800affa:	f013 0f01 	tst.w	r3, #1
        return DEVICE_NOT_SUPPORTED;
 800affe:	bf18      	it	ne
 800b000:	2000      	movne	r0, #0
    }
#ifdef TODO
    return ((DynamicPwm *)pin)->setPeriodUs(period);
#endif //  TODO
    return 0;
}
 800b002:	4770      	bx	lr
    int ret;

    if (!(status & IO_STATUS_ANALOG_OUT))
    {
        // Drop this pin into PWM mode, but with a LOW value.
        ret = setAnalogValue(0);
 800b004:	2100      	movs	r1, #0
 800b006:	4710      	bx	r2
 800b008:	0800ae2d 	.word	0x0800ae2d
 800b00c:	fffffc16 	.word	0xfffffc16

0800b010 <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
  */
int Pin::setAnalogPeriodUs(int period)
{
    int ret;

    if (!(status & IO_STATUS_ANALOG_OUT))
 800b010:	8983      	ldrh	r3, [r0, #12]
 800b012:	071b      	lsls	r3, r3, #28
 800b014:	d401      	bmi.n	800b01a <_ZN5codal3_cm3Pin15setAnalogPeriodEi+0xa>
 800b016:	f7ff bfe9 	b.w	800afec <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
  *         given pin is not configured as an analog output.
  */
int Pin::setAnalogPeriod(int period)
{
    return setAnalogPeriodUs(period*1000);
}
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop

0800b020 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE>:
  * @code
  * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
  * @endcode
  */
//  Codal constructor
Pin::Pin(
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	4615      	mov	r5, r2
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800b026:	2000      	movs	r0, #0
 800b028:	460e      	mov	r6, r1
    PinCapability capability  //  e.g. PIN_CAPABILITY_DIGITAL
): codal::Pin(
        id,  //  Will be from 100 to 227
        name,          //  e.g. CM_PIN_PC13
        capability),   //  e.g. PIN_CAPABILITY_DIGITAL
    rcc(0), port(0), pin() {
 800b02a:	4a0e      	ldr	r2, [pc, #56]	; (800b064 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x44>)
            this->id = id;
            this->name = name;
            this->capability = capability;
 800b02c:	7123      	strb	r3, [r4, #4]
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
            this->id = id;
 800b02e:	81e1      	strh	r1, [r4, #14]
 800b030:	6022      	str	r2, [r4, #0]
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800b032:	81a0      	strh	r0, [r4, #12]
 800b034:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b038:	83a0      	strh	r0, [r4, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 800b03a:	60a0      	str	r0, [r4, #8]
            this->id = id;
            this->name = name;
 800b03c:	7425      	strb	r5, [r4, #16]
    // Power up in a disconnected, low power state.
    // If we're unused, this is how it will stay...
    this->status = 0;

    //  TODO
    debug_print("*** codal pin "); debug_print(id); debug_print(" name "); debug_print(name); debug_println(""); debug_flush();
 800b03e:	480a      	ldr	r0, [pc, #40]	; (800b068 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x48>)
 800b040:	f7f8 f952 	bl	80032e8 <debug_print>
 800b044:	4630      	mov	r0, r6
 800b046:	f7f8 f937 	bl	80032b8 <_Z11debug_printi>
 800b04a:	4808      	ldr	r0, [pc, #32]	; (800b06c <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x4c>)
 800b04c:	f7f8 f94c 	bl	80032e8 <debug_print>
 800b050:	4628      	mov	r0, r5
 800b052:	f7f8 f931 	bl	80032b8 <_Z11debug_printi>
 800b056:	4806      	ldr	r0, [pc, #24]	; (800b070 <_ZN5codal3_cm3PinC1Ei7PinNameNS_13PinCapabilityE+0x50>)
 800b058:	f7f8 f94c 	bl	80032f4 <debug_println>
 800b05c:	f7f8 f8d6 	bl	800320c <debug_flush>
}
 800b060:	4620      	mov	r0, r4
 800b062:	bd70      	pop	{r4, r5, r6, pc}
 800b064:	0800c4ec 	.word	0x0800c4ec
 800b068:	0800c4cc 	.word	0x0800c4cc
 800b06c:	0800c4dc 	.word	0x0800c4dc
 800b070:	0800c384 	.word	0x0800c384

0800b074 <_ZN5codal3_cm3Pin5setupEhh>:
}

void Pin::setup(
    CmPinMode mode,   //  e.g. GPIO_MODE_OUTPUT_2_MHZ
    CmPinCnf  cnf     //  e.g. GPIO_CNF_OUTPUT_PUSHPULL
) {
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	4604      	mov	r4, r0
 800b078:	460d      	mov	r5, r1
 800b07a:	4616      	mov	r6, r2
	//  Set up GPIO pin.
	//  Enable GPIO clock.
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800b07c:	8a80      	ldrh	r0, [r0, #20]
 800b07e:	f7f5 fabb 	bl	80005f8 <rcc_periph_clock_enable>
	//  Set mode and configuration of GPIO port and pin.
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800b082:	4632      	mov	r2, r6
 800b084:	4629      	mov	r1, r5
 800b086:	8ba3      	ldrh	r3, [r4, #28]
 800b088:	69a0      	ldr	r0, [r4, #24]
}
 800b08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
) {
	//  Set up GPIO pin.
	//  Enable GPIO clock.
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
	//  Set mode and configuration of GPIO port and pin.
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800b08e:	f7f5 bbc9 	b.w	8000824 <gpio_set_mode>
 800b092:	bf00      	nop

0800b094 <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
 800b094:	2000      	movs	r0, #0
 800b096:	4770      	bx	lr

0800b098 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
  */
int Pin::setAnalogPeriodUs(int period)
{
    int ret;

    if (!(status & IO_STATUS_ANALOG_OUT))
 800b098:	8983      	ldrh	r3, [r0, #12]
 800b09a:	071b      	lsls	r3, r3, #28
 800b09c:	d401      	bmi.n	800b0a2 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xa>
 800b09e:	f7ff bfa5 	b.w	800afec <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi.part.1>
    }
#ifdef TODO
    return ((DynamicPwm *)pin)->setPeriodUs(period);
#endif //  TODO
    return 0;
}
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop

0800b0a8 <_ZN5codal3_cm3SPI12setFrequencyEm>:
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	6141      	str	r1, [r0, #20]
 800b0ac:	f880 3020 	strb.w	r3, [r0, #32]
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	4770      	bx	lr

0800b0b4 <_ZN5codal3_cm3SPI5writeEi>:
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
 800b0ba:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b0be:	4618      	mov	r0, r3
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop

0800b0c4 <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4770      	bx	lr

0800b0c8 <_ZN5codal3_cm3SPI7setModeEii>:
 800b0c8:	b508      	push	{r3, lr}
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	2a08      	cmp	r2, #8
 800b0ce:	f880 3020 	strb.w	r3, [r0, #32]
 800b0d2:	d003      	beq.n	800b0dc <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800b0d4:	f240 308d 	movw	r0, #909	; 0x38d
 800b0d8:	f7f5 f96a 	bl	80003b0 <target_panic>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	bd08      	pop	{r3, pc}

0800b0e0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>:
 800b0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e4:	7c04      	ldrb	r4, [r0, #16]
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	4688      	mov	r8, r1
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4615      	mov	r5, r2
 800b0f0:	f000 f8ec 	bl	800b2cc <pinmap_peripheral>
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	d012      	beq.n	800b120 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x40>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 f903 	bl	800b308 <pinmap_mode>
 800b102:	4629      	mov	r1, r5
 800b104:	4681      	mov	r9, r0
 800b106:	4620      	mov	r0, r4
 800b108:	f000 f91a 	bl	800b340 <pinmap_cnf>
 800b10c:	4649      	mov	r1, r9
 800b10e:	4602      	mov	r2, r0
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ffaf 	bl	800b074 <_ZN5codal3_cm3Pin5setupEhh>
 800b116:	f1b8 0f00 	cmp.w	r8, #0
 800b11a:	d001      	beq.n	800b120 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x40>
 800b11c:	4546      	cmp	r6, r8
 800b11e:	d102      	bne.n	800b126 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0+0x46>
 800b120:	4630      	mov	r0, r6
 800b122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b126:	f240 308d 	movw	r0, #909	; 0x38d
 800b12a:	f7f5 f941 	bl	80003b0 <target_panic>
 800b12e:	4630      	mov	r0, r6
 800b130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b134 <_ZN5codal3_cm3SPI4initEv.part.1>:
 800b134:	b510      	push	{r4, lr}
 800b136:	2100      	movs	r1, #0
 800b138:	4604      	mov	r4, r0
 800b13a:	68c0      	ldr	r0, [r0, #12]
 800b13c:	f884 1020 	strb.w	r1, [r4, #32]
 800b140:	b110      	cbz	r0, 800b148 <_ZN5codal3_cm3SPI4initEv.part.1+0x14>
 800b142:	4a0e      	ldr	r2, [pc, #56]	; (800b17c <_ZN5codal3_cm3SPI4initEv.part.1+0x48>)
 800b144:	f7ff ffcc 	bl	800b0e0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
 800b148:	68a0      	ldr	r0, [r4, #8]
 800b14a:	b118      	cbz	r0, 800b154 <_ZN5codal3_cm3SPI4initEv.part.1+0x20>
 800b14c:	4a0c      	ldr	r2, [pc, #48]	; (800b180 <_ZN5codal3_cm3SPI4initEv.part.1+0x4c>)
 800b14e:	2100      	movs	r1, #0
 800b150:	f7ff ffc6 	bl	800b0e0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
 800b154:	6860      	ldr	r0, [r4, #4]
 800b156:	b118      	cbz	r0, 800b160 <_ZN5codal3_cm3SPI4initEv.part.1+0x2c>
 800b158:	4a0a      	ldr	r2, [pc, #40]	; (800b184 <_ZN5codal3_cm3SPI4initEv.part.1+0x50>)
 800b15a:	2100      	movs	r1, #0
 800b15c:	f7ff ffc0 	bl	800b0e0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
 800b160:	6920      	ldr	r0, [r4, #16]
 800b162:	b118      	cbz	r0, 800b16c <_ZN5codal3_cm3SPI4initEv.part.1+0x38>
 800b164:	4a08      	ldr	r2, [pc, #32]	; (800b188 <_ZN5codal3_cm3SPI4initEv.part.1+0x54>)
 800b166:	2100      	movs	r1, #0
 800b168:	f7ff ffba 	bl	800b0e0 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap.part.0>
 800b16c:	4807      	ldr	r0, [pc, #28]	; (800b18c <_ZN5codal3_cm3SPI4initEv.part.1+0x58>)
 800b16e:	f7f8 f8c1 	bl	80032f4 <debug_println>
 800b172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b176:	f7f8 b849 	b.w	800320c <debug_flush>
 800b17a:	bf00      	nop
 800b17c:	0800c6dc 	.word	0x0800c6dc
 800b180:	0800c604 	.word	0x0800c604
 800b184:	0800c64c 	.word	0x0800c64c
 800b188:	0800c694 	.word	0x0800c694
 800b18c:	0800c538 	.word	0x0800c538

0800b190 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:
            return res;
#endif  //  TODO
        }

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            return peri;
        }

        void SPI::init() {
            auto res = HAL_OK;
            if (!needsInit) { return; }
 800b192:	f890 3020 	ldrb.w	r3, [r0, #32]
            return res;
#endif  //  TODO
        }

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800b196:	4604      	mov	r4, r0
 800b198:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b19c:	4615      	mov	r5, r2
            return peri;
        }

        void SPI::init() {
            auto res = HAL_OK;
            if (!needsInit) { return; }
 800b19e:	b10b      	cbz	r3, 800b1a4 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x14>
 800b1a0:	f7ff ffc8 	bl	800b134 <_ZN5codal3_cm3SPI4initEv.part.1>
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
            int res = HAL_OK;
            init();
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
            this->doneHandlerArg = arg;
 800b1a4:	e9c4 7606 	strd	r7, r6, [r4, #24]
            if (txSize && rxSize) {
 800b1a8:	b11d      	cbz	r5, 800b1b2 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x22>
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	b10b      	cbz	r3, 800b1b2 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x22>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	d101      	bne.n	800b1b6 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x26>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            init();
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
            this->doneHandlerArg = arg;
            if (txSize && rxSize) {
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800b1b6:	f240 308d 	movw	r0, #909	; 0x38d
 800b1ba:	f7f5 f8f9 	bl	80003b0 <target_panic>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800b1be:	2000      	movs	r0, #0
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c2:	bf00      	nop

0800b1c4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_>:
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }

        //  Codal constructor.  Called by pxt-maker.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	4616      	mov	r6, r2
 800b1c8:	461d      	mov	r5, r3
            this->mosi = &mosi;
            this->miso = &miso;
            this->sclk = &sclk;
            this->nss = NULL;
 800b1ca:	2300      	movs	r3, #0
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }

        //  Codal constructor.  Called by pxt-maker.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4a0f      	ldr	r2, [pc, #60]	; (800b210 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x4c>)
            this->mosi = &mosi;
            this->miso = &miso;
 800b1d2:	e9c0 1601 	strd	r1, r6, [r0, #4]
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }

        //  Codal constructor.  Called by pxt-maker.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
 800b1d6:	6002      	str	r2, [r0, #0]
            this->mosi = &mosi;
            this->miso = &miso;
            this->sclk = &sclk;
            this->nss = NULL;
 800b1d8:	6103      	str	r3, [r0, #16]

        //  Codal constructor.  Called by pxt-maker.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk) : codal::SPI() {
            this->mosi = &mosi;
            this->miso = &miso;
            this->sclk = &sclk;
 800b1da:	60c5      	str	r5, [r0, #12]
            this->nss = NULL;
            //  TODO
            debug_print("*** codal spi mosi "); debug_print(mosi.name); 
 800b1dc:	480d      	ldr	r0, [pc, #52]	; (800b214 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x50>)
 800b1de:	f7f8 f883 	bl	80032e8 <debug_print>
 800b1e2:	7c38      	ldrb	r0, [r7, #16]
 800b1e4:	f7f8 f868 	bl	80032b8 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 800b1e8:	480b      	ldr	r0, [pc, #44]	; (800b218 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x54>)
 800b1ea:	f7f8 f87d 	bl	80032e8 <debug_print>
 800b1ee:	7c30      	ldrb	r0, [r6, #16]
 800b1f0:	f7f8 f862 	bl	80032b8 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 800b1f4:	4809      	ldr	r0, [pc, #36]	; (800b21c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x58>)
 800b1f6:	f7f8 f877 	bl	80032e8 <debug_print>
 800b1fa:	7c28      	ldrb	r0, [r5, #16]
 800b1fc:	f7f8 f85c 	bl	80032b8 <_Z11debug_printi>
            debug_println(""); debug_flush();
 800b200:	4807      	ldr	r0, [pc, #28]	; (800b220 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_+0x5c>)
 800b202:	f7f8 f877 	bl	80032f4 <debug_println>
 800b206:	f7f8 f801 	bl	800320c <debug_flush>
        }
 800b20a:	4620      	mov	r0, r4
 800b20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b20e:	bf00      	nop
 800b210:	0800c574 	.word	0x0800c574
 800b214:	0800c548 	.word	0x0800c548
 800b218:	0800c55c 	.word	0x0800c55c
 800b21c:	0800c564 	.word	0x0800c564
 800b220:	0800c384 	.word	0x0800c384

0800b224 <_ZN5codal3_cm13tick_callbackEv>:
        }

        void tick_callback() {
            //  Will be called at every millisecond tick.  Needed to keep Codal scheduler running.
            //  TODO: Remove this if alarm is working.
            if (!Timer::instance) { return; }  //  No timer to trigger.
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <_ZN5codal3_cm13tick_callbackEv+0xc>)
 800b226:	6818      	ldr	r0, [r3, #0]
 800b228:	b108      	cbz	r0, 800b22e <_ZN5codal3_cm13tick_callbackEv+0xa>
            Timer::instance->trigger();
 800b22a:	f7ff b9ed 	b.w	800a608 <_ZN5codal5Timer7triggerEv>
        }
 800b22e:	4770      	bx	lr
 800b230:	20002e48 	.word	0x20002e48

0800b234 <_ZN5codal3_cm14alarm_callbackEv>:
 800b234:	f7ff bff6 	b.w	800b224 <_ZN5codal3_cm13tick_callbackEv>

0800b238 <_ZN5codal3_cm5Timer9triggerInEm>:
            NVIC_EnableIRQ(TIM5_IRQn);
            HAL_TIM_OC_Start(&TimHandle, TIM_CHANNEL_1);
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
 800b238:	b510      	push	{r4, lr}
 800b23a:	460c      	mov	r4, r1
            //  TODO: Set alarm for millis() + t.  If alarm is already set and alarm > millis() and alarm < millis() + t, don't set alarm.
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); ////
            platform_set_alarm(millis() + t);
 800b23c:	f7f8 f9d4 	bl	80035e8 <millis>
 800b240:	4420      	add	r0, r4
            __HAL_TIM_SET_COMPARE(&TimHandle, TIM_CHANNEL_1,
                                (uint32_t)(__HAL_TIM_GET_COUNTER(&TimHandle) + t));
            __HAL_TIM_ENABLE_IT(&TimHandle, TIM_IT_CC1);
            target_enable_irq();
#endif  //  TODO
        }
 800b242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
            //  TODO: Set alarm for millis() + t.  If alarm is already set and alarm > millis() and alarm < millis() + t, don't set alarm.
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); ////
            platform_set_alarm(millis() + t);
 800b246:	f7f8 b99d 	b.w	8003584 <platform_set_alarm>
 800b24a:	bf00      	nop

0800b24c <_ZN5codal3_cm5Timer11syncRequestEv>:
#endif  //  TODO
        }

        // extern "C" uint32_t uwTick;  //  Elapsed milliseconds.

        void Timer::syncRequest() {
 800b24c:	b510      	push	{r4, lr}
 800b24e:	4604      	mov	r4, r0
            target_disable_irq();
 800b250:	f7f5 f85a 	bl	8000308 <target_disable_irq>
            uint32_t curr = millis();
 800b254:	f7f8 f9c8 	bl	80035e8 <millis>
 800b258:	4602      	mov	r2, r0
            uint32_t delta = curr - this->prev;  //  In milliseconds.

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800b25a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        // extern "C" uint32_t uwTick;  //  Elapsed milliseconds.

        void Timer::syncRequest() {
            target_disable_irq();
            uint32_t curr = millis();
            uint32_t delta = curr - this->prev;  //  In milliseconds.
 800b25e:	69e3      	ldr	r3, [r4, #28]

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800b260:	4620      	mov	r0, r4
        // extern "C" uint32_t uwTick;  //  Elapsed milliseconds.

        void Timer::syncRequest() {
            target_disable_irq();
            uint32_t curr = millis();
            uint32_t delta = curr - this->prev;  //  In milliseconds.
 800b262:	1ad3      	subs	r3, r2, r3

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
 800b264:	61e2      	str	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800b266:	fb01 f103 	mul.w	r1, r1, r3
 800b26a:	f7ff f9b5 	bl	800a5d8 <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 800b26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
            target_enable_irq();            
 800b272:	f7f5 b847 	b.w	8000304 <target_enable_irq>
 800b276:	bf00      	nop

0800b278 <_ZN5codal3_cm5Timer4initEv>:
            //  Will be called when an alarm is triggered.  Needed to keep Codal scheduler running.
            if (!Timer::instance) { return; }  //  No timer to trigger.
            Timer::instance->trigger();
        }

        void Timer::init() {
 800b278:	b510      	push	{r4, lr}
 800b27a:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 800b27c:	4806      	ldr	r0, [pc, #24]	; (800b298 <_ZN5codal3_cm5Timer4initEv+0x20>)
 800b27e:	f7f8 f839 	bl	80032f4 <debug_println>
            this->prev = millis();
 800b282:	f7f8 f9b1 	bl	80035e8 <millis>
 800b286:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 800b288:	4804      	ldr	r0, [pc, #16]	; (800b29c <_ZN5codal3_cm5Timer4initEv+0x24>)
 800b28a:	f7f5 f803 	bl	8000294 <target_set_tick_callback>

            NVIC_SetPriority(TIM5_IRQn, 0);
            NVIC_EnableIRQ(TIM5_IRQn);
            HAL_TIM_OC_Start(&TimHandle, TIM_CHANNEL_1);
#endif  //  TODO
        }
 800b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        void Timer::init() {
            debug_println("timer init"); ////
            this->prev = millis();
            target_set_tick_callback(tick_callback);
            target_set_alarm_callback(alarm_callback);
 800b292:	4803      	ldr	r0, [pc, #12]	; (800b2a0 <_ZN5codal3_cm5Timer4initEv+0x28>)
 800b294:	f7f5 b804 	b.w	80002a0 <target_set_alarm_callback>
 800b298:	0800c588 	.word	0x0800c588
 800b29c:	0800b225 	.word	0x0800b225
 800b2a0:	0800b235 	.word	0x0800b235

0800b2a4 <_ZN5codal3_cm5TimerC1Ev>:
{
    namespace _cm
    {
        Timer *Timer::instance;

        Timer::Timer() : codal::Timer() {
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	f7ff f922 	bl	800a4f0 <_ZN5codal5TimerC1Ev>
            instance = this;
            this->prev = 0;
 800b2ac:	2200      	movs	r2, #0
{
    namespace _cm
    {
        Timer *Timer::instance;

        Timer::Timer() : codal::Timer() {
 800b2ae:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <_ZN5codal3_cm5TimerC1Ev+0x20>)
            instance = this;
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <_ZN5codal3_cm5TimerC1Ev+0x24>)
{
    namespace _cm
    {
        Timer *Timer::instance;

        Timer::Timer() : codal::Timer() {
 800b2b2:	6021      	str	r1, [r4, #0]
            instance = this;
            this->prev = 0;
            init();
 800b2b4:	4620      	mov	r0, r4
    {
        Timer *Timer::instance;

        Timer::Timer() : codal::Timer() {
            instance = this;
            this->prev = 0;
 800b2b6:	61e2      	str	r2, [r4, #28]
    namespace _cm
    {
        Timer *Timer::instance;

        Timer::Timer() : codal::Timer() {
            instance = this;
 800b2b8:	601c      	str	r4, [r3, #0]
            this->prev = 0;
            init();
 800b2ba:	f7ff ffdd 	bl	800b278 <_ZN5codal3_cm5Timer4initEv>
#ifdef TODO
            memset(&TimHandle, 0, sizeof(TimHandle));
#endif  //  TODO
        }
 800b2be:	4620      	mov	r0, r4
 800b2c0:	bd10      	pop	{r4, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0800c59c 	.word	0x0800c59c
 800b2c8:	20002e48 	.word	0x20002e48

0800b2cc <pinmap_peripheral>:
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800b2cc:	28ff      	cmp	r0, #255	; 0xff
 800b2ce:	d016      	beq.n	800b2fe <pinmap_peripheral+0x32>

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap *map);
static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap *map);
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 800b2d0:	b508      	push	{r3, lr}
    return cnf;
}

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800b2d2:	780b      	ldrb	r3, [r1, #0]
 800b2d4:	2bff      	cmp	r3, #255	; 0xff
 800b2d6:	d104      	bne.n	800b2e2 <pinmap_peripheral+0x16>
 800b2d8:	e009      	b.n	800b2ee <pinmap_peripheral+0x22>
 800b2da:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800b2de:	2bff      	cmp	r3, #255	; 0xff
 800b2e0:	d005      	beq.n	800b2ee <pinmap_peripheral+0x22>
        if (map->pin == pin) { return map->peripheral; }
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	d1f9      	bne.n	800b2da <pinmap_peripheral+0xe>
 800b2e6:	6848      	ldr	r0, [r1, #4]
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }

    peripheral = pinmap_find_peripheral(pin, map);
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d000      	beq.n	800b2ee <pinmap_peripheral+0x22>
        { error("pinmap not found for peripheral"); }
    return peripheral;
}
 800b2ec:	bd08      	pop	{r3, pc}
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }

    peripheral = pinmap_find_peripheral(pin, map);
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
        { error("pinmap not found for peripheral"); }
 800b2ee:	4805      	ldr	r0, [pc, #20]	; (800b304 <pinmap_peripheral+0x38>)
 800b2f0:	f7f8 f800 	bl	80032f4 <debug_println>
 800b2f4:	f7f7 ff8a 	bl	800320c <debug_flush>
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return peripheral;
}
 800b2fc:	bd08      	pop	{r3, pc}
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 800b2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    peripheral = pinmap_find_peripheral(pin, map);
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
        { error("pinmap not found for peripheral"); }
    return peripheral;
}
 800b302:	4770      	bx	lr
 800b304:	0800c5e4 	.word	0x0800c5e4

0800b308 <pinmap_mode>:

CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 800b308:	28ff      	cmp	r0, #255	; 0xff
 800b30a:	d015      	beq.n	800b338 <pinmap_mode+0x30>
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
        { error("pinmap not found for peripheral"); }
    return peripheral;
}

CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 800b30c:	b508      	push	{r3, lr}
    return CM_PERIPHERAL_NC;
}

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800b30e:	780b      	ldrb	r3, [r1, #0]
 800b310:	2bff      	cmp	r3, #255	; 0xff
 800b312:	d104      	bne.n	800b31e <pinmap_mode+0x16>
 800b314:	e009      	b.n	800b32a <pinmap_mode+0x22>
 800b316:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800b31a:	2bff      	cmp	r3, #255	; 0xff
 800b31c:	d005      	beq.n	800b32a <pinmap_mode+0x22>
        if (map->pin == pin) { return map->mode; }
 800b31e:	4298      	cmp	r0, r3
 800b320:	d1f9      	bne.n	800b316 <pinmap_mode+0xe>
 800b322:	7a48      	ldrb	r0, [r1, #9]
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }

    mode = pinmap_find_mode(pin, map);
    if (mode == CM_PINMODE_NC) // no mapping available
 800b324:	28ff      	cmp	r0, #255	; 0xff
 800b326:	d000      	beq.n	800b32a <pinmap_mode+0x22>
        { error("pinmap not found for mode"); }
    return mode;
}
 800b328:	bd08      	pop	{r3, pc}
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }

    mode = pinmap_find_mode(pin, map);
    if (mode == CM_PINMODE_NC) // no mapping available
        { error("pinmap not found for mode"); }
 800b32a:	4804      	ldr	r0, [pc, #16]	; (800b33c <pinmap_mode+0x34>)
 800b32c:	f7f7 ffe2 	bl	80032f4 <debug_println>
 800b330:	f7f7 ff6c 	bl	800320c <debug_flush>
 800b334:	20ff      	movs	r0, #255	; 0xff
    return mode;
}
 800b336:	bd08      	pop	{r3, pc}
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	0800c5c8 	.word	0x0800c5c8

0800b340 <pinmap_cnf>:

CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 800b340:	28ff      	cmp	r0, #255	; 0xff
 800b342:	d015      	beq.n	800b370 <pinmap_cnf+0x30>
    if (mode == CM_PINMODE_NC) // no mapping available
        { error("pinmap not found for mode"); }
    return mode;
}

CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 800b344:	b508      	push	{r3, lr}
    return CM_PINMODE_NC;
}

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800b346:	780b      	ldrb	r3, [r1, #0]
 800b348:	2bff      	cmp	r3, #255	; 0xff
 800b34a:	d104      	bne.n	800b356 <pinmap_cnf+0x16>
 800b34c:	e009      	b.n	800b362 <pinmap_cnf+0x22>
 800b34e:	f811 3f0c 	ldrb.w	r3, [r1, #12]!
 800b352:	2bff      	cmp	r3, #255	; 0xff
 800b354:	d005      	beq.n	800b362 <pinmap_cnf+0x22>
        if (map->pin == pin) { return map->cnf; }
 800b356:	4298      	cmp	r0, r3
 800b358:	d1f9      	bne.n	800b34e <pinmap_cnf+0xe>
 800b35a:	7a88      	ldrb	r0, [r1, #10]
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }

    cnf = pinmap_find_cnf(pin, map);
    if (cnf == CM_PINCNF_NC) // no mapping available
 800b35c:	28ff      	cmp	r0, #255	; 0xff
 800b35e:	d000      	beq.n	800b362 <pinmap_cnf+0x22>
        { error("pinmap not found for cnf"); }
    return cnf;
}
 800b360:	bd08      	pop	{r3, pc}
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }

    cnf = pinmap_find_cnf(pin, map);
    if (cnf == CM_PINCNF_NC) // no mapping available
        { error("pinmap not found for cnf"); }
 800b362:	4804      	ldr	r0, [pc, #16]	; (800b374 <pinmap_cnf+0x34>)
 800b364:	f7f7 ffc6 	bl	80032f4 <debug_println>
 800b368:	f7f7 ff50 	bl	800320c <debug_flush>
 800b36c:	20ff      	movs	r0, #255	; 0xff
    return cnf;
}
 800b36e:	bd08      	pop	{r3, pc}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	0800c5ac 	.word	0x0800c5ac

0800b378 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800b378:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <_ZN5codal3I2C4stopEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800b380:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop

0800b388 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800b388:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop

0800b390 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800b390:	b530      	push	{r4, r5, lr}
      uint8_t command[2];
      command[0] = reg;
      command[1] = value;

      return write(address, command, 2);
 800b392:	2500      	movs	r5, #0
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800b394:	b085      	sub	sp, #20
      uint8_t command[2];
      command[0] = reg;
      command[1] = value;

      return write(address, command, 2);
 800b396:	6804      	ldr	r4, [r0, #0]
 800b398:	9500      	str	r5, [sp, #0]
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
      uint8_t command[2];
      command[0] = reg;
 800b39a:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800b39e:	f88d 300d 	strb.w	r3, [sp, #13]

      return write(address, command, 2);
 800b3a2:	6964      	ldr	r4, [r4, #20]
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	aa03      	add	r2, sp, #12
 800b3a8:	47a0      	blx	r4
}
 800b3aa:	b005      	add	sp, #20
 800b3ac:	bd30      	pop	{r4, r5, pc}
 800b3ae:	bf00      	nop

0800b3b0 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	b086      	sub	sp, #24
    int result;

    if (repeated)
 800b3b6:	6806      	ldr	r6, [r0, #0]
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800b3b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800b3bc:	4604      	mov	r4, r0
 800b3be:	4698      	mov	r8, r3
 800b3c0:	f88d 200f 	strb.w	r2, [sp, #15]
 800b3c4:	6976      	ldr	r6, [r6, #20]
 800b3c6:	460f      	mov	r7, r1
    int result;

    if (repeated)
 800b3c8:	b185      	cbz	r5, 800b3ec <_ZN5codal3I2C12readRegisterEthPhib+0x3c>
        result = write(address, &reg, 1, true);
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	f10d 020f 	add.w	r2, sp, #15
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	47b0      	blx	r6
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800b3d4:	b938      	cbnz	r0, 800b3e6 <_ZN5codal3I2C12readRegisterEthPhib+0x36>
        return result;

    result = read(address, data, length);
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	9000      	str	r0, [sp, #0]
 800b3da:	69dd      	ldr	r5, [r3, #28]
 800b3dc:	4642      	mov	r2, r8
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3e4:	47a8      	blx	r5
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800b3e6:	b006      	add	sp, #24
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int result;

    if (repeated)
        result = write(address, &reg, 1, true);
    else
        result = write(address, reg);
 800b3ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t data)
  {
      return write(address, &data, 1);
 800b3f0:	9500      	str	r5, [sp, #0]
 800b3f2:	f88d 3017 	strb.w	r3, [sp, #23]
 800b3f6:	f10d 0217 	add.w	r2, sp, #23
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	47b0      	blx	r6
 800b3fe:	e7e9      	b.n	800b3d4 <_ZN5codal3I2C12readRegisterEthPhib+0x24>

0800b400 <_ZN5codal3I2C5writeEtPhib>:
  * @param len the number of bytes to write
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
 800b400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
      if (data == NULL || len <= 0)
 800b408:	2a00      	cmp	r2, #0
 800b40a:	d03c      	beq.n	800b486 <_ZN5codal3I2C5writeEtPhib+0x86>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd3a      	ble.n	800b486 <_ZN5codal3I2C5writeEtPhib+0x86>
 800b410:	4688      	mov	r8, r1
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();
 800b412:	6801      	ldr	r1, [r0, #0]
 800b414:	461e      	mov	r6, r3
 800b416:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800b48c <_ZN5codal3I2C5writeEtPhib+0x8c>
 800b41a:	684b      	ldr	r3, [r1, #4]
 800b41c:	4682      	mov	sl, r0
 800b41e:	454b      	cmp	r3, r9
 800b420:	4614      	mov	r4, r2
 800b422:	d128      	bne.n	800b476 <_ZN5codal3I2C5writeEtPhib+0x76>

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);
 800b424:	68cd      	ldr	r5, [r1, #12]
 800b426:	f8df b068 	ldr.w	fp, [pc, #104]	; 800b490 <_ZN5codal3I2C5writeEtPhib+0x90>
 800b42a:	455d      	cmp	r5, fp
 800b42c:	d11b      	bne.n	800b466 <_ZN5codal3I2C5writeEtPhib+0x66>
 800b42e:	4426      	add	r6, r4
 800b430:	e005      	b.n	800b43e <_ZN5codal3I2C5writeEtPhib+0x3e>
 800b432:	3401      	adds	r4, #1

      // Send the body of the data
      for (int i = 0; i < len; i++)
 800b434:	42b4      	cmp	r4, r6
 800b436:	d00a      	beq.n	800b44e <_ZN5codal3I2C5writeEtPhib+0x4e>
 800b438:	f8da 3000 	ldr.w	r3, [sl]
 800b43c:	68dd      	ldr	r5, [r3, #12]
          write(data[i]);
 800b43e:	455d      	cmp	r5, fp
 800b440:	d0f7      	beq.n	800b432 <_ZN5codal3I2C5writeEtPhib+0x32>
 800b442:	7821      	ldrb	r1, [r4, #0]
 800b444:	4650      	mov	r0, sl
 800b446:	3401      	adds	r4, #1
 800b448:	47a8      	blx	r5

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);

      // Send the body of the data
      for (int i = 0; i < len; i++)
 800b44a:	42b4      	cmp	r4, r6
 800b44c:	d1f4      	bne.n	800b438 <_ZN5codal3I2C5writeEtPhib+0x38>
          write(data[i]);

      // Send a stop condition
      if (!repeated)
 800b44e:	b93f      	cbnz	r7, 800b460 <_ZN5codal3I2C5writeEtPhib+0x60>
          stop();
 800b450:	f8da 3000 	ldr.w	r3, [sl]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	454b      	cmp	r3, r9
 800b458:	d111      	bne.n	800b47e <_ZN5codal3I2C5writeEtPhib+0x7e>

      return DEVICE_OK;
 800b45a:	4638      	mov	r0, r7
  }
 800b45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // Send a stop condition
      if (!repeated)
          stop();

      return DEVICE_OK;
 800b460:	2000      	movs	r0, #0
  }
 800b462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);
 800b466:	fa5f f188 	uxtb.w	r1, r8
 800b46a:	4650      	mov	r0, sl
 800b46c:	47a8      	blx	r5
 800b46e:	f8da 3000 	ldr.w	r3, [sl]
 800b472:	68dd      	ldr	r5, [r3, #12]
 800b474:	e7db      	b.n	800b42e <_ZN5codal3I2C5writeEtPhib+0x2e>
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
      if (data == NULL || len <= 0)
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();
 800b476:	4798      	blx	r3
 800b478:	f8da 1000 	ldr.w	r1, [sl]
 800b47c:	e7d2      	b.n	800b424 <_ZN5codal3I2C5writeEtPhib+0x24>
      for (int i = 0; i < len; i++)
          write(data[i]);

      // Send a stop condition
      if (!repeated)
          stop();
 800b47e:	4650      	mov	r0, sl
 800b480:	4798      	blx	r3
 800b482:	4638      	mov	r0, r7
 800b484:	e7ed      	b.n	800b462 <_ZN5codal3I2C5writeEtPhib+0x62>
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
      if (data == NULL || len <= 0)
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800b486:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800b48a:	e7ea      	b.n	800b462 <_ZN5codal3I2C5writeEtPhib+0x62>
 800b48c:	0800b381 	.word	0x0800b381
 800b490:	0800b389 	.word	0x0800b389

0800b494 <_ZN5codal3I2C4readEtPhib>:
* @param len the number of bytes to read into the buffer
*
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	b083      	sub	sp, #12
 800b49a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    int i = 0;

    if (data == NULL || len <= 0)
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d059      	beq.n	800b556 <_ZN5codal3I2C4readEtPhib+0xc2>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	461e      	mov	r6, r3
 800b4a6:	dd56      	ble.n	800b556 <_ZN5codal3I2C4readEtPhib+0xc2>
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800b4a8:	6805      	ldr	r5, [r0, #0]
 800b4aa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800b55c <_ZN5codal3I2C4readEtPhib+0xc8>
 800b4ae:	686b      	ldr	r3, [r5, #4]
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	454b      	cmp	r3, r9
 800b4b4:	4692      	mov	sl, r2
 800b4b6:	d13a      	bne.n	800b52e <_ZN5codal3I2C4readEtPhib+0x9a>

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));
 800b4b8:	68eb      	ldr	r3, [r5, #12]
 800b4ba:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800b560 <_ZN5codal3I2C4readEtPhib+0xcc>
 800b4be:	455b      	cmp	r3, fp
 800b4c0:	d13e      	bne.n	800b540 <_ZN5codal3I2C4readEtPhib+0xac>

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800b4c2:	1e73      	subs	r3, r6, #1
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	d018      	beq.n	800b4fa <_ZN5codal3I2C4readEtPhib+0x66>
 800b4c8:	3e02      	subs	r6, #2
 800b4ca:	4456      	add	r6, sl
 800b4cc:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 800b4d0:	e005      	b.n	800b4de <_ZN5codal3I2C4readEtPhib+0x4a>
        data[i] = read();
 800b4d2:	200b      	movs	r0, #11
 800b4d4:	f804 0f01 	strb.w	r0, [r4, #1]!

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800b4d8:	42a6      	cmp	r6, r4
 800b4da:	d00b      	beq.n	800b4f4 <_ZN5codal3I2C4readEtPhib+0x60>
 800b4dc:	683d      	ldr	r5, [r7, #0]
        data[i] = read();
 800b4de:	692b      	ldr	r3, [r5, #16]
 800b4e0:	455b      	cmp	r3, fp
 800b4e2:	d0f6      	beq.n	800b4d2 <_ZN5codal3I2C4readEtPhib+0x3e>
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	4798      	blx	r3
 800b4ea:	b2c0      	uxtb	r0, r0
 800b4ec:	f804 0f01 	strb.w	r0, [r4, #1]!

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800b4f0:	42a6      	cmp	r6, r4
 800b4f2:	d1f3      	bne.n	800b4dc <_ZN5codal3I2C4readEtPhib+0x48>
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	683d      	ldr	r5, [r7, #0]
 800b4f8:	449a      	add	sl, r3
        data[i] = read();

    data[i] = read(NACK);
 800b4fa:	692b      	ldr	r3, [r5, #16]
 800b4fc:	455b      	cmp	r3, fp
 800b4fe:	d111      	bne.n	800b524 <_ZN5codal3I2C4readEtPhib+0x90>
 800b500:	200b      	movs	r0, #11
 800b502:	f88a 0000 	strb.w	r0, [sl]

    // Send a stop condition
    if (!repeated)
 800b506:	f1b8 0f00 	cmp.w	r8, #0
 800b50a:	d107      	bne.n	800b51c <_ZN5codal3I2C4readEtPhib+0x88>
        stop();
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	454b      	cmp	r3, r9
 800b512:	d11c      	bne.n	800b54e <_ZN5codal3I2C4readEtPhib+0xba>
 800b514:	4640      	mov	r0, r8

    return DEVICE_OK;
}
 800b516:	b003      	add	sp, #12
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data[i] = read();

    data[i] = read(NACK);

    // Send a stop condition
    if (!repeated)
 800b51c:	2000      	movs	r0, #0
        stop();

    return DEVICE_OK;
}
 800b51e:	b003      	add	sp, #12
 800b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // Read the body of the data
    for (i = 0; i < len-1; i++)
        data[i] = read();

    data[i] = read(NACK);
 800b524:	2101      	movs	r1, #1
 800b526:	4638      	mov	r0, r7
 800b528:	4798      	blx	r3
 800b52a:	b2c0      	uxtb	r0, r0
 800b52c:	e7e9      	b.n	800b502 <_ZN5codal3I2C4readEtPhib+0x6e>
 800b52e:	9101      	str	r1, [sp, #4]

    if (data == NULL || len <= 0)
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800b530:	4798      	blx	r3
 800b532:	683d      	ldr	r5, [r7, #0]
 800b534:	f8df b028 	ldr.w	fp, [pc, #40]	; 800b560 <_ZN5codal3I2C4readEtPhib+0xcc>

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));
 800b538:	68eb      	ldr	r3, [r5, #12]
 800b53a:	9901      	ldr	r1, [sp, #4]
 800b53c:	455b      	cmp	r3, fp
 800b53e:	d0c0      	beq.n	800b4c2 <_ZN5codal3I2C4readEtPhib+0x2e>
 800b540:	f041 0101 	orr.w	r1, r1, #1
 800b544:	b2c9      	uxtb	r1, r1
 800b546:	4638      	mov	r0, r7
 800b548:	4798      	blx	r3
 800b54a:	683d      	ldr	r5, [r7, #0]
 800b54c:	e7b9      	b.n	800b4c2 <_ZN5codal3I2C4readEtPhib+0x2e>

    data[i] = read(NACK);

    // Send a stop condition
    if (!repeated)
        stop();
 800b54e:	4638      	mov	r0, r7
 800b550:	4798      	blx	r3
 800b552:	4640      	mov	r0, r8
 800b554:	e7e3      	b.n	800b51e <_ZN5codal3I2C4readEtPhib+0x8a>
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
    int i = 0;

    if (data == NULL || len <= 0)
        return DEVICE_INVALID_PARAMETER;
 800b556:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800b55a:	e7e0      	b.n	800b51e <_ZN5codal3I2C4readEtPhib+0x8a>
 800b55c:	0800b381 	.word	0x0800b381
 800b560:	0800b389 	.word	0x0800b389

0800b564 <_ZN5codal3I2CC1ERNS_3PinES2_>:
namespace codal
{
/**
  * Constructor.
  */
I2C::I2C(Pin &sda, Pin &scl)
 800b564:	4b01      	ldr	r3, [pc, #4]	; (800b56c <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 800b566:	6003      	str	r3, [r0, #0]
{
}
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	0800c72c 	.word	0x0800c72c

0800b570 <__aeabi_drsub>:
 800b570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b574:	e002      	b.n	800b57c <__adddf3>
 800b576:	bf00      	nop

0800b578 <__aeabi_dsub>:
 800b578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b57c <__adddf3>:
 800b57c:	b530      	push	{r4, r5, lr}
 800b57e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b582:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b586:	ea94 0f05 	teq	r4, r5
 800b58a:	bf08      	it	eq
 800b58c:	ea90 0f02 	teqeq	r0, r2
 800b590:	bf1f      	itttt	ne
 800b592:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b596:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b59a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b59e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b5a2:	f000 80e2 	beq.w	800b76a <__adddf3+0x1ee>
 800b5a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b5aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b5ae:	bfb8      	it	lt
 800b5b0:	426d      	neglt	r5, r5
 800b5b2:	dd0c      	ble.n	800b5ce <__adddf3+0x52>
 800b5b4:	442c      	add	r4, r5
 800b5b6:	ea80 0202 	eor.w	r2, r0, r2
 800b5ba:	ea81 0303 	eor.w	r3, r1, r3
 800b5be:	ea82 0000 	eor.w	r0, r2, r0
 800b5c2:	ea83 0101 	eor.w	r1, r3, r1
 800b5c6:	ea80 0202 	eor.w	r2, r0, r2
 800b5ca:	ea81 0303 	eor.w	r3, r1, r3
 800b5ce:	2d36      	cmp	r5, #54	; 0x36
 800b5d0:	bf88      	it	hi
 800b5d2:	bd30      	pophi	{r4, r5, pc}
 800b5d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b5d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b5dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b5e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b5e4:	d002      	beq.n	800b5ec <__adddf3+0x70>
 800b5e6:	4240      	negs	r0, r0
 800b5e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b5ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b5f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b5f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b5f8:	d002      	beq.n	800b600 <__adddf3+0x84>
 800b5fa:	4252      	negs	r2, r2
 800b5fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b600:	ea94 0f05 	teq	r4, r5
 800b604:	f000 80a7 	beq.w	800b756 <__adddf3+0x1da>
 800b608:	f1a4 0401 	sub.w	r4, r4, #1
 800b60c:	f1d5 0e20 	rsbs	lr, r5, #32
 800b610:	db0d      	blt.n	800b62e <__adddf3+0xb2>
 800b612:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b616:	fa22 f205 	lsr.w	r2, r2, r5
 800b61a:	1880      	adds	r0, r0, r2
 800b61c:	f141 0100 	adc.w	r1, r1, #0
 800b620:	fa03 f20e 	lsl.w	r2, r3, lr
 800b624:	1880      	adds	r0, r0, r2
 800b626:	fa43 f305 	asr.w	r3, r3, r5
 800b62a:	4159      	adcs	r1, r3
 800b62c:	e00e      	b.n	800b64c <__adddf3+0xd0>
 800b62e:	f1a5 0520 	sub.w	r5, r5, #32
 800b632:	f10e 0e20 	add.w	lr, lr, #32
 800b636:	2a01      	cmp	r2, #1
 800b638:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b63c:	bf28      	it	cs
 800b63e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b642:	fa43 f305 	asr.w	r3, r3, r5
 800b646:	18c0      	adds	r0, r0, r3
 800b648:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b64c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b650:	d507      	bpl.n	800b662 <__adddf3+0xe6>
 800b652:	f04f 0e00 	mov.w	lr, #0
 800b656:	f1dc 0c00 	rsbs	ip, ip, #0
 800b65a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b65e:	eb6e 0101 	sbc.w	r1, lr, r1
 800b662:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b666:	d31b      	bcc.n	800b6a0 <__adddf3+0x124>
 800b668:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b66c:	d30c      	bcc.n	800b688 <__adddf3+0x10c>
 800b66e:	0849      	lsrs	r1, r1, #1
 800b670:	ea5f 0030 	movs.w	r0, r0, rrx
 800b674:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b678:	f104 0401 	add.w	r4, r4, #1
 800b67c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b680:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b684:	f080 809a 	bcs.w	800b7bc <__adddf3+0x240>
 800b688:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b68c:	bf08      	it	eq
 800b68e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b692:	f150 0000 	adcs.w	r0, r0, #0
 800b696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b69a:	ea41 0105 	orr.w	r1, r1, r5
 800b69e:	bd30      	pop	{r4, r5, pc}
 800b6a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b6a4:	4140      	adcs	r0, r0
 800b6a6:	eb41 0101 	adc.w	r1, r1, r1
 800b6aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b6ae:	f1a4 0401 	sub.w	r4, r4, #1
 800b6b2:	d1e9      	bne.n	800b688 <__adddf3+0x10c>
 800b6b4:	f091 0f00 	teq	r1, #0
 800b6b8:	bf04      	itt	eq
 800b6ba:	4601      	moveq	r1, r0
 800b6bc:	2000      	moveq	r0, #0
 800b6be:	fab1 f381 	clz	r3, r1
 800b6c2:	bf08      	it	eq
 800b6c4:	3320      	addeq	r3, #32
 800b6c6:	f1a3 030b 	sub.w	r3, r3, #11
 800b6ca:	f1b3 0220 	subs.w	r2, r3, #32
 800b6ce:	da0c      	bge.n	800b6ea <__adddf3+0x16e>
 800b6d0:	320c      	adds	r2, #12
 800b6d2:	dd08      	ble.n	800b6e6 <__adddf3+0x16a>
 800b6d4:	f102 0c14 	add.w	ip, r2, #20
 800b6d8:	f1c2 020c 	rsb	r2, r2, #12
 800b6dc:	fa01 f00c 	lsl.w	r0, r1, ip
 800b6e0:	fa21 f102 	lsr.w	r1, r1, r2
 800b6e4:	e00c      	b.n	800b700 <__adddf3+0x184>
 800b6e6:	f102 0214 	add.w	r2, r2, #20
 800b6ea:	bfd8      	it	le
 800b6ec:	f1c2 0c20 	rsble	ip, r2, #32
 800b6f0:	fa01 f102 	lsl.w	r1, r1, r2
 800b6f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b6f8:	bfdc      	itt	le
 800b6fa:	ea41 010c 	orrle.w	r1, r1, ip
 800b6fe:	4090      	lslle	r0, r2
 800b700:	1ae4      	subs	r4, r4, r3
 800b702:	bfa2      	ittt	ge
 800b704:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b708:	4329      	orrge	r1, r5
 800b70a:	bd30      	popge	{r4, r5, pc}
 800b70c:	ea6f 0404 	mvn.w	r4, r4
 800b710:	3c1f      	subs	r4, #31
 800b712:	da1c      	bge.n	800b74e <__adddf3+0x1d2>
 800b714:	340c      	adds	r4, #12
 800b716:	dc0e      	bgt.n	800b736 <__adddf3+0x1ba>
 800b718:	f104 0414 	add.w	r4, r4, #20
 800b71c:	f1c4 0220 	rsb	r2, r4, #32
 800b720:	fa20 f004 	lsr.w	r0, r0, r4
 800b724:	fa01 f302 	lsl.w	r3, r1, r2
 800b728:	ea40 0003 	orr.w	r0, r0, r3
 800b72c:	fa21 f304 	lsr.w	r3, r1, r4
 800b730:	ea45 0103 	orr.w	r1, r5, r3
 800b734:	bd30      	pop	{r4, r5, pc}
 800b736:	f1c4 040c 	rsb	r4, r4, #12
 800b73a:	f1c4 0220 	rsb	r2, r4, #32
 800b73e:	fa20 f002 	lsr.w	r0, r0, r2
 800b742:	fa01 f304 	lsl.w	r3, r1, r4
 800b746:	ea40 0003 	orr.w	r0, r0, r3
 800b74a:	4629      	mov	r1, r5
 800b74c:	bd30      	pop	{r4, r5, pc}
 800b74e:	fa21 f004 	lsr.w	r0, r1, r4
 800b752:	4629      	mov	r1, r5
 800b754:	bd30      	pop	{r4, r5, pc}
 800b756:	f094 0f00 	teq	r4, #0
 800b75a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b75e:	bf06      	itte	eq
 800b760:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b764:	3401      	addeq	r4, #1
 800b766:	3d01      	subne	r5, #1
 800b768:	e74e      	b.n	800b608 <__adddf3+0x8c>
 800b76a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b76e:	bf18      	it	ne
 800b770:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b774:	d029      	beq.n	800b7ca <__adddf3+0x24e>
 800b776:	ea94 0f05 	teq	r4, r5
 800b77a:	bf08      	it	eq
 800b77c:	ea90 0f02 	teqeq	r0, r2
 800b780:	d005      	beq.n	800b78e <__adddf3+0x212>
 800b782:	ea54 0c00 	orrs.w	ip, r4, r0
 800b786:	bf04      	itt	eq
 800b788:	4619      	moveq	r1, r3
 800b78a:	4610      	moveq	r0, r2
 800b78c:	bd30      	pop	{r4, r5, pc}
 800b78e:	ea91 0f03 	teq	r1, r3
 800b792:	bf1e      	ittt	ne
 800b794:	2100      	movne	r1, #0
 800b796:	2000      	movne	r0, #0
 800b798:	bd30      	popne	{r4, r5, pc}
 800b79a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b79e:	d105      	bne.n	800b7ac <__adddf3+0x230>
 800b7a0:	0040      	lsls	r0, r0, #1
 800b7a2:	4149      	adcs	r1, r1
 800b7a4:	bf28      	it	cs
 800b7a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b7aa:	bd30      	pop	{r4, r5, pc}
 800b7ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b7b0:	bf3c      	itt	cc
 800b7b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b7b6:	bd30      	popcc	{r4, r5, pc}
 800b7b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b7bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b7c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7c4:	f04f 0000 	mov.w	r0, #0
 800b7c8:	bd30      	pop	{r4, r5, pc}
 800b7ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b7ce:	bf1a      	itte	ne
 800b7d0:	4619      	movne	r1, r3
 800b7d2:	4610      	movne	r0, r2
 800b7d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b7d8:	bf1c      	itt	ne
 800b7da:	460b      	movne	r3, r1
 800b7dc:	4602      	movne	r2, r0
 800b7de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b7e2:	bf06      	itte	eq
 800b7e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b7e8:	ea91 0f03 	teqeq	r1, r3
 800b7ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b7f0:	bd30      	pop	{r4, r5, pc}
 800b7f2:	bf00      	nop

0800b7f4 <__aeabi_ui2d>:
 800b7f4:	f090 0f00 	teq	r0, #0
 800b7f8:	bf04      	itt	eq
 800b7fa:	2100      	moveq	r1, #0
 800b7fc:	4770      	bxeq	lr
 800b7fe:	b530      	push	{r4, r5, lr}
 800b800:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b804:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b808:	f04f 0500 	mov.w	r5, #0
 800b80c:	f04f 0100 	mov.w	r1, #0
 800b810:	e750      	b.n	800b6b4 <__adddf3+0x138>
 800b812:	bf00      	nop

0800b814 <__aeabi_i2d>:
 800b814:	f090 0f00 	teq	r0, #0
 800b818:	bf04      	itt	eq
 800b81a:	2100      	moveq	r1, #0
 800b81c:	4770      	bxeq	lr
 800b81e:	b530      	push	{r4, r5, lr}
 800b820:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b824:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b828:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b82c:	bf48      	it	mi
 800b82e:	4240      	negmi	r0, r0
 800b830:	f04f 0100 	mov.w	r1, #0
 800b834:	e73e      	b.n	800b6b4 <__adddf3+0x138>
 800b836:	bf00      	nop

0800b838 <__aeabi_f2d>:
 800b838:	0042      	lsls	r2, r0, #1
 800b83a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b83e:	ea4f 0131 	mov.w	r1, r1, rrx
 800b842:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b846:	bf1f      	itttt	ne
 800b848:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b84c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b850:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b854:	4770      	bxne	lr
 800b856:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800b85a:	bf08      	it	eq
 800b85c:	4770      	bxeq	lr
 800b85e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800b862:	bf04      	itt	eq
 800b864:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800b868:	4770      	bxeq	lr
 800b86a:	b530      	push	{r4, r5, lr}
 800b86c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b878:	e71c      	b.n	800b6b4 <__adddf3+0x138>
 800b87a:	bf00      	nop

0800b87c <__aeabi_ul2d>:
 800b87c:	ea50 0201 	orrs.w	r2, r0, r1
 800b880:	bf08      	it	eq
 800b882:	4770      	bxeq	lr
 800b884:	b530      	push	{r4, r5, lr}
 800b886:	f04f 0500 	mov.w	r5, #0
 800b88a:	e00a      	b.n	800b8a2 <__aeabi_l2d+0x16>

0800b88c <__aeabi_l2d>:
 800b88c:	ea50 0201 	orrs.w	r2, r0, r1
 800b890:	bf08      	it	eq
 800b892:	4770      	bxeq	lr
 800b894:	b530      	push	{r4, r5, lr}
 800b896:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b89a:	d502      	bpl.n	800b8a2 <__aeabi_l2d+0x16>
 800b89c:	4240      	negs	r0, r0
 800b89e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b8a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b8a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b8aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b8ae:	f43f aed8 	beq.w	800b662 <__adddf3+0xe6>
 800b8b2:	f04f 0203 	mov.w	r2, #3
 800b8b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b8ba:	bf18      	it	ne
 800b8bc:	3203      	addne	r2, #3
 800b8be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b8c2:	bf18      	it	ne
 800b8c4:	3203      	addne	r2, #3
 800b8c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b8ca:	f1c2 0320 	rsb	r3, r2, #32
 800b8ce:	fa00 fc03 	lsl.w	ip, r0, r3
 800b8d2:	fa20 f002 	lsr.w	r0, r0, r2
 800b8d6:	fa01 fe03 	lsl.w	lr, r1, r3
 800b8da:	ea40 000e 	orr.w	r0, r0, lr
 800b8de:	fa21 f102 	lsr.w	r1, r1, r2
 800b8e2:	4414      	add	r4, r2
 800b8e4:	e6bd      	b.n	800b662 <__adddf3+0xe6>
 800b8e6:	bf00      	nop

0800b8e8 <__aeabi_d2f>:
 800b8e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800b8ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800b8f0:	bf24      	itt	cs
 800b8f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800b8f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800b8fa:	d90d      	bls.n	800b918 <__aeabi_d2f+0x30>
 800b8fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800b900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800b904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800b908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800b90c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800b910:	bf08      	it	eq
 800b912:	f020 0001 	biceq.w	r0, r0, #1
 800b916:	4770      	bx	lr
 800b918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800b91c:	d121      	bne.n	800b962 <__aeabi_d2f+0x7a>
 800b91e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800b922:	bfbc      	itt	lt
 800b924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800b928:	4770      	bxlt	lr
 800b92a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b92e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800b932:	f1c2 0218 	rsb	r2, r2, #24
 800b936:	f1c2 0c20 	rsb	ip, r2, #32
 800b93a:	fa10 f30c 	lsls.w	r3, r0, ip
 800b93e:	fa20 f002 	lsr.w	r0, r0, r2
 800b942:	bf18      	it	ne
 800b944:	f040 0001 	orrne.w	r0, r0, #1
 800b948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800b94c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800b950:	fa03 fc0c 	lsl.w	ip, r3, ip
 800b954:	ea40 000c 	orr.w	r0, r0, ip
 800b958:	fa23 f302 	lsr.w	r3, r3, r2
 800b95c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b960:	e7cc      	b.n	800b8fc <__aeabi_d2f+0x14>
 800b962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800b966:	d107      	bne.n	800b978 <__aeabi_d2f+0x90>
 800b968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800b96c:	bf1e      	ittt	ne
 800b96e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800b972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800b976:	4770      	bxne	lr
 800b978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800b97c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800b980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop

0800b988 <__powidf2>:
 800b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98c:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 800b990:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
 800b994:	4615      	mov	r5, r2
 800b996:	07e2      	lsls	r2, r4, #31
 800b998:	4606      	mov	r6, r0
 800b99a:	460f      	mov	r7, r1
 800b99c:	bf53      	iteet	pl
 800b99e:	f04f 0800 	movpl.w	r8, #0
 800b9a2:	4680      	movmi	r8, r0
 800b9a4:	4689      	movmi	r9, r1
 800b9a6:	f8df 904c 	ldrpl.w	r9, [pc, #76]	; 800b9f4 <__powidf2+0x6c>
 800b9aa:	0864      	lsrs	r4, r4, #1
 800b9ac:	d013      	beq.n	800b9d6 <__powidf2+0x4e>
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	4632      	mov	r2, r6
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f6 fc9d 	bl	80022f4 <__wrap___aeabi_dmul>
 800b9ba:	07e3      	lsls	r3, r4, #31
 800b9bc:	4606      	mov	r6, r0
 800b9be:	460f      	mov	r7, r1
 800b9c0:	d5f3      	bpl.n	800b9aa <__powidf2+0x22>
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	463b      	mov	r3, r7
 800b9ca:	f7f6 fc93 	bl	80022f4 <__wrap___aeabi_dmul>
 800b9ce:	0864      	lsrs	r4, r4, #1
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4689      	mov	r9, r1
 800b9d4:	d1eb      	bne.n	800b9ae <__powidf2+0x26>
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	da07      	bge.n	800b9ea <__powidf2+0x62>
 800b9da:	4642      	mov	r2, r8
 800b9dc:	464b      	mov	r3, r9
 800b9de:	2000      	movs	r0, #0
 800b9e0:	4904      	ldr	r1, [pc, #16]	; (800b9f4 <__powidf2+0x6c>)
 800b9e2:	f7f6 fc6f 	bl	80022c4 <__wrap___aeabi_ddiv>
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f2:	bf00      	nop
 800b9f4:	3ff00000 	.word	0x3ff00000
	...

0800ba00 <_ZN3pxt20functionsAndBytecodeE>:
 800ba00:	08010801 42424242 08010801 8de9d83e     ....BBBB....>...
 800ba10:	08008709 08008b69 08008b95 08007cdd     ....i........|..
 800ba20:	080083d1 08008e49 080094b5 0800865d     ....I.......]...
 800ba30:	08008a15 08008a21 08006e5d 08008a2d     ....!...]n..-...
 800ba40:	080086b9 080089f5 08007b49 080071b9     ........I{...q..
 800ba50:	080070ed 080070e9 080072dd 08006c19     .p...p...r...l..
 800ba60:	08006d95 08006da5 08006db9 08006dd5     .m...m...m...m..
 800ba70:	080076c1 08007625 08007bc9 08007c21     .v..%v...{..!|..
 800ba80:	080094fd 08009501 0800bd90 0800bd30     ............0...
 800ba90:	0800bd60 0800bdc0 0800853d 08008715     `.......=.......
 800baa0:	080084e9 08007cd1 0800951d 08009515     .....|..........
 800bab0:	08009519 08007a29 0800785d 080078c1     ....)z..]x...x..
 800bac0:	08006a09 08006e01 08006e15 08006e19     .j...n...n...n..
 800bad0:	08006e21 08006e2d 08006e35 08006e45     !n..-n..5n..En..
 800bae0:	08006e4d 08006e55 08007811 08007841     Mn..Un...x..Ax..
 800baf0:	08006935 08006941 0800695d 08006d79     5i..Ai..]i..ym..
 800bb00:	0800699d 08006a2d 08006cc5 08006b9d     .i..-j...l...k..
 800bb10:	08006bd1 08006c01 08006c11 080077ed     .k...l...l...w..
 800bb20:	080072e9 0800730d 08007335 08007389     .r...s..5s...s..
 800bb30:	080073b1 080071bd 080072ad 080071e9     .s...q...r...q..
 800bb40:	08007215 0800723d 08007265 08007285     .r..=r..er...r..
 800bb50:	0800797d 080079a1 080079c5 080079e9     }y...y...y...y..
 800bb60:	08007a09 080077f1 08007801 080076a1     .z...w...x...v..
 800bb70:	080076b1 08007411 08007439 08006de1     .v...t..9t...m..
 800bb80:	08007461 08007515 08007529 0800753d     at...u..)u..=u..
 800bb90:	08007551 08007565 08007579 0800758d     Qu..eu..yu...u..
 800bba0:	080075a1 080075b5 080075c9 080075dd     .u...u...u...u..
 800bbb0:	080075f1 08007605 08006df1 08006df9     .u...v...m...m..
 800bbc0:	08009505 08006e5d 08006e6d 08006ea9     ....]n..mn...n..
 800bbd0:	08006ead 08006eb1 08006ec5 08006f09     .n...n...n...o..
 800bbe0:	08006f0d 08006f19 08006f21 08006f35     .o...o..!o..5o..
 800bbf0:	08006f55 08006fe5 08006ff9 08007031     Uo...o...o..1p..
 800bc00:	08007045 08007051 08007055 08007b25     Ep..Qp..Up..%{..
 800bc10:	080061c5 080061d9 080061ed 08006201     .a...a...a...b..
 800bc20:	08006215 08006229 0800623d 08006251     .b..)b..=b..Qb..
 800bc30:	080062c9 080062cd 080062e5 08006629     .b...b...b..)f..
 800bc40:	08006765 08006349 0800634d 08006379     eg..Ic..Mc..yc..
 800bc50:	080063a1 08006421 08006461 080064d5     .c..!d..ad...d..
 800bc60:	080064e9 0800852d 08008531 08006781     .d..-...1....g..
 800bc70:	08006785 08006789 0800678d 08006795     .g...g...g...g..
 800bc80:	08006799 0800679d 080067a1 080067b1     .g...g...g...g..
 800bc90:	080067b5 080067bd 080067d1 08002325     .g...g...g..%#..
 800bca0:	080023b9 0800244d 08002355 080022c5     .#..M$..U#..."..
 800bcb0:	080022f5 08008e49 0800913d 080091f9     ."..I...=.......
 800bcc0:	0800920d 0800921d 08009225 08009231     ........%...1...
 800bcd0:	08009239 08009241 08009251 08009259     9...A...Q...Y...
 800bce0:	08009279 080092b1 0800933d 08009355     y.......=...U...
 800bcf0:	08009359 0800936d 08009019 08009031     Y...m.......1...
 800bd00:	08009041 08009049 08009055 080090a5     A...I...U.......
 800bd10:	080090f1 080093e5 0800940d 0800944d     ............M...
 800bd20:	08009475 00000000 00000000 00000000     u...............

0800bd30 <_ZN3pxt9buffer_vtE>:
 800bd30:	f9040008 00000000 00000003 00000000     ................
 800bd40:	080067d5 08007b49 00000000 080067e5     .g..I{.......g..
	...

0800bd60 <_ZN3pxt9number_vtE>:
 800bd60:	f902000c 00000000 00000002 00000000     ................
 800bd70:	080067d5 08007b49 00000000 080067e1     .g..I{.......g..
	...

0800bd90 <_ZN3pxt9string_vtE>:
 800bd90:	f9030008 00000000 00000001 00000000     ................
 800bda0:	080067d5 08007b49 00000000 080067d9     .g..I{.......g..
	...

0800bdc0 <_ZN3pxt16RefAction_vtableE>:
 800bdc0:	f904000c 00000000 00000004 00000000     ................
 800bdd0:	08008655 08008555 080084c1 08008501     U...U...........
	...

0800bdf0 <_ZN3pxtL13RefMap_vtableE>:
 800bdf0:	f9040014 00000000 00000008 00000000     ................
 800be00:	08008549 0800858d 080084d1 08008511     I...............
	...

0800be20 <_ZN3pxtL18RefRefLocal_vtableE>:
 800be20:	f9040008 00000000 00000007 00000000     ................
 800be30:	08008659 0800857d 080084c9 0800850d     Y...}...........
	...

0800be50 <_ZN3pxtL20RefCollection_vtableE>:
 800be50:	f904000c 00000000 00000006 00000000     ................
 800be60:	08008541 0800893d 080084b9 080084fd     A...=...........
 800be70:	00000000 33323130 37363534 62613938     ....0123456789ab
 800be80:	66656463 00000000                       cdef....

0800be88 <CSWTCH.116>:
 800be88:	0800bf7c 0800bf38 0800c000 0800c020     |...8....... ...
 800be98:	0800c010 0800bf6c 6c696166 74206465     ....l...failed t
 800bea8:	20657079 63656863 6f66206b 70252072     ype check for %p
 800beb8:	00000000 25205456 202d2070 746a626f     ....VT %p - objt
 800bec8:	20657079 63206425 7373616c 25206f4e     ype %d classNo %
 800bed8:	00000064 7373696d 20676e69 706f7270     d...missing prop
 800bee8:	79747265 206e6f20 00007025 6665525b     erty on %p..[Ref
 800bef8:	656a624f 72207463 3d736665 76206425     Object refs=%d v
 800bf08:	70253d74 3d6c6320 73206425 64253d7a     t=%p cl=%d sz=%d
 800bf18:	0000005d 74614e5b 20657669 005d7025     ]...[Native %p].
 800bf28:	2073255b 3d207025 5d732520 00000000     [%s %p = %s]....

0800bf38 <_ZN3pxtL10sBooleanTpE>:
 800bf38:	54585040 6f623a40 61656c6f 0000006e     @PXT@:boolean...

0800bf48 <_ZN3pxtL10sUndefinedE>:
 800bf48:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800bf58 <_ZN3pxtL11emptyBufferE>:
 800bf58:	54585040 00003a23 00000000              @PXT#:......

0800bf64 <_ZN3pxtL11emptyStringE>:
 800bf64:	54585040 00003a40                       @PXT@:..

0800bf6c <_ZN3pxtL11sFunctionTpE>:
 800bf6c:	54585040 75663a40 6974636e 00006e6f     @PXT@:function..

0800bf7c <_ZN3pxtL12sUndefinedTpE>:
 800bf7c:	54585040 6e753a40 69666564 0064656e     @PXT@:undefined.

0800bf8c <_ZN3pxtL4sInfE>:
 800bf8c:	54585040 6e493a40 696e6966 00007974     @PXT@:Infinity..

0800bf9c <_ZN3pxtL4sNaNE>:
 800bf9c:	54585040 614e3a40 0000004e              @PXT@:NaN...

0800bfa8 <_ZN3pxtL5sMInfE>:
 800bfa8:	54585040 492d3a40 6e69666e 00797469     @PXT@:-Infinity.

0800bfb8 <_ZN3pxtL5sNullE>:
 800bfb8:	54585040 756e3a40 00006c6c              @PXT@:null..

0800bfc4 <_ZN3pxtL5sTrueE>:
 800bfc4:	54585040 72743a40 00006575              @PXT@:true..

0800bfd0 <_ZN3pxtL6sFalseE>:
 800bfd0:	54585040 61663a40 0065736c              @PXT@:false.

0800bfdc <_ZN3pxtL7sObjectE>:
 800bfdc:	54585040 4f5b3a40 63656a62 00005d74     @PXT@:[Object]..

0800bfec <_ZN3pxtL9sFunctionE>:
 800bfec:	54585040 465b3a40 74636e75 5d6e6f69     @PXT@:[Function]
 800bffc:	00000000                                ....

0800c000 <_ZN3pxtL9sNumberTpE>:
 800c000:	54585040 756e3a40 7265626d 00000000     @PXT@:number....

0800c010 <_ZN3pxtL9sObjectTpE>:
 800c010:	54585040 626f3a40 7463656a 00000000     @PXT@:object....

0800c020 <_ZN3pxtL9sStringTpE>:
 800c020:	54585040 74733a40 676e6972 00000000     @PXT@:string....
 800c030:	414d2d2d 00004b52 253a5052 64252f70     --MARK..RP:%p/%d
 800c040:	00000000 253a4752 64252f70 00000000     ....RG:%p/%d....
 800c050:	25204347 64252f64 65726620 00000065     GC %d/%d free...
 800c060:	52666552 6f4c6665 206c6163 72207025     RefRefLocal %p r
 800c070:	2064253d 70253d76 00000000 652d2d2d     =%d v=%p....---e
 800c080:	5f636578 616e6962 61207972 20726464     xec_binary addr 
 800c090:	00000000 6576202c 00002072 4220283a     ...., ver ..:( B
 800c0a0:	72206461 69746e75 7620656d 69737265     ad runtime versi
 800c0b0:	00006e6f 652d2d2d 5f636578 616e6962     on..---exec_bina
 800c0c0:	61207972 636f6c6c 00657461 652d2d2d     ry allocate.---e
 800c0d0:	5f636578 616e6962 63207972 61706d6f     xec_binary compa
 800c0e0:	00006572 652d2d2d 5f636578 616e6962     re..---exec_bina
 800c0f0:	69207972 5074696e 43667265 746e756f     ry initPerfCount
 800c100:	00737265 652d2d2d 5f636578 616e6962     ers.---exec_bina
 800c110:	69207972 5274696e 69746e75 0000656d     ry initRuntime..
 800c120:	652d2d2d 5f636578 616e6962 72207972     ---exec_binary r
 800c130:	63416e75 6e6f6974 00000030 652d2d2d     unAction0...---e
 800c140:	5f636578 616e6962 72207972 61656c65     xec_binary relea
 800c150:	69466573 00726562 4620283a 656c6961     seFiber.:( Faile
 800c160:	61702064 61697472 6c66206c 00687361     d partial flash.
 800c170:	43666552 656c6c6f 6f697463 7025206e     RefCollection %p
 800c180:	253d7220 69732064 253d657a 00000064      r=%d size=%d...
 800c190:	52666552 726f6365 70252064 253d7220     RefRecord %p r=%
 800c1a0:	69732064 253d657a 79622064 00736574     d size=%d bytes.
 800c1b0:	702d2d2d 3a3a7478 72617473 00000074     ---pxt::start...
 800c1c0:	4d666552 25207061 3d722070 73206425     RefMap %p r=%d s
 800c1d0:	3d657a69 00006425 6d676553 3a746e65     ize=%d..Segment:
 800c1e0:	2c702520 6e656c20 3a687467 2c642520      %p, length: %d,
 800c1f0:	7a697320 25203a65 00000064 25203e2d      size: %d...-> %
 800c200:	00000064 2a2a2a2a 6843202a 206b6365     d...***** Check 
 800c210:	6c696146 203a6465 00000000 6f727245     Failed: ....Erro
 800c220:	25203a72 255b2064 00005d64 41666552     r: %d [%d]..RefA
 800c230:	6f697463 7025206e 253d7220 63702064     ction %p r=%d pc
 800c240:	2058253d 657a6973 0064253d 692d2d2d     =%X size=%d.---i
 800c250:	4374696e 6c61646f 75706320 6f6c635f     nitCodal cpu_clo
 800c260:	695f6b63 0074696e 692d2d2d 4374696e     ck_init.---initC
 800c270:	6c61646f 6d6f6320 696e496d 00000074     odal commInit...
 800c280:	692d2d2d 4374696e 6c61646f 68637320     ---initCodal sch
 800c290:	6c756465 695f7265 0074696e 692d2d2d     eduler_init.---i
 800c2a0:	4374696e 6c61646f 6d6f6320 656e6f70     nitCodal compone
 800c2b0:	2e73746e 74696e69 00000000 692d2d2d     nts.init....---i
 800c2c0:	4374696e 6c61646f 62737520 696e695f     nitCodal usb_ini
 800c2d0:	00000074 692d2d2d 4374696e 6c61646f     t...---initCodal
 800c2e0:	6e6f6420 00000065 64255352 2f70253a      done...RS%d:%p/
 800c2f0:	00006425 6e6b6e75 006e776f 73252023     %d..unknown.# %s
 800c300:	00000000 73252023 7025203a 00000000     ....# %s: %p....

0800c310 <_ZTVN5codal16STM32BluePillPinE>:
	...
 800c318:	0800aecd 0800ae29 0800af75 0800ae2d     ....)...u...-...
 800c328:	0800ae49 0800ae75 0800ae79 0800ae89     I...u...y.......
 800c338:	0800ae99 0800aea5 0800aeb5 08009125     ............%...
 800c348:	0800b011 0800912d 0800aebd 0800af4d     ....-.......M...
 800c358:	0800aec5 08009135 0800afad 702d2d2d     ....5.......---p
 800c368:	3a3a7478 74616c70 6d726f66 696e695f     xt::platform_ini
 800c378:	00000074 454d440a 0a3a4753 00000000     t....DMESG:.....
 800c388:	00000a0a                                ....

0800c38c <_ZTVN5codal11CodalDeviceE>:
	...
 800c394:	08009761 0800973d 08009759 08009735     a...=...Y...5...
 800c3a4:	08009755 0800974d 08009745 00007830     U...M...E...0x..
 800c3b4:	53454d44 696c2047 7420656e 6c206f6f     DMESG line too l
 800c3c4:	21676e6f 0000000a 00000025 003f3f3f     ong!....%...???.
 800c3d4:	00000a0d                                ....

0800c3d8 <_ZTVN5codal5TimerE>:
	...
 800c3e0:	08003409 08003409 0800a4e5 0800a4d9     .4...4..........

0800c3f0 <_ZTVN5codal14CodalComponentE>:
	...
 800c3f8:	08008bed 080095b1 080095b5 0800a771     ............q...
 800c408:	0800a789                                ....

0800c40c <_ZTVN5codal10EventModelE>:
	...
 800c414:	0800a745 080095b9 08009955              E.......U...

0800c420 <_ZTVN5codal10MessageBusE>:
	...
 800c428:	0800ab3d 0800a861 0800a7d9 0800a759     =...a.......Y...
 800c438:	0800aca1 0800ad0d fffffff8 00000000     ................
 800c448:	08008bed 080095b1 080095b5 0800ad05     ................
 800c458:	0800ad21                                !...

0800c45c <_ZTVN5codal3_cm3I2CE>:
	...
 800c464:	0800ae01 0800b381 0800b381 0800b389     ................
 800c474:	0800b389 0800ae05 0800b391 0800ae05     ................
 800c484:	0800ae09 44746573 74696769 61566c61     ....setDigitalVa
 800c494:	0065756c 6f697067 7465735f 49504728     lue.gpio_set(GPI
 800c4a4:	202c434f 4f495047 00293331 6f697067     OC, GPIO13).gpio
 800c4b4:	656c635f 47287261 434f4950 5047202c     _clear(GPIOC, GP
 800c4c4:	33314f49 00000029 202a2a2a 61646f63     IO13)...*** coda
 800c4d4:	6970206c 0000206e 6d616e20 00002065     l pin .. name ..

0800c4e4 <_ZTVN5codal3_cm3PinE>:
	...
 800c4ec:	0800aecd 0800ae29 0800af75 0800ae2d     ....)...u...-...
 800c4fc:	0800ae49 0800ae75 0800ae79 0800ae89     I...u...y.......
 800c50c:	0800ae99 0800aea5 0800aeb5 08009125     ............%...
 800c51c:	0800b011 0800912d 0800aebd 0800af4d     ....-.......M...
 800c52c:	0800aec5 08009135 0800afad 20495053     ....5.......SPI 
 800c53c:	74736e69 65636e61 00702520 202a2a2a     instance %p.*** 
 800c54c:	61646f63 7073206c 6f6d2069 00206973     codal spi mosi .
 800c55c:	73696d20 0000206f 6c637320 0000206b      miso .. sclk ..

0800c56c <_ZTVN5codal3_cm3SPIE>:
	...
 800c574:	0800b0a9 0800b0c9 0800b0b5 0800b0c5     ................
 800c584:	0800b191 656d6974 6e692072 00007469     ....timer init..

0800c594 <_ZTVN5codal3_cm5TimerE>:
	...
 800c59c:	0800b239 0800b24d 0800a4e5 0800a4d9     9...M...........
 800c5ac:	6d6e6970 6e207061 6620746f 646e756f     pinmap not found
 800c5bc:	726f6620 666e6320 00000000 6d6e6970      for cnf....pinm
 800c5cc:	6e207061 6620746f 646e756f 726f6620     ap not found for
 800c5dc:	646f6d20 00000065 6d6e6970 6e207061      mode...pinmap n
 800c5ec:	6620746f 646e756f 726f6620 72657020     ot found for per
 800c5fc:	65687069 006c6172                       ipheral.

0800c604 <PinMap_SPI_MISO>:
 800c604:	00000068 40013000 00010000 00000070     h....0.@....p...
 800c614:	40003800 00010000 00000074 40003c00     .8.@....t....<.@
 800c624:	00010000 0000006c 40013000 00010001     ....l....0.@....
 800c634:	00000078 40003c00 00010001 000000ff     x....<.@........
 800c644:	ffffffff 00ffff00                       ........

0800c64c <PinMap_SPI_MOSI>:
 800c64c:	00000069 40013000 00020300 00000071     i....0.@....q...
 800c65c:	40003800 00020300 00000075 40003c00     .8.@....u....<.@
 800c66c:	00020300 0000006d 40013000 00020301     ....m....0.@....
 800c67c:	00000079 40003c00 00020301 000000ff     y....<.@........
 800c68c:	ffffffff 00ffff00                       ........

0800c694 <PinMap_SPI_NSS>:
 800c694:	00000066 40013000 00020300 0000006e     f....0.@....n...
 800c6a4:	40003800 00020300 00000072 40003c00     .8.@....r....<.@
 800c6b4:	00020300 0000006a 40013000 00020301     ....j....0.@....
 800c6c4:	00000076 40003c00 00020301 000000ff     v....<.@........
 800c6d4:	ffffffff 00ffff00                       ........

0800c6dc <PinMap_SPI_SCK>:
 800c6dc:	00000067 40013000 00020300 0000006f     g....0.@....o...
 800c6ec:	40003800 00020300 00000073 40003c00     .8.@....s....<.@
 800c6fc:	00020300 0000006b 40013000 00020301     ....k....0.@....
 800c70c:	00000077 40003c00 00020301 000000ff     w....<.@........
 800c71c:	ffffffff 00ffff00                       ........

0800c724 <_ZTVN5codal3I2CE>:
	...
 800c72c:	0800b379 0800b381 0800b381 0800b389     y...............
 800c73c:	0800b389 0800b401 0800b391 0800b495     ................
 800c74c:	0800b3b1                                ....
